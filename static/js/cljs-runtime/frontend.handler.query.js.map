{"version":3,"sources":["frontend/handler/query.cljs"],"mappings":"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","names":["frontend.handler.query/normalize-query-function","ast","result","clojure.walk/prewalk","f","cljs.core/list?","cljs.core/Keyword","cljs.core/second","cljs.core/contains?","cljs.core/first","cljs.core/List","clojure.walk/postwalk","G__105000","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/vec","vals","p1__104996#","cljs.core.map","cljs.core.get_in","int?","cljs.core/some","cljs.core/integer?"],"sourcesContent":["(ns frontend.handler.query\n  (:require [clojure.walk :as walk]))\n\n(defn normalize-query-function\n  [ast result]\n  (let [ast (walk/prewalk\n             (fn [f]\n               (if (and (list? f)\n                        (keyword? (second f))\n                        (contains? #{'sum 'average 'count 'min 'max} (first f)))\n                 (if (contains? #{'min 'max} (first f))\n                   (list\n                    'apply\n                    (first f)\n                    (list 'map (second f) 'result))\n                   (list\n                    (first f)\n                    (list 'map (second f) 'result)))\n                 f))\n             ast)]\n    (walk/postwalk\n     (fn [f]\n       (cond\n         (keyword? f)\n         (case f\n           :block\n           :block/content\n\n           :page\n           :block/name\n\n           :created-at\n           :block/created-at\n\n           :updated-at\n           :block/updated-at\n\n           (let [vals (map #(get-in % [:block/properties f]) result)\n                 int? (some integer? vals)]\n             `(~'fn [~'b]\n               (~'let [~'result-str (~'get-in ~'b [:block/properties ~f])\n                       ~'result-num (~'parseFloat ~'result-str)\n                       ~'result (if (~'isNaN ~'result-num) ~'result-str ~'result-num)]\n                (~'or ~'result (~'when ~int? 0))))))\n\n         :else\n         f))\n     ast)))\n"]}