{"version":3,"sources":["frontend/modules/outliner/core.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__62565","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha/or-spec-impl","datascript.impl.entity/entity?","this__4502__auto__","k__4503__auto__","this__4504__auto__","k62577","else__4505__auto__","G__62581","cljs.core/Keyword","data","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__62582","vec__62583","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__62576","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this62578","other62579","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__62606","this__4510__auto__","k__4511__auto__","pred__62614","cljs.core/keyword-identical?","expr__62615","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","frontend.modules.outliner.core/Block","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__62580","extmap__4542__auto__","G__62626","cljs.core/record?","frontend.modules.outliner.core/->Block","frontend.modules.outliner.core/map->Block","frontend.modules.outliner.core/block","m","js/Error","frontend.util.format","cljs.core/type","frontend.modules.outliner.core/get-data","block","frontend.modules.outliner.core/get-block-by-id","id","c","frontend.db.conn.get_db","r","frontend.db.outliner/get-by-id","frontend.modules.outliner.utils/->block-lookup-ref","frontend.modules.outliner.core/get-by-parent-&-left","parent-uuid","left-uuid","parent-id","G__62631","frontend.db/entity","left-id","G__62632","G__62633","frontend.db.model/get-by-parent-&-left","frontend.db/pull","frontend.modules.outliner.core/block-with-timestamps","updated-at","frontend.util/time-ms","G__62634","frontend.modules.outliner.core/remove-orphaned-page-refs!","db-id","txs-state","old-refs","new-refs","cljs.core.not_EQ_","cljs.core/set","cljs.core.map","ref","or__4253__auto__","and__4251__auto__","G__62635","old-pages","frontend.db.model.get_entities_by_ids","cljs.core.remove","e","cljs.core/nil?","orphaned-pages","frontend.db.model/get-orphaned-pages","page","refs","tx","cljs.core.mapv","cljs.core.swap_BANG_","state","cljs.core/vec","cljs.core/PROTOCOL_SENTINEL","this","temp__5720__auto__","block-id","cljs.core.get_in","uuid","new-id","frontend.db/new-block-id","G__62636","frontend.db/transact!","frontend.modules.outliner.utils/->block-id","frontend.modules.outliner.utils/check-block-id","cljs.core.update","cljs.core/assoc","frontend.modules.outliner.tree/-get-parent-id","frontend.modules.outliner.tree/-get-left-id","frontend.modules.outliner.tree/-get-id","frontend.modules.outliner.datascript/outliner-txs-state?","logseq.graph-parser.util/remove-nils","frontend.state/enable-block-timestamps?","other-tx","block-entity","txs","attribute","frontend.db-schema/retract-attributes","cljs.core/conj","children?","ids","children","G__62637","G__62638","frontend.db/get-block-children","frontend.state/get-current-repo","children-ids","cljs.core.conj","cljs.core/not","immediate-children","G__62639","G__62640","frontend.db/get-block-immediate-children","frontend.modules.outliner.tree/-get-left","cljs.core.map_indexed","idx","child","parent","G__62641","cljs.core/concat","frontend.db.model/get-block-immediate-children","frontend.modules.outliner.core/get-right-node","node","frontend.modules.outliner.tree/satisfied-inode?","frontend.modules.outliner.tree/-get-right","frontend.modules.outliner.core/get-right-sibling","frontend.modules.outliner.core/assoc-level-aux","tree-vec","children-key","init-level","children'","G__62642","G__62643","G__62644","G__62645","frontend.modules.outliner.core/assoc-level","frontend.modules.outliner.core/assign-temp-id","blocks","replace-empty-target?","target-block","frontend.modules.outliner.core/find-outdented-block-prev-hop","outdented-block","cljs.core/reverse","p1__62646#","cljs.core.take_while","p1__62647#","cljs.core.drop_while","matched","cljs.core/first","cljs.core/rest","frontend.modules.outliner.core/compute-block-parent","prev-hop","top-level?","sibling?","get-new-id","frontend.modules.outliner.core/compute-block-left","left","left-exists-in-blocks?","G__62648","G__62649","frontend.modules.outliner.core/get-left-nodes","limit","frontend.modules.outliner.tree/-get-parent","result","temp__5718__auto__","frontend.modules.outliner.core/page-first-child?","frontend.modules.outliner.core/page-block?","var_args","G__62653","frontend.modules.outliner.core/tree-vec-flatten","frontend.modules.outliner.core.tree_vec_flatten","p1__62650#","cljs.core.mapcat","cljs.core/tree-seq","p1__62651#","frontend.modules.outliner.core/save-block","block'","cljs.core/deref","cljs.core.atom","frontend.modules.outliner.tree/-save","frontend.modules.outliner.core/blocks-with-level","cljs.core/sequential?","root","cljs.core/empty?","parent-level","cljs.core.filter","x","cljs.core/second","level","m'","frontend.modules.outliner.core/get-top-level-blocks","level-blocks","b","frontend.modules.outliner.core/get-right-siblings","frontend.modules.outliner.tree/-get-children","p1__62654#","cljs.core/split-with","cljs.core/last","p__62655","map__62656","cljs.core/--destructure-map","frontend.modules.outliner.core/insert-blocks-aux","keep-uuid?","move?","outliner-op","block-uuids","uuids","cljs.core/zipmap","cljs.core.repeatedly","cljs.core/random-uuid","id->new-uuid","target-page","lookup","cljs.core/integer?","indent-outdent?","p__62657","map__62658","outdented-block?","G__62659","cljs.core.merge","p__62661","map__62662","frontend.modules.outliner.core/insert-blocks","cljs.spec.alpha.valid_QMARK_","target-block'","G__62663","_","clojure.string/blank?","blocks'","insert-opts","cljs.core/some","frontend.state/pub-event!","p1__62660#","cljs.core.ex_info","uuids-tx","target-node","next","frontend.modules.outliner.tree/-get-down","next-tx","full-tx","frontend.util.concat_without_nil","frontend.state/editing?","frontend.state.set_edit_content_BANG_","frontend.state/get-edit-input-id","frontend.modules.outliner.core/delete-block","right-node","frontend.modules.outliner.tree/-del","left-node","new-right-node","frontend.modules.outliner.tree/-set-left-id","p__62664","map__62665","frontend.modules.outliner.core/delete-blocks","frontend.modules.outliner.datascript/new-outliner-txs-state","block-ids","start-block","end-block","start-node","end-node","end-node-parents","G__62666","G__62667","G__62668","frontend.db/get-block-parents","self-block?","left-node-id","end-node-left-nodes","parents","G__62669","G__62670","G__62671","clojure.set.intersection","G__62672","frontend.util/pprint","seq__62673","chunk__62674","count__62675","i__62676","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","frontend.modules.outliner.core/build-move-blocks-next-tx","id->blocks","top-level-blocks","top-level-blocks-ids","right-block","p__62678","map__62679","frontend.modules.outliner.core/move-blocks","G__62680","G__62681","move-parents-to-child?","map__62682","first-block","tx-data","first-block-page","not-same-page?","move-blocks-next-tx","children-page-tx","p1__62677#","G__62683","G__62684","frontend.db/get-block-children-ids","tx-meta","G__62685","frontend.modules.outliner.core/move-blocks-up-down","up?","cljs.core/boolean?","G__62686","first-block-parent","left-left","last-top-block","last-top-block-parent","right","opts","target-children","frontend.db.model.sort_by_left","parent-right","frontend.modules.outliner.core/indent-outdent-blocks","indent?","G__62687","G__62688","db","frontend.db/get-db","concat-tx-fn","results","cljs.core.apply","frontend.util/concat-without-nil","last-direct-child-id","frontend.db.model.get_block_last_direct_child","last-direct-child","collapsed-tx","G__62689","frontend.state/logical-outdenting?","G__62690","right-siblings","result2","frontend.modules.outliner.core/*transaction-data*","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.modules.outliner.core/op-transact!","seq62693","G__62694","self__4851__auto__","fn-var","args","cljs.core/var?","cljs.core/meta","cljs.core.conj_BANG_","cljs.core/select-keys","frontend.modules.outliner.core/save-block!","frontend.modules.outliner.core.op_transact_BANG_","frontend.modules.outliner.core/insert-blocks!","frontend.modules.outliner.core/delete-blocks!","frontend.modules.outliner.core/move-blocks!","frontend.modules.outliner.core/move-blocks-up-down!","frontend.modules.outliner.core/indent-outdent-blocks!"],"sourcesContent":["(ns frontend.modules.outliner.core\n  (:require [clojure.set :as set]\n            [clojure.string :as string]\n            [datascript.impl.entity :as de]\n            [frontend.db :as db]\n            [frontend.db.model :as db-model]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.conn :as conn]\n            [frontend.db.outliner :as db-outliner]\n            [frontend.modules.outliner.datascript :as ds]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.modules.outliner.utils :as outliner-u]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [cljs.spec.alpha :as s]))\n\n(s/def ::block-map (s/keys :req [:db/id :block/uuid]\n                           :opt [:block/page :block/left :block/parent]))\n\n(s/def ::block-map-or-entity (s/or :entity de/entity?\n                                   :map ::block-map))\n\n(defrecord Block [data])\n\n(defn block\n  [m]\n  (assert (map? m) (util/format \"block data must be map, got: %s %s\" (type m) m))\n  (->Block m))\n\n(defn get-data\n  [block]\n  (:data block))\n\n(defn get-block-by-id\n  [id]\n  (let [c (conn/get-db false)\n        r (db-outliner/get-by-id c (outliner-u/->block-lookup-ref id))]\n    (when r (->Block r))))\n\n(defn- get-by-parent-&-left\n  [parent-uuid left-uuid]\n  (let [parent-id (:db/id (db/entity [:block/uuid parent-uuid]))\n        left-id (:db/id (db/entity [:block/uuid left-uuid]))]\n    (some->\n     (db-model/get-by-parent-&-left (conn/get-db) parent-id left-id)\n     :db/id\n     db/pull\n     block)))\n\n(defn- block-with-timestamps\n  [block]\n  (let [updated-at (util/time-ms)\n        block (cond->\n                (assoc block :block/updated-at updated-at)\n                (nil? (:block/created-at block))\n                (assoc :block/created-at updated-at))]\n    block))\n\n(defn- remove-orphaned-page-refs!\n  [db-id txs-state old-refs new-refs]\n  (when (not= old-refs new-refs)\n    (let [new-refs (set (map (fn [ref]\n                               (or (:block/name ref)\n                                   (and (:db/id ref)\n                                        (:block/name (db/entity (:db/id ref)))))) new-refs))\n          old-pages (->> (map :db/id old-refs)\n                         (db-model/get-entities-by-ids)\n                         (remove (fn [e] (contains? new-refs (:block/name e))))\n                         (map :block/name)\n                         (remove nil?))\n          orphaned-pages (when (seq old-pages)\n                           (db-model/get-orphaned-pages {:pages old-pages\n                                                         :empty-ref-f (fn [page]\n                                                                        (let [refs (:block/_refs page)]\n                                                                          (or (zero? (count refs))\n                                                                              (= #{db-id} (set (map :db/id refs))))))}))]\n      (when (seq orphaned-pages)\n        (let [tx (mapv (fn [page] [:db/retractEntity (:db/id page)]) orphaned-pages)]\n          (swap! txs-state (fn [state] (vec (concat state tx)))))))))\n\n;; -get-id, -get-parent-id, -get-left-id return block-id\n;; the :block/parent, :block/left should be datascript lookup ref\n\n(extend-type Block\n  tree/INode\n  (-get-id [this]\n    (or\n     (when-let [block-id (get-in this [:data :block/uuid])]\n       block-id)\n     (when-let [db-id (get-in this [:data :db/id])]\n       (let [uuid (:block/uuid (db/pull db-id))]\n         (if uuid\n           uuid\n           (let [new-id (db/new-block-id)]\n             (db/transact! [{:db/id db-id\n                             :block/uuid new-id}])\n             new-id))))))\n\n  (-get-parent-id [this]\n    (-> (get-in this [:data :block/parent])\n      (outliner-u/->block-id)))\n\n  (-set-parent-id [this parent-id]\n    (outliner-u/check-block-id parent-id)\n    (update this :data assoc :block/parent [:block/uuid parent-id]))\n\n  (-get-left-id [this]\n    (-> (get-in this [:data :block/left])\n      (outliner-u/->block-id)))\n\n  (-set-left-id [this left-id]\n    (outliner-u/check-block-id left-id)\n    (update this :data assoc :block/left [:block/uuid left-id]))\n\n  (-get-parent [this]\n    (when-let [parent-id (tree/-get-parent-id this)]\n      (get-block-by-id parent-id)))\n\n  (-get-left [this]\n    (let [left-id (tree/-get-left-id this)]\n      (get-block-by-id left-id)))\n\n  (-get-right [this]\n    (let [left-id (tree/-get-id this)\n          parent-id (tree/-get-parent-id this)]\n      (get-by-parent-&-left parent-id left-id)))\n\n  (-get-down [this]\n    (let [parent-id (tree/-get-id this)]\n      (get-by-parent-&-left parent-id parent-id)))\n\n  (-save [this txs-state]\n    (assert (ds/outliner-txs-state? txs-state)\n            \"db should be satisfied outliner-tx-state?\")\n    (let [m (-> (:data this)\n                (dissoc :block/children :block/meta :block/top? :block/bottom?\n                        :block/title :block/body :block/level)\n                (gp-util/remove-nils))\n          m (if (state/enable-block-timestamps?) (block-with-timestamps m) m)\n          other-tx (:db/other-tx m)\n          id (:db/id (:data this))\n          block-entity (db/entity id)\n          old-refs (:block/refs block-entity)\n          new-refs (:block/refs m)]\n      (when (seq other-tx)\n        (swap! txs-state (fn [txs]\n                           (vec (concat txs other-tx)))))\n\n      (when id\n        (swap! txs-state (fn [txs]\n                           (vec\n                            (concat txs\n                                    (map (fn [attribute]\n                                           [:db/retract id attribute])\n                                      db-schema/retract-attributes)))))\n\n        (when-let [e (:block/page block-entity)]\n          (let [m {:db/id (:db/id e)\n                   :block/updated-at (util/time-ms)}\n                m (if (:block/created-at e)\n                    m\n                    (assoc m :block/created-at (util/time-ms)))]\n            (swap! txs-state conj m))\n          (remove-orphaned-page-refs! (:db/id block-entity) txs-state old-refs new-refs)))\n\n      (swap! txs-state conj (dissoc m :db/other-tx))\n\n      this))\n\n  (-del [this txs-state children?]\n    (assert (ds/outliner-txs-state? txs-state)\n      \"db should be satisfied outliner-tx-state?\")\n    (let [block-id (tree/-get-id this)\n          ids (set (if children?\n                     (let [children (db/get-block-children (state/get-current-repo) block-id)\n                           children-ids (map :block/uuid children)]\n                       (conj children-ids block-id))\n                     [block-id]))\n          txs (map (fn [id] [:db.fn/retractEntity [:block/uuid id]]) ids)\n          txs (if-not children?\n                (let [immediate-children (db/get-block-immediate-children (state/get-current-repo) block-id)]\n                  (if (seq immediate-children)\n                    (let [left-id (tree/-get-id (tree/-get-left this))]\n                      (concat txs\n                              (map-indexed (fn [idx child]\n                                             (let [parent [:block/uuid left-id]]\n                                               (cond->\n                                                 {:db/id (:db/id child)\n                                                  :block/parent parent}\n                                                 (zero? idx)\n                                                 (assoc :block/left parent))))\n                                           immediate-children)))\n                    txs))\n                  txs)]\n      (swap! txs-state concat txs)\n      block-id))\n\n  (-get-children [this]\n    (let [parent-id (tree/-get-id this)\n          children (db-model/get-block-immediate-children (state/get-current-repo) parent-id)]\n      (map block children))))\n\n(defn get-right-node\n  [node]\n  {:pre [(tree/satisfied-inode? node)]}\n  (tree/-get-right node))\n\n(defn get-right-sibling\n  [db-id]\n  (when db-id\n    (when-let [block (db/entity db-id)]\n      (db-model/get-by-parent-&-left (conn/get-db)\n                                     (:db/id (:block/parent block))\n                                     db-id))))\n\n\n\n(defn- assoc-level-aux\n  [tree-vec children-key init-level]\n  (map (fn [block]\n         (let [children (get block children-key)\n               children' (assoc-level-aux children children-key (inc init-level))]\n           (cond-> (assoc block :block/level init-level)\n             (seq children')\n             (assoc children-key children')))) tree-vec))\n\n(defn- assoc-level\n  [children-key tree-vec]\n  (assoc-level-aux tree-vec children-key 1))\n\n(defn- assign-temp-id\n  [blocks replace-empty-target? target-block]\n  (map-indexed (fn [idx block]\n                 (let [db-id (if (and replace-empty-target? (zero? idx))\n                               (:db/id target-block)\n                               (dec (- idx)))]\n                   (assoc block :db/id db-id))) blocks))\n\n(defn- find-outdented-block-prev-hop\n  [outdented-block blocks]\n  (let [blocks (reverse\n                (take-while #(not= (:db/id outdented-block)\n                                   (:db/id %)) blocks))\n        blocks (drop-while #(= (:db/id (:block/parent outdented-block)) (:db/id (:block/parent %))) blocks)]\n    (when (seq blocks)\n      (loop [blocks blocks\n             matched (first blocks)]\n        (if (= (:block/parent (first blocks)) (:block/parent matched))\n          (recur (rest blocks) (first blocks))\n          matched)))))\n\n(defn- compute-block-parent\n  [block parent target-block prev-hop top-level? sibling? get-new-id]\n  (cond\n    prev-hop\n    (:db/id (:block/parent prev-hop))\n\n    top-level?\n    (if sibling?\n      (:db/id (:block/parent target-block))\n      (:db/id target-block))\n\n    :else\n    (get-new-id block parent)))\n\n(defn- compute-block-left\n  [blocks block left target-block prev-hop idx replace-empty-target? left-exists-in-blocks? get-new-id]\n  (cond\n    (zero? idx)\n    (if replace-empty-target?\n      (:db/id (:block/left target-block))\n      (:db/id target-block))\n\n    (and prev-hop (not left-exists-in-blocks?))\n    (:db/id (:block/left prev-hop))\n\n    :else\n    (or (get-new-id block left)\n        (get-new-id block (nth blocks (dec idx))))))\n\n(defn- get-left-nodes\n  [node limit]\n  (let [parent (tree/-get-parent node)]\n    (loop [node node\n           limit limit\n           result []]\n     (if (zero? limit)\n       result\n       (if-let [left (tree/-get-left node)]\n         (if-not (= left parent)\n           (recur left (dec limit) (conj result (tree/-get-id left)))\n           result)\n         result)))))\n\n(defn- page-first-child?\n  [block]\n  (= (:block/left block)\n     (:block/page block)))\n\n(defn- page-block?\n  [block]\n  (some? (:block/name block)))\n\n;;; ### public utils\n\n(defn tree-vec-flatten\n  \"Converts a `tree-vec` to blocks with `:block/level`.\n  A `tree-vec` example:\n  [{:id 1, :children [{:id 2,\n                       :children [{:id 3}]}]}\n   {:id 4, :children [{:id 5}\n                      {:id 6}]}]\"\n  ([tree-vec]\n   (tree-vec-flatten tree-vec :children))\n  ([tree-vec children-key]\n   (->> tree-vec\n        (assoc-level children-key)\n        (mapcat #(tree-seq map? children-key %))\n        (map #(dissoc % :block/children)))))\n\n(defn save-block\n  \"Save the `block`.\"\n  [block']\n  {:pre [(map? block')]}\n  (let [txs-state (atom [])]\n    (tree/-save (block block') txs-state)\n    {:tx-data @txs-state}))\n\n(defn blocks-with-level\n  \"Calculate `:block/level` for all the `blocks`. Blocks should be sorted already.\"\n  [blocks]\n  {:pre [(seq blocks)]}\n  (let [blocks (if (sequential? blocks) blocks [blocks])\n        root (assoc (first blocks) :block/level 1)]\n    (loop [m [root]\n           blocks (rest blocks)]\n      (if (empty? blocks)\n        m\n        (let [block (first blocks)\n              parent (:block/parent block)\n              parent-level (when parent\n                             (:block/level\n                              (first\n                               (filter (fn [x]\n                                         (or\n                                          (and (map? parent)\n                                               (= (:db/id x) (:db/id parent)))\n                                          ;; lookup\n                                          (and (vector? parent)\n                                               (= (:block/uuid x) (second parent))))) m))))\n              level (if parent-level\n                      (inc parent-level)\n                      1)\n              block (assoc block :block/level level)\n              m' (vec (conj m block))]\n          (recur m' (rest blocks)))))))\n\n(defn get-top-level-blocks\n  \"Get only the top level blocks.\"\n  [blocks]\n  {:pre [(seq blocks)]}\n  (let [level-blocks (blocks-with-level blocks)]\n    (filter (fn [b] (= 1 (:block/level b))) level-blocks)))\n\n(defn get-right-siblings\n  \"Get `node`'s right siblings.\"\n  [node]\n  {:pre [(tree/satisfied-inode? node)]}\n  (when-let [parent (tree/-get-parent node)]\n    (let [children (tree/-get-children parent)]\n      (->> (split-with #(not= (tree/-get-id node) (tree/-get-id %)) children)\n           last\n           rest))))\n\n;;; ### insert-blocks, delete-blocks, move-blocks\n\n(defn- insert-blocks-aux\n  [blocks target-block {:keys [sibling? replace-empty-target? keep-uuid? move? outliner-op]}]\n  (let [block-uuids (map :block/uuid blocks)\n        ids (set (map :db/id blocks))\n        uuids (zipmap block-uuids\n                      (if keep-uuid?\n                        block-uuids\n                        (repeatedly random-uuid)))\n        uuids (if replace-empty-target?\n                (assoc uuids (:block/uuid (first blocks)) (:block/uuid target-block))\n                uuids)\n        id->new-uuid (->> (map (fn [block] (when-let [id (:db/id block)]\n                                             [id (get uuids (:block/uuid block))])) blocks)\n                          (into {}))\n        target-page (or (:db/id (:block/page target-block))\n                        ;; target block is a page itself\n                        (:db/id target-block))\n        get-new-id (fn [block lookup]\n                     (cond\n                       (or (map? lookup) (vector? lookup))\n                       (when-let [uuid (if (and (vector? lookup) (= (first lookup) :block/uuid))\n                                         (get uuids (last lookup))\n                                         (get id->new-uuid (:db/id lookup)))]\n                         [:block/uuid uuid])\n\n                       (integer? lookup)\n                       lookup\n\n                       :else\n                       (throw (js/Error. (str \"[insert-blocks] illegal lookup: \" lookup \", block: \" block)))))\n        indent-outdent? (= outliner-op :indent-outdent-blocks)]\n    (map-indexed (fn [idx {:block/keys [parent left] :as block}]\n                   (when-let [uuid (get uuids (:block/uuid block))]\n                     (let [top-level? (= (:block/level block) 1)\n                           outdented-block? (and indent-outdent?\n                                                 top-level?\n                                                 (not= (:block/parent block) (:block/parent target-block)))\n                           prev-hop (if outdented-block? (find-outdented-block-prev-hop block blocks) nil)\n                           left-exists-in-blocks? (contains? ids (:db/id (:block/left block)))\n                           parent (compute-block-parent block parent target-block prev-hop top-level? sibling? get-new-id)\n                           left (compute-block-left blocks block left target-block prev-hop idx replace-empty-target? left-exists-in-blocks? get-new-id)]\n                       (cond->\n                         (merge block {:block/uuid uuid\n                                       :block/page target-page\n                                       :block/parent parent\n                                       :block/left left})\n                         ;; We'll keep the original `:db/id` if it's a move operation,\n                         ;; e.g. drag and drop shouldn't change the ids.\n                         (not move?)\n                         (dissoc :db/id)))))\n                 blocks)))\n\n(defn insert-blocks\n  \"Insert blocks as children (or siblings) of target-node.\n  Args:\n    `blocks`: blocks should be sorted already.\n    `target-block`: where `blocks` will be inserted.\n    Options:\n      `sibling?`: as siblings (true) or children (false).\n      `keep-uuid?`: whether to replace `:block/uuid` from the parameter `blocks`.\n                    For example, if `blocks` are from internal copy, the uuids\n                    need to be changed, but there's no need for drag & drop.\n      `outliner-op`: what's the current outliner operation.\n      `replace-empty-target?`: If the `target-block` is an empty block, whether\n                               to replace it, it defaults to be `false`.\n    ``\"\n  [blocks target-block {:keys [sibling? keep-uuid? outliner-op replace-empty-target?]}]\n  {:pre [(seq blocks)\n         (s/valid? ::block-map-or-entity target-block)]}\n  (let [target-block' (db/pull (:db/id target-block))\n        _ (assert (some? target-block') (str \"Invalid target: \" target-block))\n        sibling? (if (page-block? target-block') false sibling?)\n        move? (contains? #{:move-blocks :move-blocks-up-down :indent-outdent-blocks} outliner-op)\n        keep-uuid? (if move? true keep-uuid?)\n        replace-empty-target? (if (and (some? replace-empty-target?)\n                                       (:block/content target-block')\n                                       (string/blank? (:block/content target-block')))\n                                replace-empty-target?\n                                (and sibling?\n                                     (:block/content target-block')\n                                     (string/blank? (:block/content target-block'))\n                                     (> (count blocks) 1)\n                                     (not move?)))\n        blocks' (blocks-with-level blocks)\n        insert-opts {:sibling? sibling?\n                     :replace-empty-target? replace-empty-target?\n                     :keep-uuid? keep-uuid?\n                     :move? move?\n                     :outliner-op outliner-op}\n        tx (insert-blocks-aux blocks' target-block' insert-opts)]\n    (if (some (fn [b] (or (nil? (:block/parent b)) (nil? (:block/left b)))) tx)\n      (do\n        (state/pub-event! [:instrument {:type :outliner/invalid-structure\n                                        :payload {:data (mapv #(dissoc % :block/content) tx)}}])\n        (throw (ex-info \"Invalid outliner data\"\n                        {:opts insert-opts\n                         :tx (vec tx)\n                         :blocks (vec blocks)\n                         :target-block target-block'})))\n      (let [uuids-tx (->> (map :block/uuid tx)\n                          (remove nil?)\n                          (map (fn [uuid] {:block/uuid uuid})))\n            tx (if move?\n                 tx\n                 (assign-temp-id tx replace-empty-target? target-block'))\n            target-node (block target-block')\n            next (if sibling?\n                   (tree/-get-right target-node)\n                   (tree/-get-down target-node))\n            next-tx (when (and next (not (contains? (set (map :db/id blocks)) (:db/id (:data next)))))\n                      (when-let [left (last (filter (fn [b] (= 1 (:block/level b))) tx))]\n                        [{:block/uuid (tree/-get-id next)\n                          :block/left (:db/id left)}]))\n            full-tx (util/concat-without-nil uuids-tx tx next-tx)]\n        (when (and replace-empty-target? (state/editing?))\n          (state/set-edit-content! (state/get-edit-input-id) (:block/content (first blocks))))\n        {:tx-data full-tx\n         :blocks tx}))))\n\n(defn- delete-block\n  \"Delete block from the tree.\"\n  [txs-state block' children?]\n  (let [node (block block')\n        right-node (tree/-get-right node)]\n    (tree/-del node txs-state children?)\n    (when (tree/satisfied-inode? right-node)\n      (let [left-node (tree/-get-left node)\n            new-right-node (tree/-set-left-id right-node (tree/-get-id left-node))]\n        (tree/-save new-right-node txs-state)))\n    @txs-state))\n\n(defn delete-blocks\n  \"Delete blocks from the tree.\n   Args:\n    `children?`: whether to replace `blocks'` children too. \"\n  [blocks {:keys [children?]\n           :or {children? true}}]\n  [:pre [(seq blocks)]]\n  (let [txs-state (ds/new-outliner-txs-state)\n        block-ids (map (fn [b] [:block/uuid (:block/uuid b)]) blocks)\n        start-block (first blocks)\n        end-block (last (get-top-level-blocks blocks))\n        start-node (block start-block)\n        end-node (block end-block)\n        end-node-parents (->>\n                          (db/get-block-parents\n                           (state/get-current-repo)\n                           (tree/-get-id end-node)\n                           1000)\n                          (map :block/uuid)\n                          (set))\n        self-block? (contains? end-node-parents (tree/-get-id start-node))]\n    (if (or\n         (= 1 (count blocks))\n         (= start-node end-node)\n         self-block?)\n      (delete-block txs-state start-block children?)\n      (let [sibling? (= (tree/-get-parent-id start-node)\n                        (tree/-get-parent-id end-node))\n            right-node (tree/-get-right end-node)]\n        (when (tree/satisfied-inode? right-node)\n          (let [left-node-id (if sibling?\n                               (tree/-get-id (tree/-get-left start-node))\n                               (let [end-node-left-nodes (get-left-nodes end-node (count block-ids))\n                                     parents (->>\n                                              (db/get-block-parents\n                                               (state/get-current-repo)\n                                               (tree/-get-id start-node)\n                                               1000)\n                                              (map :block/uuid)\n                                              (set))\n                                     result (first (set/intersection (set end-node-left-nodes) parents))]\n                                 (when-not result\n                                   (util/pprint {:parents parents\n                                                 :end-node-left-nodes end-node-left-nodes}))\n                                 result))]\n            (assert left-node-id \"Can't find the left-node-id\")\n            (let [new-right-node (tree/-set-left-id right-node left-node-id)]\n              (tree/-save new-right-node txs-state))))\n        (doseq [id block-ids]\n          (let [node (block (db/pull id))]\n            (tree/-del node txs-state true)))))\n    {:tx-data @txs-state}))\n\n(defn- build-move-blocks-next-tx\n  [blocks]\n  (let [id->blocks (zipmap (map :db/id blocks) blocks)\n        top-level-blocks (get-top-level-blocks blocks)\n        top-level-blocks-ids (set (map :db/id top-level-blocks))\n        right-block (get-right-sibling (:db/id (last top-level-blocks)))]\n    (when (and right-block\n               (not (contains? top-level-blocks-ids (:db/id right-block))))\n      {:db/id (:db/id right-block)\n       :block/left (loop [block (:block/left right-block)]\n                     (if (contains? top-level-blocks-ids (:db/id block))\n                       (recur (:block/left (get id->blocks (:db/id block))))\n                       (:db/id block)))})))\n\n(defn move-blocks\n  \"Move `blocks` to `target-block` as siblings or children.\"\n  [blocks target-block {:keys [sibling? outliner-op]}]\n  [:pre [(seq blocks)\n         (s/valid? ::block-map-or-entity target-block)]]\n  (when (not (contains? (set (map :db/id blocks)) (:db/id target-block)))\n    (let [parents (->> (db/get-block-parents (state/get-current-repo) (:block/uuid target-block))\n                       (map :db/id)\n                       (set))\n          move-parents-to-child? (some parents (map :db/id blocks))]\n      (when-not move-parents-to-child?\n        (let [blocks (get-top-level-blocks blocks)\n              first-block (first blocks)\n              {:keys [tx-data]} (insert-blocks blocks target-block {:sibling? sibling?\n                                                                    :outliner-op (or outliner-op :move-blocks)})]\n          (when (seq tx-data)\n            (let [first-block-page (:db/id (:block/page first-block))\n                  target-page (or (:db/id (:block/page target-block))\n                                  (:db/id target-block))\n                  not-same-page? (not= first-block-page target-page)\n                  move-blocks-next-tx [(build-move-blocks-next-tx blocks)]\n                  children-page-tx (when not-same-page?\n                                     (let [children-ids (mapcat #(db/get-block-children-ids (state/get-current-repo) (:block/uuid %)) blocks)]\n                                       (map (fn [uuid] {:block/uuid uuid\n                                                        :block/page target-page}) children-ids)))\n                  full-tx (util/concat-without-nil tx-data move-blocks-next-tx children-page-tx)\n                  tx-meta (cond-> {:move-blocks (mapv :db/id blocks)\n                                   :target (:db/id target-block)}\n                            not-same-page?\n                            (assoc :from-page first-block-page\n                                   :target-page target-page))]\n              {:tx-data full-tx\n               :tx-meta tx-meta})))))))\n\n(defn move-blocks-up-down\n  \"Move blocks up/down.\"\n  [blocks up?]\n  {:pre [(seq blocks) (boolean? up?)]}\n  (let [first-block (db/entity (:db/id (first blocks)))\n        first-block-parent (:block/parent first-block)\n        left-left (:block/left (:block/left first-block))\n        top-level-blocks (get-top-level-blocks blocks)\n        last-top-block (last top-level-blocks)\n        last-top-block-parent (:block/parent last-top-block)\n        right (get-right-sibling (:db/id last-top-block))\n        opts {:outliner-op :move-blocks-up-down}]\n    (cond\n      (and up? left-left)\n      (cond\n        (= (:block/parent left-left) first-block-parent)\n        (move-blocks blocks left-left (merge opts {:sibling? true}))\n\n        (= (:db/id left-left) (:db/id first-block-parent))\n        (move-blocks blocks left-left (merge opts {:sibling? false}))\n\n        (= (:block/left first-block) first-block-parent)\n        (let [target-children (:block/_parent left-left)]\n          (if (seq target-children)\n            (when (= (:block/parent left-left) (:block/parent first-block-parent))\n              (let [target-block (last (db-model/sort-by-left target-children left-left))]\n                (move-blocks blocks target-block (merge opts {:sibling? true}))))\n            (move-blocks blocks left-left (merge opts {:sibling? false}))))\n\n        :else\n        nil)\n\n      (not up?)\n      (if right\n        (move-blocks blocks right (merge opts {:sibling? true}))\n        (when last-top-block-parent\n          (when-let [parent-right (get-right-sibling (:db/id last-top-block-parent))]\n            (move-blocks blocks parent-right (merge opts {:sibling? false})))))\n\n      :else\n      nil)))\n\n(defn indent-outdent-blocks\n  \"Indent or outdent `blocks`.\"\n  [blocks indent?]\n  {:pre [(seq blocks) (boolean? indent?)]}\n  (let [first-block (db/entity (:db/id (first blocks)))\n        left (db/entity (:db/id (:block/left first-block)))\n        parent (:block/parent first-block)\n        db (db/get-db)\n        top-level-blocks (get-top-level-blocks blocks)\n        concat-tx-fn (fn [& results]\n                       {:tx-data (->> (map :tx-data results)\n                                      (apply util/concat-without-nil))\n                        :tx-meta (:tx-meta (first results))})\n        opts {:outliner-op :indent-outdent-blocks}]\n    (if indent?\n      (when (and left (not (page-first-child? first-block)))\n        (let [last-direct-child-id (db-model/get-block-last-direct-child db (:db/id left) false)\n              blocks' (drop-while (fn [b]\n                                    (= (:db/id (:block/parent b))\n                                       (:db/id left)))\n                                  top-level-blocks)]\n          (when (seq blocks')\n            (if last-direct-child-id\n              (let [last-direct-child (db/entity last-direct-child-id)\n                    result (move-blocks blocks' last-direct-child (merge opts {:sibling? true}))\n                    ;; expand `left` if it's collapsed\n                    collapsed-tx (when (:block/collapsed? left)\n                                   {:tx-data [{:db/id (:db/id left)\n                                               :block/collapsed? false}]})]\n                (concat-tx-fn result collapsed-tx))\n              (move-blocks blocks' left (merge opts {:sibling? false}))))))\n      (when (and parent (not (page-block? (db/entity (:db/id parent)))))\n        (let [blocks' (take-while (fn [b]\n                                    (not= (:db/id (:block/parent b))\n                                          (:db/id (:block/parent parent))))\n                                  top-level-blocks)\n              result (move-blocks blocks' parent (merge opts {:sibling? true}))]\n          (if (state/logical-outdenting?)\n            result\n            ;; direct outdenting (default behavior)\n            (let [last-top-block (db/pull (:db/id (last blocks')))\n                  right-siblings (->> (get-right-siblings (block last-top-block))\n                                      (map :data))]\n              (if (seq right-siblings)\n                (let [result2 (if-let [last-direct-child-id (db-model/get-block-last-direct-child db (:db/id last-top-block) false)]\n                                (move-blocks right-siblings (db/entity last-direct-child-id) (merge opts {:sibling? true}))\n                                (move-blocks right-siblings last-top-block (merge opts {:sibling? false})))]\n                  (concat-tx-fn result result2))\n                result))))))))\n\n;;; ### write-operations have side-effects (do transactions) ;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *transaction-data*\n  \"Stores transaction-data that are generated by one or more write-operations,\n  see also `frontend.modules.outliner.transaction/save-transactions`\"\n  nil)\n\n(defn- op-transact!\n  [fn-var & args]\n  {:pre [(var? fn-var)]}\n  (when (nil? *transaction-data*)\n    (throw (js/Error. (str (:name (meta fn-var)) \" is not used in (save-transactions ...)\"))))\n  (let [result (apply @fn-var args)]\n    (conj! *transaction-data* (select-keys result [:tx-data :tx-meta]))\n    result))\n\n(defn save-block!\n  [block]\n  (op-transact! #'save-block block))\n\n(defn insert-blocks!\n  [blocks target-block opts]\n  (op-transact! #'insert-blocks blocks target-block opts))\n\n(defn delete-blocks!\n  [blocks opts]\n  (op-transact! #'delete-blocks blocks opts))\n\n(defn move-blocks!\n  [blocks target-block sibling?]\n  (op-transact! #'move-blocks blocks target-block {:sibling? sibling?}))\n\n(defn move-blocks-up-down!\n  [blocks up?]\n  (op-transact! #'move-blocks-up-down blocks up?))\n\n(defn indent-outdent-blocks!\n  [blocks indent?]\n  (op-transact! #'indent-outdent-blocks blocks indent?))\n"]}