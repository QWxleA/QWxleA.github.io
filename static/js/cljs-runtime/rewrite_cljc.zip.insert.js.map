{"version":3,"sources":["rewrite_cljc/zip/insert.cljc"],"mappings":";AAOA,AAAeA,gCACb,yBAAA,zBAACC;AAEH;;;;iCAAA,jCAAOC,0EAGJC,QAAQC,UAAUC,OAAOC,KAAKC;AAHjC,AAIE,IAAMC,YAAU,AAACC,yBAAYF;IACvBG,YAAU,CAACP,wCAAAA,8CAAAA,RAAQG,0BAAAA;AADzB,qEAEO,AAACK,sDACA,kBAAM,iBAAAC,oBAAKF,lLAKZ,OAACK,+CAAOX,UAAUE;AALX,AAAA,oBAAAM;AAAe,OAACC,cAAI,AAACC,8CAAeJ;;AAApCE;;qIADP,/HACC,AAAA,yHAAA,tCACGZ,+HACFQ,oEACD,sEAAA,OAAA,3EAAM,AAACK,cAAI,AAACC,8CAAeR,QACzBD;;AAGZ;;;;uCAAA,vCAAMW,sFAGHV,KAAKC;AAHR,AAIE,yHAAA,lHAACL,+BACCe,sCACAC,gIACClB,sCACDM,KAAKC;;AAET;;;;sCAAA,tCAAMY,oFAGHb,KAAKC;AAHR,AAIE,uHAAA,hHAACL,+BACCkB,qCACAC,+HACCrB,sCACDM,KAAKC;;AAET;;;uCAAA,vCAAMe,sFAEHhB,KAAKC;AAFR,AAGE,wHAAA,jHAACL,+BACCqB,qCACAC,8EAEAlB,KAAKC;;AAET;;;;uCAAA,vCAAMkB,sFAGHnB,KAAKC;AAHR,AAIE,sCAAA,WAAAmB,1CAACxB;AAAD,AACG,IAAAyB,WAAAD;IAAAC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qCAAAA,rCAAUJ;AAAV,AAAA,GAAA,CAAAI,gBAAA;AAAA;;AAAA,iDAAAA,1CAAiBC;;gDADpB,7CAEEC,8EAEAvB,KAAKC","names":["rewrite-cljc.zip.insert/space","rewrite-cljc.node/spaces","rewrite-cljc.zip.insert/insert","move-fn","insert-fn","prefix","zloc","item","item-node","rewrite-cljc.node/coerce","next-node","cljs.core.concat","and__5041__auto__","cljs.core/not","rewrite-cljc.zip.whitespace/whitespace?","cljs.core.reduce","rewrite-cljc.zip.insert/insert-right","rewrite-cljc.custom-zipper.core/right","rewrite-cljc.custom-zipper.core/insert-right","rewrite-cljc.zip.insert/insert-left","rewrite-cljc.custom-zipper.core/left","rewrite-cljc.custom-zipper.core/insert-left","rewrite-cljc.zip.insert/insert-child","rewrite-cljc.custom-zipper.core/down","rewrite-cljc.custom-zipper.core/insert-child","rewrite-cljc.zip.insert/append-child","p1__78759#","G__78760","rewrite-cljc.custom-zipper.core/rightmost","rewrite-cljc.custom-zipper.core/append-child"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.insert\n  (:require [rewrite-cljc.custom-zipper.core :as z]\n            [rewrite-cljc.node :as node]\n            [rewrite-cljc.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def ^:private space\n  (node/spaces 1))\n\n(defn- insert\n  \"Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space.\"\n  [move-fn insert-fn prefix zloc item]\n  (let [item-node (node/coerce item)\n        next-node (move-fn zloc)]\n    (->> (concat\n          (when (and next-node (not (ws/whitespace? next-node)))\n            [space])\n          [item-node]\n          (when (not (ws/whitespace? zloc))\n            prefix))\n         (reduce insert-fn zloc))))\n\n(defn insert-right\n  \"Return zipper with `item` inserted to the right of the current node in `zloc`.\n  Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/right\n    z/insert-right\n    [space]\n    zloc item))\n\n(defn insert-left\n  \"Return zipper with `item` inserted to the left of the current node in `zloc`.\n  Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    z/left\n    z/insert-left\n    [space]\n    zloc item))\n\n(defn insert-child\n  \"Return zipper with `item` inserted as the first child of the current node in `zloc`.\"\n  [zloc item]\n  (insert\n    z/down\n    z/insert-child\n    []\n    zloc item))\n\n(defn append-child\n  \"Return zipper with `item` appended as last child of the current node in `zloc`.\n  Will insert a space if necessary.\"\n  [zloc item]\n  (insert\n    #(some-> % z/down z/rightmost)\n    z/append-child\n    []\n    zloc item))\n"]}