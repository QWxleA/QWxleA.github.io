{
"version":3,
"file":"module$node_modules$jszip$lib$utils.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/jszip/lib/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$utils\"] = function(global,require,module,exports) {\n'use strict';\n\nvar support = require('./support');\nvar base64 = require('./base64');\nvar nodejsUtils = require('./nodejsUtils');\nvar setImmediate = require('set-immediate-shim');\nvar external = require(\"./external\");\n\n\n/**\n * Convert a string that pass as a \"binary string\": it should represent a byte\n * array but may have > 255 char codes. Be sure to take only the first byte\n * and returns the byte array.\n * @param {String} str the string to transform.\n * @return {Array|Uint8Array} the string in a binary format.\n */\nfunction string2binary(str) {\n    var result = null;\n    if (support.uint8array) {\n      result = new Uint8Array(str.length);\n    } else {\n      result = new Array(str.length);\n    }\n    return stringToArrayLike(str, result);\n}\n\n/**\n * Create a new blob with the given content and the given type.\n * @param {String|ArrayBuffer} part the content to put in the blob. DO NOT use\n * an Uint8Array because the stock browser of android 4 won't accept it (it\n * will be silently converted to a string, \"[object Uint8Array]\").\n *\n * Use only ONE part to build the blob to avoid a memory leak in IE11 / Edge:\n * when a large amount of Array is used to create the Blob, the amount of\n * memory consumed is nearly 100 times the original data amount.\n *\n * @param {String} type the mime type of the blob.\n * @return {Blob} the created blob.\n */\nexports.newBlob = function(part, type) {\n    exports.checkSupport(\"blob\");\n\n    try {\n        // Blob constructor\n        return new Blob([part], {\n            type: type\n        });\n    }\n    catch (e) {\n\n        try {\n            // deprecated, browser only, old way\n            var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;\n            var builder = new Builder();\n            builder.append(part);\n            return builder.getBlob(type);\n        }\n        catch (e) {\n\n            // well, fuck ?!\n            throw new Error(\"Bug : can't construct the Blob.\");\n        }\n    }\n\n\n};\n/**\n * The identity function.\n * @param {Object} input the input.\n * @return {Object} the same input.\n */\nfunction identity(input) {\n    return input;\n}\n\n/**\n * Fill in an array with a string.\n * @param {String} str the string to use.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n */\nfunction stringToArrayLike(str, array) {\n    for (var i = 0; i < str.length; ++i) {\n        array[i] = str.charCodeAt(i) & 0xFF;\n    }\n    return array;\n}\n\n/**\n * An helper for the function arrayLikeToString.\n * This contains static information and functions that\n * can be optimized by the browser JIT compiler.\n */\nvar arrayToStringHelper = {\n    /**\n     * Transform an array of int into a string, chunk by chunk.\n     * See the performances notes on arrayLikeToString.\n     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n     * @param {String} type the type of the array.\n     * @param {Integer} chunk the chunk size.\n     * @return {String} the resulting string.\n     * @throws Error if the chunk is too big for the stack.\n     */\n    stringifyByChunk: function(array, type, chunk) {\n        var result = [], k = 0, len = array.length;\n        // shortcut\n        if (len <= chunk) {\n            return String.fromCharCode.apply(null, array);\n        }\n        while (k < len) {\n            if (type === \"array\" || type === \"nodebuffer\") {\n                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n            }\n            else {\n                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n            }\n            k += chunk;\n        }\n        return result.join(\"\");\n    },\n    /**\n     * Call String.fromCharCode on every item in the array.\n     * This is the naive implementation, which generate A LOT of intermediate string.\n     * This should be used when everything else fail.\n     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n     * @return {String} the result.\n     */\n    stringifyByChar: function(array){\n        var resultStr = \"\";\n        for(var i = 0; i < array.length; i++) {\n            resultStr += String.fromCharCode(array[i]);\n        }\n        return resultStr;\n    },\n    applyCanBeUsed : {\n        /**\n         * true if the browser accepts to use String.fromCharCode on Uint8Array\n         */\n        uint8array : (function () {\n            try {\n                return support.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;\n            } catch (e) {\n                return false;\n            }\n        })(),\n        /**\n         * true if the browser accepts to use String.fromCharCode on nodejs Buffer.\n         */\n        nodebuffer : (function () {\n            try {\n                return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.allocBuffer(1)).length === 1;\n            } catch (e) {\n                return false;\n            }\n        })()\n    }\n};\n\n/**\n * Transform an array-like object to a string.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n * @return {String} the result.\n */\nfunction arrayLikeToString(array) {\n    // Performances notes :\n    // --------------------\n    // String.fromCharCode.apply(null, array) is the fastest, see\n    // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n    // but the stack is limited (and we can get huge arrays !).\n    //\n    // result += String.fromCharCode(array[i]); generate too many strings !\n    //\n    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n    // TODO : we now have workers that split the work. Do we still need that ?\n    var chunk = 65536,\n        type = exports.getTypeOf(array),\n        canUseApply = true;\n    if (type === \"uint8array\") {\n        canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;\n    } else if (type === \"nodebuffer\") {\n        canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;\n    }\n\n    if (canUseApply) {\n        while (chunk > 1) {\n            try {\n                return arrayToStringHelper.stringifyByChunk(array, type, chunk);\n            } catch (e) {\n                chunk = Math.floor(chunk / 2);\n            }\n        }\n    }\n\n    // no apply or chunk error : slow and painful algorithm\n    // default browser on android 4.*\n    return arrayToStringHelper.stringifyByChar(array);\n}\n\nexports.applyFromCharCode = arrayLikeToString;\n\n\n/**\n * Copy the data from an array-like to an other array-like.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n */\nfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n    for (var i = 0; i < arrayFrom.length; i++) {\n        arrayTo[i] = arrayFrom[i];\n    }\n    return arrayTo;\n}\n\n// a matrix containing functions to transform everything into everything.\nvar transform = {};\n\n// string to ?\ntransform[\"string\"] = {\n    \"string\": identity,\n    \"array\": function(input) {\n        return stringToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"string\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return stringToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": function(input) {\n        return stringToArrayLike(input, nodejsUtils.allocBuffer(input.length));\n    }\n};\n\n// array to ?\ntransform[\"array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": identity,\n    \"arraybuffer\": function(input) {\n        return (new Uint8Array(input)).buffer;\n    },\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodejsUtils.newBufferFrom(input);\n    }\n};\n\n// arraybuffer to ?\ntransform[\"arraybuffer\"] = {\n    \"string\": function(input) {\n        return arrayLikeToString(new Uint8Array(input));\n    },\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n    },\n    \"arraybuffer\": identity,\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodejsUtils.newBufferFrom(new Uint8Array(input));\n    }\n};\n\n// uint8array to ?\ntransform[\"uint8array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return input.buffer;\n    },\n    \"uint8array\": identity,\n    \"nodebuffer\": function(input) {\n        return nodejsUtils.newBufferFrom(input);\n    }\n};\n\n// nodebuffer to ?\ntransform[\"nodebuffer\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"nodebuffer\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": identity\n};\n\n/**\n * Transform an input into any type.\n * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n * If no output type is specified, the unmodified input will be returned.\n * @param {String} outputType the output type.\n * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n * @throws {Error} an Error if the browser doesn't support the requested output type.\n */\nexports.transformTo = function(outputType, input) {\n    if (!input) {\n        // undefined, null, etc\n        // an empty string won't harm.\n        input = \"\";\n    }\n    if (!outputType) {\n        return input;\n    }\n    exports.checkSupport(outputType);\n    var inputType = exports.getTypeOf(input);\n    var result = transform[inputType][outputType](input);\n    return result;\n};\n\n/**\n * Return the type of the input.\n * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n * @param {Object} input the input to identify.\n * @return {String} the (lowercase) type of the input.\n */\nexports.getTypeOf = function(input) {\n    if (typeof input === \"string\") {\n        return \"string\";\n    }\n    if (Object.prototype.toString.call(input) === \"[object Array]\") {\n        return \"array\";\n    }\n    if (support.nodebuffer && nodejsUtils.isBuffer(input)) {\n        return \"nodebuffer\";\n    }\n    if (support.uint8array && input instanceof Uint8Array) {\n        return \"uint8array\";\n    }\n    if (support.arraybuffer && input instanceof ArrayBuffer) {\n        return \"arraybuffer\";\n    }\n};\n\n/**\n * Throw an exception if the type is not supported.\n * @param {String} type the type to check.\n * @throws {Error} an Error if the browser doesn't support the requested type.\n */\nexports.checkSupport = function(type) {\n    var supported = support[type.toLowerCase()];\n    if (!supported) {\n        throw new Error(type + \" is not supported by this platform\");\n    }\n};\n\nexports.MAX_VALUE_16BITS = 65535;\nexports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\n/**\n * Prettify a string read as binary.\n * @param {string} str the string to prettify.\n * @return {string} a pretty string.\n */\nexports.pretty = function(str) {\n    var res = '',\n        code, i;\n    for (i = 0; i < (str || \"\").length; i++) {\n        code = str.charCodeAt(i);\n        res += '\\\\x' + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n    }\n    return res;\n};\n\n/**\n * Defer the call of a function.\n * @param {Function} callback the function to call asynchronously.\n * @param {Array} args the arguments to give to the callback.\n */\nexports.delay = function(callback, args, self) {\n    setImmediate(function () {\n        callback.apply(self || null, args || []);\n    });\n};\n\n/**\n * Extends a prototype with an other, without calling a constructor with\n * side effects. Inspired by nodejs' `utils.inherits`\n * @param {Function} ctor the constructor to augment\n * @param {Function} superCtor the parent constructor to use\n */\nexports.inherits = function (ctor, superCtor) {\n    var Obj = function() {};\n    Obj.prototype = superCtor.prototype;\n    ctor.prototype = new Obj();\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nexports.extend = function() {\n    var result = {}, i, attr;\n    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers\n        for (attr in arguments[i]) {\n            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n                result[attr] = arguments[i][attr];\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Transform arbitrary content into a Promise.\n * @param {String} name a name for the content being processed.\n * @param {Object} inputData the content to process.\n * @param {Boolean} isBinary true if the content is not an unicode string\n * @param {Boolean} isOptimizedBinaryString true if the string content only has one byte per character.\n * @param {Boolean} isBase64 true if the string content is encoded with base64.\n * @return {Promise} a promise in a format usable by JSZip.\n */\nexports.prepareContent = function(name, inputData, isBinary, isOptimizedBinaryString, isBase64) {\n\n    // if inputData is already a promise, this flatten it.\n    var promise = external.Promise.resolve(inputData).then(function(data) {\n        \n        \n        var isBlob = support.blob && (data instanceof Blob || ['[object File]', '[object Blob]'].indexOf(Object.prototype.toString.call(data)) !== -1);\n\n        if (isBlob && typeof FileReader !== \"undefined\") {\n            return new external.Promise(function (resolve, reject) {\n                var reader = new FileReader();\n\n                reader.onload = function(e) {\n                    resolve(e.target.result);\n                };\n                reader.onerror = function(e) {\n                    reject(e.target.error);\n                };\n                reader.readAsArrayBuffer(data);\n            });\n        } else {\n            return data;\n        }\n    });\n\n    return promise.then(function(data) {\n        var dataType = exports.getTypeOf(data);\n\n        if (!dataType) {\n            return external.Promise.reject(\n                new Error(\"Can't read the data of '\" + name + \"'. Is it \" +\n                          \"in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\")\n            );\n        }\n        // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n        if (dataType === \"arraybuffer\") {\n            data = exports.transformTo(\"uint8array\", data);\n        } else if (dataType === \"string\") {\n            if (isBase64) {\n                data = base64.decode(data);\n            }\n            else if (isBinary) {\n                // optimizedBinaryString === true means that the file has already been filtered with a 0xFF mask\n                if (isOptimizedBinaryString !== true) {\n                    // this is a string, not in a base64 format.\n                    // Be sure that this is a correct \"binary string\"\n                    data = string2binary(data);\n                }\n            }\n        }\n        return data;\n    });\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","identity","input","stringToArrayLike","str","array","i","length","charCodeAt","arrayLikeToString","chunk","type","getTypeOf","canUseApply","arrayToStringHelper","applyCanBeUsed","uint8array","nodebuffer","stringifyByChunk","e","Math","floor","stringifyByChar","arrayLikeToArrayLike","arrayFrom","arrayTo","support","base64","nodejsUtils","setImmediate","external","newBlob","exports.newBlob","part","checkSupport","Blob","builder","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","Error","String","fromCharCode","apply","Uint8Array","allocBuffer","result","k","len","push","slice","min","subarray","join","resultStr","applyFromCharCode","transform","Array","arraybuffer","buffer","newBufferFrom","string","byteLength","transformTo","exports.transformTo","outputType","inputType","exports.getTypeOf","Object","prototype","toString","call","isBuffer","ArrayBuffer","exports.checkSupport","supported","toLowerCase","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","exports.pretty","res","code","toUpperCase","delay","exports.delay","callback","args","inherits","exports.inherits","ctor","superCtor","Obj","extend","exports.extend","attr","arguments","hasOwnProperty","prepareContent","exports.prepareContent","name","inputData","isBinary","isOptimizedBinaryString","isBase64","Promise","resolve","then","promise","data","blob","indexOf","FileReader","reject","reader","onload","reader.onload","target","onerror","reader.onerror","error","readAsArrayBuffer","dataType","decode"]
}
