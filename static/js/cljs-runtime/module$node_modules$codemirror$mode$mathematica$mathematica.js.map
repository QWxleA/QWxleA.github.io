{
"version":3,
"file":"module$node_modules$codemirror$mode$mathematica$mathematica.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/codemirror/mode/mathematica/mathematica.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$mathematica$mathematica\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Mathematica mode copyright (c) 2015 by Calin Barbat\n// Based on code by Patrick Scheibe (halirutan)\n// See: https://github.com/halirutan/Mathematica-Source-Highlighting/tree/master/src/lang-mma.js\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mathematica', function(_config, _parserConfig) {\n\n  // used pattern building blocks\n  var Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\n  var pBase      = \"(?:\\\\d+)\";\n  var pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\n  var pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\n  var pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n  // regular expressions\n  var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\n  var reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\n  var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\n  function tokenBase(stream, state) {\n    var ch;\n\n    // get next character\n    ch = stream.next();\n\n    // string\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n\n    // comment\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n\n    // go back one character\n    stream.backUp(1);\n\n    // look for numbers\n    // Numbers in a baseform\n    if (stream.match(reBaseForm, true, false)) {\n      return 'number';\n    }\n\n    // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n    // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n    if (stream.match(reFloatForm, true, false)) {\n      return 'number';\n    }\n\n    /* In[23] and Out[34] */\n    if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n      return 'atom';\n    }\n\n    // usage\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n      return 'meta';\n    }\n\n    // message\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n      return 'string-2';\n    }\n\n    // this makes a look-ahead match for something like variable:{_Integer}\n    // the match is then forwarded to the mma-patterns tokenizer.\n    if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n    // Cannot start with a number, but can have numbers at any other position. Examples\n    // blub__Integer, a1_, b34_Integer32\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n      return 'variable-2';\n    }\n    if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Named characters in Mathematica, like \\[Gamma].\n    if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n      return 'variable-3';\n    }\n\n    // Match all braces separately\n    if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n      return 'bracket';\n    }\n\n    // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n    // only one.\n    if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n      return 'variable-2';\n    }\n\n    // Literals like variables, keywords, functions\n    if (stream.match(reIdInContext, true, false)) {\n      return 'keyword';\n    }\n\n    // operators. Note that operators like @@ or /; are matched separately for each symbol.\n    if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n      return 'operator';\n    }\n\n    // everything else is an error\n    stream.next(); // advance the stream.\n    return 'error';\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-mathematica', {\n  name: 'mathematica'\n});\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","_config","_parserConfig","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","commentLevel","tokenComment","backUp","match","reBaseForm","reFloatForm","reIdInContext","end","escaped","prev","RegExp","startState","token","eatSpace","blockCommentStart","blockCommentEnd","defineMIME","name"]
}
