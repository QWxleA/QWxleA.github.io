{"version":3,"sources":["frontend/util/url.cljs"],"mappings":"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","names":["frontend.util.url/LSP_SCHEME","frontend.util.url/encode","js/encodeURI","frontend.util.url/encode-param","js/encodeURIComponent","frontend.util.url/get-local-repo-identifier","repo","repo-path","frontend.db.conn/get-repo-name","frontend.db.conn/get-short-repo-name","var_args","G__69189","frontend.util.url/get-repo-id-url","js/Error","host","action","repo-identifier","frontend.util.url.get_repo_id_url","protocol?","G__69198","frontend.util.url/get-logseq-graph-url","frontend.util.url.get_logseq_graph_url","G__69206","frontend.util.url/get-logseq-graph-uuid-url","uuid","frontend.util.url.get_logseq_graph_uuid_url","G__69213","frontend.util.url/get-logseq-graph-page-url","page-name","frontend.util.url.get_logseq_graph_page_url"],"sourcesContent":["(ns frontend.util.url\n  (:require [frontend.db.conn :as db-conn]))\n\n;; Keep same as electron/electron.core\n(def LSP_SCHEME \"logseq\")\n\n;; Keep same as electron/electron.url\n(def encode js/encodeURI)\n(def encode-param js/encodeURIComponent)\n\n(defn get-local-repo-identifier\n  [repo]\n  (let [repo-path (db-conn/get-repo-name repo)]\n    (db-conn/get-short-repo-name repo-path)))\n\n(defn get-repo-id-url\n  \"Get Logseq protocol URL, w/o param (v0.1).\n   host: set to `nil` for local graph\n   protocol?: if true, returns URL with protocol prefix\"\n  ([host action repo-identifier]\n   (get-repo-id-url host action repo-identifier true))\n  ([host action repo-identifier protocol?]\n   (str (when protocol? (str LSP_SCHEME \"://\")) \n        (when host (str host \"/\")) \n        action \"/\" \n        (encode repo-identifier))))\n\n(defn get-logseq-graph-url\n  \"The URL represents an graph, for example:\n   logseq://graph/abc\n   Ensure repo is valid before hand.\n   host: set to `nil` for local graph\n   protocol?: if true, returns URL with protocol prefix\"\n  ([host repo]\n   (get-logseq-graph-url host repo true))\n  ([host repo protocol?]\n   (let [repo-identifier (if host\n                           repo ;; resolve remote repo identifier here\n                           (get-local-repo-identifier repo))]\n     (get-repo-id-url host \"graph\" repo-identifier protocol?))))\n\n(defn get-logseq-graph-uuid-url\n  \"The URL represents an entity in graph with uuid, for example:\n   logseq://graph/abc?block-id=<uuid>\n   Ensure repo and uuid are valid before hand.\n   host: set to `nil` for local graph\n   protocol?: if true, returns URL with protocol prefix\"\n  ([host repo uuid]\n   (get-logseq-graph-uuid-url host repo uuid true))\n  ([host repo uuid protocol?]\n   (str (get-logseq-graph-url host repo protocol?)\n        \"?block-id=\" uuid)))\n\n(defn get-logseq-graph-page-url\n  \"The URL represents an page in graph with pagename, for example:\n   logseq://graph/abc?page=<page-name>\n   Ensure repo and page-name are valid before hand.\n   host: set to `nil` for local graph\n   protocol?: if true, returns URL with protocol prefix\"\n  ([host repo page-name]\n   (get-logseq-graph-page-url host repo page-name true))\n  ([host repo page-name protocol?]\n   (str (get-logseq-graph-url host repo protocol?)\n        \"?page=\" (encode-param page-name))))\n"]}