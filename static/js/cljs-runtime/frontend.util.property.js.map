{"version":3,"sources":["frontend/util/property.cljs"],"mappings":"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","names":["frontend.util.property/built-in-extended-properties","cljs.core.atom","frontend.util.property/register-built-in-properties","props","cljs.core/reset!","cljs.core/deref","clojure.set.union","frontend.util.property/built-in-properties","cljs.core/set","cljs.core.map","cljs.core/keyword","frontend.config/markers","frontend.config/get-block-hidden-properties","frontend.util.property/properties-built-in?","properties","and__5041__auto__","cljs.core/seq","ks","cljs.core.comp","clojure.string/lower-case","cljs.core/name","cljs.core/keys","built-in-properties-set","cljs.core/every?","frontend.util.property/remove-empty-properties","content","logseq.graph-parser.property/contains-properties?","clojure.string/replace","cljs.core/re-pattern","frontend.util.property/simplified-property?","line","cljs.core/boolean","frontend.util/safe-re-find","frontend.util.property/front-matter-property?","frontend.util.property/get-property-key","format","temp__5720__auto__","key","cljs.core/last","cljs.core._EQ_","cljs.core.keyword","frontend.util.property/org-property?","cljs.core/contains?","frontend.util.property/get-org-property-keys","vec__43930","cljs.core.nth","content-lines","clojure.string/split-lines","_","properties&body","p1__43927#","cljs.core/split-with","clojure.string/triml","clojure.string/upper-case","clojure.string/starts-with?","logseq.graph-parser.property/properties-start","cljs.core/rest","p1__43928#","cljs.core.take_while","clojure.string/trim","logseq.graph-parser.property/properties-end","clojure.string/blank?","p1__43929#","clojure.string.split","cljs.core.remove","cljs.core/first","frontend.util.property/get-markdown-property-keys","p1__43935#","cljs.core.filter","cljs.core/re-matches","p1__43936#","frontend.util.property/get-property-keys","frontend.util.property/property-key-exist?","frontend.util/remove-first","frontend.util.property/goto-properties-end","_format","input","frontend.util.cursor.move_cursor_to_thing","from","frontend.util.cursor/pos","frontend.util.property/remove-properties","vec__43976","lines","title-lines","p1__43954#","body","p1__43959#","cljs.core.drop_while","cljs.core/cons","cljs.core.concat","clojure.string.join","cljs.core.not_EQ_","frontend.util.property/build-properties-str","org?","kv-format","full-format","properties-content","p__43992","vec__43993","k","v","frontend.util.format","frontend.util.property/with-built-in-properties","p__43997","vec__43998","_v","fexpr__44001","vec__44002","map__44005","cljs.core/--destructure-map","cljs.core.get","ast","frontend.format.mldoc/->edn","logseq.graph_parser.mldoc.default_config","title","frontend.format.mldoc/block-with-title?","cljs.core/ffirst","properties-in-content?","no-title?","or__5043__auto__","properties-lines","cljs.core/group-by","s","properties-in-content","p1__43996#","cljs.core/nil?","built-in-properties-area","p__44006","vec__44007","frontend.util.property/front-matter?","var_args","G__44014","frontend.util.property/insert-property","js/Error","value","frontend.util.property.insert_property","front-matter?","vec__44017","title?","has-properties?","frontend.format.mldoc/properties?","cljs.core/second","p__44022","vec__44024","x","scheduled","p1__44010#","deadline","p1__44011#","body-without-timestamps","p1__44012#","start-idx","end-idx","result","exists?","before","cljs.core.subvec","middle","cljs.core.doall","cljs.core.mapv","text","vec__44036","logseq.graph-parser.util/split-first","cljs.core.subs","key-exists?","cljs.core.conj","after","sym","new-property-s","property-f","groups","cljs.core.partition_by","compose-lines","cljs.core.mapcat","G__44046","vec__44048","clojure.string/trimr","frontend.util.property/insert-properties","kvs","cljs.core.reduce","p__44054","vec__44055","cljs.core/coll?","G__44058","cljs.core.distinct","item","logseq.graph-parser.text/page-ref-un-brackets!","G__44066","frontend.util.property/remove-property","frontend.util.property.remove_property","first?","remove-f","cljs.core/remove","cljs.core/not","G__44072","G__44073","frontend.util.property/remove-id-property","frontend.util.property/remove-built-in-properties","built-in-properties*","clojure.string/replace-first","frontend.util.property/add-page-properties","page-format","cljs.core/update-keys","front-matter-format?","property-keys","prefix-f","G__44083","cljs.core/Keyword","cljs.core/identity","p1__44080#","frontend.util/starts-with?","cljs.core.swap_BANG_","cljs.core/conj","not-exists","p__44088","vec__44089","p__44092","vec__44093","frontend.config/properties-wrapper-pattern"],"sourcesContent":["(ns frontend.util.property\n  \"Property fns needed by the rest of the app and not graph-parser\"\n  (:require [clojure.string :as string]\n            [frontend.util :as util]\n            [clojure.set :as set]\n            [frontend.config :as config]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.property :as gp-property :refer [properties-start properties-end]]\n            [frontend.format.mldoc :as mldoc]\n            [logseq.graph-parser.text :as text]\n            [frontend.util.cursor :as cursor]))\n\n(def built-in-extended-properties (atom #{}))\n(defn register-built-in-properties\n  [props]\n  (reset! built-in-extended-properties (set/union @built-in-extended-properties props)))\n\n(defn built-in-properties\n  []\n  (set/union\n   #{:id :custom-id :background-color :heading :collapsed :created-at :updated-at :last-modified-at :created_at :last_modified_at :query-table :query-properties :query-sort-by :query-sort-desc\n     :ls-type :hl-type :hl-page :hl-stamp}\n   (set (map keyword config/markers))\n   (set (config/get-block-hidden-properties))\n   @built-in-extended-properties))\n\n(defn properties-built-in?\n  [properties]\n  (and (seq properties)\n       (let [ks (map (comp keyword string/lower-case name) (keys properties))\n             built-in-properties-set (built-in-properties)]\n         (every? built-in-properties-set ks))))\n\n(defn remove-empty-properties\n  [content]\n  (if (gp-property/contains-properties? content)\n    (string/replace content\n                    (re-pattern \":PROPERTIES:\\n+:END:\\n*\")\n                    \"\")\n    content))\n\n(defn simplified-property?\n  [line]\n  (boolean\n   (and (string? line)\n        (util/safe-re-find #\"^\\s?[^ ]+:: \" line))))\n\n(defn front-matter-property?\n  [line]\n  (boolean\n   (and (string? line)\n        (util/safe-re-find #\"^\\s*[^ ]+: \" line))))\n\n(defn get-property-key\n  [line format]\n  (and (string? line)\n       (when-let [key (last\n                       (if (= format :org)\n                         (util/safe-re-find #\"^\\s*:([^: ]+): \" line)\n                         (util/safe-re-find #\"^\\s*([^ ]+):: \" line)))]\n         (keyword key))))\n\n(defn org-property?\n  [line]\n  (boolean\n   (and (string? line)\n        (util/safe-re-find #\"^\\s*:[^: ]+: \" line)\n        (when-let [key (get-property-key line :org)]\n          (not (contains? #{:PROPERTIES :END} key))))))\n\n(defn get-org-property-keys\n  [content]\n  (let [content-lines (string/split-lines content)\n        [_ properties&body] (split-with #(-> (string/triml %)\n                                             string/upper-case\n                                             (string/starts-with? properties-start)\n                                             not)\n                                        content-lines)\n        properties (rest (take-while #(-> (string/trim %)\n                                          string/upper-case\n                                          (string/starts-with? properties-end)\n                                          not\n                                          (or (string/blank? %)))\n                                     properties&body))]\n    (when (seq properties)\n      (map #(->> (string/split % \":\")\n                 (remove string/blank?)\n                 first\n                 string/upper-case)\n           properties))))\n\n(defn get-markdown-property-keys\n  [content]\n  (let [content-lines (string/split-lines content)\n        properties (filter #(re-matches #\"^.+::\\s*.+\" %) content-lines)]\n    (when (seq properties)\n      (map #(->> (string/split % \"::\")\n                 (remove string/blank?)\n                 first\n                 string/upper-case)\n           properties))))\n\n(defn get-property-keys\n  [format content]\n  (cond\n    (gp-property/contains-properties? content)\n    (get-org-property-keys content)\n\n    (= :markdown format)\n    (get-markdown-property-keys content)))\n\n(defn property-key-exist?\n  [format content key]\n  (let [key (string/upper-case key)]\n    (contains? (set (util/remove-first #{key} (get-property-keys format content))) key)))\n\n(defn goto-properties-end\n  [_format input]\n  (cursor/move-cursor-to-thing input properties-start 0)\n  (let [from (cursor/pos input)]\n    (cursor/move-cursor-to-thing input properties-end from)))\n\n(defn remove-properties\n  [format content]\n  (cond\n    (gp-property/contains-properties? content)\n    (let [lines (string/split-lines content)\n          [title-lines properties&body] (split-with #(-> (string/triml %)\n                                                         string/upper-case\n                                                         (string/starts-with? properties-start)\n                                                         not)\n                                                    lines)\n          body (drop-while #(-> (string/trim %)\n                                string/upper-case\n                                (string/starts-with? properties-end)\n                                not\n                                (or (string/blank? %)))\n                           properties&body)\n          body (if (and (seq body)\n                        (-> (first body)\n                            string/triml\n                            string/upper-case\n                            (string/starts-with? properties-end)))\n                 (let [line (string/replace (first body) #\"(?i):END:\\s?\" \"\")]\n                   (if (string/blank? line)\n                     (rest body)\n                     (cons line (rest body))))\n                 body)]\n      (->> (concat title-lines body)\n           (string/join \"\\n\")))\n\n    (not= format :org)\n    (let [lines (string/split-lines content)\n          lines (if (simplified-property? (first lines))\n                  (drop-while simplified-property? lines)\n                  (cons (first lines)\n                        (drop-while simplified-property? (rest lines))))]\n      (string/join \"\\n\" lines))\n\n    :else\n    content))\n\n(defn build-properties-str\n  [format properties]\n  (when (seq properties)\n    (let [org? (= format :org)\n          kv-format (if org? \":%s: %s\" \"%s:: %s\")\n          full-format (if org? \":PROPERTIES:\\n%s\\n:END:\" \"%s\\n\")\n          properties-content (->> (map (fn [[k v]] (util/format kv-format (name k) v)) properties)\n                                  (string/join \"\\n\"))]\n      (util/format full-format properties-content))))\n\n;; title properties body\n(defn with-built-in-properties\n  [properties content format]\n  (let [org? (= format :org)\n        properties (filter (fn [[k _v]] ((built-in-properties) k)) properties)]\n    (if (seq properties)\n      (let [lines (string/split-lines content)\n            ast (mldoc/->edn content (gp-mldoc/default-config format))\n            [title body] (if (mldoc/block-with-title? (first (ffirst ast)))\n                           [(first lines) (rest lines)]\n                           [nil lines])\n            properties-in-content? (and title (= (string/upper-case title) properties-start))\n            no-title? (or (simplified-property? title) properties-in-content?)\n            properties&body (concat\n                                 (when (and no-title? (not org?)) [title])\n                                 (if (and org? properties-in-content?)\n                                   (rest body)\n                                   body))\n            {properties-lines true body false} (group-by (fn [s]\n                                                           (or (simplified-property? s)\n                                                               (and org? (org-property? s)))) properties&body)\n            body (if org?\n                   (remove (fn [s] (contains? #{properties-start properties-end} (string/trim s))) body)\n                   body)\n            properties-in-content (->> (map #(get-property-key % format) properties-lines)\n                                       (remove nil?)\n                                       (set))\n            properties (remove (comp properties-in-content first) properties)\n            built-in-properties-area (map (fn [[k v]]\n                                            (if org?\n                                              (str \":\" (name k) \": \" v)\n                                              (str (name k) \":: \" v))) properties)\n            body (concat (if no-title? nil [title])\n                         (when org? [properties-start])\n                         built-in-properties-area\n                         properties-lines\n                         (when org?\n                           [properties-end])\n                         body)]\n        (string/triml (string/join \"\\n\" body)))\n      content)))\n\n;; FIXME:\n(defn front-matter?\n  [s]\n  (string/starts-with? s \"---\\n\"))\n\n(defn insert-property\n  \"Only accept nake content (without any indentation)\"\n  ([format content key value]\n   (insert-property format content key value false))\n  ([format content key value front-matter?]\n   (when (string? content)\n     (let [ast (mldoc/->edn content (gp-mldoc/default-config format))\n           title? (mldoc/block-with-title? (ffirst (map first ast)))\n           has-properties? (or (and title?\n                                    (or (mldoc/properties? (second ast))\n                                        (mldoc/properties? (second\n                                                            (remove\n                                                             (fn [[x _]]\n                                                               (contains? #{\"Hiccup\" \"Raw_Html\"} (first x)))\n                                                             ast)))))\n                               (mldoc/properties? (first ast)))\n           lines (string/split-lines content)\n           [title body] (if title?\n                          [(first lines) (string/join \"\\n\" (rest lines))]\n                          [nil (string/join \"\\n\" lines)])\n           scheduled (filter #(string/starts-with? % \"SCHEDULED\") lines)\n           deadline (filter #(string/starts-with? % \"DEADLINE\") lines)\n           body-without-timestamps (filter\n                                    #(not (or (string/starts-with? % \"SCHEDULED\")\n                                              (string/starts-with? % \"DEADLINE\")))\n                                    (string/split-lines body))\n           org? (= :org format)\n           key (string/lower-case (name key))\n           value (string/trim (str value))\n           start-idx (.indexOf lines properties-start)\n           end-idx (.indexOf lines properties-end)\n           result (cond\n                    (and org? (not has-properties?))\n                    (let [properties (build-properties-str format {key value})]\n                      (if title\n                        (string/join \"\\n\" (concat [title] scheduled deadline [properties] body-without-timestamps))\n                        (str properties \"\\n\" content)))\n\n                    (and has-properties? (>= start-idx 0) (> end-idx 0) (> end-idx start-idx))\n                    (let [exists? (atom false)\n                          before (subvec lines 0 start-idx)\n                          middle (doall\n                                  (->> (subvec lines (inc start-idx) end-idx)\n                                       (mapv (fn [text]\n                                               (let [[k v] (gp-util/split-first \":\" (subs text 1))]\n                                                 (if (and k v)\n                                                   (let [key-exists? (= k key)\n                                                         _ (when key-exists? (reset! exists? true))\n                                                         v (if key-exists? value v)]\n                                                     (str \":\" k \": \"  (string/trim v)))\n                                                   text))))))\n                          middle (if @exists? middle (conj middle (str \":\" key \": \"  value)))\n                          after (subvec lines (inc end-idx))\n                          lines (concat before [properties-start] middle [properties-end] after)]\n                      (string/join \"\\n\" lines))\n\n                    (not org?)\n                    (let [exists? (atom false)\n                          sym (if front-matter? \": \" \":: \")\n                          new-property-s (str key sym value)\n                          property-f (if front-matter? front-matter-property? simplified-property?)\n                          groups (partition-by property-f lines)\n                          compose-lines (fn []\n                                          (mapcat (fn [lines]\n                                                    (if (property-f (first lines))\n                                                      (let [lines (doall\n                                                                   (mapv (fn [text]\n                                                                           (let [[k v] (gp-util/split-first sym text)]\n                                                                             (if (and k v)\n                                                                               (let [key-exists? (= k key)\n                                                                                     _ (when key-exists? (reset! exists? true))\n                                                                                     v (if key-exists? value v)]\n                                                                                 (str k sym  (string/trim v)))\n                                                                               text)))\n                                                                         lines))\n                                                            lines (if @exists? lines (conj lines new-property-s))]\n                                                        lines)\n                                                      lines))\n                                                  groups))\n                          lines (cond\n                                  has-properties?\n                                  (compose-lines)\n\n                                  title?\n                                  (cons (first lines) (cons new-property-s (rest lines)))\n\n                                  :else\n                                  (cons new-property-s lines))]\n                      (string/join \"\\n\" lines))\n\n                    :else\n                    content)]\n       (string/trimr result)))))\n\n(defn insert-properties\n  [format content kvs]\n  (reduce\n   (fn [content [k v]]\n     (let [k (if (string? k)\n               (keyword (-> (string/lower-case k)\n                            (string/replace \" \" \"-\")))\n               k)\n           v (if (coll? v)\n               (some->>\n                (seq v)\n                (distinct)\n                (map (fn [item] (util/format \"[[%s]]\" (text/page-ref-un-brackets! item))))\n                (string/join \", \"))\n               v)]\n       (insert-property format content k v)))\n   content kvs))\n\n(defn remove-property\n  ([format key content]\n   (remove-property format key content true))\n  ([format key content first?]\n   (when (not (string/blank? (name key)))\n     (let [format (or format :markdown)\n           key (string/lower-case (name key))\n           remove-f (if first? util/remove-first remove)]\n       (if (and (= format :org) (not (gp-property/contains-properties? content)))\n         content\n         (let [lines (->> (string/split-lines content)\n                          (remove-f (fn [line]\n                                      (let [s (string/triml (string/lower-case line))]\n                                        (or (string/starts-with? s (str \":\" key \":\"))\n                                            (string/starts-with? s (str key \":: \")))))))]\n           (string/join \"\\n\" lines)))))))\n\n(defn remove-id-property\n  [format content]\n  (remove-property format \"id\" content false))\n\n;; FIXME: only remove from the properties area\n(defn remove-built-in-properties\n  [format content]\n  (let [built-in-properties* (built-in-properties)\n        content (reduce (fn [content key]\n                          (remove-property format key content)) content built-in-properties*)]\n    (if (= format :org)\n      (string/replace-first content (re-pattern \":PROPERTIES:\\n:END:\\n*\") \"\")\n      content)))\n\n(defn add-page-properties\n  [page-format properties-content properties]\n  (let [properties (update-keys properties name)\n        lines (string/split-lines properties-content)\n        front-matter-format? (contains? #{:markdown} page-format)\n        lines (if front-matter-format?\n                (remove (fn [line]\n                          (contains? #{\"---\" \"\"} (string/trim line))) lines)\n                lines)\n        property-keys (keys properties)\n        prefix-f (case page-format\n                   :org (fn [k]\n                          (str \"#+\" (string/upper-case k) \": \"))\n                   :markdown (fn [k]\n                               (str (string/lower-case k) \": \"))\n                   identity)\n        exists? (atom #{})\n        lines (doall\n               (mapv (fn [line]\n                       (let [result (filter #(and % (util/starts-with? line (prefix-f %)))\n                                            property-keys)]\n                         (if (seq result)\n                           (let [k (first result)]\n                             (swap! exists? conj k)\n                             (str (prefix-f k) (get properties k)))\n                           line))) lines))\n        lines (concat\n               lines\n               (let [not-exists (remove\n                                 (fn [[k _]]\n                                   (contains? @exists? k))\n                                 properties)]\n                 (when (seq not-exists)\n                   (mapv\n                    (fn [[k v]] (str (prefix-f k) v))\n                    not-exists))))]\n    (util/format\n     (config/properties-wrapper-pattern page-format)\n     (string/join \"\\n\" lines))))\n"]}