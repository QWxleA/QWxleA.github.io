{"version":3,"sources":["frontend/util/property.cljs"],"mappings":"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","names":["js/frontend","js/frontend.util","js/frontend.util.property","js/frontend.util.property.properties-start","frontend.util.property/properties-start","js/frontend.util.property.properties-end","frontend.util.property/properties-end","js/frontend.util.property.properties-end-pattern","frontend.util.property/properties-end-pattern","cljs.core/re-pattern","frontend.util.format","frontend.util.property/built-in-extended-properties","cljs.core.atom","frontend.util.property/register-built-in-properties","props","cljs.core/reset!","cljs.core/deref","clojure.set.union","frontend.util.property/built-in-properties","cljs.core/set","cljs.core.map","cljs.core/keyword","frontend.config/markers","frontend.config/get-block-hidden-properties","frontend.util.property/properties-built-in?","properties","and__4251__auto__","cljs.core/seq","ks","cljs.core.comp","clojure.string/lower-case","cljs.core/name","cljs.core/keys","built-in-properties-set","cljs.core/every?","frontend.util.property/contains-properties?","content","clojure.string/includes?","logseq.graph-parser.util/safe-re-find","frontend.util.property/remove-empty-properties","clojure.string/replace","frontend.util.property/simplified-property?","line","cljs.core/boolean","frontend.util.property/front-matter-property?","frontend.util.property/get-property-key","format","temp__5720__auto__","key","cljs.core/last","cljs.core._EQ_","cljs.core.keyword","frontend.util.property/org-property?","cljs.core/contains?","frontend.util.property/get-org-property-keys","vec__93516","cljs.core.nth","content-lines","clojure.string/split-lines","_","properties&body","p1__93513#","cljs.core/split-with","clojure.string/triml","clojure.string/upper-case","clojure.string/starts-with?","cljs.core/rest","p1__93514#","cljs.core.take_while","clojure.string/trim","clojure.string/blank?","p1__93515#","clojure.string.split","cljs.core.remove","cljs.core/first","frontend.util.property/get-markdown-property-keys","p1__93519#","cljs.core.filter","cljs.core/re-matches","p1__93520#","frontend.util.property/get-property-keys","frontend.util.property/property-key-exist?","frontend.util/remove-first","frontend.util.property/goto-properties-end","_format","input","frontend.util.cursor.move_cursor_to_thing","from","frontend.util.cursor/pos","frontend.util.property/remove-properties","vec__93531","lines","title-lines","p1__93521#","body","p1__93522#","cljs.core.drop_while","cljs.core/cons","cljs.core.concat","clojure.string.join","cljs.core.not_EQ_","frontend.util.property/build-properties-str","org?","kv-format","full-format","properties-content","p__93542","vec__93543","k","v","frontend.util.property/with-built-in-properties","p__93547","vec__93548","_v","fexpr__93551","vec__93552","map__93555","cljs.core/--destructure-map","cljs.core.get","ast","frontend.format.mldoc/->edn","logseq.graph_parser.mldoc.default_config","title","frontend.format.mldoc/block-with-title?","cljs.core/ffirst","properties-in-content?","no-title?","or__4253__auto__","properties-lines","cljs.core/group-by","s","properties-in-content","p1__93546#","cljs.core/nil?","built-in-properties-area","p__93556","vec__93557","frontend.util.property/front-matter?","var_args","G__93564","frontend.util.property/insert-property","js/Error","value","frontend.util.property.insert_property","front-matter?","vec__93565","title?","has-properties?","frontend.format.mldoc/properties?","cljs.core/second","p__93568","vec__93569","x","scheduled","p1__93560#","deadline","p1__93561#","body-without-timestamps","p1__93562#","start-idx","end-idx","result","exists?","before","cljs.core.subvec","middle","cljs.core.doall","cljs.core.mapv","text","vec__93572","logseq.graph-parser.util/split-first","cljs.core.subs","key-exists?","cljs.core.conj","after","sym","new-property-s","property-f","groups","cljs.core.partition_by","compose-lines","cljs.core.mapcat","G__93576","vec__93577","clojure.string/trimr","frontend.util.property/insert-properties","kvs","cljs.core.reduce","p__93587","vec__93588","cljs.core/coll?","G__93592","cljs.core.distinct","item","logseq.graph-parser.text/page-ref-un-brackets!","G__93601","frontend.util.property/remove-property","frontend.util.property.remove_property","first?","remove-f","cljs.core/remove","cljs.core/not","G__93614","G__93615","frontend.util.property/remove-id-property","frontend.util.property/remove-built-in-properties","built-in-properties*","clojure.string/replace-first","frontend.util.property/->new-properties","vec__93634","compare-k","frontend.util.property/add-page-properties","page-format","medley.core/map-keys","front-matter-format?","property-keys","prefix-f","G__93638","cljs.core/Keyword","cljs.core/identity","p1__93637#","frontend.util/starts-with?","cljs.core.swap_BANG_","cljs.core/conj","not-exists","p__93641","vec__93642","p__93645","vec__93646","frontend.config/properties-wrapper-pattern","frontend.util.property/properties-ast?","block","cljs.core/vector?"],"sourcesContent":["(ns frontend.util.property\n  (:require [clojure.string :as string]\n            [frontend.util :as util]\n            [clojure.set :as set]\n            [frontend.config :as config]\n            [medley.core :as medley]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [frontend.format.mldoc :as mldoc]\n            [logseq.graph-parser.text :as text]\n            [frontend.util.cursor :as cursor]))\n\n(defonce properties-start \":PROPERTIES:\")\n(defonce properties-end \":END:\")\n(defonce properties-end-pattern\n  (re-pattern (util/format \"%s[\\t\\r ]*\\n|(%s\\\\s*$)\" properties-end properties-end)))\n\n(def built-in-extended-properties (atom #{}))\n(defn register-built-in-properties\n  [props]\n  (reset! built-in-extended-properties (set/union @built-in-extended-properties props)))\n\n(defn built-in-properties\n  []\n  (set/union\n   #{:id :custom-id :background-color :heading :collapsed :created-at :updated-at :last-modified-at :created_at :last_modified_at :query-table :query-properties :query-sort-by :query-sort-desc\n     :ls-type :hl-type :hl-page :hl-stamp}\n   (set (map keyword config/markers))\n   (set (config/get-block-hidden-properties))\n   @built-in-extended-properties))\n\n(defn properties-built-in?\n  [properties]\n  (and (seq properties)\n       (let [ks (map (comp keyword string/lower-case name) (keys properties))\n             built-in-properties-set (built-in-properties)]\n         (every? built-in-properties-set ks))))\n\n(defn contains-properties?\n  [content]\n  (when content\n    (and (string/includes? content properties-start)\n         (gp-util/safe-re-find properties-end-pattern content))))\n\n(defn remove-empty-properties\n  [content]\n  (if (contains-properties? content)\n    (string/replace content\n                    (re-pattern \":PROPERTIES:\\n+:END:\\n*\")\n                    \"\")\n    content))\n\n(defn simplified-property?\n  [line]\n  (boolean\n   (and (string? line)\n        (gp-util/safe-re-find #\"^\\s?[^ ]+:: \" line))))\n\n(defn front-matter-property?\n  [line]\n  (boolean\n   (and (string? line)\n        (gp-util/safe-re-find #\"^\\s*[^ ]+: \" line))))\n\n(defn get-property-key\n  [line format]\n  (and (string? line)\n       (when-let [key (last\n                       (if (= format :org)\n                         (gp-util/safe-re-find #\"^\\s*:([^: ]+): \" line)\n                         (gp-util/safe-re-find #\"^\\s*([^ ]+):: \" line)))]\n         (keyword key))))\n\n(defn org-property?\n  [line]\n  (boolean\n   (and (string? line)\n        (gp-util/safe-re-find #\"^\\s*:[^: ]+: \" line)\n        (when-let [key (get-property-key line :org)]\n          (not (contains? #{:PROPERTIES :END} key))))))\n\n(defn get-org-property-keys\n  [content]\n  (let [content-lines (string/split-lines content)\n        [_ properties&body] (split-with #(-> (string/triml %)\n                                             string/upper-case\n                                             (string/starts-with? properties-start)\n                                             not)\n                                        content-lines)\n        properties (rest (take-while #(-> (string/trim %)\n                                          string/upper-case\n                                          (string/starts-with? properties-end)\n                                          not\n                                          (or (string/blank? %)))\n                                     properties&body))]\n    (when (seq properties)\n      (map #(->> (string/split % \":\")\n                 (remove string/blank?)\n                 first\n                 string/upper-case)\n           properties))))\n\n(defn get-markdown-property-keys\n  [content]\n  (let [content-lines (string/split-lines content)\n        properties (filter #(re-matches #\"^.+::\\s*.+\" %) content-lines)]\n    (when (seq properties)\n      (map #(->> (string/split % \"::\")\n                 (remove string/blank?)\n                 first\n                 string/upper-case)\n           properties))))\n\n(defn get-property-keys\n  [format content]\n  (cond\n    (contains-properties? content)\n    (get-org-property-keys content)\n\n    (= :markdown format)\n    (get-markdown-property-keys content)))\n\n(defn property-key-exist?\n  [format content key]\n  (let [key (string/upper-case key)]\n    (contains? (set (util/remove-first #{key} (get-property-keys format content))) key)))\n\n(defn goto-properties-end\n  [_format input]\n  (cursor/move-cursor-to-thing input properties-start 0)\n  (let [from (cursor/pos input)]\n    (cursor/move-cursor-to-thing input properties-end from)))\n\n(defn remove-properties\n  [format content]\n  (cond\n    (contains-properties? content)\n    (let [lines (string/split-lines content)\n          [title-lines properties&body] (split-with #(-> (string/triml %)\n                                                         string/upper-case\n                                                         (string/starts-with? properties-start)\n                                                         not)\n                                                    lines)\n          body (drop-while #(-> (string/trim %)\n                                string/upper-case\n                                (string/starts-with? properties-end)\n                                not\n                                (or (string/blank? %)))\n                           properties&body)\n          body (if (and (seq body)\n                        (-> (first body)\n                            string/triml\n                            string/upper-case\n                            (string/starts-with? properties-end)))\n                 (let [line (string/replace (first body) #\"(?i):END:\\s?\" \"\")]\n                   (if (string/blank? line)\n                     (rest body)\n                     (cons line (rest body))))\n                 body)]\n      (->> (concat title-lines body)\n           (string/join \"\\n\")))\n\n    (not= format :org)\n    (let [lines (string/split-lines content)\n          lines (if (simplified-property? (first lines))\n                  (drop-while simplified-property? lines)\n                  (cons (first lines)\n                        (drop-while simplified-property? (rest lines))))]\n      (string/join \"\\n\" lines))\n\n    :else\n    content))\n\n(defn build-properties-str\n  [format properties]\n  (when (seq properties)\n    (let [org? (= format :org)\n          kv-format (if org? \":%s: %s\" \"%s:: %s\")\n          full-format (if org? \":PROPERTIES:\\n%s\\n:END:\" \"%s\\n\")\n          properties-content (->> (map (fn [[k v]] (util/format kv-format (name k) v)) properties)\n                                  (string/join \"\\n\"))]\n      (util/format full-format properties-content))))\n\n;; title properties body\n(defn with-built-in-properties\n  [properties content format]\n  (let [org? (= format :org)\n        properties (filter (fn [[k _v]] ((built-in-properties) k)) properties)]\n    (if (seq properties)\n      (let [lines (string/split-lines content)\n            ast (mldoc/->edn content (gp-mldoc/default-config format))\n            [title body] (if (mldoc/block-with-title? (first (ffirst ast)))\n                           [(first lines) (rest lines)]\n                           [nil lines])\n            properties-in-content? (and title (= (string/upper-case title) properties-start))\n            no-title? (or (simplified-property? title) properties-in-content?)\n            properties&body (concat\n                                 (when (and no-title? (not org?)) [title])\n                                 (if (and org? properties-in-content?)\n                                   (rest body)\n                                   body))\n            {properties-lines true body false} (group-by (fn [s]\n                                                           (or (simplified-property? s)\n                                                               (and org? (org-property? s)))) properties&body)\n            body (if org?\n                   (remove (fn [s] (contains? #{properties-start properties-end} (string/trim s))) body)\n                   body)\n            properties-in-content (->> (map #(get-property-key % format) properties-lines)\n                                       (remove nil?)\n                                       (set))\n            properties (remove (comp properties-in-content first) properties)\n            built-in-properties-area (map (fn [[k v]]\n                                            (if org?\n                                              (str \":\" (name k) \": \" v)\n                                              (str (name k) \":: \" v))) properties)\n            body (concat (if no-title? nil [title])\n                         (when org? [properties-start])\n                         built-in-properties-area\n                         properties-lines\n                         (when org?\n                           [properties-end])\n                         body)]\n        (string/triml (string/join \"\\n\" body)))\n      content)))\n\n;; FIXME:\n(defn front-matter?\n  [s]\n  (string/starts-with? s \"---\\n\"))\n\n(defn insert-property\n  \"Only accept nake content (without any indentation)\"\n  ([format content key value]\n   (insert-property format content key value false))\n  ([format content key value front-matter?]\n   (when (string? content)\n     (let [ast (mldoc/->edn content (gp-mldoc/default-config format))\n           title? (mldoc/block-with-title? (ffirst (map first ast)))\n           has-properties? (or (and title?\n                                    (or (mldoc/properties? (second ast))\n                                        (mldoc/properties? (second\n                                                            (remove\n                                                             (fn [[x _]]\n                                                               (= \"Hiccup\" (first x)))\n                                                             ast)))))\n                               (mldoc/properties? (first ast)))\n           lines (string/split-lines content)\n           [title body] (if title?\n                          [(first lines) (string/join \"\\n\" (rest lines))]\n                          [nil (string/join \"\\n\" lines)])\n           scheduled (filter #(string/starts-with? % \"SCHEDULED\") lines)\n           deadline (filter #(string/starts-with? % \"DEADLINE\") lines)\n           body-without-timestamps (filter\n                                    #(not (or (string/starts-with? % \"SCHEDULED\")\n                                              (string/starts-with? % \"DEADLINE\")))\n                                    (string/split-lines body))\n           org? (= :org format)\n           key (string/lower-case (name key))\n           value (string/trim (str value))\n           start-idx (.indexOf lines properties-start)\n           end-idx (.indexOf lines properties-end)\n           result (cond\n                    (and org? (not has-properties?))\n                    (let [properties (build-properties-str format {key value})]\n                      (if title\n                        (string/join \"\\n\" (concat [title] scheduled deadline [properties] body-without-timestamps))\n                        (str properties \"\\n\" content)))\n\n                    (and has-properties? (>= start-idx 0) (> end-idx 0) (> end-idx start-idx))\n                    (let [exists? (atom false)\n                          before (subvec lines 0 start-idx)\n                          middle (doall\n                                  (->> (subvec lines (inc start-idx) end-idx)\n                                       (mapv (fn [text]\n                                               (let [[k v] (gp-util/split-first \":\" (subs text 1))]\n                                                 (if (and k v)\n                                                   (let [key-exists? (= k key)\n                                                         _ (when key-exists? (reset! exists? true))\n                                                         v (if key-exists? value v)]\n                                                     (str \":\" k \": \"  (string/trim v)))\n                                                   text))))))\n                          middle (if @exists? middle (conj middle (str \":\" key \": \"  value)))\n                          after (subvec lines (inc end-idx))\n                          lines (concat before [properties-start] middle [properties-end] after)]\n                      (string/join \"\\n\" lines))\n\n                    (not org?)\n                    (let [exists? (atom false)\n                          sym (if front-matter? \": \" \":: \")\n                          new-property-s (str key sym value)\n                          property-f (if front-matter? front-matter-property? simplified-property?)\n                          groups (partition-by property-f lines)\n                          compose-lines (fn []\n                                          (mapcat (fn [lines]\n                                                    (if (property-f (first lines))\n                                                      (let [lines (doall\n                                                                   (mapv (fn [text]\n                                                                           (let [[k v] (gp-util/split-first sym text)]\n                                                                             (if (and k v)\n                                                                               (let [key-exists? (= k key)\n                                                                                     _ (when key-exists? (reset! exists? true))\n                                                                                     v (if key-exists? value v)]\n                                                                                 (str k sym  (string/trim v)))\n                                                                               text)))\n                                                                         lines))\n                                                            lines (if @exists? lines (conj lines new-property-s))]\n                                                        lines)\n                                                      lines))\n                                                  groups))\n                          lines (cond\n                                  has-properties?\n                                  (compose-lines)\n\n                                  title?\n                                  (cons (first lines) (cons new-property-s (rest lines)))\n\n                                  :else\n                                  (cons new-property-s lines))]\n                      (string/join \"\\n\" lines))\n\n                    :else\n                    content)]\n       (string/trimr result)))))\n\n(defn insert-properties\n  [format content kvs]\n  (reduce\n   (fn [content [k v]]\n     (let [k (if (string? k)\n               (keyword (-> (string/lower-case k)\n                            (string/replace \" \" \"-\")))\n               k)\n           v (if (coll? v)\n               (some->>\n                (seq v)\n                (distinct)\n                (map (fn [item] (util/format \"[[%s]]\" (text/page-ref-un-brackets! item))))\n                (string/join \", \"))\n               v)]\n       (insert-property format content k v)))\n   content kvs))\n\n(defn remove-property\n  ([format key content]\n   (remove-property format key content true))\n  ([format key content first?]\n   (when (not (string/blank? (name key)))\n     (let [format (or format :markdown)\n           key (string/lower-case (name key))\n           remove-f (if first? util/remove-first remove)]\n       (if (and (= format :org) (not (contains-properties? content)))\n         content\n         (let [lines (->> (string/split-lines content)\n                          (remove-f (fn [line]\n                                      (let [s (string/triml (string/lower-case line))]\n                                        (or (string/starts-with? s (str \":\" key \":\"))\n                                            (string/starts-with? s (str key \":: \")))))))]\n           (string/join \"\\n\" lines)))))))\n\n(defn remove-id-property\n  [format content]\n  (remove-property format \"id\" content false))\n\n;; FIXME: only remove from the properties area\n(defn remove-built-in-properties\n  [format content]\n  (let [built-in-properties* (built-in-properties)\n        content (reduce (fn [content key]\n                          (remove-property format key content)) content built-in-properties*)]\n    (if (= format :org)\n      (string/replace-first content (re-pattern \":PROPERTIES:\\n:END:\\n*\") \"\")\n      content)))\n\n(defn ->new-properties\n  \"New syntax: key:: value\"\n  [content]\n  (if (contains-properties? content)\n    (let [lines (string/split-lines content)\n          start-idx (.indexOf lines properties-start)\n          end-idx (.indexOf lines properties-end)]\n      (if (and (>= start-idx 0) (> end-idx 0) (> end-idx start-idx))\n        (let [before (subvec lines 0 start-idx)\n              middle (->> (subvec lines (inc start-idx) end-idx)\n                          (map (fn [text]\n                                 (let [[k v] (gp-util/split-first \":\" (subs text 1))]\n                                   (if (and k v)\n                                     (let [k (string/replace k \"_\" \"-\")\n                                           compare-k (keyword (string/lower-case k))\n                                           k (if (contains? #{:id :custom_id :custom-id} compare-k) \"id\" k)\n                                           k (if (contains? #{:last-modified-at} compare-k) \"updated-at\" k)]\n                                       (str k \":: \" (string/trim v)))\n                                     text)))))\n              after (subvec lines (inc end-idx))\n              lines (concat before middle after)]\n          (string/join \"\\n\" lines))\n        content))\n    content))\n\n(defn add-page-properties\n  [page-format properties-content properties]\n  (let [properties (medley/map-keys name properties)\n        lines (string/split-lines properties-content)\n        front-matter-format? (contains? #{:markdown} page-format)\n        lines (if front-matter-format?\n                (remove (fn [line]\n                          (contains? #{\"---\" \"\"} (string/trim line))) lines)\n                lines)\n        property-keys (keys properties)\n        prefix-f (case page-format\n                   :org (fn [k]\n                          (str \"#+\" (string/upper-case k) \": \"))\n                   :markdown (fn [k]\n                               (str (string/lower-case k) \": \"))\n                   identity)\n        exists? (atom #{})\n        lines (doall\n               (mapv (fn [line]\n                       (let [result (filter #(and % (util/starts-with? line (prefix-f %)))\n                                            property-keys)]\n                         (if (seq result)\n                           (let [k (first result)]\n                             (swap! exists? conj k)\n                             (str (prefix-f k) (get properties k)))\n                           line))) lines))\n        lines (concat\n               lines\n               (let [not-exists (remove\n                                 (fn [[k _]]\n                                   (contains? @exists? k))\n                                 properties)]\n                 (when (seq not-exists)\n                   (mapv\n                    (fn [[k v]] (str (prefix-f k) v))\n                    not-exists))))]\n    (util/format\n     (config/properties-wrapper-pattern page-format)\n     (string/join \"\\n\" lines))))\n\n(defn properties-ast?\n  [block]\n  (and\n   (vector? block)\n   (contains? #{\"Property_Drawer\" \"Properties\"}\n              (first block))))\n"]}