{
"version":3,
"file":"module$node_modules$codemirror$mode$yaml_frontmatter$yaml_frontmatter.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/codemirror/mode/yaml-frontmatter/yaml-frontmatter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$yaml_frontmatter$yaml_frontmatter\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../yaml/yaml\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../yaml/yaml\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n\n  var START = 0, FRONTMATTER = 1, BODY = 2\n\n  // a mixed mode for Markdown text with an optional YAML front matter\n  CodeMirror.defineMode(\"yaml-frontmatter\", function (config, parserConfig) {\n    var yamlMode = CodeMirror.getMode(config, \"yaml\")\n    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || \"gfm\")\n\n    function curMode(state) {\n      return state.state == BODY ? innerMode : yamlMode\n    }\n\n    return {\n      startState: function () {\n        return {\n          state: START,\n          inner: CodeMirror.startState(yamlMode)\n        }\n      },\n      copyState: function (state) {\n        return {\n          state: state.state,\n          inner: CodeMirror.copyState(curMode(state), state.inner)\n        }\n      },\n      token: function (stream, state) {\n        if (state.state == START) {\n          if (stream.match(/---/, false)) {\n            state.state = FRONTMATTER\n            return yamlMode.token(stream, state.inner)\n          } else {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n            return innerMode.token(stream, state.inner)\n          }\n        } else if (state.state == FRONTMATTER) {\n          var end = stream.sol() && stream.match(/(---|\\.\\.\\.)/, false)\n          var style = yamlMode.token(stream, state.inner)\n          if (end) {\n            state.state = BODY\n            state.inner = CodeMirror.startState(innerMode)\n          }\n          return style\n        } else {\n          return innerMode.token(stream, state.inner)\n        }\n      },\n      innerMode: function (state) {\n        return {mode: curMode(state), state: state.inner}\n      },\n      blankLine: function (state) {\n        var mode = curMode(state)\n        if (mode.blankLine) return mode.blankLine(state.inner)\n      }\n    }\n  })\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","config","parserConfig","yamlMode","getMode","innerMode","base","startState","state","START","inner","copyState","BODY","token","stream","match","FRONTMATTER","end","sol","style","mode","blankLine"]
}
