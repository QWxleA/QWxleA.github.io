{"version":3,"sources":["rewrite_cljc/node/stringz.cljc"],"mappings":"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","names":["rewrite-cljc.node.stringz/wrap-string","s","rewrite-cljc.node.stringz/join-lines","lines","clojure.string.join","this__4502__auto__","k__4503__auto__","this__4504__auto__","k92326","else__4505__auto__","G__92333","cljs.core/Keyword","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__92342","vec__92343","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__92325","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this92327","other92328","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__92358","this__4510__auto__","k__4511__auto__","pred__92361","cljs.core/keyword-identical?","expr__92362","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-cljc.node.stringz/StringNode","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__92329","extmap__4542__auto__","G__92374","cljs.core/record?","rewrite-cljc.node.stringz/->StringNode","rewrite-cljc.node.stringz/map->StringNode","_","cljs.core/next","cljs.core.map","cljs.core.comp","cljs.tools.reader.edn/read-string","cljs.core/+","this","rewrite-cljc.node.protocols/make-printable!","rewrite-cljc.node.stringz/string-node"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.stringz\n  (:require [clojure.string :as string]\n            [clojure.tools.reader.edn :as edn]\n            [rewrite-cljc.node.protocols :as node] ))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defn- wrap-string\n  [s]\n  (str \"\\\"\" s \"\\\"\"))\n\n(defn- join-lines\n  [lines]\n  (string/join \"\\n\" lines))\n\n(defrecord StringNode [lines]\n  node/Node\n  (tag [_]\n    (if (next lines)\n      :multi-line\n      :token))\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (join-lines\n      (map\n        (comp edn/read-string wrap-string)\n        lines)))\n  (length [_]\n    (+ 2 (reduce + (map count lines))))\n  (string [_]\n    (wrap-string (join-lines lines)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(node/make-printable! StringNode)\n\n;; ## Constructors\n\n(defn string-node\n  \"Create node representing a string value where `lines`\n   can be a sequence of strings or a single string.\"\n  [lines]\n  (if (string? lines)\n    (->StringNode [lines])\n    (->StringNode lines)))\n"]}