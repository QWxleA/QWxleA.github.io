{"version":3,"sources":["rewrite_cljc/node/protocols.cljc"],"mappings":"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","names":["rewrite-cljc$node$protocols$Node$tag$dyn","x__4550__auto__","m__4551__auto__","rewrite-cljc.node.protocols/tag","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","rewrite-cljc$node$protocols$Node$printable_only_QMARK_$dyn","rewrite-cljc.node.protocols/printable-only?","rewrite-cljc$node$protocols$Node$sexpr$dyn","rewrite-cljc.node.protocols/sexpr","rewrite-cljc$node$protocols$Node$length$dyn","rewrite-cljc.node.protocols/length","rewrite-cljc$node$protocols$Node$string$dyn","rewrite-cljc.node.protocols/string","rewrite-cljc.node.protocols/Node","node","_","this","cljs.core/count","cljs.core.pr_str","rewrite-cljc.node.protocols/sexprs","nodes","cljs.core.remove","cljs.core.map","rewrite-cljc.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-cljc.node.protocols/concat-strings","cljs.core/str","rewrite-cljc$node$protocols$InnerNode$inner_QMARK_$dyn","rewrite-cljc.node.protocols/inner?","rewrite-cljc$node$protocols$InnerNode$children$dyn","rewrite-cljc.node.protocols/children","rewrite-cljc$node$protocols$InnerNode$replace_children$dyn","rewrite-cljc.node.protocols/replace-children","rewrite-cljc$node$protocols$InnerNode$leader_length$dyn","rewrite-cljc.node.protocols/leader-length","rewrite-cljc.node.protocols/InnerNode","children","cljs.core.ex_info","rewrite-cljc.node.protocols/child-sexprs","rewrite-cljc.node.protocols/node?","x","cljs.core.not_EQ_","rewrite-cljc$node$protocols$NodeCoerceable$coerce$dyn","rewrite-cljc.node.protocols/coerce","rewrite-cljc.node.protocols/NodeCoerceable","form","rewrite-cljc.node.protocols/node->string","n","n'","cljs.core/re-find","clojure.string/replace","rewrite_cljc.interop.simple_format","cljs.core/name","rewrite-cljc.node.protocols/make-printable-cljs!","obj","cljs.core/PROTOCOL_SENTINEL","o","writer","_opts","cljs.core/-write","rewrite-cljc.node.protocols/make-printable!","rewrite-cljc.node.protocols/without-whitespace","rewrite-cljc.node.protocols/assert-sexpr-count","c","js/Error","cljs.core._EQ_","rewrite-cljc.node.protocols/assert-single-sexpr","rewrite-cljc.node.protocols/extent","map__91596","cljs.core/--destructure-map","cljs.core.get","row","col","next-row","next-col","cljs.core/meta","and__4251__auto__","s","rows","cljs.core.filter","cljs.core.partial","cljs.core/=","cols","cljs.core/reverse","cljs.core.take_while","cljs.core/complement","p__91600","p__91601","vec__91602","cljs.core.nth","vec__91605","rewrite-cljc.node.protocols/+extent","row-extent","col-extent","G__91608"],"sourcesContent":["(ns ^:no-doc ^{:added \"0.4.0\"} rewrite-cljc.node.protocols\n  (:require [clojure.string :as string]\n            [rewrite-cljc.interop :as interop]\n            #?(:clj [rewrite-cljc.potemkin.clojure :refer [defprotocol+]]))\n  #?(:cljs (:require-macros [rewrite-cljc.potemkin.cljs :refer [defprotocol+]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defprotocol+ Node\n  \"Protocol for EDN/Clojure/ClojureScript nodes.\"\n  (tag [node]\n    \"Returns keyword representing type of `node`.\")\n  (printable-only? [node]\n    \"Return true if `node` cannot be converted to an s-expression element.\")\n  (sexpr [node]\n    \"Return `node` converted to form.\")\n  (length [node]\n    \"Return number of characters for the string version of `node`.\")\n  (string [node]\n    \"Return the string version of `node`.\"))\n\n(extend-protocol Node\n  #?(:clj Object :cljs default)\n  (tag [_] :unknown)\n  (printable-only? [_] false)\n  (sexpr [this] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexprs\n  \"Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\"\n  [nodes]\n  (->> nodes\n       (remove printable-only?)\n       (map sexpr)))\n\n(defn ^:no-doc sum-lengths\n  \"Return total string length for `nodes`.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn ^:no-doc concat-strings\n  \"Return string version of `nodes`.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n;; ## Inner Node\n\n(defprotocol+ InnerNode\n  \"Protocol for non-leaf EDN/Clojure/ClojureScript nodes.\"\n  (inner? [node]\n    \"Returns true if `node` can have children.\")\n  (children [node]\n    \"Returns child nodes for `node`.\")\n  (replace-children [node children]\n    \"Returns `node` replacing current children with `children`.\")\n  (leader-length [node]\n    \"Returns number of characters before children for `node`.\"))\n\n(extend-protocol InnerNode\n  #?(:clj Object :cljs default)\n  (inner? [_] false)\n  (children [_]\n    (throw (ex-info \"unsupported operation\" {})))\n  (replace-children [_ _]\n    (throw (ex-info \"unsupported operation\" {})))\n  (leader-length [_]\n    (throw (ex-info \"unsupported operation\" {}))))\n\n(defn child-sexprs\n  \"Returns children for `node` converted to forms.\"\n  [node]\n  (when (inner? node)\n    (sexprs (children node))))\n\n\n(defn node?\n  \"Returns true if `x` is a rewrite-cljc created node.\"\n  [ x ]\n  (not= :unknown (tag x)))\n\n;; ## Coerceable\n\n(defprotocol+ NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [form] \"Coerce `form` to node.\"))\n\n(defn- ^:no-doc node->string\n  #?(:clj ^String [node]\n     :cljs ^string [node])\n  (let [n (str (if (printable-only? node)\n                 (pr-str (string node))\n                 (string node)))\n        n' (if (re-find #\"\\n\" n)\n             (->> (string/replace n #\"\\r?\\n\" \"\\n  \")\n                  (interop/simple-format \"\\n  %s\\n\"))\n             (str \" \" n))]\n    (interop/simple-format \"<%s:%s>\" (name (tag node)) n')))\n\n#?(:clj\n   (defn ^:no-doc write-node\n     [^java.io.Writer writer node]\n     (.write writer (node->string node))))\n\n#?(:clj\n   (defmacro ^:no-doc make-printable-clj!\n     [class]\n     `(defmethod print-method ~class\n        [node# w#]\n        (write-node w# node#)))\n   :cljs\n   (defn ^:no-doc make-printable-cljs!\n     [obj]\n     (extend-protocol IPrintWithWriter\n       obj\n       (-pr-writer [o writer _opts]\n         (-write writer (node->string o))))))\n\n(defn make-printable! [obj]\n  #?(:clj (make-printable-clj! obj)\n     :cljs (make-printable-cljs! obj)))\n\n;; ## Helpers\n\n(defn ^:no-doc without-whitespace\n  [nodes]\n  (remove printable-only? nodes))\n\n(defn  ^:no-doc assert-sexpr-count\n  [nodes c]\n  (assert\n   (= (count (without-whitespace nodes)) c)\n   (interop/simple-format \"can only contain %d non-whitespace form%s.\"\n                          c (if (= c 1) \"\" \"s\"))))\n\n(defn ^:no-doc assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n\n(defn ^:no-doc extent\n  \"A node's extent is how far it moves the \\\"cursor\\\".\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \\\"cursor\\\" x rows.\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero.\"\n  [node]\n  (let [{:keys [row col next-row next-col]} (meta node)]\n    (if (and row col next-row next-col)\n      [(- next-row row)\n       (if (= row next-row row)\n         (- next-col col)\n         next-col)]\n      (let [s (string node)\n            rows (->> s (filter (partial = \\newline)) count)\n            cols (if (zero? rows)\n                   (count s)\n                   (->> s\n                     reverse\n                     (take-while (complement (partial = \\newline)))\n                     count\n                     inc))]\n        [rows cols]))))\n\n(defn ^:no-doc +extent\n  [[row col] [row-extent col-extent]]\n  [(+ row row-extent)\n   (cond-> col-extent (zero? row-extent) (+ col))])\n"]}