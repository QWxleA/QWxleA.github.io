{
"version":3,
"file":"goog.ui.keyboardshortcuthandler.js",
"lineCount":409,
"mappings":"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",
"sources":["goog/ui/keyboardshortcuthandler.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Generic keyboard shortcut handler.\n *\n * @see ../demos/keyboardshortcuts.html\n */\ngoog.provide('goog.ui.KeyboardShortcutHandler');\ngoog.provide('goog.ui.KeyboardShortcutHandler.EventType');\ngoog.provide('goog.ui.KeyboardShortcutHandler.Modifiers');\n\ngoog.require('goog.asserts');\ngoog.require('goog.dom.TagName');\ngoog.require('goog.events');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.events.EventType');\ngoog.require('goog.events.KeyCodes');\ngoog.require('goog.events.KeyNames');\ngoog.require('goog.events.Keys');\ngoog.require('goog.object');\ngoog.require('goog.ui.KeyboardEventData');\ngoog.require('goog.ui.KeyboardShortcutEvent');\ngoog.require('goog.ui.SyntheticKeyboardEvent');\ngoog.require('goog.userAgent');\ngoog.requireType('goog.events.BrowserEvent');\n\n\n\n/**\n * Component for handling keyboard shortcuts. A shortcut is registered and bound\n * to a specific identifier. Once the shortcut is triggered an event is fired\n * with the identifier for the shortcut. This allows keyboard shortcuts to be\n * customized without modifying the code that listens for them.\n *\n * Supports keyboard shortcuts triggered by a single key, a stroke stroke (key\n * plus at least one modifier) and a sequence of keys or strokes.\n *\n * @param {goog.events.EventTarget|EventTarget} keyTarget Event target that the\n *     key event listener is attached to, typically the applications root\n *     container.\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.ui.KeyboardShortcutHandler = function(keyTarget) {\n  'use strict';\n  goog.events.EventTarget.call(this);\n\n  /**\n   * Registered keyboard shortcuts tree. Stored as a map with the keyCode and\n   * modifier(s) as the key and either a list of further strokes or the shortcut\n   * task identifier as the value.\n   * @type {!goog.ui.KeyboardShortcutHandler.SequenceTree_}\n   * @see #makeStroke_\n   * @private\n   */\n  this.shortcuts_ = {};\n\n  /**\n   * The currently active shortcut sequence tree, which represents the position\n   * in the complete shortcuts_ tree reached by recent key strokes.\n   * @type {!goog.ui.KeyboardShortcutHandler.SequenceTree_}\n   * @private\n   */\n  this.currentTree_ = this.shortcuts_;\n\n  /**\n   * The time (in ms, epoch time) of the last keystroke which made progress in\n   * the shortcut sequence tree (i.e. the time that currentTree_ was last set).\n   * Used for timing out stroke sequences.\n   * @type {number}\n   * @private\n   */\n  this.lastStrokeTime_ = 0;\n\n  /**\n   * List of numeric key codes for keys that are safe to always regarded as\n   * shortcuts, even if entered in a textarea or input field.\n   * @type {Object}\n   * @private\n   */\n  this.globalKeys_ = goog.object.createSet(\n      goog.ui.KeyboardShortcutHandler.DEFAULT_GLOBAL_KEYS_);\n\n  /**\n   * List of input types that should only accept ENTER as a shortcut.\n   * @type {Object}\n   * @private\n   */\n  this.textInputs_ = goog.object.createSet(\n      goog.ui.KeyboardShortcutHandler.DEFAULT_TEXT_INPUTS_);\n\n  /**\n   * Whether to always prevent the default action if a shortcut event is fired.\n   * @type {boolean}\n   * @private\n   */\n  this.alwaysPreventDefault_ = true;\n\n  /**\n   * Whether to always stop propagation if a shortcut event is fired.\n   * @type {boolean}\n   * @private\n   */\n  this.alwaysStopPropagation_ = false;\n\n  /**\n   * Whether to treat all shortcuts as if they had been passed\n   * to setGlobalKeys().\n   * @type {boolean}\n   * @private\n   */\n  this.allShortcutsAreGlobal_ = false;\n\n  /**\n   * Whether to treat shortcuts with modifiers as if they had been passed\n   * to setGlobalKeys().  Ignored if allShortcutsAreGlobal_ is true.  Applies\n   * only to form elements (not content-editable).\n   * @type {boolean}\n   * @private\n   */\n  this.modifierShortcutsAreGlobal_ = true;\n\n  /**\n   * Whether to treat space key as a shortcut when the focused element is a\n   * checkbox, radiobutton or button.\n   * @type {boolean}\n   * @private\n   */\n  this.allowSpaceKeyOnButtons_ = false;\n\n  /**\n   * Tracks the currently pressed shortcut key, for Firefox.\n   * @type {?number}\n   * @private\n   */\n  this.activeShortcutKeyForGecko_ = null;\n\n  this.initializeKeyListener(keyTarget);\n};\ngoog.inherits(goog.ui.KeyboardShortcutHandler, goog.events.EventTarget);\n\n\n\n/**\n * A node in a keyboard shortcut sequence tree. A node is either:\n * 1. A terminal node with a non-nullable shortcut string which is the\n *    identifier for the shortcut triggered by traversing the tree to that node.\n * 2. An internal node with a null shortcut string and a\n *    `goog.ui.KeyboardShortcutHandler.SequenceTree_` representing the\n *    continued stroke sequences from this node.\n * For clarity, the static factory methods for creating internal and terminal\n * nodes below should be used rather than using this constructor directly.\n * @param {string=} opt_shortcut The shortcut identifier, for terminal nodes.\n * @constructor\n * @struct\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.SequenceNode_ = function(opt_shortcut) {\n  'use strict';\n  /** @const {?string} The shorcut action identifier, for terminal nodes. */\n  this.shortcut = opt_shortcut || null;\n\n  /** @const {goog.ui.KeyboardShortcutHandler.SequenceTree_} */\n  this.next = opt_shortcut ? null : {};\n};\n\n\n/**\n * Creates a terminal shortcut sequence node for the given shortcut identifier.\n * @param {string} shortcut The shortcut identifier.\n * @return {!goog.ui.KeyboardShortcutHandler.SequenceNode_}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.createTerminalNode_ = function(shortcut) {\n  'use strict';\n  return new goog.ui.KeyboardShortcutHandler.SequenceNode_(shortcut);\n};\n\n\n/**\n * Creates an internal shortcut sequence node - a non-terminal part of a\n * keyboard sequence.\n * @return {!goog.ui.KeyboardShortcutHandler.SequenceNode_}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.createInternalNode_ = function() {\n  'use strict';\n  return new goog.ui.KeyboardShortcutHandler.SequenceNode_();\n};\n\n\n/**\n * A map of strokes (represented as strings) to the nodes reached by those\n * strokes.\n * @typedef {Object<string, goog.ui.KeyboardShortcutHandler.SequenceNode_>}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.SequenceTree_;\n\n\n/**\n * Maximum allowed delay, in milliseconds, allowed between the first and second\n * key in a key sequence.\n * @type {number}\n */\ngoog.ui.KeyboardShortcutHandler.MAX_KEY_SEQUENCE_DELAY = 1500;  // 1.5 sec\n\n\n/**\n * Bit values for modifier keys.\n * @enum {number}\n */\ngoog.ui.KeyboardShortcutHandler.Modifiers = {\n  NONE: 0,\n  SHIFT: 1,\n  CTRL: 2,\n  ALT: 4,\n  META: 8\n};\n\n\n/**\n * Keys marked as global by default.\n * @type {Array<goog.events.KeyCodes>}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.DEFAULT_GLOBAL_KEYS_ = [\n  goog.events.KeyCodes.ESC, goog.events.KeyCodes.F1, goog.events.KeyCodes.F2,\n  goog.events.KeyCodes.F3, goog.events.KeyCodes.F4, goog.events.KeyCodes.F5,\n  goog.events.KeyCodes.F6, goog.events.KeyCodes.F7, goog.events.KeyCodes.F8,\n  goog.events.KeyCodes.F9, goog.events.KeyCodes.F10, goog.events.KeyCodes.F11,\n  goog.events.KeyCodes.F12, goog.events.KeyCodes.PAUSE\n];\n\n\n/**\n * Text input types to allow only ENTER shortcuts.\n * Web Forms 2.0 for HTML5: Section 4.10.7 from 29 May 2012.\n * @type {Array<string>}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.DEFAULT_TEXT_INPUTS_ = [\n  'color', 'date', 'datetime', 'datetime-local', 'email', 'month', 'number',\n  'password', 'search', 'tel', 'text', 'time', 'url', 'week'\n];\n\n\n/**\n * Events.\n * @enum {string}\n */\ngoog.ui.KeyboardShortcutHandler.EventType = {\n  SHORTCUT_TRIGGERED: 'shortcut',\n  SHORTCUT_PREFIX: 'shortcut_'\n};\n\n\n/**\n * Cache for name to key code lookup.\n * @type {Object<number>}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.nameToKeyCodeCache_;\n\n\n/**\n * Target on which to listen for key events.\n * @type {goog.events.EventTarget|EventTarget}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.keyTarget_;\n\n\n/**\n * Whether a key event is a printable-key event. Windows uses ctrl+alt\n * (alt-graph) keys to type characters on European keyboards. For such keys, we\n * cannot identify whether these keys are used for typing characters when\n * receiving keydown events. Therefore, we set this flag when we receive their\n * respective keypress events and fire shortcut events only when we do not\n * receive them.\n * @type {boolean}\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.isPrintableKey_;\n\n\n/**\n * Static method for getting the key code for a given key.\n * @param {string} name Name of key.\n * @return {number} The key code.\n */\ngoog.ui.KeyboardShortcutHandler.getKeyCode = function(name) {\n  'use strict';\n  // Build reverse lookup object the first time this method is called.\n  if (!goog.ui.KeyboardShortcutHandler.nameToKeyCodeCache_) {\n    var map = {};\n    for (var key in goog.events.KeyNames) {\n      // Explicitly convert the stringified map keys to numbers and normalize.\n      map[goog.events.KeyNames[key]] =\n          goog.events.KeyCodes.normalizeKeyCode(parseInt(key, 10));\n    }\n    goog.ui.KeyboardShortcutHandler.nameToKeyCodeCache_ = map;\n  }\n\n  // Check if key is in cache.\n  return goog.ui.KeyboardShortcutHandler.nameToKeyCodeCache_[name];\n};\n\n\n/**\n * Sets whether to always prevent the default action when a shortcut event is\n * fired. If false, the default action is prevented only if preventDefault is\n * called on either of the corresponding SHORTCUT_TRIGGERED or SHORTCUT_PREFIX\n * events. If true, the default action is prevented whenever a shortcut event\n * is fired. The default value is true.\n * @param {boolean} alwaysPreventDefault Whether to always call preventDefault.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setAlwaysPreventDefault = function(\n    alwaysPreventDefault) {\n  'use strict';\n  this.alwaysPreventDefault_ = alwaysPreventDefault;\n};\n\n\n/**\n * Returns whether the default action will always be prevented when a shortcut\n * event is fired. The default value is true.\n * @see #setAlwaysPreventDefault\n * @return {boolean} Whether preventDefault will always be called.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getAlwaysPreventDefault = function() {\n  'use strict';\n  return this.alwaysPreventDefault_;\n};\n\n\n/**\n * Sets whether to always stop propagation for the event when fired. If false,\n * the propagation is stopped only if stopPropagation is called on either of the\n * corresponding SHORT_CUT_TRIGGERED or SHORTCUT_PREFIX events. If true, the\n * event is prevented from propagating beyond its target whenever it is fired.\n * The default value is false.\n * @param {boolean} alwaysStopPropagation Whether to always call\n *     stopPropagation.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setAlwaysStopPropagation = function(\n    alwaysStopPropagation) {\n  'use strict';\n  this.alwaysStopPropagation_ = alwaysStopPropagation;\n};\n\n\n/**\n * Returns whether the event will always be stopped from propagating beyond its\n * target when a shortcut event is fired. The default value is false.\n * @see #setAlwaysStopPropagation\n * @return {boolean} Whether stopPropagation will always be called.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getAlwaysStopPropagation =\n    function() {\n  'use strict';\n  return this.alwaysStopPropagation_;\n};\n\n\n/**\n * Sets whether to treat all shortcuts (including modifier shortcuts) as if the\n * keys had been passed to the setGlobalKeys function.\n * @param {boolean} allShortcutsGlobal Whether to treat all shortcuts as global.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setAllShortcutsAreGlobal = function(\n    allShortcutsGlobal) {\n  'use strict';\n  this.allShortcutsAreGlobal_ = allShortcutsGlobal;\n};\n\n\n/**\n * Returns whether all shortcuts (including modifier shortcuts) are treated as\n * if the keys had been passed to the setGlobalKeys function.\n * @see #setAllShortcutsAreGlobal\n * @return {boolean} Whether all shortcuts are treated as globals.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getAllShortcutsAreGlobal =\n    function() {\n  'use strict';\n  return this.allShortcutsAreGlobal_;\n};\n\n\n/**\n * Sets whether to treat shortcuts with modifiers as if the keys had been\n * passed to the setGlobalKeys function.  Ignored if you have called\n * setAllShortcutsAreGlobal(true).  Applies only to form elements (not\n * content-editable).\n * @param {boolean} modifierShortcutsGlobal Whether to treat shortcuts with\n *     modifiers as global.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setModifierShortcutsAreGlobal =\n    function(modifierShortcutsGlobal) {\n  'use strict';\n  this.modifierShortcutsAreGlobal_ = modifierShortcutsGlobal;\n};\n\n\n/**\n * Returns whether shortcuts with modifiers are treated as if the keys had been\n * passed to the setGlobalKeys function.  Ignored if you have called\n * setAllShortcutsAreGlobal(true).  Applies only to form elements (not\n * content-editable).\n * @see #setModifierShortcutsAreGlobal\n * @return {boolean} Whether shortcuts with modifiers are treated as globals.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getModifierShortcutsAreGlobal =\n    function() {\n  'use strict';\n  return this.modifierShortcutsAreGlobal_;\n};\n\n\n/**\n * Sets whether to treat space key as a shortcut when the focused element is a\n * checkbox, radiobutton or button.\n * @param {boolean} allowSpaceKeyOnButtons Whether to treat space key as a\n *     shortcut when the focused element is a checkbox, radiobutton or button.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setAllowSpaceKeyOnButtons = function(\n    allowSpaceKeyOnButtons) {\n  'use strict';\n  this.allowSpaceKeyOnButtons_ = allowSpaceKeyOnButtons;\n};\n\n\n/**\n * Registers a keyboard shortcut.\n * @param {string} identifier Identifier for the task performed by the keyboard\n *                 combination. Multiple shortcuts can be provided for the same\n *                 task by specifying the same identifier.\n * @param {...(number|string|Array<number>)} var_args See below.\n *\n * param {number} keyCode Numeric code for key\n * param {number=} opt_modifiers Bitmap indicating required modifier keys.\n *                goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,\n *                or META.\n *\n * The last two parameters can be repeated any number of times to create a\n * shortcut using a sequence of strokes. Instead of varargs the second parameter\n * could also be an array where each element would be regarded as a parameter.\n *\n * A string representation of the shortcut can be supplied instead of the last\n * two parameters. In that case the method only takes two arguments, the\n * identifier and the string.\n *\n * Examples:\n *   g               registerShortcut(str, G_KEYCODE)\n *   Ctrl+g          registerShortcut(str, G_KEYCODE, CTRL)\n *   Ctrl+Shift+g    registerShortcut(str, G_KEYCODE, CTRL | SHIFT)\n *   Ctrl+g a        registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE)\n *   Ctrl+g Shift+a  registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE, SHIFT)\n *   g a             registerShortcut(str, G_KEYCODE, NONE, A_KEYCODE)\n *\n * Examples using string representation for shortcuts:\n *   g               registerShortcut(str, 'g')\n *   Ctrl+g          registerShortcut(str, 'ctrl+g')\n *   Ctrl+Shift+g    registerShortcut(str, 'ctrl+shift+g')\n *   Ctrl+g a        registerShortcut(str, 'ctrl+g a')\n *   Ctrl+g Shift+a  registerShortcut(str, 'ctrl+g shift+a')\n *   g a             registerShortcut(str, 'g a').\n */\ngoog.ui.KeyboardShortcutHandler.prototype.registerShortcut = function(\n    identifier, var_args) {\n  'use strict';\n  // Add shortcut to shortcuts_ tree\n  goog.ui.KeyboardShortcutHandler.setShortcut_(\n      this.shortcuts_, this.interpretStrokes_(1, arguments), identifier);\n};\n\n\n/**\n * Unregisters a keyboard shortcut by keyCode and modifiers or string\n * representation of sequence.\n *\n * param {number} keyCode Numeric code for key\n * param {number=} opt_modifiers Bitmap indicating required modifier keys.\n *                 goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,\n *                 or META.\n *\n * The two parameters can be repeated any number of times to create a shortcut\n * using a sequence of strokes.\n *\n * A string representation of the shortcut can be supplied instead see\n * {@link #registerShortcut} for syntax. In that case the method only takes one\n * argument.\n *\n * @param {...(number|string|Array<number>)} var_args String representation, or\n *     array or list of alternating key codes and modifiers.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.unregisterShortcut = function(\n    var_args) {\n  'use strict';\n  // Remove shortcut from tree.\n  goog.ui.KeyboardShortcutHandler.unsetShortcut_(\n      this.shortcuts_, this.interpretStrokes_(0, arguments));\n};\n\n\n/**\n * Verifies if a particular keyboard shortcut is registered already. It has\n * the same interface as the unregistering of shortcuts.\n *\n * param {number} keyCode Numeric code for key\n * param {number=} opt_modifiers Bitmap indicating required modifier keys.\n *                 goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,\n *                 or META.\n *\n * The two parameters can be repeated any number of times to create a shortcut\n * using a sequence of strokes.\n *\n * A string representation of the shortcut can be supplied instead see\n * {@link #registerShortcut} for syntax. In that case the method only takes one\n * argument.\n *\n * @param {...(number|string|Array<number>)} var_args String representation, or\n *     array or list of alternating key codes and modifiers.\n * @return {boolean} Whether the specified keyboard shortcut is registered.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.isShortcutRegistered = function(\n    var_args) {\n  'use strict';\n  return this.checkShortcut_(\n      this.shortcuts_, this.interpretStrokes_(0, arguments));\n};\n\n\n/**\n * Parses the variable arguments for registerShortcut and unregisterShortcut.\n * @param {number} initialIndex The first index of \"args\" to treat as\n *     variable arguments.\n * @param {Object} args The \"arguments\" array passed\n *     to registerShortcut or unregisterShortcut.  Please see the comments in\n *     registerShortcut for list of allowed forms.\n * @return {!Array<Array<string>>} The sequence of strokes,\n *     represented as arrays of strings.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.interpretStrokes_ = function(\n    initialIndex, args) {\n  'use strict';\n  var strokes;\n\n  // Build strokes array from string.\n  if (typeof (args[initialIndex]) === 'string') {\n    strokes =\n        goog.ui.KeyboardShortcutHandler.parseStringShortcut(args[initialIndex])\n            .map(function(stroke) {\n              'use strict';\n              goog.asserts.assertNumber(\n                  stroke.keyCode,\n                  'A non-modifier key is needed in each stroke.');\n              return goog.ui.KeyboardShortcutHandler.makeStroke_(\n                  stroke.key || '', stroke.keyCode, stroke.modifiers);\n            });\n\n    // Build strokes array from arguments list or from array.\n  } else {\n    var strokesArgs = args, i = initialIndex;\n    if (Array.isArray(args[initialIndex])) {\n      strokesArgs = args[initialIndex];\n      i = 0;\n    }\n\n    strokes = [];\n    for (; i < strokesArgs.length; i += 2) {\n      // keyName == '' because this branch is only run on numbers\n      // (corresponding to keyCodes).\n      strokes.push(goog.ui.KeyboardShortcutHandler.makeStroke_(\n          '', strokesArgs[i], strokesArgs[i + 1]));\n    }\n  }\n\n  return strokes;\n};\n\n\n/**\n * Unregisters all keyboard shortcuts.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.unregisterAll = function() {\n  'use strict';\n  this.shortcuts_ = {};\n};\n\n\n/**\n * Sets the global keys; keys that are safe to always regarded as shortcuts,\n * even if entered in a textarea or input field.\n * @param {Array<number>} keys List of keys.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setGlobalKeys = function(keys) {\n  'use strict';\n  this.globalKeys_ = goog.object.createSet(keys);\n};\n\n\n/**\n * @return {!Array<string>} The global keys, i.e. keys that are safe to always\n *     regard as shortcuts, even if entered in a textarea or input field.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getGlobalKeys = function() {\n  'use strict';\n  return goog.object.getKeys(this.globalKeys_);\n};\n\n\n/** @override */\ngoog.ui.KeyboardShortcutHandler.prototype.disposeInternal = function() {\n  'use strict';\n  goog.ui.KeyboardShortcutHandler.superClass_.disposeInternal.call(this);\n  this.unregisterAll();\n  this.clearKeyListener();\n};\n\n\n/**\n * Returns event type for a specific shortcut.\n * @param {string} identifier Identifier for the shortcut task.\n * @return {string} The event type.\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getEventType = function(identifier) {\n  'use strict';\n  return goog.ui.KeyboardShortcutHandler.EventType.SHORTCUT_PREFIX + identifier;\n};\n\n\n/**\n * Builds stroke array from string representation of shortcut.\n * @param {string} s String representation of shortcut.\n * @return {!Array<{key: ?string, keyCode: ?number, modifiers: number}>} The\n *     stroke array.  A null keyCode means no non-modifier key was part of the\n *     stroke.\n */\ngoog.ui.KeyboardShortcutHandler.parseStringShortcut = function(s) {\n  'use strict';\n  // Normalize whitespace and force to lower case.\n  s = s.replace(/[ +]*\\+[ +]*/g, '+').replace(/[ ]+/g, ' ').toLowerCase();\n\n  // Build strokes array from string, space separates strokes, plus separates\n  // individual keys.\n  var groups = s.split(' ');\n  var strokes = [];\n  for (var group, i = 0; group = groups[i]; i++) {\n    var keys = group.split('+');\n    // Explicitly re-initialize key data (JS does not have block scoping).\n    var keyName = null;\n    var keyCode = null;\n    var modifiers = goog.ui.KeyboardShortcutHandler.Modifiers.NONE;\n    for (var key, j = 0; key = keys[j]; j++) {\n      switch (key) {\n        case 'shift':\n          modifiers |= goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT;\n          continue;\n        case 'ctrl':\n          modifiers |= goog.ui.KeyboardShortcutHandler.Modifiers.CTRL;\n          continue;\n        case 'alt':\n          modifiers |= goog.ui.KeyboardShortcutHandler.Modifiers.ALT;\n          continue;\n        case 'meta':\n          modifiers |= goog.ui.KeyboardShortcutHandler.Modifiers.META;\n          continue;\n      }\n      if (keyCode !== null) {\n        goog.asserts.fail('At most one non-modifier key can be in a stroke.');\n      }\n      keyCode = goog.ui.KeyboardShortcutHandler.getKeyCode(key);\n      goog.asserts.assertNumber(\n          keyCode, 'Key name not found in goog.events.KeyNames: ' + key);\n      keyName = key;\n      break;\n    }\n    strokes.push({key: keyName, keyCode: keyCode, modifiers: modifiers});\n  }\n\n  return strokes;\n};\n\n\n/**\n * Adds a key event listener that triggers {@link #handleKeyDown_} when keys\n * are pressed.\n * @param {goog.events.EventTarget|EventTarget} keyTarget Event target that the\n *     event listener should be attached to.\n * @protected\n */\ngoog.ui.KeyboardShortcutHandler.prototype.initializeKeyListener = function(\n    keyTarget) {\n  'use strict';\n  this.keyTarget_ = keyTarget;\n\n  goog.events.listen(\n      this.keyTarget_, goog.events.EventType.KEYDOWN,\n      this.handleBrowserKeyDown_, undefined /* opt_capture */, this);\n  goog.events.listen(\n      this.keyTarget_, goog.ui.SyntheticKeyboardEvent.Type.KEYDOWN,\n      this.handleSyntheticKeyDown_, undefined /* opt_capture */, this);\n\n  // Windows uses ctrl+alt keys (a.k.a. alt-graph keys) for typing characters\n  // on European keyboards (e.g. ctrl+alt+e for an an euro sign.) Unfortunately,\n  // Windows browsers do not have any methods except listening to keypress and\n  // keyup events to identify if ctrl+alt keys are really used for inputting\n  // characters. Therefore, we listen to these events and prevent firing\n  // shortcut-key events if ctrl+alt keys are used for typing characters.\n  if (goog.userAgent.WINDOWS) {\n    goog.events.listen(\n        this.keyTarget_, goog.events.EventType.KEYPRESS,\n        this.handleWindowsBrowserKeyPress_, undefined /* opt_capture */, this);\n    goog.events.listen(\n        this.keyTarget_, goog.ui.SyntheticKeyboardEvent.Type.KEYPRESS,\n        this.handleWindowsSyntheticKeyPress_, undefined /* opt_capture */,\n        this);\n  }\n\n  goog.events.listen(\n      this.keyTarget_, goog.events.EventType.KEYUP, this.handleBrowserKeyUp_,\n      undefined /* opt_capture */, this);\n  goog.events.listen(\n      this.keyTarget_, goog.ui.SyntheticKeyboardEvent.Type.KEYUP,\n      this.handleSyntheticKeyUp_, undefined /* opt_capture */, this);\n};\n\n\n/**\n * Keyup handler for events initiated from the browser.\n * @param {!goog.events.BrowserEvent} e The key event.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleBrowserKeyUp_ = function(e) {\n  'use strict';\n  this.handleKeyUp_(goog.ui.KeyboardEventData.fromBrowserEvent(e));\n};\n\n\n/**\n * Keyup handler for synthetic events.\n * @param {!goog.ui.SyntheticKeyboardEvent} e\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleSyntheticKeyUp_ = function(e) {\n  'use strict';\n  this.handleKeyUp_(e.getData());\n};\n\n\n/**\n * Handler for when a keyup event is fired. Currently only handled on Windows\n * (all browsers) or Gecko (all platforms).\n * @param {!goog.ui.KeyboardEventData} data\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleKeyUp_ = function(data) {\n  'use strict';\n  if (goog.userAgent.GECKO) {\n    this.handleGeckoKeyUp_(data);\n  }\n\n  if (goog.userAgent.WINDOWS) {\n    this.handleWindowsKeyUp_(data);\n  }\n};\n\n\n/**\n * Handler for when a keyup event is fired in Firefox (Gecko).\n * @param {!goog.ui.KeyboardEventData} data\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleGeckoKeyUp_ = function(data) {\n  'use strict';\n  // Firefox triggers buttons on space keyUp instead of keyDown.  So if space\n  // keyDown activated a shortcut, do NOT also trigger the focused button.\n  if (goog.events.KeyCodes.SPACE == this.activeShortcutKeyForGecko_ &&\n      goog.events.KeyCodes.SPACE == data.getKeyCode()) {\n    data.getPreventDefaultFn()();\n  }\n  this.activeShortcutKeyForGecko_ = null;\n};\n\n\n/**\n * Returns whether this event is possibly used for typing a printable character.\n * Windows uses ctrl+alt (a.k.a. alt-graph) keys for typing characters on\n * European keyboards. Since only Firefox provides a method that can identify\n * whether ctrl+alt keys are used for typing characters, we need to check\n * whether Windows sends a keypress event to prevent firing shortcut event if\n * this event is used for typing characters.\n * @param {!goog.ui.KeyboardEventData} data\n * @return {boolean} Whether this event is a possible printable-key event.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.isPossiblePrintableKey_ = function(\n    data) {\n  'use strict';\n  return goog.userAgent.WINDOWS && data.getCtrlKey() && data.getAltKey();\n};\n\n\n/**\n * Handler for when a keypress event is fired on Windows.\n * @param {!goog.events.BrowserEvent} e The key event.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleWindowsBrowserKeyPress_ =\n    function(e) {\n  'use strict';\n  this.handleWindowsKeyPress_(goog.ui.KeyboardEventData.fromBrowserEvent(e));\n};\n\n\n/**\n * Handler for when a synthetic keypress event is fired on Windows.\n * @param {!goog.ui.SyntheticKeyboardEvent} e\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleWindowsSyntheticKeyPress_ =\n    function(e) {\n  'use strict';\n  this.handleWindowsKeyPress_(e.getData());\n};\n\n\n/**\n * Handler for when a keypress event is fired on Windows.\n * @param {!goog.ui.KeyboardEventData} data\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleWindowsKeyPress_ = function(\n    data) {\n  'use strict';\n  // When this keypress event consists of a printable character, set the flag to\n  // prevent firing shortcut key events when we receive the succeeding keyup\n  // event. We accept all Unicode characters except control ones since this\n  // keyCode may be a non-ASCII character.\n  if (data.getKeyCode() > 0x20 && this.isPossiblePrintableKey_(data)) {\n    this.isPrintableKey_ = true;\n  }\n};\n\n\n/**\n * Handler for when a keyup event is fired on Windows.\n * @param {!goog.ui.KeyboardEventData} data\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleWindowsKeyUp_ = function(data) {\n  'use strict';\n  // For possible printable-key events, try firing a shortcut-key event only\n  // when this event is not used for typing a character.\n  if (!this.isPrintableKey_ && this.isPossiblePrintableKey_(data)) {\n    // handleKeyDown should handle possible printable keys since we initially\n    // don't handle them in key down for windows, and instead wait until\n    // key up.\n    this.handleKeyDown_(data, true /* opt_handlePossiblePrintableKeys */);\n  }\n};\n\n\n/**\n * Removes the listener that was added by link {@link #initializeKeyListener}.\n * @protected\n */\ngoog.ui.KeyboardShortcutHandler.prototype.clearKeyListener = function() {\n  'use strict';\n  goog.events.unlisten(\n      this.keyTarget_, goog.events.EventType.KEYDOWN,\n      this.handleBrowserKeyDown_, false, this);\n  goog.events.unlisten(\n      this.keyTarget_, goog.ui.SyntheticKeyboardEvent.Type.KEYDOWN,\n      this.handleSyntheticKeyDown_, false, this);\n  if (goog.userAgent.WINDOWS) {\n    goog.events.unlisten(\n        this.keyTarget_, goog.events.EventType.KEYPRESS,\n        this.handleWindowsBrowserKeyPress_, false, this);\n    goog.events.unlisten(\n        this.keyTarget_, goog.ui.SyntheticKeyboardEvent.Type.KEYPRESS,\n        this.handleWindowsSyntheticKeyPress_, false, this);\n  }\n  goog.events.unlisten(\n      this.keyTarget_, goog.events.EventType.KEYUP, this.handleBrowserKeyUp_,\n      false, this);\n  goog.events.unlisten(\n      this.keyTarget_, goog.ui.SyntheticKeyboardEvent.Type.KEYUP,\n      this.handleSyntheticKeyUp_, false, this);\n  this.keyTarget_ = null;\n};\n\n\n/**\n * Adds a shortcut stroke sequence to the given sequence tree. Recursive.\n * @param {!goog.ui.KeyboardShortcutHandler.SequenceTree_} tree The stroke\n *     sequence tree to add to.\n * @param {Array<Array<string>>} strokes Array of strokes for shortcut.\n * @param {string} identifier Identifier for the task performed by shortcut.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.setShortcut_ = function(\n    tree, strokes, identifier) {\n  'use strict';\n  var stroke = strokes.shift();\n  stroke.forEach(function(s) {\n    'use strict';\n    var node = tree[s];\n    if (node && (strokes.length == 0 || node.shortcut)) {\n      // This new shortcut would override an existing shortcut or shortcut\n      // prefix (since the new strokes end at an existing node), or an existing\n      // shortcut would be triggered by the prefix to this new shortcut (since\n      // there is already a terminal node on the path we are trying to create).\n      throw new Error(\n          'Keyboard shortcut conflicts with existing shortcut: ' +\n          node.shortcut);\n    }\n  });\n\n  if (strokes.length) {\n    stroke.forEach(function(s) {\n      'use strict';\n      var node = goog.object.setIfUndefined(\n          tree, s.toString(),\n          goog.ui.KeyboardShortcutHandler.createInternalNode_());\n      // setShortcut_ modifies strokes\n      var strokesCopy = strokes.slice(0);\n      goog.ui.KeyboardShortcutHandler.setShortcut_(\n          goog.asserts.assert(\n              node.next, 'An internal node must have a next map'),\n          strokesCopy, identifier);\n    });\n  } else {\n    stroke.forEach(function(s) {\n      'use strict';\n      // Add a terminal node.\n      tree[s] = goog.ui.KeyboardShortcutHandler.createTerminalNode_(identifier);\n    });\n  }\n};\n\n\n/**\n * Removes a shortcut stroke sequence from the given sequence tree, pruning any\n * dead branches of the tree. Recursive.\n * @param {!goog.ui.KeyboardShortcutHandler.SequenceTree_} tree The stroke\n *     sequence tree to remove from.\n * @param {Array<Array<string>>} strokes Array of strokes for shortcut to\n *     remove.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.unsetShortcut_ = function(tree, strokes) {\n  'use strict';\n  var stroke = strokes.shift();\n  stroke.forEach(function(s) {\n    'use strict';\n    var node = tree[s];\n    if (!node) {\n      // The given stroke sequence is not in the tree.\n      return;\n    }\n    if (strokes.length == 0) {\n      // Base case - the end of the stroke sequence.\n      if (!node.shortcut) {\n        // The given stroke sequence does not end at a terminal node.\n        return;\n      }\n      delete tree[s];\n    } else {\n      if (!node.next) {\n        // The given stroke sequence is not in the tree.\n        return;\n      }\n      // Recursively remove the rest of the shortcut sequence from the node.next\n      // subtree.\n      // unsetShortcut_ modifies strokes\n      var strokesCopy = strokes.slice(0);\n      goog.ui.KeyboardShortcutHandler.unsetShortcut_(node.next, strokesCopy);\n      if (goog.object.isEmpty(node.next)) {\n        // The node.next subtree is now empty (the last stroke in it was just\n        // removed), so prune this dead branch of the tree.\n        delete tree[s];\n      }\n    }\n  });\n};\n\n\n/**\n * Checks tree for a node matching one of stroke.\n * @param {!goog.ui.KeyboardShortcutHandler.SequenceTree_} tree The\n *     stroke sequence tree to find the node in.\n * @param {Array<string>} stroke Stroke to find.\n * @return {!goog.ui.KeyboardShortcutHandler.SequenceNode_|undefined} Node matching stroke.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.getNode_ = function(tree, stroke) {\n  'use strict';\n  for (var i = 0; i < stroke.length; i++) {\n    var node = tree[stroke[i]];\n    if (!node) {\n      continue;\n    }\n    return node;\n  }\n  return undefined;\n};\n\n/**\n * Checks if a particular keyboard shortcut is registered.\n * @param {goog.ui.KeyboardShortcutHandler.SequenceTree_|null} tree The\n *     stroke sequence tree to find the keyboard shortcut in.\n * @param {Array<Array<string>>} strokes Strokes array.\n * @return {boolean} True iff the keyboard shortcut is registred.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.checkShortcut_ = function(\n    tree, strokes) {\n  'use strict';\n  while (strokes.length > 0 && tree) {\n    var stroke = strokes.shift();\n    var node = this.getNode_(tree, stroke);\n    if (!node) {\n      continue;\n    }\n    if (strokes.length == 0 && node.shortcut) {\n      return true;\n    }\n    // checkShortcut_ modifies strokes\n    var strokesCopy = strokes.slice(0);\n    if (this.checkShortcut_(node.next, strokesCopy)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Constructs key identification string from key name, key code and modifiers.\n *\n * @param {string} keyName Key name.\n * @param {number} keyCode Numeric key code.\n * @param {number} modifiers Required modifiers.\n * @return {!Array<string>} An array of strings identifying the key/modifier\n *     combinations.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.makeStroke_ = function(\n    keyName, keyCode, modifiers) {\n  'use strict';\n  var mods = modifiers || 0;\n  // entries must be usable as key in a map\n  var strokes = ['c_' + keyCode + '_' + mods];\n\n  if (keyName != '') {\n    strokes.push('n_' + keyName + '_' + mods);\n  }\n\n  return strokes;\n};\n\n\n/**\n * Keydown handler for events initiated from the browser.\n * @param {!goog.events.BrowserEvent} event Keypress event.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleBrowserKeyDown_ = function(\n    event) {\n  'use strict';\n  this.handleKeyDown_(goog.ui.KeyboardEventData.fromBrowserEvent(event));\n};\n\n\n/**\n * Keydown handler for synthetic events.\n * @param {!goog.ui.SyntheticKeyboardEvent} event\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleSyntheticKeyDown_ = function(\n    event) {\n  'use strict';\n  this.handleKeyDown_(event.getData());\n};\n\n\n/**\n * Keydown handler.\n * @param {!goog.ui.KeyboardEventData} data\n * @param {boolean=} opt_handlePossiblePrintableKeys Whether possible printable\n *     keys should be handled. By default, they are ignored, but when the data\n *     comes from keyup they should be handled.\n * @private\n * @suppress {strictPrimitiveOperators} Part of the go/strict_warnings_migration\n */\ngoog.ui.KeyboardShortcutHandler.prototype.handleKeyDown_ = function(\n    data, opt_handlePossiblePrintableKeys) {\n  'use strict';\n  if (!this.isValidShortcut_(data)) {\n    return;\n  }\n  // For possible printable-key events, we cannot identify whether the events\n  // are used for typing characters until we receive respective keyup events.\n  // Therefore, we handle this event when we receive a succeeding keyup event\n  // to verify this event is not used for typing characters. preventDefault is\n  // not called on the event to avoid disrupting a character input.\n  if (!opt_handlePossiblePrintableKeys && this.isPossiblePrintableKey_(data)) {\n    this.isPrintableKey_ = false;\n    return;\n  }\n\n  var keyCode = goog.events.KeyCodes.normalizeKeyCode(data.getKeyCode());\n  var keyName = data.getKey();\n\n  var modifiers =\n      (data.getShiftKey() ? goog.ui.KeyboardShortcutHandler.Modifiers.SHIFT :\n                            0) |\n      (data.getCtrlKey() ? goog.ui.KeyboardShortcutHandler.Modifiers.CTRL : 0) |\n      (data.getAltKey() ? goog.ui.KeyboardShortcutHandler.Modifiers.ALT : 0) |\n      (data.getMetaKey() ? goog.ui.KeyboardShortcutHandler.Modifiers.META : 0);\n  var stroke =\n      goog.ui.KeyboardShortcutHandler.makeStroke_(keyName, keyCode, modifiers);\n  var node = this.getNode_(this.currentTree_, stroke);\n\n  if (!node || this.hasSequenceTimedOut_()) {\n    // Either this stroke does not continue any active sequence, or the\n    // currently active sequence has timed out. Reset shortcut tree progress.\n    this.setCurrentTree_(this.shortcuts_);\n  }\n\n  node = this.getNode_(this.currentTree_, stroke);\n\n  if (node && node.next) {\n    // This stroke does not trigger a shortcut, but entered stroke(s) are a part\n    // of a sequence. Progress in the sequence tree and record time to allow the\n    // following stroke(s) to trigger the shortcut.\n    this.setCurrentTree_(node.next);\n  }\n\n  if (!node) {\n    // This stroke does not correspond to a shortcut or continued sequence.\n    return;\n  } else if (node.next) {\n    // Prevent default action so that the rest of the stroke sequence can be\n    // completed.\n    data.getPreventDefaultFn()();\n    return;\n  }\n\n  // This stroke triggers a shortcut. Any active sequence has been completed, so\n  // reset the sequence tree.\n  this.setCurrentTree_(this.shortcuts_);\n\n  // Dispatch the triggered keyboard shortcut event. In addition to the generic\n  // keyboard shortcut event a more specific fine grained one, specific for the\n  // shortcut identifier, is fired.\n  if (this.alwaysPreventDefault_) {\n    data.getPreventDefaultFn()();\n  }\n\n  if (this.alwaysStopPropagation_) {\n    data.getStopPropagationFn()();\n  }\n\n  var shortcut = goog.asserts.assertString(\n      node.shortcut, 'A terminal node must have a string shortcut identifier.');\n  // Dispatch SHORTCUT_TRIGGERED event\n  var triggerEvent = new goog.ui.KeyboardShortcutEvent(\n      goog.ui.KeyboardShortcutHandler.EventType.SHORTCUT_TRIGGERED, shortcut,\n      data.getTarget());\n  var retVal = this.dispatchEvent(triggerEvent);\n\n  // Dispatch SHORTCUT_PREFIX_<identifier> event\n  var prefixEvent = new goog.ui.KeyboardShortcutEvent(\n      goog.ui.KeyboardShortcutHandler.EventType.SHORTCUT_PREFIX + shortcut,\n      shortcut, data.getTarget());\n  retVal &= this.dispatchEvent(prefixEvent);\n\n  // The default action is prevented if 'preventDefault' was\n  // called on either event, or if a listener returned false.\n  if (!retVal) {\n    data.getPreventDefaultFn()();\n  }\n\n  // For Firefox, track which shortcut key was pushed.\n  if (goog.userAgent.GECKO) {\n    this.activeShortcutKeyForGecko_ = keyCode;\n  }\n};\n\n\n/**\n * Checks if a given keypress event may be treated as a shortcut.\n * @param {!goog.ui.KeyboardEventData} data\n * @return {boolean} Whether to attempt to process the event as a shortcut.\n * @private\n * @suppress {strictMissingProperties} Part of the go/strict_warnings_migration\n */\ngoog.ui.KeyboardShortcutHandler.prototype.isValidShortcut_ = function(data) {\n  'use strict';\n  // Ignore Ctrl, Shift and ALT\n  var keyCode = data.getKeyCode();\n  if (data.getKey() != '') {\n    var keyName = data.getKey();\n    if (keyName == goog.events.Keys.CTRL || keyName == goog.events.Keys.SHIFT ||\n        keyName == goog.events.Keys.ALT ||\n        keyName == goog.events.Keys.ALTGRAPH) {\n      return false;\n    }\n  } else {\n    if (keyCode == goog.events.KeyCodes.SHIFT ||\n        keyCode == goog.events.KeyCodes.CTRL ||\n        keyCode == goog.events.KeyCodes.ALT) {\n      return false;\n    }\n  }\n\n  // RootTarget is used specifically to handle the case of shadow dom.\n  // Note, the type of shadow dom root is limited, and could never be\n  // INPUT, TEXTAREA, BUTTON, SELECT, etc.\n  var el = /** @type {!Element} */ (data.getRootTarget());\n  var isFormElement = el.tagName == goog.dom.TagName.TEXTAREA ||\n      el.tagName == goog.dom.TagName.INPUT ||\n      el.tagName == goog.dom.TagName.BUTTON ||\n      el.tagName == goog.dom.TagName.SELECT;\n\n  var isContentEditable = !isFormElement &&\n      (el.isContentEditable ||\n       (el.ownerDocument && el.ownerDocument.designMode == 'on'));\n\n  if (!isFormElement && !isContentEditable) {\n    return true;\n  }\n  // Always allow keys registered as global to be used (typically Esc, the\n  // F-keys and other keys that are not typically used to manipulate text).\n  if (this.globalKeys_[keyCode] || this.allShortcutsAreGlobal_) {\n    return true;\n  }\n  if (isContentEditable) {\n    // For events originating from an element in editing mode we only let\n    // global key codes through.\n    return false;\n  }\n  // Event target is one of (TEXTAREA, INPUT, BUTTON, SELECT).\n  // Allow modifier shortcuts, unless we shouldn't.\n  if (this.modifierShortcutsAreGlobal_ &&\n      (data.getAltKey() || data.getCtrlKey() || data.getMetaKey())) {\n    return true;\n  }\n  // Allow ENTER to be used as shortcut for text inputs.\n  if (el.tagName == goog.dom.TagName.INPUT && this.textInputs_[el.type]) {\n    return keyCode == goog.events.KeyCodes.ENTER;\n  }\n  // Checkboxes, radiobuttons and buttons. Allow all but SPACE as shortcut.\n  if (el.tagName == goog.dom.TagName.INPUT ||\n      el.tagName == goog.dom.TagName.BUTTON) {\n    // TODO(gboyer): If more flexibility is needed, create protected helper\n    // methods for each case (e.g. button, input, etc).\n    if (this.allowSpaceKeyOnButtons_) {\n      return true;\n    } else {\n      return keyCode != goog.events.KeyCodes.SPACE;\n    }\n  }\n  // Don't allow any additional shortcut keys for textareas or selects.\n  return false;\n};\n\n\n/**\n * @return {boolean} True iff the current stroke sequence has timed out.\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.hasSequenceTimedOut_ = function() {\n  'use strict';\n  return Date.now() - this.lastStrokeTime_ >=\n      goog.ui.KeyboardShortcutHandler.MAX_KEY_SEQUENCE_DELAY;\n};\n\n\n/**\n * Sets the current keyboard shortcut sequence tree and updates the last stroke\n * time.\n * @param {!goog.ui.KeyboardShortcutHandler.SequenceTree_} tree\n * @private\n */\ngoog.ui.KeyboardShortcutHandler.prototype.setCurrentTree_ = function(tree) {\n  'use strict';\n  this.currentTree_ = tree;\n  this.lastStrokeTime_ = Date.now();\n};\n"],
"names":["goog","provide","require","requireType","ui","KeyboardShortcutHandler","goog.ui.KeyboardShortcutHandler","keyTarget","events","EventTarget","call","shortcuts_","currentTree_","lastStrokeTime_","globalKeys_","object","createSet","DEFAULT_GLOBAL_KEYS_","textInputs_","DEFAULT_TEXT_INPUTS_","alwaysPreventDefault_","alwaysStopPropagation_","allShortcutsAreGlobal_","modifierShortcutsAreGlobal_","allowSpaceKeyOnButtons_","activeShortcutKeyForGecko_","initializeKeyListener","inherits","SequenceNode_","goog.ui.KeyboardShortcutHandler.SequenceNode_","opt_shortcut","shortcut","next","createTerminalNode_","goog.ui.KeyboardShortcutHandler.createTerminalNode_","createInternalNode_","goog.ui.KeyboardShortcutHandler.createInternalNode_","SequenceTree_","MAX_KEY_SEQUENCE_DELAY","Modifiers","NONE","SHIFT","CTRL","ALT","META","KeyCodes","ESC","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","PAUSE","EventType","SHORTCUT_TRIGGERED","SHORTCUT_PREFIX","nameToKeyCodeCache_","prototype","keyTarget_","isPrintableKey_","getKeyCode","goog.ui.KeyboardShortcutHandler.getKeyCode","name","map","key","KeyNames","normalizeKeyCode","parseInt","setAlwaysPreventDefault","goog.ui.KeyboardShortcutHandler.prototype.setAlwaysPreventDefault","alwaysPreventDefault","getAlwaysPreventDefault","goog.ui.KeyboardShortcutHandler.prototype.getAlwaysPreventDefault","setAlwaysStopPropagation","goog.ui.KeyboardShortcutHandler.prototype.setAlwaysStopPropagation","alwaysStopPropagation","getAlwaysStopPropagation","goog.ui.KeyboardShortcutHandler.prototype.getAlwaysStopPropagation","setAllShortcutsAreGlobal","goog.ui.KeyboardShortcutHandler.prototype.setAllShortcutsAreGlobal","allShortcutsGlobal","getAllShortcutsAreGlobal","goog.ui.KeyboardShortcutHandler.prototype.getAllShortcutsAreGlobal","setModifierShortcutsAreGlobal","goog.ui.KeyboardShortcutHandler.prototype.setModifierShortcutsAreGlobal","modifierShortcutsGlobal","getModifierShortcutsAreGlobal","goog.ui.KeyboardShortcutHandler.prototype.getModifierShortcutsAreGlobal","setAllowSpaceKeyOnButtons","goog.ui.KeyboardShortcutHandler.prototype.setAllowSpaceKeyOnButtons","allowSpaceKeyOnButtons","registerShortcut","goog.ui.KeyboardShortcutHandler.prototype.registerShortcut","identifier","var_args","setShortcut_","interpretStrokes_","arguments","unregisterShortcut","goog.ui.KeyboardShortcutHandler.prototype.unregisterShortcut","unsetShortcut_","isShortcutRegistered","goog.ui.KeyboardShortcutHandler.prototype.isShortcutRegistered","checkShortcut_","goog.ui.KeyboardShortcutHandler.prototype.interpretStrokes_","initialIndex","args","strokes","parseStringShortcut","stroke","asserts","assertNumber","keyCode","makeStroke_","modifiers","strokesArgs","i","Array","isArray","length","push","unregisterAll","goog.ui.KeyboardShortcutHandler.prototype.unregisterAll","setGlobalKeys","goog.ui.KeyboardShortcutHandler.prototype.setGlobalKeys","keys","getGlobalKeys","goog.ui.KeyboardShortcutHandler.prototype.getGlobalKeys","getKeys","disposeInternal","goog.ui.KeyboardShortcutHandler.prototype.disposeInternal","superClass_","clearKeyListener","getEventType","goog.ui.KeyboardShortcutHandler.prototype.getEventType","goog.ui.KeyboardShortcutHandler.parseStringShortcut","s","replace","toLowerCase","groups","split","group","keyName","j","fail","goog.ui.KeyboardShortcutHandler.prototype.initializeKeyListener","listen","KEYDOWN","handleBrowserKeyDown_","undefined","SyntheticKeyboardEvent","Type","handleSyntheticKeyDown_","userAgent","WINDOWS","KEYPRESS","handleWindowsBrowserKeyPress_","handleWindowsSyntheticKeyPress_","KEYUP","handleBrowserKeyUp_","handleSyntheticKeyUp_","goog.ui.KeyboardShortcutHandler.prototype.handleBrowserKeyUp_","e","handleKeyUp_","KeyboardEventData","fromBrowserEvent","goog.ui.KeyboardShortcutHandler.prototype.handleSyntheticKeyUp_","getData","goog.ui.KeyboardShortcutHandler.prototype.handleKeyUp_","data","GECKO","handleGeckoKeyUp_","handleWindowsKeyUp_","goog.ui.KeyboardShortcutHandler.prototype.handleGeckoKeyUp_","SPACE","getPreventDefaultFn","isPossiblePrintableKey_","goog.ui.KeyboardShortcutHandler.prototype.isPossiblePrintableKey_","getCtrlKey","getAltKey","goog.ui.KeyboardShortcutHandler.prototype.handleWindowsBrowserKeyPress_","handleWindowsKeyPress_","goog.ui.KeyboardShortcutHandler.prototype.handleWindowsSyntheticKeyPress_","goog.ui.KeyboardShortcutHandler.prototype.handleWindowsKeyPress_","goog.ui.KeyboardShortcutHandler.prototype.handleWindowsKeyUp_","handleKeyDown_","goog.ui.KeyboardShortcutHandler.prototype.clearKeyListener","unlisten","goog.ui.KeyboardShortcutHandler.setShortcut_","tree","shift","forEach","node","Error","setIfUndefined","toString","strokesCopy","slice","assert","goog.ui.KeyboardShortcutHandler.unsetShortcut_","isEmpty","getNode_","goog.ui.KeyboardShortcutHandler.prototype.getNode_","goog.ui.KeyboardShortcutHandler.prototype.checkShortcut_","goog.ui.KeyboardShortcutHandler.makeStroke_","mods","goog.ui.KeyboardShortcutHandler.prototype.handleBrowserKeyDown_","event","goog.ui.KeyboardShortcutHandler.prototype.handleSyntheticKeyDown_","goog.ui.KeyboardShortcutHandler.prototype.handleKeyDown_","opt_handlePossiblePrintableKeys","isValidShortcut_","getKey","getShiftKey","getMetaKey","hasSequenceTimedOut_","setCurrentTree_","getStopPropagationFn","assertString","triggerEvent","KeyboardShortcutEvent","getTarget","retVal","dispatchEvent","prefixEvent","goog.ui.KeyboardShortcutHandler.prototype.isValidShortcut_","Keys","ALTGRAPH","el","getRootTarget","isFormElement","tagName","dom","TagName","TEXTAREA","INPUT","BUTTON","SELECT","isContentEditable","ownerDocument","designMode","type","ENTER","goog.ui.KeyboardShortcutHandler.prototype.hasSequenceTimedOut_","Date","now","goog.ui.KeyboardShortcutHandler.prototype.setCurrentTree_"]
}
