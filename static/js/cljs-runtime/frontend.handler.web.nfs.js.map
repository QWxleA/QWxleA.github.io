{"version":3,"sources":["frontend/handler/web/nfs.cljs"],"mappings":"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","names":["frontend.handler.web.nfs/remove-ignore-files","files","cljs.core.remove","f","path","or__4253__auto__","clojure.string/starts-with?","clojure.string/includes?","and__4251__auto__","frontend.util.fs/ignored-path?","cljs.core.not_EQ_","temp__5718__auto__","ignore-file","p1__62904#","cljs.core/some","cljs.core._EQ_","file","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","content","paths","cljs.core/set","frontend.handler.common/ignore-files","cljs.core.map","cljs.core/seq","cljs.core.filter","cljs.core/contains?","promesa.core/resolved","frontend.handler.web.nfs/->db-files","mobile-native?","electron?","dir-name","result","p__62914","map__62915","cljs.core/--destructure-map","cljs.core.get","uri","size","mtime","logseq.graph-parser.util/path-normalize","p__62916","map__62917","stat","map__62918","cljs.core/flatten","cljs-bean.core/->clj","p1__62912#","handle","frontend.handler.web.nfs.goog$module$goog$object.get","get-attr","clojure.string/replace-first","cljs.core.sort_by","frontend.handler.web.nfs/filter-markup-and-built-in-files","clojure.set.union","frontend.config/markup-formats","cljs.core.keyword","frontend.util/get-file-ext","frontend.handler.web.nfs/set-batch!","handles","p__62919","vec__62920","cljs.core.nth","frontend.idb/set-batch!","frontend.handler.web.nfs/set-files-aux!","vec__62924","h","t","cljs.core/split-at","_","promesa.core.promise","js/setTimeout","frontend.handler.web.nfs/set-files!","p__62928","vec__62929","handle-path","frontend.config/local-handle-prefix","seq__62932","chunk__62933","count__62934","i__62935","vec__62942","temp__5720__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__62946","cljs.core/first","cljs.core/next","frontend.fs.nfs/add-nfs-file-handle!","frontend.handler.web.nfs/ls-dir-files-with-handler!","ok-handler","path-handles","cljs.core.atom","frontend.util/electron?","frontend.mobile.util/is-native-platform?","nfs?","cljs.core/not","*repo","frontend.fs/open-dir","cljs.core.swap_BANG_","cljs.core/assoc","root-handle","repo","frontend.config/local-db-prefix","frontend.state/set-loading-files!","frontend.state/home?","frontend.state/setups-picker?","frontend.handler.route.redirect_to_home_BANG_","cljs.core/reset!","clojure.string/blank?","root-handle-path","frontend.idb/set-item!","file-paths","p__62957","vec__62958","_handle","last-part","cljs.core/last","clojure.string.split","frontend.config/app-name","logseq.graph-parser.config/default-draw-directory","frontend.config/get-journals-directory","frontend.config/get-pages-directory","cljs.core.into","cljs.core/deref","markup-files","promesa.core/all","frontend.encrypt.decrypt","cljs.core.assoc","promesa.core.then","p1__62950#","cljs.core.dissoc","frontend.handler.repo/start-repo-db-if-not-exists!","c__41861__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41862__auto__","switch__41838__auto__","state_62984","state_val_62985","inst_62962","inst_62963","inst_62964","inst_62965","inst_62966","cljs.core/PersistentHashMap","inst_62967","cljs.core.async.impl.ioc-helpers/take!","inst_62969","inst_62970","inst_62972","inst_62973","inst_62974","inst_62975","statearr-62988","statearr-62989","statearr-62990","inst_62977","statearr-63006","statearr-63021","inst_62980","inst_62981","inst_62982","statearr-63022","cljs.core.async.impl.ioc-helpers/return-chan","statearr-63025","state-machine__41839__auto__","ret-value__41840__auto__","result__41841__auto__","cljs.core/keyword-identical?","ex__41842__auto__","e63026","statearr-63028","statearr-63030","state__41863__auto__","statearr-63032","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","frontend.handler.repo/load-repo-to-db!","frontend.state/add-repo!","frontend.fs/watch-dir!","frontend.db/persist-if-idle!","promesa.core.catch$","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.web.nfs/compute-diffs","old-files","new-files","ks","->set","p1__63040#","cljs.core/select-keys","file-path-set-f","col","get-file-f","p1__63041#","old-file-paths","new-file-paths","added","clojure.set.difference","deleted","modified","clojure.set.intersection","frontend.handler.web.nfs/handle-diffs!","re-index?","map__63059","get-last-modified-at","p1__63051#","rename-f","typ","cljs.core.mapv","cljs.core.doall","cljs.core.distinct","frontend.idb/remove-item!","frontend.fs.nfs/remove-nfs-file-handle!","added-or-modified","cljs.core.concat","vec__63077","p1__63052#","modified-files","diffs","frontend.db/transact!","var_args","G__63096","frontend.handler.web.nfs/reload-dir!","js/Error","frontend.handler.web.nfs.reload_dir_BANG_","frontend.config/local-db?","frontend.db/get-files-full","frontend.config/get-local-dir","frontend.state/set-graph-syncing?","frontend.idb/get-item","frontend.fs.nfs/verify-permission","files-result","frontend.fs/get-files","p__63108","vec__63109","promesa.core.finally$","frontend.handler.web.nfs/rebuild-index!","frontend.state/set-nfs-refreshing!","frontend.search/reset-indice!","frontend.db/remove-conn!","frontend.db/clear-query-state!","frontend.db.start_db_conn_BANG_","frontend.state/get-me","frontend.handler.web.nfs/refresh!","frontend.handler.web.nfs/supported?","js/module$frontend$utils.nfsSupported"],"sourcesContent":["(ns frontend.handler.web.nfs\n  \"The File System Access API, https://web.dev/file-system-access/.\"\n  (:require [\"/frontend/utils\" :as utils]\n            [cljs-bean.core :as bean]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.fs.nfs :as nfs]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.handler.route :as route-handler]\n            [frontend.idb :as idb]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.fs :as util-fs]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.mobile.util :as mobile-util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [clojure.core.async :as async]\n            [frontend.encrypt :as encrypt]))\n\n(defn remove-ignore-files\n  [files]\n  (let [files (remove (fn [f]\n                        (let [path (:file/path f)]\n                          (or (string/starts-with? path \".git/\")\n                              (string/includes? path \".git/\")\n                              (and (util-fs/ignored-path? \"\" path)\n                                   (not= (:file/name f) \".gitignore\")))))\n                      files)]\n    (if-let [ignore-file (some #(when (= (:file/name %) \".gitignore\")\n                                  %) files)]\n      (if-let [file (:file/file ignore-file)]\n        (p/let [content (.text file)]\n          (when content\n            (let [paths (set (common-handler/ignore-files content (map :file/path files)))]\n              (when (seq paths)\n                (filter (fn [f] (contains? paths (:file/path f))) files)))))\n        (p/resolved files))\n      (p/resolved files))))\n\n(defn- ->db-files\n  [mobile-native? electron? dir-name result]\n  (->>\n   (cond\n     mobile-native?\n     (map (fn [{:keys [uri content size mtime]}]\n            {:file/path             (gp-util/path-normalize uri)\n             :file/last-modified-at mtime\n             :file/size             size\n             :file/content content})\n       result)\n\n     electron?\n     (map (fn [{:keys [path stat content]}]\n            (let [{:keys [mtime size]} stat]\n              {:file/path             (gp-util/path-normalize path)\n               :file/last-modified-at mtime\n               :file/size             size\n               :file/content content}))\n       result)\n\n     :else\n     (let [result (flatten (bean/->clj result))]\n       (map (fn [file]\n              (let [handle (gobj/get file \"handle\")\n                    get-attr #(gobj/get file %)\n                    path (-> (get-attr \"webkitRelativePath\")\n                             (string/replace-first (str dir-name \"/\") \"\"))]\n                {:file/name             (get-attr \"name\")\n                 :file/path             (gp-util/path-normalize path)\n                 :file/last-modified-at (get-attr \"lastModified\")\n                 :file/size             (get-attr \"size\")\n                 :file/type             (get-attr \"type\")\n                 :file/file             file\n                 :file/handle           handle})) result)))\n   (sort-by :file/path)))\n\n(defn- filter-markup-and-built-in-files\n  [files]\n  (filter (fn [file]\n            (contains? (set/union config/markup-formats #{:css :edn})\n                       (keyword (util/get-file-ext (:file/path file)))))\n          files))\n\n(defn- set-batch!\n  [handles]\n  (let [handles (map (fn [[path handle]]\n                       {:key   path\n                        :value handle}) handles)]\n    (idb/set-batch! handles)))\n\n(defn- set-files-aux!\n  [handles]\n  (when (seq handles)\n    (let [[h t] (split-at 50 handles)]\n      (p/let [_ (p/promise (fn [_]\n                             (js/setTimeout (fn []\n                                              (p/resolved nil)) 10)))\n              _ (set-batch! h)]\n        (when (seq t)\n          (set-files-aux! t))))))\n\n(defn- set-files!\n  [handles]\n  (let [handles (map (fn [[path handle]]\n                       (let [handle-path (str config/local-handle-prefix path)]\n                         [handle-path handle]))\n                     handles)]\n    (doseq [[path handle] handles]\n      (nfs/add-nfs-file-handle! path handle))\n    (set-files-aux! handles)))\n\n;; TODO: extract code for `ls-dir-files` and `reload-dir!`\n(defn ls-dir-files-with-handler!\n  [ok-handler]\n  (let [path-handles (atom {})\n        electron? (util/electron?)\n        mobile-native? (mobile-util/is-native-platform?)\n        nfs? (and (not electron?)\n                  (not mobile-native?))\n        *repo (atom nil)]\n    ;; TODO: add ext filter to avoid loading .git or other ignored file handlers\n    (->\n     (p/let [result (fs/open-dir (fn [path handle]\n                                   (when nfs?\n                                     (swap! path-handles assoc path handle))))\n             root-handle (first result)\n             dir-name (if nfs?\n                        (gobj/get root-handle \"name\")\n                        root-handle)\n             repo (str config/local-db-prefix dir-name)\n             _ (state/set-loading-files! repo true)\n             _ (when-not (or (state/home?) (state/setups-picker?))\n                 (route-handler/redirect-to-home! false))]\n       (reset! *repo repo)\n       (when-not (string/blank? dir-name)\n         (p/let [root-handle-path (str config/local-handle-prefix dir-name)\n                 _ (when nfs?\n                     (idb/set-item! root-handle-path root-handle)\n                     (nfs/add-nfs-file-handle! root-handle-path root-handle))\n                 result (nth result 1)\n                 files (-> (->db-files mobile-native? electron? dir-name result)\n                           remove-ignore-files)\n                 _ (when nfs?\n                     (let [file-paths (set (map :file/path files))]\n                       (swap! path-handles (fn [handles]\n                                             (->> handles\n                                                  (filter (fn [[path _handle]]\n                                                            (or\n                                                             (contains? file-paths\n                                                                        (string/replace-first path (str dir-name \"/\") \"\"))\n                                                             (let [last-part (last (string/split path \"/\"))]\n                                                               (contains? #{config/app-name\n                                                                            gp-config/default-draw-directory\n                                                                            (config/get-journals-directory)\n                                                                            (config/get-pages-directory)}\n                                                                          last-part)))))\n                                                  (into {})))))\n\n                     (set-files! @path-handles))\n                 markup-files (filter-markup-and-built-in-files files)]\n           (-> (p/all (map (fn [file]\n                             (p/let [content (if nfs?\n                                               (.text (:file/file file))\n                                               (:file/content file))\n                                     content (encrypt/decrypt content)]\n                               (assoc file :file/content content))) markup-files))\n               (p/then (fn [result]\n                         (let [files (map #(dissoc % :file/file) result)]\n                           (repo-handler/start-repo-db-if-not-exists! repo {:db-type :local-native-fs})\n                           (async/go\n                             (let [_finished? (async/<! (repo-handler/load-repo-to-db! repo\n                                                                                       {:new-graph?   true\n                                                                                        :empty-graph? (nil? (seq markup-files))\n                                                                                        :nfs-files    files}))]\n                               (state/add-repo! {:url repo :nfs? true})\n                               (state/set-loading-files! repo false)\n                               (when ok-handler (ok-handler))\n                               (fs/watch-dir! dir-name)\n                               (db/persist-if-idle! repo))))))\n               (p/catch (fn [error]\n                          (log/error :nfs/load-files-error repo)\n                          (log/error :exception error)))))))\n     (p/catch (fn [error]\n                (log/error :exception error)\n                (when (contains? #{\"AbortError\" \"Error\"} (gobj/get error \"name\"))\n                  (when @*repo (state/set-loading-files! @*repo false))\n                  ;; (log/error :nfs/open-dir-error error)\n                  ))))))\n\n(defn- compute-diffs\n  [old-files new-files]\n  (let [ks [:file/path :file/last-modified-at :file/content]\n        ->set (fn [files ks]\n                (when (seq files)\n                  (->> files\n                       (map #(select-keys % ks))\n                       set)))\n        old-files (->set old-files ks)\n        new-files (->set new-files ks)\n        file-path-set-f (fn [col] (set (map :file/path col)))\n        get-file-f (fn [files path] (some #(when (= (:file/path %) path) %) files))\n        old-file-paths (file-path-set-f old-files)\n        new-file-paths (file-path-set-f new-files)\n        added (set/difference new-file-paths old-file-paths)\n        deleted (set/difference old-file-paths new-file-paths)\n        modified (->> (set/intersection new-file-paths old-file-paths)\n                      (filter (fn [path]\n                                (not= (:file/content (get-file-f old-files path))\n                                      (:file/content (get-file-f new-files path)))))\n                      (set))]\n    {:added    added\n     :modified modified\n     :deleted  deleted}))\n\n(defn- handle-diffs!\n  [repo nfs? old-files new-files handle-path path-handles re-index?]\n  (let [get-last-modified-at (fn [path] (some (fn [file]\n                                                (when (= path (:file/path file))\n                                                  (:file/last-modified-at file)))\n                                              new-files))\n        get-file-f (fn [path files] (some #(when (= (:file/path %) path) %) files))\n        {:keys [added modified deleted]} (compute-diffs old-files new-files)\n        ;; Use the same labels as isomorphic-git\n        rename-f (fn [typ col] (mapv (fn [file] {:type typ :path file :last-modified-at (get-last-modified-at file)}) col))\n        _ (when (and nfs? (seq deleted))\n            (let [deleted (doall\n                           (-> (map (fn [path] (if (= \"/\" (first path))\n                                                 path\n                                                 (str \"/\" path))) deleted)\n                               (distinct)))]\n              (p/all (map (fn [path]\n                            (let [handle-path (str handle-path path)]\n                              (idb/remove-item! handle-path)\n                              (nfs/remove-nfs-file-handle! handle-path))) deleted))))\n        added-or-modified (set (concat added modified))\n        _ (when (and nfs? (seq added-or-modified))\n            (p/all (map (fn [path]\n                          (when-let [handle (get @path-handles path)]\n                            (idb/set-item! (str handle-path path) handle))) added-or-modified)))]\n    (-> (p/all (map (fn [path]\n                      (when-let [file (get-file-f path new-files)]\n                        (p/let [content (if nfs?\n                                          (.text (:file/file file))\n                                          (:file/content file))\n                                content (encrypt/decrypt content)]\n                          (assoc file :file/content content)))) added-or-modified))\n        (p/then (fn [result]\n                  (let [files (map #(dissoc % :file/file :file/handle) result)\n                        [modified-files modified] (if re-index?\n                                                    [files (set modified)]\n                                                    (let [modified-files (filter (fn [file] (contains? added-or-modified (:file/path file))) files)]\n                                                      [modified-files (set modified)]))\n                        diffs (concat\n                               (rename-f \"remove\" deleted)\n                               (rename-f \"add\" added)\n                               (rename-f \"modify\" modified))]\n                    (when (or (and (seq diffs) (seq modified-files))\n                              (seq diffs))\n                      (comment \"re-index a local graph is handled here\")\n                      (repo-handler/load-repo-to-db! repo\n                                                     {:diffs     diffs\n                                                      :nfs-files modified-files\n                                                      :refresh? (not re-index?)}))\n                    (when (and (util/electron?) (not re-index?))\n                      (db/transact! repo new-files))))))))\n\n(defn- reload-dir!\n  ([repo]\n   (reload-dir! repo false))\n  ([repo re-index?]\n   (when (and repo (config/local-db? repo))\n     (let [old-files (db/get-files-full repo)\n           dir-name (config/get-local-dir repo)\n           handle-path (str config/local-handle-prefix dir-name)\n           path-handles (atom {})\n           electron? (util/electron?)\n           mobile-native? (mobile-util/is-native-platform?)\n           nfs? (and (not electron?)\n                     (not mobile-native?))]\n       (when re-index?\n         (state/set-graph-syncing? true))\n       (->\n        (p/let [handle (when-not electron? (idb/get-item handle-path))]\n          (when (or handle electron? mobile-native?)   ; electron doesn't store the file handle\n            (p/let [_ (when handle (nfs/verify-permission repo handle true))\n                    files-result (fs/get-files (if nfs? handle\n                                                   (config/get-local-dir repo))\n                                               (fn [path handle]\n                                                 (when nfs?\n                                                   (swap! path-handles assoc path handle))))\n                    new-files (-> (->db-files mobile-native? electron? dir-name files-result)\n                                  remove-ignore-files)\n                    _ (when nfs?\n                        (let [file-paths (set (map :file/path new-files))]\n                          (swap! path-handles (fn [handles]\n                                                (->> handles\n                                                     (filter (fn [[path _handle]]\n                                                               (contains? file-paths\n                                                                          (string/replace-first path (str dir-name \"/\") \"\"))))\n                                                     (into {})))))\n                        (set-files! @path-handles))]\n              (handle-diffs! repo nfs? old-files new-files handle-path path-handles re-index?))))\n        (p/catch (fn [error]\n                   (log/error :nfs/load-files-error repo)\n                   (log/error :exception error)))\n        (p/finally (fn [_]\n                     (state/set-graph-syncing? false))))))))\n\n(defn rebuild-index!\n  [repo ok-handler]\n  (when repo\n    (state/set-nfs-refreshing! true)\n    (search/reset-indice! repo)\n    (db/remove-conn! repo)\n    (db/clear-query-state!)\n    (db/start-db-conn! (state/get-me) repo)\n    (p/let [_ (reload-dir! repo true)\n            _ (ok-handler)]\n      (state/set-nfs-refreshing! false))))\n\n(defn refresh!\n  [repo ok-handler]\n  (when repo\n    (state/set-nfs-refreshing! true)\n    (p/let [_ (reload-dir! repo)\n            _ (ok-handler)]\n      (state/set-nfs-refreshing! false))))\n\n(defn supported?\n  []\n  (or (utils/nfsSupported) (util/electron?)))\n"]}