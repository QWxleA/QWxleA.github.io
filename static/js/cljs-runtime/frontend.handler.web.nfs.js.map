{"version":3,"sources":["frontend/handler/web/nfs.cljs"],"mappings":"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","names":["frontend.handler.web.nfs/remove-ignore-files","files","dir-name","nfs?","cljs.core.remove","f","path","or__5043__auto__","clojure.string/starts-with?","clojure.string/includes?","and__5041__auto__","frontend.util.fs/ignored-path?","cljs.core.not_EQ_","temp__5718__auto__","ignore-file","p1__51342#","cljs.core/some","cljs.core._EQ_","file","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","content","paths","cljs.core/set","frontend.handler.common/ignore-files","cljs.core.map","cljs.core/seq","cljs.core.filter","cljs.core/contains?","promesa.core/resolved","frontend.handler.web.nfs/->db-files","mobile-native?","electron?","result","p__51351","map__51352","cljs.core/--destructure-map","cljs.core.get","uri","size","mtime","logseq.graph-parser.util/path-normalize","p__51353","map__51354","stat","map__51355","cljs.core/flatten","cljs-bean.core/->clj","p1__51349#","handle","frontend.handler.web.nfs.goog$module$goog$object.get","get-attr","clojure.string/replace-first","cljs.core.sort_by","frontend.handler.web.nfs/filter-markup-and-built-in-files","clojure.set.union","frontend.config/markup-formats","cljs.core.keyword","frontend.util/get-file-ext","frontend.handler.web.nfs/set-batch!","handles","p__51366","vec__51367","cljs.core.nth","frontend.idb/set-batch!","frontend.handler.web.nfs/set-files-aux!","vec__51370","h","t","cljs.core/split-at","_","promesa.core.promise","js/setTimeout","frontend.handler.web.nfs/set-files!","p__51382","vec__51383","handle-path","frontend.config/local-handle-prefix","seq__51386","chunk__51387","count__51388","i__51389","vec__51401","temp__5720__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__51404","cljs.core/first","cljs.core/next","frontend.fs.nfs/add-nfs-file-handle!","frontend.handler.web.nfs/ls-dir-files-with-handler!","ok-handler","path-handles","cljs.core.atom","frontend.util/electron?","frontend.mobile.util/native-platform?","cljs.core/not","*repo","frontend.fs/open-dir","cljs.core.swap_BANG_","cljs.core/assoc","root-handle","repo","frontend.config/local-db-prefix","frontend.state/set-loading-files!","frontend.state/home?","frontend.state/setups-picker?","frontend.handler.route.redirect_to_home_BANG_","cljs.core/reset!","clojure.string/blank?","root-handle-path","frontend.idb/set-item!","file-paths","p__51411","vec__51412","_handle","last-part","cljs.core/last","clojure.string.split","frontend.config/app-name","logseq.graph-parser.config/default-draw-directory","frontend.config/get-journals-directory","frontend.config/get-pages-directory","cljs.core.into","cljs.core/deref","markup-files","promesa.core/all","frontend.encrypt.decrypt","cljs.core.assoc","promesa.core.then","p1__51407#","cljs.core.dissoc","frontend.handler.repo/start-repo-db-if-not-exists!","c__27595__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27596__auto__","switch__27572__auto__","state_51441","state_val_51442","inst_51419","inst_51420","inst_51421","inst_51422","inst_51423","cljs.core/PersistentHashMap","inst_51424","cljs.core.async.impl.ioc-helpers/take!","inst_51426","inst_51427","inst_51428","inst_51429","inst_51430","inst_51431","statearr-51444","statearr-51445","statearr-51447","inst_51434","statearr-51448","statearr-51449","inst_51437","inst_51438","inst_51439","statearr-51450","cljs.core.async.impl.ioc-helpers/return-chan","statearr-51451","state-machine__27573__auto__","ret-value__27574__auto__","result__27575__auto__","cljs.core/keyword-identical?","ex__27576__auto__","e51452","statearr-51453","statearr-51455","state__27597__auto__","statearr-51459","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","frontend.handler.repo/load-repo-to-db!","frontend.state/add-repo!","frontend.fs/watch-dir!","frontend.db/persist-if-idle!","promesa.core.catch$","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.web.nfs/compute-diffs","old-files","new-files","ks","->set","p1__51465#","cljs.core/select-keys","file-path-set-f","col","get-file-f","p1__51467#","old-file-paths","new-file-paths","added","clojure.set.difference","deleted","modified","clojure.set.intersection","frontend.handler.web.nfs/handle-diffs!","re-index?","map__51476","get-last-modified-at","p1__51472#","rename-f","typ","cljs.core.mapv","cljs.core.doall","cljs.core.distinct","frontend.idb/remove-item!","frontend.fs.nfs/remove-nfs-file-handle!","added-or-modified","cljs.core.concat","vec__51483","p1__51474#","modified-files","diffs","frontend.db/transact!","var_args","G__51498","frontend.handler.web.nfs/reload-dir!","js/Error","frontend.handler.web.nfs.reload_dir_BANG_","frontend.config/local-db?","frontend.db/get-files-full","frontend.config/get-local-dir","frontend.state/set-graph-syncing?","frontend.idb/get-item","frontend.fs.nfs/verify-permission","files-result","frontend.fs/get-files","p__51500","vec__51501","promesa.core.finally$","frontend.handler.web.nfs/rebuild-index!","frontend.state/set-nfs-refreshing!","frontend.search/reset-indice!","frontend.db/remove-conn!","frontend.db/clear-query-state!","frontend.db.start_db_conn_BANG_","frontend.state/get-me","frontend.handler.web.nfs/refresh!","frontend.handler.web.nfs/supported?","js/module$frontend$utils.nfsSupported"],"sourcesContent":["(ns frontend.handler.web.nfs\n  \"The File System Access API, https://web.dev/file-system-access/.\"\n  (:require [\"/frontend/utils\" :as utils]\n            [cljs-bean.core :as bean]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.fs.nfs :as nfs]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.handler.route :as route-handler]\n            [frontend.idb :as idb]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.fs :as util-fs]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.mobile.util :as mobile-util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [clojure.core.async :as async]\n            [frontend.encrypt :as encrypt]))\n\n(defn remove-ignore-files\n  [files dir-name nfs?]\n  (let [files (remove (fn [f]\n                        (let [path (:file/path f)]\n                          (or (string/starts-with? path \".git/\")\n                              (string/includes? path \".git/\")\n                              (and (util-fs/ignored-path? (if nfs? \"\" dir-name) path)\n                                   (not= (:file/name f) \".gitignore\")))))\n                      files)]\n    (if-let [ignore-file (some #(when (= (:file/name %) \".gitignore\")\n                                  %) files)]\n      (if-let [file (:file/file ignore-file)]\n        (p/let [content (.text file)]\n          (when content\n            (let [paths (set (common-handler/ignore-files content (map :file/path files)))]\n              (when (seq paths)\n                (filter (fn [f] (contains? paths (:file/path f))) files)))))\n        (p/resolved files))\n      (p/resolved files))))\n\n(defn- ->db-files\n  [mobile-native? electron? dir-name result]\n  (->>\n   (cond\n     mobile-native?\n     (map (fn [{:keys [uri content size mtime]}]\n            {:file/path             (gp-util/path-normalize uri)\n             :file/last-modified-at mtime\n             :file/size             size\n             :file/content content})\n          result)\n\n     electron?\n     (map (fn [{:keys [path stat content]}]\n            (let [{:keys [mtime size]} stat]\n              {:file/path             (gp-util/path-normalize path)\n               :file/last-modified-at mtime\n               :file/size             size\n               :file/content content}))\n          result)\n\n     :else\n     (let [result (flatten (bean/->clj result))]\n       (map (fn [file]\n              (let [handle (gobj/get file \"handle\")\n                    get-attr #(gobj/get file %)\n                    path (-> (get-attr \"webkitRelativePath\")\n                             (string/replace-first (str dir-name \"/\") \"\"))]\n                {:file/name             (get-attr \"name\")\n                 :file/path             (gp-util/path-normalize path)\n                 :file/last-modified-at (get-attr \"lastModified\")\n                 :file/size             (get-attr \"size\")\n                 :file/type             (get-attr \"type\")\n                 :file/file             file\n                 :file/handle           handle})) result)))\n   (sort-by :file/path)))\n\n(defn- filter-markup-and-built-in-files\n  [files]\n  (filter (fn [file]\n            (contains? (set/union config/markup-formats #{:css :edn})\n                       (keyword (util/get-file-ext (:file/path file)))))\n          files))\n\n(defn- set-batch!\n  [handles]\n  (let [handles (map (fn [[path handle]]\n                       {:key   path\n                        :value handle}) handles)]\n    (idb/set-batch! handles)))\n\n(defn- set-files-aux!\n  [handles]\n  (when (seq handles)\n    (let [[h t] (split-at 50 handles)]\n      (p/let [_ (p/promise (fn [_]\n                             (js/setTimeout (fn []\n                                              (p/resolved nil)) 10)))\n              _ (set-batch! h)]\n        (when (seq t)\n          (set-files-aux! t))))))\n\n(defn- set-files!\n  [handles]\n  (let [handles (map (fn [[path handle]]\n                       (let [handle-path (str config/local-handle-prefix path)]\n                         [handle-path handle]))\n                     handles)]\n    (doseq [[path handle] handles]\n      (nfs/add-nfs-file-handle! path handle))\n    (set-files-aux! handles)))\n\n;; TODO: extract code for `ls-dir-files` and `reload-dir!`\n(defn ls-dir-files-with-handler!\n  [ok-handler]\n  (let [path-handles (atom {})\n        electron? (util/electron?)\n        mobile-native? (mobile-util/native-platform?)\n        nfs? (and (not electron?)\n                  (not mobile-native?))\n        *repo (atom nil)]\n    ;; TODO: add ext filter to avoid loading .git or other ignored file handlers\n    (->\n     (p/let [result (fs/open-dir (fn [path handle]\n                                   (when nfs?\n                                     (swap! path-handles assoc path handle))))\n             root-handle (first result)\n             dir-name (if nfs?\n                        (gobj/get root-handle \"name\")\n                        root-handle)\n             repo (str config/local-db-prefix dir-name)\n             _ (state/set-loading-files! repo true)\n             _ (when-not (or (state/home?) (state/setups-picker?))\n                 (route-handler/redirect-to-home! false))]\n       (reset! *repo repo)\n       (when-not (string/blank? dir-name)\n         (p/let [root-handle-path (str config/local-handle-prefix dir-name)\n                 _ (when nfs?\n                     (idb/set-item! root-handle-path root-handle)\n                     (nfs/add-nfs-file-handle! root-handle-path root-handle))\n                 result (nth result 1)\n                 files (-> (->db-files mobile-native? electron? dir-name result)\n                           (remove-ignore-files dir-name nfs?))\n                 _ (when nfs?\n                     (let [file-paths (set (map :file/path files))]\n                       (swap! path-handles (fn [handles]\n                                             (->> handles\n                                                  (filter (fn [[path _handle]]\n                                                            (or\n                                                             (contains? file-paths\n                                                                        (string/replace-first path (str dir-name \"/\") \"\"))\n                                                             (let [last-part (last (string/split path \"/\"))]\n                                                               (contains? #{config/app-name\n                                                                            gp-config/default-draw-directory\n                                                                            (config/get-journals-directory)\n                                                                            (config/get-pages-directory)}\n                                                                          last-part)))))\n                                                  (into {})))))\n\n                     (set-files! @path-handles))\n                 markup-files (filter-markup-and-built-in-files files)]\n           (-> (p/all (map (fn [file]\n                             (p/let [content (if nfs?\n                                               (.text (:file/file file))\n                                               (:file/content file))\n                                     content (encrypt/decrypt content)]\n                               (assoc file :file/content content))) markup-files))\n               (p/then (fn [result]\n                         (let [files (map #(dissoc % :file/file) result)]\n                           (repo-handler/start-repo-db-if-not-exists! repo {:db-type :local-native-fs})\n                           (async/go\n                             (let [_finished? (async/<! (repo-handler/load-repo-to-db! repo\n                                                                                       {:new-graph?   true\n                                                                                        :empty-graph? (nil? (seq markup-files))\n                                                                                        :nfs-files    files}))]\n                               (state/add-repo! {:url repo :nfs? true})\n                               (state/set-loading-files! repo false)\n                               (when ok-handler (ok-handler))\n                               (fs/watch-dir! dir-name)\n                               (db/persist-if-idle! repo))))))\n               (p/catch (fn [error]\n                          (log/error :nfs/load-files-error repo)\n                          (log/error :exception error)))))))\n     (p/catch (fn [error]\n                (log/error :exception error)\n                (when (contains? #{\"AbortError\" \"Error\"} (gobj/get error \"name\"))\n                  (when @*repo (state/set-loading-files! @*repo false))\n                  ;; (log/error :nfs/open-dir-error error)\n                  ))))))\n\n(defn- compute-diffs\n  [old-files new-files]\n  (let [ks [:file/path :file/last-modified-at :file/content]\n        ->set (fn [files ks]\n                (when (seq files)\n                  (->> files\n                       (map #(select-keys % ks))\n                       set)))\n        old-files (->set old-files ks)\n        new-files (->set new-files ks)\n        file-path-set-f (fn [col] (set (map :file/path col)))\n        get-file-f (fn [files path] (some #(when (= (:file/path %) path) %) files))\n        old-file-paths (file-path-set-f old-files)\n        new-file-paths (file-path-set-f new-files)\n        added (set/difference new-file-paths old-file-paths)\n        deleted (set/difference old-file-paths new-file-paths)\n        modified (->> (set/intersection new-file-paths old-file-paths)\n                      (filter (fn [path]\n                                (not= (:file/content (get-file-f old-files path))\n                                      (:file/content (get-file-f new-files path)))))\n                      (set))]\n    {:added    added\n     :modified modified\n     :deleted  deleted}))\n\n(defn- handle-diffs!\n  [repo nfs? old-files new-files handle-path path-handles re-index?]\n  (let [get-last-modified-at (fn [path] (some (fn [file]\n                                                (when (= path (:file/path file))\n                                                  (:file/last-modified-at file)))\n                                              new-files))\n        get-file-f (fn [path files] (some #(when (= (:file/path %) path) %) files))\n        {:keys [added modified deleted]} (compute-diffs old-files new-files)\n        ;; Use the same labels as isomorphic-git\n        rename-f (fn [typ col] (mapv (fn [file] {:type typ :path file :last-modified-at (get-last-modified-at file)}) col))\n        _ (when (and nfs? (seq deleted))\n            (let [deleted (doall\n                           (-> (map (fn [path] (if (= \"/\" (first path))\n                                                 path\n                                                 (str \"/\" path))) deleted)\n                               (distinct)))]\n              (p/all (map (fn [path]\n                            (let [handle-path (str handle-path path)]\n                              (idb/remove-item! handle-path)\n                              (nfs/remove-nfs-file-handle! handle-path))) deleted))))\n        added-or-modified (set (concat added modified))\n        _ (when (and nfs? (seq added-or-modified))\n            (p/all (map (fn [path]\n                          (when-let [handle (get @path-handles path)]\n                            (idb/set-item! (str handle-path path) handle))) added-or-modified)))]\n    (-> (p/all (map (fn [path]\n                      (when-let [file (get-file-f path new-files)]\n                        (p/let [content (if nfs?\n                                          (.text (:file/file file))\n                                          (:file/content file))\n                                content (encrypt/decrypt content)]\n                          (assoc file :file/content content)))) added-or-modified))\n        (p/then (fn [result]\n                  (let [files (map #(dissoc % :file/file :file/handle) result)\n                        [modified-files modified] (if re-index?\n                                                    [files (set modified)]\n                                                    (let [modified-files (filter (fn [file] (contains? added-or-modified (:file/path file))) files)]\n                                                      [modified-files (set modified)]))\n                        diffs (concat\n                               (rename-f \"remove\" deleted)\n                               (rename-f \"add\" added)\n                               (rename-f \"modify\" modified))]\n                    (when (or (and (seq diffs) (seq modified-files))\n                              (seq diffs))\n                      (comment \"re-index a local graph is handled here\")\n                      (repo-handler/load-repo-to-db! repo\n                                                     {:diffs     diffs\n                                                      :nfs-files modified-files\n                                                      :refresh? (not re-index?)}))\n                    (when (and (util/electron?) (not re-index?))\n                      (db/transact! repo new-files))))))))\n\n(defn- reload-dir!\n  ([repo]\n   (reload-dir! repo false))\n  ([repo re-index?]\n   (when (and repo (config/local-db? repo))\n     (let [old-files (db/get-files-full repo)\n           dir-name (config/get-local-dir repo)\n           handle-path (str config/local-handle-prefix dir-name)\n           path-handles (atom {})\n           electron? (util/electron?)\n           mobile-native? (mobile-util/native-platform?)\n           nfs? (and (not electron?)\n                     (not mobile-native?))]\n       (when re-index?\n         (state/set-graph-syncing? true))\n       (->\n        (p/let [handle (when-not electron? (idb/get-item handle-path))]\n          (when (or handle electron? mobile-native?)   ; electron doesn't store the file handle\n            (p/let [_ (when handle (nfs/verify-permission repo handle true))\n                    files-result (fs/get-files (if nfs? handle\n                                                   (config/get-local-dir repo))\n                                               (fn [path handle]\n                                                 (when nfs?\n                                                   (swap! path-handles assoc path handle))))\n                    new-files (-> (->db-files mobile-native? electron? dir-name files-result)\n                                  (remove-ignore-files dir-name nfs?))\n                    _ (when nfs?\n                        (let [file-paths (set (map :file/path new-files))]\n                          (swap! path-handles (fn [handles]\n                                                (->> handles\n                                                     (filter (fn [[path _handle]]\n                                                               (contains? file-paths\n                                                                          (string/replace-first path (str dir-name \"/\") \"\"))))\n                                                     (into {})))))\n                        (set-files! @path-handles))]\n              (handle-diffs! repo nfs? old-files new-files handle-path path-handles re-index?))))\n        (p/catch (fn [error]\n                   (log/error :nfs/load-files-error repo)\n                   (log/error :exception error)))\n        (p/finally (fn [_]\n                     (state/set-graph-syncing? false))))))))\n\n(defn rebuild-index!\n  [repo ok-handler]\n  (when repo\n    (state/set-nfs-refreshing! true)\n    (search/reset-indice! repo)\n    (db/remove-conn! repo)\n    (db/clear-query-state!)\n    (db/start-db-conn! (state/get-me) repo)\n    (p/let [_ (reload-dir! repo true)\n            _ (ok-handler)]\n      (state/set-nfs-refreshing! false))))\n\n(defn refresh!\n  [repo ok-handler]\n  (when repo\n    (state/set-nfs-refreshing! true)\n    (p/let [_ (reload-dir! repo)\n            _ (ok-handler)]\n      (state/set-nfs-refreshing! false))))\n\n(defn supported?\n  []\n  (or (utils/nfsSupported) (util/electron?)))\n"]}