{"version":3,"sources":["frontend/modules/outliner/datascript.cljc"],"mappings":";AAcG,8DAAA,9DAAMA;AAAN,AAAgC,oDAAA,7CAACC;;AAGjC,iEAAA,jEAAMC,0IACHC;AADH,AAEE,SACE,kBAAWC,jBAAeD,sCAC1B,sBAAA,AAAAE,tBAACC,sCAAOH;;AAGZ,gEAAA,wEAAAI,xIAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAAA,ZACgES;iBADhE,AAAAP,4CAAAF,eAAA,xEACWI;gBADX,AAAAF,4CAAAF,eAAA,vEACsBK;eADtB,AAAAH,4CAAAF,eAAA,tEACgCM;eADhC,AAAAJ,4CAAAF,eAAA,tEACyCO;eADzC,AAAAL,4CAAAF,eAAA,tEACkDQ;AADlD,AAEE,AAACE,gDAAuBD;;AACxB,OAACE,4DAAoCF;;AAGvC,mEAAA,nEAAOG,8IACJC;AADH,AAEE,IAAAC,WAAS,AAACC,qCAAoBF;AAA9B,AAAA,GAAA,CAAAC,YAAA;AAAA;;AACS,OAACE,4CAAI,WAAKC;AAAL,AACE,GAAI,AAACC,qBAAKD;AACR,OAACE,qBAAgB,WAAKC;AAAL,AAAQ,GAAI,AAACC,wBAAQD;AACX,OAACE,+CAAOC,qBAAKH;;AACbA;;GAAIH;;AAC/BA;;GALTH;;;AAQX,sDAAA,tDAAMU,oHACHX,IAAIY;AADP,AAEE,IAAMZ,UAAI,AAACD,iEAA4BC;IACjCA,UAAI,AAACG,4CAAI,WAAKU;AAAL,AAAQ,GAAI,AAACR,qBAAKQ;AACR,+DAAA,yHAAA,8DAAA,+DAAA,qEAAA,kEAAA,+DAAA,8DAAA,gEAAA,uEAAA,zrBAACC,sDAAOD;;AAGRA;;GAAIb;AAL7B,AAME,GAAM,EAAK,AAACe,cAAIf,cACL,AAACgB,cAAI,AAAA,wGAAiBJ;AADjC,AAEE,IAAA,AACE,IAAMM,OAAK,iDAAA,jDAAC7B,4CAAIuB,2DAAW,AAACO;IACtBC,OAAK,2DAAA,3DAACC,sDAAYH;IAClBI,gBAAc,AAACC;IACfC,OAAK,4GAAA,2CAAA,vJAACC,uGAAMb,wHAAqBU;IACjCI,KAAG,AAACC,6DAAYP,KAAKpB,QAAIwB;AAJ/B,AAKE,AAAA,AACE,IAAMI,aAAK,AAACC,iDAAS,AAACC,6CAAKC,gBAAM,AAAA,wFAAUL;IACrCM,4GACkB,iBAAAC,WAAA,AAAA,1CAKA,AAACI,3DACD,AAAClC,4CAAImC;IANLJ,WAAA,AAAAlD,gBAI+BoC;IAJ/Be,WAIoCP;AAJpC,AAAA,0GAAAK,SAAAC,SAAAC,wCAAAF,SAAAC,SAAAC,9KAACC,kDAAAA,8EAAAA;;AAFzB,AASE,GAAQ,AAACI,6CAAE,AAACC,gBAAMT,kCAAkB,AAACS,gBAAM,AAACZ,iDAASG;AAArD;AAAA,AAAA,MAAA,KAAAO,MAAA,CAAA,0EAAA,KAAA,jBAAyEX;;;;AAC7E,GAAUc;AAAV;AAAA,AACE,AAACpD,8DAAyBoC;;;AAC5BA;gBAnBJ,GAAA,CAAAT,kBAoBSsB;AApBT,QAAAtB,JAoBkB0B;AApBlB,AAqBI,AAAAC,qDAAA,uCAAA,uDAAA,AAAAC,mBAAA,2CAAA,iEAAA,oDAAA,tDAAsBF,kEAAAA;;AACtB,MAAOA;;AAtBX,AAAA,MAAA1B;;;;AAFF","names":["frontend.modules.outliner.datascript/new-outliner-txs-state","cljs.core.atom","frontend.modules.outliner.datascript/outliner-txs-state?","state","cljs.core/Atom","cljs.core/deref","cljs.core/coll?","p__63610","map__63611","cljs.core/--destructure-map","cljs.core.get","frontend.modules.outliner.datascript/after-transact-pipelines","_db-before","_db-after","_tx-data","_tempids","_tx-meta","tx-report","frontend.modules.outliner.pipeline/invoke-hooks","frontend.modules.editor.undo-redo/listen-outliner-operation","frontend.modules.outliner.datascript/remove-nil-from-transaction","txs","G__63612","logseq.graph-parser.util/remove-nils","cljs.core.map","x","cljs.core/map?","medley.core/map-vals","v","cljs.core/vector?","cljs.core.remove","cljs.core/nil?","frontend.modules.outliner.datascript/transact!","opts","m","cljs.core.dissoc","cljs.core/seq","cljs.core/not","e63613","repo","frontend.state/get-current-repo","conn","frontend.db.conn.get_db","editor-cursor","frontend.state/get-current-edit-block-and-position","meta","cljs.core.merge","rs","datascript.core.transact_BANG_","eids","cljs.core.distinct","cljs.core.mapv","cljs.core/first","left&parent-list","G__63614","G__63615","G__63616","datascript.core/q","cljs.core/vec","cljs.core/next","js/Error","cljs.core._EQ_","cljs.core/count","frontend.config/test?","e","lambdaisland.glogi.log","cljs.core/identity"],"sourcesContent":["(ns frontend.modules.outliner.datascript\n  #?(:clj (:require [clojure.core :as core]))\n  #?(:cljs (:require-macros [frontend.modules.outliner.datascript]))\n  #?(:cljs (:require [datascript.core :as d]\n                     [frontend.db.conn :as conn]\n                     [frontend.modules.outliner.pipeline :as pipelines]\n                     [frontend.modules.editor.undo-redo :as undo-redo]\n                     [frontend.state :as state]\n                     [frontend.config :as config]\n                     [logseq.graph-parser.util :as gp-util]\n                     [lambdaisland.glogi :as log]\n                     [medley.core :as medley])))\n\n#?(:cljs\n   (defn new-outliner-txs-state [] (atom [])))\n\n#?(:cljs\n   (defn outliner-txs-state?\n     [state]\n     (and\n       (instance? cljs.core/Atom state)\n       (coll? @state))))\n\n#?(:cljs\n   (defn after-transact-pipelines\n     [{:keys [_db-before _db-after _tx-data _tempids _tx-meta] :as tx-report}]\n     (pipelines/invoke-hooks tx-report)\n     (undo-redo/listen-outliner-operation tx-report)))\n\n#?(:cljs\n   (defn- remove-nil-from-transaction\n     [txs]\n     (some->> (gp-util/remove-nils txs)\n              (map (fn [x]\n                     (if (map? x)\n                       (medley/map-vals (fn [v] (if (vector? v)\n                                                  (remove nil? v)\n                                                  v)) x)\n                       x))))))\n\n#?(:cljs\n   (defn transact!\n     [txs opts]\n     (let [txs (remove-nil-from-transaction txs)\n           txs (map (fn [m] (if (map? m)\n                              (dissoc m\n                                      :block/children :block/meta :block/top? :block/bottom? :block/anchor\n                                      :block/title :block/body :block/level :block/container :db/other-tx)\n                              m)) txs)]\n       (when (and (seq txs)\n                  (not (:skip-transact? opts)))\n         (try\n           (let [repo (get opts :repo (state/get-current-repo))\n                 conn (conn/get-db repo false)\n                 editor-cursor (state/get-current-edit-block-and-position)\n                 meta (merge opts {:editor-cursor editor-cursor})\n                 rs (d/transact! conn txs meta)]\n             (when true                 ; TODO: add debug flag\n               (let [eids (distinct (mapv first (:tx-data rs)))\n                     left&parent-list (->>\n                                       (d/q '[:find ?e ?l ?p\n                                              :in $ [?e ...]\n                                              :where\n                                              [?e :block/left ?l]\n                                              [?e :block/parent ?p]] @conn eids)\n                                       (vec)\n                                       (map next))]\n                 (assert (= (count left&parent-list) (count (distinct left&parent-list))) eids)))\n             (when-not config/test?\n               (after-transact-pipelines rs))\n             rs)\n           (catch js/Error e\n             (log/error :exception e)\n             (throw e)))))))\n"]}