{"version":3,"sources":["rewrite_cljc/node/quote.cljc"],"mappings":"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","names":["this__4502__auto__","k__4503__auto__","this__4504__auto__","k92321","else__4505__auto__","G__92348","cljs.core/Keyword","tag","prefix","sym","children","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__92349","vec__92350","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__92320","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this92322","other92323","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__92369","this__4510__auto__","k__4511__auto__","pred__92371","cljs.core/keyword-identical?","expr__92372","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-cljc.node.quote/QuoteNode","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__92330","extmap__4542__auto__","G__92381","cljs.core/record?","rewrite-cljc.node.quote/->QuoteNode","rewrite-cljc.node.quote/map->QuoteNode","_","cljs.core/first","rewrite-cljc.node.protocols/sexprs","rewrite-cljc.node.protocols/sum-lengths","rewrite-cljc.node.protocols/concat-strings","this","children'","rewrite-cljc.node.protocols/assert-single-sexpr","rewrite-cljc.node.protocols/make-printable!","rewrite-cljc.node.quote/->node","t","rewrite-cljc.node.quote/quote-node","cljs.core/sequential?","rewrite-cljc.node.quote/syntax-quote-node","rewrite-cljc.node.quote/unquote-node","rewrite-cljc.node.quote/unquote-splicing-node"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.quote\n  (:require [rewrite-cljc.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord QuoteNode [tag prefix sym children]\n  node/Node\n  (tag [_] tag)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (list sym (first (node/sexprs children))))\n  (length [_]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_] true)\n  (children [_] children)\n  (replace-children [this children']\n    (node/assert-single-sexpr children')\n    (assoc this :children children'))\n  (leader-length [_]\n    (count prefix))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(node/make-printable! QuoteNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [t prefix sym children]\n  (node/assert-single-sexpr children)\n  (->QuoteNode t prefix sym children))\n\n(defn quote-node\n  \"Create node representing a quoted form where `children`\n   is either a sequence of nodes or a single node.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :quote \"'\" 'quote\n      children)\n    (recur [children])))\n\n(defn syntax-quote-node\n  \"Create node representing a syntax-quoted form where `children`\n   is either a sequence of nodes or a single node.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :syntax-quote \"`\" 'quote\n      children)\n    (recur [children])))\n\n(defn unquote-node\n  \"Create node representing an unquoted form (i.e. `~...`) where `children`.\n   is either a sequence of nodes or a single node.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote \"~\" 'unquote\n      children)\n    (recur [children])))\n\n(defn unquote-splicing-node\n  \"Create node representing an unquote-spliced form (i.e. `~@...`) where `children`.\n   is either a sequence of nodes or a single node.\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote-splicing \"~@\" 'unquote-splicing\n      children)\n    (recur [children])))\n"]}