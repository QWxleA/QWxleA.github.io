{
"version":3,
"file":"module$node_modules$codemirror$mode$brainfuck$brainfuck.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMnH,SAAQ,CAACC,GAAD,CAAM,CACS,QAAtB,EAAI,MAAOD,QAAX,EAAmD,QAAnD,EAAkC,MAAOD,OAAzC,CACEE,GAAA,CAAIH,OAAA,CAAQ,+CAAR,CAAJ,CADF,CAE0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAOC,CAAAA,GAA1C,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAP,CAAiCD,GAAjC,CADG,CAGHA,GAAA,CAAIG,UAAJ,CANW,CAAd,CAAD,CAOG,QAAQ,CAACA,UAAD,CAAa,CAEtB,IAAIC,QAAU,gBAAA,CAAA,KAAA,CAAA,EAAA,CAcdD,WAAWE,CAAAA,UAAX,CAAsB,WAAtB,CAAmC,QAAQ,EAAG,CAC5C,MAAO,CACLC,WAAYA,QAAQ,EAAG,CACrB,MAAO,CACLC,YAAa,CAAA,CADR,CAELC,KAAM,CAFD,CAGLC,MAAO,CAHF;AAILC,YAAa,CAAA,CAJR,CADc,CADlB,CASLC,MAAOA,QAAQ,CAACC,MAAD,CAASC,KAAT,CAAgB,CAC7B,GAAID,MAAOE,CAAAA,QAAP,EAAJ,CAAuB,MAAO,KAC3BF,OAAOG,CAAAA,GAAP,EAAH,GACEF,KAAMN,CAAAA,WADR,CACsB,CAAA,CADtB,CAGA,KAAIS,GAAKJ,MAAOK,CAAAA,IAAP,EAAcC,CAAAA,QAAd,EACT,IAA2B,CAAC,CAA5B,GAAGd,OAAQe,CAAAA,OAAR,CAAgBH,EAAhB,CAAH,CAA8B,CAC5B,GAAyB,CAAA,CAAzB,GAAGH,KAAMN,CAAAA,WAAT,CAIE,MAHGK,OAAOQ,CAAAA,GAAP,EAGI,GAFLP,KAAMN,CAAAA,WAED,CAFe,CAAA,CAEf,EAAA,SAET,IAAU,GAAV,GAAGS,EAAH,EAAwB,GAAxB,GAAiBA,EAAjB,CAOE,MANU,GAAV,GAAGA,EAAH,CACEH,KAAML,CAAAA,IAAN,EADF,CAIEK,KAAMJ,CAAAA,KAAN,EAEK,CAAA,SAEJ,IAAU,GAAV,GAAGO,EAAH,EAAwB,GAAxB,GAAiBA,EAAjB,CACH,MAAO,SAEJ,IAAU,MAAV,GAAGA,EAAH,EAAwB,MAAxB,GAAiBA,EAAjB,CACH,MAAO,MAEJ,IAAU,GAAV,GAAGA,EAAH,EAAwB,GAAxB,GAAiBA,EAAjB,CACH,MAAO,KAvBmB,CAA9B,IA+BE,OAJAH,MAAMN,CAAAA,WAIC,CAJa,CAAA,CAIb,CAHJK,MAAOQ,CAAAA,GAAP,EAGI,GAFLP,KAAMN,CAAAA,WAED;AAFe,CAAA,CAEf,EAAA,SAENK,OAAOQ,CAAAA,GAAP,EAAH,GACEP,KAAMN,CAAAA,WADR,CACsB,CAAA,CADtB,CAvC6B,CAT1B,CADqC,CAA9C,CAuDFJ,WAAWkB,CAAAA,UAAX,CAAsB,kBAAtB,CAAyC,WAAzC,CAvEwB,CAPxB,CANoH;",
"sources":["node_modules/codemirror/mode/brainfuck/brainfuck.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$brainfuck$brainfuck\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Brainfuck mode created by Michael Kaminsky https://github.com/mkaminsky11\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod)\n  else\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var reserve = \"><+-.,[]\".split(\"\");\n  /*\n  comments can be either:\n  placed behind lines\n\n        +++    this is a comment\n\n  where reserved characters cannot be used\n  or in a loop\n  [\n    this is ok to use [ ] and stuff\n  ]\n  or preceded by #\n  */\n  CodeMirror.defineMode(\"brainfuck\", function() {\n    return {\n      startState: function() {\n        return {\n          commentLine: false,\n          left: 0,\n          right: 0,\n          commentLoop: false\n        }\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null\n        if(stream.sol()){\n          state.commentLine = false;\n        }\n        var ch = stream.next().toString();\n        if(reserve.indexOf(ch) !== -1){\n          if(state.commentLine === true){\n            if(stream.eol()){\n              state.commentLine = false;\n            }\n            return \"comment\";\n          }\n          if(ch === \"]\" || ch === \"[\"){\n            if(ch === \"[\"){\n              state.left++;\n            }\n            else{\n              state.right++;\n            }\n            return \"bracket\";\n          }\n          else if(ch === \"+\" || ch === \"-\"){\n            return \"keyword\";\n          }\n          else if(ch === \"<\" || ch === \">\"){\n            return \"atom\";\n          }\n          else if(ch === \".\" || ch === \",\"){\n            return \"def\";\n          }\n        }\n        else{\n          state.commentLine = true;\n          if(stream.eol()){\n            state.commentLine = false;\n          }\n          return \"comment\";\n        }\n        if(stream.eol()){\n          state.commentLine = false;\n        }\n      }\n    };\n  });\nCodeMirror.defineMIME(\"text/x-brainfuck\",\"brainfuck\")\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","reserve","defineMode","startState","commentLine","left","right","commentLoop","token","stream","state","eatSpace","sol","ch","next","toString","indexOf","eol","defineMIME"]
}
