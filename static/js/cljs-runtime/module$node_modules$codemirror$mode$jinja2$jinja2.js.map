{
"version":3,
"file":"module$node_modules$codemirror$mode$jinja2$jinja2.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/jinja2/jinja2.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$jinja2$jinja2\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"jinja2\", function() {\n    var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n      \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n      \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n      \"ifequal\", \"endifequal\", \"ifnotequal\",\n      \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n      \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n      \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n      \"closeblock\", \"openvariable\", \"closevariable\",\n      \"openbrace\", \"closebrace\", \"opencomment\",\n      \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n      \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n      \"endblocktrans\", \"get_available_languages\",\n      \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\n    keywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\n    atom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      var ch = stream.peek();\n\n      //Comment\n      if (state.incomment) {\n        if(!stream.skipTo(\"#}\")) {\n          stream.skipToEnd();\n        } else {\n          stream.eatWhile(/\\#|}/);\n          state.incomment = false;\n        }\n        return \"comment\";\n      //Tag\n      } else if (state.intag) {\n        //After operator\n        if(state.operator) {\n          state.operator = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n        //After sign\n        if(state.sign) {\n          state.sign = false;\n          if(stream.match(atom)) {\n            return \"atom\";\n          }\n          if(stream.match(number)) {\n            return \"number\";\n          }\n        }\n\n        if(state.instring) {\n          if(ch == state.instring) {\n            state.instring = false;\n          }\n          stream.next();\n          return \"string\";\n        } else if(ch == \"'\" || ch == '\"') {\n          state.instring = ch;\n          stream.next();\n          return \"string\";\n        } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n          state.intag = false;\n          return \"tag\";\n        } else if(stream.match(operator)) {\n          state.operator = true;\n          return \"operator\";\n        } else if(stream.match(sign)) {\n          state.sign = true;\n        } else {\n          if(stream.eat(\" \") || stream.sol()) {\n            if(stream.match(keywords)) {\n              return \"keyword\";\n            }\n            if(stream.match(atom)) {\n              return \"atom\";\n            }\n            if(stream.match(number)) {\n              return \"number\";\n            }\n            if(stream.sol()) {\n              stream.next();\n            }\n          } else {\n            stream.next();\n          }\n\n        }\n        return \"variable\";\n      } else if (stream.eat(\"{\")) {\n        if (stream.eat(\"#\")) {\n          state.incomment = true;\n          if(!stream.skipTo(\"#}\")) {\n            stream.skipToEnd();\n          } else {\n            stream.eatWhile(/\\#|}/);\n            state.incomment = false;\n          }\n          return \"comment\";\n        //Open tag\n        } else if (ch = stream.eat(/\\{|%/)) {\n          //Cache close tag\n          state.intag = ch;\n          if(ch == \"{\") {\n            state.intag = \"}\";\n          }\n          stream.eat(\"-\");\n          return \"tag\";\n        }\n      }\n      stream.next();\n    };\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{#\",\n      blockCommentEnd: \"#}\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/jinja2\", \"jinja2\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","operator","match","atom","number","sign","instring","next","eat","sol","keywords","RegExp","join","startState","tokenize","token","blockCommentStart","blockCommentEnd","defineMIME"]
}
