{"version":3,"sources":["rewrite_cljc/zip/walk.cljc"],"mappings":";AAMA,wCAAA,xCAAOA,wFACJC,SAAGC,EAAEC;AADR,AAEE,IAAOC,MAAID;;AAAX,AACE,oBAAI,AAACE,iCAAOD;AACVA;;AACA,oBAAI,CAACH,yCAAAA,8CAAAA,PAAGG,0BAAAA;AACN,IAAAE,qBAAW,CAACJ,kCAAAA,uCAAAA,PAAEE,mBAAAA;AAAd,AAAA,oBAAAE;AAAA,QAAAA,JAASC;AAAT,AACE,eAAO,AAACC,2BAAOD;;;;AACf,eAAO,AAACC,2BAAOJ;;;;;AACjB,eAAO,AAACI,2BAAOJ;;;;;;;;AAEvB,AAAA;;;;;;;;;;;;;;;;;gCAAA,wCAAAK,xEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMD,yEAgBFR,KAAKD;AAhBT,AAgBY,OAACW,4DAAQV,KAAK,qBAAA,rBAACW,2BAAiBZ;;;AAhB5C,CAAA,8DAAA,9DAAMS,yEAiBFR,KAAKF,SAAGC;AAjBZ,kDAkBQ,AAACa,gDAAQf,sCAAgBC,SAAGC,jJAC5B,OAACc,sCAAab;;;AAnBtB,CAAA,wDAAA,xDAAMQ;;AAAN,AAqBA,yCAAA,zCAAMM,0FACHhB,SAAGC,EAAEE;AADR,AAEE,IAAMc,OAAK,AAACV,2BAAOJ;IACbe,mBAAK,kBAAI,AAACd,iCAAOa,OACVd,IACA,AAACgB,2BAAO,CAACH,uEAAAA,wFAAAA,nBAAiBhB,oEAAAA,3DAAGC,oEAAAA,lEAAEgB,oEAAAA;AAH5C,AAIE,oBAAI,CAACjB,yCAAAA,2DAAAA,pBAAGkB,uCAAAA;AACN,IAAAE,mBAAI,CAACnB,kCAAAA,oDAAAA,pBAAEiB,gCAAAA;AAAP,AAAA,oBAAAE;AAAAA;;AAAaF;;;AACbA;;;AAEN,AAAA;;;;;;;;;;;;;;;;;iCAAA,yCAAAV,1EAAwBc;AAAxB,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAX,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAwBW,0EAgBpBpB,KAAKD;AAhBT,AAgBY,OAACsB,6DAASrB,KAAK,qBAAA,rBAACW,2BAAiBZ;;;AAhB7C,CAAA,+DAAA,/DAAwBqB,0EAiBpBpB,KAAKF,SAAGC;AAjBZ,AAkBG,kDAAA,WAAAuB,tDAACT,sCAAab;AAAd,AAAoB,yDAAAsB,lDAACR,uCAAiBhB,SAAGC;;;;AAlB5C,CAAA,yDAAA,zDAAwBqB;;AAAxB","names":["rewrite-cljc.zip.walk/prewalk-subtree","p?","f","zloc","loc","rewrite-cljc.zip.move/end?","temp__5718__auto__","n","rewrite-cljc.zip.move/next","var_args","G__94573","rewrite-cljc.zip.walk/prewalk","js/Error","rewrite_cljc.zip.walk.prewalk","cljs.core/constantly","cljs.core.partial","rewrite-cljc.zip.subedit/subedit-node","rewrite-cljc.zip.walk/postwalk-subtree","nloc","loc'","rewrite-cljc.zip.move/prev","or__4253__auto__","G__94576","rewrite-cljc.zip.walk/postwalk","rewrite_cljc.zip.walk.postwalk","p1__94574#"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.walk\n  (:require [rewrite-cljc.zip.move :as m]\n            [rewrite-cljc.zip.subedit :refer [subedit-node]]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- prewalk-subtree\n  [p? f zloc]\n  (loop [loc zloc]\n    (if (m/end? loc)\n      loc\n      (if (p? loc)\n        (if-let [n (f loc)]\n          (recur (m/next n))\n          (recur (m/next loc)))\n        (recur (m/next loc))))))\n\n(defn prewalk\n  \"Return zipper modified by an isolated depth-first pre-order traversal.\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n   Function `f` is called on the zipper locations satisfying predicate `p?`, or all locations when `p?` is absent,\n   and must return a valid zipper - modified or not.\n\n   Note that by default a newly created zipper automatically navigates to the first non-whitespace\n   node. If you want to be sure to walk all forms in a zipper, you'll want to navigate one up prior to your walk:\n\n   ```Clojure\n   (-> (zip/of-string \\\"my clojure forms\\\")\n       zip/up\n       (zip/prewalk ...))\n   ```\n\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\"\n  ([zloc f] (prewalk zloc (constantly true) f))\n  ([zloc p? f]\n   (->> (partial prewalk-subtree p? f)\n        (subedit-node zloc))))\n\n(defn postwalk-subtree\n  [p? f loc]\n  (let [nloc (m/next loc)\n        loc' (if (m/end? nloc)\n               loc\n               (m/prev (postwalk-subtree p? f nloc)))]\n    (if (p? loc')\n      (or (f loc') loc')\n      loc')))\n\n(defn ^{:added \"0.4.9\"} postwalk\n  \"Return zipper modified by an isolated depth-first post-order traversal.\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n   Function `f` is called on the zipper locations satisfying predicate `p?`, or all locations when `p?` is absent,\n   and must return a valid zipper - modified or not.\n\n   Note that by default a newly created zipper automatically navigates to the first non-whitespace\n   node. If you want to be sure to walk all forms in a zipper, you'll want to navigate one up prior to your walk:\n\n   ```Clojure\n   (-> (zip/of-string \\\"my clojure forms\\\")\n       zip/up\n       (zip/postwalk ...))\n   ```\n\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\"\n  ([zloc f] (postwalk zloc (constantly true) f))\n  ([zloc p? f]\n   (subedit-node zloc #(postwalk-subtree p? f %))))\n"]}