{"version":3,"sources":["rewrite_cljc/parser/keyword.cljc"],"mappings":";AAYA;;;;;2CAAA,3CAAOA,8FAIJC;AAJH,AAKE,IAAMC,KAAG,AAACC,yCAAYF;AAAtB,AACE,GAAA,GAAQ,AAACG,+CAA8BF;AACrC,IAAqCG,QAAO,iBAAAC,eAAA,uEAAA,AAAA,+GAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,0DAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,4FAAA,AAAA,oEAAA,AAAA,6BAAA,AAAA,GAAA,AAAA,mxDAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,6mBAAA,AAAA,KAAA,kBAAAC,kCAAA,AAAA,AAAAA,gDAAA;AAAA,AAAA,QAAAD,6CAAAA,kDAAA,gEAAAA,8BAAA,rGAAkBL,8FAAAA,7BAAgBC,8FAAAA;;IACxEM,IAAE,AAACC,4CAAiCJ;AAD1C,AAEE,oBAAI,iBAAAK,oBAAKF;AAAL,AAAA,oBAAAE;AAEK,UAAK,yBAAA,xBAAO,cAAA,dAAUL;;AAF3BK;;;AAGF,IAAkCC,KAAI,mEAAA,mBAAA,rFAACH,kCAAAA,uCAAAA;IACHI,OAAM,mEAAA,mBAAA,rFAACJ,kCAAAA,uCAAAA;AAD3C,AAEE,GAAI,CAAA,QAAe,kDAAA,lDAACK,4CAAIR;AACtB,0DAAA,nDAACS,4CAAiCb,iEAAgBI;;AAClD,OAACU,gDAAQJ,GAAGC;;;AAChB,0DAAA,nDAACE,4CAAiCb,iEAAgBI;;;AACtD,OAACW,iDAAsCf;;;AAE7C,4CAAA,5CAAMgB,gGACkBhB;AADxB,AAEE,AAACiB,iCAASjB;;AACV,IAAAkB,qBAAW,AAAalB;AAAxB,AAAA,oBAAAkB;AAAA,QAAAA,JAASC;AAAT,AACE,GAAI,+CAAA,/CAACC,6CAAED;AACL,AACE,AAAanB;;AACb,8KAAA,vKAACqB,oEACA,AAACtB,yCAAaC;;AAEjB,OAACsB,+BAAkB,AAACvB,yCAAaC;;;AACnC,4IAAA,rIAACuB,4EAAevB","names":["rewrite-cljc.parser.keyword/read-keyword","reader","ch","cljs.tools.reader.reader-types/read-char","cljs.tools.reader.impl.utils/whitespace?","token","fexpr__92756","cljs.tools.reader.edn/read-token","s","cljs.tools.reader.impl.commons/parse-symbol","and__4251__auto__","ns","name","cljs.core.nth","cljs.tools.reader.impl.errors/throw-invalid","cljs.core.keyword","cljs.tools.reader.impl.errors/throw-single-colon","rewrite-cljc.parser.keyword/parse-keyword","rewrite-cljc.parser.utils/ignore","temp__5718__auto__","c","cljs.core._EQ_","rewrite_cljc.node.keyword_node","rewrite-cljc.node/keyword-node","rewrite_cljc.parser.utils.throw_reader"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.parser.keyword\n  (:require [clojure.tools.reader.edn :as edn]\n            ;; internal tools reader namespaces to support read-keyword override work\n            [clojure.tools.reader.impl.commons :as reader-impl-commons]\n            [clojure.tools.reader.impl.errors :as reader-impl-errors]\n            [clojure.tools.reader.impl.utils :as reader-impl-utils]\n            [clojure.tools.reader.reader-types :as r]\n            [rewrite-cljc.node :as node]\n            [rewrite-cljc.parser.utils :as u] ))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- read-keyword\n  \"This customized version of clojure.tools.reader.edn's read-keyword allows for\n  an embedded `::` in a keyword to to support [garden-style keywords](https://github.com/noprompt/garden)\n  like `:&::before`. This function was transcribed from clj-kondo.\"\n  [reader]\n  (let [ch (r/read-char reader)]\n    (if-not (reader-impl-utils/whitespace? ch)\n      (let [#?(:clj ^String token :default token) (#'edn/read-token reader :keyword ch)\n            s (reader-impl-commons/parse-symbol token)]\n        (if (and s\n                 ;; (== -1 (.indexOf token \"::\")) becomes:\n                 (not (zero? (.indexOf token \"::\"))))\n          (let [#?(:clj ^String ns :default ns) (s 0)\n                #?(:clj ^String name :default name) (s 1)]\n            (if (identical? \\: (nth token 0))\n              (reader-impl-errors/throw-invalid reader :keyword token) ; No ::kw in edn.\n              (keyword ns name)))\n          (reader-impl-errors/throw-invalid reader :keyword token)))\n      (reader-impl-errors/throw-single-colon reader))))\n\n(defn parse-keyword\n  [#?(:cljs ^not-native reader :default reader)]\n  (u/ignore reader)\n  (if-let [c (r/peek-char reader)]\n    (if (= c \\:)\n      (do\n        (r/read-char reader)\n        (node/keyword-node\n         (read-keyword reader)\n         true))\n      (node/keyword-node (read-keyword reader)))\n    (u/throw-reader reader \"unexpected EOF while reading keyword.\")))\n"]}