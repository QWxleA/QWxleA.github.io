{"version":3,"sources":["frontend/mobile/footer.cljs"],"mappings":";AAWA,4CAAA,AAAAA,oBAAAC,oBAAA,pFAAUG,+FAAoBC,gBAAgBC;AAA9C,AAAA,AAAA,OAAAJ,6BAAA,SAAA,eAEmB,WAAKK;AAAL,AACE,AAACC,mBAAUD;;AACX,QAACF,gDAAAA,kDAAAA;eAJtB,iBAAA,CAAA,oEAAA,AAAAF,oEAAA,AAAAA,tIAKO,kDAAA,lDAACM,6CAAEH,oDACLI,oEACA,oDAAA,2CAAA,uDAAA,2CAAA,jMAACC,+CAAQL,8MAAwBM;GAPtC,KAAA;AASA,2DAAA,3DAAMC,8HACHC;AADH,AAEE,IAAMC,UAAQ,uBAAA,vBAACC,eAAKF;IACdA,cAAQ,sBAAA,tBAACG,cAAIH;AADnB,AAEE,iEAAA,1DAACI,wHAAwBH,QAAQD;;AAErC,AAAKK,4CAAc,6CAAA,7CAACC;AACpB,yCAAA,AAAApB,oBAAAqB,qBAAA,lFAAWC,6FASRE;AATH,AAAA,AAUE,GAAM,mJAAA,nJAACf,6CAAE,mBAAA,nBAACwB;AAAV,AACE,AAACC,mDAAMf,0CAAcgB;;AADvB;;AAVF,GAYM,mJAAA,nJAAC1B,6CAAE,mBAAA,nBAACwB;AAZV,AAcM,gEAAA,hEAACG,sBAAOjB;;AACR,wFAAA,jFAACf,0CAAmBiC;;AAf1B,OAAAnC,6BAAA,MAAA,aAAA,8BAAA,gGAAA,AAAAA,6BAAA,MAAA,6DAAA,cAAA,CAAA,AAAAC,9MAiBK,gFAAA,hFAACC,0CAAmBkC,mGAERA,gGACX,yDAAA,AAAAC,zDAAC1B,yEAA0BM;;GApBjC,qGAAA,2CAAA,7DAA6BI,2HACf,WAAKC;AAAL,AACE,IAAMC,OAAK,AAAA,+GAAsBD;eAAjC,XACME;AADN,AACgB,OAACC,wBAAmBF;;IAC9BG,WAAS,qBAAA,rBAACC,YAAeH;AAF/B,AAGE,2DAAA,pDAACI,8CAAMN,8GAAiBI;GAL1C,iEAMe,WAAKJ;AAAL,AACE,AAACO,cAAiB,AAAA,sIAAYP;;AAC9B,4DAAA,rDAACQ,+CAAOR;mBARzB;AAsBA,gCAAA,AAAAxB,oBAAAC,oBAAA,xEAAUuC;AAAV,AAAA,AAAA,oBAEQ,iBAAAC,oBACC,AAACC;AADF,AAAA,oBAAAD;AAAA,IAAAA,wBAEC,mBAAA,nBAACR;AAFF,AAAA,oBAAAQ;AAGC,OAACE;;AAHFF;;;AAAAA;;;AAFR,AAAA,OAAAvC,6BAAA,MAAA,aAAA,8CAAA,CAOK,AAACoB,yCACD,0CAAA,1CAAClB;AAAD,AAAqB,OAACwC;GAAtB,SACA,0CAAA,1CAACxC;AAAD,AACE,IAAMyC,OAAK,iBAAAC,mBAAI,AAACC;AAAL,AAAA,oBAAAD;AAAAA;;AACI,OAACE,0BAAkB,AAACC;;;AADnC,AAEE,0DAAA,GAAA,2CAAA,yDAAA,mEAAA,KAAA,uFAAA,zTAACC,qJAEOL;GALZ;;AATL;;GAAA,6GAAA,1BAAmBtB","names":["rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","daiquiri.interpreter/interpret","frontend.mobile.footer/mobile-bar-command","command-handler","icon","e","frontend.util/stop","cljs.core._EQ_","frontend.components.svg/circle-stop","frontend.ui.icon","frontend.ui/icon-size","frontend.mobile.footer/seconds->minutes:seconds","seconds","minutes","cljs.core/quot","cljs.core/mod","frontend.util.format","frontend.mobile.footer/*record-start","cljs.core.atom","rum.core/build-defcs","frontend.mobile.footer/audio-record-cp","rum.core/reactive","state","comp","callback","rum.core/request-render","interval","js/setInterval","cljs.core.assoc","js/clearInterval","cljs.core.dissoc","frontend.state/sub","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/reset!","frontend.mobile.record/start-recording","frontend.mobile.record/stop-recording","cljs.core/deref","frontend.mobile.footer/footer","and__5041__auto__","frontend.state/mobile?","frontend.state/get-current-repo","frontend.state/toggle-document-mode!","page","or__5043__auto__","frontend.state/get-current-page","clojure.string/lower-case","frontend.date.journal_name","frontend.handler.editor/api-insert-new-block!"],"sourcesContent":["(ns frontend.mobile.footer\n  (:require [clojure.string :as string]\n            [frontend.date :as date]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.mobile.record :as record]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [rum.core :as rum]\n            [frontend.components.svg :as svg]))\n\n(rum/defc mobile-bar-command [command-handler icon]\n  [:button.bottom-action\n   {:on-mouse-down (fn [e]\n                     (util/stop e)\n                     (command-handler))}\n   (if (= icon \"player-stop\")\n     svg/circle-stop\n     (ui/icon icon {:style {:fontSize ui/icon-size}}))])\n\n(defn seconds->minutes:seconds\n  [seconds]\n  (let [minutes (quot seconds 60)\n        seconds (mod seconds 60)]\n    (util/format \"%02d:%02d\" minutes seconds)))\n\n(def *record-start (atom -1))\n(rum/defcs audio-record-cp < rum/reactive\n  {:did-mount (fn [state]\n                (let [comp (:rum/react-component state)\n                      callback #(rum/request-render comp)\n                      interval (js/setInterval callback 1000)]\n                  (assoc state ::interval interval)))\n   :will-mount (fn [state]\n                 (js/clearInterval (::interval state))\n                 (dissoc state ::interval))}\n  [state]\n  (when (= (state/sub :editor/record-status) \"RECORDING\")\n    (swap! *record-start inc))\n  (if (= (state/sub :editor/record-status) \"NONE\")\n    (do\n      (reset! *record-start -1)\n      (mobile-bar-command record/start-recording \"microphone\"))\n    [:div.flex.flex-row.items-center\n     (mobile-bar-command record/stop-recording \"player-stop\")\n     [:div.timer.pl-2\n      {:on-click record/stop-recording}\n      (seconds->minutes:seconds @*record-start)]]))\n\n(rum/defc footer < rum/reactive\n  []\n  (when (and\n         (state/mobile?)\n         (state/sub :mobile/show-tabbar?)\n         (state/get-current-repo))\n    [:div.cp__footer.w-full.bottom-0.justify-between\n     (audio-record-cp)\n     (mobile-bar-command #(state/toggle-document-mode!) \"notes\")\n     (mobile-bar-command\n      #(let [page (or (state/get-current-page)\n                      (string/lower-case (date/journal-name)))]\n         (editor-handler/api-insert-new-block!\n          \"\"\n          {:page page\n           :edit-block? true\n           :replace-empty-target? true}))\n      \"edit\")]))\n"]}