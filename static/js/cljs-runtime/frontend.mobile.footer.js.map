{"version":3,"sources":["frontend/mobile/footer.cljs"],"mappings":";AAUA,4CAAA,AAAAA,oBAAAC,oBAAA,pFAAUG,+FAAoBC,gBAAgBC;AAA9C,AAAA,AAAA,OAAAJ,6BAAA,MAAA,KAAA,CAAA,AAAAA,6BAAA,SAAA,eAGoB,WAAKK;AAAL,AACE,AAACC,mBAAUD;;AACX,QAACF,gDAAAA,kDAAAA;eALvB,iBAAA,CAAA,AAAAF,+BAMI,oDAAA,2CAAA,uDAAA,2CAAA,jMAACM,+CAAQH,8MAAwBI;GANrC,KAAA;AAQA,2DAAA,3DAAMC,8HACHC;AADH,AAEE,IAAMC,UAAQ,uBAAA,vBAACC,eAAKF;IACdA,cAAQ,sBAAA,tBAACG,cAAIH;AADnB,AAEE,iEAAA,1DAACI,wHAAwBH,QAAQD;;AAErC,AAAKK,4CAAc,6CAAA,7CAACC;AACpB,yCAAA,AAAAlB,oBAAAmB,qBAAA,lFAAWK,6FASRE;AATH,AAAA,AAUE,GAAM,mJAAA,nJAACS,6CAAE,mBAAA,nBAACC;AAAV,AACE,AAACC,mDAAMpB,0CAAcqB;;AADvB;;AAVF,IAAAlB,aAaG,EAAI,mJAAA,nJAACe,6CAAE,mBAAA,nBAACC,+GACN;AACE,gEAAA,hEAACG,sBAAOtB;;AACR,iDAAA,1CAACb;AAAD,AAAqB,OAACoC;GAAtB;;CAHJ,mFAAA,8EAKG,0CAAA,1CAACpC;AAAD,AAAqB,OAACqC;kBALzB,mFAAA,lGAKG,2KACiB,yDAAA,AAAAC,zDAAC/B,yEAA0BM;AAnBlD,AAAA,OAAAf,6BAAA,MAAA,EAAA,AAAAmB,qBAAAD,aAAA,AAAAE,wCAAA,AAAAC,2HAAA,2CAAA,wDAAA,mFAAA,OAAA,2BAAAH,kBAAA,aAAA,kBAAA,EAAA,AAAAC,qBAAAD,aAAA,KAAA,CAAA,AAAAjB,+BAAAiB;GAAA,qGAAA,2CAAA,7DAA6BK,2HACf,WAAKC;AAAL,AACE,IAAMC,OAAK,AAAA,+GAAsBD;eAAjC,XACME;AADN,AACgB,OAACC,wBAAmBF;;IAC9BG,WAAS,qBAAA,rBAACC,YAAeH;AAF/B,AAGE,2DAAA,pDAACI,8CAAMN,8GAAiBI;GAL1C,iEAMe,WAAKJ;AAAL,AACE,AAACO,cAAiB,AAAA,sIAAYP;;AAC9B,4DAAA,rDAACQ,+CAAOR;mBARzB;AAqBA,gCAAA,AAAA1B,oBAAAC,oBAAA,xEAAU0C;AAAV,AAAA,AAAA,oBAEY,iBAAAC,mBAAI,mBAAA,nBAACR;AAAL,AAAA,oBAAAQ;AAAAA;;AAAA,IAAAA,uBACI,mBAAA,nBAACR;AADL,AAAA,oBAAAQ;AAAAA;;AAEI,0BAAA,nBAACR;;;;AAJjB;;AAAA,AAAA,OAAAlC,6BAAA,MAAA,aAAA,8CAAA,CAMK,AAACsB,yCACD,0CAAA,1CAACpB;AAAD,AAAqB,OAACyC;GAAtB,SACA,0CAAA,1CAACzC;AAAD,AACE,IAAM0C,OAAK,iBAAAF,mBAAI,AAACG;AAAL,AAAA,oBAAAH;AAAAA;;AACI,OAACI,0BAAkB,AAACC;;;AADnC,AAEE,0DAAA,GAAA,2CAAA,yDAAA,mEAAA,KAAA,uFAAA,zTAACC,qJAEiBJ;GALtB;;GARL,6GAAA,1BAAmBrB","names":["rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","daiquiri.interpreter/interpret","frontend.mobile.footer/mobile-bar-command","command-handler","icon","e","frontend.util/stop","frontend.ui.icon","frontend.ui/icon-size","frontend.mobile.footer/seconds->minutes:seconds","seconds","minutes","cljs.core/quot","cljs.core/mod","frontend.util.format","frontend.mobile.footer/*record-start","cljs.core.atom","rum.core/build-defcs","attrs68933","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","frontend.mobile.footer/audio-record-cp","rum.core/reactive","state","comp","callback","rum.core/request-render","interval","js/setInterval","cljs.core.assoc","js/clearInterval","cljs.core.dissoc","cljs.core._EQ_","frontend.state/sub","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/reset!","frontend.mobile.record/start-recording","frontend.mobile.record/stop-recording","cljs.core/deref","frontend.mobile.footer/footer","or__4253__auto__","frontend.state/toggle-document-mode!","page","frontend.state/get-current-page","clojure.string/lower-case","frontend.date.journal_name","frontend.handler.editor/api-insert-new-block!"],"sourcesContent":["(ns frontend.mobile.footer\n  (:require [frontend.ui :as ui]\n            [rum.core :as rum]\n            [frontend.state :as state]\n            [frontend.mobile.record :as record]\n            [frontend.util :as util]\n            [frontend.handler.editor :as editor-handler]\n            [clojure.string :as string]\n            [frontend.date :as date]))\n\n(rum/defc mobile-bar-command [command-handler icon]\n  [:div\n   [:button.bottom-action\n    {:on-mouse-down (fn [e]\n                      (util/stop e)\n                      (command-handler))}\n    (ui/icon icon {:style {:fontSize ui/icon-size}})]])\n\n(defn seconds->minutes:seconds\n  [seconds]\n  (let [minutes (quot seconds 60)\n        seconds (mod seconds 60)]\n    (util/format \"%02d:%02d\" minutes seconds)))\n\n(def *record-start (atom -1))\n(rum/defcs audio-record-cp < rum/reactive\n  {:did-mount (fn [state]\n                (let [comp (:rum/react-component state)\n                      callback #(rum/request-render comp)\n                      interval (js/setInterval callback 1000)]\n                  (assoc state ::interval interval)))\n   :will-mount (fn [state]\n                 (js/clearInterval (::interval state))\n                 (dissoc state ::interval))}\n  [state]\n  (when (= (state/sub :editor/record-status) \"RECORDING\")\n    (swap! *record-start inc))\n  [:div.flex.flex-row\n   (if (= (state/sub :editor/record-status) \"NONE\")\n     (do\n       (reset! *record-start -1)\n       (mobile-bar-command #(record/start-recording) \"microphone\"))\n     [:div.flex.flex-row\n      (mobile-bar-command #(record/stop-recording) \"player-stop\")\n      [:div.timer.pl-2 (seconds->minutes:seconds @*record-start)]])])\n\n(rum/defc footer < rum/reactive\n  []\n  (when-not (or (state/sub :editor/editing?)\n                (state/sub :block/component-editing-mode?)\n                (state/sub :editor/editing-page-title?))\n    [:div.cp__footer.w-full.bottom-0.justify-between\n     (audio-record-cp)\n     (mobile-bar-command #(state/toggle-document-mode!) \"notes\")\n     (mobile-bar-command\n      #(let [page (or (state/get-current-page)\n                      (string/lower-case (date/journal-name)))]\n         (editor-handler/api-insert-new-block!\n                    \"\"\n                    {:page page\n                     :edit-block? true\n                     :replace-empty-target? true}))\n      \"edit\")]))\n"]}