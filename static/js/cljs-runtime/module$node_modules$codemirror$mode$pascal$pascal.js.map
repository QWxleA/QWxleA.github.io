{
"version":3,
"file":"module$node_modules$codemirror$mode$pascal$pascal.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/pascal/pascal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$pascal$pascal\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (ch == \"{\") {\n      state.tokenize = tokenCommentBraces;\n      return tokenCommentBraces(stream, state);\n    }\n    if (/[\\[\\]\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenCommentBraces(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == \"}\") {\n        state.tokenize = null;\n        break;\n      }\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","tokenBase","stream","state","ch","next","startOfLine","skipToEnd","tokenize","tokenString","eat","tokenComment","tokenCommentBraces","test","eatWhile","isOperatorChar","cur","current","keywords","propertyIsEnumerable","atoms","quote","escaped","end","maybeEnd","words","str","obj","split","i","length","startState","token","eatSpace","style","electricChars","defineMIME"]
}
