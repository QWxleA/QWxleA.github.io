{"version":3,"sources":["rewrite_cljc/node/fn.cljc"],"mappings":"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","names":["rewrite-cljc.node.fn/construct-fn","syms","vararg","body","cljs.core/List","cljs.core/vec","cljs.core.concat","rewrite-cljc.node.fn/sym-index","n","cljs.core._EQ_","cljs.core/re-matches","rewrite-cljc.interop/str->int","cljs.core.ex_info","rewrite-cljc.node.fn/symbol->gensym","sym-seq","vararg?","max-n","sym","cljs.core/Symbol","nm","cljs.core/name","clojure.string/starts-with?","i","cljs.core.subs","cljs.core/deref","cljs.core/not","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/max","cljs.core.nth","rewrite-cljc.node.fn/fn-walk","form","iter__5520__auto__","s__78304","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__78306","cljs.core/chunk-buffer","i__78305","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__78303","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.range","base","s","cljs.core.gensym","cljs.core.symbol","cljs.core.atom","p1__78301#","clojure.walk/prewalk","or__5043__auto__","cljs.core.take","this__5340__auto__","k__5341__auto__","this__5342__auto__","k78311","else__5343__auto__","G__78315","cljs.core/Keyword","children","cljs.core.get","__extmap","this__5360__auto__","f__5361__auto__","init__5362__auto__","cljs.core.reduce","ret__5363__auto__","p__78317","vec__78318","k__5364__auto__","v__5365__auto__","this__5355__auto__","writer__5356__auto__","opts__5357__auto__","pr-pair__5358__auto__","keyval__5359__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__78310","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5338__auto__","__meta","this__5335__auto__","__hash","this__5344__auto__","this__5336__auto__","h__5152__auto__","coll__5337__auto__","cljs.core/hash-unordered-coll","this78312","other78313","cljs.core/PROTOCOL_SENTINEL","this__5350__auto__","k__5351__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5347__auto__","G__78348","this__5348__auto__","k__5349__auto__","pred__78354","cljs.core/keyword-identical?","expr__78355","cljs.core.assoc","this__5353__auto__","cljs.core/MapEntry","this__5339__auto__","this__5345__auto__","entry__5346__auto__","cljs.core/vector?","cljs.core/-conj","rewrite-cljc.node.fn/FnNode","this__5386__auto__","writer__5387__auto__","cljs.core/-write","G__78314","extmap__5382__auto__","G__78397","cljs.core/record?","rewrite-cljc.node.fn/->FnNode","rewrite-cljc.node.fn/map->FnNode","_","rewrite-cljc.node.protocols/sexprs","rewrite-cljc.node.protocols/sum-lengths","rewrite-cljc.node.protocols/concat-strings","this","children'","rewrite-cljc.node.protocols/make-printable!","rewrite-cljc.node.fn/fn-node","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.fn\n  (:require [clojure.string :as string]\n            [clojure.walk :as w]\n            [rewrite-cljc.interop :as interop]\n            [rewrite-cljc.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Conversion\n\n(defn- construct-fn\n  \"Construct function form.\"\n  [syms vararg body]\n  (list\n    'fn*\n    (vec\n      (concat\n        syms\n        (when vararg\n          (list '& vararg))))\n    body))\n\n(defn- sym-index\n  \"Get index based on the substring following the parameter's `%`.\n   Zero means vararg.\"\n  [n]\n  (cond (= n \"&\") 0\n        (= n \"\") 1\n        (re-matches #\"\\d+\" n) (interop/str->int n)\n        :else (throw (ex-info \"arg literal must be %, %& or %integer.\" {}))))\n\n(defn- symbol->gensym\n  \"If symbol starting with `%`, convert to respective gensym.\"\n  [sym-seq vararg? max-n sym]\n  (when (symbol? sym)\n    (let [nm (name sym)]\n      (when (string/starts-with? nm \"%\")\n        (let [i (sym-index (subs nm 1))]\n          (when (and (= i 0) (not @vararg?))\n            (reset! vararg? true))\n          (swap! max-n max i)\n          (nth sym-seq i))))))\n\n(defn- fn-walk\n  \"Walk the form and create an expand function form.\"\n  [form]\n  (let [syms (for [i (range)\n                   :let [base (if (= i 0)\n                                \"rest__\"\n                                (str \"p\" i \"__\"))\n                         s (name (gensym base))]]\n               (symbol (str s \"#\")))\n        vararg? (atom false)\n        max-n (atom 0)\n        body (w/prewalk\n               #(or (symbol->gensym syms vararg? max-n %) %)\n               form)]\n    (construct-fn\n      (take @max-n (rest syms))\n      (when @vararg?\n        (first syms))\n      body)))\n\n;; ## Node\n\n(defrecord FnNode [children]\n  node/Node\n  (tag [_] :fn)\n  (printable-only? [_]\n    false)\n  (sexpr [_]\n    (fn-walk (node/sexprs children)))\n  (length [_]\n    (+ 3 (node/sum-lengths children)))\n  (string [_]\n    (str \"#(\" (node/concat-strings children) \")\"))\n\n  node/InnerNode\n  (inner? [_]\n    true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assoc this :children children'))\n  (leader-length [_]\n    2)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(node/make-printable! FnNode)\n\n;; ## Constructor\n\n(defn fn-node\n  \"Create node representing an anonymous function with `children`.\"\n  [children]\n  (->FnNode children))\n"]}