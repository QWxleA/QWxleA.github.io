{"version":3,"sources":["frontend/extensions/zotero/extractor.cljs"],"mappings":";AASA,iDAAA,jDAAMA,0GAAWC;AAAjB,AAAuB,OAAA,4FAAA,AAAA,mFAAIA;;AAE3B,GAAA,QAAAC,qCAAAC,gDAAAC,uDAAAC,iEAAAC;AAAA;AAAA,AAAA,+CAAA,iBAAAC,6BAAA,AAAAC,6CAAA,1IAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,uCAAA,0DAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,pNAAkBX;;;AAElB,oDAAA,pDAAMkB,gHAAcjB;AAApB,AACE,IAAMkB,QAAM,AAAA,qFAAA,AAAA,mFAAIlB;IACVmB,WAAS,gBAEK,AAACE,kBAAQ,WAAKC,7CACdE;AADS,AAAQ,wCAAA,jCAACD,+BAAiBD;8BAFnCJ,3BACA,AAACE;AAFrB,AAKE,oBAAMD;AAAN,AACE,OAACM,oBAAY,gCAAA,iBAAA,jDAACC,uBAAeP;;AAD/B;;;AAGJ,6CAAA,7CAAMQ,kGAAO3B;AAAb,AAAmB,OAAA,oFAAA,AAAA,mFAAIA;;AAEvB,gDAAA,hDAAM4B,wGAAU5B;AAAhB,AAAsB,OAAA,kFAAMA;;AAE5B,iDAAA,jDAAM6B,0GAAW7B;AAAjB,AACE,IAAM8B,aACA,iBAAAC,WAAM,AAAChC,+CAAUC;AAAjB,AAAA,QAAA+B;KAAA;AAEE,OAAA,4FAAA,AAAA,mFAAI/B;;;KAFN;AAIE,OAAA,0FAAA,AAAA,mFAAIA;;;KAJN;AAME,OAAA,iGAAA,AAAA,mFAAIA;;;;AAEJ,OAAC2B,2CAAM3B;;;;IACTgC,UAAQ,AAACf,kDAAajB;AAV5B,AAWE,oBAAI,iBAAAiC,oBAAK,2CAAA,3CAACC;AAAN,AAAA,oBAAAD;AACK,UAAK,AAACE,4BAAcH;;AADzBC;;;AAEF,oDAAK,2CAAA,3CAACC,8HAAqCF;;AAC3C,oDAAK,2CAAA,3CAACE,0KAAqCJ;;;AAEjD,+CAAA,/CAAMM,sGAASpC;AAAf,AACE,IAAMqC,WAAS,AAAA,4FAAA,AAAA,mFAAIrC;IACbsC,UACA,6CAAA,7CAACC,8EACK,AAACC,6CACA,AAACC,+CAAO,WAAKC;AAAL,AAAQ,oDAAA,7CAACC,sDAAW,AAAA,mGAAeD;IAC3C,AAACE,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAlC,4CAAAkC,eAAA,xEAAaE;gBAAb,AAAApC,4CAAAkC,eAAA,vEAAwBG;WAAxB,AAAArC,4CAAAkC,eAAA,lEAAkCI;AAAlC,AACE,OAACzB,oBAAY,kBAAIyB,MAAKA,KAAK,yDAAA,ZAAKF,4DAAeC;KACvDZ;AAPZ,AAQE,OAACc,iDAASb;;AAEd,4CAAA,5CAAMc,gGAAMpD;AAAZ,AACE,IAAMqD,OAGK,sDAAA,WAAAK,jEAACC;AAAD,AAAS,0DAAAD,iBAAA,pEAACE;qDADV,AAACN,6CAAK,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;UAAA,AAAA5C,4CAAA4C,eAAA,jEAAaC;AAAb,AAAoB,OAAChC,oBAAYgC;GADvC,AAAA,mFAAA,AAAA,mFAAIzD;IAGT6D,wJAAgB,iKAAA,jKAACD,mDAAa,2CAAA,3CAAC1B,nHACf,AAACU,4CAAInB,vHACL,AAACqC,+CAAO3B;AAN9B,AAOE,OAACgB,iDAAS,AAACY,+CAAOV,KAAKQ;;AAE3B,wDAAA,xDAAMG,wHAAehE;AAArB,AACE,IAAAiE,sOAAkBjE,jNACE,6BAAA,AAAA,iGAAA,AAAA,9HAACmE;AADrB,AAAA,oBAAAF;AAAA,WAAAA,PAASC;AAAT,AAEE,iEAAA,1DAACE,qHAAqBF;;AACtB,OAAA,oFAAA,AAAA,mFAAIlE;;;AAER,4DAAA,5DAAMqE,gIAAsB3B;AAA5B,uFAEO,AAACE,4CAAI,WAAA0B,9IAIL,OAAC/B,6CAy+ED,AAAAmF;AA7+EK,AAAA,IAAAnD,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AACE,GAAI,8EAAA,9EAACnD,+BAAiB,4CAAKmD;AAA3B,0FACGD,EAAE,AAACE,wGAAOD;;AADb,0FAEGD,EAAEC;;GAJZhC;;AAOP,+DAAA,/DAAMkC,sIAAyBlC;AAA/B,uFAEO,AAACoB,+CAAO,WAAAe,jJACR,OAACtC,6CAo+ED,AAAAmF;AAr+EQ,AAAA,IAAA5C,aAAAD;QAAA,AAAAL,4CAAAM,WAAA,IAAA,/DAAMC;QAAN,AAAAP,4CAAAM,WAAA,IAAA,/DAAQJ;AAAR,AAAY,qFAAA,9EAACnD,+BAAiB,4CAAKmD;GAD3ChC;;AAIP,AAAA,qDAAA,6DAAAsC,lHAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mFAAA,nFAAMD,8FACFE,MAAMC;AADV,AAEG,mGAAA,5FAACC,iFAAcF,MAAMC;;;AAFxB,CAAA,mFAAA,nFAAMH,8FAGFE,MAAMC,KAAKE;AAHf,AAIG,oBAAIA;AACF,iEAAA,1DAACnB,wHAAwBgB,MAAMC;;AAC/B,iEAAA,1DAACjB,uHAAuBgB,MAAMC;;;;AANnC,CAAA,6EAAA,7EAAMH;;AAAN,AAQA,kDAAA,lDAAMM,4GAAYxF;AAAlB,AACE,IAAMyF,OAAK,AAAA,mFAAA,AAAA,wFAAIzF;IACT0F,KAAK,AAAA,gFAAA,AAAA,wFAAI1F;IACT2F,UACA,6DAAA,3DAAI,kDAAA,lDAAChD,6CAAE8C,wBAEL,CAAA,sDAAeC;IACjBE,WAAS,AAAA,kFAAI5F;AANnB,AAOE,iEAAA,1DAACoE,0IAA0CuB,QAAQC;;AAEvD,gDAAA,hDAAMC,wGAAU7F;AAAhB,AACE,IAAMyF,OAAK,AAAA,mFAAA,AAAA,wFAAIzF;IACT0F,KAAK,AAAA,gFAAA,AAAA,wFAAI1F;IACT2F,UACA,EAAI,kDAAA,lDAAChD,6CAAE8C,cACL,CAAA,qDAAcC,cACd,CAAA,sDAAeA;IACjBE,WAAS,AAAA,kFAAI5F;AANnB,AAOE,iEAAA,1DAACoE,iJAAiDuB,QAAQC;;AAE9D,oDAAA,pDAAME,gHAAc9F;AAApB,AACE,6MAAA,zJAAK,iFAAA,jFAACsF,iGAA8B,AAACE,gDAAWxF,yDAE3C,iFAAA,jFAACsF,+FAA4B,AAACO,8CAAS7F;;AAE9C,kDAAA,lDAAM+F,4GAAY/F;AAAlB,AACE,IAAMyF,OAAQ,AAAC1F,+CAAUC;IACnBgG,SAAQ,AAACC,yCAAcR;IACvBnD,UAAQ,AAACF,6CAAQpC;IACjBqD,OAAQ,AAACD,0CAAKpD;IACdkG,QAAQ,AAACJ,kDAAa9F;IACtBkE,OAAQ,AAACF,sDAAchE;IACvBmG,wZAAYnG,zGACK,sBAAA,AAAA,tBAACoG,+GAAYJ,5KACb,AAACpB,1DACD,AAACP,rDACD,qSAAA,+GAAA,mEAAA,0DAAA,2DAAA,5kBAACgC,4VAAaH,mHACE5D,6DACHe,2DACAa,mEACK,0DAAA,1DAACE,qHAAqBqB,rzBACxC,s0BAAA,gHAAA,t7BAACa,xBACD,0hCAAA,2CAAA,sDAAA,3nCAACC,9CACD,2vCAAA,3vCAACF,izCAAa,AAACxE,+CAAU7B;AAjBhD,uFAmBO,AAAC8D,+CAAO,AAACtB,6CAAK,WAAKkC,9LACnB,oDAAA,7CAACnC;AADa,AAAQ,SAAI,AAACJ,4BAAcuC,QAAG,AAAC8B,uBAAO9B;qBADpDyB,lBACyDM;;AAGlE,AAAAzF,yFAAA,OAAA,WACGhB;AADH,AAEE,IAAM0G,YAAU,AAAA,mFAAA,AAAA,mFAAI1G;AAApB,AACE,6CAAA,tCAAC2G,mGAA4BD;;AAEjC,kEAAA,lEAAME,4IAA4BhB,SAASiB;AAA3C,AACE,iEAAA,1DAACzC,8IAA8CwB,SAAS,AAACjB,wGAAOkC;;AAElE,gEAAA,hEAAMC,wIAA0BC;AAAhC,AACE,iEAAA,1DAAC3C,wIAAwC,AAACO,wGAAOoC;;AAEnD,AAAA/F,yFAAA,aAAA,WACGhB;AADH,AAEE,IAAAgH,aAA+D,AAAA,mFAAIhH;IAAnEgH,iBAAA,AAAAjE,4BAAAiE;YAAA,AAAApG,4CAAAoG,eAAA,nEAAcC;UAAd,AAAArG,4CAAAoG,eAAA,jEAAoBE;gBAApB,AAAAtG,4CAAAoG,eAAA,vEAAwBG;WAAxB,AAAAvG,4CAAAoG,eAAA,lEAAkCD;mBAAlC,AAAAnG,4CAAAoG,eAAA,1EAAuCI;eAAvC,AAAAxG,4CAAAoG,eAAA,tEAAoDH;AAApD,AACE,IAAAQ,WAAMF;AAAN,AAAA,QAAAE;KAAA;AAEE,mMAAA,/IACC,AAAC/B,iFAAc2B,MAAM,AAACzB,gDAAWxF,wDAEjC,AAAC4G,gEAA2B,AAAChF,8CAAS5B,MAAM6G;;;KAL/C;AAOE,GAAI,uCAAA,vCAACS,kCAAoBP;AACvB,mMAAA,/IACC,AAACzB,iFAAc2B,MAAM,AAACzB,gDAAWxF,wDAEjC,AAAC8G,8DAAyBC;;AAC3B,IAAMA,WAAK,4BAAA,IAAA,hCAACrF,uBAAeqF;AAA3B,AACE,GAAI,0DAAA,1DAACpE,6CAAEyE;AACL,4HAAA,rHAAC9B,iFAAc2B,MAAM,CAAA,UAAeF;;AACpC,OAACzB,iFAAc2B,MAAM,CAAA,UAAeF;;;;;KAf5C;AAiBE,iJAAA,7FACC,AAACzB,iFAAc2B,MAAMC,sDAErB,AAACN,gEAA2B,AAAChF,8CAAS5B,MAAM6G;;;KApB/C;AAsBE,OAACvB,iFAAc2B,MAAMC;;;;AAtBvB,MAAA,KAAA/B,MAAA,CAAA,mEAAAkC;;;;AAwBJ,AAAArG,yFAAA,4DAAA,WACGhB;AADH,AAEE,IAAMuH,YAAW,AAAC1F,+CAAU7B;IACtBwH,aAAW,AAACzB,gDAAW/F;IACvByH,gBAAc,AAAA,oGAAA,AAAA,mFAAIzH;AAFxB,AAAA,kDAAA,wEAAA,2EAAA,rFAGeuH,0EACAC,iFACGC","names":["frontend.extensions.zotero.extractor/item-type","item","js/frontend","js/frontend.extensions","js/frontend.extensions.zotero","js/frontend.extensions.zotero.extractor","js/frontend.extensions.zotero.extractor.extract","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__67320","cljs.core/MultiFn","cljs.core.symbol","frontend.extensions.zotero.extractor/extract","frontend.extensions.zotero.extractor/citation-key","extra","citation","clojure.string/split-lines","cljs.core/filterv","s","clojure.string/includes?","cljs.core/first","clojure.string/trim","clojure.string/replace","frontend.extensions.zotero.extractor/title","frontend.extensions.zotero.extractor/item-key","frontend.extensions.zotero.extractor/page-name","page-title","G__67327","citekey","and__4251__auto__","frontend.extensions.zotero.setting/setting","clojure.string/blank?","frontend.extensions.zotero.extractor/authors","creators","authors","cljs.core.into","cljs.core.comp","cljs.core.filter","m","cljs.core._EQ_","cljs.core.map","p__67339","map__67340","cljs.core/--destructure-map","first-name","last-name","name","cljs.core.distinct","frontend.extensions.zotero.extractor/tags","tags","cljs.core.mapv","p__67349","map__67350","tag","p1__67344#","cljs.core.mapcat","clojure.string.split","extra-tags","cljs.core.remove","cljs.core.concat","frontend.extensions.zotero.extractor/date->journal","temp__5718__auto__","date","frontend.date/journal-name-s","frontend.util.format","frontend.extensions.zotero.extractor/wrap-in-doublequotes","p__67360","vec__67361","cljs.core.nth","k","v","cljs.core.pr_str","frontend.extensions.zotero.extractor/skip-newline-properties","p__67365","vec__67366","_","var_args","G__67384","frontend.extensions.zotero.extractor/markdown-link","js/Error","label","link","frontend.extensions.zotero.extractor.markdown_link","display?","frontend.extensions.zotero.extractor/local-link","type","id","library","item-key","frontend.extensions.zotero.extractor/web-link","frontend.extensions.zotero.extractor/zotero-links","frontend.extensions.zotero.extractor/properties","fields","frontend.extensions.zotero.schema/fields","links","data","cljs.core/select-keys","cljs.core.assoc","cljs.core.dissoc","clojure.set/rename-keys","cljs.core/empty?","cljs.core/second","note-html","frontend.extensions.html-parser/parse","frontend.extensions.zotero.extractor/zotero-imported-file-macro","filename","frontend.extensions.zotero.extractor/zotero-linked-file-macro","path","map__67444","title","url","link-mode","content-type","G__67446","clojure.string/starts-with?","page-name","properties","abstract-note","cljs.core/PersistentArrayMap"],"sourcesContent":["(ns frontend.extensions.zotero.extractor\n  (:require [clojure.set :refer [rename-keys]]\n            [clojure.string :as string]\n            [frontend.date :as date]\n            [frontend.extensions.html-parser :as html-parser]\n            [frontend.extensions.zotero.schema :as schema]\n            [frontend.extensions.zotero.setting :as setting]\n            [frontend.util :as util]))\n\n(defn item-type [item] (-> item :data :item-type))\n\n(defmulti extract item-type)\n\n(defn citation-key [item]\n  (let [extra (-> item :data :extra)\n        citation (->> extra\n                      (string/split-lines)\n                      (filterv (fn [s] (string/includes? s \"Citation Key: \")))\n                      first)]\n    (when citation\n      (string/trim (string/replace citation \"Citation Key: \" \"\")))))\n\n(defn title [item] (-> item :data :title))\n\n(defn item-key [item] (:key item))\n\n(defn page-name [item]\n  (let [page-title\n        (case (item-type item)\n          \"case\"\n          (-> item :data :case-name)\n          \"email\"\n          (-> item :data :subject)\n          \"statute\"\n          (-> item :data :name-of-act)\n          ;; default use title\n          (title item))\n        citekey (citation-key item)]\n    (if (and (setting/setting :prefer-citekey?)\n             (not (string/blank? citekey)))\n      (str (setting/setting :page-insert-prefix) citekey)\n      (str (setting/setting :page-insert-prefix) page-title))))\n\n(defn authors [item]\n  (let [creators (-> item :data :creators)\n        authors\n        (into []\n              (comp\n               (filter (fn [m] (= \"author\" (:creator-type m))))\n               (map (fn [{:keys [first-name last-name name]}]\n                      (string/trim (if name name (str first-name \" \" last-name))))))\n              creators)]\n    (distinct authors)))\n\n(defn tags [item]\n  (let [tags\n        (->> (-> item :data :tags)\n             (mapv (fn [{:keys [tag]}] (string/trim tag)))\n             (mapcat #(string/split % #\",\\s?\")))\n        extra-tags (->> (string/split (setting/setting :extra-tags) #\",\")\n                        (map string/trim)\n                        (remove string/blank?))]\n    (distinct (concat tags extra-tags))))\n\n(defn date->journal [item]\n  (if-let [date (-> item :meta :parsed-date\n                      (date/journal-name-s))]\n    (util/format \"[[%s]]\" date)\n    (-> item :data :date)))\n\n(defn wrap-in-doublequotes [m]\n  (->> m\n       (map (fn [[k v]]\n              (if (string/includes? (str v) \",\")\n                [k (pr-str v)]\n                [k v])))\n       (into (array-map))))\n\n(defn skip-newline-properties [m]\n  (->> m\n       (remove (fn [[_ v]] (string/includes? (str v) \"\\n\")))\n       (into (array-map))))\n\n(defn markdown-link\n  ([label link]\n   (markdown-link label link false))\n  ([label link display?]\n   (if display?\n     (util/format \"![%s](%s)\" label link)\n     (util/format \"[%s](%s)\" label link))))\n\n(defn local-link [item]\n  (let [type (-> item :library :type)\n        id   (-> item :library :id)\n        library\n        (if (= type \"user\")\n          \"library\"\n          (str \"groups/\" id))\n        item-key (-> item :key)]\n    (util/format \"zotero://select/%s/items/%s\" library item-key)))\n\n(defn web-link [item]\n  (let [type (-> item :library :type)\n        id   (-> item :library :id)\n        library\n        (if (= type \"user\")\n          (str \"users/\" id)\n          (str \"groups/\" id))\n        item-key (-> item :key)]\n    (util/format \"https://www.zotero.org/%s/items/%s\" library item-key)))\n\n(defn zotero-links [item]\n  (str (markdown-link \"Local library\" (local-link item))\n       \", \"\n       (markdown-link \"Web library\" (web-link item))))\n\n(defn properties [item]\n  (let [type    (item-type item)\n        fields  (schema/fields type)\n        authors (authors item)\n        tags    (tags item)\n        links   (zotero-links item)\n        date    (date->journal item)\n        data    (-> item :data\n                         (select-keys fields)\n                         (skip-newline-properties)\n                         (wrap-in-doublequotes)\n                         (assoc :links links\n                                :authors authors\n                                :tags tags\n                                :date date\n                                :item-type (util/format \"[[%s]]\" type))\n                         (dissoc :creators :abstract-note)\n                         (rename-keys {:title :original-title})\n                         (assoc :title (page-name item)))]\n    (->> data\n         (remove (comp (fn [v] (or (string/blank? v) (empty? v))) second))\n         (into {}))))\n\n(defmethod extract \"note\"\n  [item]\n  (let [note-html (-> item :data :note)]\n    (html-parser/parse :markdown note-html)))\n\n(defn zotero-imported-file-macro [item-key filename]\n  (util/format \"{{zotero-imported-file %s, %s}}\" item-key (pr-str filename)))\n\n(defn zotero-linked-file-macro [path]\n  (util/format \"{{zotero-linked-file %s}}\" (pr-str path)))\n\n(defmethod extract \"attachment\"\n  [item]\n  (let [{:keys [title url link-mode path content-type filename]} (-> item :data)]\n    (case link-mode\n      \"imported_file\"\n      (str\n       (markdown-link title (local-link item))\n       \" \"\n       (zotero-imported-file-macro (item-key item) filename))\n      \"linked_file\"\n      (if (string/starts-with? path \"attachments:\")\n        (str\n         (markdown-link title (local-link item))\n         \" \"\n         (zotero-linked-file-macro path))\n        (let [path (string/replace path \" \" \"%20\")]\n          (if (= content-type \"application/pdf\")\n            (markdown-link title (str \"file://\" path) true)\n            (markdown-link title (str \"file://\" path)))))\n      \"imported_url\"\n      (str\n       (markdown-link title url)\n       \" \"\n       (zotero-imported-file-macro (item-key item) filename))\n      \"linked_url\"\n      (markdown-link title url))))\n\n(defmethod extract :default\n  [item]\n  (let [page-name  (page-name item)\n        properties (properties item)\n        abstract-note (-> item :data :abstract-note)]\n    {:page-name  page-name\n     :properties properties\n     :abstract-note abstract-note}))\n"]}