shadow$provide.module$node_modules$chrono_node$dist$locales$nl$parsers$NLCasualTimeParser=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});const index_1=require("module$node_modules$chrono_node$dist$index");module=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const dayjs_1=global(require("module$node_modules$dayjs$dayjs_min")),
dayjs_2=require("module$node_modules$chrono_node$dist$utils$dayjs");class NLCasualTimeParser extends module.AbstractParserWithWordBoundaryChecking{innerPattern(){return/(deze)?\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\W|$)/i}innerExtract(context,match){const targetDate=dayjs_1.default(context.refDate),component=context.createParsingComponents();"deze"===match[1]&&(component.assign("day",context.refDate.getDate()),component.assign("month",context.refDate.getMonth()+
1),component.assign("year",context.refDate.getFullYear()));switch(match[2].toLowerCase()){case "namiddag":case "'s namiddags":component.imply("meridiem",index_1.Meridiem.PM);component.imply("hour",15);break;case "avond":case "'s avonds'":component.imply("meridiem",index_1.Meridiem.PM);component.imply("hour",20);break;case "middernacht":dayjs_2.assignTheNextDay(component,targetDate);component.imply("hour",0);component.imply("minute",0);component.imply("second",0);break;case "ochtend":case "'s ochtends":component.imply("meridiem",
index_1.Meridiem.AM);component.imply("hour",6);break;case "middag":case "'s middags":component.imply("meridiem",index_1.Meridiem.AM),component.imply("hour",12)}return component}}exports.default=NLCasualTimeParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$nl$parsers$NLCasualTimeParser.js.map
