{"version":3,"sources":["rewrite_cljc/parser/core.cljc"],"mappings":"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","names":["rewrite-cljc.parser.core/*delimiter*","rewrite-cljc.parser.core/dispatch","c","rewrite-cljc.reader/whitespace?","cljs.core._EQ_","cljs.core.get","js/rewrite-cljc","js/rewrite-cljc.parser","js/rewrite-cljc.parser.core","js/rewrite-cljc.parser.core.parse-next*","method-table__5639__auto__","cljs.core.atom","prefer-table__5640__auto__","method-cache__5641__auto__","cached-hierarchy__5642__auto__","hierarchy__5643__auto__","fexpr__78614","cljs.core/MultiFn","cljs.core.symbol","rewrite-cljc.parser.core/parse-next*","cljs.core.comp","rewrite-cljc.reader/peek","rewrite-cljc.parser.core/parse-next","reader","rewrite-cljc.reader/read-with-meta","rewrite-cljc.parser.core/parse-delim","delimiter","rewrite-cljc.reader/ignore","*delimiter*-orig-val__78617","*delimiter*-temp-val__78618","p1__78615#","rewrite-cljc.reader/read-repeatedly","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","rewrite-cljc.parser.core/parse-printables","p__78624","vec__78625","cljs.core.nth","seq78619","G__78620","cljs.core/first","cljs.core/next","G__78621","G__78622","self__5751__auto__","node-tag","n","ignore?","rewrite-cljc.reader/read-n","cljs.core/complement","rewrite-cljc.node/printable-only?","rewrite-cljc.parser.token/parse-token","rewrite_cljc.reader.throw_reader","rewrite-cljc.reader/throw-reader","rewrite-cljc.parser.whitespace/parse-whitespace","rewrite-cljc.node/comment-node","rewrite-cljc.reader/read-include-linebreak","rewrite-cljc.parser.keyword/parse-keyword","rewrite-cljc.parser.string/parse-string","rewrite_cljc.node.meta_node","rewrite-cljc.parser.core/read-symbolic-value","rewrite-cljc.reader/unread","G__78637","rewrite-cljc.node/set-node","rewrite-cljc.node/fn-node","rewrite-cljc.node/regex-node","rewrite-cljc.parser.string/parse-regex","rewrite_cljc.node.raw_meta_node","rewrite_cljc.parser.core.parse_printables","rewrite-cljc.node/var-node","rewrite-cljc.node/eval-node","rewrite-cljc.node/uneval-node","rewrite-cljc.parser.namespaced-map/parse-namespaced-map","rewrite-cljc.reader/next","rewrite_cljc.node.reader_macro_node","read1","cljs.core/cons","G__78643","rewrite_cljc.node.token_node","rewrite-cljc.node/deref-node","rewrite-cljc.node/quote-node","rewrite-cljc.node/syntax-quote-node","rewrite-cljc.node/unquote-splicing-node","rewrite-cljc.node/unquote-node","rewrite-cljc.node/list-node","rewrite-cljc.node/vector-node","rewrite-cljc.node/map-node"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.parser.core\n  (:require [rewrite-cljc.node :as node]\n            [rewrite-cljc.parser.keyword :refer [parse-keyword]]\n            [rewrite-cljc.parser.namespaced-map :refer [parse-namespaced-map]]\n            [rewrite-cljc.parser.string :refer [parse-string parse-regex]]\n            [rewrite-cljc.parser.token :refer [parse-token]]\n            [rewrite-cljc.parser.whitespace :refer [parse-whitespace]]\n            [rewrite-cljc.reader :as reader] ))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Base Parser\n\n(def ^:dynamic ^:private *delimiter*\n  nil)\n\n(defn- dispatch\n  [c]\n  (cond (nil? c)               :eof\n        (reader/whitespace? c) :whitespace\n        (= c *delimiter*)      :delimiter\n        :else (get {\\^ :meta      \\# :sharp\n                    \\( :list      \\[ :vector    \\{ :map\n                    \\} :unmatched \\] :unmatched \\) :unmatched\n                    \\~ :unquote   \\' :quote     \\` :syntax-quote\n                    \\; :comment   \\@ :deref     \\\" :string\n                    \\: :keyword}\n                   c :token)))\n\n(defmulti ^:private parse-next*\n  (comp #'dispatch reader/peek))\n\n(defn parse-next\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/read-with-meta reader parse-next*))\n\n;; # Parser Helpers\n\n(defn- parse-delim\n  [#?(:cljs ^not-native reader :default reader) delimiter]\n  (reader/ignore reader)\n  (->> #(binding [*delimiter* delimiter]\n          (parse-next %))\n       (reader/read-repeatedly reader)))\n\n(defn- parse-printables\n  [#?(:cljs ^not-native reader :default reader) node-tag n & [ignore?]]\n  (when ignore?\n    (reader/ignore reader))\n  (reader/read-n\n    reader\n    node-tag\n    parse-next\n    (complement node/printable-only?)\n    n))\n\n;; ## Parser Functions\n\n;; ### Base\n\n(defmethod parse-next* :token\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-token reader))\n\n(defmethod parse-next* :delimiter\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader))\n\n(defmethod parse-next* :unmatched\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/throw-reader\n   reader\n   \"Unmatched delimiter: %s\"\n   (reader/peek reader)))\n\n(defmethod parse-next* :eof\n  [#?(:cljs ^not-native reader :default reader)]\n  (when *delimiter*\n    (reader/throw-reader reader \"Unexpected EOF.\")))\n\n;; ### Whitespace\n\n(defmethod parse-next* :whitespace\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-whitespace reader))\n\n(defmethod parse-next* :comment\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (node/comment-node (reader/read-include-linebreak reader)))\n\n;; ### Special Values\n\n(defmethod parse-next* :keyword\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-keyword reader))\n\n(defmethod parse-next* :string\n  [#?(:cljs ^not-native reader :default reader)]\n  (parse-string reader))\n\n;; ### Meta\n\n(defmethod parse-next* :meta\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (node/meta-node (parse-printables reader :meta 2)))\n\n\n;; ### Reader Specialities\n\n(defn- read-symbolic-value [reader]\n  (reader/unread reader \\#)\n  (parse-token reader))\n\n(defmethod parse-next* :sharp\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (case (reader/peek reader)\n    nil (reader/throw-reader reader \"Unexpected EOF.\")\n    \\# (read-symbolic-value reader)\n    \\{ (node/set-node (parse-delim reader \\}))\n    \\( (node/fn-node (parse-delim reader \\)))\n    \\\" (node/regex-node (parse-regex reader))\n    \\^ (node/raw-meta-node (parse-printables reader :meta 2 true))\n    \\' (node/var-node (parse-printables reader :var 1 true))\n    \\= (node/eval-node (parse-printables reader :eval 1 true))\n    \\_ (node/uneval-node (parse-printables reader :uneval 1 true))\n    \\: (parse-namespaced-map reader parse-next)\n    \\? (do\n         ;; we need to examine the next character, so consume one (known \\?)\n         (reader/next reader)\n         ;; we will always have a reader-macro-node as the result\n         (node/reader-macro-node\n          (let [read1 (fn [] (parse-printables reader :reader-macro 1))]\n            (cons (case (reader/peek reader)\n                    ;; the easy case, just emit a token\n                    \\( (node/token-node (symbol \"?\"))\n\n                    ;; the harder case, match \\@, consume it and emit the token\n                    \\@ (do (reader/next reader)\n                           (node/token-node (symbol \"?@\")))\n\n                    ;; otherwise no idea what we're reading but its \\? prefixed\n                    (do (reader/unread reader \\?)\n                        (first (read1))))\n                  (read1)))))\n    (node/reader-macro-node (parse-printables reader :reader-macro 2))))\n\n(defmethod parse-next* :deref\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/deref-node (parse-printables reader :deref 1 true)))\n\n;; ## Quotes\n\n(defmethod parse-next* :quote\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/quote-node (parse-printables reader :quote 1 true)))\n\n(defmethod parse-next* :syntax-quote\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/syntax-quote-node (parse-printables reader :syntax-quote 1 true)))\n\n(defmethod parse-next* :unquote\n  [#?(:cljs ^not-native reader :default reader)]\n  (reader/ignore reader)\n  (let [c (reader/peek reader)]\n    (if (= c \\@)\n      (node/unquote-splicing-node\n        (parse-printables reader :unquote 1 true))\n      (node/unquote-node\n        (parse-printables reader :unquote 1)))))\n\n;; ### Seqs\n\n(defmethod parse-next* :list\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/list-node (parse-delim reader \\))))\n\n(defmethod parse-next* :vector\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/vector-node (parse-delim reader \\])))\n\n(defmethod parse-next* :map\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/map-node (parse-delim reader \\})))\n"]}