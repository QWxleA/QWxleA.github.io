shadow$provide.module$node_modules$$sentry$utils$dist$promisebuffer=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var error_1=require("module$node_modules$$sentry$utils$dist$error"),syncpromise_1=require("module$node_modules$$sentry$utils$dist$syncpromise");exports.makePromiseBuffer=function(limit){var buffer=[];return{$:buffer,add:function(taskProducer){if(!(void 0===limit||buffer.length<limit))return syncpromise_1.rejectedSyncPromise(new error_1.SentryError("Not adding Promise due to buffer limit reached."));
var task=taskProducer();-1===buffer.indexOf(task)&&buffer.push(task);void task.then(function(){return buffer.splice(buffer.indexOf(task),1)[0]}).then(null,function(){return buffer.splice(buffer.indexOf(task),1)[0].then(null,function(){})});return task},drain:function(timeout){return new syncpromise_1.SyncPromise(function(resolve,reject){var counter=buffer.length;if(!counter)return resolve(!0);var capturedSetTimeout=setTimeout(function(){timeout&&0<timeout&&resolve(!1)},timeout);buffer.forEach(function(item){void syncpromise_1.resolvedSyncPromise(item).then(function(){--counter||
(clearTimeout(capturedSetTimeout),resolve(!0))},reject)})})}}}}
//# sourceMappingURL=module$node_modules$$sentry$utils$dist$promisebuffer.js.map
