{
"version":3,
"file":"module$node_modules$codemirror$mode$mumps$mumps.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/mumps/mumps.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$mumps$mumps\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n  This MUMPS Language script was constructed using vbscript.js as a template.\n*/\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"mumps\", function() {\n    function wordRegexp(words) {\n      return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\'\\\\[\\\\]]\");\n    var doubleOperators = new RegExp(\"^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))\");\n    var singleDelimiters = new RegExp(\"^[\\\\.,:]\");\n    var brackets = new RegExp(\"[()]\");\n    var identifiers = new RegExp(\"^[%A-Za-z][A-Za-z0-9]*\");\n    var commandKeywords = [\"break\",\"close\",\"do\",\"else\",\"for\",\"goto\", \"halt\", \"hang\", \"if\", \"job\",\"kill\",\"lock\",\"merge\",\"new\",\"open\", \"quit\", \"read\", \"set\", \"tcommit\", \"trollback\", \"tstart\", \"use\", \"view\", \"write\", \"xecute\", \"b\",\"c\",\"d\",\"e\",\"f\",\"g\", \"h\", \"i\", \"j\",\"k\",\"l\",\"m\",\"n\",\"o\", \"q\", \"r\", \"s\", \"tc\", \"tro\", \"ts\", \"u\", \"v\", \"w\", \"x\"];\n    // The following list includes instrinsic functions _and_ special variables\n    var intrinsicFuncsWords = [\"\\\\$ascii\", \"\\\\$char\", \"\\\\$data\", \"\\\\$ecode\", \"\\\\$estack\", \"\\\\$etrap\", \"\\\\$extract\", \"\\\\$find\", \"\\\\$fnumber\", \"\\\\$get\", \"\\\\$horolog\", \"\\\\$io\", \"\\\\$increment\", \"\\\\$job\", \"\\\\$justify\", \"\\\\$length\", \"\\\\$name\", \"\\\\$next\", \"\\\\$order\", \"\\\\$piece\", \"\\\\$qlength\", \"\\\\$qsubscript\", \"\\\\$query\", \"\\\\$quit\", \"\\\\$random\", \"\\\\$reverse\", \"\\\\$select\", \"\\\\$stack\", \"\\\\$test\", \"\\\\$text\", \"\\\\$translate\", \"\\\\$view\", \"\\\\$x\", \"\\\\$y\", \"\\\\$a\", \"\\\\$c\", \"\\\\$d\", \"\\\\$e\", \"\\\\$ec\", \"\\\\$es\", \"\\\\$et\", \"\\\\$f\", \"\\\\$fn\", \"\\\\$g\", \"\\\\$h\", \"\\\\$i\", \"\\\\$j\", \"\\\\$l\", \"\\\\$n\", \"\\\\$na\", \"\\\\$o\", \"\\\\$p\", \"\\\\$q\", \"\\\\$ql\", \"\\\\$qs\", \"\\\\$r\", \"\\\\$re\", \"\\\\$s\", \"\\\\$st\", \"\\\\$t\", \"\\\\$tr\", \"\\\\$v\", \"\\\\$z\"];\n    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n    var command = wordRegexp(commandKeywords);\n\n    function tokenBase(stream, state) {\n      if (stream.sol()) {\n        state.label = true;\n        state.commandMode = 0;\n      }\n\n      // The <space> character has meaning in MUMPS. Ignoring consecutive\n      // spaces would interfere with interpreting whether the next non-space\n      // character belongs to the command or argument context.\n\n      // Examine each character and update a mode variable whose interpretation is:\n      //   >0 => command    0 => argument    <0 => command post-conditional\n      var ch = stream.peek();\n\n      if (ch == \" \" || ch == \"\\t\") { // Pre-process <space>\n        state.label = false;\n        if (state.commandMode == 0)\n          state.commandMode = 1;\n        else if ((state.commandMode < 0) || (state.commandMode == 2))\n          state.commandMode = 0;\n      } else if ((ch != \".\") && (state.commandMode > 0)) {\n        if (ch == \":\")\n          state.commandMode = -1;   // SIS - Command post-conditional\n        else\n          state.commandMode = 2;\n      }\n\n      // Do not color parameter list as line tag\n      if ((ch === \"(\") || (ch === \"\\u0009\"))\n        state.label = false;\n\n      // MUMPS comment starts with \";\"\n      if (ch === \";\") {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n        return \"number\";\n\n      // Handle Strings\n      if (ch == '\"') {\n        if (stream.skipTo('\"')) {\n          stream.next();\n          return \"string\";\n        } else {\n          stream.skipToEnd();\n          return \"error\";\n        }\n      }\n\n      // Handle operators and Delimiters\n      if (stream.match(doubleOperators) || stream.match(singleOperators))\n        return \"operator\";\n\n      // Prevents leading \".\" in DO block from falling through to error\n      if (stream.match(singleDelimiters))\n        return null;\n\n      if (brackets.test(ch)) {\n        stream.next();\n        return \"bracket\";\n      }\n\n      if (state.commandMode > 0 && stream.match(command))\n        return \"variable-2\";\n\n      if (stream.match(intrinsicFuncs))\n        return \"builtin\";\n\n      if (stream.match(identifiers))\n        return \"variable\";\n\n      // Detect dollar-sign when not a documented intrinsic function\n      // \"^\" may introduce a GVN or SSVN - Color same as function\n      if (ch === \"$\" || ch === \"^\") {\n        stream.next();\n        return \"builtin\";\n      }\n\n      // MUMPS Indirection\n      if (ch === \"@\") {\n        stream.next();\n        return \"string-2\";\n      }\n\n      if (/[\\w%]/.test(ch)) {\n        stream.eatWhile(/[\\w%]/);\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return \"error\";\n    }\n\n    return {\n      startState: function() {\n        return {\n          label: false,\n          commandMode: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var style = tokenBase(stream, state);\n        if (state.label) return \"tag\";\n        return style;\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-mumps\", \"mumps\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","wordRegexp","words","RegExp","join","tokenBase","stream","state","sol","label","commandMode","ch","peek","skipToEnd","match","skipTo","next","doubleOperators","singleOperators","singleDelimiters","brackets","test","command","intrinsicFuncs","identifiers","eatWhile","intrinsicFuncsWords","commandKeywords","startState","token","style","defineMIME"]
}
