{"version":3,"sources":["frontend/namespaces.cljc"],"mappings":"","names":[],"sourcesContent":["(ns frontend.namespaces\n  #?(:cljs (:require-macros [frontend.namespaces])))\n\n;; copy from https://github.com/clj-commons/potemkin/issues/31#issuecomment-110689951\n(defmacro import-def\n  \"import a single fn or var\n   (import-def a b) => (def b a/b)\n  \"\n  [from-ns def-name]\n  (let [from-sym# (symbol (str from-ns) (str def-name))]\n    `(def ~def-name ~from-sym#)))\n\n(defmacro import-vars\n  \"import multiple defs from multiple namespaces\n   works for vars and fns. not macros.\n   (same syntax as potemkin.namespaces/import-vars)\n   (import-vars\n     [m.n.ns1 a b]\n     [x.y.ns2 d e f]) =>\n   (def a m.n.ns1/a)\n   (def b m.n.ns1/b)\n    ...\n   (def d m.n.ns2/d)\n    ... etc\n  \"\n  [& imports]\n  (let [expanded-imports (for [[from-ns & defs] imports\n                               d defs]\n                           `(import-def ~from-ns ~d))]\n    `(do ~@expanded-imports)))\n\n;; FIXME:\n#_(defmacro import-ns\n  \"import all the public defs from multiple namespaces\n   works for vars and fns. not macros.\n  (import-ns\n     m.n.ns1\n     x.y.ns2) =>\n   (def a m.n.ns1/a)\n   (def b m.n.ns1/b)\n    ...\n   (def d m.n.ns2/d)\n    ... etc\n  \"\n  [& namespaces]\n  (let [expanded-imports (for [from-ns namespaces\n                               d ((ns-resolve 'cljs.analyzer.api 'ns-publics) from-ns)]\n                           `(import-def ~from-ns ~d))]\n    `(do ~@expanded-imports)))\n"]}