{"version":3,"sources":["rewrite_cljc/zip/move.cljc"],"mappings":";AAOA;;;8BAAA,9BAAMA,oEAEHC;AAFH,AAGE,IAAAC,WAAQD;IAARC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,sCAAAA,tCAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,iFAAAA,1EAAqBE;;;AAEvB;;;6BAAA,7BAAMC,kEAEHJ;AAFH,AAGE,IAAAK,WAAQL;IAARK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qCAAAA,rCAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,wDAAAA,jDAAoBE;;;AAEtB;;;6BAAA,7BAAMC,kEAEHR;AAFH,AAGE,IAAAS,WAAQT;IAARS,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qCAAAA,rCAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,iFAAAA,1EAAoBN;;;AAEtB;;;2BAAA,3BAAMQ,8DAEHX;AAFH,AAGE,IAAAY,WAAQZ;IAARY,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,mCAAAA,nCAAaC;AAAb,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,wDAAAA,jDAAkBL;;;AAEpB;;;6BAAA,7BAAMO,kEAEHd;AAFH,AAGE,oBAAMA;AAAN,AACE,IAAAe,mBAAI,iBAAAC,WAAShB;IAATgB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qCAAAA,rCACSC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAES,sHAAAA,/GAACb,0EAAmBc;;;AAFjC,AAAA,oBAAAF;AAAAA;;AAGI,8EAAA,8FAAA,rKAACG,kDAAUlB,KAAKmB;;;AAJtB;;;AAMF;;;mCAAA,nCAAMC,8EAEHpB;AAFH,AAGE,IAAAe,mBAAI,AAACM,cAAIrB;AAAT,AAAA,GAAAe;AAAAA;;AAAA,IAAAA,uBACI,AAACO,2CAAOtB;AADZ,AAAA,oBAAAe;AAAAA;;AAEI,OAAA,4HAAQ,AAACQ,eAAKvB;;;;AAEpB;;;yCAAA,zCAAMwB,0FAEHxB;AAFH,AAGE,kIAAA,1HAAM,AAACG,0EAAmB,AAACD,sCAAQF;;AAErC;;;wCAAA,xCAAMyB,wFAEHzB;AAFH,AAGE,wGAAA,hGAAM,AAACO,iDAAwB,AAACD,qCAAON;;AAEzC;;;6BAAA,7BAAM0B,kEAEH1B;AAFH,AAGE,IAAA2B,WAAS3B;IAAT2B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,qCAAAA,rCACSC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAES,sHAAAA,/GAACxB,0EAAmByB;;;AAE/B;;;iCAAA,jCAAMC,0EAEH7B;AAFH,AAGE,IAAA8B,WAAQ9B;IAAR8B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,yCAAAA,zCACQC;AADR,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,iFAAAA,1EAEQ3B;;;AAEV;;;kCAAA,lCAAM6B,4EAEHhC;AAFH,AAGE,IAAAiC,WAAQjC;IAARiC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,0CAAAA,1CACQC;AADR,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,wDAAAA,jDAEQ1B","names":["rewrite-cljc.zip.move/right","zloc","G__92938","rewrite-cljc.custom-zipper.core/right","rewrite_cljc.zip.whitespace.skip_whitespace","rewrite-cljc.zip.move/left","G__92939","rewrite-cljc.custom-zipper.core/left","rewrite-cljc.zip.whitespace/skip-whitespace-left","rewrite-cljc.zip.move/down","G__92940","rewrite-cljc.custom-zipper.core/down","rewrite-cljc.zip.move/up","G__92941","rewrite-cljc.custom-zipper.core/up","rewrite-cljc.zip.move/next","or__4253__auto__","G__92942","rewrite-cljc.custom-zipper.core/next","cljs.core.vary_meta","cljs.core/assoc","rewrite-cljc.zip.move/end?","cljs.core/not","rewrite-cljc.custom-zipper.core/end?","cljs.core/meta","rewrite-cljc.zip.move/rightmost?","rewrite-cljc.zip.move/leftmost?","rewrite-cljc.zip.move/prev","G__92944","rewrite-cljc.custom-zipper.core/prev","rewrite-cljc.zip.move/leftmost","G__92946","rewrite-cljc.custom-zipper.core/leftmost","rewrite-cljc.zip.move/rightmost","G__92947","rewrite-cljc.custom-zipper.core/rightmost"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.move\n  (:refer-clojure :exclude [next])\n  (:require [rewrite-cljc.custom-zipper.core :as z]\n            [rewrite-cljc.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn right\n  \"Return zipper with location moved right to next non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/right ws/skip-whitespace))\n\n(defn left\n  \"Return zipper with location moved left to next non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/left ws/skip-whitespace-left))\n\n(defn down\n  \"Return zipper with location moved down to next non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/down ws/skip-whitespace))\n\n(defn up\n  \"Return zipper with location moved up to next non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/up ws/skip-whitespace-left))\n\n(defn next\n  \"Return zipper with location moved to the next depth-first non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (when zloc\n    (or (some->> zloc\n                 z/next\n                 (ws/skip-whitespace z/next))\n        (vary-meta zloc assoc ::end? true))))\n\n(defn end?\n  \"Return true if `zloc` is at end of depth-first traversal.\"\n  [zloc]\n  (or (not zloc)\n      (z/end? zloc)\n      (::end? (meta zloc))))\n\n(defn rightmost?\n  \"Return true if at rightmost non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (nil? (ws/skip-whitespace (z/right zloc))))\n\n(defn leftmost?\n  \"Return true if at leftmost non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (nil? (ws/skip-whitespace-left (z/left zloc))))\n\n(defn prev\n  \"Return zipper with location moved to the previous depth-first non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some->> zloc\n           z/prev\n           (ws/skip-whitespace z/prev)))\n\n(defn leftmost\n  \"Return zipper with location moved to the leftmost non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some-> zloc\n          z/leftmost\n          ws/skip-whitespace))\n\n(defn rightmost\n  \"Return zipper with location moved to the rightmost non-whitespace/non-comment node in `zloc`.\"\n  [zloc]\n  (some-> zloc\n          z/rightmost\n          ws/skip-whitespace-left))\n"]}