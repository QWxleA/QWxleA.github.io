{"version":3,"sources":["frontend/handler/editor.cljs"],"mappings":";;;;;AA6DA,GAAA,QAAAA,qCAAAC,6CAAAC,oDAAAC;AAAA;AAAA,AAAA,AAASC,uDAAkB,6CAAA,7CAACC;;AAC5B,GAAA,QAAAL,qCAAAC,6CAAAC,oDAAAI;AAAA;AAAA,AAAA,AAASC,wDAAyB,6CAAA,7CAACF;;AACnC,GAAA,QAAAL,qCAAAC,6CAAAC,oDAAAM;AAAA;AAAA,AAAA,AAASC,8CAAe,6CAAA,7CAACJ;;AAEzB,mDAAA,nDAAOK;AAAP,AAEE,IAAAC,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAM,AAAA,6FAAaA;AAAnB,AACE,IAAAD,yBAAmB,AAACI;AAApB,AAAA,oBAAAJ;AAAA,AAAA,cAAAA,VAAWG;AAAX,AACE,IAAAH,yBAAiB,AAACM,oBAAgBH;AAAlC,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAME,kBAAgB,AAACC,kCAAyBH;IAC1CI,gBAAc,AAACC,gCAAuBL;IACtCM,QAAM,0DAAA,1DAACC,oDAASP;IAChBQ,YAAU,kFAAA,kFAAA,lKAAM,AAACC,gDAAKP,gBAAgBE,gBAC1B,AAACM,6CAAKJ,MAAMJ,gBAAgBE;IACxCF,sBAAgB,CAAGA,kBACA,AAACS,gBAAM,mDAAA,WAAAC,9DAACC;AAAD,AAAa,oDAAA,IAAAD,jDAACE;GAASN;IACjDJ,oBAAc,CAAGA,gBACA,AAACO,gBAAM,mDAAA,WAAAI,9DAACF;AAAD,AAAa,oDAAA,IAAAE,jDAACD;GAAS,AAACE,kBAAQR;AAR9D,AAAA,kDAAA,+FAAA,wFAAA,5GASoBN,0FACFE,gFACJ,iBAAAa,WAAQT;AAAR,AAAA,GAAA,CAAAS,YAAA;AAAA;;AAAA,2BAAAA,pBACQC;;KAZtB,kKAAA,4DAAA,4DAAA,mEAAA,nSAaW,AAAA,iGAAetB,6DAChBU,4DACAV,iEACEE,8DACFE;;AAlBZ;;;AADF;;;AADF;;;AADF;;;AAuBF,4CAAA,5CAAOmB,gGACJC;AADH,AAEE,IAAAzB,qBAAa,AAACD;AAAd,AAAA,oBAAAC;AAAA,AAAA,QAAAA,JAAW0B;AAAX,AACE,IAAAC,aAAmFD;IAAnFC,iBAAA,AAAAC,4BAAAD;sBAAA,AAAAE,4CAAAF,eAAA,7EAAcpB;oBAAd,AAAAsB,4CAAAF,eAAA,3EAA8BlB;aAA9B,AAAAoB,4CAAAF,eAAA,pEAA4CG;gBAA5C,AAAAD,4CAAAF,eAAA,vEAAmDd;YAAnD,AAAAgB,4CAAAF,eAAA,nEAA6DhB;cAA7D,AAAAkB,4CAAAF,eAAA,rEAAmExB;YAAnE,AAAA0B,4CAAAF,eAAA,nEAA2EtB;IACrE0B,UAAQ,CAACN,2CAAAA,mDAAAA,VAAWK,+BAAAA;IACpBE,gBAAc,AAAChB,gBAAMe;IACrBE,iBAAe,AAAClB,6CAAKJ,MAAM,iBAAAuB,kBAAA;IAAAC,kBAAO,CAAG5B,kBAAgByB;AAA1B,AAAA,SAAAE,kBAAAC,mBAAAD,kBAAAC;KAA0C5B;IACrE6B,iBAAe,AAACrB,6CAAKJ,MAAMF,cAAc,iBAAA4B,kBAAK,AAACrB,gBAAML;IAAZ2B,kBAAmB,CAAG7B,gBAAcuB;AAApC,AAAA,SAAAK,kBAAAC,mBAAAD,kBAAAC;;IACzCC,yBAAiB,AAACpB,oDAAEY,QAAQE,iEAAeG;IAC3CI,SAAO,EAAID,wBACF,mDAAA,nDAACxB,6CAAKJ,UAAQ,CAAGJ,kBAAgByB,gBACjC,mDAAA,nDAACjB,6CAAKJ,UAAQJ;IACvBkC,UAAQ,EAAIF,wBACF,AAACxB,6CAAKJ,MAAM,CAAGF,gBAAcuB,gBAC7B,AAACjB,6CAAKJ,MAAMF;IACtBiC,cAAY,iBAAAC,WAAQ9B;AAAR,AAAA,GACE,GAAK0B;AACL,OAAA,WAAAK;AAAA,AAAE,yGAAAA,rDAAKb,mHAAUA;GAAjBY;;AAFFA;;;IAGZE,YAAU,CAAKL,mDAAOE,aAAYD;AAfxC,AAgBE,AAACK,oEAAwB3C,QAAQ0C;;AACjC,GACEN;AAAiB,OAACQ,sCAAwB1C,MAAM,CAAGE,kBAAgByB,eAAe,CAAGvB,gBAAcuB;;AADrG,oBAEEnB;AAAU,OAACmC,oCAAsB3C,MAAM,CAAGI,gBAAcuB;;AAF1D,AAGQ,OAACe,sCAAwB1C,MAAM,CAAGE,kBAAgByB,eAAe,CAAGvB,gBAAcuB;;;;;AArB9F;;;AAuBF,4CAAA,5CAAMiB;AAAN,AACE,OAACzB,0CAAa0B;;AAEhB,+CAAA,/CAAMC;AAAN,AACE,OAAC3B,0CAAa4B;;AAEhB,iDAAA,jDAAMC;AAAN,AACE,IAAArD,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAM6B,SAAO,AAAA,iGAAe7B;AAA5B,AACE,iDAAA,1CAACuB;AAAD,AAAe,OAAC8B,8BAAqBxB;;;AAFzC;;;AAIF,sDAAA,tDAAMyB;AAAN,AACE,OAAC/B,0CAAagC;;AAEhB,AAAA,iDAAA,yDAAAC,1GAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAAMD;AAAN,AAEG,oFAAA,7EAACE;;;AAFJ,CAAA,+EAAA,/EAAMF,0FAGFG;AAHJ,AAIG,IAAA9D,qBAAa,AAACD;AAAd,AAAA,oBAAAC;AAAA,AAAA,QAAAA,JAAW0B;AAAX,AACE,IAAAqC,aAAmFrC;IAAnFqC,iBAAA,AAAAnC,4BAAAmC;sBAAA,AAAAlC,4CAAAkC,eAAA,7EAAcxD;oBAAd,AAAAsB,4CAAAkC,eAAA,3EAA8BtD;aAA9B,AAAAoB,4CAAAkC,eAAA,pEAA4CjC;gBAA5C,AAAAD,4CAAAkC,eAAA,vEAAmDlD;YAAnD,AAAAgB,4CAAAkC,eAAA,nEAA6DpD;cAA7D,AAAAkB,4CAAAkC,eAAA,rEAAmE5D;YAAnE,AAAA0B,4CAAAkC,eAAA,nEAA2E1D;IACrE6D,UAAQ,AAACC,yBAAW9D;IACpB+D,yBAAiB,AAACjD,6CAAEZ,gBAAgBE;IACpC4D,wBAAgB,iBAAAC,oBAAKzD;AAAL,AAAA,oBAAAyD;AAAe,SAAI,2CAAA,3CAACC,iCAAkB1D,0BACnB,2CAAA,3CAAC0D,iCAAkB1D;;AADtCyD;;;IAHtBN,aAK4B,iFAAA,+EAAA,6FAAA,3PACEI,wBACA,AAACM,+CAAsC5C,0BAEvCgC,MACA,AAACa,gCAAuB7C,OAAOjB,UAAUiD,wBAEzCO,uBACA,AAACO,kCAAyB9C,OAAOjB,WAGjC,AAACgE,mCAA0B/C,OAAOjB;;cAhBhE,AAAAoD,4CAAAD,WAAA,IAAA,rEAKOQ;kBALP,AAAAP,4CAAAD,WAAA,IAAA,zEAKeS;IAYT5B,YAAU,CACC,mDAAA,nDAAC9B,6CAAKJ,UAAQJ,6DACdiE,SACA,AAACzD,6CAAKJ,MAAMF;IACvByD,cAAQ,iBAAAY,mBAAIvE;AAAJ,AAAA,oBAAAuE;AAAAA;;AAAoBZ;;;AArBlC,AAsBE,AAACpB,oEAAwB3C,QAAQ0C;;AACjC,OAACG,oCAAsB3C,MAAM,CAAG6D,cAAQO;;AAxB5C;;;;AAJH,CAAA,yEAAA,zEAAMd;;AAAN,AA8BA,sDAAA,tDAAMoB,oHACHC;AADH,AAEE,oBAAMA;AAAN,AACE,IAAAhF,qBAAiB,iBAAAiF,WAAA,mFAAA,+DAAwBD;AAAxB,AAAA,4GAAAC,yCAAAA,7IAACC,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMkF,cAAM,sGAAA,rGAAM,AAAA,2FAAalF;AAA/B,AACE,OAACmF,uCACA,AAACC,kCACD,AAAA,mFAAQpF,OACR,eAAA,oDAAA,jEAAIkF;;AALT;;;AADF;;;AAQF,mDAAA,nDAAMG,8GACHC;AADH,AAEE,oBAAMA;AAAN,AACE,OAACC,sCAAwB,AAACC,0BAAiBF;;AAD7C;;;AAGF,mDAAA,nDAAMG,8GACHC,GAAGC;AADN,AAEE,IAAA5F,qBAAgB,AAACM,oBAAgB,4CAAKqF;AAAtC,AAAA,oBAAA3F;AAAA,AAAA,WAAAA,PAAWuF;AAAX,AACE,IAAMM,eAAa,AAACC;IACdC,MAAI,iBAAAjB,mBAAI,AAACkB;AAAL,AAAA,oBAAAlB;AAAAA;;AACI,IAAAR,oBAAKuB;AAAL,AAAA,oBAAAvB;AACK,OAAC2B,4BAAmBL,OAAOC;;AADhCvB;;;;AAFd,AAIE,AAACtB,oCAAsBuC,KAAKQ;;AAC5B,OAACG;;AANL;;;AAQF,gDAAA,hDAAMC,wGACHC;AADH,AAEE,IAAMC,SAAO,AAACC,kDAAU,AAACC,gCAAmC,4CAAKH;AAAjE,AACE,IAAAI,aAAA,AAAAC,cAAcJ;IAAdK,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,YAAA,AAAAD,kDAAAE,1DAAQ3G;AAAR,AAAA,AACE,+DAAA,/DAACkH,yDAAelH;;AADlB;AAAA,eAAAuG;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAA5G,qBAAA,AAAAyG,cAAAD;AAAA,AAAA,GAAAxG;AAAA,AAAA,IAAAwG,iBAAAxG;AAAA,AAAA,GAAA,AAAA6G,6BAAAL;AAAA,IAAAM,kBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,YAAA,AAAAG,gBAAAT,xBAAQvG;AAAR,AAAA,AACE,+DAAA,/DAACkH,yDAAelH;;AADlB;AAAA,eAAA,AAAAiH,eAAAV;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAGJ,mDAAA,nDAAMY;AAAN,AAEE,IAAMf,SAAO,iBAAAgB,WAAS,AAACf,kDAAU,gCAAA,hCAACC;IAArBc,eAAA,EAAA,CAAAA,YAAA,OAAA,KACS,+CAAA,IAAAA,nDAACC;AADV,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAES,sEAAAA,/DAACE,8CAAMC;;;AAF7B,AAGE,IAAAC,aAAA,AAAAhB,cAAcJ;IAAdqB,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,YAAA,AAAAD,kDAAAE,1DAAQ3H;AAAR,AAAA,AACE,8BAAA,9BAAC4H,wBAAoB5H;;AADvB;AAAA,eAAAwH;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAA5H,qBAAA,AAAAyG,cAAAgB;AAAA,AAAA,GAAAzH;AAAA,AAAA,IAAAyH,iBAAAzH;AAAA,AAAA,GAAA,AAAA6G,6BAAAY;AAAA,IAAAX,kBAAA,AAAAC,sBAAAU;AAAA,AAAA,eAAA,AAAAT,qBAAAS;eAAAX;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,YAAA,AAAAG,gBAAAQ,xBAAQxH;AAAR,AAAA,AACE,8BAAA,9BAAC4H,wBAAoB5H;;AADvB;AAAA,eAAA,AAAAiH,eAAAO;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAGJ,0DAAA,1DAAOK,4HACJ9C;AADH,AAEE,IAAAhF,qBAAuB,AAACgI,oCAA2BhD;AAAnD,AAAA,oBAAAhF;AAAA,AAAA,kBAAAA,dAAW+H;AAAX,AACE,oGAAA,WAAA,xGAACE,uBAAe,gEAAA,hEAACrH,oDAASmH;;AAD5B;;;AAKF,gDAAA,hDAAMG;AAAN,AAEE,AAACC,uCAAyB,AAAAC,uBAAA,AAAAC,gCAAA;;AAC1B,OAACC;;AAEH,qDAAA,qEAAAC,1HAAOE,kHAA4BjE;AAAnC,AAAA,IAAAgE,aAAAD;gBAAA,AAAAtE,4CAAAuE,WAAA,IAAA,vEAA4CE;UAA5C,AAAAzE,4CAAAuE,WAAA,IAAA,jEAAsDzC;AAAtD,AACE,IAAA4C,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,IAAME,gBAAc,iBAAA/D,mBAAI,mEAAA,nEAACgE,2DAAqBtE;AAA1B,AAAA,oBAAAM;AAAAA;;AAAA;;;IACdiE,MAAI,CAAA,wBAAA,vBAAGF,gBAAc9C;AAD3B,AAEE,4DAAA,rDAAChF,6CAAKyD,YAAUuE;;;KAJpB;wGAMM,AAACC,2BAAmBxE,3CACpByC,pCACA,iBAAAnC,mBAAA,xFACA,OAAC/D;AADD,AAAA,oBAAA+D;AAAAA;;AAAA;;KACA,IAAQiB;;;;AATd,MAAA,KAAAnC,MAAA,CAAA,mEAAA+E;;;;AAYF,AAAA,2CAAA,mDAAAlF,9FAAMyF;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMsF,oFACFjJ,MAAM8F,IAAIJ;AADd,AAEG,2FAAA,pFAAC0D,uEAAYpJ,MAAM8F,IAAIJ;;;AAF1B,CAAA,yEAAA,wBAAAwD,jGAAMD,oFAGFjJ,MAAM8F,IAAIJ;AAHd,AAAA,IAAAyD,aAAAD;IAAAC,iBAAA,AAAAxH,4BAAAwH;qBAAA,AAAAvH,4CAAAuH,eAAA,5EAGyBE;eAHzB,AAAAzH,4CAAAuH,eAAA,4DAAA,lIAGwCG;yBAHxC,AAAA1H,4CAAAuH,eAAA,qEAAA,rJAGiDI;AAHjD,AAMG,GAAUC;AAAV;;AAAA,AACE,IAAAzJ,qBAAoB,AAAA,6FAAaC;AAAjC,AAAA,oBAAAD;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,IAAM/E,YAAM,iBAAA6E,mBAAI,iBAAA4E,WAAA,mFAAA,+DAAsB1E;AAAtB,AAAA,wGAAA0E,uCAAAA,vIAACC,iDAAAA,2DAAAA;;AAAL,AAAA,oBAAA7E;AAAAA;;AAAqC7E;;;IAC3C2J,gBAAc,EAAI,AAACC,sBAAMlE,KACT,AAACmC,wDAAgCnC,2BAC7B,CAAK,gDAAA,hDAAC5E,6CAAK4E,OAAK,uBAAA,tBAAG,AAAC3E,gBAAM2E,yDAASX,tJACnC,0KAAA,WAAA,rLAACiD;IACrBzD,UAAQ,iBAAAM,mBAAIwE;AAAJ,AAAA,oBAAAxE;AAAAA;;AAAA,IAAAA,uBAAmB,AAAA,kGAAgB7E;AAAnC,AAAA,oBAAA6E;AAAAA;;AAAA;;;;IACRgF,iBAAe,AAAC9I,gBAAMwD;IACtBuF,aAAW,gGAAA,oKAAA,+IAAA,jZACE,AAACC,wBAAQjE,MACT,AAAC0C,mDAA2BjE,QAAQuB,OAEpC,EAAK,YAAA,XAAGwD,qBAAY,CAAI,AAACvI,gBAAMwD,YAAS+E,aACxC,qDAAA,rDAACxI,6CAAKyD,YAAU,CAAG,AAACxD,gBAAMwD,WAAS+E,aAEnC,EAAI,6CAAA,7CAACpI,8FAAO4E,UAAK,CAAI+D,kBAAe/D,QACpCvB,QAGA,qDAAA,rDAACzD,6CAAKyD,YAAUuB;;IAC7BvB,kDAAY,AAACyF,kDAAoC,AAAA,iGAAehK,WACfuE,lMACrC,AAAC0F;AArBnB,AAsBE,AAAChC;;AACD,OAACiC,+DAAmBP,cAAcpF,YAAQvE,UAAM8J,WAAWP;;AAxB/D;;;;;AAPL,CAAA,mEAAA,nEAAMN;;AAAN,AAiCA,mEAAA,nEAAOkB,8IACJC,WAAWrF;AADd,AAEE,IAAAhF,qBAAc,iBAAAsE,oBAAK,OAASU;AAAd,AAAA,GAAAV;AAAwB,OAACgG,qBAAWtF;;AAApCV;;;AAAd,AAAA,oBAAAtE;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,IAAArB,oBAAK,AAACxD,gDAAKuJ,WAAW1E;AAAtB,AAAA,GAAArB;AACK,IAAAiG,WAAA,mFAAA,+DAAwB5E;AAAxB,AAAA,4GAAA4E,yCAAAA,7IAACrF,mDAAAA,6DAAAA;;AADNZ;;;AADF;;;AAIF,iEAAA,jEAAOkG,0IACJvK;AADH,AAEE,oBAAI,iBAAAqE,oBAAK,AAAA,yGAAmBrE;AAAxB,AAAA,oBAAAqE;AACK,OAACmC,cAAI,AAAA,uGAAmBxG;;AAD7BqE;;;AAEF,IAAMoG,kBAAgB,AAAA,uGAAmBzK;IACnC0K,eAAU,WAAKC;AAAL,AAAQ,+EAAA,xEAACC,sEAAqBD;;IACxCE,uYACU,AAACC,+CAAO,WAAAC,zEACR,AAACK,/DACD,AAAC9D,8CAAMC,5DACP,AAAC8D,zDACD,AAACC,4CAAIZ,/LACL,AAACa,+CAAO,AAAA,6FAAavL,pOACrB,0BAAA,1BAACwL;AANO,AAAA,IAAAR,aAAAD;QAAA,AAAA/G,4CAAAgH,WAAA,IAAA,/DAAMC;QAAN,AAAAjH,4CAAAgH,WAAA,IAAA,/DAAQE;AAAR,AAAY,OAACC,sBAAMD;GAD3BT;IAFhBD,aAU2BC;IAV3BD,iBAAA,AAAA7I,4BAAA6I;WAAA,AAAA5I,4CAAA4I,eAAA,lEAUciB;YAVd,AAAA7J,4CAAA4I,eAAA,nEAUmBkB;IACbC,UAAQ,iBAAMjG,KAAG,AAAA,mFAAQ,AAAA,2FAAa1F;IACxB4L,qBAAmB,sBAAA,JAAMlG,IACJ,AAACmG,6CAAK,WAAKC;AAAL,AAAA,0FAAA,+DACepG,GAAGoG;uSAF1B,pSACE,mFAAA,yEAAA,8DAAA;IAGrBL,+EAAU,AAACH,4CAAIZ,aAAUe,7HAAM,AAACM,+CAAOC;IACvCN,gFAAW,AAACJ,4CAAIZ,aAAUgB,7HAAO,AAACK,+CAAOC;IACzCC,KAAG,iBAAAC,WAAA,2CAAA,wDAAA,HAAgBxG,4EACW+E;IAD3ByB,eAAA,0JAAAA,xJAEE,AAAC1F,cAAIiF,WACL,8CAAAS,SAAA,vDAACC,qHAAkBV;AAHrB,AAAA,GAIE,AAACjF,cAAIkF;AACL,qDAAAQ,aAAA,3DAACC,4HAAmBT;;AALtBQ;;;AAPT,AAaE,OAACE,6CAAKR,mBAAmBK;;AAxBzC,AAyBE,kEAAA,sHAAA,jLAACE,qDAAMnM,qEACY6K,sHACCc;;AACtB3L;;;AAEJ,wDAAA,xDAAOqM,wHACJxB;AADH,AAEE,OAACkB,+CAAO,WAAKO;AAAL,AAAQ,SACC,kCAAA,hCAAK,AAACvC,wBAAQuC,UACT,6CAAA,7CAACpL,4GAAc,AAAC8F,gBAAMsF,SACtB,+IAAA,9IAAM,CAACrH,mDAAAA,sDAAAA,LAAUqH,kCAAAA,sBACtB,MAAA,LAAMA;GAAKzB;;AAE9B,2CAAA,3CAAO0B,8FACJhI,QAAQvE,MAAM6B,OAAO2K,WAAWC;AADnC,AAEE,oBAAI,iBAAApI,oBAAK,AAACqI;AAAN,AAAA,GAAArI;AAAkCmI;;AAAlCnI;;;AACF,IAAA,AACE,IAAMuI,wBAAgB,iBAAAvI,oBAAK,AAAA,4FAAarE;AAAlB,AAAA,oBAAAqE;AAAyB,OAACwI,iCAAmB,AAAA,4FAAa7M;;AAA1DqE;;;IAChBmI,iBAAW,AAAClL,oBAAY,AAACwL,0BAAkB,AAACC,eAAKP;IACjDC,iBAAW,8BAAA,2EAAA,vFAAMA,YAAW,AAACnL,oBAAY,AAACwL,0BAAkB,AAACC,eAAKN;IAClEO,cAAY,w6BAAA,qlBAAA,3/CACE,0LAAA,yJAAA,wJAAA,zeAAI,EAAK,mBAAA,lBAAMP,6BAAY,EAAI,4DAAA,5DAACvL,6CAAEsL,6BACH,4DAAA,5DAACtL,6CAAEsL,iCAC9B,EAAK,4DAAA,5DAACtL,6CAAEuL,4BAAmB,4DAAA,5DAACvL,6CAAEsL,iCAC9B,EAAK,4DAAA,5DAACtL,6CAAEuL,6BAAoB,4DAAA,5DAACvL,6CAAEsL,+BAC/B,EAAK,oIAAA,pIAACtL,oDAAEuL,eAAWD,kFAAkB,AAACS,cAAIL,8BAC1C,EAAK,oIAAA,pIAAC1L,oDAAEuL,eAAWD,oFAAoB,AAACS,cAAIL,kCAChD,AAACM,6BAAerL,OAAO0C,WAEvB,yJAAA,vJACC,EAAK,4DAAA,5DAACrD,6CAAEuL,6BAAoB,4DAAA,5DAACvL,6CAAEsL,gCAC/B,EAAK,4DAAA,5DAACtL,6CAAEuL,2BAAkB,4DAAA,5DAACvL,6CAAEsL,+BAC7B,EAAK,0BAAA,iFAAA,aAAA,xHAACW,kJAA2BV,qBAC5B,4DAAA,5DAACvL,6CAAEsL,8BACT,AAACY,8BAAgBvL,OAAO0C,SAGxBA;;AApBpB,AAqBEyI;gBAtBJ,GAAA,CAAAL,kBAuBShJ;AAvBT,SAAAgJ,LAuBkBU;AAvBlB,AAwBI9I;;AAxBJ,AAAA,MAAAoI;;;;AAyBApI;;;AAEJ,4CAAA,5CAAO+I,gGACJtN,MAAMU;AADT,AAEE,GAAI,EAAK,AAACgM,iDACD,AAAC7L,gDAAK,AAAA,kGAAgBb,OAAOU;AACpC,IAAMmB,SAAO,AAAA,iGAAe7B;IACtBwM,aAAW,AAACe,eAAK,AAACC,2BAAkB,AAACC,oCAAsB5L,QAAQ,iBAAAgD,mBAAInE;AAAJ,AAAA,oBAAAmE;AAAAA;;AAAA;;;IACnEjC,YAAU,AAAC2J,yCAAiB7L,MAAMV,MAAM6B,OAC5B2K,WACA,AAAA,gGAAexM;AAJjC,AAKE4C;;AACFlC;;;AAEJ,2CAAA,mDAAAgN,9FAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAhM,4BAAAgM;YAAAA,RACqE3N;cADrE,AAAA4B,4CAAA+L,eAAA,rEACiBpJ;aADjB,AAAA3C,4CAAA+L,eAAA,pEACyB9L;WADzB,AAAAD,4CAAA+L,eAAA,lEACgCE;WADhC,AAAAjM,4CAAA+L,eAAA,lEACqCG;WADrC,AAAAlM,4CAAA+L,eAAA,lEAC0CI;YAD1C,AAAAnM,4CAAA+L,eAAA,nEAC+CK;uBAD/C,AAAApM,4CAAA+L,eAAA,9EACqDM;AADrD,AAEE,IAAMjO,YAAM,iBAAA6E,mBAAI,iBAAAR,oBAAK,AAAA,mFAAQrE;AAAb,AAAA,oBAAAqE;AAAoB,IAAA8J,WAAS,AAAA,mFAAQnO;AAAjB,AAAA,wGAAAmO,uCAAAA,vIAACzE,iDAAAA,2DAAAA;;AAArBrF;;;AAAJ,AAAA,oBAAAQ;AAAAA;;AAAkD7E;;;IACxDA,YAAM,AAACoO,uGAAMpO,UACA,AAACqO,yEAA2BN,KAAKlM,OAAOoM,iBAAW,AAAA,kGAAgBjO;IAChFsO,aAAW,AAAA,uGAAmBtO;IAC9BuO,eAAa,AAAA,kGAAgBvO;IAC7BuE,cAAQ,kBAAI,iBAAAF,oBAAK,AAACmC,cAAI8H;AAAV,AAAA,GAAAjK;AAAA,IAAAA,wBAAsBkK;AAAtB,AAAA,oBAAAlK;AAAmC,OAACxD,gDAAK0N,aAAahK;;AAAtDF;;;AAAAA;;MACF,AAACmK,gDAAkCF,WAAW/J,QAAQ1C,QACtD0C;IACVA,cAAQ,AAACkK,kCAAoBzO,UAAMuE;IACnCA,cAAQ,AAAC+I,0CAAkBtN,UAAMuE;IACjCmK,qBAAa,AAACxN,6CAAE2M,KAAKC;IACrBa,MAAI,AAACC,+BAAY,AAACtN,oBAAYiD,aAAS,AAACsK,uEAAwBhN;IAChEiN,kBAAgB,AAAC9H,gBAAM,AAAC+H,iBAAOJ;IAC/BK,kBAAgB,AAACC,iBAAO,AAACF,iBAAOJ;IAChCO,oBAAY,0BAAA,iFAAA,uBAAA,lIAAC/B,mKAA4C2B;IACzDK,0BAAkB,yHAAA,vHAAK,oDAAA,pDAACjO,6CAAEW,4EACH,6CAAA,7CAACX,uDAAY4N,sBACb,wGAAA,vGAAM,AAAA,mFAAOE;IACpCI,0BAAkB,AAACC,8CAAwBP;IAC3CvK,cAAQ,AAAC+K,qBAAa/K;IACtBA,cAAQ,gNAAA,hNAACyD,uBAAezD,YAAQ,0DAAA,1DAACgL,qHAAqB,4CAAKxB;IApBjEG,aAqByB,iDAAA,mHAAA,2BAAA,mHAAA,hTACE,EAAKQ,wBAAaQ,wGACjB3K,YAAQA,sBAET4K,4GACC5K,YAAQA,oBAGT,iBAAMiL,uBAAS,6CAAK,AAACC,kCAAyB5N,SAAQ,2BAAA,IAAA,7BAAIuN,mCAA4B7K;AAAtF,AAAA,0FACGA,YAAQiL;;;kBA9BtC,AAAAxL,4CAAAkK,WAAA,IAAA,zEAqBO3J;2BArBP,AAAAP,4CAAAkK,WAAA,IAAA,lFAqBesB;IAUTxP,YAAM,+DAAA,2IAAA,1MAACmM,qDAAMnM,8EACewP,0IACD3N;IAC3B7B,YAAM,AAACsH,8CAAMoI,iBAAO1P,UAAM,+CAAA,iFAAA,hIAAC+L,+NAA4B4D;IACvD3P,YAAM,AAAC4P,gEAAkB5P;IACzBA,YAAM,kBAAI,iBAAAqE,oBAAKqK;AAAL,AAAA,GAAArK;AAAkB,OAAA,yGAAmBrE;;AAArCqE;;MACFrE,UACA,yDAAA,zDAAC6P,+CAAO7P;IAChBA,YAAM,yDAAA,zDAAC8P,+CAAO9P,yEAAkBqM;IAChCrM,YAAM,AAACuK,+DAAkCvK;IACzC+P,iBAAe,AAAC3B,uGACA,AAAC4B,sBAAY1B,WAAW,AAAC2B,8CACzB,AAAA,uGAAmBjQ;AA3CzC,yNA4CMA,tDACA,gEAAA,iHAAA,jLAAC6P,rDAED,iTAAA,kIAAA,nbAAC1D,qXAAqB5H,uIACGwL,1mBACzB,OAAC3B,wnBAAM,yBAAA,2CAAA,8EAAA,hIAAIJ,kHAAoBA;;AAEvC,iDAAA,qEAAAkC,tHAAOE,0GACJpQ,MAAMU;AADT,AAAA,IAAAyP,aAAAD;IAAAC,iBAAA,AAAAxO,4BAAAwO;AAAA,AAEE,IAAMnQ,YAAM,oDAAA,pDAACmM,8CAAMnM,0EAAqBU;IAClCV,YAAM,AAACsH,8CAAMoI,iBAAO1P,UAAM2P;AADhC,AAEE,oBAAAU;AAAA,IAAAC,mBAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,qBAAA,AAEC,iBAAMxQ,YAAM,AAAC4N,yCAAiB5N;AAA9B,AACE,IAAAyQ,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,wEAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACiB,gDAA0B1R;;AAF7B,IAAA4Q,qDAAAF;IAAAG,qDAAA,AAAAC,qBAAA;AAAA,AAAA,CAAAJ,8DAAAG;;AAAA,IAAA,AAEE,AAACa,gDAA0B1R;;AAF7B,IAAA+Q,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAE;;;AAKA,IAAA7Q,qBAAiB,yDAAA,mFAAA,yEAAA,rNAAC6R,+CAAO5R;AAAzB,AAAA,oBAAAD;AAAA,AAAA,YAAAA,RAAW4R;AAAX,AACE,IAAA5R,yBAAyB,AAAA,4FAAa,iBAAA+R,WAAW,AAAA,mFAAQ,AAAA,2FAAa9R;AAAhC,AAAA,4GAAA8R,yCAAAA,7IAAC7M,mDAAAA,6DAAAA;;AAAvC,AAAA,oBAAAlF;AAAA,AAAA,oBAAAA,hBAAW8R;AAAX,AACE,oBAAM,iBAAAxN,oBAAK,AAAA,yGAAmBrE;AAAxB,AAAA,oBAAAqE;AAAA,SACK,GAAK,AAAC2N,4BAAcL,cACpB,AAAC9Q,gDAAK,CAACoR,kEAAAA,yEAAAA,TAAyBN,qDAAAA,QAAOE;;AAF5CxN;;;AAAN,AAGE,sCAAA,mFAAA,lHAAC6N,mNAA+CL,cAAcF;;AAHhE;;;AADF;;;AADF;;;AARH,AAAA,AAAApB,gBAAAD;;AAAAE;;AAAA,AAEC,IAAMxQ,YAAM,AAAC4N,yCAAiB5N;AAA9B,AACE,IAAAyQ,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,wEAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACiB,gDAA0B1R;;AAF7B,IAAAwR,qDAAAd;IAAAe,qDAAA,AAAAX,qBAAA;AAAA,AAAA,CAAAJ,8DAAAe;;AAAA,IAAA,AAEE,AAACC,gDAA0B1R;;AAF7B,IAAA+Q,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAc;;;AAKA,IAAAzR,qBAAiB,yDAAA,mFAAA,yEAAA,rNAAC6R,+CAAO5R;AAAzB,AAAA,oBAAAD;AAAA,AAAA,YAAAA,RAAW4R;AAAX,AACE,IAAA5R,yBAAyB,AAAA,4FAAa,iBAAAgS,WAAW,AAAA,mFAAQ,AAAA,2FAAa/R;AAAhC,AAAA,4GAAA+R,yCAAAA,7IAAC9M,mDAAAA,6DAAAA;;AAAvC,AAAA,oBAAAlF;AAAA,AAAA,oBAAAA,hBAAW8R;AAAX,AACE,oBAAM,iBAAAxN,oBAAK,AAAA,yGAAmBrE;AAAxB,AAAA,oBAAAqE;AAAA,SACK,GAAK,AAAC2N,4BAAcL,cACpB,AAAC9Q,gDAAK,CAACoR,kEAAAA,yEAAAA,TAAyBN,qDAAAA,QAAOE;;AAF5CxN;;;AAAN,AAGE,sCAAA,mFAAA,lHAAC6N,mNAA+CL,cAAcF;;AAHhE;;;AADF;;;AADF;;;;AAOP,AAAA,sDAAA,8DAAAnO,pHAAM4O;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzO,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oFAAA,pFAAMyO,+FACFpS,MAAMU;AADV,AAEG,qGAAA,9FAAC6R,kFAAuBvS,MAAMU;;;AAFjC,CAAA,oFAAA,uBAAA2R,3GAAMD,+FAGFpS,MAAMU;AAHV,AAAA,IAAA4R,aAAAD;IAAAC,iBAAA,AAAA3Q,4BAAA2Q;WAAAA,PAKSG;mBALT,AAAA7Q,4CAAA0Q,eAAA,1EAIYE;AAJZ,AAMG,IAAAE,aAA+D1S;IAA/D0S,iBAAA,AAAA/Q,4BAAA+Q;WAAA,AAAA9Q,4CAAA8Q,eAAA,lEAAoB3E;WAApB,AAAAnM,4CAAA8Q,eAAA,lEAAyB5E;aAAzB,AAAAlM,4CAAA8Q,eAAA,pEAA8B7Q;WAA9B,AAAAD,4CAAA8Q,eAAA,lEAAqCC;cAArC,AAAA/Q,4CAAA8Q,eAAA,rEAA0CnO;iBAA1C,AAAA3C,4CAAA8Q,eAAA,xEAAkDpE;IAC5CqE,WAAK,iBAAA9N,mBAAI8N;AAAJ,AAAA,oBAAA9N;AAAAA;;AAAS,OAACO;;;IACfvD,aAAO,iBAAAgD,mBAAIhD;AAAJ,AAAA,oBAAAgD;AAAAA;;AAAW,OAAC+N;;;IACnB9E,WAAK,iBAAA+E,WAAWF;IAAXG,WAAgB,AAAA,mFAAQhF;AAAxB,AAAA,4GAAA+E,SAAAC,yCAAAD,SAAAC,/JAAC7N,mDAAAA,sEAAAA;;IACNF,WAAS,oCAAA,0GAAA,5IAAM,AAACgO,qBAAKzE,aAAY,uDAAA,vDAAC1M,4CAAI0M;IACtC/J,kDAAY,AAACyF,kDAAoCnI,WAAO0C,jGAC5C,AAAC0F;AANnB,AAOE,oBACE,AAACE,iEAAmC4D,KAAKhJ;AACzC,8EAAA,mFAAA,0OAAA,pYAACiO,0NAEC,0DAAA,1DAACzD,mJAAmDxK;;AAJxD,oBAOEyN;AACA,OAACpC,+CAAkBpQ,MAAMU,MAAM+R;;AARjC,AAWE,IAAMQ,yBAAiB,AAACpS,gDAAK,AAACS,oBAAYiD,aAAS,AAACjD,oBAAYZ;AAAhE,AACE,oBAAM,iBAAA2D,oBAAK4O;AAAL,AAAA,GAAA5O;AAAsByJ;;AAAtBzJ;;;AAAN,AACE,OAAC+L,+CAAkBpQ,MAAMU,MAAM+R;;AADjC;;;;;;;AAzBT,CAAA,8EAAA,9EAAML;;AAAN,AA4BA,qDAAA,rDAAOc,kHACJxS,MAAMoF;AADT,AAEE,GAAM,OAASpF;AAAf,AACE,IAAMyS,iBAAe,mDAAA,nDAACrS,6CAAKJ,UAAQoF;IAC7BsN,iBAAe,AAAC9D,qBAAa,AAACxO,6CAAKJ,MAAMoF;AAD/C,AAAA,0FAEGqN,eAAeC;;AAHpB;;;AAKF,AAAA,AACA,sDAAA,6FAAAC,nJAAME,oHACHC,OAAOC,cAAcC;AADxB,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAA3R,4BAAA2R;qBAAA,AAAA1R,4CAAA0R,eAAA,5EAC0CK;uBAD1C,AAAA/R,4CAAA0R,eAAA,9EACmDM;kCADnD,AAAAhS,4CAAA0R,eAAA,zFAC8DO;AAD9D,AAEE,IAAMC,6BAAqB,iBAAAzP,oBAAK,iBAAAQ,mBAAI,AAAA,mFAAO2O;AAAX,AAAA,oBAAA3O;AAAAA;;AACI,OAAA,qGAAgB2O;;;AADzB,AAAA,oBAAAnP;AAEK,OAAC4I,cAAI,AAAA,0GAAmBuG;;AAF7BnP;;;IAGrB0P,sBAAc,iBAAAC,WAAkB,AAAA,6FAAaP;AAA/B,AAAA,sIAAAO,sDAAAA,pLAACC,gEAAAA,0EAAAA;;IACfN,qBAAS,8CAAA,MAAA,2DAAA,iEAAA,KAAA,nKACEG,oCAGA,AAACI,yBAASP,iBACVA,iCAEA,AAACQ,+BAAgBV,qBAIjB,AAACxG,cAAI8G;;AAftB,AAgBE,IAAAtD,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,IAAA6D,iBAAA,2CAAA,uEAAqCb;AAArC,AAAA,iKAAAa,6EAAAA,7OAACE,iFAAAA,iGAAAA;;AACD,0DAAA,mHAAA,2CAAA,iFAAA,iFAAA,nXAACC,sIAA8Bf,kBAAWD,uHAAyBE,mFACEC,wGACWC;;AALlF,IAAAO,+CAAA1D;IAAA2D,+CAAA,AAAAvD,qBAAA;AAAA,AAAA,CAAAJ,8DAAA2D;;AAAA,IAAA,AAEE,IAAAE,iBAAA,2CAAA,uEAAqCd;AAArC,AAAA,iKAAAc,6EAAAA,7OAACC,iFAAAA,iGAAAA;;AACD,mDAAA,mHAAA,2CAAA,iFAAA,iFAAA,nXAACC,sIAA8Bf,kBAAWD,uHAAyBE,mFACEC,wGACWC;;AALlF,IAAA9C,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAA0D;;;AAOJ,8DAAA,9DAAOM,oIACJlB,OAAOzF;AADV,AAEE,IAAM4G,eAAa,AAACC;IACd7P,WAAS,iBAAAF,mBAAI,iBAAAgQ,WAAQ,AAAA,gFAAKrB;AAAb,AAAA,GAAA,CAAAqB,YAAA;AAAA;;AAAA,4BAAAA,rBAAqBxK;;;AAAzB,AAAA,oBAAAxF;AAAAA;;AACI,IAAAiQ,WAAQH;AAAR,AAAA,GAAA,CAAAG,YAAA;AAAA;;AAAA,4BAAAA,rBAAqBzK;;;;AAFxC,AAGE,OAACnJ,6CAAE6M,KAAKhJ;;AAEZ,kEAAA,8FAAAgQ,hKAAME,4IACHzB,OAAOxT,MAAMkV;AADhB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAArT,4BAAAqT;iBAAA,AAAApT,4CAAAoT,eAAA,xEAC+BG;AAD/B,AAEE,YAAA,2CAAA,0FAAA,oEAAA,jNAAMC,kHAAmB,AAACC;IAEpBC,sDAAe,AAAClH,uGAAM,4BAAA,mFAAA,kEAAA,8DAAA,mEAAA,6DAAA,/WAAC4B,sBAAYhQ,waACqCoV,9kBACzD,AAACxH;IAChB2H,aAAW,iBAAAC,WAAS,AAAA,mFAAQ,AAAA,4FAAaxV;AAA9B,AAAA,wGAAAwV,uCAAAA,vIAAC9L,iDAAAA,2DAAAA;;AALlB,AAME,oBAAA2G;AAAA,IAAAC,yBAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,2BAAA,AAEC,iBAAMmD,iBAAS,AAAC9S,gDAAK,AAAA,mFAAQ0U,YAAY,AAAA,mFAAQ,AAAA,gGAAevV;AAAhE,AACE,wFAAA,2CAAA,6EAAA,gEAAA,zQAACuT,oDAAuBC,OAAO+B,WAAWD,oHAAsB3B;;AAHnE,AAAA,AAAApD,gBAAAD;;AAAAE;AAAA,AAEC,IAAMmD,uBAAS,AAAC9S,gDAAK,AAAA,mFAAQ0U,YAAY,AAAA,mFAAQ,AAAA,gGAAevV;AAAhE,AACE,iFAAA,2CAAA,mFAAA,gEAAA,/QAACuT,oDAAuBC,OAAO+B,WAAWD,oHAAsB3B;;;AAEnE,QAACwB,2CAAAA,uDAAAA,dAAWG,mCAAAA;;AAEhB,qDAAA,oEAAAG,eAAAC,xIAAMG,kHACHrC,gBAGA9S;AAJH,AAAA,IAAAiV,aAAAF;IAAAE,iBAAA,AAAAhU,4BAAAgU;YAAAA,RAGQ3V;WAHR,AAAA4B,4CAAA+T,eAAA,lEAEiB5H;IAFjB6H,aAAAF;IAAAE,iBAAA,AAAAjU,4BAAAiU;YAAAA,RAMQE;iBANR,AAAAlU,4CAAAgU,eAAA,xEAKWT;AALX,AAOE,IAAMa,oBAAY,AAACtB,4DAA8BlB,OAAOzF;IAClD3N,QAAM,AAACC,oBAAgB,AAACF;IACxB2F,MAAI,AAAC5B,yBAAW9D;IAFtB2V,aAGsC,AAAC7C,mDAA2BxS,MAAMoF;qBAHxE,AAAA9B,4CAAA+R,WAAA,IAAA,5EAGO5C;qBAHP,AAAAnP,4CAAA+R,WAAA,IAAA,5EAGsB3C;IAChBK,gBAAc,oDAAA,pDAACtH,8CAAMnM,0EAAqBmT;IAC1CM,oBAAc,AAACnM,8CAAMoI,iBAAO+D,cAAc9D;IAC1C8D,oBAAc,AAAC7F,yCAAiB6F;YANtC,2CAAA,0FAAA,7IAOM2B,kHAAmB,AAACC,+FACEjC;IACtB6C,sDAAe,AAAC7H,uGAAM,4BAAA,mFAAA,kEAAA,8DAAA,mEAAA,6DAAA,/WAAC4B,sBAAYhQ,waACqCoV,9kBACzD,AAACxH;IAChB+F,iBAAS,qBAAA,AAAA,MAAA,zBAAMqC;AAZrB,AAaE,wFAAA,2CAAA,6EAAA,gEAAA,hRAACzC,oDAAuBC,OAAOC,kBAAcwC,oHAAsBtC;;AAEnE,AAACuC,+BAAsB9V,MAAM+S;;AAC7B,QAACgC,2CAAAA,uDAAAA,dAAWc,mCAAAA;;AAEhB,iDAAA,jDAAME;AAAN,AAEE,AAACC;;AACD,uCAAA,hCAACC;;AAEH,oCAAA,pCAAMC;AAAN,AAEE,IAAAC,aAAmF,AAACK;IAApFJ,aAAA,AAAAxS,4CAAAuS,WAAA,IAAA;IAAAC,iBAAA,AAAA7U,4BAAA6U;cAAA,AAAA5U,4CAAA4U,eAAA,rEAAeC;YAAf,AAAA7U,4CAAA4U,eAAA,nEAAuBxW;eAAvB,AAAA4B,4CAAA4U,eAAA,tEAA6BzR;sBAA7B,AAAAnD,4CAAA4U,eAAA,7EAAsCE;aAAtC,AAAA9U,4CAAA4U,eAAA,pEAAsD3U;qBAAtD,AAAAD,4CAAA4U,eAAA,5EAA6DG;SAA7D,AAAA3S,4CAAAuS,WAAA,IAAA,hEAAwE7Q;aAAxE,AAAA1B,4CAAAuS,WAAA,IAAA,pEAA2E/C;IACrElO,OAAK,AAACjF,oBAAgBqF;AAD5B,AAEE,oBAAMJ;AAAN,AACE,IAAM5E,QAAM,yDAAA,zDAACC,oDAAS2E;IAChBQ,MAAI,AAACvF,kCAAyB+E;AADpC,AAAA,+CAAA,0DAAA,sDAAA,wDAAA,6DAAA,sDAAA,mDAAA,2DAAA,oDAAA,4DAAA,kDAAA,4EAKWzD,OAED,iBAAAgD,mBAAI,iBAAAgS,WAAA,mFAAA,+DAAsB,AAAA,6FAAa7W;AAAnC,AAAA,wGAAA6W,uCAAAA,vIAACnN,iDAAAA,2DAAAA;;AAAL,AAAA,oBAAA7E;AAAAA;;AAAgD7E;;KAL/CwT,gCACCiD,zBACCE,+CAENjR,TAEMX,YACO2R,jBACXpR,lBACC5E,MACFoF;;AAbV;;;AAeJ,AAAA;;;iDAAA,yDAAAtC,1GAAMuT;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAAMoT,0FAEFC;AAFJ,AAGG,0FAAA,nFAACC,6EAAkBD;;;AAHtB,CAAA,+EAAA,/EAAMD,0FAIFG,OAAOC;AAJX,AAKG,GAAM,EAAK,GAAK3N,yCACL,gDAAA,hDAAC3I,yGAAa,AAACuW;AAD1B,AAEE,mCAAA,nCAACC;;AACD,IAAAtX,2BAAiB,AAACuW;AAAlB,AAAA,oBAAAvW;AAAA,AAAA,kBAAAA,dAAWiX;AAAX,AACE,IAAAM,mBAAsCN;IAAtCM,uBAAA,AAAA3V,4BAAA2V;kBAAA,AAAA1V,4CAAA0V,qBAAA,/EAActX;kBAAd,AAAA4B,4CAAA0V,qBAAA,/EAAoB5W;eAApB,AAAAkB,4CAAA0V,qBAAA,5EAA0B5R;mBAA1B,AAAA9D,4CAAA0V,qBAAA,hFAA6B9D;IACvB9S,kBAAM,EAAI,OAASyW,0BAAaA,YAAYzW;IAC5CqE,iBAAS,AAAA,6FAAa/E;IACtBA,kBAAM,iBAAA6E,mBAAI,iBAAA2S,WAAA,mFAAA,+DAAsBzS;AAAtB,AAAA,wGAAAyS,uCAAAA,vIAAC9N,iDAAAA,2DAAAA;;AAAL,AAAA,oBAAA7E;AAAAA;;AACI7E;;;IACVgW,0BAAY,AAACtB,4DAA8BlB,aAAOzO;IAClD3E,cAAM,AAACC,oBAAgB,AAACF;IACxB2F,YAAI,AAAC5B,yBAAW9D;IAPtBmX,mBAQsC,AAACrE,mDAA2BxS,gBAAMoF;2BARxE,AAAA9B,4CAAAuT,iBAAA,IAAA,xFAQOpE;2BARP,AAAAnP,4CAAAuT,iBAAA,IAAA,xFAQsBnE;IAChBqE,kBAAU,8EAAA,qLAAA,jQACEzB,yBACAH,qDAEA,EAAK,AAAC7D,4BAAcmB,2BAAgB,GAAK,AAACnB,4BAAcoB,2BACxD6B,gEAGAY;;AAjBlB,AAkBE,IAAA6B,iBAAWlE;IAAXmE,iBAAkB3X;IAAlB4X,iBAAwBlX;IAAxBmX,iBAAA,2CAAA,iEAEY,WAAKC;AAAL,AACE,AAAC3B;;AACD,yFAAA,lFAAC/M,uEAAY0O,eAAapS;;AAJxC,AAAA,+FAAAgS,eAAAC,eAAAC,eAAAC,4CAAAH,eAAAC,eAAAC,eAAAC,pOAACJ,gDAAAA,6GAAAA;;AAnBL;;AAHF;;AA2BA,0CAAA,nCAACJ;;;AAhCJ,CAAA,yEAAA,zEAAMN;;AAAN,AAkCA,qDAAA,qEAAAgB,1HAAME,kHACH1T;AADH,AAAA,IAAAyT,aAAAD;IAAAC,iBAAA,AAAArW,4BAAAqW;WAAA,AAAApW,4CAAAoW,eAAA,lEACmBlK;iBADnB,AAAAlM,4CAAAoW,eAAA,xEACwB7R;qBADxB,AAAAvE,4CAAAoW,eAAA,8DAAA,1IACmCrE;oBADnC,AAAA/R,4CAAAoW,eAAA,0DAAA,rIAC4CE;iBAD5C,AAAAtW,4CAAAoW,eAAA,xEACoD1J;kBADpD,AAAA1M,4CAAAoW,eAAA,zEAEmBG;kCAFnB,AAAAvW,4CAAAoW,eAAA,zFAE+BnE;wBAF/B,AAAAjS,4CAAAoW,eAAA,mEAAA,lJAEqDI;AAFrD,AAME,oBAAM,iBAAAvT,mBAAIiJ;AAAJ,AAAA,oBAAAjJ;AAAAA;;AAASsB;;;AAAf,AACE,IAAM+R,oBAAQ,wBAAA,NAAIpK,YAAWoK;IACvBvE,qBAAS,AAAC0E,mBAAQ1E;IAClBA,qBAAS,qCAAA,nBAAIuE,wBAAa,wBAAA,NAAIpK,YAAW6F;IACzC3T,QAAM,kBAAI8N,MACF,iBAAAwK,WAAA,mFAAA,8DAAwB,CAACrG,kEAAAA,wEAAAA,RAAyBnE,oDAAAA;AAAlD,AAAA,4GAAAwK,yCAAAA,7IAACrT,mDAAAA,6DAAAA;KACD,iBAAAsT,WAAA,mFAAA,+DAAwBpS;AAAxB,AAAA,4GAAAoS,yCAAAA,7IAACtT,mDAAAA,6DAAAA;;AALf,AAME,oBAAMjF;AAAN,AACE,IAAM8X,aAAW,2BAAA,zBAAM,GAAKnE,sBACT,iBAAM8E,WAAS,AAAA,kGAAgBzY;IACzBoG,SAAO,CAACsS,yDAAAA,yEAAAA,lBAAgBD,qDAAAA,5CAASzY,qDAAAA;IACjC2Y,gBAAc,AAAA,mFAAQ,AAACpL,eAAKnH;AAFlC,AAGE,oBAAMuS;AAAN,AACE,QAACjP,iDAAAA,gEAAAA,jBAAQiP,4CAAAA;;AADX;;KAJJ;IAMX9W,SAAO,iBAAAgD,mBACC,AAAA,iGAAe7E;AADhB,AAAA,oBAAA6E;AAAAA;;AAAA,IAAAA,uBAEC,iBAAA+T,WAAoB,AAAA,mFAAQ5Y;AAA5B,AAAA,8HAAA4Y,kDAAAA,xKAACC,4DAAAA,sEAAAA;;AAFF,AAAA,oBAAAhU;AAAAA;;AAGC,OAAC+N;;;;IACTrO,cAAQ,EAAI,AAACiC,cAAI8H,aACP,AAACwK,yCAA2BjX,OAAO0C,QAAQ+J,YAC3C/J;IACVmP,iEAAc,4BAAA,mFAAA,6DAAA,sEAAA,lPAAC1D,sBAAYhQ,3EAEb,4XAAA,kIAAA,9fAACmM,gcAAqB5H,iIACD1C;IACnC6R,gBAAU,wDAAA,xDAACvH,8CAAMuH,uEACA,kBAAI5F,MACF,AAAA,mFAAQ9N,OACR,AAAA,mFAAQ,AAAA,2FAAa0T;IACxCA,uGAAcA,zCACA,AAAC9F,9CACD,sGAAA,tGAACzB,qKAAkB,iBAAAtH,mBAAIsT;AAAJ,AAAA,oBAAAtT;AAAAA;;AAAgB,OAACwQ;;;IAvBxDmD,aAwByB,kBACEN,mBACA,iBAAMc,kFACkB,4CAAA,WAAAC,vDAAC3N,7DACD,AAAChE,8CAAM4R;AADP,AAAM,OAAA,mFAAQ,kDAAAD,lDAACrX,4CAAI5B;GAAnB,mFAAA,kEAAA;IAElBA,YAAM,iBAAAmZ,WAAS,AAAA,mFAAQ,AAAA,4FAAanZ;AAA9B,AAAA,wGAAAmZ,uCAAAA,vIAACzP,iDAAAA,2DAAAA;;IACPiK,qBAAS,kBAAI,iBAAA9O,mBAAImU;AAAJ,AAAA,oBAAAnU;AAAAA;;AACI,OAAA,4FAAa7E;;MADrB,MAEQ2T;AANvB,AAAA,0FAOG3T,UAAM2T;KATX,sBAAA,pBAWEA,uGACC,iBAAAyF,WAAS,AAAA,mFAAQpZ;AAAjB,AAAA,wGAAAoZ,uCAAAA,vIAAC1P,iDAAAA,2DAAAA;gCAZJ,8BAAA,8FAAA,aAAA,yBAAA,7LAY4BiK,6CAE1BmE,+FACCA,0CAED9X,0FACC,iBAAAqZ,WAAS,AAAA,mFAAQrZ;AAAjB,AAAA,wGAAAqZ,uCAAAA,vIAAC3P,iDAAAA,2DAAAA;gCAlBJ,AAAA,3BAkB4BiK;;cA1CrD,AAAA3P,4CAAAwU,WAAA,IAAA,rEAwBOO;yBAxBP,AAAA/U,4CAAAwU,WAAA,IAAA,hFAwBe7E;AAxBf,AA+CE,oBAAMoF;AAAN,AACE,oDAAA,yDAAA,2CAAA,iFAAA,gEAAA,KAAA,9SAACxF,uFAA0BwF,QAAQrF,uHAAqBC,+KAEaE;;AACrE,oBAAMuE;AAAN,AACE,oBAAI,iBAAA/T,oBAAKwP;AAAL,AAAA,oBAAAxP;AACK,OAAC2N,4BAAc,AAAA,kGAAgB8F;;AADpCzT;;;AAEF,WAAA,XAACiV;AAAD,AAAgB,yFAAA,lFAAClQ,uEAAY0O,4DAAgB,AAAA,6FAAaA;GAA1D;;AACA,WAAA,XAACwB;AAAD,AAAgB,4FAAA,rFAAClQ,uEAAYsK,+DAAe,AAAA,6FAAaA;GAAzD;;;AAJJ;;AAKAA;;AATF;;;AAhDJ;;;AAPJ;;;AAkEF,AAAA,sEAAA,8EAAAlQ,pJAAMgW;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kGAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kGAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7V,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oGAAA,pGAAM6V,+GACFC;AADJ,AAEG,oHAAA,7GAACC,kGAAuCD;;;AAF3C,CAAA,oGAAA,pGAAMD,+GAGFC,WAAWhH;AAHf,AAIG,GAAM,EAAK,OAASgH,6BACT,GAAK,AAACzH,4BAAcyH;AAD/B,AAEE,sCAAA,mFAAA,lHAACvH,mLAA+BuH,WAAWhH;;AAF7C;;;;AAJH,CAAA,8FAAA,9FAAM+G;;AAAN,AAQA,2CAAA,3CAAMG,8FACHrL,WAAWzM,OAAOiM;AADrB,AAEE,IAAMvJ,UAAQ,gDAAA,hDAACuU,yCAA2BjX,UAAUyM;IAC9CzD,OAAK,AAAC+O,wDAAuCtL,WACA,iBAAAuL,WAAW,AAACzU;AAAZ,AAAA,4GAAAyU,yCAAAA,7IAACC,mDAAAA,6DAAAA;KACD,AAACC;AAHpD,AAAA,+CAAA,2EAAA,+DAAA,yEAAA,8DAAA,+DAAA,sFAAA,mEAAA,oEAAA,kEAAA,+DAAA,KAKe,AAAC1E,2BACK/G,qBACM,AAAC0L,eAAK1L,pBAClBzD,LACAiD,qCACEjM,OACC0C,QACDuJ,KACFA;;AAEjB,0DAAA,kEAAAmM,5HAAME,qIAC+C5V;AADrD,AAAA,IAAA2V,aAAAD;IAAAC,iBAAA,AAAAvY,4BAAAuY;YAAAA,RAC8Cla;sBAD9C,AAAA4B,4CAAAsY,eAAA,7EACiBE;aADjB,AAAAxY,4CAAAsY,eAAA,pEAC2BG;aAD3B,AAAAzY,4CAAAsY,eAAA,pEACkCrY;AADlC,AAEE,oBAAIuY;AACF,IAAME,gBAAc,AAACC,yCAAgCva;IAC/Cwa,eAAa,AAACC,wCAA+Bza;IAC7CuE,cAAQ,iBAAAmW,WAAS,yFAAA,zFAAC5P,+CAAO6P,6HAAoBL,cAAcE;IAAnDE,eAAA,EAAA,CAAAA,YAAA,OAAA,KACS,AAACpP,4CAAI,WAAKsP;AAAL,AAAA,0FACG,AAACC,2EAAyBD,IAC1B,AAACE,8CAA6BF;GAFtCF;AADT,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAIS,OAACK,+CAAO,uBAAAC,ZAAKzW;AAAL,AAAA,IAAA0W,aAAAD;UAAA,AAAAhX,4CAAAiX,WAAA,IAAA,jEAAcC;WAAd,AAAAlX,4CAAAiX,WAAA,IAAA,lEAAkBE;AAAlB,AACE,OAACnT,uBAAezD,YAAQ2W,IAAIC;WADtCT,RAEQnW;;;IACzBA,cAAQ,AAAC6W,6BACA7W,YAAQ8V,OACR,iBAAAgB,WAAMhB;AAAN,AAAA,QAAAgB;KAAA;AAAA;;;KAAA;AAAA;;;;AAOEhB;;;;IACX9V,cAAQ,AAAC6I,8BAAgBvL,OAAO0C;IAChCA,cAAQ,sDAAA,tDAAC+W,mCACAzZ,OAAO0C,sBACP,AAACgL,0DAAY,kHAAA,jHAAK,wGAAA,IAAA,1GAAI,6CAAA,7CAACrO,6FAAOW,iHAEjBwY,OACA,AAACkB;AAzB7B,AA0BEhX;;AACFA;;;AAEJ,gCAAA,wCAAAiX,xEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA9Z,4BAAA8Z;YAAAA,RACoDzb;aADpD,AAAA4B,4CAAA6Z,eAAA,pEACiBpB;cADjB,AAAAzY,4CAAA6Z,eAAA,rEACwBlX;sBADxB,AAAA3C,4CAAA6Z,eAAA,7EACgCrB;WADhC,AAAAxY,4CAAA6Z,eAAA,lEAC0C1N;AAD1C,AAEE,IAAMf,cAAY,4CAAA,5CAACoO,6BAAqB7W,QAAQ8V;IAC1CrN,kBAAY,kBAAIoN,iBACF,AAACD,wDAA2Bna,MAAMuE,SAClCyI;IACd2O,WAAS,AAACxb;AAJhB,AAKE,oBAAI,iBAAAkE,oBAAKsX;AAAL,AAAA,oBAAAtX;AACK,OAACuX,gCAAkBD,SAAS,4CAAK5N;;AADtC1J;;;AAEF,OAACxB,oEAAwB8Y,SAAS3O;;AAClC,OAACuF,kFAAuBvS,MAAMgN;;;AAEpC,kCAAA,0CAAA6O,5EAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAna,4BAAAma;YAAAA,RACmC9b;cADnC,AAAA4B,4CAAAka,eAAA,rEACiBvX;WADjB,AAAA3C,4CAAAka,eAAA,lEACyB/N;AADzB,AAEE,IAAMsM,SAAO,6IAAA,QAAA,nJAAI,6CAAA,7CAACnZ,iGAAO,AAAC8a;IAGpBhP,cAAY,qCAAA,rCAACoO,6BAAqB7W,eAAe8V;IACjDsB,WAAS,AAACxb;AAJhB,AAKE,oBAAI,iBAAAkE,oBAAKsX;AAAL,AAAA,oBAAAtX;AACK,OAACuX,gCAAkBD,SAAS,4CAAK5N;;AADtC1J;;;AAEF,OAACxB,oEAAwB8Y,SAAS3O;;AAClC,OAACuF,kFAAuBvS,MAAMgN;;;AAEpC,8CAAA,9CAAMiP;AAAN,AAEE,OAACC,iDAAS,AAAC1V,cAAI,AAAC2V;;AAElB,AAAA;;;;qCAAA,6CAAA3Y,lFAAM6Y;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1Y,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAM0Y,8EAGFrc;AAHJ,AAIG,8EAAA,vEAACwc,iEAAWxc;;;AAJf,CAAA,mEAAA,WAAAsc,9EAAMD,uFAK8C7P;AALpD,AAAA,IAAA+P,aAAAD;IAAAC,iBAAA,AAAA5a,4BAAA4a;YAAAA,RAK6Cvc;aAL7C,AAAA4B,4CAAA2a,eAAA,pEAKkBlC;cALlB,AAAAzY,4CAAA2a,eAAA,rEAKyBhY;aALzB,AAAA3C,4CAAA2a,eAAA,pEAKiC1a;AALjC,AAMG,IAAA4a,aAAsB,AAACC,kCAAoBnY,QAAQ8V,OAAO7N,WAAW3K,OAAO,AAACma;kBAA7E,AAAAhY,4CAAAyY,WAAA,IAAA,zEAAOzP;QAAP,AAAAhJ,4CAAAyY,WAAA,IAAA,/DAAmBxR;AAAnB,AACE,OAACsH,kFAAuBvS,MAAMgN;;;AAPnC,CAAA,6DAAA,7DAAMqP;;AAAN,AASA,4CAAA,5CAAMM;AAAN,AAEE,IAAA5c,qBAAkB,AAACyG,cAAI,AAACyV;AAAxB,AAAA,GAAAlc;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMwW,0EAAS,AAACV,iDAAS,4CAAA,WAAAW,vDAACvR,rHAEX,AAACS,+CAAOC;AAFE,AAAM,IAAAjM,yBAAc,gBAAA8c,iBAAA,jCAACC;AAAf,AAAA,oBAAA/c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAACqX,eAAKrX;;AADR;;GACaU;AAD5C,AAGE,IAAA4W,aAAA,AAAAxW,cAAWoW;IAAXK,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,SAAA,AAAAD,kDAAAE,vDAAQzX;AAAR,AAAA,AACE,IAAM1F,cAAM,iBAAAod,WAAA,mFAAA,+DAAsB1X;AAAtB,AAAA,wGAAA0X,uCAAAA,vIAAC1T,iDAAAA,2DAAAA;;AAAb,AACE,AAAC8S,iEAAWxc;;AAFhB;AAAA,eAAAgd;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAApd,yBAAA,AAAAyG,cAAAwW;AAAA,AAAA,GAAAjd;AAAA,AAAA,IAAAid,iBAAAjd;AAAA,AAAA,GAAA,AAAA6G,6BAAAoW;AAAA,IAAAnW,kBAAA,AAAAC,sBAAAkW;AAAA,AAAA,eAAA,AAAAjW,qBAAAiW;eAAAnW;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,SAAA,AAAAG,gBAAAgW,rBAAQtX;AAAR,AAAA,AACE,IAAM1F,cAAM,iBAAAqd,WAAA,mFAAA,+DAAsB3X;AAAtB,AAAA,wGAAA2X,uCAAAA,vIAAC3T,iDAAAA,2DAAAA;;AAAb,AACE,AAAC8S,iEAAWxc;;AAFhB;AAAA,eAAA,AAAAiH,eAAA+V;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAJJ;;;AAQF,2CAAA,3CAAMM;AAAN,AAGE,IAAAC,qBAAgB,AAAC/W,cAAI,AAACyV;AAAtB,AAAA,GAAAsB;AAAA,aAAAA,TAASnX;AAAT,AACE,OAACuW;;AACD,oBAAM,AAAC1c;AAAP,AACE,IAAM0J,gBAAc,AAACxJ;IACfsd,gBAAc,AAACpd,oBAAgBsJ;IAC/BpF,UAAQ,AAACmZ;IACT7b,SAAO,iBAAAgD,mBAAI,iBAAA8Y,WAAoB,AAAC/I;AAArB,AAAA,8HAAA+I,kDAAAA,xKAAC9E,4DAAAA,sEAAAA;;AAAL,AAAA,oBAAAhU;AAAAA;;AACI,OAAC+N;;;IAJlB4K,aAK2B,0CAAA,KAAA,/CAACd,kCAAoBnY,kBAAgB1C,OAAO,AAACma;kBALxE,AAAAhY,4CAAAwZ,WAAA,IAAA,zEAKOxQ;aALP,AAAAhJ,4CAAAwZ,WAAA,IAAA,pEAKmBnD;IACbuD,UAAQ,AAACC,uDACAtZ,QAAQ8V,OAAO,AAACnW,yBAAWuZ;AAP1C,AAQE,AAAC5a,oEAAwB8G,cAAcqD;;AACvC,OAACjK,oCAAsB0a,cAAcG;;AAVzC;;;;AAYJ,uCAAA,+CAAAE,tFAAME,+FACwCE;AAD9C,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAApc,4BAAAoc;YAAAA,RACuC/d;eADvC,AAAA4B,4CAAAmc,eAAA,tEACiBE;cADjB,AAAArc,4CAAAmc,eAAA,rEAC0BxZ;AAD1B,AAEE,IAAMyI,cAAY,AAACoO,6BAAqB7W,QACA,0DAAA,1DAACgL,oHAAoB0O,eACrB,0DAAA,1DAAC1O,oHAAoB2O;AAF7D,AAGE,OAAC3L,kFAAuBvS,MAAMgN;;AAElC,+CAAA,/CAAMmR;AAAN,AAEE,oBAAM,AAACle;AAAP,AACE,IAAM4B,SAAO,iBAAAgD,mBAAI,iBAAAuZ,WAAoB,AAACxJ;AAArB,AAAA,8HAAAwJ,kDAAAA,xKAACvF,4DAAAA,sEAAAA;;AAAL,AAAA,oBAAAhU;AAAAA;;AACI,OAAC+N;;;IACZ+I,WAAS,AAACxb;IACVoE,UAAQ,AAACmZ;IACTQ,eAAa,AAACG,4CAA8B9Z;IAC5C3B,YAAU,AAAC0b,8CAAgC/Z,QAAQ1C,OAAOqc;AALhE,AAME,OAACrb,oEAAwB8Y,SAAS/Y;;AAPtC;;;AASF,iDAAA,yDAAA2b,1GAAME,mHACkCE;AADxC,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAA7c,4BAAA6c;aAAAA,TACgCE;WADhC,AAAA9c,4CAAA4c,eAAA,lEACiBzQ;WADjB,AAAAnM,4CAAA4c,eAAA,lEACsB7L;AADtB,AAEE,IAAMA,WAAK,iBAAA9N,mBAAI8N;AAAJ,AAAA,oBAAA9N;AAAAA;;AAAS,OAACO;;;IACfpF,QAAM,iBAAA4e,WAASjM;IAATkM,WAAA,AAAA;IAAAC,WAAA,mFAAA,+DAAgC/Q;AAAhC,AAAA,wGAAA6Q,SAAAC,SAAAC,uCAAAF,SAAAC,SAAAC,3KAACpV,iDAAAA,6EAAAA;;AADb,AAEE,oBAAM1J;AAAN,AACE,IAAAyQ,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,0DAAA,iGAAA,2CAAA,/LAACwO,sIAA8Bjf,yHAAmB2e;;AAFpD,IAAAI,+CAAArO;IAAAsO,+CAAA,AAAAlO,qBAAA;AAAA,AAAA,CAAAJ,8DAAAsO;;AAAA,IAAA,AAEE,mDAAA,iGAAA,2CAAA,/LAACC,sIAA8Bjf,yHAAmB2e;;AAFpD,IAAA5N,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAAqO;;;AADF;;;AAKJ,6CAAA,7CAAOG,kGACJvM,KAAKwM,cAActd,OAAO6D,GAAGhF;AADhC,AAEE,oBAAM,iBAAA2D,oBAAKsO;AAAL,AAAA,oBAAAtO;AAAU8a;;AAAV9a;;;AAAN,AACE,IAAAtE,qBAA4B,8BAAA,9BAAC+c,gBAASqC;AAAtC,AAAA,oBAAApf;AAAA,AAAA,uBAAAA,nBAAWqf;AAAX,AACE,IAAArf,yBAAiB,iBAAAsf,WAAS1M;IAAT2M,WAAA,AAAA;IAAAC,WAAA,mFAAA,+DAAgC,AAACxC,eAAKqC;AAAtC,AAAA,wGAAAC,SAAAC,SAAAC,uCAAAF,SAAAC,SAAAC,3KAAC7V,iDAAAA,6EAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMwf,mBAAiB,AAACC,wBAAe,AAAA,kGAAgBzf;IACjD0f,yDAAW,AAAC1V,kDAAoCnI,OAAO2d,7FAC5C,AAACvV;IACZrH,YAAU,6CAAK8c,gEAAOhf;IACtB4I,WAAS,AAACvI,gBAAML;IAChBoF,MAAI,iBAAA7D,kBACC,uHAAA,rGAAIud,kBACF,AAACG,gCAAY,AAACC,gCAAYJ;IAF7Btd,kBAAA;AAAA,AAAA,SAAAD,kBAAAC,mBAAAD,kBAAAC;;AALV,AAUE,2FAAA,2CAAA,iFAAA,qEAAA,qEAAA,1VAACkH,uEAAYpJ,MAAM8F,IAAIJ,qHACO9C,sEACN0G;;AAb5B;;;AADF;;;AADF;;;AAkBF,AAAA,6CAAA,qDAAA9F,lGAAMsc;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAnc,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMmc,sFACFnN;AADJ,AAEG,qFAAA,9EAACoN,yEAAcpN;;;AAFlB,CAAA,2EAAA,3EAAMmN,sFAGFnN,KAAKqN;AAHT,AAIG,mCAAA,nCAAC3I;;AACD,IAAA4I,mBAAyD,AAAC3J;IAA1D2J,uBAAA,AAAAte,4BAAAse;eAAA,AAAAre,4CAAAqe,qBAAA,5EAAcva;qBAAd,AAAA9D,4CAAAqe,qBAAA,lFAAiBlb;4BAAjB,AAAAnD,4CAAAqe,qBAAA,zFAA0BvJ;kBAA1B,AAAA9U,4CAAAqe,qBAAA,/EAA0Cvf;mBAA1C,AAAAkB,4CAAAqe,qBAAA,hFAAgDpe;AAAhD,AACE,oBAAMkD;AAAN,AACE,IAAMmb,gBAAQ,AAAA,mFAAQ,AAAA,2FAAa,iBAAAC,WAAA,mFAAA,+DAAwBpb;AAAxB,AAAA,4GAAAob,yCAAAA,7IAAClb,mDAAAA,6DAAAA;;IAC9Bmb,0BAAkB,iBAAA/b,oBAAK6b;AAAL,AAAA,oBAAA7b;AAAa,QAACgc,kEAAAA,sFAAAA,tBAAyB1N,kEAAAA,7DAAKuN,kEAAAA;;AAA5C7b;;;AADxB,AAEE,GAAM,2BAAA,1BAAG+b;AAAT,AACE,IAAMpgB,cAAM,iBAAAsgB,WAAA,mFAAA,+DAAwBvb;AAAxB,AAAA,4GAAAub,yCAAAA,7IAACrb,mDAAAA,6DAAAA;;IACP8O,4BAAc,AAACvN,cAAI,AAAA,kGAAgBxG;IACnCA,kBAAM,iBAAAugB,WAAS,AAAA,mFAAQvgB;AAAjB,AAAA,wGAAAugB,uCAAAA,vIAAC7W,iDAAAA,2DAAAA;;IACPmE,aAAK,AAAC2S,yCAAe,AAACC,qCAAoBzgB;IAC1C0gB,iCAAmB,iBAAArc,oBAAKwJ;AAAL,AAAA,oBAAAxJ;AACK,IAAAtE,qBAAoB,AAAA,6FAAa,AAAA,mFAAO8N;AAAxC,AAAA,oBAAA9N;AAAA,AAAA,mBAAAA,fAAWgF;AAAX,AACE,IAAM/E,YAAM,iBAAA2gB,WAAA,mFAAA,+DAAwB5b;AAAxB,AAAA,4GAAA4b,yCAAAA,7IAAC1b,mDAAAA,6DAAAA;;AAAb,AACE,OAACuB,cAAI,AAAA,kGAAgBxG;;AAFzB;;;AADLqE;;;AAJzB,AAQE,oBAAU,iBAAAA,oBAAK0P;AAAL,AAAA,GAAA1P;AAAmBqc;;AAAnBrc;;;AAAV;AAAA,AACE,oBAAMqS;AAAN,AACE,IAAMkK,qBAAa,AAACvgB,oBAAgBqW;IAC9ByI,sBAAc,AAAC0B,qDAA4CD;AADjE,AAEE,AAACnC,+CAAkBze,gBAAMggB;;AACzB,AAACd,2CAAmBvM,KAAKwM,oBAActd,aAAO6D,SAAGhF;;AAJrD;;;AAVN;;AAHJ;;AAkBF,0CAAA,nCAAC2W;;;AAxBJ,CAAA,qEAAA,rEAAMyI;;AAAN,AA0BA,8CAAA,9CAAMgB,oGACHnO,KAAKoO,YAAY3a,OAAO4a;AAD3B,AAEE,GAAM,AAACxa,cAAIua;AAAX,AACE,IAAME,qBAAgB,AAACC,iBAAOH,YAAYC;IACpChhB,QAAM,AAACgH,gBAAMZ;IACbwa,eAAa,AAAChf,4CAAIqf,mBAAgB,AAAA,6FAAajhB;IAC/Cmf,gBAAc,gCAAA,mEAAA,jFAAMyB,cAAa,AAACC,qDAA4CD;AAHpF,AAIE,IAAAnQ,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,0DAAA,1DAACwO,mDAA6B7Y;;AAFhC,IAAA+a,qDAAAzQ;IAAA0Q,qDAAA,AAAAtQ,qBAAA;AAAA,AAAA,CAAAJ,8DAAA0Q;;AAAA,IAAA,AAEE,0DAAA,1DAACnC,mDAA6B7Y;;AAFhC,IAAA2K,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAyQ;;;AAGA,oBAAMhC;AAAN,AACE,iNAAA,1MAACD,2CAAmBvM,KAAKwM,cACL,AAAA,iGAAenf,OACf,8BAAA,9BAAC8c,gBAASqC;;AAHhC;;;AARJ;;;AAcF;;;yDAAA,zDAAOkC,0HAEJC;AAFH,AAIE,IAAAvhB,qBAAgB,AAACqF;AAAjB,AAAA,oBAAArF;AAAA,AAAA,WAAAA,PAAW4S;AAAX,AACE,IAAAlC,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,wEAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,IAAAgR,mBAAA,AAAAjb,cAA6B8a;IAA7BI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;qBAAA,AAAA5d,4CAAA6d,iBAAA,IAAA,lFAAS9c;gBAAT,AAAAf,4CAAA6d,iBAAA,IAAA,7EAAkBQ;kBAAlB,AAAAre,4CAAA6d,iBAAA,IAAA,/EAAsBnhB;AAAtB,AAAA,AACE,IAAMqE,qBAAS,EAAI,OAASA,6BAAU,AAACgY,eAAKhY,gBAAUA;AAAtD,AACE,IAAAhF,+BAAiB,iBAAAuiB,WAAA,mFAAA,+DAAwBvd;AAAxB,AAAA,4GAAAud,yCAAAA,7IAACrd,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM6B,eAAO,AAAA,iGAAe7B;IACtBuE,gBAAQ,AAAA,kGAAgBvE;IACxBsO,mBAAW,AAAA,uGAAmBtO;IAC9BsO,uBAAW,EAAI,gBAAA,fAAM5N,sBACR,AAACmP,+CAAOvB,iBAAW+T,WACnB,AAAClW,8CAAMmC,iBAAW+T,UAAI3hB;IACnC6D,oBAAQ,EAAI,gBAAA,fAAM7D,sBACR,AAACgiB,qEAAyB7gB,aAAOwgB,UAAI9d,eACrC,AAACoe,qEAAyB9gB,aAAO0C,cAAQ8d,UAAI3hB;IACvD6D,oBAAQ,AAACqe,+CAAiCre;sBAThD,2CAAA,kFAAA,8FAAA,7OAUMvE,4HAAmB+E,4FACMuJ,yFACH/J;AAZ5B,AAaE,AAACmN,gDAA0B1R;;AAd/B;;AAFJ;AAAA,eAAAyhB;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA7hB,+BAAA,AAAAyG,cAAAib;AAAA,AAAA,GAAA1hB;AAAA,AAAA,IAAA0hB,uBAAA1hB;AAAA,AAAA,GAAA,AAAA6G,6BAAA6a;AAAA,IAAA5a,wBAAA,AAAAC,sBAAA2a;AAAA,AAAA,eAAA,AAAA1a,qBAAA0a;eAAA5a;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,IAAAib,mBAAA,AAAA9a,gBAAAya;qBAAA,AAAAzd,4CAAA8d,iBAAA,IAAA,lFAAS/c;gBAAT,AAAAf,4CAAA8d,iBAAA,IAAA,7EAAkBO;kBAAlB,AAAAre,4CAAA8d,iBAAA,IAAA,/EAAsBphB;AAAtB,AAAA,AACE,IAAMqE,qBAAS,EAAI,OAASA,6BAAU,AAACgY,eAAKhY,gBAAUA;AAAtD,AACE,IAAAhF,+BAAiB,iBAAAwiB,WAAA,mFAAA,+DAAwBxd;AAAxB,AAAA,4GAAAwd,yCAAAA,7IAACtd,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM6B,eAAO,AAAA,iGAAe7B;IACtBuE,gBAAQ,AAAA,kGAAgBvE;IACxBsO,mBAAW,AAAA,uGAAmBtO;IAC9BsO,uBAAW,EAAI,gBAAA,fAAM5N,sBACR,AAACmP,+CAAOvB,iBAAW+T,WACnB,AAAClW,8CAAMmC,iBAAW+T,UAAI3hB;IACnC6D,oBAAQ,EAAI,gBAAA,fAAM7D,sBACR,AAACgiB,qEAAyB7gB,aAAOwgB,UAAI9d,eACrC,AAACoe,qEAAyB9gB,aAAO0C,cAAQ8d,UAAI3hB;IACvD6D,oBAAQ,AAACqe,+CAAiCre;sBAThD,2CAAA,kFAAA,8FAAA,7OAUMvE,4HAAmB+E,4FACMuJ,yFACH/J;AAZ5B,AAaE,AAACmN,gDAA0B1R;;AAd/B;;AAFJ;AAAA,eAAA,AAAAiH,eAAAwa;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAFF,IAAAF,qDAAA7Q;IAAA8Q,qDAAA,AAAA1Q,qBAAA;AAAA,AAAA,CAAAJ,8DAAA8Q;;AAAA,IAAA,AAEE,IAAAO,mBAAA,AAAAvb,cAA6B8a;IAA7BU,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;qBAAA,AAAAle,4CAAAme,iBAAA,IAAA,lFAASpd;gBAAT,AAAAf,4CAAAme,iBAAA,IAAA,7EAAkBE;kBAAlB,AAAAre,4CAAAme,iBAAA,IAAA,/EAAsBzhB;AAAtB,AAAA,AACE,IAAMqE,qBAAS,EAAI,OAASA,6BAAU,AAACgY,eAAKhY,gBAAUA;AAAtD,AACE,IAAAhF,+BAAiB,iBAAAyiB,WAAA,mFAAA,+DAAwBzd;AAAxB,AAAA,4GAAAyd,yCAAAA,7IAACvd,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM6B,eAAO,AAAA,iGAAe7B;IACtBuE,gBAAQ,AAAA,kGAAgBvE;IACxBsO,mBAAW,AAAA,uGAAmBtO;IAC9BsO,uBAAW,EAAI,gBAAA,fAAM5N,sBACR,AAACmP,+CAAOvB,iBAAW+T,WACnB,AAAClW,8CAAMmC,iBAAW+T,UAAI3hB;IACnC6D,oBAAQ,EAAI,gBAAA,fAAM7D,sBACR,AAACgiB,qEAAyB7gB,aAAOwgB,UAAI9d,eACrC,AAACoe,qEAAyB9gB,aAAO0C,cAAQ8d,UAAI3hB;IACvD6D,oBAAQ,AAACqe,+CAAiCre;sBAThD,2CAAA,kFAAA,8FAAA,7OAUMvE,4HAAmB+E,4FACMuJ,yFACH/J;AAZ5B,AAaE,AAACmN,gDAA0B1R;;AAd/B;;AAFJ;AAAA,eAAA+hB;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAniB,+BAAA,AAAAyG,cAAAub;AAAA,AAAA,GAAAhiB;AAAA,AAAA,IAAAgiB,uBAAAhiB;AAAA,AAAA,GAAA,AAAA6G,6BAAAmb;AAAA,IAAAlb,wBAAA,AAAAC,sBAAAib;AAAA,AAAA,eAAA,AAAAhb,qBAAAgb;eAAAlb;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,IAAAub,mBAAA,AAAApb,gBAAA+a;qBAAA,AAAA/d,4CAAAoe,iBAAA,IAAA,lFAASrd;gBAAT,AAAAf,4CAAAoe,iBAAA,IAAA,7EAAkBC;kBAAlB,AAAAre,4CAAAoe,iBAAA,IAAA,/EAAsB1hB;AAAtB,AAAA,AACE,IAAMqE,qBAAS,EAAI,OAASA,6BAAU,AAACgY,eAAKhY,gBAAUA;AAAtD,AACE,IAAAhF,+BAAiB,iBAAA0iB,WAAA,mFAAA,+DAAwB1d;AAAxB,AAAA,4GAAA0d,yCAAAA,7IAACxd,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM6B,eAAO,AAAA,iGAAe7B;IACtBuE,gBAAQ,AAAA,kGAAgBvE;IACxBsO,mBAAW,AAAA,uGAAmBtO;IAC9BsO,uBAAW,EAAI,gBAAA,fAAM5N,sBACR,AAACmP,+CAAOvB,iBAAW+T,WACnB,AAAClW,8CAAMmC,iBAAW+T,UAAI3hB;IACnC6D,oBAAQ,EAAI,gBAAA,fAAM7D,sBACR,AAACgiB,qEAAyB7gB,aAAOwgB,UAAI9d,eACrC,AAACoe,qEAAyB9gB,aAAO0C,cAAQ8d,UAAI3hB;IACvD6D,oBAAQ,AAACqe,+CAAiCre;sBAThD,2CAAA,kFAAA,8FAAA,7OAUMvE,4HAAmB+E,4FACMuJ,yFACH/J;AAZ5B,AAaE,AAACmN,gDAA0B1R;;AAd/B;;AAFJ;AAAA,eAAA,AAAAiH,eAAA8a;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAFF,IAAAhR,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAA6Q;;;AAoBA,IAAMxc,WAAS,AAACgK,iBAAOuS;IACjBvc,eAAS,EAAI,OAASA,uBAAU,AAACgY,eAAKhY,UAAUA;IAChD8d,YAAU,iBAAAhe,mBAAI,AAACie;AAAL,AAAA,oBAAAje;AAAAA;;AAAA;;;AAFhB,AAIE,IAAA9E,yBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAWgjB;AAAX,AACE,GAAM,AAAC7hB,6CAAE,AAAA,6FAAa6hB,eAAehe;AAArC,AACE,OAACqE,uEAAY2Z,cACAF,UACA,AAAC1iB;;AAHhB;;;AADF;;;AAzBJ;;;AA+BF,sDAAA,tDAAM6iB,oHACHje,SAASsd;AADZ,AAEE,IAAMA,UAAI,AAACY,gDAAQZ;AAAnB,AACE,8DAAA,mFAAA,oGAAA,9OAAChB,6NAA4Btc,SAASsd;;AAE1C,mDAAA,nDAAMa,8GACHne,SAASsd,IAAI3hB;AADhB,AAEE,IAAM2hB,UAAI,AAACY,gDAAQZ;AAAnB,AACE,8DAAA,mFAAA,1IAAChB,6NAA4Btc,SAASsd,QAAI3hB;;AAE9C,2DAAA,3DAAMyiB,8HACHpe,SAASqe,eAAef,IAAIgB;AAD/B,AAEE,IAAAtjB,qBAAiB,iBAAAujB,WAAA,mFAAA,+DAAwBve;AAAxB,AAAA,4GAAAue,yCAAAA,7IAACre,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMujB,4DAAqB,qDAAA,mFAAA,yEAAA,qFAAA,tSAAC3R,+CAAO5R,xFACR,mVAAA,nVAACwjB;IACtBD,uBAAiB,EAAI,AAAC/c,cAAI+c,mBACPA,iBACAH;IACnBG,uBAAiB,kBAAIF,YACF,AAACnH,iDAAS,AAAC9P,6CAAKmX,qBAAiBlB,MACjC,+CAAA,/CAACtW,8FAASsW,MAAKkB;IAClCA,uBAAiB,AAACE,cAAIF;AAR5B,AASE,GAAI,AAAC/c,cAAI+c;AACP,iEAAA,1DAACL,iDAAoBne,sFAA2B,4CAAKwe;;AACrD,oEAAA,7DAACP,oDAAuBje;;;AAZ9B;;;AAcF,oDAAA,pDAAM2e,gHACH3e,SAASsd,IAAI3hB;AADhB,AAEE,IAAM2hB,UAAI,AAACvV,0BAAkBuV;IACvBtd,eAAS,EAAI,OAASA,uBAAU,AAACgY,eAAKhY,UAAUA;IAChDsd,UAAI,AAACvV,0BAAuBuV;IAC5B3hB,YAAM,4CAAKA;AAHjB,AAIE,IAAAX,qBAAiB,iBAAA4jB,WAAA,mFAAA,+DAAsB5e;AAAtB,AAAA,wGAAA4e,uCAAAA,vIAACja,iDAAAA,2DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAA4jB,aAA8B5jB;IAA9B4jB,iBAAA,AAAAjiB,4BAAAiiB;cAAA,AAAAhiB,4CAAAgiB,eAAA,rEAAoBrf;IACdA,cAAQ,iBAAAM,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAY,OAAC6Y;;;IACrB1Q,qDAAgB,AAAC6W,0CAAsBtf,YAAQ8d,7FAC/B,AAACyB,sGAAmBzB,QAAI3hB;AAH9C,AAIE,GAAM,AAACG,gDAAK0D,YAAQyI;AAApB,AACE,IAAM2O,WAAS,AAACxb;AAAhB,AACE,oBAAI,iBAAAkE,oBAAKsX;AAAL,AAAA,oBAAAtX;AACK,OAACuX,gCAAkBD,SAAS,4CAAK5W;;AADtCV;;;AAEF,OAACxB,oEAAwB8Y,SAAS3O;;AAClC,OAACuF,kFAAuBvS,MAAMgN;;;AALpC;;;AALJ;;;AAYJ,8CAAA,9CAAO+W,oGACJC;AADH,AAEE,IAAMA,gBAAU,AAACjY,+CAAOC,qBAAKgY;IACvB1C,MAAI,AAAChW,4CAAI,WAAKvG;AAAL,AACE,IAAM/E,QAAM,iBAAAikB,WAAA,mFAAA,+DAAwBlf;AAAxB,AAAA,4GAAAkf,yCAAAA,7IAAChf,mDAAAA,6DAAAA;;AAAb,AACE,oBAAU,AAAA,yGAAmBjF;AAA7B;;AAAA,AAAA,mGAAA,TACG+E,2DAAa,4CAAKA;;GACzBif;AALf,AAME,OAAC3C,uDAA0BC;;AAE/B,AAAA,+CAAA,uDAAA9d,tGAAM2gB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxgB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAMwgB,wFACFpf;AADJ,AAEG,2FAAA,WAAAqf,/FAACC,2EAAgBtf;AAAjB,AAA2B,mDAAAqf;;;;AAF9B,CAAA,6EAAA,7EAAMD,wFAGFpf,SAASuf;AAHb,AAIG,4CAAA,5CAACP,+HAAgBhf;;AACjB,OAACwf,oEAAwB,CAACD,8CAAAA,wDAAAA,ZAAcvf,oCAAAA;;;AAL3C,CAAA,uEAAA,vEAAMof;;AAAN,AAOA,6CAAA,7CAAMK,kGACHre;AADH,AAEE,IAAMC,SAAO,AAACE,gCAAmC,4CAAKH;AAAtD,AACE,GAAM,AAACK,cAAIJ;AAAX,AACE,OAACqe,wFAA4Cre;;AAD/C;;;AAGJ,yDAAA,zDAAOse,0HACJ/R,KAAKqR;AADR,AAEE,IAAM5d,SAAO,+DAAA,AAAA,/DAACue,0DAAmBhS,kJAAU,AAAC9G,6CAAK,WAAKnG;AAAL,AAAA,0FAAA,+DAAsBA;GAAKse;IACtEY,mIAA2B,AAACC,oDAAmCze,/JACpC,4CAAA,5CAACkF;AAFlC,AAGE,OAACwZ,mDACAnS,KAAKiS,sBACL,AAACG,oDACD,6CAAA,7CAACC,8EAAQ,AAACC;;AAEf,gDAAA,hDAAMC;AAAN,AAEE,IAAAnlB,qBAAkB,AAACyG,cAAI,AAAC2V;AAAxB,AAAA,GAAApc;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMuM,OAAK,AAACvN;IACNwX,MAAI,AAACV,iDAAS,6CAAA,WAAAiJ,xDAACC;AAAD,AAAO,IAAArlB,yBAAc,gBAAAolB,iBAAA,jCAACrI;AAAf,AAAA,oBAAA/c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAACqX,eAAKrX;;AADR;;GACaU;IAClC7B,UAAQ,AAACmgB,uDAA+B/R,KAAKiK;IAC7C5c,QAAM,iBAAAqlB,WAAA,mFAAA,+DAAwB,AAACre,gBAAM4V;AAA/B,AAAA,4GAAAyI,yCAAAA,7IAACpgB,mDAAAA,6DAAAA;;AAJb,AAKE,oBAAMjF;AAAN,AACE,AAACslB,oEAAsD,AAAA,iGAAetlB,OAAOuE;;AAC7E,AAACghB,iCAAwBhhB,QAAQqY;;AACjC,8EAAA,UAAA,jFAAC5J;;AAHH;;;AANJ;;;AAWF,0CAAA,1CAAMwS;AAAN,AAEE,IAAAzlB,qBAA2B,AAACyG,cAAI,AAACyV;AAAjC,AAAA,GAAAlc;AAAA,AAAA,sBAAAA,lBAAW0lB;AAAX,AACE,IAAMrf,6EAAY,AAAC8V,iDAAS,4CAAA,WAAAwJ,vDAACpa,rHAKX,AAACS,+CAAOC;AALE,AAAM,IAAAjM,yBAAc,gBAAA2lB,iBAAA,jCAAC5I;AAAf,AAAA,oBAAA/c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,IAAMsI,QAAM,gBAAA0X,iBAAA,jCAAC5I;AAAb,AAAA,kDAAA,qEAAA,nBACO,AAACC,eAAKrX,2DACH,SAAA,RAAKsI;;AAHjB;;GAIDyX;IAE3B3d,cAAY,AAACd,gBAAMZ;IACnBuf,yBAAuB,AAAC5W,iBACA,AAACjE,+CAAO,WAAA8a;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA5hB,4CAAA6hB,WAAA,IAAA,/DAAM5a;YAAN,AAAAjH,4CAAA6hB,WAAA,IAAA,nEAAQ7lB;AAAR,AAAgB,gJAAA,zIAACkB,6CAAE,AAAA,qFAAQlB;GAC3B,AAAC8lB,oDAAYC,iBAAO3f;IACpD4f,aAAW,AAACvmB,6CAAK,AAAA,qFAAQqI;IACzBme,kBAAgB,AAACH,oDACA,iBAAAI,NAAKE;AAAL,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAxkB,4BAAAwkB;SAAA,AAAAvkB,4CAAAukB,eAAA,hEAAmBzgB;YAAnB,AAAA9D,4CAAAukB,eAAA,nEAAsBnY;AAAtB,AAAA,kDAAA,qDAAA,HACOtI,0DACG,EAAI,CAAG0gB,QAAMT,yBACX,EAAI,SAAA,AAAAU,RAAGrY,wBAAOgY,cACZ;AACE,AAACM,sBAAON,WAAWhY;;AADrB;;CAGA,yCAAA,xCAAK,SAAA,AAAAqY,RAAGrY,wBAAOgY,qBACjBhY;GACZ5H;IACjBpG,QAAM,iBAAAumB,WAAA,mFAAA,+DAAsB,AAAA,gFAAKze;AAA3B,AAAA,wGAAAye,uCAAAA,vIAAC7c,iDAAAA,2DAAAA;;IACP8c,WAAS,iBAAAC,WAASR;IAATQ,eAAA,EAAA,CAAAA,YAAA,OAAA,KACS,AAACnb,4CAAI,WAAAob;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAhlB,4BAAAglB;SAAA,AAAA/kB,4CAAA+kB,eAAA,hEAAajhB;YAAb,AAAA9D,4CAAA+kB,eAAA,nEAAgB3Y;AAAhB,AACE,IAAA4Y,cAAO1N;IAAP2N,cAAS,AAAA,iGAAe7mB;AAAxB,AAAA,oBAAA,CAAA4mB,4CAAAA,0CAAA,gDAAAC,eAAAD,sBAAA,gDAAAC;AAEE,OAACtX,0DAAY,8GAAA,7GAAK,AAACuX,kDAAY,qDAAA,rDAACzf,+CAAO2G,kFAAuBtI;;AAFhE,oBAAA,CAAAkhB,4CAAAA,0CAAA,6DAAAC,eAAAD,sBAAA,6DAAAC;AAIE,OAACtX,0DAAY,uHAAA,tHAAK,AAACuX,kDAAY,6DAAA,7DAACzf,+CAAO,SAAA,RAAK2G,2FAA0BtI;;AAJxE,MAAA,KAAA/B,MAAA,CAAA,mEAAAkjB;;;GADPJ;AADT,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAOS,yDAAA,OAAAA,zDAACK;;;AA9BzB,AA+BE,AAAC/C,4CAAe,4CAAA,5CAACzY,8FAAQlF;;AACzB,OAACme,oEAAwBiC;;AAjC7B;;;AAmCF,4CAAA,5CAAMO;AAAN,AAEE,IAAAhnB,qBAAkB,AAACyG,cAAI,AAACyV;AAAxB,AAAA,GAAAlc;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMwW,0EAAS,AAACV,iDAAS,4CAAA,WAAA8K,vDAAC1b,rHAEX,AAACS,+CAAOC;AAFE,AAAM,IAAAjM,yBAAc,gBAAAinB,iBAAA,jCAAClK;AAAf,AAAA,oBAAA/c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAACqX,eAAKrX;;AADR;;GACaU;IAEtC6gB,UAAQ,iBAAAC,WAAStK;IAATsK,eAAA,EAAA,CAAAA,YAAA,OAAA,KACS,AAAC5b,4CAAI,WAAK5F;AAAL,AAAS,iEAAA,1DAAC6J,+HAA+B7J;GAA9CwhB;AADT,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAES,yDAAA,OAAAA,zDAACJ;;;AALxB,AAME,AAAC/C,4CAAenH;;AAChB,OAAC2H,oEAAwB0C;;AAR7B;;;AAUF,4DAAA,5DAAME;AAAN,AAEE,IAAApnB,qBAAkB,AAACyG,cAAI,AAACyV;AAAxB,AAAA,GAAAlc;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMuM,OAAK,AAACvN;IACN4e,gFAAe,AAAC9H,iDAAS,4CAAA,WAAAkL,vDAAC9b,rHAEX,AAACS,+CAAOC;AAFE,AAAM,IAAAjM,yBAAc,gBAAAqnB,iBAAA,jCAACtK;AAAf,AAAA,oBAAA/c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAACqX,eAAKrX;;AADR;;GACaU;IAE5CA,aAAO,+DAAA,AAAA,/DAACue,0DAAmBhS,kJAAU,AAAC9G,6CAAK,WAAKnG;AAAL,AAAA,0FAAA,+DAAsBA;GAAKse;IACtE9D,UAAQ,AAAA,mFAAQ,AAAA,2FAAa,AAAClZ,gBAAMZ;IAEpCihB,eAAQ,AAACtb,+CAAO,WAAK/L;AAAL,AAAY,IAAAsnB,WAAQ,AAAA,mFAAQ,AAAA,2FAAatnB;AAA7B,AAAA,GAAA,CAAAsnB,YAAA;AAAA;;AAAqC,uDAAAA,hDAACzmB,yDAAKqf;;GAAW9Z;AAPxF,kHAQO,AAACye,oDAAmCwC,tKACpC,mDAAA,5CAAC/b;;AAVV;;;AAYF,+CAAA,/CAAMic,sGACHC;AADH,AAEE,oBAAMA;AAAN,AAAY,AAACtC;;AAAb;;AACA,IAAAnlB,qBAAkB,AAACyG,cAAI,AAACyV;AAAxB,AAAA,GAAAlc;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AAEE,IAAM4a,aAAW,AAACjV,+CAAO,WAAK/L;AAAL,AACF,SAAI,6CAAA,7CAACkB,oDAAS,sBAAA,tBAAC4b,gBAAS9c,+BACpB,6CAAA,7CAACkB,oDAAS,sBAAA,tBAAC4b,gBAAS9c;GAAuBoG;AAFtE,AAGE,GAAM,AAACI,cAAIwa;AAAX,AACE,IAAMrO,OAAK,AAACvN;IACN2b,cAAY,AAAC7E,iDAAS,4CAAA,WAAAuL,vDAACnc;AAAD,AAAM,OAACyR,eAAK,gBAAA0K,iBAAA,jCAAC3K;GAAuBkE;IAC1D0G,cAAY,AAACpc,4CAAI,WAAK5F;AAAL,AAAA,0FAAA,+DAAsBA;GAAKqb;IAC5C3a,aAAO,iBAAAuhB,WAAchV;IAAdiV,WAAA,AAAA;IAAAC,WAAwBH;AAAxB,AAAA,kHAAAC,SAAAC,SAAAC,4CAAAF,SAAAC,SAAAC,1LAACC,sDAAAA,kFAAAA;;AAHd,AAIE,sCAAA,tCAACC,2CAAiC3hB;;AAClC,OAAC0a,4CAAenO,KAAKoO,YAAY3a,WAAO4a;;AAN5C;;;AALJ;;;AAaF;;;oCAAA,pCAAKgH;AAIL,AAAA,yDAAA,iEAAAxkB,1HAAM8kB;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8FAAA,9FAAME,yGACHK,KAAK7iB,IAAM8iB;AADd,AAEE,mBAAA,fAAME;oBAAN,hBACMC;kBADN,dAEMC;IACAC,eAAa,AAACC,qBAAYJ,aAAaH;IACvCQ,gBAAc,AAACD,qBAAYH,cAAcJ;IACzCS,cAAY,AAACF,qBAAYF,YAAYL;IACrCU,qBAAmB,sDAAA,WAAAC,jEAACpY;AAAD,AAAS,4BAAAoY,rBAACJ,sCAAcP;qDAAMC;IACjDW,8EAAa,AAAChe,sDAAO0d,aAAaE,gEAAcC,YAAYC,nNAC/C,AAACtd,+CAAOC;IAR3B6c,aASgB,AAAC7hB,gBAAM,AAACyiB,gDACA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;gBAAA,AAAA1lB,4CAAA2lB,WAAA,IAAA,vEAAMC;cAAN,AAAA5lB,4CAAA2lB,WAAA,IAAA,rEAAgBplB;AAAhB,AACE,IAAMslB,UAAQ,CAAGD,YAAU,AAAC7oB,gBAAMwD;AAAlC,AACE,GACE,CAAGuB,MAAI8jB;AACP,QAAG9jB,MAAI8jB;;AAFT,GAIE,CAAG9jB,MAAI+jB;AACP,QAAGA,UAAQ/jB;;AALb,AAAA;;;;GASJgkB,eACAP;QAtBxB,AAAAvlB,4CAAA6kB,WAAA,IAAA,/DASO5d;YATP,AAAAjH,4CAAA6kB,WAAA,IAAA,nEASSW;AATT,AAuBE,oBAAMA;AAAN,AACE,oBACE,eAAA,WAAAO,1BAACC;AAAD,AAAO,yBAAAD,lBAACE,mCAAUT;GAAOZ;AACzBY;;AAFF,GAGE,wCAAA,xCAACU,kCAAoBV;AACrB,0DAAA,nDAAC1oB,6CAAK0oB,UAAQ,AAACzoB,gBAAMyoB;;AAJvB,AAME,0DAAA,nDAAC1oB,6CAAK0oB,UAAQ,0BAAA,zBAAG,AAACzoB,gBAAMyoB;;;;;AAP5B;;;;AAzBJ,CAAA,iFAAA,jFAAMlB;;AAAN;AAAA,CAAA,2EAAA,WAAAC,tFAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAxhB,gBAAAuhB;IAAAA,eAAA,AAAAthB,eAAAshB;IAAAE,WAAA,AAAAzhB,gBAAAuhB;IAAAA,eAAA,AAAAthB,eAAAshB;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAC,SAAAF;;;AAAA,AAkCA;;;kDAAA,lDAAO4B;AAAP,AAGE,IAAApqB,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAM,AAAA,6FAAaA;AAAnB,AACE,IAAAD,yBAAmB,AAACI;AAApB,AAAA,oBAAAJ;AAAA,AAAA,cAAAA,VAAWG;AAAX,AACE,IAAAH,yBAAiB,AAACM,oBAAgBH;AAAlC,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAAL,yBAAe,AAACmE,yBAAW9D;AAA3B,AAAA,oBAAAL;AAAA,AAAA,UAAAA,NAAW+F;AAAX,AACE,IAAMpF,QAAM,0DAAA,1DAACC,oDAASP;AAAtB,AACE,OAACgqB,4FAA+B1pB,MAAMoF,sDAAIkiB;;AAF9C;;;AADF;;;AADF;;;AADF;;;AADF;;;AAQF;;;2CAAA,3CAAOqC;AAAP,AAGE,IAAAtqB,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAM,AAAA,6FAAaA;AAAnB,AACE,IAAAD,yBAAmB,AAACI;AAApB,AAAA,oBAAAJ;AAAA,AAAA,cAAAA,VAAWG;AAAX,AACE,IAAAH,yBAAiB,AAACM,oBAAgBH;AAAlC,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAAL,yBAAe,AAACmE,yBAAW9D;AAA3B,AAAA,oBAAAL;AAAA,AAAA,UAAAA,NAAW+F;AAAX,AACE,IAAMpF,QAAM,0DAAA,1DAACC,oDAASP;AAAtB,AACE,OAACkoB,uDAA+B5nB,MAAMoF;;AAF1C;;;AADF;;;AADF;;;AADF;;;AADF;;;AAQF,yDAAA,zDAAMwkB;AAAN,AAEE,IAAAvqB,qBAAgB,AAACoqB;AAAjB,AAAA,oBAAApqB;AAAA,AAAA,WAAAA,PAAW+N;AAAX,AACE,GAAU,AAACkE,4BAAclE;AAAzB;;AAAA,AACE,oBAAI,AAACmc,kBAAQjC,kCAAUla;AACrB,OAACyc,YAAezc;;AAChB,IAAM0c,YAAU,AAACC,uEAAgC3c;AAAjD,AACE,AAAC4c;;AACD,OAAChR,kGAAuC8Q;;;;AANhD;;;AAQF,qDAAA,rDAAMG;AAAN,AAEE,IAAA5qB,qBAAgB,AAACsqB;AAAjB,AAAA,oBAAAtqB;AAAA,AAAA,WAAAA,PAAW+N;AAAX,AACE,IAAM0c,YAAU,AAAC1d,0BAAkBgB;IAC7B8c,eAAO,AAACC,iCAAkBL;AADhC,AAEE,IAAAzqB,yBAAgB,CAAC+qB,qDAAAA,gEAAAA,bAAYN,4CAAAA;AAA7B,AAAA,oBAAAzqB;AAAA,AAAA,eAAAA,XAAW+N;AAAX,AACE,oBAAI8c;AACF,6KAAA,tKAACzlB,uCACA,AAACC,kCACD,AAAA,mFAAQ0I;;AAET,6KAAA,tKAAC3I,uCACA,AAACC,kCACD,AAAA,mFAAQ0I;;;AARb;;;AAHJ;;;AAcF,wCAAA,xCAAMid;AAAN,AACE,oBAAI,AAACC;AACH,IAAAjrB,qBAAc,iBAAAkrB,WAAQ,AAAChrB;IAATgrB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,6FAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAEQ,AAAC,WAAKvlB;AAAL,AAAA,0FAAA,+DAAsBA;GAAvBulB;IAFRA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,qGAAAA,6CAAAA,jJAGQhmB,mDAAAA,iEAAAA;AAHR,AAAA,GAAA,CAAAgmB,gBAAA;AAAA;;AAAA,OAAA,6FAAAA;;;AAAd,AAAA,oBAAAlrB;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AAKE,IAAMI,MAAI,AAACgd;AAAX,AACE,AAACoI,4EAAgCxlB;;AACjC,kBAAA,XAAC4T;AAAD,AAAgB,8EAAA,2CAAA,lHAAClQ,iLAAyB1D,WAAII,IAAIJ;GAAlD;;AAPJ;;;AAQA,OAACylB;;;AAEL,yCAAA,zCAAMC;AAAN,AAEE,oBAAI,AAACJ;AACH,IAAMld,OAAK,AAAC8G;IACN7P,WAAS,iBAAAV,oBAAK,OAASyJ;AAAd,AAAA,GAAAzJ;AAAoB,OAACgG,qBAAWyD;;AAAhCzJ;;;AADf,AAEE,oBAAMU;AAAN,AACE,IAAM6b,eAAa,CAACyK,6DAAAA,uEAAAA,ZAAoBtmB,mDAAAA;AAAxC,AACE,IAAAwY,qBAAY,iBAAAlZ,oBACC,8GAAA,7GAAM,AAAA,4FAAauc;AADpB,AAAA,GAAAvc;AAEC,OAAA,6FAAauc;;AAFdvc;;;AAAZ,AAAA,oBAAAkZ;AAAA,SAAAA,LAAS7X;AAAT,AAGE,AACE,AAACwlB,4EAAgCxlB;;AACjC,kBAAA,XAAC4T;AAAD,AAAgB,8EAAA,2CAAA,gFAAA,lMAAClQ,iLAAyBrE,kEAAeA;GAAzD;;AACF,IAAMmb,UAAQ,iBAAAoL,WAAQ,iBAAAC,WAAA,mFAAA,+DAAwBxmB;AAAxB,AAAA,4GAAAwmB,yCAAAA,7IAACtmB,mDAAAA,6DAAAA;;IAATqmB,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,2FAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,OAAA,mFAAAA;;;AAAd,AAIE,IAAAvrB,qBAAqB,AAAA,4FAAa,CAACkF,mDAAAA,4DAAAA,XAAUib,wCAAAA;AAA7C,AAAA,oBAAAngB;AAAA,AAAA,gBAAAA,ZAAWyqB;AAAX,AACE,AAACU,4EAAgCV;;AACjC,kBAAA,XAAClR;AAAD,AAAgB,8EAAA,2CAAA,gFAAA,lMAAClQ,iLAAyBrE,kEAAeA;GAAzD;;AAFF;;;;AAZR;;;AAeF,OAACymB;;;AAEL,0CAAA,1CAAMC,4FACH1mB;AADH,AAEE,IAAAhF,qBAAiB,iBAAA2rB,WAAA,mFAAA,+DAAsB3mB;AAAtB,AAAA,wGAAA2mB,uCAAAA,vIAAChiB,iDAAAA,2DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAM2S,OAAK,AAACvN;IAENumB,aAAW,4DAAA,5DAACjH,uDAA+B/R,wFAAM5N;AAFvD,AAGE,iDAAA,jDAACgjB,sCAA6B4D,8FAAY3rB;;AAC1C,AAACslB,oEAAsD,AAAA,iGAAetlB,OAAO2rB;;AAC7E,4DAAA,rDAAClN,+CAAkBze;;AANvB;;;AAQF,0DAAA,1DAAM4rB;AAAN,AAEE,IAAM5rB,QAAM,AAAC6rB;AAAb,AACE,8CAAA,vCAAC3jB,0HAA0BlI;;AAE/B,yDAAA,zDAAM8rB,0HACHC;AADH,AAEE,IAAAhsB,qBAAuB,AAACksB;AAAxB,AAAA,oBAAAlsB;AAAA,AAAA,kBAAAA,dAAWisB;AAAX,AACE,IAAM5lB,SAAO,gEAAA,hEAAC8lB,0CAAiCF,YAAYD;IACrDtjB,YAAU,oEAAA,pEAAC0jB,8CAAqCH,YAAYD;IAE5D3lB,aAAO,EAAI,6CAAA,7CAAClF,8FAAMuH,YACT,AAACrH,kBAAQgF,QACTA;AALf,AAME,OAACqe,wFAA4Cre,WAAOqC;;AAPxD;;;AASF,+CAAA,/CAAO2jB,sGACJ3jB;AADH,AAEE,oBAEE,AAACuiB;AACD,+FAAA,xFAACvG,2KAA6C,AAACpkB,oBAAgB,AAACgsB;;AAHlE,oBAME,iBAAAhoB,oBAAK,AAACioB;AAAN,AAAA,oBAAAjoB;AAAwB,QAAA,QAAM,AAACtD,gBAAM,AAACob;;AAAtC9X;;;AACA,IAAMkoB,IAAE,EAAI,6CAAA,7CAACrrB,8FAAMuH,YAAW+jB,2CAAkCC;IAC1DC,UAAQ,iBAAAC,WAAG,AAAC3lB,gBAAM,AAACmV;AAAX,AAAA,0EAAAwQ,wBAAAA,1FAACJ,kCAAAA,4CAAAA;;AADf,AAEE,oBAAMG;AAAN,AACE,OAACE,0CAA4BF,QAAQjkB;;AADvC;;;AATJ,oBAaE,iBAAApE,oBAAK,AAACioB;AAAN,AAAA,oBAAAjoB;AAAwB,OAACnD,6CAAEuH,UAAU,AAACokB;;AAAtCxoB;;;AACA,IAAMkoB,IAAE,EAAI,6CAAA,7CAACrrB,8FAAMuH,YAAW+jB,2CAAkCC;IAC1DK,aAAW,EAAI,6CAAA,7CAAC5rB,8FAAMuH,YAAWzB,gBAAMuG;IACvCmf,UAAQ,iBAAAK,WAAG,iBAAAC,WAAY,AAAC7Q;AAAb,AAAA,4FAAA6Q,iCAAAA,rHAACF,2CAAAA,qDAAAA;;AAAJ,AAAA,0EAAAC,wBAAAA,1FAACR,kCAAAA,4CAAAA;;AAFf,AAGE,oBAAMG;AAAN,AACE,OAACE,0CAA4BF,QAAQjkB;;AADvC;;;AAjBJ,oBAqBE,AAAC6jB;AACD,OAACV;;AAtBH;;;;;;AAwBF,0CAAA,1CAAMqB,4FACHxkB;AADH,AAEE,kBAAKykB;AAAL,AACE,OAACd,6CAAqB3jB;;;AAE1B,+CAAA,/CAAM0kB,sGACHntB,MAAMU,MAAM+R;AADf,AAEE,IAAM/R,YAAM,AAACY,oBAAYZ;AAAzB,AAGE,OAAC6R,kFAAuBvS,MAAMU,UACN,uGAAA,2CAAA,lJAAC0N,6NACkB,AAAA,uGAAmBpO,eACrCyS;;AAE7B,AAAA,2CAAA,mDAAAjP,9FAAM6pB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1pB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAM0pB,oFACF1a,KAAK6a,cAAcjpB;AADvB,AAEG,IAAMvE,QAAM,EAAI,EAAI,AAAC4J,sBAAM4jB,oBACP,OAASA,8BACf,AAACC,sCAA6BD,eAAeA;IACrD3rB,SAAO,AAAA,iGAAe7B;AAH5B,AAIE,8EAAA,2CAAA,4DAAA,2DAAA,zOAAC0tB,wKAAoB1tB,4DAAY2S,+DAAa9Q,eAAQ0C;;;AAN3D,CAAA,yEAAA,WAAA+oB,pFAAMD,6FAO8B3sB;AAPpC,AAAA,IAAA6sB,aAAAD;IAAAC,iBAAA,AAAA5rB,4BAAA4rB;aAAAA,TAO4BrW;YAP5B,AAAAtV,4CAAA2rB,eAAA,nEAOYvtB;WAPZ,AAAA4B,4CAAA2rB,eAAA,lEAOkB5a;AAPlB,AAQG,oBAAM,AAAA,mFAAQ,iBAAAgb,WAAWhb;IAAXib,WAAA,mFAAA,+DAA6B,AAAA,6FAAa5tB;AAA1C,AAAA,4GAAA2tB,SAAAC,yCAAAD,SAAAC,/JAAC3oB,mDAAAA,sEAAAA;;AAAf,AACE,gEAAA,zDAACkoB,6CAAgBntB,MAAMU;;AADzB;;;;AARH,CAAA,mEAAA,nEAAM2sB;;AAAN,AAWA,AAAA;;;mDAAA,2DAAA7pB,9GAAMgR;AAAN,AAAA,IAAAqZ,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAArZ;;;KAAA;AAAA,OAAAA,+EAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7Q,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iFAAA,jFAAM6Q;AAAN,AAGG,sFAAA,/EAACwZ;;;AAHJ,CAAA,iFAAA,WAAAF,5FAAMtZ;AAAN,AAAA,IAAAuZ,aAAAD;IAAAC,iBAAA,AAAApsB,4BAAAosB;WAAAA,PAIuDtb;mBAJvD,AAAA7Q,4CAAAmsB,eAAA,1EAIYvb;6BAJZ,AAAA5Q,4CAAAmsB,eAAA,pFAImBE;oBAJnB,AAAArsB,4CAAAmsB,eAAA,3EAIoCta;AAJpC,AAMG,oBAAU,AAACya;AAAX;;AAAA,AACE,oBAAM,AAAC9oB;AAAP,AACE,GAAM,6EAAA,mFAAA,0EAAA,kFAAA,2EAAA,0EAAA,/cAAK,cAAA,AAAAihB,dAACpZ,8BAAKkhB,+CACN,cAAA,AAAA9H,dAACpZ,8BAAKmhB,qDACN,AAACnhB,cAAI,AAACohB,4DACN,AAACphB,cAAI,AAACqhB,oEACN,AAACrhB,cAAI,AAACshB,6DACN,AAACthB,cAAI,AAACuhB,4DACN,AAACvhB,cAAI,AAACwhB,8DACN,AAACxhB,cAAI,AAACyhB;AAPjB,AAQE,IAAA,AACE,IAAM/S,WAAS,AAACxb;IACVH,QAAM,AAACC;IACP2uB,WAAS,iBAAA7uB,qBAAoB,AAAA,6FAAaC;AAAjC,AAAA,oBAAAD;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,IAAA8pB,WAAA,mFAAA,+DAAsB9pB;AAAtB,AAAA,wGAAA8pB,uCAAAA,vIAACnlB,iDAAAA,2DAAAA;;AADH;;;IAETolB,OAAK,iBAAAzqB,oBAAKsX;AAAL,AAAA,oBAAAtX;AAAc,OAAChE,oBAAgBsb;;AAA/BtX;;;IACL0qB,aAAW,AAAA,kGAAgBH;IAC3BI,6BAA2B,iBAAA3qB,oBAAK0qB;AAAL,AAAA,oBAAA1qB;AACK,OAAC4qB,iEAAkBF,WAAW,AAAA,8FAAcH;;AADjDvqB;;;IAE3B3D,QAAM,EAAI,AAACQ,6CAAE,AAAA,6FAAauS,eAAe,AAAA,6FAAazT,SAC9C,AAAA,kGAAgByT,eAChB,iBAAApP,oBAAKyqB;AAAL,AAAA,oBAAAzqB;AAAU,gEAAA,zDAAC1D,oDAASmuB;;AAApBzqB;;;AAVd,AAWE,oBAAM3D;AAAN,AACE,oBACE8R;AACA,OAAC2a,6CAAgByB,SAASluB,MAAM+R;;AAFlC,oBAIE,iBAAApO,oBAAK4pB;AAAL,AAAA,oBAAA5pB;AAAA,IAAAA,wBACK,AAAC6qB,mCAAoBlvB;AAD1B,AAAA,GAAAqE;AAEK,oBAAMyqB;AAAN,AAAW,OAACK,mIAA8BL;;AAA1C;;;AAFLzqB;;;AAAAA;;;AAJF;;AAAA,oBASE,iBAAAA,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAA,IAAAA,wBAAW3D;AAAX,AAAA,oBAAA2D;AAAA,IAAAA,wBAAiB2qB;AAAjB,AAAA,oBAAA3qB;AACK,OAACxD,gDAAK,AAACS,oBAAY0tB,4BACb,AAAC1tB,oBAAYZ;;AAFxB2D;;;AAAAA;;;AAAAA;;;AAGA,OAAC8oB,6CAAgByB,SAASluB,MAAM+R;;AAZlC;;;;;AADF;;gBAZJ,GAAA,CAAAkc,kBA0BShrB;AA1BT,YAAAgrB,RA0BkBS;AA1BlB,AA2BI,OAAAC,qDAAA,0BAAA,uDAAA,AAAAC,mBAAA,2CAAA,oFAAA,oDAAA,cAAA,xEAA8BF;;AA3BlC,AAAA,MAAAT;;;;AARF;;;AADF;;;;;AAPL,CAAA,2EAAA,3EAAMna;;AAAN,AA6CA,8CAAA,9CAAO+a,oGACJ1tB,OAAO0C;AADV,AAEE,+GAAK,AAACirB,2EAAyBjrB,QAAQ1C,OAAO,AAAC4N,kCAAyB5N,hKACnE,AAACoI,hDACD,AAACwlB,yCAA2B5tB,7DAC5BP;;AAEP,+CAAA,gFAAAouB,/HAAME,sGACHlqB,GAAGmqB,eAAehuB;AADrB,AAAA,IAAA8tB,aAAAD;IAAAC,iBAAA,AAAAhuB,4BAAAguB;aAAAA,TAGiCI;qBAHjC,AAAAnuB,4CAAA+tB,eAAA,6DAAA,zIACoCG;AADpC,AAIE,GAEE,OAASD;AACT,AAACG,+BAAiBtqB,GAAGmqB,eAAeE;;AAHtC,GAME,AAAChmB,wBAAQ8lB;AACT,AAACI,+BAAsBJ,eAAehuB;;AAPxC,GASE,AAACquB,oBAAIL;AACL,IAAMM,UAAE,CAACN,+CAAAA,iDAAAA;AAAT,AACE,AAACG,+BAAiBtqB,GAAGyqB,QAAEJ;;AAX3B,AAAA;;;;;AAgBA,oBAAMD;AAAN,AACE,IAAMM,iCAAyB,sOAAA,MAAA,1OAAI,EACC,AAACC,qBAAKR,qBACN,6CAAA,7CAAC3uB,mJACE,AAAC6N,iBAAO8gB;AAH/C,AAME,OAACxZ,gCAAuB+Z;;AAP5B;;;AASF,8CAAA,9CAAME,oGACHzuB,OAAO0uB,IAAIC,UAAUC;AADxB,AAEE,IAAMC,aAAK,iBAAArsB,oBAAKksB;AAAL,AAAA,oBAAAlsB;AAAS,sEAAA,/DAACuX,gCAAkB,AAAC9O,0BAAkByjB;;AAA/ClsB;;;AAAX,AACE,IAAAssB,WAAM,AAAC1N,gDAAQphB;IAAf8uB,eAAA,EAAA,CAAAA,oBAAAhoB,oBAAA,AAAAgoB,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,OAACphB,0DAAY,CAAK,kBAAM,iBAAA1K,mBAAI4rB;AAAJ,AAAA,oBAAA5rB;AAAAA;;AAAW6rB;;gBAAtB,VAAK,AAAA,IAAA,6EAAwCF,UAAUD;;;KADhF;AAEO,oBAAIE;AACF,iEAAA,1DAAClhB,qHAAqBghB;;AACtB,iEAAA,1DAAChhB,yHAAyBghB,IAAIC;;;;;AAJvC;;;;AAOJ,kDAAA,lDAAMI,4GACHje;AADH,AAEE,IAAMke,WAAS,AAACC,6BAAoBne;iBAApC,bACMoe;AADN,AAEE,OAACC,gDACA,AAACC,gCAAuB,UAAA,TAAKJ,aAAaE,sBAC1C;AAAA,AAAA,0FAAQF,SAASE;;;AAEtB,yCAAA,zCAAMG,0FAAgBC;AAAtB,AACE,OAAAC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,mIAAA,WAAAE,9FAA8B,AAACV,gDAAmB,AAACxrB;AAAnD,AAAA,IAAAmsB,aAAAD;eAAA,AAAAttB,4CAAAutB,WAAA,IAAA,tEAASV;iBAAT,AAAA7sB,4CAAAutB,WAAA,IAAA,xEAAkBR;AAAlB,AAAA,OAAAK,iHAAA,WACQK,5EAAK,AAACC,mCAAUb,SAASE,WAAWI;AAD5C,AAAA,OAAAK,2BAAA,AAEE,kBAAI,AAACG,8CACHF,KACA,AAACG,UAAa,AAACC,UAAaJ;;;;;AAElC,AAAA,4CAAA,oDAAAjuB,hGAAMuuB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApuB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0EAAA,1EAAMouB,qFACF9mB,EAAE0H,KAAKqf;AADX,AAEG,OAAAZ,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sGAAA,WAAAa,jEAA8B,AAACrB,gDAAmBje;AAAlD,AAAA,IAAAuf,aAAAD;eAAA,AAAAjuB,4CAAAkuB,WAAA,IAAA,tEAASrB;iBAAT,AAAA7sB,4CAAAkuB,WAAA,IAAA,xEAAkBnB;AAAlB,AAAA,OAAAS,2BAAA,AACE,AAACW,wEAAaxf,KAAKke,SAASE,WAAWiB,MACzB,WAAK5L,MAAMgM;AAAX,AAEE,IAAMA,qFAAcA,vBACA,iCAAA,IAAA,rCAACpqB,vBACD,iEAAA,IAAA,rEAACA,vBACD,iGAAA,IAAA,rGAACA;IACfwoB,YAAU,eAAA,4DAAA,1EAAK4B,8DAAc,AAAMC,4DAAajM;AAJtD,AAKE,wCAAA,KAAA,tCAACpe,uBAAewoB;;;;;;AAXvC,CAAA,0EAAA,1EAAMuB,qFAYFpf,KAAK2f,IAAIb,KAAKO,MAAMO;AAZxB,AAaG,OAACC,iBACA,iBAAAC,qBAAA,8CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAA3yB,qBAAA,AAAAyG,cAAAksB;AAAA,AAAA,GAAA3yB;AAAA,AAAA,IAAA2yB,eAAA3yB;AAAA,AAAA,GAAA,AAAA6G,6BAAA8rB;AAAA,IAAAE,kBA+lC+C,AAAA9rB,sBAAA4rB;IA/lC/CG,qBAAA,AAAA9xB,gBAAA6xB;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,IAAAI,aAAA,AAAAC,eAAAN,gBAAAI;YAAA,AAAAhvB,4CAAAivB,WAAA,IAAA,nEAAO7M;WAAP,AAAApiB,4CAAAivB,WAAA,IAAA,lEAAiBS;AAAjB,AAAA,AAAA,AAAAP,uBAAAL,SAEE,iBAAMtC,YAAU,iBAAAqD,WAAyB,AAAQH;AAAjC,AAAA,wIAAAG,uDAAAA,vLAAC,AAAAE,iEAAA,AAAAA,2EAAA,AAAAA;;IAAjBJ,aACsB,kBAAInD,WACF,iBAAMyD,iBAAe,qEAAA,rEAACprB,2DAAqB2nB;AAA3C,AAAA,0FACG,uDAAA,vDAAC1vB,6CAAK0vB,cAAYyD,gBAClB,AAACnzB,6CAAK0vB,UAAUyD;KAHrB,mFAAA,GAAA;gBADtB,AAAAjwB,4CAAA2vB,WAAA,IAAA,vEACOvB;UADP,AAAApuB,4CAAA2vB,WAAA,IAAA,jEACiBK;IAKX7C,WAAS,6CAAK,CAACoB,6CAAAA,8DAAAA,nBAAanM,0CAAAA,pCAAMgM,0CAAAA,yDAAW4B;IAC7C7C,eAAS,mDAAA,NAAKM,UAASN;AAP7B,AASE,oBAAI,AAAC+C;AACH,IAAMC,OAAK,AAAQT;IACbS,WAAK,qCAAA,nCAAI,AAACniB,4BAAcmiB,YAAUA;AADxC,AAEE,+GAAA,xGAACnD,gDAAO,AAACqD,6BAAgC/B,IAAInB,aAASgD;kBAAtDC;AAAA,AACS,6BAAA,tBAACE,yGAAYnD,aAAS,EAAI,OAAAiD,+BAAY,KAAAG,KAAA,GAAAH,mBAAmBV,MAAM,AAAOK,6BAAezB,IAAInB;;;;AACpG,8HAAA,vHAACH,gDAAO,iEAAA,jEAACwD,6BAAe7hB,KAAK2f,IAAInB,aAAS,AAASuC;;AAAnD,AACS,6BAAA,tBAACY,yGAAYnD,aAASuC;;;;;;AAjBrC,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,UAAA,AAAAQ,oCAAA,AAAAvsB,qBAAA2rB;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAP,UAAA;;;AAAA,IAAAS,aAAA,AAAAvsB,gBAAA0rB;YAAA,AAAA1uB,4CAAAuvB,WAAA,IAAA,nEAAOnN;WAAP,AAAApiB,4CAAAuvB,WAAA,IAAA,lEAAiBG;AAAjB,AAAA,OAAAF,eAEE,iBAAMhD,YAAU,iBAAAsD,WAAyB,AAAQJ;AAAjC,AAAA,wIAAAI,uDAAAA,vLAAC,AAAAC,iEAAA,AAAAA,2EAAA,AAAAA;;IAAjBH,aACsB,kBAAIpD,WACF,iBAAMyD,iBAAe,qEAAA,rEAACprB,2DAAqB2nB;AAA3C,AAAA,0FACG,uDAAA,vDAAC1vB,6CAAK0vB,cAAYyD,gBAClB,AAACnzB,6CAAK0vB,UAAUyD;KAHrB,mFAAA,GAAA;gBADtB,AAAAjwB,4CAAA4vB,WAAA,IAAA,vEACOxB;UADP,AAAApuB,4CAAA4vB,WAAA,IAAA,jEACiBI;IAKX7C,WAAS,6CAAK,CAACoB,6CAAAA,8DAAAA,nBAAanM,0CAAAA,pCAAMgM,0CAAAA,yDAAW4B;IAC7C7C,eAAS,mDAAA,NAAKM,UAASN;AAP7B,AASE,oBAAI,AAAC+C;AACH,IAAMC,OAAK,AAAQT;IACbS,WAAK,qCAAA,nCAAI,AAACniB,4BAAcmiB,YAAUA;AADxC,AAEE,+GAAA,xGAACnD,gDAAO,AAACqD,6BAAgC/B,IAAInB,aAASgD;kBAAtDC;AAAA,AACS,6BAAA,tBAACE,yGAAYnD,aAAS,EAAI,OAAAiD,+BAAY,KAAAG,KAAA,GAAAH,mBAAmBV,MAAM,AAAOK,6BAAezB,IAAInB;;;;AACpG,8HAAA,vHAACH,gDAAO,iEAAA,jEAACwD,6BAAe7hB,KAAK2f,IAAInB,aAAS,AAASuC;;AAAnD,AACS,6BAAA,tBAACY,yGAAYnD,aAASuC;;;;KAjBrC,AAAAJ,oCAAA,AAAAG,eAAAf;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAuB,AAAC3M,oDAAYC,iBAAOiM;;;;AAd/C,CAAA,oEAAA,pEAAMD;;AAAN,AAiCA,GAAA,QAAA3yB,qCAAAC,6CAAAC,oDAAAm1B;AAAA;AAAA,AAAA,AAASC,iDAAkB,6CAAA,7CAACj1B;;AAE5B,yCAAA,zCAAMk1B,0FACHlD;AADH,AAEE,IAAMZ,WAAS,AAACC,6BAAoB,AAAC1rB;IAC/BqsB,WAAK,4BAAA,MAAA,lCAACzpB,uBAAeypB;AAD3B,AAEE,oBACE,AAACyC;AACD,QAAA,YAAiBrD,SAASY;;AAF5B,oBAIE,AAACmD;AACD,OAACC,sCAA6B,CAAKhE,SAASY;;AAL9C,AAQE,IAAMqD,cAAY,CAAA,SAAcjE,SAASY;IACnCsD,aAAW,4CAAA,AAAA1O,5CAACzkB,4DAAK8yB,gDAAkB,AAACzR,gDAAQ6R;AADlD,AAEE,oBAAIC;AACF,OAACT,sBAAWS;;AACZ,OAAA3D,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,mFAAA,WAAQ4D,9CAAO,AAACC,sBAAaH;AAA7B,AAAA,OAAA1D,gDACa,iBAAA/sB,oBAAK2wB;AAAL,AAAA,oBAAA3wB;AAAY,OAAU2wB;;AAAtB3wB;;KADb,WACQqvB;AADR,AAAA,OAAAlC,2BAAA,AAEE,wBAAA,NAAMkC,MACJ,AAAAtC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,0EAAA,WAAQb,rCAAI,AAAC2E,oBAAuBxB;AAApC,AAAA,OAAAlC,2BAAA;AACE,AAAC2D,mDAAMT,+CAAkBU,gBAAM,AAACnS,gDAAQ6R,aAAavE;;AACrDA;;;;IAHJ;;;;;;;;;AAKZ,sDAAA,8DAAA8E,pHAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA3zB,4BAAA2zB;YAAAA,RACkExf;WADlE,AAAAlU,4CAAA0zB,eAAA,lEACW3iB;WADX,AAAA/Q,4CAAA0zB,eAAA,lEACgBE;gBADhB,AAAA5zB,4CAAA0zB,eAAA,vEACqBG;eADrB,AAAA7zB,4CAAA0zB,eAAA,tEAC+BvwB;mBAD/B,AAAAnD,4CAAA0zB,eAAA,1EACwCI;0BADxC,AAAA9zB,4CAAA0zB,eAAA,jFAC+CK;AAD/C,AAEE,IAAM31B,QAAM,AAACytB,sCAA6B1oB;IACpCkG,IAAE,iBAAApG,mBAAI7E;AAAJ,AAAA,oBAAA6E;AAAAA;;AAAU,MAAO,uDAAA,VAAKE;;;IACxB4jB,OAAK,AAAA,kGAAgB3oB;IACrBuE,UAAQ,sCAAA,tCAACyD,uBAAe2gB,KAAK8M;AAHnC,AAIE,AAAC/H,uEAAY/a,KAAK3S,MAAMuE;;AACxB,oBAAM,iBAAAF,oBAAKqxB;AAAL,AAAA,oBAAArxB;AAAYsxB;;AAAZtxB;;;AAAN,AAEE,IAAAtE,qBAAgB,kBAAI,AAACm0B,iCAAgBsB,KAAK,AAACvmB,iBAAO,kBAAA,lBAACgb,8BAAqBwL;AAAxE,AAAA,oBAAA11B;AAAA,AAAA,eAAAA,XAAWy1B;AAAX,AACE,gKAAA,zJAACI,yBAAWjjB,KACA,AAACkjB,8BACAljB,mDAAS6iB,vBACA,gCAAA,QAAA,xCAACxtB,vBACD,oEAAA,eAAA,nFAACA;;AALzB;;;AAFF;;;AAUJ,gDAAA,hDAAM8tB,wGACHC;AADH,AAEE,IAAAxY,qBAAsB,iBAAA1Y,mBAAI,AAACoxB,sCAA6B,AAACh2B;AAAnC,AAAA,oBAAA4E;AAAAA;;AAEI,IAAAR,oBAAK,AAAC6vB;AAAN,AAAA,oBAAA7vB;AACK,IAAA6xB,WACC,AAACpF,6BAAoB,AAAC1rB;IADvB+wB,WAEC,AAACE;IAFFD,WAAA;AAAA,AAAA,gIAAAF,SAAAC,SAAAC,mDAAAF,SAAAC,SAAAC,/MAAC,AAAArC,6DAAA,AAAAA,yFAAA,AAAAA;;AADN1vB;;;;AAF1B,AAAA,oBAAAkZ;AAAA,mBAAAA,fAASyY;AAAT,AAME,OAACM,gCAAuBN,aAAaD;;AACrCA;;;AAEJ,uCAAA,vCAAMQ,sFACH7wB,GAAOssB,MAAMnwB,OAAO20B,iBAAWC;AADlC,AAEE,IAAM9jB,OAAK,AAACvN;IACNpF,QAAM,AAACC;AADb,AAEE,GAAI,AAACy2B,gCAAiB/jB;2GAChB,AAACwf,wEAAanyB,MAAM2S,KAAK,AAACgkB,mDAAQ3E,tLAClC,AAAChB,8LACA,WAAK4F,pQAWN,OAACM;AAXA,AACE,IAAAn3B,qBAAiD,iBAAAsE,oBAAK,AAACmC,cAAIowB;AAAV,AAAA,GAAAvyB;AAAe,OAAC2C,gBAAM4vB;;AAAtBvyB;;;AAAjD,AAAA,oBAAAtE;AAAA,AAAA,IAAA82B,aAAA92B;sBAAA,AAAAiE,4CAAA6yB,WAAA,IAAA,7EAAYC;WAAZ,AAAA9yB,4CAAA6yB,WAAA,IAAA,lEAA4BnD;qBAA5B,AAAA1vB,4CAAA6yB,WAAA,IAAA,5EAAiCE;AAAjC,AACE,IAAMtG,eAAO,AAACuG,kCAAmBF;AAAjC,AACE,OAAClH,6CACAlqB,GACA,AAAC4qB,4CAAoBzuB,OAAO,AAACi0B,8CAAsB,iBAAAjxB,mBAAIkyB;AAAJ,AAAA,oBAAAlyB;AAAAA;;AAAmBiyB;;+GAFvE,2CAAA,2LAAA,6DAAA,5YAGsB,kBAAIpD,MAAK,AAAQA,UAAM,gCAAA,QAAA,tBAAIjD,gCAC3BA,cACrB5uB,uHACe,wCAAA,tBAAI40B,yBAAkB,AAACQ;;AAR3C;;IAWD;AAAA,AACE,uCAAA,vCAAC3Q,sBAAOkQ;;AACR,2EAAA,3EAAClQ,sBAAO9mB;;AACR,mFAAA,5EAAC8mB,sBAAO3mB;;;AAChB,OAACw3B,sBACAnF,MACA,WAAK0B,KAAKlD,UAAU4G;AAApB,AACE,OAACC,6CACA3D,KAAKlD,UAAU4G,UACfZ,iBACA,WAAKc;AAAL,AACE,qIAAA,2CAAA,2LAAA,6DAAA,xaAAC1H,6CAAgBlqB,GACA,wEAAA,xEAAC4qB,4CAAoBzuB,OAAOy1B,WAAW9G,gBACvC3uB,uHACe,wCAAA,tBAAI40B,yBAAkB,AAACQ;;AAGvD,2EAAA,3EAAC3Q,sBAAO9mB;;AACR,mFAAA,5EAAC8mB,sBAAO3mB;GACV,WAAK43B;AAAL,AACE,IAAMC,cAAQ,sIAAA,rIAAG,CAAG,sDAAA,tDAAC72B,oDAAS42B,cACV,sDAAA,tDAAC52B,oDAAS42B;AAD9B,AAGE,2EAAA,3EAACjR,sBAAO9mB;;AACR,OAAC8mB,sBAAO3mB,sDAAyB63B;;;;;AAM/C,uCAAA,wCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,rKAAKC;AAcL,AAAKC,gDACH,AAACxW,iBAAO,AAAC9V,eAAKqsB,sCACN,AAACzd,eAAKyd;AAEhB,iDAAA,iFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,/KAAKE;AAGL,AAAKC,qCACH,0FAAA,IAAA,sDAAA,IAAA,xJAACzrB,qDAAMsrB;AAIT,mCAAA,nCAAMI,8EACHlc,SAASpZ,OAAOu1B,QAAQC;AAD3B,AAEE,IAAMr3B,QAAM,AAACkB,4CAAI61B,qCAAal1B;IACxBy1B,WAAS,AAACC;IACVz1B,UAAQ,6CAAKw1B,sDAASt3B;IACtBA,YAAM,6CAAK6B,QAAOC;IAClBpC,QAAM,AAACC,oBAAgBsb;AAJ7B,AAKE,oBAAMjb;AAAN,AACE,GAAU,AAACsR,4BAAcgmB;AAAzB;AAAA,AAAmC,AAAC1R,sBAAOzmB,4CAAem4B;;;AAC1D,IAAAE,aAAoB,mEAAA,2CAAA,wFAAA,tMAACE,uCAAyBzc,SAASjb,UAAMs3B,yHACA,EAAOx1B,+EACX,WAAKI,UAAUy1B;AAAf,AACE,GAAM,eAAA,dAAIA;AAAV,AAAA,0FACG,AAACv3B,6CAAK8B,UAAUy1B,WAAW,cAAA,bAAGA,mBAC9B,cAAA,bAAGA;;AAFN;;;iBAH3D,AAAAr0B,4CAAAk0B,WAAA,IAAA,xEAAO31B;WAAP,AAAAyB,4CAAAk0B,WAAA,IAAA,lEAAcC;AAAd,AAME,IAAAG,WAAM/1B;AAAN,AAAA,QAAA+1B;KAAA;AAEE,AACE,4DAAA,mFAAA,/IAACC;;AACD,OAACjS,sBAAOkS,wCAA0B,AAACC,iEAAqBr4B;;;KAJ5D;AAOE,AACE,4DAAA,mFAAA,gFAAA,/NAACm4B;;AACD,OAACjS,sBAAOkS,wCAA0B,AAACC,iEAAqBr4B;;;;AAT5D;;;;AARJ;;;AAqBJ,6CAAA,7CAAMs4B,kGACHt4B,MAAMu4B,OAAO7vB;AADhB,AAEE,oBAAM1I;AAAN,AACE,IAAMM,QAAM,0DAAA,1DAACC,oDAASP;IAChB0F,MAAI,AAAC5B,yBAAW9D;AADtB,AAEE,OAACw4B,4CAAkBl4B,MAAMoF,IAAI6yB,OAAO7vB;;AAHxC;;;AAKF,4CAAA,5CAAM+vB,gGACHz4B,MAAMu4B,OAAO7vB;AADhB,AAEE,oBAAM1I;AAAN,AACE,IAAMM,QAAM,0DAAA,1DAACC,oDAASP;IAChB0F,MAAI,mCAAA,lCAAK,AAAC5B,yBAAW9D;AAD3B,AAEE,GAAM,QAAA,PAAI0F;AAAV,AACE,OAACgzB,2CAAiBp4B,MAAMoF,IAAI6yB,OAAO7vB;;AADrC;;;AAHJ;;;AAMF;;;4CAAA,5CAAMiwB,gGAEHC;AAFH,AAGE,IAAMh5B,QAAM,AAACC;IACPg5B,eAAa,iBAAA50B,oBAAKrE;AAAL,AAAA,oBAAAqE;AACK,IAAAtE,qBAAmB,AAAA,mFAAQ,AAAA,2FAAaC;AAAxC,AAAA,oBAAAD;AAAA,AAAA,cAAAA,VAAWmgB;AAAX,AACE,OAAA,4FAAa,CAACjb,mDAAAA,4DAAAA,XAAUib,wCAAAA;;AAD1B;;;AADL7b;;;IAGb60B,QAAM,4DAAA,5DAACC,0DAAmBH;AAJhC,AAKE,oBAAIC;AAEF,OAACltB,+CAAO,WAAKqtB;AAAL,AAAQ,OAACl4B,6CAAE,CAAC+Q,kEAAAA,qEAAAA,LAAyBmnB,iDAAAA,IAAGH;GAAeC;;AAC/DA;;;AAEN,6CAAA,7CAAMG,kGACHL,EAAEj0B;AADL,AAGE,IAAM0O,gBAAc,AAACxT;IACfq5B,gBAAc,AAACjuB,qLAAS,iBAAAkuB,WAAsB,AAACn0B,nMAGvB,AAACkG,4CAAI,2DAAA,3DAACquB,6CAAKC;IAHXJ,WACsBz0B;IADtB00B,WAAA;AAAA,AAAA,kIAAAF,SAAAC,SAAAC,oDAAAF,SAAAC,SAAAC,lNAACC,8DAAAA,0FAAAA;;IAIzBG,sBAAoB,gDAAA,hDAACC,+FAAY,4CAAK,AAAA,6FAAarmB,kBAAiB6lB;AAL1E,AAME,OAAAlI,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,kOAAA,WAAQ2I,7LAAO,iEAAA,2CAAA,wDAAA,pKAACC,6BAAoB,AAAC50B,kCAAwB4zB;AAA7D,AAAA,OAAAxH,2BAAA,AACE,AAACzlB,+CACA,WAAKkuB;AAAL,AACE,OAAC9sB,0BAAU0sB,oBAAoB,AAAA,6FAAaI;GAC9CF;;;;AAEP,gDAAA,hDAAMG,wGACHlB;AADH,AAEE,OAACmB,8DAAuBnB;;AAE1B,+CAAA,/CAAMoB,sGACHh6B;AADH,AAEE,IAAA,AACE,IAAMk6B,eAAa,iBAAAz1B,mBAAI,0DAAA,1DAAClE,oDAASP;AAAd,AAAA,oBAAAyE;AAAAA;;AAAA;;;IACbiB,MAAI,AAAC5B,yBAAW9D;IAChBm6B,uBAAqB,AAAA,iFAAA,AAAAlU,gBAAOmS;IAC5BgC,eAAa,iBAAAn2B,oBAAKk2B;AAAL,AAAA,oBAAAl2B;AAA0B,OAACvD,6CAAKw5B,aAAaC,qBAAqBz0B;;AAAlEzB;;;AAHnB,AAIE,GAAM,OAAA,NAAGyB;AAAT,AACE,IAAAjB,mBACC,iBAAAR,oBAAK,AAACnD,6CAAE,AAAC+1B,0EAAkC,AAACwD,uBAAcH,aAAa,OAAA,NAAKx0B;AAA5E,AAAA,GAAAzB;AAAA,OAAAgiB,gBACMqU;;AADNr2B;;;AADD,AAAA,oBAAAQ;AAAAA;;AAGC,IAAAR,oBAAKm2B;AAAL,AAAA,oBAAAn2B;AACK,OAACs2B,qEAA8BH;;AADpCn2B;;;;AAJH;;gBALJ,GAAA,CAAAg2B,kBAWS12B;AAXT,QAAA02B,JAWkB9C;AAXlB,AAYI,AAACqD,cAAiBrD;;AAZtB;;AAAA,AAAA,MAAA8C;;;;AAeF,qDAAA,rDAAMQ,kHACHz6B;AADH,AAEE,IAAA,AACE,IAAMk6B,eAAa,0DAAA,1DAAC35B,oDAASP;IACvB0F,MAAI,AAAC5B,yBAAW9D;IAChBo6B,eAAa,AAAC15B,6CAAKw5B,aACA,AAAA,iFAAA,AAAAjU,gBAAO0U,kDACPj1B;AAJzB,AAKE,GAAM,OAAA,NAAGA;AAAT,AACE,IAAAjB,mBACC,iBAAAR,oBAAK,6CAAA,7CAACnD,iDAAK,AAACu5B,uBAAcH,aAAa,OAAA,NAAKx0B;AAA5C,AAAA,GAAAzB;AACK,OAAC22B;;AADN32B;;;AADD,AAAA,oBAAAQ;AAAAA;;AAGC,IAAAR,oBAAKm2B;AAAL,AAAA,oBAAAn2B;AACK,OAACs2B,qEACAH,aACA,AAACQ;;AAHP32B;;;;AAJH;;gBANJ,GAAA,CAAAy2B,kBAcSn3B;AAdT,aAAAm3B,TAckBG;AAdlB,AAAA;;AAAA,AAAA,MAAAH;;;;AAiBF,+CAAA,/CAAMI;AAAN,AAEE,IAAAr2B,mBAAA,AAAAwhB,gBAAK8H;AAAL,AAAA,oBAAAtpB;AAAAA;;AAAA,IAAAA,uBAAA,AAAAwhB,gBACK+H;AADL,AAAA,oBAAAvpB;AAAAA;;AAAA,IAAAA,uBAAA,AAAAwhB,gBAEK7mB;AAFL,AAAA,oBAAAqF;AAAAA;;AAAA,IAAAA,uBAGI,AAAC6pB;AAHL,AAAA,oBAAA7pB;AAAAA;;AAAA,IAAAA,uBAII,AAACwpB;AAJL,AAAA,oBAAAxpB;AAAAA;;AAAA,IAAAA,uBAKI,AAAC0pB;AALL,AAAA,oBAAA1pB;AAAAA;;AAAA,IAAAA,uBAMI,AAAC4pB;AANL,AAAA,oBAAA5pB;AAAAA;;AAOI,OAAC2pB;;;;;;;;;AAEP,iDAAA,jDAAM2M,0GACH/6B;AADH,AAEE,IAAAL,qBAAe,AAACmE,yBAAW9D;AAA3B,AAAA,oBAAAL;AAAA,AAAA,UAAAA,NAAW+F;AAAX,AACE,IAAMpF,QAAM,0DAAA,1DAACC,oDAASP;AAAtB,AACE,GAAM,EAAK,CAAI,AAACW,gBAAML,UAAO,OAAA,NAAKoF,iBACvB,QAAA,PAAIA;AADf,AAEE,OAAC20B,uBAAc/5B,MAAMoF;;AAFvB;;;AAFJ;;;AAMF,uCAAA,vCAAMs1B,sFACHC;AADH,AAEE,kBAAKC;AAAL,AACE,AAACC,mBAAUD;;AACX,IAAME,gBAAc,AAAA,6FAAa,AAACv7B;IAC5Bw7B,aAAW,WAAKr1B;AAAL,AACE,IAAAqK,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,2EAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACud;;AACD,AAAC4N,yDAAmCx1B,OAAOi1B;;AAH7C,IAAAK,qDAAAhrB;IAAAirB,qDAAA,AAAA7qB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAirB;;AAAA,IAAA,AAEE,AAAC3N;;AACD,AAAC4N,yDAAmCx1B,OAAOi1B;;AAH7C,IAAAtqB,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAgrB;;;AAIA,IAAA37B,qBAAsB,AAACgI,oCAA2B,AAAA,6FAAa,AAACf,gBAAMZ;AAAtE,AAAA,oBAAArG;AAAA,AAAA,iBAAAA,bAAW87B;AAAX,AACE,iCAAA,cAAA,mBAAA,3DAAiBA;;AADnB;;;AANnB,AAQE,oBAAIL;AACF,IAAAz7B,qBAAiB,iBAAA+7B,WAAA,mFAAA,+DAAsBN;AAAtB,AAAA,wGAAAM,uCAAAA,vIAACpyB,iDAAAA,2DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,mBAAA,fAAMoG,kGAAQpG;AAAd,AACE,AAACy7B,WAAWr1B;;AACd,IAAArG,yBAAoB,AAACI;AAArB,AAAA,oBAAAJ;AAAA,AAAA,eAAAA,XAAW4b;AAAX,AACE,IAAA5b,yBAAiB,AAACM,oBAAgBsb;AAAlC,AAAA,oBAAA5b;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,AAAQA;;AACR,kBAAA,XAACkZ;AAAD,AAAgB,OAACyiB,mCAA0B37B;GAA3C;;AAFF;;;AADF;;;AAHF;;;AAOA,IAAMwc,MAAI,AAACof;AAAX,AACE,GAAM,AAACx1B,cAAIoW;AAAX,AACE,IAAM8K,cAAY,AAACpc,4CAAI,WAAK5F;AAAL,AAAA,0FAAA,+DAAsBA;GAAKkX;IAC5CxW,SAAO,iBAAA61B,WAAc,AAAC72B;IAAf82B,WAAA,AAAA;IAAAC,WAA4CzU;AAA5C,AAAA,kHAAAuU,SAAAC,SAAAC,4CAAAF,SAAAC,SAAAC,1LAACrU,sDAAAA,kFAAAA;;AADd,AAEE,OAAC2T,WAAWr1B;;AAHhB;;;;;AAKV,sDAAA,tDAAMg2B;AAAN,AAEE,IAAMzpB,OAAK,AAACvN;IACNwX,MAAI,AAACof;IACLtU,kFAAiB,AAACpc,4CAAI,WAAK5F,3HACV,AAACqG,+CAAOC;AADH,AAAA,0FAAA,+DAAsBtG;GAAKkX;AAFvD,AAIE,IAAAyf,WAAc1pB;IAAd2pB,WAAA,AAAA;IAAAC,WAAwB7U;AAAxB,AAAA,kHAAA2U,SAAAC,SAAAC,4CAAAF,SAAAC,SAAAC,1LAACzU,sDAAAA,kFAAAA;;AAEL;;;iCAAA,jCAAM0U,0EAEH/zB;AAFH,AAGE,IAAMrC,SAAO,AAACg2B;AAAd,AACE,GAAM,AAAC51B,cAAIJ;AAAX,AACE,IAAAqK,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,mEAAA,6EAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA,mEAAA,6EAAA;AAAA,AAAA,oBAAAsE;AAAA,AAGE,OAACksB,2DAAqCv2B,OAAO,uDAAA,vDAAClF,6CAAEuH;;AAHlD,IAAAg0B,+CAAA/rB;IAAAgsB,+CAAA,AAAA5rB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAgsB;;AAAA,IAAA,AAGE,AAACC,2DAAqCv2B,OAAO,uDAAA,vDAAClF,6CAAEuH;;AAHlD,IAAAsI,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAA+rB;;;AADF;;;AAMJ,mCAAA,nCAAOG,8EAAU/6B,OAAOgC,KAAKg5B;AAA7B,AACE,IAAMh5B,WAAK,iBAAAgB,mBAAIhB;AAAJ,AAAA,oBAAAgB;AAAAA;;AAAA;;;IACLg4B,YAAM,iBAAAh4B,mBAAIg4B;AAAJ,AAAA,oBAAAh4B;AAAAA;;AAAA;;;AADZ,AAEE,IAAAi4B,WAAM,AAAC7Z,gDAAQphB;IAAfi7B,eAAA,EAAA,CAAAA,oBAAAn0B,oBAAA,AAAAm0B,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,iEAAA,1DAACvtB,uHAAuBstB,UAAMh5B;;;KAD1C;AAEO,iEAAA,1DAAC0L,yHAAyB1L,SAAKg5B;;;;AAFtC;;;;AAKJ,yCAAA,zCAAOE,0FACJl7B,OAAOgC,KAAKg5B;AADf,AAEE,IAAMh5B,WAAK,iBAAAgB,mBAAIhB;AAAJ,AAAA,oBAAAgB;AAAAA;;AAAA;;;IACLg4B,YAAM,iBAAAh4B,mBAAIg4B;AAAJ,AAAA,oBAAAh4B;AAAAA;;AAAA;;;AADZ,AAEE,IAAAm4B,WAAM,AAAC/Z,gDAAQphB;IAAfm7B,eAAA,EAAA,CAAAA,oBAAAr0B,oBAAA,AAAAq0B,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,iEAAA,1DAACztB,wHAAwBstB,UAAMh5B;;;KAD3C;AAEO,4BAAA,rBAACo5B;;;;AAFR,MAAA,KAAAt5B,MAAA,CAAA,mEAAAq5B;;;;AAIJ,+CAAA,/CAAME,sGAAsBC,QAAQz3B,GAAG7D,OAAOJ;AAA9C,AAGE,IAAA27B,iBAAMD;IAANC,qBAAA,EAAA,CAAAA,0BAAAz0B,oBAAA,AAAAy0B,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAEQ,IAAAC,mBAA2B57B;IAA3B47B,uBAAA,AAAA17B,4BAAA07B;iBAAA,AAAAz7B,4CAAAy7B,qBAAA,9EAAcx5B;kBAAd,AAAAjC,4CAAAy7B,qBAAA,/EAAmBR;AAAnB,AACE,GAAU,EAAI,AAAC7qB,4BAAcnO,iBAAM,AAACmO,4BAAc6qB;AAAlD;AAAA,AACE,uHAAA,2CAAA,lKAACjN,6CACAlqB,GACA,AAACk3B,iCAAS/6B,OAAOgC,WAAKg5B,aACtBh7B,uHACe,wHAAA,3EAAK,AAACo1B;;;;KARlC;AAUc,IAAAqG,mBAA2B77B;IAA3B67B,uBAAA,AAAA37B,4BAAA27B;iBAAA,AAAA17B,4CAAA07B,qBAAA,9EAAcz5B;kBAAd,AAAAjC,4CAAA07B,qBAAA,/EAAmBT;AAAnB,AACE,GAAM,GAAK,AAAC7qB,4BAAcnO;AAA1B,AACE,6HAAA,2CAAA,xKAAC+rB,6CACAlqB,GACA,AAACq3B,uCAAel7B,OAAOgC,WAAKg5B,aAC5Bh7B,uHACe,wHAAA,3EAAK,AAACo1B;;AALxB;;;;AAXhB;;;AAoBA,2CAAA,3CAACsG;;AAED,IAAAx9B,qBAAwB,AAACgG;AAAzB,AAAA,oBAAAhG;AAAA,AAAA,mBAAAA,fAAWy9B;AAAX,AACE,IAAAz9B,yBAAiB,AAACM,oBAAgBqF;AAAlC,AAAA,oBAAA3F;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,AAAQA;;AACR,OAAC2C,oCAAsB3C,MAAMo9B;;AAF/B;;;AADF;;;AAKF,uCAAA,vCAAMC;AAAN,AAEE,IAAA19B,qBAAc,AAACI;AAAf,AAAA,oBAAAJ;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,IAAA3F,yBAAiB,AAACM,oBAAgBqF;AAAlC,AAAA,oBAAA3F;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAMs9B,cAAY,AAACx5B,yBAAW9D;IACxB0F,MAAI,AAACC;IACLu0B,eAAa,iBAAAz1B,mBAAI,mBAAA,mFAAA,tGAAC84B,4KAA2Bj4B;AAAhC,AAAA,oBAAAb;AAAAA;;AAAA;;;AAFnB,AAGE,IAAAA,mBAAA,AAAAwhB,gBACExmB;AADF,AAAA,oBAAAgF;AAAAA;;AAEC,OAACoqB,iEAAkBqL,aAAax0B,IAAI43B;;;AANzC;;;AADF;;;AASF,wDAAA,xDAAME,wHACHx9B;AADH,AAEE,oBAAM,iBAAAiE,oBAAKjE;AAAL,AAAA,oBAAAiE;AAAA,IAAAA,wBACK,iBAAAQ,mBAAI,AAACwpB;AAAL,AAAA,oBAAAxpB;AAAAA;;AAAA,IAAAA,uBACI,AAACypB;AADL,AAAA,oBAAAzpB;AAAAA;;AAEI,OAAC0pB;;;;AAHV,AAAA,oBAAAlqB;AAIK,OAAC4I,cAAI,gDAAA,KAAA,rDAAC4rB,0CAAYz4B;;AAJvBiE;;;AAAAA;;;AAAN,AAKE,oBAAM,AAACo5B;AAAP,AACE,IAAM/8B,QAAM,0DAAA,1DAACC,oDAASP;IAChB0F,MAAI,AAACC;IACL23B,cAAY,AAACx5B,yBAAW9D;IACxBy9B,UAAQ,AAAC5O,iEAAkBvuB,MAAM,iBAAA0B,kBAAK0D;IAALzD,kBAASq7B;AAAT,AAAA,SAAAt7B,kBAAAC,mBAAAD,kBAAAC;KAAsB,iBAAAJ,kBAAK6D;IAAL5D,kBAASw7B;AAAT,AAAA,SAAAz7B,kBAAAC,mBAAAD,kBAAAC;;AAH7D,AAIE,oBAAM,iBAAAmC,oBAAKw5B;AAAL,AAAA,oBAAAx5B;AACK,0DAAA,mDAAA,pGACC,uCAAA,vCAACy5B,+BAAiBD,oBAClB,uCAAA,vCAACC,+BAAiBD,oBAClB,uCAAA,vCAACC,+BAAiBD,kBAClB,uCAAA,vCAACC,+BAAiBD;;AALxBx5B;;;AAAN,AAME,kDAAA,lDAAC05B;;AACD,iDAAA,jDAACC;;AACD,gEAAA,zDAACC;;AARH;;;AALJ;;;AALF;;;AAoBF,6CAAA,7CAAMC,kGACHn5B,SAASo5B,SAASC,UAAUC;AAD/B,AAEE,IAAMC,WAAS,AAAClwB,uGAAM+vB,SAASE;IACzBE,aAAW,AAACv3B,gBAAM,6DAAA,7DAACw3B,mDAAaJ;IAChCK,gBAAc,6CAAKF,YAAW,AAACG,wGAAOJ;IACtCt+B,QAAM,iBAAA2+B,WAAA,mFAAA,+DAAsB55B;AAAtB,AAAA,wGAAA45B,uCAAAA,vIAACj1B,iDAAAA,2DAAAA;;IACPhJ,QAAM,AAAA,kGAAgBV;IACtB4C,YAAU,AAACoF,uBAAetH,MAAM09B,UAAUK;AALhD,AAME,oEAAA,7DAACtR,6CAAgBntB,MAAM4C;;AAE3B,qDAAA,rDAAOg8B,kHACJjsB;AADH,AAEE,oBAAMA;AAAN,AACE,AAACksB,gDAAkClsB,KAAK,AAACmsB;;AACzC,OAACC,4CAA8BpsB;;AAFjC;;;AAIF,GAAA,QAAAvT,qCAAAC,6CAAAC,oDAAA0/B;AAAA;AAAA,AAAA,AAASC,kDAAmB,6CAAA,7CAACx/B;;AAC7B,mDAAA,nDAAMy/B,8GACH3H,EAAE7Y,OAAOhZ;AADZ,AAEE,IAAMhF,QAAM,AAACy+B,qBAAY5H;IACnB5kB,OAAK,AAACvN;AADZ,AAEE,6EAAA,7EAACvC,oEAAwB6C,GAAGhF;;AAC5B,oBAAA,AAAA2lB,gBAAO4Y;AAAP,AACE,aAAA,AAAA5Y,bAAC+Y,6BAAiBH;;AADpB;;AAEA,AAACL,mDAAsBjsB;;AACvB,OAAC2T,sBAAO2Y,gDACA,AAAC3lB,WACA;AAAA,AACE,oBAAM,AAAC+lB,iCAAkB1sB;AAAzB,AACE,mCAAA,nCAAC0E;;AAED,+EAAA,2CAAA,4EAAA,tMAAC2W;;AACD,0CAAA,nCAAC3W;;AAJH;;GAFH;;AASZ,4CAAA,5CAAMioB;AAAN,AACE,IAAMl/B,QAAgB,AAACm/B;IACjBz5B,MAAgB,AAAC5B,yBAAW9D;IAC5Bo/B,kBAAgB,AAAC/E,uBAAc,AAASr6B,YAAO,OAAA,NAAK0F;AAF1D,AAME,GAAM,AAAC5E,6CAAEs+B,gBAAgB,AAACvI;AAA1B,AACE,GAAM,AAACzwB,cAAI,AAAC4zB,6CAAqBh6B;AAAjC,AACE,AAACkmB,sBAAOkS,wCAA0B,AAACC,iEAAqBr4B;;AACxD,4DAAA,5DAACkmB,sBAAO6H;;AAFV;;AADF;;AAKA,GAAI,AAACjtB,6CAAEs+B,gBAAgBC;AACrB,GAAM,AAACj5B,cAAI,AAACq0B,mDAA2Bz6B;AAAvC,AACE,AAACkmB,sBAAOyU,gDAAkC,AAACtC,iEAAqBr4B;;AAChE,yEAAA,lEAACkmB,sBAAO8H;;AAFV;;;AADF;;;AAMJ,kDAAA,lDAAMsR,4GACHC,OAAOj6B,GAAGszB,EAAEn3B;AADf,AAEE,kBAAK+9B,OAAOC;AAAZ,AACE,kDAAA,lDAAC9B;;AACD,IAAM+B,cAAY,4CAAK,AAAA,6FAAaF;AAApC,AAGE,8LAAA,2CAAA,wNAAA,mEAAA,KAAA,zgBAAChQ,6CAAgBlqB,GACA,0DAAA,1DAAC6J,qHAAqBuwB,kBACtBj+B,uHACe,CAAA,iDAAU,kBAAA,AAAAwkB,8DAAA,9CAAKxmB,iDAAkBm5B,wJAEjC,WAAK7I;AAAL,AAAQ,mCAAA,OAAA,nCAAC4P,iCAAwB5P;GALjE,oEAAA;;AASA,sJAAA,tJAACjN,iDAAoB,AAAA,6FAAa0c,0DAEbE;;AAErB,IAAA//B,qBAAiB,AAACM,oBAAgBqF;AAAlC,AAAA,oBAAA3F;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,OAAQA;;AADV;;;;AAGN,kDAAA,lDAAM4/B,4GACH5/B;AADH,AAEE;AAAA,AACE,kDAAA,lDAAC29B;;AACD,oFAAA,7EAACkC,uEAA2B7/B;;;AAEhC,8CAAA,9CAAO8/B,oGACJlgC,MAAM8N,KAAKqyB,mBAAmBt+B,OAAOu+B;AADxC,AAEE,IAAMpzB,cACA,kBAAIozB,mBACF,iBAAAC,WAAmB,AAAA,kGAAgBrgC;AAAnC,AAAA,0GAAAqgC,wCAAAA,1IAACD,kDAAAA,4DAAAA;KACD,AAAA,kGAAgBpgC;IAClBgN,2LACKA,jFACA,4EAAA,5EAAC0V,qEAAyB7gB,7JAC1B,4EAAA,5EAAC6gB,qEAAyB7gB;AAPrC,AAQE,2WAAA,2CAAA,6DAAA,2CAAA,sJAAA,0EAAA,okBAAA,oFAAA,/2CAACuM,uGAAM,4DAAA,6HAAA,zLAACyB,sDAAO7P,+YAGa,AAAA,mFAAQ8N,iFACdjM,gFACI,AAACyF,8CAAMoI,iBAAO,AAAA,uGAAmB1P,OAC/B,+CAAA,mFAAA,kDAAA,8DAAA,lPAACuL,yTACO40B,yFACbnzB,6JACO,AAACwmB,eAAK,AAAA,mFAAQ1lB,MAAM,AAAA,uGAAkB9N,nRACtC,AAAC+L,+CAAOC;;AAE1C,+DAAA,/DAAOs0B,sIACJvG;AADH,AAEE,OAACzgB,WACA;AAAA,AACE,IAAAvZ,qBAAsB,AAACwN,eAAK,AAAA,uFAASwsB;AAArC,AAAA,oBAAAh6B;AAAA,AAAA,iBAAAA,bAAW+X;AAAX,AACE,AAAC3B;;AACD,IAAMoqB,0BAAY,iBAAAC,WAAA,mFAAA,+DAAsB,AAAA,6FAAa1oB;AAAnC,AAAA,wGAAA0oB,uCAAAA,vIAAC92B,iDAAAA,2DAAAA;;AAAnB,AACE,sGAAA,/FAACN,uEAAYm3B,yEAAiB,AAAA,6FAAaA;;AAH/C;;GAFH;;AAQF,uCAAA,sDAAAE,7FAAME,sFACHv6B;AADH,AAAA,IAAAs6B,aAAAD;IAAAC,iBAAA,AAAA/+B,4BAAA++B;wBAAA,AAAA9+B,4CAAA8+B,eAAA,/EACkBN;yBADlB,AAAAx+B,4CAAA8+B,eAAA,iFAAA,jKAEkBP;mBAFlB,AAAAv+B,4CAAA8+B,eAAA,1EAGkBE;qBAHlB,AAAAh/B,4CAAA8+B,eAAA,5EAIkB/sB;AAJlB,AAME,IAAMoP,gBAAc,iBAAAhjB,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAWgjB;AAAX,AACE,IAAA8d,WAAQ,iBAAAC,WAAS,AAAA,mFAAQ/d;AAAjB,AAAA,wGAAA+d,uCAAAA,vIAACp3B,iDAAAA,2DAAAA;;AAAT,AAAA,GAAA,CAAAm3B,YAAA;AAAA;;AACQ,qDAAAA,SAAA,vDAAC10B,2HAAqB,AAACuR;;;AAFjC;;;IAGdkjB,mBAAa,iBAAA/7B,mBAAI+7B;AAAJ,AAAA,oBAAA/7B;AAAAA;;AAAiBke;;;IAC9B/iB,QAAM,iBAAA+gC,WAAW,AAAA,mFAAQH;AAAnB,AAAA,4GAAAG,yCAAAA,7IAAC97B,mDAAAA,6DAAAA;;IACP6I,OAAK,kBAAI,AAAA,4FAAa9N,QAAOA,MACpB,oCAAA,lBAAM4gC,kBAAa,AAAA,2FAAa,iBAAAI,WAAW,AAAA,mFAAQJ;AAAnB,AAAA,4GAAAI,yCAAAA,7IAAC/7B,mDAAAA,6DAAAA;MAAjC;IACT27B,mBAAa,iBAAA/7B,mBAAI+7B;AAAJ,AAAA,oBAAA/7B;AAAAA;;AAAiBke;;;IAC9BpP,qBAAS,gDAAA,9CACE,GAAA,mBAAA,lBAAOA,2BACPA,iCAEA,iBAAAstB,WAAkB,AAAA,6FAAaL;AAA/B,AAAA,sIAAAK,sDAAAA,pLAAChtB,gEAAAA,0EAAAA;MAJH,MAAA,AAAA;;AARf,AAiBE,IAAAxD,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,oBAAMsS;AAAN,AACE,AAACrR,gDAA0BqR;;AAD7B;;AAEA,oBAAM6d;AAAN,AACE,IAAM/+B,SAAO,iBAAAgD,mBAAI,AAAA,iGAAe+7B;AAAnB,AAAA,oBAAA/7B;AAAAA;;AAAiC,OAAC+N;;;IACzCwuB,sBAAQ,AAAC91B,4CAAI,WAAKtL;AAAL,AACE,OAACkgC,4CAAoBlgC,UAAM8N,KAAKqyB,mBAAmBt+B,OAAOu+B;GAC/Dh6B;IACV2zB,SAAO,wFAAA,2CAAA,nIAACtlB,mDAA6B2sB,oBAAQR,0HAAwBjtB;AAJ3E,AAKE,OAAC2sB,6DAAgCvG;;AANrC;;;AAJF,IAAAmH,+CAAAxwB;IAAAywB,+CAAA,AAAArwB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAywB;;AAAA,IAAA,AAEE,oBAAMpe;AAAN,AACE,AAACrR,gDAA0BqR;;AAD7B;;AAEA,oBAAM6d;AAAN,AACE,IAAM/+B,eAAO,iBAAAgD,mBAAI,AAAA,iGAAe+7B;AAAnB,AAAA,oBAAA/7B;AAAAA;;AAAiC,OAAC+N;;;IACzCwuB,4BAAQ,AAAC91B,4CAAI,WAAKtL;AAAL,AACE,OAACkgC,4CAAoBlgC,UAAM8N,KAAKqyB,mBAAmBt+B,aAAOu+B;GAC/Dh6B;IACV2zB,eAAO,8FAAA,2CAAA,zIAACtlB,mDAA6B2sB,0BAAQR,0HAAwBjtB;AAJ3E,AAKE,AAAC2sB,6DAAgCvG;;AANrC;;AAJF,IAAAhpB,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAAwwB;;;AAYJ,gDAAA,hDAAOG,wGACJC,SAASz/B;AADZ,AAGO,OAACyJ,4CAAI,WAAKtL;AAAL,AACE,IAAMuE,UAAQ,AAAA,uFAAUvE;IAClBwhC,QAAM,6CAAA,7CAACxc,8EAAQ,AAAA,8FAAahlB;IAC5ByhC,gBAAS,CAAK,qHAAA,KAAA,xHAAI,6CAAA,7CAACvgC,0GAAYW,gEACjB,AAACiX,yCAA2BjX,OAAO0C,QAAQi9B;IACzD7yB,MAAI,AAACC,+BAAY6yB,cAAS,AAAC5yB,uEAAwBhN;IACnDuE,SAAO,uDAAA,vDAACs7B,qCAAqB/yB,IAAI8yB,mBAAc5/B;IAC/C8/B,YAAU,AAAC36B,gBAAMZ;AANvB,AAOE,oBAAQu7B;AAAR;AAAA,AAAA,MAAA,KAAAh+B,MAAA,CAAA,kBAAA,6BAAA,KAAA;;;AACA,+DAAA,xDAACwI,8CAAMw1B,0EAAuB,AAAA,8FAAc3hC;GAVrD,AAACuhC,8EAA+BD;;AAYvC;;;;yDAAA,zDAAMM,0HAGHC,gBAAgBluB,eAAS2tB,SAASz/B;AAHrC,AAIE,IAAMuE,SAAO,AAACi7B,8CAAmBC,SAASz/B;IACpC++B,eAAa,CAACl3B,iDAAAA,kEAAAA,nBAAQm4B,8CAAAA;IACtB3hB,UAAQ,AAAA,mFAAQ,AAAA,2FAAa0gB;IAC7Bx6B,aAAO,AAAC07B,+CAA8B5hB,QAAQ9Z;AAHpD,AAIE,uDAAA,2CAAA,iFAAA,5KAACu6B,qCACAv6B,0HACew6B,2EACJjtB;;AAEhB,AAAA,gDAAA,wDAAAnQ,xGAAMw+B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAr+B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8EAAA,9EAAMq+B,yFACFG,WAAWC;AADf,AAEG,oGAAA,7FAACC,4EAAiBF,WAAWC;;;AAFhC,CAAA,8EAAA,4BAAAH,1GAAMD,yFAGFG,WAAWC;AAHf,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAvgC,4BAAAugC;WAAAA,PAGyCzvB;aAHzC,AAAA7Q,4CAAAsgC,eAAA,pEAG6BI;AAH7B,AAIG,IAAAviC,qBAAiB,EAAI,AAACwiC,yBAASH,QACZA,MACA,AAAA,mFAAQ,AAACI,uCAA8B,AAACz1B,eAAKq1B;AAFhE,AAAA,oBAAAriC;AAAA,AAAA,gBAAAA,ZAAWqiC;AAAX,AAGE,IAAMzvB,OAAK,AAACvN;IACNk9B,aAAO,iBAAAz9B,mBAAIy9B;AAAJ,AAAA,oBAAAz9B;AAAAA;;AAAW,OAAC5E;;;IACnBD,QAAM,CAACiF,mDAAAA,8DAAAA,bAAUm9B,0CAAAA;IACjBvgC,SAAO,AAAA,iGAAe7B;IACtBmG,aAAW,AAAA,6FAAanG;IACxByiC,mCAA2B,GAAK,AAAQ,AAAA,6HAA4B,AAAA,uGAAmBziC;IACvFoG,SAAO,CAACs8B,mEAAAA,oFAAAA,nBAA0B/vB,gEAAAA,3DAAKxM,gEAAAA;IACvCw8B,aAAW,CAACj5B,iDAAAA,4DAAAA,bAAQ04B,wCAAAA;IACpBQ,sBAAoB,AAAC72B,+CAAO,WAAK82B;AAAL,AAAQ,OAAC3hC,6CAAE,AAAA,mFAAQ2hC,GAAGT;GAAQh8B;IAC1D08B,gBAAc,AAACC,2CAAiBH,oBAAoBD;IACpDv8B,aAAO,EAAIq8B,kCACFK,cACA,6CAAA,7CAACE,iDAAOF;AAZvB,AAaE,oBAAMX;AAAN,AACE,wDAAA,UAAA,lEAACvS,6CAAgBuS,cAActgC;;AADjC;;AAEA,yBAAA,mFAAA,kDAAA,6DAAA,vNAAMs+B;IACAC,oBAAkB,WAAK77B;AAAL,AACE,uPAAKA,vFACA,4EAAA,5EAACme,qEAAyB7gB,7KAC1B,4EAAA,5EAAC6gB,qEAAyB7gB,tHAC1BohC;;IACzBn1B,OAAK,kBAAI,AAAA,4FAAa9N,QAAOA,MACpB,8BAAA,ZAAMsiC,YAAO,AAAA,2FAAa,iBAAAY,WAAW,AAAA,mFAAQZ;AAAnB,AAAA,4GAAAY,yCAAAA,7IAACj+B,mDAAAA,6DAAAA;MAA3B;IACTm8B,sBAAQ,AAAC91B,4CAAI,WAAKtL;AAAL,AACE,OAACkgC,4CAAoBlgC,UAAM8N,KAAKqyB,mBAAmBt+B,OAAOu+B;GAC/Dh6B;IACVuN,iBAAS,AAAA,4FAAWlB;IACpB0wB,8BAAU,gDAAA,9CACE,GAAA,mBAAA,lBAAOxvB,2BACPA,iCAEA,iBAAAyvB,WAAkB,AAAA,6FAAad;AAA/B,AAAA,sIAAAc,sDAAAA,pLAACnvB,gEAAAA,0EAAAA;MAJH,MAAA,AAAA;;AAZhB,AAqBE,IAAAxD,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACud;;AACD,IAAM+L,SAAO,AAACtlB,mDAA6B2sB,oBACAkB,WACA,mDAAA,nDAACn2B,8CAAMsG,mEAAe0wB;AAFjE,AAGE,OAAC7C,6DAAgCvG;;AANrC,IAAAsJ,+CAAA3yB;IAAA4yB,+CAAA,AAAAxyB,qBAAA;AAAA,AAAA,CAAAJ,8DAAA4yB;;AAAA,IAAA,AAEE,AAACtV;;AACD,IAAM+L,eAAO,AAACtlB,mDAA6B2sB,oBACAkB,WACA,mDAAA,nDAACn2B,8CAAMsG,mEAAe0wB;AAFjE,AAGE,AAAC7C,6DAAgCvG;;AANrC,IAAAhpB,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAA2yB;;;AAvCN;;;;AAJH,CAAA,wEAAA,xEAAMrB;;AAAN,AAmDA,qDAAA,rDAAMuB,kHACHpB;AADH,AAEE,kBAAAqB,SAAuB3D;AAAvB,AAAA,IAAA4D,aAAAD;gBAAA,AAAAx/B,4CAAAy/B,WAAA,IAAA,vEAAMC;YAAN,AAAA1/B,4CAAAy/B,WAAA,IAAA,nEAAgBrB;AAAhB,AACE,oGAAA,2CAAA,uFAAA,/NAACC,4EAAiBF,WAAWC;;;AAGjC,gDAAA,wDAAAuB,xGAAMG;AAAN,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAjiC,4BAAAiiC;WAAAA,PAC0Ct+B;IAD1Cu+B,aAAA,AAAAjiC,4CAAAgiC,eAAA;IAAAC,iBAAA,AAAAliC,4BAAAkiC;aAAA,AAAAjiC,4CAAAiiC,eAAA,pEACkBE;WADlB,AAAAniC,4CAAAiiC,eAAA,lEACyB/1B;AADzB,AAAA,GAES,AAACk2B,sDAAsB1+B;AAFhC;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAGE,OAACzC,6CAAE6iC,OAAOj2B;;AAEZ,2CAAA,3CAAMm2B,8FACH3+B;AADH,AAEE,GAAU,AAACw+B,8CAAgBx+B;AAA3B;;AAAA,AACE,IAAM4+B,cAAY,AAACC,2CAAiB7+B;AAApC,AACE,IAAAmL,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,mEAAA,6EAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA,mEAAA,6EAAA;AAAA,AAAA,oBAAAsE;AAAA,AAGE,AAACud;;AACD,wDAAA,oRAAA,rUAACsW,oIAA4B,AAAA,mFAAOh/B,cAAO,AAAA,mFAAO4+B;;AAJpD,IAAAE,+CAAA1zB;IAAA2zB,+CAAA,AAAAvzB,qBAAA;AAAA,AAAA,CAAAJ,8DAAA2zB;;AAAA,IAAA,AAGE,AAACrW;;AACD,iDAAA,oRAAA,rUAACsW,oIAA4B,AAAA,mFAAOh/B,cAAO,AAAA,mFAAO4+B;;AAJpD,IAAAnzB,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAA0zB;;;;AAMN,sDAAA,8DAAAG,pHAAOE,6HACSC;AADhB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAA7iC,4BAAA6iC;SAAA,AAAA5iC,4CAAA4iC,eAAA,hEACW9+B;AADX,AAEE,oBAAMA;AAAN,AACE,IAAA3F,qBAAkB,iBAAAwd,qBAAa,AAAClT,qBAAW,4CAAK3E;AAA9B,AAAA,oBAAA6X;AAAA,sBAAAA,lBAASqnB;AAAT,AACE,IAAAC,WAAA,mFAAA,+DAAwBD;AAAxB,AAAA,4GAAAC,yCAAAA,7IAAC5/B,mDAAAA,6DAAAA;;AACD,IAAA6/B,WAAA,mFAAA,8DAAwB,CAAC7yB,kEAAAA,sEAAAA,NAAyBvM,kDAAAA;AAAlD,AAAA,4GAAAo/B,yCAAAA,7IAAC7/B,mDAAAA,6DAAAA;;;AAFrB,AAAA,oBAAAlF;AAAA,AAAA,aAAAA,TAAW4kC;AAAX,AAGE,OAACzjC,6CAAE,AAAA,6FAAayjC,QAAQ,AAACI,8CAAoBL;;AAH/C;;;AADF;;;AAMF,iCAAA,jCAAOM,0EACJC;AADH,AAEE,oBAAU,AAAC/J;AAAX;;AAAA,AACE,IAAU96B,QAAM,AAACm/B;IACX2F,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;IACrCM,QAAM,AAASN;IACfglC,KAAG,mDAAA,nDAACtkC,6CAAKJ,UAAQwkC;IACjBG,KAAG,AAACvkC,6CAAKJ,MAAMykC;AALrB,AAME,AAACtiC,oEAAwB,AAAC1C,mCACD,CAAKilC,+CAAGH,WAAUI;;AAC3C,OAACtiC,oCAAsB3C,MAAM,CAAG8kC,iBAAe,AAACnkC,gBAAMkkC;;;AAE5D,2CAAA,3CAAOK;AAAP,AAEE,sCAAA,/BAACN;;AAEH,AAAA,AAEA,6CAAA,7CAAOO,kGACJvuB;AADH,AAEE,oBAAU,AAACkkB;AAAX;;AAAA,AACE,IAAAsK,aAAsB,AAAClvB;IAAvBkvB,iBAAA,AAAA7jC,4BAAA6jC;YAAA,AAAA5jC,4CAAA4jC,eAAA,nEAAcxlC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAACm/B;IACPh7B,UAAQ,0DAAA,1DAAC5D,oDAASP;IAClByB,SAAO,AAAA,iGAAe,AAAA,oFAAQ,AAACyU;IAC/BmvB,eAAa,AAAA,kGAAc,AAACC,qIAAgCtlC;IAC5DulC,aAAK,oDAAA,pDAACzkC,6CAAEW;IACR+jC,cAAY,cAAA,IAAA,hBAAID;AALtB,AAME,GAAIA;AACF,oBACE,iBAAAthC,oBAAKohC;AAAL,AAAA,oBAAAphC;AAAkB,oEAAA,7DAACxD,gDAAK4kC;;AAAxBphC;;;AACA,IAAAwhC,WAAMJ;AAAN,AAAA,QAAAI;KAAA;AAGE,AAAI,AAACC,6CAA+B1lC;;AAChC,+BAAA,/BAAC4kC;;AACD,OAACe,wEAA4B3lC,MAAMwlC;;;KALzC;AAQE,AACE,AAACI,wCAA0B5lC;;AAC3B,AAAC4tB;;AACD,OAAC/W,6EAAkBD;;;;AAErB,GAAI,AAACivB,iDAA6BpkC,OAAO0C,QAAQkhC;AAC/C,8EAAA,mFAAA,6OAAA,vYAACzyB,0NAEC,0DAAA,1DAACzD,kJAAkDk2B;;AAErD,OAACK,6CAA+B1lC;;;;;AApBtC,oBAuBE,iBAAAiE,oBAAKohC;AAAL,AAAA,oBAAAphC;AAAkB,iEAAA,1DAACnD,6CAAEukC;;AAArBphC;;;AACA,AAAI,IAAA6hC,iBACC9lC;IADD+lC,iBAEC,AAACG,wCAA0BlmC;IAF5BgmC,iBAGC,4CAAA,3CAAK,AAACG,kCAAoBnmC;AAH3B,AAAA,mJAAA8lC,eAAAC,eAAAC,sEAAAF,eAAAC,eAAAC,pRAACC,0EAAAA,wHAAAA;;AAID,AAACG,2CAA6B3kC,OAAOzB;;AACrC,OAAC0lC,6CAA+B1lC;;AA7BtC,AAgCE,AACE,+BAAA,/BAAC4kC;;AACD,OAACe,wEAA4B3lC,MAAMwlC;;;;;AACvC,sCAAA,/BAACZ;;;AA3CP;;;;AA6CN,+CAAA,uDAAAyB,tGAAME,+GAC+BC,iBAAiBC;AADtD,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAA/kC,4BAAA+kC;YAAAA,RAC8B1mC;cAD9B,AAAA4B,4CAAA8kC,eAAA,rEACiBniC;AADjB,AAEE,IAAMyI,cAAY,AAACoO,6BAAqB7W,QAAQqiC,iBAAiBC;AAAjE,AACE,OAACt0B,kFAAuBvS,MAAMgN;;AAElC,uCAAA,vCAAO85B;AAAP,AAEE,oBAAU,AAAC5L;AAAX;;AAAA,AACE,IAAA6L,aAAsB,AAACzwB;IAAvBywB,iBAAA,AAAAplC,4BAAAolC;YAAA,AAAAnlC,4CAAAmlC,eAAA,nEAAc/mC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAACm/B;AAAb,AACE,IAAAx/B,qBAAgB,AAACknC,kIAA6B7mC;AAA9C,AAAA,oBAAAL;AAAA,AAAA,WAAAA,PAAWinC;AAAX,AACE,IAAAE,aAA8DF;IAA9DE,iBAAA,AAAAvlC,4BAAAulC;mBAAA,AAAAtlC,4CAAAslC,eAAA,1EAAcC;aAAd,AAAAvlC,4CAAAslC,eAAA,pEAA2BE;aAA3B,AAAAxlC,4CAAAslC,eAAA,pEAAkCG;eAAlC,AAAAzlC,4CAAAslC,eAAA,tEAAyCI;cAAzC,AAAA1lC,4CAAAslC,eAAA,rEAAkDK;QAAlD,AAAA3lC,4CAAAslC,eAAA,/DAA0Dj8B;IACpDu8B,cAAY,kBAAID,SAAQ,6DAAA,hBAAK,UAAA,TAAKF,6BAAaA;IAC/CC,eAAS,4BAAA,AAAA,OAAA,jBAAMA;AAFrB,AAGE,GAAI,EACC,AAACpmC,6CAAE,AAACH,gBAAMomC,cACP,CAAG,kGAAA,hFAAII,SAAQ,kEAAA,jEAAG,EAAO,4CAAKF,+BAAe,gCAAA,wBAAA,tCAAMC,cAAS,EAAOA,mCACtE,2CAAA,3CAACxJ,+BAAiB,AAAS19B;AAC9B,IAAAqnC,WAAmBrnC;IAAnBsnC,WAAyB,AAACpB,wCAA0BlmC;IAApDunC,WAA2D,AAACpB,kCAAoBnmC;AAAhF,AAAA,0JAAAqnC,SAAAC,SAAAC,gEAAAF,SAAAC,SAAAC,tPAACtB,0EAAAA,sGAAAA;;AACD,IAAMzc,YAAU,AAACrpB,kCAAyBH;IACpCM,QAAM,AAASN;IACfu4B,SAAO,mDAAA,nDAAC73B,6CAAKJ,UAAQkpB;IACrBge,QAAM,AAAC9mC,6CAAKJ,MAAMkpB;IAClBie,gCAAwB,iBAAAxjC,oBAAK,kBAAA,lBAAC4lB,gCAAuB,AAAC1c,eAAK,AAACxE,2BAAmB4vB;AAAvD,AAAA,oBAAAt0B;AACK,UAAK,AAAC2N,4BAAc,AAAChL,gBAAM,AAAC+B,2BAAmB6+B;;AADpDvjC;;;AAJ9B,AAME,oBAAUwjC;AAAV;AAAA,AACE,AAAC/B,6CAA+B1lC;;AAChC,AAAC4kC,+BAAO,CAAA,kHAAA,jEAAUoC,oDAAOI,iBAAgBF;;;AAC3C,oBAAMC;AAAN,AACE,IAAM7mC,YAAM,AAASN;IACfwpB,gBAAU,AAACrpB,kCAAyBH;IACpC0nC,kBAAgB,AAACxmC,oBAAY,AAACR,6CAAKJ,UAAMkpB;IACzCke,sBAAgB,kBAAID,+BACF,8GAAA,jEAAKT,oDAAOI,iBAAgBM,0BAC5BA;IAClBC,QAAM,AAACh/B,2BAAmB++B;IAC1BE,+BAAiB,AAACC,kCAAoBF,MAAM,kBAAIF,+BAAwBR,OAAO,UAAA,TAAKA;IACpF3nB,qBAAO,2EAAA,1EAAK,uDAAA,vDAAC5e,6CAAKJ,cAAQkpB,oBAAgBoe;IAC1CE,sBAAQ,kBAAIL,+BACF,oNAAA,nNAAK,EAAO,wLAAA,vLAAK,uDAAA,vDAAC/mC,6CAAKJ,cAAQkpB,2DAAWwd,oDAAOI,2CACjD,CAAA,0HAAA,zHAAG,AAAA,iFAAMR,QAAM,AAACjmC,gBAAMymC;AAXtC,AAYE,AAAC3kC,oEAAwB,AAAC1C,mCAAyBuf;;AACnD,OAAC3c,oCAAsB3C,MAAM8nC;;AAdjC;;;;AAlBR;;;AAFJ;;;;AAoCN,4CAAA,5CAAMC;AAAN,AAEE,oBAAU,AAACjN;AAAX;;AAAA,AACE,IAAAkN,aAAsB,AAAC9xB;IAAvB8xB,iBAAA,AAAAzmC,4BAAAymC;YAAA,AAAAxmC,4CAAAwmC,eAAA,nEAAcpoC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAACm/B;IACP19B,SAAO,iBAAAgD,mBAAI,iBAAAwjC,WAAoB,AAACzzB;AAArB,AAAA,8HAAAyzB,kDAAAA,xKAACxvB,4DAAAA,sEAAAA;;AAAL,AAAA,oBAAAhU;AAAAA;;AAAkD,OAAC+N;;;IAC1D01B,uBAAqB,iBAAAC,WAAM1mC;IAAN0mC,eAAA,EAAA,CAAAA,oBAAA5/B,oBAAA,AAAA4/B,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;;AAAA;;;;IACrB7K,cAAY,AAACx5B,yBAAW9D;IACxBmE,UAAQ,AAACmZ;IACT5X,MAAI,AAACrG,6CAAKi+B;AALhB,AAME,IAAAngB,2BAAc,AAAC0pB,kIAA6B7mC;AAA5C,AAAA,oBAAAmd;AAAA,iBAAAA,bAASypB;AAAT,AACE,IAAAwB,mBAAwBxB;IAAxBwB,uBAAA,AAAA7mC,4BAAA6mC;oBAAA,AAAA5mC,4CAAA4mC,qBAAA,jFAAcjB;IACRkB,2BAAmB,AAACC,6HAAwBtoC;IAC5CuoC,qBAAa,AAACC,uHAAkBxoC;IAChCyoC,aAAK,AAAC/nC,6CAAKyD,QAAQkkC,yBAAmBE;IACtCG,cAAM,AAAC//B,2BAAmB8/B;IAC1BE,qBAAa,iCAAA,aAAA,5BAAIxB;IACjByB,6BAAqB,AAACvlB,cAAI,4CAAA,WAAAwlB,vDAAC39B;AAAD,AAAM,OAACiC,eAAK,mDAAA07B,oCAAA,vFAACzK,oEAAeuK;GAAiBD;IACvEI,iBAAS,kDAAA,lDAACpiB,uDACY,kBAAIygB,eACF,4CAAA,WAAA4B,vDAAC79B;AAAD,AAAM,0EAAA,gDAAA69B,tEAAKb;GAA4BU,4BACvC,oDAAA,WAAAI,iBAAAC,hFAACvjB;AAAD,AAAc,8EAAA,iDAAAujB,3EAAK,CAAAD,mBAAA;GAAkBJ;IAC7DM,8BAAsB,gPAAA,/OAAK,AAAUN,mCACA,AAACz7B,eAAK,oLAAA,pLAACixB,mDAAa,AAAA,kGAAcwI,YAAM+B;IAC7EQ,uBAAe,EAAA,kDAAK,oDAAA,WAAAC,/DAAC1jB,lDAIDgB;AAJA,AAEE,8EAAA,1BAAK,CAAA0iB,mBAAA;GACN,0EAAA,1EAACC,+CAAOT,+BAAuBM;IAGpDI,iBAAS,CAAGH,uBAAe,CAAA,MAAKD;AAnBtC,AAoBE,CAACjD,0EAAAA,6HAAAA,rDAAkBjmC,yGAAAA,nGAAMqoC,yGAAAA,hFAAmBE,yGAAAA;;AAC5C,AAAC3D,+BAAOkE;;AACR,AAAC5iB,sBAAOxgB,IAAI,kBAAIyhC,eACF,CAAG7J,cAAYgM,gBACf,CAAGhM,cAAYgM;;AAC/B,IAAMC,kBAAU,AAACC,wHAAmBxpC;AAApC,AACE,AAACypC,sCAAwBzpC;;AACzB,AAAC0pC,mDAAqC1pC;;AACtC,oBAAIupC;AACF,IAAAI,mBAA+BJ;IAA/BI,uBAAA,AAAApoC,4BAAAooC;mBAAA,AAAAnoC,4CAAAmoC,qBAAA,hFAAc1C;oBAAd,AAAAzlC,4CAAAmoC,qBAAA,jFAAqBxC;IACfyC,uBAAe,kBAAIzC,eAAQ,mEAAA,tBAAK,gBAAA,fAAKF,mCAAaA;AADxD,AAEE,AAACrC,+BAAO,mEAAA,tBAAKgF;;AACb,AAAC1jB,sBAAOxgB,IAAI,CAAA,wDAAA,vDAAG43B,cAAY,AAAC38B,gBAAMipC;;AACpC,AAAI,AAAChF,+BAAO,mEAAA,tBAAKsD;;AACb,AAAChiB,sBAAOxgB,IAAI,eAAA,dAAG43B;;;;AACzB,iDAAA,AAAArX,1CAACtjB,oCAAsB3C,sBAAO0F;;AA3ClC;;;;AA6CN,sDAAA,tDAAMmkC,oHACHC;AADH,AAEE,IAAAC,aAAsB,AAAC7zB;IAAvB6zB,iBAAA,AAAAxoC,4BAAAwoC;YAAA,AAAAvoC,4CAAAuoC,eAAA,nEAAcnqC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAACm/B;IACP3hB,UAAQ,AAAC6a,iEAAqBr4B;IAC9BgqC,cAAY,WAAKC,OAAOC;AAAZ,AACE,8DAAA,2CAAA,kFAAA,pLAACC,sCACAL,UAAUG,uHACKC,2EACJ,WAAKr/B,EAAEA,MAAEA;AAAT,AACE,AAACqb,sBAAOkS,wCAA0B5a;;AAClC,mEAAA,mFAAA,/IAAC2a;;;AARnC,AASE,iDAAA,jDAACyF;;AACD,IAAMp9B,YAAU,AAACd;IAAjB0qC,aACwD5pC;IADxD4pC,iBAAA,AAAA7oC,4BAAA6oC;sBAAA,AAAA5oC,4CAAA4oC,eAAA,7EACclqC;oBADd,AAAAsB,4CAAA4oC,eAAA,3EAC8BhqC;oBAD9B,AAAAoB,4CAAA4oC,eAAA,3EAC4C5pC;AAD5C,AAEE,oBAAIA;AACF,AAAI,CAACylC,0EAAAA,+GAAAA,vCAAkBjmC,2FAAAA,rFAAME,2FAAAA,3EAAgBE,2FAAAA;;AACzC,OAACwkC,+BAAO,0DAAA,1DAACz1B,qHAAqB3O;;AAClC,IAAA2c,qBAAmB,AAACmtB,oIAA+BtqC;AAAnD,AAAA,oBAAAmd;AAAA,gBAAAA,ZAASktB;AAAT,AACE,IAAAE,aAAsCF;IAAtCE,iBAAA,AAAAhpC,4BAAAgpC;kBAAA,AAAA/oC,4CAAA+oC,eAAA,zEAAcC;YAAd,AAAAhpC,4CAAA+oC,eAAA,nEAA0BE;UAA1B,AAAAjpC,4CAAA+oC,eAAA,jEAAgC7hC;AAAhC,AACE,CAACu9B,0EAAAA,2FAAAA,nBAAkBjmC,uEAAAA,jEAAMyqC,uEAAAA,jEAAM/hC,uEAAAA;;AAC/B,GAAI,6CAAA,7CAAC5H,iDAAI,AAACH,gBAAM6pC;AACd,mBAAA,OAAA,nBAACR;;AACD,OAACpF,+BAAO4F;;;AACZ,IAAArtB,yBAAkB,AAACwtB,iIAA4B3qC;AAA/C,AAAA,oBAAAmd;AAAA,eAAAA,XAASutB;AAAT,AACE,IAAAE,aAAmDF;IAAnDE,iBAAA,AAAArpC,4BAAAqpC;YAAA,AAAAppC,4CAAAopC,eAAA,nEAAcH;UAAd,AAAAjpC,4CAAAopC,eAAA,jEAAoBliC;mBAApB,AAAAlH,4CAAAopC,eAAA,1EAAwB7D;kBAAxB,AAAAvlC,4CAAAopC,eAAA,zEAAqCJ;AAArC,AACE,CAACvE,0EAAAA,2FAAAA,nBAAkBjmC,uEAAAA,jEAAMyqC,uEAAAA,jEAAM/hC,uEAAAA;;AAC/B,GAAI,yDAAA,zDAAC5H,6CAAE0pC;AACL,mBAAA,iBAAA,7BAACR;;AACD,OAACpF,+BAAO,0DAAA,1DAACz1B,2HAA2B43B;;;AACxC,mBAAA,OAAA,nBAACiD;;;;;AA5Bb;;;AA8BJ,uDAAA,vDAAMa,sHACHf;AADH,AAEE,IAAAgB,aAAsB,AAAC50B;IAAvB40B,iBAAA,AAAAvpC,4BAAAupC;YAAA,AAAAtpC,4CAAAspC,eAAA,nEAAclrC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAACm/B;IACP3hB,UAAQ,AAAC6a,iEAAqBr4B;IAC9B+qC,eAAa,WAAKd,OAAOC;AAAZ,AACE,8DAAA,2CAAA,kFAAA,pLAACC,sCACAL,UAAUG,uHACKC,2EACA,WAAKr/B,EAAEA,MAAEA;AAAT,AACE,AAACqb,sBAAOkS,wCAA0B5a;;AAClC,mEAAA,mFAAA,/IAAC2a;;;AARxC,AASE,kDAAA,lDAACwF;;AACD,IAAAxgB,qBAAmB,AAACmtB,oIAA+BtqC;AAAnD,AAAA,oBAAAmd;AAAA,gBAAAA,ZAASktB;AAAT,AACE,IAAAW,aAAsCX;IAAtCW,iBAAA,AAAAzpC,4BAAAypC;kBAAA,AAAAxpC,4CAAAwpC,eAAA,zEAAcR;YAAd,AAAAhpC,4CAAAwpC,eAAA,nEAA0BP;UAA1B,AAAAjpC,4CAAAwpC,eAAA,jEAAgCtiC;AAAhC,AACE,CAACu9B,0EAAAA,2FAAAA,nBAAkBjmC,uEAAAA,jEAAMyqC,uEAAAA,jEAAM/hC,uEAAAA;;AAC/B,GAAI,6CAAA,7CAAC5H,iDAAI,AAACH,gBAAM6pC;AACd,oBAAA,OAAA,pBAACO;;AACD,OAACnG,+BAAO4F;;;AACZ,IAAArtB,yBAAkB,AAAC8tB,kIAA6BjrC;AAAhD,AAAA,oBAAAmd;AAAA,eAAAA,XAASutB;AAAT,AACE,IAAAQ,aAAmDR;IAAnDQ,iBAAA,AAAA3pC,4BAAA2pC;YAAA,AAAA1pC,4CAAA0pC,eAAA,nEAAcT;UAAd,AAAAjpC,4CAAA0pC,eAAA,jEAAoBxiC;mBAApB,AAAAlH,4CAAA0pC,eAAA,1EAAwBnE;kBAAxB,AAAAvlC,4CAAA0pC,eAAA,zEAAqCV;AAArC,AACE,CAACvE,0EAAAA,2FAAAA,nBAAkBjmC,uEAAAA,jEAAMyqC,uEAAAA,jEAAM/hC,uEAAAA;;AAC/B,GAAI,yDAAA,zDAAC5H,6CAAE0pC;AACL,oBAAA,iBAAA,9BAACO;;AACD,OAACnG,+BAAO,0DAAA,1DAACz1B,2HAA2B43B;;;AACxC,oBAAA,OAAA,pBAACgE;;;;AAvBT;;;AAyBJ,4CAAA,5CAAOI,gGACJv0B;AADH,AAEE,oBAAU,AAACkkB;AAAX;;AAAA,AACE,IAAAsQ,aAA6B,AAACl1B;IAA9Bk1B,iBAAA,AAAA7pC,4BAAA6pC;YAAA,AAAA5pC,4CAAA4pC,eAAA,nEAAcxrC;aAAd,AAAA4B,4CAAA4pC,eAAA,pEAAoBh4B;AAApB,AACE,oBAAMxT;AAAN,AACE,IAAMI,QAAM,AAACm/B;IACPh7B,UAAQ,0DAAA,1DAAC5D,oDAASP;IAClB0F,MAAI,AAAC5B,yBAAW9D;IAChBskC,eAAa,AAACjkB,qCAAoBzgB;IAClCyrC,yEAAe,AAACC,0CAAgBhH,hGACjB,AAACV;IAChB2H,iBACA,iBAAA9mC,mBAAI,mIAAA,6JAAA,9QAAM,oCAAA,pCAAC+mC,iHACL,AAACC,iJAAkCzrC;AADzC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAEI,oHAAA,2IAAA,7OAAM,oCAAA,pCAAC+mC,kGACL,AAACE,+HAA0B1rC;AAHjC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAII,yHAAA,8IAAA,rPAAM,oCAAA,pCAAC+mC,uGACL,AAACP,kIAA6BjrC;AALpC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAMI,sHAAA,6IAAA,jPAAM,oCAAA,pCAAC+mC,oGACL,AAACb,iIAA4B3qC;AAPnC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAQI,wHAAA,+IAAA,rPAAM,oCAAA,pCAAC+mC,sGACL,AAACzc,mIAA8B/uB;AATrC,AAAA,oBAAAyE;AAAAA;;AAUI,oBAAM,oCAAA,pCAAC+mC;AAAP,AACE,IAAAvnC,oBAAK,AAAC4I,cAAI,AAAC8+B,8CAA0B3rC;AAArC,AAAA,GAAAiE;AACK,OAAC4iC,kIAA6B7mC;;AADnCiE;;;AADF;;;;;;;;AAjBV,AAoBE,oBACEsnC;AACA,IAAAK,WAAM,AAAA,mFAAOL;AAAb,AAAA,QAAAK;KAAA;AACW,IAAMC,cAAY,AAAA,uFAASN;AAA3B,AACE,OAAC5oC,oCACA3C,MACA,CAAG,AAAC8rC,sDAAgB3nC,QAAQ0nC,YAAYnmC,OACrC,AAAC/E,gBAAMkrC;;;KALxB;AAMqB,OAAC3G;;;KANtB;AAOiB,AACE,AAACA;;AACD,IAAA6G,WAAM,AAAA,uFAASR;IAAfQ,eAAA,EAAA,CAAAA,oBAAAxjC,oBAAA,AAAAwjC,aAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,OAACC;;;;AAFH;;;;;KATnB;AAac,OAACtnC,oDAAuB,AAAA,oFAAO6mC;;;KAb7C;AAca,GAAU,AAAC35B,4BAAc,AAAA,oFAAO25B;AAAhC;;AAAA,AACE,IAAM79B,OAAK,AAAA,oFAAO69B;IACZnhB,YAAU,AAACC,uEAAgC3c;AADjD,AAEE,OAAC4L,kGAAuC8Q;;;;KAjBzD;AAkBc,OAACsc;;;KAlBf;AAmBsB,OAACvB,2CAAmBvuB;;;;AAnB1C,MAAA,KAAArT,MAAA,CAAA,mEAAAqoC;;;;AAFF,GAuBE,4CAAA,1CACC,AAACh6B,4BAAczN,gBACf,GAAKknC,wBACL,AAACx+B,cAAI,AAACw3B,oDAAsBjxB,OAAOkxB;AACpC,OAACT,yCAAiBS;;AA3BpB,AA8BE,oBAAAr0B;AAAA,IAAAC,mBAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,qBAAA,AAEC;AAAI,AAACwd;;AACD,OAAC/W,6EAAkBD;;;AAHxB,AAAA,AAAAzG,gBAAAD;;AAAAE;;AAAA,AAEC,AAAI,AAACwd;;AACD,OAAC/W,6EAAkBD;;;;;;AAtD9B;;;;AAwDN,oDAAA,pDAAMq1B,gHAA2Br1B,MAAMugB;AAAvC,AACE,oBAAI,AAAC+U;AACH,OAAChH;;AACD,AACE,AAAiB/N;;AACjB,OAACgU,0CAAkBv0B;;;AAEzB,mDAAA,nDAAMu1B,8GAA0Bv1B,MAAMugB;AAAtC,AACE,oBAAI,AAAC+U;AACH,OAACf,0CAAkBv0B;;AACnB,AACE,AAAiBugB;;AACjB,OAAC+N;;;AAEP;;;4CAAA,5CAAOkH,gGAEJ/jC;AAFH,AAGE,IAAM8jB,IAAE,iBAAAkgB,WAAMhkC;IAANgkC,eAAA,EAAA,CAAAA,oBAAA9jC,oBAAA,AAAA8jC,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAoBl/B;;;KAApB;AAA+BvG;;;;AAA/B,MAAA,KAAArD,MAAA,CAAA,mEAAA8oC;;;;IACFzsC,oCAAW,AAAC0sC,5BACD,iBAAAC;AAAA,AAAA,0EAAAA,wBAAAA,1FAACpgB,kCAAAA,4CAAAA;;AAFlB,AAGE,oBAAMvsB;AAAN,AACE,qBAAA,cAAA,mBAAA,tDAAiBA;;AACjB,+FAAA,xFAACykB,2KAA6CzkB;;AAFhD;;;AAIJ,yCAAA,zCAAO4sC,0FAAgBnkC;AAAvB,AACE,IAAMuvB,WAAS,AAAChxB,gBAAM,AAACmV;IACjBoQ,IAAE,iBAAAsgB,WAAMpkC;IAANokC,eAAA,EAAA,CAAAA,oBAAAlkC,oBAAA,AAAAkkC,aAAA;AAAA,AAAA,QAAAA;KAAA;AACMrgB;;;KADN;AAEQsgB;;;;AAFR,MAAA,KAAAnpC,MAAA,CAAA,mEAAAkpC;;;;IAGF1tB,gBAAc,CAACoN,kCAAAA,4CAAAA,ZAAEyL,wBAAAA;AAJvB,AAKE,oBAAM,iBAAA3zB,oBAAK8a;AAAL,AAAA,oBAAA9a;AAAmB,qCAAA,9BAACyY,gBAASqC;;AAA7B9a;;;AAAN,AACE,6BAAA,cAAA,mBAAA,9DAAiB8a;;AACjB,+FAAA,xFAACsF,2KAA6CtF;;AAFhD;;;AAIJ,uDAAA,vDAAO4tB,sHACJtkC;AADH,AAEE,IAAMrI,QAAM,AAACm/B;IACP0N,WAAS,AAACC,yCAAgC9sC;IAC1CuS,OAAK,AAACvN;IACNmnB,IAAE,iBAAA4gB,WAAM1kC;IAAN0kC,eAAA,EAAA,CAAAA,oBAAAxkC,oBAAA,AAAAwkC,aAAA;AAAA,AAAA,QAAAA;KAAA;AACM3gB;;;KADN;AAEQsgB;;;;AAFR,MAAA,KAAAnpC,MAAA,CAAA,mEAAAwpC;;;;IAGFhuB,gBAAc,iBAAAiuB,WAAG,AAAC/sC,oBAAgB,AAACgsB;AAArB,AAAA,0EAAA+gB,wBAAAA,1FAAC7gB,kCAAAA,4CAAAA;;IANrBygB,aAO0C,AAAC/sC;IAP3C+sC,iBAAA,AAAArrC,4BAAAqrC;WAAA,AAAAprC,4CAAAorC,eAAA,lEAOoBj/B;cAPpB,AAAAnM,4CAAAorC,eAAA,rEAOyBzoC;aAPzB,AAAA3C,4CAAAorC,eAAA,pEAOiCnrC;AAPjC,AAQE,oBAAMsd;AAAN,AACE,IAAApf,qBAA4B,8BAAA,9BAAC+c,gBAASqC;AAAtC,AAAA,oBAAApf;AAAA,AAAA,uBAAAA,nBAAWqf;AAAX,AACE,IAAM1e,cAAM,AAACgd;AAAb,AACE,GAAM,AAAC7c,gDAAK,AAAC0uB,4CAAe1tB,OAAO0C,SACvB,AAACjD,oBAAYZ;AADzB,AAEE,AAACgtB,uEAAY/a,KAAK5E,KAAKrN;;AAFzB;;AAIF,IAAM2sC,SAAO,+FAAA,WAAA,1GAACrlC,uBAAe,kEAAA,lEAACrH,oDAASwe;IACjCmuB,WAAS,AAACvwB,eAAeqC;IACzBpf,QAAM,iBAAAutC,WAAS56B;IAAT66B,WAAA,AAAA;IAAAC,WAAA,mFAAA,+DAAgCH;AAAhC,AAAA,wGAAAC,SAAAC,SAAAC,uCAAAF,SAAAC,SAAAC,3KAAC/jC,iDAAAA,6EAAAA;;AAFb,AAGE,oFAAA,7EAACN,uEAAYpJ,yFACCyI,UAAUwkC,iBACXI;;AAXjB;;;AADF;;;AAcJ,kDAAA,lDAAMK,4GACHjlC;AADH,AAEE,IAAMrI,QAAM,AAACm/B;IACP2F,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;IACrCi7B,YAAI,uDAAA,vDAACn6B,6CAAEuH;IACPklC,cAAM,uDAAA,vDAACzsC,6CAAEuH;AAJf,AAKE,GACE,AAAC5H,gDAAKqkC,eAAeC;AACrB,GAAI9J;AACF,OAACt4B,oCAAsB3C,MAAM8kC;;AAC7B,OAACniC,oCAAsB3C,MAAM+kC;;;AAJjC,GAME,EAAI,EAAK9J,eAAI,AAACuS,sDAAkCxtC,cAC5C,EAAKutC,iBAAM,AAACE,qDAAiCztC;AACjD,OAAC2sC,qDAA6BtkC;;AARhC,AAWE,GAAI4yB;AACF,OAACyS,oCAAsB1tC;;AACvB,OAACypC,sCAAwBzpC;;;;;;AAEjC,6DAAA,7DAAO2tC,kIACJtlC;AADH,AAEE,IAAM4yB,YAAI,6CAAA,7CAACn6B,kGAAQuH;IACb3C,MAAI,aAAA,iDAAA,5DAAIu1B;IADd2S,aAE4C,AAAC/tC;IAF7C+tC,iBAAA,AAAArsC,4BAAAqsC;YAAAA,RAEqChuC;aAFrC,AAAA4B,4CAAAosC,eAAA,pEAEoBnsC;WAFpB,AAAAD,4CAAAosC,eAAA,lEAE2BjgC;IACrBrI,KAAG,AAACvF;IACJwS,OAAK,AAACvN;IACNmnB,IAAE,EAAI8O,WAAI7O,2CAAkCsgB;IAC5C3tB,gBAAc,iBAAA8uB,WAAG,AAAC5tC,oBAAgB,AAACgsB;AAArB,AAAA,0EAAA4hB,wBAAAA,1FAAC1hB,kCAAAA,4CAAAA;;AANrB,AAOE,oBAAMpN;AAAN,AACE,IAAApf,qBAA4B,8BAAA,9BAAC+c,gBAASqC;AAAtC,AAAA,oBAAApf;AAAA,AAAA,uBAAAA,nBAAWqf;AAAX,AACE,IAAM7a,gBAAQ,AAAA,kGAAgBvE;IACxBU,cAAM,AAACgd;AADb,AAEE,GAAM,AAAC7c,gDAAK,AAAC0uB,4CAAe1tB,OAAO0C,eACvB,AAACjD,oBAAYZ;AADzB,AAEE,AAACgtB,uEAAY/a,KAAK5E,KAAKrN;;AAFzB;;AAGF,IAAMV,YAAM,iBAAAkuC,WAASv7B;IAATw7B,WAAA,AAAA;IAAAC,WAAA,mFAAA,+DAAgC,AAACrxB,eAAeqC;AAAhD,AAAA,wGAAA8uB,SAAAC,SAAAC,uCAAAF,SAAAC,SAAAC,3KAAC1kC,iDAAAA,6EAAAA;;AAAb,AACE,OAACN,uEAAYpJ,UAAM8F,IAAIJ;;AAP3B;;;AADF;;;AAUJ,gDAAA,hDAAM2oC,wGACH5lC;AADH,AAEE,IAAMrI,QAAM,AAACm/B;IACP7S,UAAQ4hB;IACRpJ,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;IACrCmuC,cAAM,uDAAA,vDAACrtC,6CAAEuH;IACT+lC,eAAO,uDAAA,vDAACttC,6CAAEuH;AALhB,AAME,GAAM,AAACvH,6CAAEd,MAAMssB;AAAf,AACE,GACE,AAAC7rB,gDAAKqkC,eAAeC;AACrB,GAAIoJ;AACF,OAACxrC,oCAAsB3C,MAAM8kC;;AAC7B,OAACniC,oCAAsB3C,MAAM+kC;;;AAJjC,oBAME,iBAAAtgC,mBAAI,iBAAAR,oBAAKkqC;AAAL,AAAA,GAAAlqC;AAAW,OAACoqC,kCAAcruC;;AAA1BiE;;;AAAJ,AAAA,oBAAAQ;AAAAA;;AACI,IAAAR,oBAAKmqC;AAAL,AAAA,GAAAnqC;AAAY,OAACqqC,gCAAYtuC;;AAAzBiE;;;;AACJ,OAAC0pC,2DAAmCtlC;;AARtC,AAWE,GAAI8lC;AACF,OAACxI,wEAA4B3lC;;AAC7B,OAAC6/B,uEAA2B7/B;;;;;;AAdlC;;;AAgBJ,4CAAA,5CAAOimC,gGAAuBjmC,MAAMyqC,MAAM/hC;AAA1C,AACE,4EAAA,5EAAC6lC,sEAA0BvuC,SAASyqC,MAAM/hC;;AAC1C,OAACjG,oEAAwB,AAAC1C,mCAAyB,AAASC;;AAE9D,wCAAA,xCAAOwuC,wFAAen7B;AAAtB,AACE,IAAMkI,WAAS,AAACxb;IACNC,QAAM,AAACm/B;IACX7B,cAAY,AAACx5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChByuC,QAAM,AAACC,8CAA6B,AAACruB,qCAAoBhN;IACzDs7B,oCAA4B,iBAAAC,WAAkB,AAAA,6FAAav7B;AAA/B,AAAA,sIAAAu7B,sDAAAA,pLAAC/6B,gEAAAA,0EAAAA;;IAC7Bg7B,mBAAW,AAAC96B,+BAAgBV;IAC5By7B,cAAY,AAAA,mFAAO,AAACC,yCAAe,AAAC1uB,qCAAoBhN;IACxDwC,aAAW,kBAAI,iBAAApR,mBAAIoqC;AAAJ,AAAA,oBAAApqC;AAAAA;;AAAe,OAACoI,cAAI8hC;;MACtB,AAAA,mFAAOF,OACPK;AAVnB,AAWE,oBACE,iBAAA7qC,oBAAK4qC;AAAL,AAAA,oBAAA5qC;AAAA,IAAAA,wBAAgBwqC;AAAhB,AAAA,oBAAAxqC;AAAsB,IAAA+qC,WAAkB,AAACC,uCAAaR;AAAhC,AAAA,sIAAAO,sDAAAA,pLAACn7B,gEAAAA,0EAAAA;;AAAvB5P;;;AAAAA;;;AADF;;AAAA,oBAIE,iBAAAA,oBAAK,AAAC4I,cAAIgiC;AAAV,AAAA,GAAA5qC;AAAA,IAAAA,wBAAsB6qC;AAAtB,AAAA,oBAAA7qC;AAAkC,IAAAirC,WAAkB,AAAA,6FAAaJ;AAA/B,AAAA,sIAAAI,sDAAAA,pLAACr7B,gEAAAA,0EAAAA;;AAAnC5P;;;AAAAA;;;AAJF;;AAAA,AAQE,AACE,0DAAA,1DAACoa,+CAAkBxI;;AACnB,AAACpT,oEAAwB8Y,SAAS,oDAAA,PAAKjb,sDAAS,AAAA,kGAAgBuV;;AAChE,OAAClT,oCAAsB3C,MAAMs9B;;;;;AAErC,iDAAA,jDAAM6R,0GACHliC;AADH,AAEE,IAAUjN,QAAM,AAACm/B;IACX7B,cAAY,AAACx5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChBovC,aAAK,AAACtuC,6CAAEw8B,YAAY,AAAC38B,gBAAML;IAC3B+S,gBAAc,AAACxT;IACfilC,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;AAN3C,AAOE,oBAAMqT;AAAN,AACE,GACE,AAAC5S,gDAAKqkC,eAAeC;AACrB,OAACkB,0CAAkBjmC,MAAM8kC,eAAeC;;AAF1C,oBAIE,iBAAA9gC,oBAAKmrC;AAAL,AAAA,GAAAnrC;AAAUoP;;AAAVpP;;;AACA,OAACuqC,sCAAcn7B;;AALjB,AAQE,OAAC4yB,0CAAkBjmC,MAAMs9B,YAAY,eAAA,dAAKA;;;;;AAT9C;;;AAWJ,oDAAA,pDAAM+R,gHACHC,WAAKnY;AADR,AAEE,IAAUn3B,QAAM,AAACm/B;IACX75B,KAAG,AAACvF;IACJu9B,cAAY,AAACx5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChBuvC,UAAQ,iBAAAtrC,oBAAK,eAAA,dAAGq5B;AAAR,AAAA,GAAAr5B;AACK,OAACo2B,uBAAc/5B,MAAM,eAAA,dAAKg9B;;AAD/Br5B;;;IAER6gC,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;IACrCJ,QAAM,AAACC;IACP0S,OAAK,AAACvN;IACNwqC,mBAAW,AAAC1uC,6CAAE,AAAA,4FAAalB,OAAO,AAAA,2FAAaA;IAC/C6vC,oBAAY,AAAC3uC,6CAAE,AAAA,qGAAkBlB,OAAO,4CAAK,AAAA,6FAAaA;AAXhE,AAYE,AAAC4+B,mDAAsBjsB;;AACvB,GACE,AAAC9R,gDAAKqkC,eAAeC;AACrB,AACE,AAAC5J,mBAAUhE;;AACX,oBAAMmY;AAAN,AACE,qBAAA,rBAACI;;AADH;;AAEA,OAACzJ,0CAAkBjmC,MAAM8kC,eAAeC;;AAN5C,GAQE,iBAAA,hBAAOzH;AACP,AACE,AAACnC,mBAAUhE;;AACX,GAAM,iBAAAlzB,oBAAK,uDAAA,rDAAIurC,kBAAW,AAAC59B,4BAActR;AAAnC,AAAA,GAAA2D;AACK,UAAKwrC;;AADVxrC;;;AAAN,AAEE,qFAAA,9EAAC0b,yEAAcpN;;AAFjB;;;AAXJ,GAeE,EAAK,eAAA,dAAG+qB,wBACH,AAACx8B,6CAAE,AAACu5B,uBAAc/5B,MAAM,eAAA,dAAKg9B,oBAAc,AAACzG;AACjD,AACE,AAACsE,mBAAUhE;;AACX,8DAAA,9DAACjR,sBAAOkS;;AACR,4DAAA,5DAAClS,sBAAO6H;;AACR,OAACkY,0CAAkBjmC,MAAM,eAAA,dAAKs9B,mBAAaA;;AArB/C,GAuBE,EAAK,eAAA,dAAGA,wBACH,AAACx8B,6CAAE,AAACu5B,uBAAc/5B,MAAM,eAAA,dAAKg9B,oBAAc+B;AAChD,AACE,AAAClE,mBAAUhE;;AACX,sEAAA,tEAACjR,sBAAOyU;;AACR,kEAAA,lEAACzU,sBAAO8H;;AACR,OAACiY,0CAAkBjmC,MAAM,eAAA,dAAKs9B,mBAAaA;;AA7B/C,oBAgCE,iBAAAr5B,oBACCsrC;AADD,AAAA,oBAAAtrC;AAAA,mHAAA,1GAEC,AAAC8I,0BACA,AAAC9B,cAAI,AAAC2O,eAAK4d,qCACX+X,gBACD,CAAI,AAAC5uC,gBAAML,UAAO,eAAA,dAAKg9B,yBACvB,AAACx8B,6CAAE,AAACu5B,uBAAc/5B,MAAMg9B,aACrB,AAAC97B,4CAAIg2B,mCAAW+X;;AAPpBtrC;;;AASA,AACE,AAACk3B,mBAAUhE;;AACX,AAACwY,oCAAsBrqC;;AACvB,oBACE,iBAAArB,oBAAK,qDAAA,rDAACnD,6CAAEyuC;AAAR,AAAA,GAAAtrC;AAAqB,OAACgqB;;AAAtBhqB;;;AACA,wDAAA,jDAAC25B;;AAFH,oBAIE,iBAAA35B,oBAAK,qDAAA,rDAACnD,6CAAEyuC;AAAR,AAAA,GAAAtrC;AAAqB,OAACkqB;;AAAtBlqB;;;AACA,yDAAA,lDAAC05B;;AALH,AAAA;;;;;AA5CJ,oBAuDE,iBAAA15B,oBAAK,qDAAA,rDAACnD,6CAAEyuC;AAAR,AAAA,GAAAtrC;AAAqB,OAACiqB;;AAAtBjqB;;;AACA,AACE,yDAAA,zDAAC45B;;AACD,OAACoI,0CAAkBjmC,MAAM,eAAA,dAAKs9B,mBAAaA;;AA1D/C,AA8DE,oBAAU,AAACsS;AAAX;;AAAA,AACE,AAACzU,mBAAUhE;;AACX,OAAC8O,0CACAjmC,MAAM,AAAC6vC,4CAAmC,AAAS7vC,YAAOs9B,aAAaA;;;;;;;;;;AAEhF,yCAAA,zCAAMwS,0FACHC;AADH,AAEE,mCAAA,nCAAC94B;;AACD,IAAMvR,MAAI,iBAAAuqC,WAAQ,AAAC9Q;AAAT,AAAA,GAAA,CAAA8Q,YAAA;AAAA;;AAAA,gCAAAA,zBAA0BnsC;;;IAApCksC,aACsB,AAAC95B;IADvB85B,iBAAA,AAAAzuC,4BAAAyuC;YAAA,AAAAxuC,4CAAAwuC,eAAA,nEACcpwC;AADd,AAEE,oBAAMA;AAAN,AACE,AAACswC,yCAA2BxqC;;AAC5B,IAAA2K,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,mEAAA,6EAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA,mEAAA,6EAAA;AAAA,AAAA,oBAAAsE;AAAA,AAGE,AAACud;;AACD,2DAAA,3DAAC2O,8IAAsC38B,cAAOmwC;;AAJhD,IAAAI,qDAAA7/B;IAAA8/B,qDAAA,AAAA1/B,qBAAA;AAAA,AAAA,CAAAJ,8DAAA8/B;;AAAA,IAAA,AAGE,AAACxiB;;AACD,2DAAA,3DAAC2O,8IAAsC38B,cAAOmwC;;AAJhD,IAAAp/B,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAA6/B;;;AAFF;;AAOA,0CAAA,nCAACl5B;;AAEL,8CAAA,9CAAMo5B,oGACHhoC;AADH,AAEE,kBAAK8uB;AAAL,AACE,oBACE,AAACvM;AACD,GAAM,6DAAA,3DAAK,AAAC/d,cAAI,AAACyhB,+CACN,AAACzhB,cAAI,AAACuhB,0DACN,AAACvhB,cAAI,AAACwhB;AAFjB,AAGE,AAAC8M,mBAAUhE;;AACX,AAAC2Y,uCAAe,GAAK,6CAAA,7CAAChvC,kGAAQuH;;AAJhC;;AAFF,oBAQE,AAAC6jB;AACD,AACE,AAACiP,mBAAUhE;;AACX,AAACiF,+BAAO/zB;;AAXZ;;;AADF;;;AAeF,sDAAA,tDAAMioC,oHACH7uC;AADH,AAEE,kBAAK01B,EAAEoZ;AAAP,AACE,IAAMh1B,WAAS,AAACxb;IACVC,QAAM,AAACm/B;IACPld,MAAI,sDAAA,tDAAC1hB,oDAAS42B;IACd72B,QAAM,0DAAA,1DAACC,oDAASP;IAChBwwC,UAAQ,sDAAA,tDAACjwC,oDAAS42B;IAClBsZ,UAAQ,sDAAA,tDAAClwC,oDAAS42B;IAClBzxB,MAAI,AAAC5B,yBAAW9D;IAChB0wC,iBAAS,iBAAAjsC,mBAAI,iDAAA,IAAA,rDAAC6zB,2CAAat4B;AAAlB,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBACI,iDAAA,IAAA,rDAAC6zB,2CAAat4B;AADlB,AAAA,oBAAAyE;AAAAA;;AAEI,wDAAA,jDAAC3D,6CAAEmhB;;;;AATtB,AAUE,oBACE,iBAAAhe,oBAAK,wEAAA,xEAAC0sC,sEAAyBxZ;AAA/B,AAAA,oBAAAlzB;AAAA,SACK,GAAKysC,sBACL,AAAC7jC,cAAI,AAACqhB;;AAFXjqB;;;AADF;;AAAA,oBAME,iBAAAQ,mBAAI+rC;AAAJ,AAAA,oBAAA/rC;AAAAA;;AAAYgsC;;;AANd;;AAAA,oBAYE,iBAAAxsC,oBAAK,AAACuwB;AAAN,AAAA,oBAAAvwB;AAAA,SACK,iDAAA,jDAACnD,6CAAEmhB,sBACH,SAAA,RAAOvc;;AAFZzB;;;AAGA,AACE,AAACk3B,mBAAUhE;;AACX,IAAMv3B,QAAM,AAACC;IACP2vC,mBAAW,AAAC1uC,6CAAE,AAAA,4FAAalB,OAAO,AAAA,2FAAaA;IAC/C6vC,oBAAY,AAAC3uC,6CAAE,AAAA,qGAAkBlB,OAAO,4CAAK,AAAA,6FAAaA;IAC1D2S,OAAK,AAACvN;AAHZ,AAIC,GAAM,iBAAAf,oBAAK,uDAAA,rDAAIurC,kBAAW,AAAC59B,4BAActR;AAAnC,AAAA,GAAA2D;AACK,UAAKwrC;;AADVxrC;;;AAAN,AAEE,qFAAA,9EAAC0b,yEAAcpN;;AAFjB;;;AArBL,GAyBE,EAAK,iDAAA,jDAACzR,6CAAEmhB,cACH,EAAK,OAAA,NAAGvc,gBACH,6CAAA,7CAAC5E,iDAAM,AAACu5B,uBAAc/5B,MAAM,OAAA,NAAKoF;AAC3C,gEAAA,zDAACm4B;;AA5BH,GA8BE,EAAK,AAAC9wB,0BAAU,kIAAA,iFAAA,nNAAC6jC,qDAAe,AAAC3lC,cAAI,AAAC2O,eAAK0d,0JAE3BrV,UACf,AAACnhB,6CAAE,AAACi6B,+CAAuB/6B,OAAOiiB;AACnC,AAAI,AAACkZ,mBAAUhE;;AACX,OAAC0I,uEAA2B7/B;;AAnClC,oBAqCE,iBAAAiE,oBAAK,CAACszB,+EAAAA,oFAAAA,PAAuBtV,gEAAAA;AAA7B,AAAA,oBAAAhe;AAAkC,OAAC2N,4BAAc,AAACimB;;AAAlD5zB;;;AArCF;;AAAA,GAwCE,EAAK,GAAK,AAAC2N,4BAAc,AAACimB,0CACrB,AAAC9qB,0BAAU8jC,gDAAkC5uB;AAClD,AAAI,0CAAA,WAAA,rDAACwV,iCAASlc,aAAa9Z;;AACvB,OAAC05B,mBAAUhE;;AA3CjB,GA6CE,EAAK,GAAK,AAACvlB,4BAAc,AAACimB,0CACrB,AAAC9qB,0BAAU+jC,sCAAwB7uB;AACxC,AAAI,AAACkZ,mBAAUhE;;AACX,iDAAA,WAAA,rDAACM,iCAASlc,aAAa9Z;;AAhD7B,GAkDE,AAACsL,0BAAU,AAAC9B,cAAI,AAAC2O,eAAKyd,uCAAepV;AACrC,AAAI,AAACkZ,mBAAUhE;;AACX,4DAAA,rDAACM,iCAASlc,SAAS0G,IAAIxgB;;AApD7B,GAsDEivC;AACA,AACE,4DAAA,mFAAA,/IAACvY;;AACD,GAAI,iDAAA,jDAACr3B,6CAAEmhB;AACL,AAACiuB,yCAA2B,mCAAA,lCAAK,AAACpsC,yBAAW9D;;AAC7C,AAACkwC,yCAA2B,AAACpsC,yBAAW9D;;;AAC1C,OAACkmB,sBAAOkS,wCAA0B,AAACC,iEAAqBr4B;;AA5D5D,GA8DE,uBAAA,NAAM+wC;AAAN,AACE,IAAA9sC,oBAAK,AAACnD,6CAAEmhB,IAAI8uB;AAAZ,AAAA,GAAA9sC;AAAA,IAAAA,wBACK,2BAAA,1BAAI,AAACtD,gBAAML;AADhB,AAAA,GAAA2D;AAAA,IAAAA,wBAEK,OAAA,NAAGyB;AAFR,AAAA,GAAAzB;AAAA,IAAAA,wBAGK,AAACnD,6CAAE,AAAC8C,4CAAItD,MAAM,OAAA,NAAKoF,YAAMqrC;AAH9B,AAAA,GAAA9sC;AAIK,GAAI,CAAG,AAACtD,gBAAML,SAAOoF;AACnB,OAACjF,gDAAK,AAACmD,4CAAItD,MAAMoF,KAAKqrC;;AADxB;;;AAJL9sC;;;AAAAA;;;AAAAA;;;AAAAA;;;AAOF,sDAAA,KAAA,2CAAA,qEAAA,pKAACkmC,sCAAwB5uB;;AAtE3B,GAwEE,uBAAA,NAAMw1B;AAAN,AACE,IAAA9sC,oBAAK,AAACnD,6CAAEmhB,IAAI8uB;AAAZ,AAAA,GAAA9sC;AAAA,IAAAA,wBACK,2BAAA,1BAAI,AAACtD,gBAAML;AADhB,AAAA,GAAA2D;AAAA,IAAAA,wBAEK,OAAA,NAAGyB;AAFR,AAAA,GAAAzB;AAAA,IAAAA,wBAGK,AAACnD,6CAAE,AAAC8C,4CAAItD,MAAM,OAAA,NAAKoF,YAAMqrC;AAH9B,AAAA,GAAA9sC;AAIK,GAAI,CAAG,AAACtD,gBAAML,SAAOoF;AACnB,OAACjF,gDAAK,AAACmD,4CAAItD,MAAMoF,KAAKqrC;;AADxB;;;AAJL9sC;;;AAAAA;;;AAAAA;;;AAAAA;;;AAOF,sDAAA,KAAA,2CAAA,qEAAA,pKAACkmC,sCAAwB5uB;;AAhF3B,AAAA;;;;;;;;;;;;;;;;AAqFN,wCAAA,xCAAgCy1B,wFAC7Bl6B,OAAO9W,MAAMub,SAAS01B;AADzB,AAEE,kBAAK9Z,EAAE+Z;AAAP,AACE,oBAAU,AAACP,sEAAyBxZ;AAApC;;AAAA,AACE,IAAMga,IAAE,sDAAA,tDAAC5wC,oDAAS42B;IACZia,OAAK,iEAAA,SAAA,1EAACC,+DAAoBla;IAC1B11B,SAAO,AAAA,wFAAS,AAACyU;IACjBonB,cAAY,AAACx5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChBsxC,IAAE,AAACjX,uBAAc/5B,MAAM,eAAA,dAAKg9B;IAC5BiU,gBAAc,AAACC;IACfC,wBAAgB,AAAC7/B,4BAAc,AAACimB;IAChC6Z,sBAAc,wEAAA,xEAACf,sEAAyBxZ;IACxCwa,6BAAqB,iBAAA1tC,oBAAKytC;AAAL,AAAA,oBAAAztC;AACK,OAACxD,gDAAK2wC,KAAKQ;;AADhB3tC;;;AAT3B,AAWE,oBAAU,iBAAAQ,mBAAI,AAAC6pB;AAAL,AAAA,oBAAA7pB;AAAAA;;AAAkCktC;;;AAA5C;AAAA,AACE,oBACE,iBAAA1tC,oBAAK,GAAK,0BAAA,iFAAA,eAAA,iBAAA,kBAAA,7JAAC8I,6LAA4DokC;AAAvE,AAAA,GAAAltC;AAAA,IAAAA,wBACK,AAAC4I,cAAI,AAAA,uHAAA,AAAAoZ,gBAA4B4rB;AADtC,AAAA,GAAA5tC;AAAA,IAAAA,wBAEK,AAAC4I,cAAI,AAAA,wIAAA,AAAAoZ,gBAAoC4rB;AAF9C,AAAA,GAAA5tC;AAGK,uDAAA,KAAA,rDAACw0B,0CAAYz4B;;AAHlBiE;;;AAAAA;;;AAAAA;;;AAIA,IAAM6tC,iBAAS,AAACzZ,iEAAqBr4B;IAC/BM,kBAAM,0DAAA,1DAACC,oDAASP;IAChB+xC,mBAAW,8NAAA,9NAACtpC,2DAAqB,6DAAA,7DAAC/H,6CAAKJ,oBAAQ,AAAA,iFAAMwxC;IACrDpsC,YAAI,oBAAA,nBAAGqsC;IACPlnC,UAAE,AAACqlC,yCAA2BxqC;IAC9BA,gBAAI,6DAAA,7DAACqG,8CAAM+lC,kEAAcpsC;IACzBssC,qBAAa,sHAAA,8FAAA,lNAAI,6CAAA,7CAAClxC,iDAAK,AAACu5B,uBAAc/5B,gBAAM,oBAAA,nBAAKyxC;AANvD,AASE,4DAAA,5DAAC5Z,+IAAsB6Z;;AACvB,AAAC9rB,sBAAOkS,wCAA0B1yB;;AAftC,GAiBE,6BAAA,oFAAA,wJAAA,vQAAK+rC,6BACA,AAAC1kC,0BAAU8jC,gDAAkCM,UAC7C,AAACrwC,6CAAE,AAAA,kFAAMywC,eAAeJ,UACxB,eAAA,dAAG7T,wBACH,AAACzwB,cAAI,gDAAA,KAAA,rDAAC4rB,0CAAYz4B;AACvB,AACE,4DAAA,mFAAA,kEAAA,OAAA,2CAAA,8FAAA,IAAA,qEAAA,1aAACm4B;;AAED,4DAAA,mFAAA,/IAACA;;AACD,AAACjS,sBAAOkS,wCAA0B,AAACC,iEAAqBr4B;;AA1B5D,GA4BE,6BAAA,0EAAA,wJAAA,7PAAKyxC,6BACA,AAAC1kC,0BAAU+jC,sCAAwBK,UACnC,AAACrwC,6CAAE,AAAA,kFAAMywC,eAAeJ,UACxB,eAAA,dAAG7T,wBACH,AAACzwB,cAAI,gDAAA,KAAA,rDAAC4rB,0CAAYz4B;AACvB,AACE,4DAAA,mFAAA,kEAAA,OAAA,2CAAA,8FAAA,IAAA,qEAAA,1aAACm4B;;AAED,4DAAA,mFAAA,gFAAA,/NAACA;;AACD,AAACjS,sBAAOkS,wCAA0B,AAACC,iEAAqBr4B;;AArC5D,GAuCE,gEAAA,9DAAK,6CAAA,7CAACc,sDAAMwwC,UACP,6CAAA,7CAACxwC,sDAAM,AAACu5B,uBAAc/5B,MAAM,uBAAA,tBAAK,eAAA,dAAKg9B,iCACtC,eAAA,dAAGA;AACR,AACE,4DAAA,mFAAA,kGAAA,2CAAA,qEAAA,eAAA,qEAAA,rbAACnF,iNAAoCkH;;AAErC,AAACnZ,sBAAOyU,gDAAkC,AAACtC,iEAAqBr4B;;AAChE,kEAAA,lEAACkmB,sBAAO8H;;AA9CZ,oBAgDE,iBAAA/pB,oBAAK,+CAAA,/CAACnD,6CAAEwwC;AAAR,AAAA,GAAArtC;AACK,IAAAQ,mBAAI,uGAAA,vGAAC3D,6CAAE,AAACu5B,uBAAc/5B,MAAM,uBAAA,tBAAK,eAAA,dAAKg9B;AAAtC,AAAA,GAAA74B;AAAAA;;AAAA,IAAAA,uBACI,AAACoI,cAAI,AAACohB;AADV,AAAA,GAAAxpB;AAAAA;;AAEI,IAAAR,wBAAK,AAACgqB;AAAN,AAAA,oBAAAhqB;AACK,iGAAA,1FAACxD,gDAAK,AAAC45B,uBAAc/5B,MAAMg9B;;AADhCr5B;;;;;AAHTA;;;AAKA,yDAAA,zDAAC45B;;AArDH,oBAuDE,iBAAA55B,oBAAA,AAAAgiB,gBAAM8H;AAAN,AAAA,oBAAA9pB;AAAqB,OAACxD,gDAAK0wC,EAAE,AAACta;;AAA9B5yB;;;AACA,IAAMguC,yBAAiB,AAACjY,6CAAqBh6B;AAA7C,AACE,GAAI,AAACoG,cAAI6rC;AACP,AACE,4DAAA,5DAAC/rB,sBAAO6H;;AACR,AAAC7H,sBAAOgsB,yCAA2BD;;AACrC,4DAAA,5DAAC/rB,sBAAO6H;;;AA7Dd,oBA+DE,iBAAA9pB,oBAAA,AAAAgiB,gBAAM+H;AAAN,AAAA,oBAAA/pB;AAA2B,gEAAA,zDAACxD,gDAAKywC;;AAAjCjtC;;;AACA,IAAMkuC,+BAAuB,AAAC1X,mDAA2Bz6B;AAAzD,AACE,GAAI,AAACoG,cAAI+rC;AACP,GACE,sDAAA,tDAACrxC,6CAAEowC;AACH,oBAAA,AAAAjrB,gBAAO+H;AAAP,AACE,AAACmN,mBAAUhE;;AACX,2HAAA,2CAAA,tKAAC3H,6CAAgBjU,SACA,AAACpO,eAAK,AAACvG,gBAAMurC,+BACb1wC,uHACe49B;;AALlC;;AAFF,AAUE,AAACnZ,sBAAOksB,+CAAiCD;;;;AAC3C,kEAAA,lEAACjsB,sBAAO8H;;;AA7Ed,GA+EE,CAAA,AAAA/H,mCAAA,nBAAOgrB;AACP,AAACzT,sDAA8Bx9B;;AAhFjC,AAAA;;;;;;;;;;;AAoFF,oBAAU,iBAAAyE,mBAAI,+CAAA,/CAAC3D,6CAAEqwC;AAAP,AAAA,GAAA1sC;AAAAA;;AAAkBitC;;;AAA5B;;AAAA,AACE,8CAAA,2CAAA,uEAAA,0DAAA,sDAAA,zQAACW,gJAAoCnB,8DACJE,yDACDD,4DACG,AAAYha;;;;;AAEzD,gDAAA,hDAAMmb,wGACHhtC;AADH,AAEE,kBAAK2H;AAAL,AACE,IAAMjN,QAAM,AAACC,oBAAgBqF;AAA7B,AACE,AAACq2B,mCAA0B37B;;AAC3B,OAACw9B,sDAA8Bx9B;;;AAErC,iDAAA,jDAAMuyC,0GACH3yC,MAAM0F,GAAG2rC;AADZ,AAEE,kBAAK9Z;AAAL,AACE,oBAAI,mBAAA,nBAACoG;AACH,cAAA,VAAMiV;AAAN,AACE,oBAAA,AAAAvsB,gBAAOgrB;AAAP,AACE,aAAA,AAAAhrB,bAAC+Y,6BAAiBiS;;AADpB;;AAEA,OAAC/qB,sBAAO+qB,eACA,WAAA,XAAC/3B;AAAD,AACE,OAAC4lB,iDAAoB3H,EAAEv3B,MAAM0F;GAC9BktC;;AACX,IAAMxyC,QAAM,AAACC,oBAAgBqF;AAA7B,AACE,AAACw5B,iDAAoB3H,EAAEv3B,MAAM0F;;AAC7B,OAACq2B,mCAA0B37B;;;;AAEnC,+CAAA,/CAAOyyC,sGACJhxC,OAAO8mB;AADV,AAEE,IAAA5oB,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAWgjB;AAAX,AACE,IAAM7C,UAAQ,AAAA,mFAAQ,AAAA,2FAAa6C;IAC7B3c,SAAO,8JAAA,9JAACs7B,qCACA,AAAC9yB,+BAAY+Z,KAAK,AAAC9Z,uEAAwBhN,SAAS8mB,UAAU9mB;IACtEu/B,sBAAQ,AAACU,+CAA8B5hB,QAAQ9Z;AAHrD,AAIE,gEAAA,zDAACu6B,qCAAaS;;AALlB;;;AAOF,+CAAA,/CAAO0R,sGACJjxC,OAAO8mB;AADV,AAEE,IAAMoqB,aAAW,wDAAA,xDAACvU,mDAAa7V;IACzBqqB,qBACA,kDAAA,lDAAClsB,uDACY,AAACjb,6CAAK,WAAKutB;AAAL,AACa,OAAC,WAAKA;AAAL,AACE,oBAAI,AAAC5rB,2BAAkB,wGAAA,YAAA,lHAAI,oDAAA,pDAACtM,6CAAEW,gFAEOu3B;AACnCA;;AACA,QAAK,wGAAA,KAAA,3GAAI,oDAAA,pDAACl4B,6CAAEW,gHAAwBu3B;;GANzC,AAAC93B,oBAAY83B;GAO1B2Z;AAVzB,AAWE,OAACF,6CAAqBhxC,OAAOmxC;;AAEjC,gDAAA,hDAAOC,wGACJtgC,KAAKiK;AADR,AAEE,IAAOA,UAAIA;aAAX,TACOmd;;AADP,AAEE,GAAI,AAACvzB,cAAIoW;AACP,IAAMxW,SAAO,iBAAA8sC,WAA2BvgC;IAA3BwgC,WAAgC,AAACnsC,gBAAM4V;AAAvC,AAAA,4IAAAs2B,SAAAC,yDAAAD,SAAAC,/MAACzQ,mEAAAA,sFAAAA;;IACR3I,aAAO,AAACtW,cAAI,AAAClY,+CAAOwuB,OAAO3zB;AADjC,AAEE,eAAO,AAAC2F,+CAAO,AAACV,cAAI,4CAAA,5CAACC,2GAAgByuB,aAAS,AAACtG,eAAK7W;eAAMmd;;;;;AAC5DA;;;;;AAEN,yCAAA,zCAAMqZ,0FACH7iB;AADH,AAEE,GACE,AAAClY,mBAAQ,AAACg7B,2CAAuB9iB;AACjC,iEAAA,1DAAChhB,2HAA2BghB;;AAF9B,GAIE,mCAAA,nCAACuN,+BAAiBvN;AAClB,iEAAA,1DAAChhB,6HAA6BghB;;AALhC,AAQE,mOAAA,5NAACvd,uEAAmB,0DAAA,1DAACzD,2IAA2CghB;;;;;AAEpE,sDAAA,tDAAO+iB,oHACJ3qB,KAAK4O;AADR,AAEE,IAAMgc,gBAAc,AAACC;IACfC,mBAAiB,AAAA,mGAAiBF;IAClCG,eAAa,AAAA,4FAAaH;IAC1BnzC,QAAM,AAACm/B;IACPoU,0BAAa,6CAAA,7CAACl0C;AAJpB,AAKE,oBAEE,iBAAA4E,oBACC,AAACnD,6CAAEwyC,aAAa,AAACtuC;AADlB,AAAA,GAAAf;AAAA,IAAAA,wBAEC,EAAI,AAACmC,cAAIitC,uBACL,AAACjtC,cAAI,AAAA,yGAAmB+sC;AAH7B,AAAA,GAAAlvC;AAAA,IAAAA,wBAICskB;AAJD,AAAA,oBAAAtkB;AAMC,OAACnD,6CAAE,iDAAA,KAAA,tDAAC8G,uBAAe,AAAC1G,oBAAYqnB,eAC7B,AAAC3gB,uBAAe,AAAC1G,oBAAY,iBAAAuD,mBAAI,AAAA,8FAAe0uC;AAAnB,AAAA,oBAAA1uC;AAAAA;;AAAA;;MAA7B,KAAA;;AAPJR;;;AAAAA;;;AAAAA;;;AAQA,IAAM+B,eAAO,iBAAAvB,mBACC,AAAA,yGAAmB0uC;AADpB,AAAA,oBAAA1uC;AAAAA;;AAEC,OAACouC,8CAAsB,AAAC7tC,kCAAwBquC;;;AAF9D,AAGE,GAAM,AAACjtC,cAAIJ;AAAX,AACE,AAACwtC,4CAA8BxtC;;AAC/B,kDAAA,lDAACu6B,qCAAav6B;;AAFhB;;AAbJ,oBAiBE,iBAAA/B,oBAAK,AAACwvC,oCAAalrB;AAAnB,AAAA,oBAAAtkB;AACK,UAAK,AAAC2N,4BAAc,AAACimB;;AAD1B5zB;;;AAEA,AAACT,6EAAkB+kB;;AAnBrB,oBAqBE,iBAAAtkB,oBAAK,AAACyvC,0CAAgBnrB;AAAtB,AAAA,GAAAtkB;AACK,uDAAA,KAAA,rDAACw0B,0CAAYz4B;;AADlBiE;;;AAEA,sHAAA,tHAACkmC,sCAAwB,AAACpqC,mCAAyB,AAAC4zC,uCAAmBprB;;AAvBzE,AA2BE,IAAM9mB,eAAO,iBAAAgD,mBAAI,iBAAAmvC,WAAoB,AAACp/B;AAArB,AAAA,8HAAAo/B,kDAAAA,xKAACn7B,4DAAAA,sEAAAA;;AAAL,AAAA,oBAAAhU;AAAAA;;AAAA;;;AAAb,AACE,IAAQhD,mBAAAA;IAARoyC,kBACQ,4DAAA,3DAAM,2BAAA,3BAACzmC,kDAA6Cmb;IAD5DurB,kBAEQ,mDAAA,lDAAM,2BAAA,3BAAC1mC,yCAAoCmb;IAFnDwrB,kBAGQ,qDAAA,pDAAM,2BAAA,3BAAC3mC,2CAAmCmb;AAHlD,AAAA,IAAA,AAAA,GAAA,AAAAyrB,oDAAA,jBAAQvyC;AAAR,IAAA,AAAA,GAAA,CAAAoyC,oBAAA;AAKE,AAACpB,6CAAqBhxC,iBAAO8mB;;AAL/B,AAAA,MAAA0rB;;;gBAAA,GAAA,CAAAC,kBAAA3wC;AAAA,IAAA4wC,yBAAAD;AAAA,AAAA,GAAA,CAAAC,2BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAD;;;;AAAA,AAAA,MAAAD;;;gBAAA,GAAA,CAAAG,kBAAA7wC;AAAA,IAAA4wC,yBAAAC;AAAA,AAAA,GAAA,CAAAD,2BAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,oDAAA,jBAAQvyC;AAAR,IAAA,AAAA,GAAA,CAAAqyC,oBAAA;AAQE,AAACrB,6CAAqBhxC,iBAAO8mB;;AAR/B,AAAA,MAAA0rB;;;gBAAA,GAAA,CAAAI,kBAAA9wC;AAAA,IAAA4wC,6BAAAE;AAAA,AAAA,GAAA,CAAAF,+BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAE;;;;AAAA,AAAA,MAAAJ;;;gBAAA,GAAA,CAAAK,kBAAA/wC;AAAA,IAAA4wC,6BAAAG;AAAA,AAAA,GAAA,CAAAH,+BAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,oDAAA,jBAAQvyC;AAAR,IAAA,AAAA,GAAA,CAAAoyC,oBAAA;AAAA,IAAA,AAAA,GAAA,CAAAE,oBAAA;AAWE,AAACrB,6CAAqBjxC,iBAAO,AAACP,oBAAYqnB;;AAX5C,AAAA,MAAA0rB;;;gBAAA,GAAA,CAAAM,kBAAAhxC;AAAA,IAAA4wC,6BAAAI;AAAA,AAAA,GAAA,CAAAJ,+BAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,CAAAF,oBAAA;AAcE,8CAAA,9CAAC7tB,sBAAOqtB;;AAdV,AAAA,MAAAU;;;gBAAA,GAAA,CAAAO,kBAAAjxC;AAAA,IAAA4wC,6BAAAK;AAAA,AAAA,GAAA,CAAAL,+BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAK;;;;AAAA,MAAAL;;;AAAA,AAAA,MAAAI;;;;AAAA,AAAA,MAAAN;;;gBAAA,GAAA,CAAAQ,kBAAAlxC;AAAA,IAAA4wC,6BAAAM;AAAA,AAAA,GAAA,CAAAN,+BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAM;;;;AAAA,AAAA,MAAAR;;;gBAAA,GAAA,CAAAS,kBAAAnxC;AAAA,IAAA4wC,6BAAAO;AAAA,AAAA,GAAA,CAAAP,+BAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,oDAAA,jBAAQvyC;AAAR,IAAA,AAAA,GAAA,CAAAqyC,oBAAA;AAAA,IAAA,AAAA,GAAA,CAAAC,oBAAA;AAiBE,AAACrB,6CAAqBjxC,iBAAO,AAACP,oBAAYqnB;;AAjB5C,AAAA,MAAA0rB;;;gBAAA,GAAA,CAAAU,kBAAApxC;AAAA,IAAA4wC,6BAAAQ;AAAA,AAAA,GAAA,CAAAR,+BAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,CAAAF,oBAAA;AAoBE,8CAAA,9CAAC7tB,sBAAOqtB;;AApBV,AAAA,MAAAU;;;gBAAA,GAAA,CAAAW,kBAAArxC;AAAA,IAAA4wC,6BAAAS;AAAA,AAAA,GAAA,CAAAT,+BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAS;;;;AAAA,MAAAT;;;AAAA,AAAA,MAAAQ;;;;AAAA,AAAA,MAAAV;;;gBAAA,GAAA,CAAAY,kBAAAtxC;AAAA,IAAA4wC,6BAAAU;AAAA,AAAA,GAAA,CAAAV,+BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAU;;;;AAAA,AAAA,MAAAZ;;;gBAAA,GAAA,CAAAa,kBAAAvxC;AAAA,IAAA4wC,6BAAAW;AAAA,AAAA,GAAA,CAAAX,+BAAAF;AAAA,AAAA,MAAA,KAAA1wC,MAAA,CAAA,qFAAA,gDAAAswC,iBAAA,gDAAAC,iBAAA,gDAAAC,pMAAQtyC;;AAAR,MAAA0yC;;;AAAA,AAAA,MAAAW;;;;AAAA,MAAAX;;;AAAA,AAAA,MAAAO;;;;AAAA,MAAAP;;;AAAA,AAAA,MAAAG;;;;AAAA,MAAAH;;;AAAA,AAAA,MAAAC;;;;;;;;AAqBJ,oBAAA,AAAAnuB,gBAAOstB;AAAP,AACE,OAACpY,mBAAUhE;;AADb;;;AAGJ,2DAAA,3DAAM4d;AAAN,AAEE,OAACC,kCACA,WAAKC;AAAL,AACE,IAAAt1C,qBAAa,AAACw/B;AAAd,AAAA,oBAAAx/B;AAAA,AAAA,QAAAA,JAAWkL;AAAX,AACE,IAAMqqC,OAAK,kBAAI,AAACzB,oCAAawB,iBACZ,AAACjC,uCAAeiC,gBAChBA;AAFjB,AAGM,OAACE,iDAAmCD;;AAJ5C;;GAKF,WAAKlmB;AAAL,AACE,OAACwL,cAAiBxL;;;AAEvB,gDAAA,hDAAMomB,wGACH9vC;AADH,AAEE,kBAAK6xB;AAAL,AACE,+BAAA,0EAAA,zGAACke;;AACD,IAAM9sB,OAAK,+EAAA,/EAAU,sDAAA,tDAAChoB,oDAAS42B;IACzBn3B,QAAM,AAACm/B;AADb,AAEE,GAAA,GAAQ,AAACvtB,4BAAc2W;AACrB,oBAAI,iBAAA9jB,mBAAI,AAAC6wC,qIAAgCt1C;AAArC,AAAA,oBAAAyE;AAAAA;;AACI,OAAC8wC,qJAAsCv1C;;;AAC7C,oBAAU,AAAC4vC;AAAX;;AAAA,AACE,AAACzU,mBAAUhE;;AACX,OAAC4d;;;AACH,OAAC7B,oDAA4B3qB,KAAK4O;;;AACpC,IAAMqe,WACA,iBAAMP,iBAAe,sDAAA,tDAAC10C,oDAAS42B;IACzBvF,QAAM,AAASqjB;AADrB,AAEE,IAAAt1C,qBAAgB,AAACiH,gBAAMgrB;AAAvB,AAAA,oBAAAjyB;AAAA,AAAA,WAAAA,PAAW2zB;AAAX,AACE,IAAA3zB,yBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,+CAAA,oKAAA,5MAACu2B,qCAAa7wB,IAAOguB,MAAM,AAAA,iGAAe1zB,OAAOR;;AADnD;;;AADF;;;AAHR,AAME,OAAC+7B,mBAAUhE;;;;AAErB,gEAAA,hEAAOse,wIACJruB;AADH,AAEE,AAACD,6CAAqBC;;AACtB,OAACvf;;AAEH,kDAAA,lDAAM6tC,4GACHzoC;AADH,AAEE,OAAC6X;;AAEH,iDAAA,jDAAM6wB,0GACHxe;AADH,AAEE,AAACgE,mBAAUhE;;AACX,qEAAA,9DAACse;;AAEH,oDAAA,pDAAMG,gHACHze;AADH,AAEE,AAACgE,mBAAUhE;;AACX,qEAAA,9DAACse;;AAGH,iDAAA,jDAAOI;AAAP,AAEE,IAAAl2C,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAW0T;AAAX,AACE,IAAA1T,yBAAoB,AAAA,6FAAa0T;AAAjC,AAAA,oBAAA1T;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,oFAAA,WAAAmxC,/FAAC7xB,2EAAgBtf;AAAjB,AAA2B,QAAA,iDAAAmxC,kBAAA;;;AAC3B,8EAAA,mFAAA,mDAAA,mFAAA,oEAAA,4BAAA,mFAAA,mDAAA,mFAAA,6LAAA,2DAAA,j1BAACljC,mrBAGgC,CAAA,2DAAA,VAAUjO,iHAG1C,CAAA,gEAAyBA;;AAR5B;;;AADF;;;AAWF;;;;;;wCAAA,xCAAMoxC,wFAKH5e;AALH,AAME,oBAAU,AAAC2D;AAAX;;AAAA,AACE,oBACE,AAAC5O;AACD,OAACwpB,gDAAwBve;;AAF3B,oBAIE,AAACvM;AACD,IAAM5qB,QAAM,AAACm/B;IACP2F,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;AAF3C,AAGE,GAAI,AAACc,6CAAEgkC,eAAeC;AACpB,OAAC8Q;;AACD,4BAAA,rBAACnG;;;AAVP,AAaE,4BAAA,rBAACA;;;;;;AAEP;;;;;;uCAAA,vCAAMsG,sFAKH7e;AALH,AAME,oBACE,AAACjL;AACD,OAACypB,+CAAuBxe;;AAF1B,oBAIE,AAACvM;AACD,yDAAA,lDAACykB,uDAA+BlY;;AALlC;;;;AAOF,2CAAA,3CAAM8e,8FACH9e;AADH,AAEE,oBAAM,AAACjL;AAAP,AACE,OAAC0pB,kDAA0Bze;;AAD7B;;;AAGF,wCAAA,xCAAM+e,wFACHp/B,OAAOqgB;AADV,AAEE,oBAAM,AAACvM;AAAP,AACE,AAACuQ,mBAAUhE;;AACX,OAACgY,+CAAuBhY;;AAF1B;;;AAIF,2CAAA,3CAAMgf,8FACHr/B,OAAOqgB;AADV,AAEE,oBAAM,AAACvM;AAAP,AACE,yDAAA,lDAACykB,wDAAgClY;;AADnC;;;AAGF,2CAAA,3CAAMif,8FAAkB/tC;AAAxB,AACE,kBAAK8uB;AAAL,AACE,oBAAU,AAAC2D;AAAX;;AAAA,AACE,AAACK,mBAAUhE;;AACX,oBACE,AAACvM;AACD,OAAC0iB,gDAAwBjlC;;AAF3B,oBAIE,iBAAApE,oBAAK,AAACioB;AAAN,AAAA,oBAAAjoB;AAAwB,QAAA,QAAM,AAACtD,gBAAM,AAACob;;AAAtC9X;;;AACA,OAACuoC,uCAAenkC;;AALlB,AAQE,OAAC+jC,0CAAkB/jC;;;;;;;AAE3B,kDAAA,lDAAMguC,4GAAyBhuC;AAA/B,AACE,kBAAK8uB;AAAL,AACE,AAACgE,mBAAUhE;;AACX,oBAAI,AAACvM;AACH,IAAM5qB,QAAM,AAACm/B;IACP2F,iBAAe,AAAC3kC,kCAAyBH;IACzC+kC,eAAa,AAAC1kC,gCAAuBL;IAF3Cs2C,aAGsB,iBAAAG,WAAM,AAACC,sCAA6B12C;AAApC,AAAA,QAAAy2C;KAAA;AAAA,0FACc1R,aAAaD;;;;AAD3B,0FAEGA,eAAeC;;;;aALxC,AAAAnhC,4CAAA0yC,WAAA,IAAA,pEAGOC;aAHP,AAAA3yC,4CAAA0yC,WAAA,IAAA,pEAGcE;IAGRG,cAAY,AAACte,iEAAqBr4B,MAAMw2C;AAN9C,AAOE,GAEC,EAAI,EAAK,uDAAA,vDAAC11C,6CAAEuH,iEAAe,AAACuuC,2DAAuCD,oBAC/D,EAAK,uDAAA,vDAAC71C,6CAAEuH,qEAAiB,AAACwuC,0DAAsCF;AACnE,OAAC3qB,6CAAqB3jB;;AAEtB,OAACyuC,oCAAsB92C,MAAMqI,UAAUkuC,OAAOI;;;AAClD,OAAC3qB,6CAAqB3jB;;;;AAE5B,oDAAA,pDAAM0uC,gHACH1uC,UAAU8uB;AADb,AAEE,IAAAx3B,qBAAoB,iBAAAq3C,WAAQ,AAACj7B;IAATi7B,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,gBAAAA,hBACQpwC;IADRowC,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAEQ,gBAAAA,aAAA,7BAACt6B;AAFT,AAAA,GAAA,CAAAs6B,gBAAA;AAAA;;AAAA,sBAAAA,fAGQr6B;;;AAH5B,AAAA,oBAAAhd;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AAIE,AAACw2B,mBAAUhE;;AACX,YAAA,2CAAA,nDAAMv3B,kHAAsB+E;IACtBA,0GAAa,AAACoX,hBACDnV,pDACA,oDAAA,uDAAA,3GAACrG,vBACD,wIAAA,WAAA,nJAACqH;IACdumC,cAAS,uDAAA,vDAACrtC,6CAAEuH;AALlB,AAME,OAACW,uEAAYpJ,MACA,eAAA,IAAA,jBAAIuuC,mEACJxpC;;AAbjB;;;AAeF,8CAAA,9CAAMsyC,oGAAqB5uC;AAA3B,AACE,kBAAK8uB;AAAL,AACE,oBAAU,AAAC2D;AAAX;;AAAA,AACE,oBACE,AAAClQ;AACD,AACE,AAACuQ,mBAAUhE;;AACX,OAAC8W,8CAAsB5lC;;AAJ3B,oBAME,iBAAApE,oBAAK,AAACioB;AAAN,AAAA,oBAAAjoB;AAAwB,QAAA,QAAM,AAACtD,gBAAM,AAACob;;AAAtC9X;;;AACA,AACE,AAACk3B,mBAAUhE;;AACX,OAAC4f,kDAAqB1uC,UAAU8uB;;AATpC,AAAA;;;;;;;AAcN,oDAAA,pDAAM+f;AAAN,AACE,+EAAA,2CAAA,yDAAA,nLAACtpB;;AACD,8GAAA,vGAACnrB,oEAAwB,AAAC1C;;AAE5B,iDAAA,jDAAMo3C;AAAN,AACE,+EAAA,2CAAA,yDAAA,nLAACvpB;;AACD,OAACwpB,qCAAuB,AAACjY;;AAE3B,gDAAA,hDAAMkY;AAAN,AACE,+EAAA,2CAAA,yDAAA,nLAACzpB;;AACD,OAAC0pB,oCAAsB,AAACnY;;AAE1B,6CAAA,7CAAMoY;AAAN,AACE,sEAAA,/DAAC50C,oCAAsB,AAACw8B;;AAE1B,uCAAA,vCAAMqY;AAAN,AACE,OAAC5R,wCAA0B,AAACzG;;AAE9B,8CAAA,9CAAMsY;AAAN,AACE,OAACC,iDAAmC,AAACvY;;AAEvC,+CAAA,/CAAMwY;AAAN,AACE,OAACC,kDAAoC,AAACzY;;AAExC,6CAAA,7CAAM0Y;AAAN,AACE,IAAM73C,QAAM,AAACm/B;AAAb,AACE,+EAAA,2CAAA,yDAAA,nLAACvR;;AACD,AAACkqB,iCAAwB93C;;AACzB,OAACyC,oEAAwB,AAAC1C,mCAAyB,AAASC;;AAEhE,4CAAA,5CAAM+3C;AAAN,AACE,IAAM/3C,QAAM,AAACm/B;AAAb,AACE,+EAAA,2CAAA,yDAAA,nLAACvR;;AACD,AAACoqB,gCAAuBh4C;;AACxB,OAACyC,oEAAwB,AAAC1C,mCAAyB,AAASC;;AAEhE,kDAAA,lDAAMi4C,4GACHx2C,OAAO0C,QAAQ+zC;AADlB,AAEE,IAAAj0C,oBAAK,uCAAA,vCAACy5B,+BAAiBv5B;AAAvB,AAAA,GAAAF;AACK,oBAAIi0C;AACF,IAAM3pC,MAAI,AAACC,+BAAYrK,QAAQ,AAACsK,uEAAwBhN;IAClDiN,kBAAgB,AAAC9H,gBAAM,AAAC+H,iBAAOJ;AADrC,AAEE,OAACU,8CAAwBP;;AAH7B;;;AADLzK;;;AAOF,AAAA,6CAAA,qDAAAb,lGAAMg1C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA70C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAM60C,sFACFzzC;AADJ,AAEG,yFAAA,lFAAC4zC,yEAAa5zC;;;AAFjB,CAAA,2EAAA,oBAAA0zC,/FAAMD,sFAGFzzC;AAHJ,AAAA,IAAA2zC,aAAAD;IAAAC,iBAAA,AAAA/2C,4BAAA+2C;sBAAA,AAAA92C,4CAAA82C,eAAA,gEAAA,7IAGqBJ;AAHrB,AAKG,oBAAMvzC;AAAN,AACE,IAAAwY,qBAAe,AAACkQ,sCAA6B1oB;AAA7C,AAAA,oBAAAwY;AAAA,YAAAA,RAASvd;AAAT,AACE,IAAAqE,oBACC,AAAC4I,cAAI,AAACkH,+BAAgBnU;AADvB,AAAA,GAAAqE;AAEC,IAAAQ,mBAAI,AAAC+zC,oEAAuB7zC;AAA5B,AAAA,oBAAAF;AAAAA;;AACI,IAAAR,wBACC,AAAA,oJAAyC,AAACw0C;AAD3C,AAAA,oBAAAx0C;AAEC,OAACg0C,gDAAkB,AAAA,iGAAer4C,OACf,AAAA,kGAAgBA,OAChBs4C;;AAJpBj0C;;;;AAHLA;;;AADF;;;AADF;;;;AALH,CAAA,qEAAA,rEAAMm0C;;AAAN,AAiBA;;;;;;;;;;;;;;;;;;gDAAA,wDAAAM,xGAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAp3C,4BAAAo3C;sBAAA,AAAAn3C,4CAAAm3C,eAAA,8DAAA,3IAiBWE;sBAjBX,AAAAr3C,4CAAAm3C,eAAA,+DAAA,5IAiBqBG;yBAjBrB,AAAAt3C,4CAAAm3C,eAAA,qEAAA,rJAiB+BI;iBAjB/B,AAAAv3C,4CAAAm3C,eAAA,iEAAA,zIAiB4CpW;AAjB5C,AAmBE,IAAA5iC,qBAAgB,iBAAA8E,mBAAI,AAAC+P;AAAL,AAAA,oBAAA/P;AAAAA;;AACI,OAACu0C;;;AADrB,AAAA,oBAAAr5C;AAAA,AAAA,WAAAA,PAAW+N;AAAX,AAEE,IAAM/I,WAAS,iBAAAF,mBAAI89B;AAAJ,AAAA,oBAAA99B;AAAAA;;AAAe,OAACwF,qBAAWyD;;;IACpC1H,SAAO,kBAAIrB,UACF,iBAAAs0C,WAA2B,AAACj0C;IAA5Bk0C,WAAoDv0C;AAApD,AAAA,4IAAAs0C,SAAAC,yDAAAD,SAAAC,/MAAC5W,mEAAAA,sFAAAA;KACD,CAAC6W,qEAAAA,2EAAAA,RAA4BzrC,uDAAAA;IACtC60B,iBAAW,iBAAA99B,mBAAIE;AAAJ,AAAA,oBAAAF;AAAAA;;AAAa89B;;;AAJ9B,AAKE,oBAAIwW;AACF,IAAM/yC,aAAO,AAACozC,iFAAsBpzC,OAAO,iBAAAvB,mBAAIE;AAAJ,AAAA,oBAAAF;AAAAA;;AAAaiJ;;;AAAxD,2EAEG,iBAAA2rC,WAASrzC,vGAuBT,OAAC2F,+CAAOC;IAvBRytC,eAAA,kBACE9W,gBACA,AAACr3B,4CAAI,+DAAUouC;AAAV,AACE,GAAI,AAACx4C,6CAAEyhC,eAAW,AAAA,6FAAa+W;AAC7BA;;AACA,OAAC1yC,gBAAM,AAAC8D,+CAAO6uC,qDAAK,AAAA,0GAAA,LAAiBD;;aALhDD,VAEEA;IAFFA,eAAA,kBAOER,iBACA,AAACW,sBACA,WAAK/W;AAAL,AACE,oBAAI,iBAAAx+B,oBAAK,AAAC0O,qBAAK8vB;AAAX,AAAA,GAAAx+B;AAAA,IAAAA,wBACK,AAAC8P,+BAAgB0uB;AADtB,AAAA,oBAAAx+B;AAEK,OAACxD,gDAAK8hC,eAAW,AAAA,6FAAaE;;AAFnCx+B;;;AAAAA;;;AAGF,uDAAA,uEAAA,vHAAC8H,8CAAM02B;;AAAsBA;;iBAbpC4W,dAQEA;IARFA,eAAA,AAgBE,AAACvoC,sDAAO,WAAK5E;AAAL,AAAQ,+CAAA,xCAACutC,mBAAS9mC,4FAAqBzG;qDAA/CmtC;;IAhBFA,eAAA,kBAkBEP,iBACA,AAACpuC,+CAAO,WAAK+3B;AAAL,AAAQ,OAAC8V,yEAAa,AAAA,6FAAa9V;iBAnB7C4W,dAmBEA;AAnBF,AAAA,AAsBE,OAACnuC,4CAAI,WAAKgB;AAAL,AAAQ,wDAAA,jDAACuD,+CAAOvD;GAArBmtC;;;;AAGL,IAAAK,WAAS1zC;IAAT0zC,eAAA,2HAAAA,zGACEb,iBACA,8EAAAa,9EAAChvC,+CAAOqJ;IAFV2lC,eAAA,kBAIEZ,iBACA,AAACpuC,+CAAO,WAAK+3B;AAAL,AAAQ,OAAC8V,yEAAa,AAAA,6FAAa9V;iBAL7CiX,dAKEA;AALF,AAAA,AAQE,2EAAAA,pEAAC/tC,+CAAOC;;;;AA3ChB;;;AA6CF,uDAAA,vDAAO+tC;AAAP,AAEE,IAAMvmC,SAAO,AAACjG,eAAK,AAACqJ;AAApB,AACE,OAAA,mFAAOpD;;AAEX,qDAAA,rDAAOwmC,kHACJh2B,UAAUtjB;AADb,AAEE,IAAMsjB,gBAAU,AAAC1Y,4CAAI,WAAKvG;AAAL,AAAe,GAAI,OAASA;AAAU,OAACgY,eAAKhY;;AAAUA;;GAAWif;IAChFrR,OAAK,AAACvN;IACN1E,YAAM,AAAC2X,mBAAQ3X;AAFrB,AAGE,oBAAMiS;AAAN,AACE,IAAAlC,qCAAAC;IAAAC,4BAAA,kBAAAF,oCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,iGAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,IAAA0pC,mBAAA,AAAA3zC,cAAiBwd;IAAjBo2B,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,qBAAA,AAAAD,wDAAAE,zEAAQv1C;AAAR,AAAA,AACE,IAAAhF,2BAAiB,iBAAA46C,WAAA,mFAAA,+DAAwB51C;AAAxB,AAAA,4GAAA41C,yCAAAA,7IAAC11C,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM+6C,sBAAc,AAAA,wGAAmB/6C;AAAvC,AACE,GAAU,AAACkB,6CAAE65C,oBAAcr6C;AAA3B;AAAA,AACE,sBAAA,2CAAA,8EAAA,3IAAMV,4HAAmB+E,yFACMrE;AAD/B,AAEE,AAACgR,gDAA0B1R;;;AALnC;;AADF;AAAA,eAAAm6C;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAv6C,2BAAA,AAAAyG,cAAA2zC;AAAA,AAAA,GAAAp6C;AAAA,AAAA,IAAAo6C,uBAAAp6C;AAAA,AAAA,GAAA,AAAA6G,6BAAAuzC;AAAA,IAAAtzC,wBAAA,AAAAC,sBAAAqzC;AAAA,AAAA,eAAA,AAAApzC,qBAAAozC;eAAAtzC;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,qBAAA,AAAAG,gBAAAmzC,jCAAQp1C;AAAR,AAAA,AACE,IAAAhF,+BAAiB,iBAAA66C,WAAA,mFAAA,+DAAwB71C;AAAxB,AAAA,4GAAA61C,yCAAAA,7IAAC31C,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM+6C,sBAAc,AAAA,wGAAmB/6C;AAAvC,AACE,GAAU,AAACkB,6CAAE65C,oBAAcr6C;AAA3B;AAAA,AACE,sBAAA,2CAAA,8EAAA,3IAAMV,4HAAmB+E,yFACMrE;AAD/B,AAEE,AAACgR,gDAA0B1R;;;AALnC;;AADF;AAAA,eAAA,AAAAiH,eAAAkzC;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAFF,IAAAF,qDAAAvpC;IAAAwpC,qDAAA,AAAAppC,qBAAA;AAAA,AAAA,CAAAJ,8DAAAwpC;;AAAA,IAAA,AAEE,IAAAK,mBAAA,AAAA/zC,cAAiBwd;IAAjBw2B,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,qBAAA,AAAAD,wDAAAE,zEAAQ31C;AAAR,AAAA,AACE,IAAAhF,2BAAiB,iBAAA86C,WAAA,mFAAA,+DAAwB91C;AAAxB,AAAA,4GAAA81C,yCAAAA,7IAAC51C,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM+6C,sBAAc,AAAA,wGAAmB/6C;AAAvC,AACE,GAAU,AAACkB,6CAAE65C,oBAAcr6C;AAA3B;AAAA,AACE,sBAAA,2CAAA,8EAAA,3IAAMV,4HAAmB+E,yFACMrE;AAD/B,AAEE,AAACgR,gDAA0B1R;;;AALnC;;AADF;AAAA,eAAAu6C;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA36C,2BAAA,AAAAyG,cAAA+zC;AAAA,AAAA,GAAAx6C;AAAA,AAAA,IAAAw6C,uBAAAx6C;AAAA,AAAA,GAAA,AAAA6G,6BAAA2zC;AAAA,IAAA1zC,wBAAA,AAAAC,sBAAAyzC;AAAA,AAAA,eAAA,AAAAxzC,qBAAAwzC;eAAA1zC;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,qBAAA,AAAAG,gBAAAuzC,jCAAQx1C;AAAR,AAAA,AACE,IAAAhF,+BAAiB,iBAAA+6C,WAAA,mFAAA,+DAAwB/1C;AAAxB,AAAA,4GAAA+1C,yCAAAA,7IAAC71C,mDAAAA,6DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,IAAM+6C,sBAAc,AAAA,wGAAmB/6C;AAAvC,AACE,GAAU,AAACkB,6CAAE65C,oBAAcr6C;AAA3B;AAAA,AACE,sBAAA,2CAAA,8EAAA,3IAAMV,4HAAmB+E,yFACMrE;AAD/B,AAEE,AAACgR,gDAA0B1R;;;AALnC;;AADF;AAAA,eAAA,AAAAiH,eAAAszC;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAFF,IAAAxpC,yBAAA,AAAAC,2BAAAN;IAAAO,0BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,+BAAA,AAAAnK,gBAAA,AAAAsE,4CAAA,2DAAAyF;IAAAK,8BAAA,AAAA7F,+CAAA0F,wBAAA,AAAA,qGAAAN;IAAAU,mCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,0BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA3K,cAAA4K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,8BAAA,AAAAC,oDAAAH,4BAAAC;AAAA,AAAA,2CAAA,0DAAAD,4BAAA,2DAAAD,6BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAupC;;;AASA,IAAMl1C,WAAS,AAACiC,gBAAMgd;IAChBnB,YAAU,iBAAAhe,mBAAI,AAACie;AAAL,AAAA,oBAAAje;AAAAA;;AAAA;;;AADhB,AAGE,IAAA9E,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAWgjB;AAAX,AACE,GAAM,AAAC7hB,6CAAE,AAAA,6FAAa6hB,eAAehe;AAArC,AACE,OAACqE,uEAAY2Z,cACAF,UACA,AAAC1iB;;AAHhB;;;AADF;;;AAbJ;;;AAmBJ,+CAAA,/CAAM66C,sGAAiBj2C;AAAvB,AACE,oBAAM,AAAC4zC,yEAAa5zC;AAApB,AACE,oBAAU,AAACg1C;AAAX;AAAA,AACE,mDAAA,oGAAA,vJAACC,sIAAuBj1C;;;AAF5B;;AAGA,yDAAA,lDAACk2C,yCAA2Bl2C;;AAE9B,6CAAA,7CAAMm2C,kGAAen2C;AAArB,AACE,oBAAU,AAACg1C;AAAX;;AAAA,AACE,mDAAA,oGAAA,vJAACC,sIAAuBj1C;;AACxB,yDAAA,lDAACk2C,yCAA2Bl2C;;;AAEhC,AAAA,uCAAA,+CAAAvB,tFAAM43C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAz3C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAMy3C,gFACF7jB;AADJ,AACO,4EAAA,rEAAC8jB,mEAAQ9jB;;;AADhB,CAAA,qEAAA,rEAAM6jB,gFAEF7jB,EAAE+jB;AAFN,AAGG,AAAC/f,mBAAUhE;;AACX,oBACE,AAACvM;AACD,IAAAjrB,qBAAoB,AAAA,6FAAa,AAACE;AAAlC,AAAA,oBAAAF;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,OAACm2C,2CAAcn2C;;AADjB;;;AAFF,oBAKE,AAACunB;AACD,AACE,8CACK,AAAChhB,4CAAI,WAAKiwC,rGAIVC;AAJK,AACE,kDAAA,eAAI,oBAAA,pBAAC1+B,gBAASy+B,/BACVx+B,3CACAm+B;GAJX,AAACj/B;;AAMN,IAAA5X,oBAAKi3C;AAAL,AAAA,oBAAAj3C;AAAsB,OAAC4D;;AAAvB5D;;;AAbJ,AAgBE,IAAMo3C,oBAAkB,8CAAA,9CAACzC;IACnB0C,YAAU,iBAAA72C,mBAAI,AAACyC,8CAAMq0C,cAAI,4CAAA,5CAACrwC,4GAAiBmwC;AAAjC,AAAA,oBAAA52C;AAAAA;;AAAA;;;AADhB,AAEE,YAAA,RAAOmJ;;AAAP,AACE,GAAI,CAAGA,QAAM0tC;AAAb;;AAEE,IAAME,iGACsB,AAAC9wC,+CAAO,7HACR,AAACA,+CAAOqJ;kBADK0uB;AAAL,AAAQ,OAAC3hC,6CAAE,AAAA,8FAAc2hC,GAAG70B;;CADpCytC;AAA5B,AAGE,GAAI,AAACI,uBAAOD;AACV,eAAO,SAAA,RAAK5tC;;;;AACZ,IAAA8tC,aAAA,AAAAt1C,cAA6Bo1C;IAA7BG,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;IAAAC,iBAAA,AAAAv6C,4BAAAu6C;WAAA,AAAAt6C,4CAAAs6C,eAAA,lEAAsBnuC;AAAtB,AAAA,AACE,AAACmtC,2CAAcntC;;AADjB;AAAA,eAAA+tC;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAl8C,qBAAA,AAAAyG,cAAAs1C;AAAA,AAAA,GAAA/7C;AAAA,AAAA,IAAA+7C,iBAAA/7C;AAAA,AAAA,GAAA,AAAA6G,6BAAAk1C;AAAA,IAAAj1C,kBAAA,AAAAC,sBAAAg1C;AAAA,AAAA,eAAA,AAAA/0C,qBAAA+0C;eAAAj1C;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,IAAAs1C,aAAA,AAAAn1C,gBAAA80C;IAAAK,iBAAA,AAAAx6C,4BAAAw6C;WAAA,AAAAv6C,4CAAAu6C,eAAA,lEAAsBpuC;AAAtB,AAAA,AACE,AAACmtC,2CAAcntC;;AADjB;AAAA,eAAA,AAAA9G,eAAA60C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;;;;;;;;AA9Bf,CAAA,+DAAA,/DAAMV;;AAAN,AAiCA,AAAA,yCAAA,iDAAA53C,1FAAM64C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA14C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uEAAA,vEAAM04C,kFACF9kB;AADJ,AACO,8EAAA,vEAAC+kB,qEAAU/kB;;;AADlB,CAAA,uEAAA,vEAAM8kB,kFAEF9kB,EAAE+jB;AAFN,AAGG,oBAAM/jB;AAAN,AAAQ,AAACgE,mBAAUhE;;AAAnB;;AACA,oBACE,AAACvM;AACD,IAAAjrB,qBAAoB,AAAA,6FAAa,AAACE;AAAlC,AAAA,oBAAAF;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,OAACi2C,6CAAgBj2C;;AADnB;;;AAFF,oBAKE,AAACunB;AACD,AACE,8CACK,AAAChhB,4CAAI,WAAKiwC,rGAIVC;AAJK,AACE,oDAAA,eAAI,oBAAA,pBAAC1+B,gBAASy+B,/BACVx+B,7CACAi+B;GAJX,AAAC/+B;;AAMN,IAAA5X,oBAAKi3C;AAAL,AAAA,oBAAAj3C;AAAsB,OAAC4D;;AAAvB5D;;;AAbJ,AAiBE,IAAMo3C,oBACA,8CAAA,2CAAA,8DAAA,vJAACzC;IACD0C,YAAU,iBAAA72C,mBAAI,AAACyC,8CAAMq0C,cAAI,4CAAA,5CAACrwC,4GAAiBmwC;AAAjC,AAAA,oBAAA52C;AAAAA;;AAAA;;;AAFhB,AAGE,IAAOmJ,QAAM0tC;;AAAb,AACE,GAAI,WAAA,VAAO1tC;AAAX;;AAEE,IAAMuuC,qBAGK,AAACzxC,+CAAO;kBAAK+3B;AAAL,AAAQ,OAAC8V,yEAAa,AAAA,6FAAa9V;;CAD3C,AAAC/3B,+CAAO;kBAAK+3B;AAAL,AAAQ,OAAC3hC,6CAAE,AAAA,8FAAc2hC,GAAG70B;;CADpCytC;AADX,AAIE,GAAI,AAACI,uBAAOU;AACV,eAAO,SAAA,RAAKvuC;;;;AACZ,IAAAwuC,aAAA,AAAAh2C,cAA6B+1C;IAA7BE,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;IAAAC,iBAAA,AAAAj7C,4BAAAi7C;WAAA,AAAAh7C,4CAAAg7C,eAAA,lEAAsB7uC;AAAtB,AAAA,AACE,AAACitC,6CAAgBjtC;;AADnB;AAAA,eAAAyuC;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAA58C,qBAAA,AAAAyG,cAAAg2C;AAAA,AAAA,GAAAz8C;AAAA,AAAA,IAAAy8C,iBAAAz8C;AAAA,AAAA,GAAA,AAAA6G,6BAAA41C;AAAA,IAAA31C,kBAAA,AAAAC,sBAAA01C;AAAA,AAAA,eAAA,AAAAz1C,qBAAAy1C;eAAA31C;eAAA,AAAA9F,gBAAA8F;eAAA;;;;;;;AAAA,IAAAg2C,aAAA,AAAA71C,gBAAAw1C;IAAAK,iBAAA,AAAAl7C,4BAAAk7C;WAAA,AAAAj7C,4CAAAi7C,eAAA,lEAAsB9uC;AAAtB,AAAA,AACE,AAACitC,6CAAgBjtC;;AADnB;AAAA,eAAA,AAAA9G,eAAAu1C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;;;;;;;;AAjCf,CAAA,iEAAA,jEAAMH;;AAAN,AAoCA,AAAA,6CAAA,qDAAA74C,lGAAMu5C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAp5C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMo5C;AAAN,AAEG,gFAAA,zEAACC;;;AAFJ,CAAA,2EAAA,3EAAMD,sFAGFh4C;AAHJ,AAIG,IAAMqB,SAAO,8CAAA,2CAAA,qEAAA,MAAA,+DAAA,KAAA,xOAAC4yC,ySAEmCj0C;IAC3Cif,YAAU,4CAAA,5CAAC1Y,2GAAgBlF;AAHjC,AAIE,oEAAA,7DAAC4zC,mDAAsBh2B;;;AAR5B,CAAA,qEAAA,rEAAM+4B;;AAAN,AAUA,AAAA,2CAAA,mDAAAv5C,9FAAM05C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAv5C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMu5C;AAAN,AAEG,8EAAA,vEAACC;;;AAFJ,CAAA,yEAAA,zEAAMD,oFAGFn4C;AAHJ,AAIG,IAAMqB,SAAO,8CAAA,2CAAA,qEAAA,MAAA,8DAAA,KAAA,vOAAC4yC,wSAEmCj0C;IAC3Cif,YAAU,4CAAA,5CAAC1Y,2GAAgBlF;AAHjC,AAIE,oEAAA,7DAAC4zC,mDAAsBh2B;;;AAR5B,CAAA,mEAAA,nEAAMk5B;;AAAN,AAUA,4CAAA,5CAAME;AAAN,AACE,IAAMC,sBAAc,AAACxB,uBAAO,8CAAA,2CAAA,qEAAA,MAAA,8DAAA,lOAAC7C;AAA7B,AAEE,GAAIqE;AACF,OAACL;;AACD,OAACG;;;AAEP,kDAAA,lDAAMG;AAAN,AAEE,IAAA//B,qBAA0B,AAACpd;AAA3B,AAAA,oBAAAod;AAAA,uBAAAA,nBAASggC;AAAT,AACE,IAAMn9C,QAAM,AAACC,oBAAgBk9C;IACvBC,mBAAiB,AAACC,uCAA8Br9C;IAChDgG,SAAO,AAAA+B,uBAAA,wCAAA,xCAAcq1C;AAF3B,AAGE,OAAC/4B,wFAA4Cre;;AAC/C,iSAAK,8CAAA,2CAAA,8DAAA,vJAAC4yC,lMACD,AAAC1tC,4CAAI,sFAAA,tFAACquB,6CAAK+jB,2BAAuB9jB,5MAClCnV;;;AAET,AAAA,yCAAA,iDAAAjhB,1FAAMo6C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAj6C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uEAAA,vEAAMi6C;AAAN,AAEG,4EAAA,rEAACC;;;AAFJ,CAAA,uEAAA,vEAAMD,kFAGFE;AAHJ,AAIG,oBAAM,AAAC9yB;AAAP,AACE,oBAAI8yB;AACF,kDAAK,AAAA,6FAAa,AAAC79C,xIACdukB;;AACL,OAACkG;;;AAJL;;;;AAJH,CAAA,iEAAA,jEAAMkzB;;AAAN,AAUA,wEAAA,xEAAMG;AAAN,AAEE,IAAAh+C,qBAAoC,AAACk+C;AAArC,AAAA,oBAAAl+C;AAAA,AAAA,IAAAi+C,aAAAj+C;IAAAi+C,iBAAA,AAAAr8C,4BAAAq8C;YAAA,AAAAp8C,4CAAAo8C,eAAA,nEAAmBnT;UAAnB,AAAAjpC,4CAAAo8C,eAAA,jEAAyBl1C;WAAzB,AAAAlH,4CAAAo8C,eAAA,lEAA6Bn6C;AAA7B,AACE,IAAA9D,yBAAiB,iBAAAm+C,WAAA,mFAAA,+DAAsBr6C;AAAtB,AAAA,wGAAAq6C,uCAAAA,vIAACx0C,iDAAAA,2DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMm+C,gBAAc,AAAA,kGAAgBn+C;IAC9B6B,SAAO,iBAAAgD,mBAAI,AAAA,iGAAe7E;AAAnB,AAAA,oBAAA6E;AAAAA;;AAAA;;;IACPu5C,iEAA+B,AAAC3uB,yCAA2B5tB,OAAOs8C,pFACnC,AAACl0C;AAHtC,AAIE,IAAAlK,yBAAiB,AAACw/B;AAAlB,AAAA,oBAAAx/B;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAAL,yBAAiC,0DAAA,1DAACY,oDAASP;AAA3C,AAAA,oBAAAL;AAAA,AAAA,4BAAAA,xBAAWs+C;AAAX,AACE,IAAMC,sBAAe,CAAK,mEAAA,nEAACx9C,6CAAKu9C,0BAAwBxT,mDAC9BuT,4BACA,AAACt9C,6CAAKu9C,sBAAsBv1C;AAFtD,AAGE,qFAAA,9EAACy1C,oDAAsCn+C,MAAMk+C;;AAJjD;;;AADF;;;AALJ;;;AADF;;;AAaF,2CAAA,3CAAME,8FACHz5C;AADH,AAEE,oBAAMA;AAAN,AACE,OAACwf,oEAAwB,0DAAA,1DAAChV,qHAAqB,4CAAKxK;;AADtD;;;AAGF,mDAAA,nDAAM05C,8GACHz+C,MAAM0+C;AADT,AAEE,oBAAM,iBAAAr6C,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAWq6C;;AAAXr6C;;;AAAN,AACE,IAAMmlB,QAAM,AAACm1B,qBAAW,CAAA,mDAAY,0DAAA,1DAACpvC,6HAA6B,4CAAKmvC;IACjEn6C,UAAQ,4IAAA,5IAAC6W,6BAAqB,AAAA,kGAAgBpb,OAAOwpB;AAD3D,AAEE,OAACkE,uEAAY,AAACtoB,kCACD,AAAA,6FAAapF,OACbuE;;AALjB;;;AAOF,sDAAA,tDAAMq6C,oHACH5+C,MAAM0+C;AADT,AAEE,oBAAM,iBAAAr6C,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAWq6C;;AAAXr6C;;;AAAN,AACE,IAAMmlB,QAAM,0DAAA,1DAACja,qHAAqB,4CAAKmvC;IACjCG,YAAU,iBAAAC,WAAA,mFAAA,+DAAwBJ;AAAxB,AAAA,4GAAAI,yCAAAA,7IAAC75C,mDAAAA,6DAAAA;;IACX85C,sNAAuB,iBAAAl6C,mBAAI,AAAA,kGAAgBg6C,pSAEpB,AAAC70C,kDAAoC,AAAA,iGAAe60C,vLACpD,AAAC50C;AAHD,AAAA,oBAAApF;AAAAA;;AAAA;;;IAIvBN,UAAQ,AAAC6W,6BAAqB,AAAA,kGAAgBpb,OAAOwpB,MACvBu1B;AAPpC,AAQE,OAACrxB,uEAAY,AAACtoB,kCACD,AAAA,6FAAapF,OACbuE;;AAXjB;;;AAaF,uDAAA,vDAAMy6C,sHACHh/C,MAAM0+C;AADT,AAEE,oBAAM,iBAAAr6C,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAWq6C;;AAAXr6C;;;AAAN,AACE,IAAMmlB,QAAM,0DAAA,1DAACja,qHAAqB,4CAAKmvC;IACjCn6C,UAAQ,AAAC6W,6BAAqB,AAAA,kGAAgBpb,OAAOwpB,MACvB,0DAAA,1DAACja,+HACY,4CAAKmvC;AAHtD,AAIE,OAAChxB,uEAAY,AAACtoB,kCACD,AAAA,6FAAapF,OACbuE;;AAPjB;;;AASF;;;;;;yDAAA,zDAAM06C,0HAKHj/C,MAAMwT;AALT,AAME,IAAA3O,mBACC,iBAAAR,oBACC,iBAAAQ,mBAAI,AAAA,mFAAO2O;AAAX,AAAA,oBAAA3O;AAAAA;;AAAmB,OAAA,qGAAgB2O;;;AADpC,AAAA,oBAAAnP;AAAA,IAAAA,wBAEC,CAAI,wGAAA,vGAAK,AAAA,8FAAcrE,iBACnB,AAACk/C;AAHN,AAAA,GAAA76C;AAKC,OAAC2C,gBAAM,AAAA,kGAAgB,iBAAAm4C,WAAW,AAAA,mFAAQn/C;AAAnB,AAAA,4GAAAm/C,yCAAAA,7IAACl6C,mDAAAA,6DAAAA;;;AALzBZ;;;AAAAA;;;AADD,AAAA,oBAAAQ;AAAAA;;AAOC,OAACsP,+BAAgBnU","names":["js/frontend","js/frontend.handler","js/frontend.handler.editor","js/frontend.handler.editor.*asset-uploading?","frontend.handler.editor/*asset-uploading?","cljs.core.atom","js/frontend.handler.editor.*asset-uploading-process","frontend.handler.editor/*asset-uploading-process","js/frontend.handler.editor.*selected-text","frontend.handler.editor/*selected-text","frontend.handler.editor/get-selection-and-format","temp__5720__auto__","block","frontend.state/get-edit-block","edit-id","frontend.state/get-edit-input-id","input","goog.dom/getElement","selection-start","frontend.util/get-selection-start","selection-end","frontend.util/get-selection-end","value","frontend.handler.editor.goog$module$goog$object.get","selection","cljs.core.not_EQ_","cljs.core.subs","cljs.core/count","p1__55745#","cljs.core.take_while","cljs.core._EQ_","p1__55746#","cljs.core/reverse","G__55748","clojure.string/trim","frontend.handler.editor/format-text!","pattern-fn","m","map__55750","cljs.core/--destructure-map","cljs.core.get","format","pattern","pattern-count","pattern-prefix","x__5128__auto__","y__5129__auto__","pattern-suffix","x__5131__auto__","y__5132__auto__","already-wrapped?","prefix","postfix","inner-value","G__55754","p1__55749#","new-value","frontend.state.set_edit_content_BANG_","frontend.util.cursor/set-selection-to","frontend.util.cursor/move-cursor-to","frontend.handler.editor/bold-format!","frontend.config/get-bold","frontend.handler.editor/italics-format!","frontend.config/get-italic","frontend.handler.editor/highlight-format!","frontend.config/get-highlight","frontend.handler.editor/strike-through-format!","frontend.config/get-strike-through","var_args","G__55756","frontend.handler.editor/html-link-format!","js/Error","frontend.handler.editor.html_link_format_BANG_","link","map__55757","vec__55758","cljs.core.nth","cur-pos","frontend.util.cursor/pos","empty-selection?","selection-link?","and__5041__auto__","frontend.util/starts-with?","content","forward-pos","frontend.config/get-empty-link-and-forward-pos","frontend.config/with-label-link","frontend.config/with-default-link","frontend.config/with-default-label","or__5043__auto__","frontend.handler.editor/open-block-in-sidebar!","block-id","G__55761","frontend.db/entity","page?","frontend.state/sidebar-add-block!","frontend.state/get-current-repo","frontend.handler.editor/reset-cursor-range!","node","frontend.state/set-cursor-range!","frontend.util/caret-range","frontend.handler.editor/restore-cursor-pos!","id","markup","cursor-range","frontend.state/get-cursor-range","pos","frontend.state/get-editor-last-pos","frontend.diff/find-position","frontend.state/clear-editor-last-pos!","frontend.handler.editor/highlight-block!","block-uuid","blocks","cljs.core.array_seq","js/document.getElementsByClassName","seq__55762","cljs.core/seq","chunk__55763","count__55764","i__55765","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","dommy.core.add_class_BANG_","frontend.handler.editor/unhighlight-blocks!","G__55766","cljs.core.repeat","cljs.core.apply","cljs.core/concat","seq__55767","chunk__55768","count__55769","i__55770","goog.dom.classes/remove","frontend.handler.editor/get-edit-input-id-with-block-id","first-block","frontend.util/get-first-block-by-id","clojure.string/replace","frontend.handler.editor/clear-selection!","frontend.util/select-unhighlight!","dommy.utils/->Array","js/document","frontend.state/clear-selection!","p__55771","vec__55772","frontend.handler.editor/text-range-by-lst-fst-line","direction","G__55775","cljs.core/Keyword","last-new-line","clojure.string.last_index_of","end","clojure.string/split-lines","G__55777","frontend.handler.editor/edit-block!","p__55778","map__55779","frontend.handler.editor.edit_block_BANG_","custom-content","tail-len","move-cursor?","frontend.config/publishing?","G__55780","frontend.db/pull","edit-input-id","cljs.core/uuid?","content-length","text-range","cljs.core/vector?","frontend.util.property/remove-built-in-properties","frontend.util.drawer/remove-logbook","frontend.state.set_editing_BANG_","frontend.handler.editor/another-block-with-same-id-exists?","current-id","cljs.core/parse-uuid","G__55781","frontend.handler.editor/attach-page-properties-if-exists!","map__55782","page-properties","str->page","n","frontend.format.block.page_name__GT_map","refs","cljs.core.filter","p__55783","vec__55784","_","v","cljs.core/coll?","cljs.core/vals","cljs.core/set","cljs.core.map","cljs.core.concat","frontend.util/distinct-by","tags","alias","page-tx","retract-attributes","cljs.core.mapv","attribute","cljs.core.remove","cljs.core/nil?","tx","G__55787","cljs.core.assoc","cljs.core.conj","frontend.handler.editor/remove-non-existed-refs!","x","frontend.handler.editor/with-marker-time","new-marker","old-marker","frontend.state/enable-timetracking?","e55788","logbook-exists?","frontend.util.drawer/get-logbook","clojure.string/lower-case","cljs.core/name","new-content","cljs.core/not","frontend.util.clock/clock-in","cljs.core/contains?","frontend.util.clock/clock-out","_e","frontend.handler.editor/with-timetracking","cljs.core/last","frontend.util/safe-re-find","frontend.util.marker/marker-pattern","p__55789","map__55790","frontend.handler.editor/wrap-parse-block","left","page","uuid","level","pre-block?","vec__55791","G__55794","cljs.core.merge","frontend.format.block.parse_title_and_body","properties","real-content","frontend.util.property/with-built-in-properties","frontend.util.drawer/with-logbook","first-block?","ast","frontend.format.mldoc/->edn","logseq.graph_parser.mldoc.default_config","first-elem-type","cljs.core/ffirst","first-elem-meta","cljs.core/second","properties?","markdown-heading?","block-with-title?","frontend.format.mldoc/block-with-title?","clojure.string/triml","frontend.util.format","content'","frontend.config/get-block-pattern","cljs.core/dissoc","frontend.db-schema/retract-attributes","frontend.format.block.parse_block","cljs.core.dissoc","cljs.core.update","new-properties","cljs.core/select-keys","frontend.util.property/built-in-properties","p__55795","map__55796","frontend.handler.editor/save-block-inner!","js/goog.DEBUG","k__31026__auto__","js/console","res__31027__auto__","transact-data__47600__auto__","frontend.modules.outliner.core/*transaction-data*","opts__47601__auto__","*transaction-data*-orig-val__55797","*transaction-data*-temp-val__55798","cljs.core/transient","r__47602__auto__","cljs.core/persistent!","tx__47603__auto__","cljs.core.mapcat","tx-meta__47604__auto__","all-tx__47605__auto__","opts#__47606__auto__","result__47607__auto__","frontend.modules.outliner.datascript/transact!","*transaction-data*-orig-val__55800","*transaction-data*-temp-val__55801","frontend.modules.outliner.core/save-block!","title","cljs.core.get_in","old-page-name","G__55799","G__55802","clojure.string/blank?","frontend.util/page-name-sanity-lc","frontend.state/pub-event!","G__55804","frontend.handler.editor/save-block-if-changed!","p__55805","map__55806","frontend.handler.editor.save_block_if_changed_BANG_","force?","opts","map__55807","repo","frontend.state.get_preferred_format","G__55808","G__55809","cljs.core/map?","frontend.handler.notification.show_BANG_","content-changed?","frontend.handler.editor/compute-fst-snd-block-text","fst-block-text","snd-block-text","p__55810","map__55811","frontend.handler.editor/outliner-insert-block!","config","current-block","new-block","sibling?","keep-uuid?","replace-empty-target?","ref-query-top-block?","has-children?","G__55812","frontend.db/has-children?","cljs.core/boolean?","frontend.util/collapsed?","*transaction-data*-orig-val__55814","*transaction-data*-temp-val__55815","G__55813","G__55816","frontend.handler.editor/save-current-block!","frontend.modules.outliner.core/insert-blocks!","frontend.handler.editor/block-self-alone-when-insert?","current-page","frontend.state/get-current-page","G__55817","G__55818","p__55819","map__55820","frontend.handler.editor/insert-new-block-before-block-aux!","_value","ok-handler","new-m","frontend.db/new-block-id","prev-block","left-block","G__55821","p__55822","p__55823","map__55824","map__55825","frontend.handler.editor/insert-new-block-aux!","_opts","vec__55826","block-self?","next-block","frontend.util/set-change-value","frontend.handler.editor/clear-when-saved!","frontend.state/clear-editor-show-state!","frontend.commands/restore-state","frontend.handler.editor/get-state","vec__55829","map__55832","on-hide","block-parent-id","sidebar?","frontend.state/get-editor-args","G__55833","G__55835","frontend.handler.editor/insert-new-block!","state","frontend.handler.editor.insert_new_block_BANG_","_state","block-value","frontend.state/get-editor-op","frontend.state/set-editor-op!","map__55836","vec__55837","G__55840","insert-fn","G__55841","G__55842","G__55843","G__55844","last-block","p__55846","map__55847","frontend.handler.editor/api-insert-new-block!","before?","custom-uuid","edit-block?","cljs.core/boolean","G__55848","G__55849","vec__55850","children","frontend.db/sort-by-left","last-block-id","G__55853","frontend.db/get-page-format","frontend.util.property/insert-properties","block-m","first-child?","p1__55845#","cljs.core/=","G__55854","G__55855","G__55856","js/setTimeout","G__55858","frontend.handler.editor/insert-first-page-block-if-not-exists!","page-title","frontend.handler.editor.insert_first_page_block_if_not_exists_BANG_","frontend.handler.editor/properties-block","logseq.graph-parser.block/get-page-refs-from-properties","G__55859","frontend.db/get-db","frontend.state/get-date-formatter","cljs.core/keys","p__55860","map__55861","frontend.handler.editor/update-timestamps-content!","repeated?","marker","scheduled-ast","frontend.handler.block/get-scheduled-ast","deadline-ast","frontend.handler.block/get-deadline-ast","G__55862","frontend.handler.repeated/repeated?","ts","frontend.handler.repeated.timestamp__GT_text","frontend.handler.repeated/next-timestamp-text","cljs.core.reduce","p__55863","vec__55864","old","new","clojure.string/replace-first","G__55867","frontend.util.drawer/insert-drawer","frontend.date/get-date-time-string-3","p__55868","map__55869","frontend.handler.editor/check","input-id","clojure.string/ends-with?","p__55870","map__55871","frontend.handler.editor/uncheck","frontend.state/get-preferred-workflow","frontend.handler.editor/get-selected-blocks","cljs.core.distinct","frontend.state/get-selection-blocks","G__55873","frontend.handler.editor/set-marker","p__55874","map__55875","frontend.handler.editor.set_marker","vec__55876","frontend.util.marker/cycle-marker","frontend.handler.editor/cycle-todos!","ids","p1__55879#","dommy.core/attr","cljs.core/uuid","seq__55880","chunk__55881","count__55882","i__55883","G__55886","G__55887","frontend.handler.editor/cycle-todo!","temp__5718__auto__","vec__55888","current-input","frontend.state/get-edit-content","G__55891","new-pos","frontend.commands/compute-pos-delta-when-change-marker","p__55892","map__55893","frontend.handler.editor/set-priority","priority","new-priority","frontend.handler.editor/cycle-priority!","G__55894","frontend.util.priority/cycle-priority-state","frontend.util.priority/add-or-update-priority","p__55895","map__55896","frontend.handler.editor/delete-block-aux!","_block","children?","G__55897","G__55898","G__55899","*transaction-data*-orig-val__55900","*transaction-data*-temp-val__55901","frontend.modules.outliner.core/delete-blocks!","frontend.handler.editor/move-to-prev-block","sibling-block","sibling-block-id","G__55902","G__55903","G__55904","original-content","frontend.util/trim-safe","value'","logseq.graph-parser.utf8/length","logseq.graph-parser.utf8/encode","G__55906","frontend.handler.editor/delete-block!","frontend.handler.editor.delete_block_BANG_","delete-children?","map__55907","page-id","G__55908","page-blocks-count","frontend.db/get-page-blocks-count","G__55909","G__55910","frontend.modules.outliner.tree/-get-left","frontend.modules.outliner.core/block","left-has-children?","G__55911","block-parent","frontend.util/get-prev-block-non-collapsed-non-embed","frontend.handler.editor/delete-blocks!","block-uuids","dom-blocks","uuid->dom-block","cljs.core/zipmap","*transaction-data*-orig-val__55912","*transaction-data*-temp-val__55913","frontend.handler.editor/batch-set-block-property!","col","*transaction-data*-orig-val__55934","*transaction-data*-temp-val__55935","seq__55914","chunk__55915","count__55916","i__55917","vec__55926","vec__55930","seq__55936","chunk__55937","count__55938","i__55939","vec__55948","vec__55952","key","G__55929","G__55933","G__55951","G__55955","frontend.util.property.remove_property","frontend.util.property.insert_property","frontend.util.property/remove-empty-properties","input-pos","frontend.state/get-edit-pos","editing-block","frontend.handler.editor/remove-block-property!","cljs.core.keyword","frontend.handler.editor/set-block-property!","frontend.handler.editor/set-block-query-properties!","all-properties","add?","G__55956","query-properties","frontend.handler.common/safe-read-string","cljs.core/vec","frontend.handler.editor/set-block-timestamp!","G__55957","map__55958","logseq.graph-parser.text/remove-timestamp","logseq.graph-parser.text/add-timestamp","frontend.handler.editor/set-blocks-id!","block-ids","G__55959","G__55962","frontend.handler.editor/copy-block-ref!","p1__55960#","frontend.handler.editor.copy_block_ref_BANG_","tap-clipboard","frontend.util.copy_to_clipboard_BANG_","frontend.handler.editor/select-block!","frontend.state.exit_editing_and_set_selected_blocks_BANG_","frontend.handler.editor/compose-copied-blocks-contents","frontend.db.utils.pull_many","top-level-block-uuids","frontend.modules.outliner.core/get-top-level-blocks","frontend.handler.export/export-blocks-as-markdown","frontend.state/get-export-block-text-indent-style","cljs.core.into","frontend.state/get-export-block-text-remove-options","frontend.handler.editor/copy-selection-blocks","p1__55963#","cljs.core.keep","G__55964","frontend.handler.common/copy-to-clipboard-without-id-property!","frontend.state/set-copied-blocks","frontend.handler.editor/copy-block-refs","selected-blocks","p1__55965#","first-root-level-index","p__55966","vec__55967","cljs.core.map_indexed","cljs.core/vector","root-level","adjusted-blocks","p__55970","map__55971","index","cljs.core/deref","cljs.core/reset!","G__55972","copy-str","G__55973","p__55974","map__55975","pred__55976","expr__55977","clojure.string.join","frontend.handler.editor/copy-block-embeds","p1__55979#","ids-str","G__55980","frontend.handler.editor/get-selected-toplevel-block-uuids","p1__55981#","blocks*","G__55982","frontend.handler.editor/cut-selection-blocks","copy?","p1__55983#","lookup-refs","G__55984","G__55985","G__55986","frontend.db/pull-many","frontend.state/set-copied-full-blocks","frontend.handler.editor/url-regex","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.handler.editor/extract-nearest-link-from-text","seq55989","G__55990","G__55991","self__5751__auto__","text","additional-patterns","vec__55992","page-pattern","block-pattern","tag-pattern","page-matches","frontend.util/re-pos","block-matches","tag-matches","additional-matches","p1__55987#","matches","match","cljs.core.sort_by","p__55995","vec__55996","start-pos","end-pos","cljs.core/>","p1__55988#","cljs.core/some","cljs.core/re-find","clojure.string/starts-with?","frontend.handler.editor/get-nearest-page-or-url","frontend.handler.editor.extract_nearest_link_from_text","frontend.handler.editor/get-nearest-page","frontend.handler.editor/follow-link-under-cursor!","js/window.open","page-name","frontend.db.model.get_redirect_page_name","frontend.state/clear-edit!","frontend.handler.editor/open-link-in-sidebar!","block?","frontend.util/uuid-string?","frontend.db/get-page","frontend.handler.editor/zoom-in!","frontend.state/editing?","G__55999","frontend.handler.route.redirect_to_page_BANG_","js/window.history.forward","frontend.handler.editor/zoom-out!","frontend.db/get-block-parent","G__56000","G__56001","js/window.history.back","frontend.handler.editor/cut-block!","G__56002","md-content","frontend.handler.editor/clear-last-selected-block!","frontend.state/drop-last-selection-block!","frontend.handler.editor/highlight-selection-area!","end-block","start-block","frontend.state/get-selection-start-block","frontend.util/get-nodes-between-two-nodes","frontend.util/get-direction-between-two-nodes","frontend.handler.editor/select-block-up-down","frontend.state/get-editing-block-dom-id","frontend.state/selection?","f","frontend.util/get-prev-block-non-collapsed","frontend.util/get-next-block-non-collapsed-skip","element","G__56003","frontend.state/conj-selection-block!","frontend.state/get-selection-direction","first-last","G__56004","G__56005","frontend.handler.editor/on-select-block","_event","frontend.handler.editor/save-block-aux!","G__56007","frontend.handler.editor/save-block!","p__56008","map__56009","block-or-uuid","frontend.db.model/query-block-by-uuid","frontend.handler.editor.save_block_BANG_","G__56010","G__56011","G__56013","p__56014","map__56015","frontend.handler.editor.save_current_block_BANG_","skip-properties?","frontend.state/editor-in-composition?","frontend.commands/*show-commands","frontend.commands/*show-block-commands","frontend.state/get-editor-show-page-search?","frontend.state/get-editor-show-page-search-hashtag?","frontend.state/get-editor-show-block-search?","frontend.state/get-editor-show-date-picker?","frontend.state/get-editor-show-template-search?","frontend.state/get-editor-show-input","e56016","db-block","G__56017","elem","db-content","db-content-without-heading","logseq.graph_parser.util.safe_subs","frontend.db.model/top-block?","frontend.util.thingatpt.properties_at_point","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.editor/clean-content!","logseq.graph_parser.text.remove_level_spaces","frontend.util.property/remove-properties","p__56018","map__56019","frontend.handler.editor/insert-command!","command-output","restore?","option","frontend.commands/insert!","frontend.commands/handle-steps","cljs.core/fn?","s","restore-slash-caret-pos?","cljs.core/seq?","frontend.handler.editor/get-asset-file-link","url","file-name","image?","pdf?","G__56020","frontend.handler.editor/ensure-assets-dir!","repo-dir","frontend.config/get-repo-dir","assets-dir","promesa.core.then","frontend.fs/mkdir-if-not-exists","frontend.handler.editor/get-asset-path","filename","promesa.core.bind","___28360__auto__","p__56021","vec__56022","promesa.protocols/-promise","path","js/module$node_modules$path$path.join","frontend.mobile.util/native-android?","js/encodeURI","js/decodeURI","G__56027","frontend.handler.editor/save-assets!","files","p__56028","vec__56029","frontend.handler.editor.save_assets_BANG_","file-base","js/Date","dir","gen-filename","promesa.core/all","iter__5520__auto__","s__56033","cljs.core/LazySeq","c__5518__auto__","size__5519__auto__","b__56035","cljs.core/chunk-buffer","i__56034","vec__56036","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56032","vec__56043","cljs.core/cons","cljs.core/rest","file","vec__56039","vec__56046","G__56042","G__56049","frontend.util/node-path","ext","last-dot-index","frontend.util/electron?","from","p1__56025#","js/window.apis.copyFileToAssets","promesa.core/resolved","js/File","frontend.fs/write-file!","js/frontend.handler.editor.*assets-url-cache","frontend.handler.editor/*assets-url-cache","frontend.handler.editor/make-asset-url","frontend.mobile.util/native-platform?","frontend.mobile.util/convert-file-src","handle-path","cached-url","handle","frontend.idb/get-item","js/URL.createObjectURL","cljs.core.swap_BANG_","cljs.core/assoc","p__56050","map__56051","frontend.handler.editor/delete-asset-of-block!","href","full-text","local?","delete-local?","frontend.fs/unlink!","frontend.config/get-repo-path","frontend.handler.editor/resolve-relative-path","file-path","current-file","frontend.db.model/get-block-file-path","G__56052","G__56053","G__56054","frontend.config/get-pages-directory","frontend.util/get-relative-path","frontend.handler.editor/upload-asset","uploading?","drop-or-paste?","frontend.config/local-db?","cljs.core.js__GT_clj","res","vec__56055","asset-file-name","full-file-path","frontend.util/ext-of-image?","frontend.state.get_editor_command_trigger","promesa.core.finally$","frontend.image/upload","file-type","frontend.handler.image/request-presigned-url","signed-url","e","process","frontend.handler.editor/autopair-map","frontend.handler.editor/reversed-autopair-map","frontend.handler.editor/autopair-when-selected","frontend.handler.editor/delete-map","frontend.handler.editor/autopair","_format","_option","selected","frontend.util/get-selected-text","vec__56058","_pos","frontend.commands/simple-replace!","prefix-pos","G__56061","frontend.commands/handle-step","frontend.commands/*slash-caret-pos","frontend.util.cursor.get_caret_pos","frontend.handler.editor/surround-by?","before","logseq.graph-parser.text/surround-by?","frontend.handler.editor/wrapped-by?","logseq.graph-parser.text/wrapped-by?","frontend.handler.editor/get-matched-pages","q","editing-page","pages","frontend.search.page_search","p","frontend.handler.editor/get-matched-blocks","block-parents","G__56062","G__56063","G__56064","frontend.db/get-block-parents","cljs.core.comp","cljs.core/str","current-and-parents","clojure.set.union","result","frontend.search/block-search","h","frontend.handler.editor/get-matched-templates","frontend.search.template_search","frontend.handler.editor/get-matched-commands","e56065","edit-content","last-slash-caret-pos","last-command","frontend.util/nth-safe","frontend.commands/*initial-commands","frontend.commands.get_matched_commands","js/console.error","frontend.handler.editor/get-matched-block-commands","e56066","frontend.commands/*angle-bracket-caret-pos","frontend.commands/block-commands-map","_error","frontend.handler.editor/auto-complete?","frontend.handler.editor/get-current-input-char","frontend.handler.editor/move-up-down","up?","event","frontend.util/stop","edit-block-id","move-nodes","*transaction-data*-orig-val__56067","*transaction-data*-temp-val__56068","frontend.modules.outliner.core/move-blocks-up-down!","block-node","G__56069","frontend.util/scroll-editor-cursor","frontend.state/get-selection-block-ids","G__56070","G__56071","G__56072","frontend.handler.editor/get-selected-ordered-blocks","G__56073","G__56074","G__56075","frontend.handler.editor/on-tab","*transaction-data*-orig-val__56076","*transaction-data*-temp-val__56077","frontend.modules.outliner.core/indent-outdent-blocks!","frontend.handler.editor/get-link","label","G__56078","frontend.handler.editor/get-image-link","G__56079","frontend.util/format","frontend.handler.editor/handle-command-input","command","G__56080","map__56081","map__56082","frontend.state/set-editor-show-input!","saved-cursor","frontend.handler.editor/get-search-q","current-pos","frontend.state/sub","frontend.handler.editor/close-autocomplete-if-outside","between","clojure.string/includes?","frontend.state/set-editor-show-block-search!","frontend.state/set-editor-show-page-search!","frontend.state/set-editor-show-page-search-hashtag!","frontend.handler.editor/resize-image!","metadata","full_text","size","new-meta","image-part","clojure.string.split","new-full-text","cljs.core.pr_str","G__56083","frontend.handler.editor/mark-last-input-time!","frontend.state/set-editor-last-input-time!","frontend.util/time-ms","frontend.db/clear-repo-persistent-job!","js/frontend.handler.editor.*auto-save-timeout","frontend.handler.editor/*auto-save-timeout","frontend.handler.editor/edit-box-on-change!","frontend.util/evalue","js/clearTimeout","frontend.state/input-idle?","frontend.handler.editor/handle-last-input","frontend.state/get-input","last-input-char","frontend.commands/angle-bracket","frontend.handler.editor/block-on-chosen-handler","_input","chosen","_click?","uuid-string","frontend.util/replace-first","frontend.handler.editor/block-non-exist-handler","frontend.util.cursor.move_cursor_forward","frontend.handler.editor/paste-block-cleanup","exclude-properties","content-update-fn","G__56084","frontend.handler.editor/edit-last-block-after-inserted!","last-block'","G__56085","p__56086","map__56087","frontend.handler.editor/paste-blocks","target-block","G__56088","G__56089","G__56090","G__56091","G__56092","*transaction-data*-orig-val__56093","*transaction-data*-temp-val__56094","blocks'","frontend.handler.editor/block-tree->blocks","tree-vec","frontend.modules.outliner.core.tree_vec_flatten","props","content*","frontend.format.block/extract-blocks","fst-block","frontend.handler.editor/insert-block-tree-after-target","target-block-id","logseq.graph-parser.block/with-parent-and-left","G__56096","frontend.handler.editor/insert-template!","p__56097","map__56098","element-id","db-id","frontend.handler.editor.insert_template_BANG_","target","cljs.core/integer?","frontend.db.model/get-template-by-name","template-including-parent?","frontend.db/get-block-and-children","root-block","blocks-exclude-root","b","sorted-blocks","frontend.modules.outliner.tree/sort-blocks","cljs.core.drop","frontend.template/resolve-dynamic-template!","G__56099","sibling?'","G__56100","*transaction-data*-orig-val__56101","*transaction-data*-temp-val__56102","frontend.handler.editor/template-on-chosen-handler","p__56103","vec__56104","_template","p__56107","map__56108","map__56109","frontend.handler.editor/parent-is-page?","parent","frontend.modules.outliner.tree/satisfied-inode?","frontend.handler.editor/outdent-on-enter","parent-node","frontend.modules.outliner.tree/-get-parent","*transaction-data*-orig-val__56110","*transaction-data*-temp-val__56111","frontend.modules.outliner.core/move-blocks!","p__56112","map__56113","frontend.handler.editor/last-top-level-child?","current-node","entity","id'","G__56114","G__56115","frontend.modules.outliner.tree/-get-parent-id","frontend.handler.editor/insert","insertion","selected-start","selected-end","s1","s2","frontend.handler.editor/keydown-new-line","frontend.handler.editor/dwim-in-properties","map__56116","property-key","frontend.util.thingatpt.property_key_at_point","org?","move-to-pos","G__56117","frontend.util.cursor/move-cursor-to-line-end","frontend.util.cursor.move_cursor_backward","frontend.util.cursor/move-cursor-to-end","frontend.util.property/property-key-exist?","G__56118","G__56119","G__56120","frontend.handler.editor/delete-and-update","frontend.util.cursor/line-beginning-pos","frontend.util.cursor/line-end-pos","frontend.util.property/goto-properties-end","p__56121","map__56122","frontend.handler.editor/toggle-list-checkbox","old-item-content","new-item-content","frontend.handler.editor/dwim-in-list","map__56123","item","frontend.util.thingatpt.list_item_at_point","map__56124","full-content","indent","bullet","checkbox","ordered","next-bullet","G__56125","G__56126","G__56127","after","cursor-in-item-content?","after-lists-str","lines","after-lists-str'","frontend.util.list/re-order-items","cursor'","frontend.handler.editor/toggle-list!","map__56133","G__56134","new-unordered-bullet","G__56135","map__56136","list-beginning-pos","frontend.util.list.list_beginning_pos","list-end-pos","frontend.util.list.list_end_pos","list","items","splitter-reg","items-without-bullet","p1__56128#","new-list","p1__56129#","p1__56130#","p2__56131#","index-of-current-item","numbers-length","p1__56132#","cljs.core.subvec","pos-diff","prev-item","frontend.util.list.get_prev_item","frontend.util.cursor/move-cursor-down","frontend.util.cursor/move-cursor-to-line-beginning","map__56137","current-bullet","frontend.handler.editor/toggle-page-reference-embed","parent-id","map__56138","page-ref-fn","bounds","backward-pos","frontend.commands/simple-insert!","map__56139","embed-ref","frontend.util.thingatpt.embed_macro_at_point","map__56140","raw-content","start","page-ref","frontend.util.thingatpt.page_ref_at_point","map__56141","frontend.handler.editor/toggle-block-reference-embed","map__56142","block-ref-fn","map__56143","frontend.util.thingatpt.block_ref_at_point","map__56144","frontend.handler.editor/keydown-new-block","map__56145","has-right?","frontend.modules.outliner.tree/-get-right","thing-at-point","frontend.util.thingatpt/get-setting","frontend.util.thingatpt.admonition_AMPERSAND_src_at_point","frontend.util.thingatpt.markup_at_point","frontend.util.cursor/beginning-of-line?","G__56146","right-bound","clojure.string.index_of","G__56147","frontend.state/into-code-editor-mode!","frontend.handler.editor/keydown-new-block-handler","frontend.state/doc-mode-enter-for-new-line?","frontend.handler.editor/keydown-new-line-handler","frontend.handler.editor/select-first-last","G__56148","frontend.util/get-blocks-noncollapse","G__56149","frontend.handler.editor/select-up-down","G__56150","frontend.util/get-next-block-non-collapsed","frontend.handler.editor/move-cross-boundrary-up-down","map__56151","line-pos","frontend.util/get-first-or-last-line-pos","G__56152","G__56153","new-id","new-uuid","G__56154","G__56155","G__56156","frontend.handler.editor/keydown-up-down-handler","down?","frontend.util.cursor/textarea-cursor-first-row?","frontend.util.cursor/textarea-cursor-last-row?","frontend.util.cursor/move-cursor-up","frontend.handler.editor/move-to-block-when-cross-boundrary","map__56157","G__56158","G__56159","G__56160","G__56161","frontend.handler.editor/keydown-arrow-handler","js/document.activeElement","left?","right?","frontend.util.cursor/start?","frontend.util.cursor/end?","frontend.util.safe_set_range_text_BANG_","frontend.handler.editor/delete-concat","right","frontend.modules.outliner.core/get-right-node","current-block-has-children?","G__56162","collapsed?","first-child","frontend.modules.outliner.tree/-get-down","G__56163","frontend.modules.outliner.tree/-get-id","G__56164","frontend.handler.editor/keydown-delete-handler","end?","frontend.handler.editor/keydown-backspace-handler","cut?","deleted","top-block?","root-block?","js/document.execCommand","frontend.commands/delete-pair!","frontend.mobile.util/native-ios?","frontend.util/safe-dec-current-pos-from-end","frontend.handler.editor/indent-outdent","indent?","map__56165","G__56166","frontend.state/set-editor-last-pos!","*transaction-data*-orig-val__56167","*transaction-data*-temp-val__56168","frontend.handler.editor/keydown-tab-handler","frontend.handler.editor/keydown-not-matched-handler","_key-code","ctrlKey","metaKey","hashtag?","frontend.util.event_is_composing_QMARK_","clojure.set.difference","frontend.util.keycode/left-square-brackets-keys","frontend.util.keycode/left-paren-keys","sym","frontend.handler.editor/keyup-handler","search-timeout","key-code","k","code","frontend.handler.editor.goog$module$goog$object.getValueByKeys","c","last-key-code","frontend.state/get-last-key-code","blank-selected?","is-processed?","non-enter-processed?","frontend.util.keycode/enter-code","frontend.state/state","orig-pos","square-pos","command-step","matched-commands","frontend.commands/*matched-commands","matched-block-commands","frontend.commands/*matched-block-commands","frontend.state/set-last-key-code!","frontend.handler.editor/editor-on-click!","frontend.handler.editor/editor-on-change!","timeout","frontend.handler.editor/paste-text-parseable","frontend.handler.editor/paste-segmented-text","paragraphs","updated-paragraphs","frontend.handler.editor/get-all-blocks-by-ids","G__56171","G__56172","frontend.handler.editor/wrap-macro-url","logseq.graph-parser.text/get-matched-video","frontend.handler.editor/paste-copied-blocks-or-text","copied-blocks","frontend.state/get-copied-blocks","copied-block-ids","copied-graph","*stop-event?","frontend.state/set-copied-full-blocks!","logseq.graph-parser.util/url?","logseq.graph-parser.text/block-ref?","logseq.graph-parser.text/get-block-ref","G__56173","ocr-56174","ocr-56175","ocr-56176","cljs.core/keyword-identical?","cljs.core.match/backtrack","e56200","e__43647__auto__","e56189","e56199","e56190","e56197","e56198","e56196","e56191","e56194","e56195","e56193","e56192","frontend.handler.editor/paste-text-in-one-block-at-point","js/module$frontend$utils.getClipText","clipboard-data","data","frontend.state/append-current-edit-content!","frontend.handler.editor/editor-on-paste!","frontend.state/set-state!","frontend.util.thingatpt.markdown_src_at_point","frontend.util.thingatpt.org_admonition_AMPERSAND_src_at_point","_handled","frontend.handler.editor/cut-blocks-and-clear-selections!","frontend.handler.editor/shortcut-copy-selection","frontend.handler.editor/shortcut-cut-selection","frontend.handler.editor/shortcut-delete-selection","frontend.handler.editor/copy-current-block-ref","p1__56201#","frontend.handler.editor/shortcut-copy","frontend.handler.editor/shortcut-cut","frontend.handler.editor/delete-selection","frontend.handler.editor/editor-delete","frontend.handler.editor/editor-backspace","frontend.handler.editor/shortcut-up-down","frontend.handler.editor/shortcut-select-up-down","vec__56202","anchor","cursor","G__56205","frontend.util/get-selection-direction","cursor-rect","frontend.util.cursor/textarea-cursor-rect-first-row?","frontend.util.cursor/textarea-cursor-rect-last-row?","frontend.util.cursor/select-up-down","frontend.handler.editor/open-selected-block!","G__56206","frontend.handler.editor/shortcut-left-right","frontend.handler.editor/clear-block-content!","frontend.handler.editor/kill-line-before!","frontend.util/kill-line-before!","frontend.handler.editor/kill-line-after!","frontend.util/kill-line-after!","frontend.handler.editor/beginning-of-block","frontend.handler.editor/end-of-block","frontend.handler.editor/cursor-forward-word","frontend.util.cursor/move-cursor-forward-by-word","frontend.handler.editor/cursor-backward-word","frontend.util.cursor/move-cursor-backward-by-word","frontend.handler.editor/backward-kill-word","frontend.util/backward-kill-word","frontend.handler.editor/forward-kill-word","frontend.util/forward-kill-word","frontend.handler.editor/block-with-title?","semantic?","G__56208","frontend.handler.editor/collapsable?","p__56209","map__56210","frontend.handler.editor.collapsable_QMARK_","frontend.db.model.has_children_QMARK_","frontend.state.get_config","p__56211","map__56212","frontend.handler.editor/all-blocks-with-level","collapse?","expanded?","incremental?","frontend.date/today","G__56213","G__56214","frontend.db/get-page-blocks-no-cache","frontend.modules.outliner.tree.blocks__GT_vec_tree","G__56215","root","find","clojure.walk/postwalk","cljs.core/tree-seq","G__56216","frontend.handler.editor/skip-collapsing-in-db?","frontend.handler.editor/set-blocks-collapsed!","*transaction-data*-orig-val__56225","*transaction-data*-temp-val__56226","seq__56217","chunk__56218","count__56219","i__56220","seq__56227","chunk__56228","count__56229","i__56230","G__56223","G__56224","G__56233","G__56234","current-value","frontend.handler.editor/collapse-block!","frontend.state/set-collapsed-block!","frontend.handler.editor/expand-block!","G__56236","frontend.handler.editor/expand!","frontend.handler.editor.expand_BANG_","clear-selection?","dom","cljs.core.doall","blocks-with-level","max-level","cljs.core/max","blocks-to-expand","cljs.core/empty?","seq__56237","chunk__56238","count__56239","i__56240","map__56243","map__56244","G__56246","frontend.handler.editor/collapse!","frontend.handler.editor.collapse_BANG_","blocks-to-collapse","seq__56255","chunk__56256","count__56257","i__56258","map__56261","map__56262","G__56264","frontend.handler.editor/collapse-all!","frontend.handler.editor.collapse_all_BANG_","G__56266","frontend.handler.editor/expand-all!","frontend.handler.editor.expand_all_BANG_","frontend.handler.editor/toggle-open!","all-expanded?","frontend.handler.editor/select-all-blocks!","current-input-id","blocks-container","frontend.util/rec-get-blocks-container","goog.dom/getElementByClass","G__56268","frontend.handler.editor/escape-editing","frontend.handler.editor.escape_editing","select?","frontend.handler.editor/replace-block-reference-with-content-at-point","map__56269","frontend.util.thingatpt/block-ref-at-point","G__56270","block-content","block-content-without-prop","current-block-content","block-content*","frontend.state/set-block-content-and-last-pos!","frontend.handler.editor/copy-current-ref","frontend.handler.editor/delete-current-ref!","ref-id","cljs.core/re-pattern","frontend.handler.editor/replace-ref-with-text!","ref-block","G__56271","block-ref-content","frontend.handler.editor/replace-ref-with-embed!","frontend.handler.editor/block-default-collapsed?","frontend.state/get-ref-open-blocks-level","G__56272"],"sourcesContent":["(ns frontend.handler.editor\n  (:require [\"/frontend/utils\" :as utils]\n            [\"path\" :as path]\n            [cljs.core.match :refer [match]]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as w]\n            [dommy.core :as dom]\n            [frontend.commands :as commands\n             :refer [*angle-bracket-caret-pos\n                     *show-block-commands *show-commands\n                     *slash-caret-pos]]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.model :as db-model]\n            [frontend.db.utils :as db-utils]\n            [frontend.diff :as diff]\n            [frontend.format.block :as block]\n            [frontend.format.mldoc :as mldoc]\n            [frontend.fs :as fs]\n            [frontend.handler.block :as block-handler]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.export :as export]\n            [frontend.handler.image :as image-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.repeated :as repeated]\n            [frontend.handler.route :as route-handler]\n            [frontend.idb :as idb]\n            [frontend.image :as image]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.transaction :as outliner-tx]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.template :as template]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.utf8 :as utf8]\n            [frontend.util :as util :refer [profile]]\n            [frontend.util.clock :as clock]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.drawer :as drawer]\n            [frontend.util.keycode :as keycode]\n            [frontend.util.list :as list]\n            [frontend.util.marker :as marker]\n            [frontend.util.priority :as priority]\n            [frontend.util.property :as property]\n            [frontend.util.thingatpt :as thingatpt]\n            [goog.dom :as gdom]\n            [goog.dom.classes :as gdom-classes]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.block :as gp-block]))\n\n;; FIXME: should support multiple images concurrently uploading\n\n(defonce *asset-uploading? (atom false))\n(defonce *asset-uploading-process (atom 0))\n(defonce *selected-text (atom nil))\n\n(defn- get-selection-and-format\n  []\n  (when-let [block (state/get-edit-block)]\n    (when (:block/uuid block)\n      (when-let [edit-id (state/get-edit-input-id)]\n        (when-let [input (gdom/getElement edit-id)]\n          (let [selection-start (util/get-selection-start input)\n                selection-end (util/get-selection-end input)\n                value (gobj/get input \"value\")\n                selection (when (not= selection-start selection-end)\n                            (subs value selection-start selection-end))\n                selection-start (+ selection-start\n                                   (count (take-while #(= \" \" %) selection)))\n                selection-end (- selection-end\n                                 (count (take-while #(= \" \" %) (reverse selection))))]\n            {:selection-start selection-start\n             :selection-end selection-end\n             :selection (some-> selection\n                                string/trim)\n             :format (:block/format block)\n             :value value\n             :block block\n             :edit-id edit-id\n             :input input}))))))\n\n(defn- format-text!\n  [pattern-fn]\n  (when-let [m (get-selection-and-format)]\n    (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n          pattern (pattern-fn format)\n          pattern-count (count pattern)\n          pattern-prefix (subs value (max 0 (- selection-start pattern-count)) selection-start)\n          pattern-suffix (subs value selection-end (min (count value) (+ selection-end pattern-count)))\n          already-wrapped? (= pattern pattern-prefix pattern-suffix)\n          prefix (if already-wrapped?\n                   (subs value 0 (- selection-start pattern-count))\n                   (subs value 0 selection-start))\n          postfix (if already-wrapped?\n                    (subs value (+ selection-end pattern-count))\n                    (subs value selection-end))\n          inner-value (cond-> selection\n                        (not already-wrapped?)\n                        (#(str pattern % pattern)))\n          new-value (str prefix inner-value postfix)]\n      (state/set-edit-content! edit-id new-value)\n      (cond\n        already-wrapped? (cursor/set-selection-to input (- selection-start pattern-count) (- selection-end pattern-count))\n        selection (cursor/move-cursor-to input (+ selection-end pattern-count))\n        :else (cursor/set-selection-to input (+ selection-start pattern-count) (+ selection-end pattern-count))))))\n\n(defn bold-format! []\n  (format-text! config/get-bold))\n\n(defn italics-format! []\n  (format-text! config/get-italic))\n\n(defn highlight-format! []\n  (when-let [block (state/get-edit-block)]\n    (let [format (:block/format block)]\n      (format-text! #(config/get-highlight format)))))\n\n(defn strike-through-format! []\n  (format-text! config/get-strike-through))\n\n(defn html-link-format!\n  ([]\n   (html-link-format! nil))\n  ([link]\n   (when-let [m (get-selection-and-format)]\n     (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n           cur-pos (cursor/pos input)\n           empty-selection? (= selection-start selection-end)\n           selection-link? (and selection (or (util/starts-with? selection \"http://\")\n                                              (util/starts-with? selection \"https://\")))\n           [content forward-pos] (cond\n                                   empty-selection?\n                                   (config/get-empty-link-and-forward-pos format)\n\n                                   link\n                                   (config/with-label-link format selection link)\n\n                                   selection-link?\n                                   (config/with-default-link format selection)\n\n                                   :else\n                                   (config/with-default-label format selection))\n           new-value (str\n                      (subs value 0 selection-start)\n                      content\n                      (subs value selection-end))\n           cur-pos (or selection-start cur-pos)]\n       (state/set-edit-content! edit-id new-value)\n       (cursor/move-cursor-to input (+ cur-pos forward-pos))))))\n\n(defn open-block-in-sidebar!\n  [block-id]\n  (when block-id\n    (when-let [block (db/entity [:block/uuid block-id])]\n      (let [page? (nil? (:block/page block))]\n        (state/sidebar-add-block!\n         (state/get-current-repo)\n         (:db/id block)\n         (if page? :page :block))))))\n\n(defn reset-cursor-range!\n  [node]\n  (when node\n    (state/set-cursor-range! (util/caret-range node))))\n\n(defn restore-cursor-pos!\n  [id markup]\n  (when-let [node (gdom/getElement (str id))]\n    (let [cursor-range (state/get-cursor-range)\n          pos (or (state/get-editor-last-pos)\n                  (and cursor-range\n                       (diff/find-position markup cursor-range)))]\n      (cursor/move-cursor-to node pos)\n      (state/clear-editor-last-pos!))))\n\n(defn highlight-block!\n  [block-uuid]\n  (let [blocks (array-seq (js/document.getElementsByClassName (str block-uuid)))]\n    (doseq [block blocks]\n      (dom/add-class! block \"block-highlight\"))))\n\n(defn unhighlight-blocks!\n  []\n  (let [blocks (some->> (array-seq (js/document.getElementsByClassName \"block-highlight\"))\n                        (repeat 2)\n                        (apply concat))]\n    (doseq [block blocks]\n      (gdom-classes/remove block \"block-highlight\"))))\n\n(defn- get-edit-input-id-with-block-id\n  [block-id]\n  (when-let [first-block (util/get-first-block-by-id block-id)]\n    (string/replace (gobj/get first-block \"id\")\n                    \"ls-block\"\n                    \"edit-block\")))\n\n(defn clear-selection!\n  []\n  (util/select-unhighlight! (dom/by-class \"selected\"))\n  (state/clear-selection!))\n\n(defn- text-range-by-lst-fst-line [content [direction pos]]\n  (case direction\n    :up\n    (let [last-new-line (or (string/last-index-of content \\newline) -1)\n          end (+ last-new-line pos 1)]\n      (subs content 0 end))\n    :down\n    (-> (string/split-lines content)\n        first\n        (or \"\")\n        (subs 0 pos))))\n\n;; id: block dom id, \"ls-block-counter-uuid\"\n(defn edit-block!\n  ([block pos id]\n   (edit-block! block pos id nil))\n  ([block pos id {:keys [custom-content tail-len move-cursor?]\n                  :or {tail-len 0\n                       move-cursor? true}}]\n   (when-not config/publishing?\n     (when-let [block-id (:block/uuid block)]\n       (let [block (or (db/pull [:block/uuid block-id]) block)\n             edit-input-id (if (uuid? id)\n                             (get-edit-input-id-with-block-id id)\n                             (-> (str (subs id 0 (- (count id) 36)) block-id)\n                                 (string/replace \"ls-block\" \"edit-block\")))\n             content (or custom-content (:block/content block) \"\")\n             content-length (count content)\n             text-range (cond\n                          (vector? pos)\n                          (text-range-by-lst-fst-line content pos)\n\n                          (and (> tail-len 0) (>= (count content) tail-len))\n                          (subs content 0 (- (count content) tail-len))\n\n                          (or (= :max pos) (<= content-length pos))\n                          content\n\n                          :else\n                          (subs content 0 pos))\n             content (-> (property/remove-built-in-properties (:block/format block)\n                                                              content)\n                         (drawer/remove-logbook))]\n         (clear-selection!)\n         (state/set-editing! edit-input-id content block text-range move-cursor?))))))\n\n(defn- another-block-with-same-id-exists?\n  [current-id block-id]\n  (when-let [id (and (string? block-id) (parse-uuid block-id))]\n    (and (not= current-id id)\n         (db/entity [:block/uuid id]))))\n\n(defn- attach-page-properties-if-exists!\n  [block]\n  (if (and (:block/pre-block? block)\n           (seq (:block/properties block)))\n    (let [page-properties (:block/properties block)\n          str->page (fn [n] (block/page-name->map n true))\n          refs (->> page-properties\n                    (filter (fn [[_ v]] (coll? v)))\n                    (vals)\n                    (apply concat)\n                    (set)\n                    (map str->page)\n                    (concat (:block/refs block))\n                    (util/distinct-by :block/name))\n          {:keys [tags alias]} page-properties\n          page-tx (let [id (:db/id (:block/page block))\n                        retract-attributes (when id\n                                             (mapv (fn [attribute]\n                                                     [:db/retract id attribute])\n                                                   [:block/properties :block/tags :block/alias]))\n                        tags (->> (map str->page tags) (remove nil?))\n                        alias (->> (map str->page alias) (remove nil?))\n                        tx (cond-> {:db/id id\n                                    :block/properties page-properties}\n                             (seq tags)\n                             (assoc :block/tags tags)\n                             (seq alias)\n                             (assoc :block/alias alias))]\n                    (conj retract-attributes tx))]\n      (assoc block\n             :block/refs refs\n             :db/other-tx page-tx))\n    block))\n\n(defn- remove-non-existed-refs!\n  [refs]\n  (remove (fn [x] (or\n                   (and (vector? x)\n                        (= :block/uuid (first x))\n                        (nil? (db/entity x)))\n                   (nil? x))) refs))\n\n(defn- with-marker-time\n  [content block format new-marker old-marker]\n  (if (and (state/enable-timetracking?) new-marker)\n    (try\n      (let [logbook-exists? (and (:block/body block) (drawer/get-logbook (:block/body block)))\n            new-marker (string/trim (string/lower-case (name new-marker)))\n            old-marker (when old-marker (string/trim (string/lower-case (name old-marker))))\n            new-content (cond\n                          (or (and (nil? old-marker) (or (= new-marker \"doing\")\n                                                         (= new-marker \"now\")))\n                              (and (= old-marker \"todo\") (= new-marker \"doing\"))\n                              (and (= old-marker \"later\") (= new-marker \"now\"))\n                              (and (= old-marker new-marker \"now\") (not logbook-exists?))\n                              (and (= old-marker new-marker \"doing\") (not logbook-exists?)))\n                          (clock/clock-in format content)\n\n                          (or\n                           (and (= old-marker \"doing\") (= new-marker \"todo\"))\n                           (and (= old-marker \"now\") (= new-marker \"later\"))\n                           (and (contains? #{\"now\" \"doing\"} old-marker)\n                                (= new-marker \"done\")))\n                          (clock/clock-out format content)\n\n                          :else\n                          content)]\n        new-content)\n      (catch js/Error _e\n        content))\n    content))\n\n(defn- with-timetracking\n  [block value]\n  (if (and (state/enable-timetracking?)\n           (not= (:block/content block) value))\n    (let [format (:block/format block)\n          new-marker (last (util/safe-re-find (marker/marker-pattern format) (or value \"\")))\n          new-value (with-marker-time value block format\n                      new-marker\n                      (:block/marker block))]\n      new-value)\n    value))\n\n(defn wrap-parse-block\n  [{:block/keys [content format left page uuid level pre-block?] :as block}]\n  (let [block (or (and (:db/id block) (db/pull (:db/id block))) block)\n        block (merge block\n                     (block/parse-title-and-body uuid format pre-block? (:block/content block)))\n        properties (:block/properties block)\n        real-content (:block/content block)\n        content (if (and (seq properties) real-content (not= real-content content))\n                  (property/with-built-in-properties properties content format)\n                  content)\n        content (drawer/with-logbook block content)\n        content (with-timetracking block content)\n        first-block? (= left page)\n        ast (mldoc/->edn (string/trim content) (gp-mldoc/default-config format))\n        first-elem-type (first (ffirst ast))\n        first-elem-meta (second (ffirst ast))\n        properties? (contains? #{\"Property_Drawer\" \"Properties\"} first-elem-type)\n        markdown-heading? (and (= format :markdown)\n                               (= \"Heading\" first-elem-type)\n                               (nil? (:size first-elem-meta)))\n        block-with-title? (mldoc/block-with-title? first-elem-type)\n        content (string/triml content)\n        content (string/replace content (util/format \"((%s))\" (str uuid)) \"\")\n        [content content'] (cond\n                             (and first-block? properties?)\n                             [content content]\n\n                             markdown-heading?\n                             [content content]\n\n                             :else\n                             (let [content' (str (config/get-block-pattern format) (if block-with-title? \" \" \"\\n\") content)]\n                               [content content']))\n        block (assoc block\n                     :block/content content'\n                     :block/format format)\n        block (apply dissoc block (remove #{:block/pre-block?} db-schema/retract-attributes))\n        block (block/parse-block block)\n        block (if (and first-block? (:block/pre-block? block))\n                block\n                (dissoc block :block/pre-block?))\n        block (update block :block/refs remove-non-existed-refs!)\n        block (attach-page-properties-if-exists! block)\n        new-properties (merge\n                        (select-keys properties (property/built-in-properties))\n                        (:block/properties block))]\n    (-> block\n        (dissoc :block/top?\n                :block/bottom?)\n        (assoc :block/content content\n               :block/properties new-properties)\n        (merge (if level {:block/level level} {})))))\n\n(defn- save-block-inner!\n  [block value {}]\n  (let [block (assoc block :block/content value)\n        block (apply dissoc block db-schema/retract-attributes)]\n    (profile\n     \"Save block: \"\n     (let [block (wrap-parse-block block)]\n       (outliner-tx/transact!\n         {:outliner-op :save-block}\n         (outliner-core/save-block! block))\n\n       ;; sanitized page name changed\n       (when-let [title (get-in block [:block/properties :title])]\n         (when-let [old-page-name (:block/name (db/entity (:db/id (:block/page block))))]\n           (when (and (:block/pre-block? block)\n                      (not (string/blank? title))\n                      (not= (util/page-name-sanity-lc title) old-page-name))\n             (state/pub-event! [:page/title-property-changed old-page-name title]))))))))\n\n(defn save-block-if-changed!\n  ([block value]\n   (save-block-if-changed! block value nil))\n  ([block value\n    {:keys [force?]\n     :as opts}]\n   (let [{:block/keys [uuid page format repo content properties]} block\n         repo (or repo (state/get-current-repo))\n         format (or format (state/get-preferred-format))\n         page (db/entity repo (:db/id page))\n         block-id (when (map? properties) (get properties :id))\n         content (-> (property/remove-built-in-properties format content)\n                     (drawer/remove-logbook))]\n     (cond\n       (another-block-with-same-id-exists? uuid block-id)\n       (notification/show!\n        [:p.content\n         (util/format \"Block with the id %s already exists!\" block-id)]\n        :error)\n\n       force?\n       (save-block-inner! block value opts)\n\n       :else\n       (let [content-changed? (not= (string/trim content) (string/trim value))]\n         (when (and content-changed? page)\n           (save-block-inner! block value opts)))))))\n\n(defn- compute-fst-snd-block-text\n  [value pos]\n  (when (string? value)\n    (let [fst-block-text (subs value 0 pos)\n          snd-block-text (string/triml (subs value pos))]\n      [fst-block-text snd-block-text])))\n\n(declare save-current-block!)\n(defn outliner-insert-block!\n  [config current-block new-block {:keys [sibling? keep-uuid? replace-empty-target?]}]\n  (let [ref-query-top-block? (and (or (:ref? config)\n                                      (:custom-query? config))\n                                  (not (:ref-query-child? config)))\n        has-children? (db/has-children? (:block/uuid current-block))\n        sibling? (cond\n                   ref-query-top-block?\n                   false\n\n                   (boolean? sibling?)\n                   sibling?\n\n                   (util/collapsed? current-block)\n                   true\n\n                   :else\n                   (not has-children?))]\n    (outliner-tx/transact!\n      {:outliner-op :insert-blocks}\n      (save-current-block! {:current-block current-block})\n      (outliner-core/insert-blocks! [new-block] current-block {:sibling? sibling?\n                                                               :keep-uuid? keep-uuid?\n                                                               :replace-empty-target? replace-empty-target?}))))\n\n(defn- block-self-alone-when-insert?\n  [config uuid]\n  (let [current-page (state/get-current-page)\n        block-id (or (some-> (:id config) parse-uuid)\n                     (some-> current-page parse-uuid))]\n    (= uuid block-id)))\n\n(defn insert-new-block-before-block-aux!\n  [config block _value {:keys [ok-handler]}]\n  (let [new-m {:block/uuid (db/new-block-id)\n               :block/content \"\"}\n        prev-block (-> (merge (select-keys block [:block/parent :block/left :block/format\n                                                  :block/page :block/journal?]) new-m)\n                       (wrap-parse-block))\n        left-block (db/pull (:db/id (:block/left block)))]\n    (profile\n     \"outliner insert block\"\n     (let [sibling? (not= (:db/id left-block) (:db/id (:block/parent block)))]\n       (outliner-insert-block! config left-block prev-block {:sibling? sibling?\n                                                             :keep-uuid? true})))\n    (ok-handler prev-block)))\n\n(defn insert-new-block-aux!\n  [config\n   {:block/keys [uuid]\n    :as block}\n   value\n   {:keys [ok-handler]\n    :as _opts}]\n  (let [block-self? (block-self-alone-when-insert? config uuid)\n        input (gdom/getElement (state/get-edit-input-id))\n        pos (cursor/pos input)\n        [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n        current-block (assoc block :block/content fst-block-text)\n        current-block (apply dissoc current-block db-schema/retract-attributes)\n        current-block (wrap-parse-block current-block)\n        new-m {:block/uuid (db/new-block-id)\n               :block/content snd-block-text}\n        next-block (-> (merge (select-keys block [:block/parent :block/left :block/format\n                                                  :block/page :block/journal?]) new-m)\n                       (wrap-parse-block))\n        sibling? (when block-self? false)]\n    (outliner-insert-block! config current-block next-block {:sibling? sibling?\n                                                             :keep-uuid? true})\n    (util/set-change-value input fst-block-text)\n    (ok-handler next-block)))\n\n(defn clear-when-saved!\n  []\n  (state/clear-editor-show-state!)\n  (commands/restore-state true))\n\n(defn get-state\n  []\n  (let [[{:keys [on-hide block block-id block-parent-id format sidebar?]} id config] (state/get-editor-args)\n        node (gdom/getElement id)]\n    (when node\n      (let [value (gobj/get node \"value\")\n            pos (util/get-selection-start node)]\n        {:config config\n         :on-hide on-hide\n         :sidebar? sidebar?\n         :format format\n         :id id\n         :block (or (db/pull [:block/uuid (:block/uuid block)]) block)\n         :block-id block-id\n         :block-parent-id block-parent-id\n         :node node\n         :value value\n         :pos pos}))))\n\n(defn insert-new-block!\n  \"Won't save previous block content - remember to save!\"\n  ([state]\n   (insert-new-block! state nil))\n  ([_state block-value]\n   (when (and (not config/publishing?)\n              (not= :insert (state/get-editor-op)))\n     (state/set-editor-op! :insert)\n     (when-let [state (get-state)]\n       (let [{:keys [block value id config]} state\n             value (if (string? block-value) block-value value)\n             block-id (:block/uuid block)\n             block (or (db/pull [:block/uuid block-id])\n                       block)\n             block-self? (block-self-alone-when-insert? config block-id)\n             input (gdom/getElement (state/get-edit-input-id))\n             pos (cursor/pos input)\n             [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n             insert-fn (cond\n                         block-self?\n                         insert-new-block-aux!\n\n                         (and (string/blank? fst-block-text) (not (string/blank? snd-block-text)))\n                         insert-new-block-before-block-aux!\n\n                         :else\n                         insert-new-block-aux!)]\n         (insert-fn config block value\n                    {:ok-handler\n                     (fn [last-block]\n                       (clear-when-saved!)\n                       (edit-block! last-block 0 id))}))))\n   (state/set-editor-op! nil)))\n\n(defn api-insert-new-block!\n  [content {:keys [page block-uuid sibling? before? properties\n                   custom-uuid replace-empty-target? edit-block?]\n            :or {sibling? false\n                 before? false\n                 edit-block? true}}]\n  (when (or page block-uuid)\n    (let [before? (if page false before?)\n          sibling? (boolean sibling?)\n          sibling? (if before? true (if page false sibling?))\n          block (if page\n                  (db/entity [:block/name (util/page-name-sanity-lc page)])\n                  (db/entity [:block/uuid block-uuid]))]\n      (when block\n        (let [last-block (when (not sibling?)\n                           (let [children (:block/_parent block)\n                                 blocks (db/sort-by-left children block)\n                                 last-block-id (:db/id (last blocks))]\n                             (when last-block-id\n                               (db/pull last-block-id))))\n              format (or\n                      (:block/format block)\n                      (db/get-page-format (:db/id block))\n                      (state/get-preferred-format))\n              content (if (seq properties)\n                        (property/insert-properties format content properties)\n                        content)\n              new-block (-> (select-keys block [:block/page :block/journal?\n                                                :block/journal-day])\n                            (assoc :block/content content\n                                   :block/format format))\n              new-block (assoc new-block :block/page\n                               (if page\n                                 (:db/id block)\n                                 (:db/id (:block/page new-block))))\n              new-block (-> new-block\n                            (wrap-parse-block)\n                            (assoc :block/uuid (or custom-uuid (db/new-block-id))))\n              [block-m sibling?] (cond\n                                   before?\n                                   (let [first-child? (->> [:block/parent :block/left]\n                                                           (map #(:db/id (get block %)))\n                                                           (apply =))\n                                         block (db/pull (:db/id (:block/left block)))\n                                         sibling? (if (or first-child? ;; insert as first child\n                                                          (:block/name block))\n                                                    false sibling?)]\n                                     [block sibling?])\n\n                                   sibling?\n                                   [(db/pull (:db/id block)) sibling?]\n\n                                   last-block\n                                   [last-block true]\n\n                                   block\n                                   [(db/pull (:db/id block)) sibling?]\n\n                                   ;; FIXME: assert\n                                   :else\n                                   nil)]\n          (when block-m\n            (outliner-insert-block! {} block-m new-block {:sibling? sibling?\n                                                          :keep-uuid? true\n                                                          :replace-empty-target? replace-empty-target?})\n            (when edit-block?\n              (if (and replace-empty-target?\n                       (string/blank? (:block/content last-block)))\n                (js/setTimeout #(edit-block! last-block :max (:block/uuid last-block)) 10)\n                (js/setTimeout #(edit-block! new-block :max (:block/uuid new-block)) 10)))\n            new-block))))))\n\n(defn insert-first-page-block-if-not-exists!\n  ([page-title]\n   (insert-first-page-block-if-not-exists! page-title {}))\n  ([page-title opts]\n   (when (and (string? page-title)\n              (not (string/blank? page-title)))\n     (state/pub-event! [:page/create page-title opts]))))\n\n(defn properties-block\n  [properties format page]\n  (let [content (property/insert-properties format \"\" properties)\n        refs (gp-block/get-page-refs-from-properties properties\n                                                     (db/get-db (state/get-current-repo))\n                                                     (state/get-date-formatter))]\n    {:block/pre-block? true\n     :block/uuid (db/new-block-id)\n     :block/properties properties\n     :block/properties-order (keys properties)\n     :block/refs refs\n     :block/left page\n     :block/format format\n     :block/content content\n     :block/parent page\n     :block/page page}))\n\n(defn update-timestamps-content!\n  [{:block/keys [repeated? marker format] :as block} content]\n  (if repeated?\n    (let [scheduled-ast (block-handler/get-scheduled-ast block)\n          deadline-ast (block-handler/get-deadline-ast block)\n          content (some->> (filter repeated/repeated? [scheduled-ast deadline-ast])\n                           (map (fn [ts]\n                                  [(repeated/timestamp->text ts)\n                                   (repeated/next-timestamp-text ts)]))\n                           (reduce (fn [content [old new]]\n                                     (string/replace content old new))\n                                   content))\n          content (string/replace-first\n                   content marker\n                   (case marker\n                     \"DOING\"\n                     \"TODO\"\n\n                     \"NOW\"\n                     \"LATER\"\n\n                     marker))\n          content (clock/clock-out format content)\n          content (drawer/insert-drawer\n                   format content \"logbook\"\n                   (util/format (str (if (= :org format) \"-\" \"*\")\n                                     \" State \\\"DONE\\\" from \\\"%s\\\" [%s]\")\n                                marker\n                                (date/get-date-time-string-3)))]\n      content)\n    content))\n\n(defn check\n  [{:block/keys [marker content repeated? uuid] :as block}]\n  (let [new-content (string/replace-first content marker \"DONE\")\n        new-content (if repeated?\n                      (update-timestamps-content! block content)\n                      new-content)\n        input-id (state/get-edit-input-id)]\n    (if (and input-id\n             (string/ends-with? input-id (str uuid)))\n      (state/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn uncheck\n  [{:block/keys [content uuid] :as block}]\n  (let [marker (if (= :now (state/get-preferred-workflow))\n                 \"LATER\"\n                 \"TODO\")\n        new-content (string/replace-first content \"DONE\" marker)\n        input-id (state/get-edit-input-id)]\n    (if (and input-id\n             (string/ends-with? input-id (str uuid)))\n      (state/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn get-selected-blocks\n  []\n  (distinct (seq (state/get-selection-blocks))))\n\n(defn set-marker\n  \"The set-marker will set a new marker on the selected block.\n  if the `new-marker` is nil, it will generate it automatically.\"\n  ([block]\n   (set-marker block nil))\n  ([{:block/keys [marker content format] :as block} new-marker]\n   (let [[new-content _] (marker/cycle-marker content marker new-marker format (state/get-preferred-workflow))]\n     (save-block-if-changed! block new-content))))\n\n(defn cycle-todos!\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [ids (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))]\n      (doseq [id ids]\n        (let [block (db/pull [:block/uuid id])]\n          (set-marker block))))))\n\n(defn cycle-todo!\n  []\n  #_:clj-kondo/ignore\n  (if-let [blocks (seq (get-selected-blocks))]\n    (cycle-todos!)\n    (when (state/get-edit-block)\n      (let [edit-input-id (state/get-edit-input-id)\n            current-input (gdom/getElement edit-input-id)\n            content (state/get-edit-content)\n            format (or (db/get-page-format (state/get-current-page))\n                       (state/get-preferred-format))\n            [new-content marker] (marker/cycle-marker content nil nil format (state/get-preferred-workflow))\n            new-pos (commands/compute-pos-delta-when-change-marker\n                     content marker (cursor/pos current-input))]\n        (state/set-edit-content! edit-input-id new-content)\n        (cursor/move-cursor-to current-input new-pos)))))\n\n(defn set-priority\n  [{:block/keys [priority content] :as block} new-priority]\n  (let [new-content (string/replace-first content\n                                          (util/format \"[#%s]\" priority)\n                                          (util/format \"[#%s]\" new-priority))]\n    (save-block-if-changed! block new-content)))\n\n(defn cycle-priority!\n  []\n  (when (state/get-edit-block)\n    (let [format (or (db/get-page-format (state/get-current-page))\n                     (state/get-preferred-format))\n          input-id (state/get-edit-input-id)\n          content (state/get-edit-content)\n          new-priority (priority/cycle-priority-state content)\n          new-value (priority/add-or-update-priority content format new-priority)]\n      (state/set-edit-content! input-id new-value))))\n\n(defn delete-block-aux!\n  [{:block/keys [uuid repo] :as _block} children?]\n  (let [repo (or repo (state/get-current-repo))\n        block (db/pull repo '[*] [:block/uuid uuid])]\n    (when block\n      (outliner-tx/transact!\n        {:outliner-op :delete-blocks}\n        (outliner-core/delete-blocks! [block] {:children? children?})))))\n\n(defn- move-to-prev-block\n  [repo sibling-block format id value]\n  (when (and repo sibling-block)\n    (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n      (when-let [block (db/pull repo '[*] [:block/uuid (uuid sibling-block-id)])]\n        (let [original-content (util/trim-safe (:block/content block))\n              value' (-> (property/remove-built-in-properties format original-content)\n                         (drawer/remove-logbook))\n              new-value (str value' value)\n              tail-len (count value)\n              pos (max\n                   (if original-content\n                     (utf8/length (utf8/encode original-content))\n                     0)\n                   0)]\n          (edit-block! block pos id\n                       {:custom-content new-value\n                        :tail-len tail-len\n                        :move-cursor? false}))))))\n\n(defn delete-block!\n  ([repo]\n   (delete-block! repo true))\n  ([repo delete-children?]\n   (state/set-editor-op! :delete)\n   (let [{:keys [id block-id block-parent-id value format]} (get-state)]\n     (when block-id\n       (let [page-id (:db/id (:block/page (db/entity [:block/uuid block-id])))\n             page-blocks-count (and page-id (db/get-page-blocks-count repo page-id))]\n         (when (> page-blocks-count 1)\n           (let [block (db/entity [:block/uuid block-id])\n                 has-children? (seq (:block/_parent block))\n                 block (db/pull (:db/id block))\n                 left (tree/-get-left (outliner-core/block block))\n                 left-has-children? (and left\n                                         (when-let [block-id (:block/uuid (:data left))]\n                                           (let [block (db/entity [:block/uuid block-id])]\n                                             (seq (:block/_parent block)))))]\n             (when-not (and has-children? left-has-children?)\n               (when block-parent-id\n                 (let [block-parent (gdom/getElement block-parent-id)\n                       sibling-block (util/get-prev-block-non-collapsed-non-embed block-parent)]\n                   (delete-block-aux! block delete-children?)\n                   (move-to-prev-block repo sibling-block format id value)))))))))\n   (state/set-editor-op! nil)))\n\n(defn delete-blocks!\n  [repo block-uuids blocks dom-blocks]\n  (when (seq block-uuids)\n    (let [uuid->dom-block (zipmap block-uuids dom-blocks)\n          block (first blocks)\n          block-parent (get uuid->dom-block (:block/uuid block))\n          sibling-block (when block-parent (util/get-prev-block-non-collapsed-non-embed block-parent))]\n      (outliner-tx/transact!\n        {:outliner-op :delete-blocks}\n        (outliner-core/delete-blocks! blocks {}))\n      (when sibling-block\n        (move-to-prev-block repo sibling-block\n                            (:block/format block)\n                            (dom/attr sibling-block \"id\")\n                            \"\")))))\n\n(defn- batch-set-block-property!\n  \"col: a collection of [block-id property-key property-value].\"\n  [col]\n  #_:clj-kondo/ignore\n  (when-let [repo (state/get-current-repo)]\n    (outliner-tx/transact!\n      {:outliner-op :save-block}\n      (doseq [[block-id key value] col]\n        (let [block-id (if (string? block-id) (uuid block-id) block-id)]\n          (when-let [block (db/entity [:block/uuid block-id])]\n            (let [format (:block/format block)\n                  content (:block/content block)\n                  properties (:block/properties block)\n                  properties (if (nil? value)\n                               (dissoc properties key)\n                               (assoc properties key value))\n                  content (if (nil? value)\n                            (property/remove-property format key content)\n                            (property/insert-property format content key value))\n                  content (property/remove-empty-properties content)\n                  block {:block/uuid block-id\n                         :block/properties properties\n                         :block/content content}]\n              (outliner-core/save-block! block))))))\n\n    (let [block-id (ffirst col)\n          block-id (if (string? block-id) (uuid block-id) block-id)\n          input-pos (or (state/get-edit-pos) :max)]\n      ;; update editing input content\n      (when-let [editing-block (state/get-edit-block)]\n        (when (= (:block/uuid editing-block) block-id)\n          (edit-block! editing-block\n                       input-pos\n                       (state/get-edit-input-id)))))))\n\n(defn remove-block-property!\n  [block-id key]\n  (let [key (keyword key)]\n    (batch-set-block-property! [[block-id key nil]])))\n\n(defn set-block-property!\n  [block-id key value]\n  (let [key (keyword key)]\n    (batch-set-block-property! [[block-id key value]])))\n\n(defn set-block-query-properties!\n  [block-id all-properties key add?]\n  (when-let [block (db/entity [:block/uuid block-id])]\n    (let [query-properties (-> (get-in block [:block/properties :query-properties] \"\")\n                               (common-handler/safe-read-string \"Failed to parse query properties\"))\n          query-properties (if (seq query-properties)\n                             query-properties\n                             all-properties)\n          query-properties (if add?\n                             (distinct (conj query-properties key))\n                             (remove #{key} query-properties))\n          query-properties (vec query-properties)]\n      (if (seq query-properties)\n        (set-block-property! block-id :query-properties (str query-properties))\n        (remove-block-property! block-id :query-properties)))))\n\n(defn set-block-timestamp!\n  [block-id key value]\n  (let [key (string/lower-case key)\n        block-id (if (string? block-id) (uuid block-id) block-id)\n        key (string/lower-case (str key))\n        value (str value)]\n    (when-let [block (db/pull [:block/uuid block-id])]\n      (let [{:block/keys [content]} block\n            content (or content (state/get-edit-content))\n            new-content (-> (text/remove-timestamp content key)\n                            (text/add-timestamp key value))]\n        (when (not= content new-content)\n          (let [input-id (state/get-edit-input-id)]\n            (if (and input-id\n                     (string/ends-with? input-id (str block-id)))\n              (state/set-edit-content! input-id new-content)\n              (save-block-if-changed! block new-content))))))))\n\n(defn- set-blocks-id!\n  [block-ids]\n  (let [block-ids (remove nil? block-ids)\n        col (map (fn [block-id]\n                   (let [block (db/entity [:block/uuid block-id])]\n                     (when-not (:block/pre-block? block)\n                       [block-id :id (str block-id)])))\n                 block-ids)]\n    (batch-set-block-property! col)))\n\n(defn copy-block-ref!\n  ([block-id]\n   (copy-block-ref! block-id #(str %)))\n  ([block-id tap-clipboard]\n   (set-blocks-id! [block-id])\n   (util/copy-to-clipboard! (tap-clipboard block-id))))\n\n(defn select-block!\n  [block-uuid]\n  (let [blocks (js/document.getElementsByClassName (str block-uuid))]\n    (when (seq blocks)\n      (state/exit-editing-and-set-selected-blocks! blocks))))\n\n(defn- compose-copied-blocks-contents\n  [repo block-ids]\n  (let [blocks (db-utils/pull-many repo '[*] (mapv (fn [id] [:block/uuid id]) block-ids))\n        top-level-block-uuids (->> (outliner-core/get-top-level-blocks blocks)\n                                   (map :block/uuid))]\n    (export/export-blocks-as-markdown\n     repo top-level-block-uuids\n     (state/get-export-block-text-indent-style)\n     (into [] (state/get-export-block-text-remove-options)))))\n\n(defn copy-selection-blocks\n  []\n  (when-let [blocks (seq (state/get-selection-blocks))]\n    (let [repo (state/get-current-repo)\n          ids (distinct (keep #(when-let [id (dom/attr % \"blockid\")]\n                                 (uuid id)) blocks))\n          content (compose-copied-blocks-contents repo ids)\n          block (db/entity [:block/uuid (first ids)])]\n      (when block\n        (common-handler/copy-to-clipboard-without-id-property! (:block/format block) content)\n        (state/set-copied-blocks content ids)\n        (notification/show! \"Copied!\" :success)))))\n\n(defn copy-block-refs\n  []\n  (when-let [selected-blocks (seq (get-selected-blocks))]\n    (let [blocks (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                        (let [level (dom/attr % \"level\")]\n                                          {:id (uuid id)\n                                           :level (int level)}))\n                                     selected-blocks))\n                      (remove nil?))\n          first-block (first blocks)\n          first-root-level-index (ffirst\n                                  (filter (fn [[_ block]] (= (:level block) 1))\n                                          (map-indexed vector blocks)))\n          root-level (atom (:level first-block))\n          adjusted-blocks (map-indexed\n                           (fn [index {:keys [id level]}]\n                             {:id id\n                              :level (if (< index first-root-level-index)\n                                       (if (< level @root-level)\n                                         (do\n                                           (reset! root-level level)\n                                           1)\n                                         (inc (- level @root-level)))\n                                       level)})\n                           blocks)\n          block (db/pull [:block/uuid (:id first-block)])\n          copy-str (some->> adjusted-blocks\n                            (map (fn [{:keys [id level]}]\n                                   (condp = (:block/format block)\n                                     :org\n                                     (util/format (str (string/join (repeat level \"*\")) \" ((%s))\") id)\n                                     :markdown\n                                     (util/format (str (string/join (repeat (dec level) \"\\t\")) \"- ((%s))\") id))))\n                            (string/join \"\\n\\n\"))]\n      (set-blocks-id! (map :id blocks))\n      (util/copy-to-clipboard! copy-str))))\n\n(defn copy-block-embeds\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [ids (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))\n          ids-str (some->> ids\n                           (map (fn [id] (util/format \"{{embed ((%s))}}\" id)))\n                           (string/join \"\\n\\n\"))]\n      (set-blocks-id! ids)\n      (util/copy-to-clipboard! ids-str))))\n\n(defn get-selected-toplevel-block-uuids\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [repo (state/get-current-repo)\n          block-ids (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                           (uuid id)) blocks))\n                         (remove nil?))\n          blocks (db-utils/pull-many repo '[*] (mapv (fn [id] [:block/uuid id]) block-ids))\n          page-id (:db/id (:block/page (first blocks)))\n          ;; filter out blocks not belong to page with 'page-id'\n          blocks* (remove (fn [block] (some-> (:db/id (:block/page block)) (not= page-id))) blocks)]\n      (->> (outliner-core/get-top-level-blocks blocks*)\n           (map :block/uuid)))))\n\n(defn cut-selection-blocks\n  [copy?]\n  (when copy? (copy-selection-blocks))\n  (when-let [blocks (seq (get-selected-blocks))]\n    ;; remove embeds, references and queries\n    (let [dom-blocks (remove (fn [block]\n                           (or (= \"true\" (dom/attr block \"data-transclude\"))\n                               (= \"true\" (dom/attr block \"data-query\")))) blocks)]\n      (when (seq dom-blocks)\n        (let [repo (state/get-current-repo)\n              block-uuids (distinct (map #(uuid (dom/attr % \"blockid\")) dom-blocks))\n              lookup-refs (map (fn [id] [:block/uuid id]) block-uuids)\n              blocks (db/pull-many repo '[*] lookup-refs)]\n          (state/set-copied-full-blocks nil blocks)\n          (delete-blocks! repo block-uuids blocks dom-blocks))))))\n\n(def url-regex\n  \"Didn't use link/plain-link as it is incorrectly detects words as urls.\"\n  #\"[^\\s\\(\\[]+://[^\\s\\)\\]]+\")\n\n(defn extract-nearest-link-from-text\n  [text pos & additional-patterns]\n  (let [page-pattern #\"\\[\\[([^\\]]+)]]\"\n        block-pattern #\"\\(\\(([^\\)]+)\\)\\)\"\n        tag-pattern #\"#\\S+\"\n        page-matches (util/re-pos page-pattern text)\n        block-matches (util/re-pos block-pattern text)\n        tag-matches (util/re-pos tag-pattern text)\n        additional-matches (mapcat #(util/re-pos % text) additional-patterns)\n        matches (->> (concat page-matches block-matches tag-matches additional-matches)\n                     (remove nil?))\n        [_ match] (first (sort-by\n                          (fn [[start-pos content]]\n                            (let [end-pos (+ start-pos (count content))]\n                              (cond\n                                (< pos start-pos)\n                                (- pos start-pos)\n\n                                (> pos end-pos)\n                                (- end-pos pos)\n\n                                :else\n                                0)))\n                          >\n                          matches))]\n    (when match\n      (cond\n        (some #(re-find % match) additional-patterns)\n        match\n        (string/starts-with? match \"#\")\n        (subs match 1 (count match))\n        :else\n        (subs match 2 (- (count match) 2))))))\n\n(defn- get-nearest-page-or-url\n  \"Return the nearest page-name (not dereferenced, may be an alias), block, tag or url\"\n  []\n  (when-let [block (state/get-edit-block)]\n    (when (:block/uuid block)\n      (when-let [edit-id (state/get-edit-input-id)]\n        (when-let [input (gdom/getElement edit-id)]\n          (when-let [pos (cursor/pos input)]\n            (let [value (gobj/get input \"value\")]\n              (extract-nearest-link-from-text value pos url-regex))))))))\n\n(defn- get-nearest-page\n  \"Return the nearest page-name (not dereferenced, may be an alias), block or tag\"\n  []\n  (when-let [block (state/get-edit-block)]\n    (when (:block/uuid block)\n      (when-let [edit-id (state/get-edit-input-id)]\n        (when-let [input (gdom/getElement edit-id)]\n          (when-let [pos (cursor/pos input)]\n            (let [value (gobj/get input \"value\")]\n              (extract-nearest-link-from-text value pos))))))))\n\n(defn follow-link-under-cursor!\n  []\n  (when-let [page (get-nearest-page-or-url)]\n    (when-not (string/blank? page)\n      (if (re-find url-regex page)\n        (js/window.open page)\n        (let [page-name (db-model/get-redirect-page-name page)]\n          (state/clear-edit!)\n          (insert-first-page-block-if-not-exists! page-name))))))\n\n(defn open-link-in-sidebar!\n  []\n  (when-let [page (get-nearest-page)]\n    (let [page-name (string/lower-case page)\n          block? (util/uuid-string? page-name)]\n      (when-let [page (db/get-page page-name)]\n        (if block?\n          (state/sidebar-add-block!\n           (state/get-current-repo)\n           (:db/id page)\n           :block)\n          (state/sidebar-add-block!\n           (state/get-current-repo)\n           (:db/id page)\n           :page))))))\n\n(defn zoom-in! []\n  (if (state/editing?)\n    (when-let [id (some-> (state/get-edit-block)\n                          :block/uuid\n                          ((fn [id] [:block/uuid id]))\n                          db/entity\n                          :block/uuid)]\n      (let [pos (state/get-edit-pos)]\n        (route-handler/redirect-to-page! id)\n        (js/setTimeout #(edit-block! {:block/uuid id} pos id) 0)))\n    (js/window.history.forward)))\n\n(defn zoom-out!\n  []\n  (if (state/editing?)\n    (let [page (state/get-current-page)\n          block-id (and (string? page) (parse-uuid page))]\n      (when block-id\n        (let [block-parent (db/get-block-parent block-id)]\n          (if-let [id (and\n                       (nil? (:block/name block-parent))\n                       (:block/uuid block-parent))]\n            (do\n              (route-handler/redirect-to-page! id)\n              (js/setTimeout #(edit-block! {:block/uuid block-id} :max block-id) 0))\n            (let [page-id (some-> (db/entity [:block/uuid block-id])\n                                  :block/page\n                                  :db/id)]\n\n              (when-let [page-name (:block/name (db/entity page-id))]\n                (route-handler/redirect-to-page! page-name)\n                (js/setTimeout #(edit-block! {:block/uuid block-id} :max block-id) 0)))))))\n    (js/window.history.back)))\n\n(defn cut-block!\n  [block-id]\n  (when-let [block (db/pull [:block/uuid block-id])]\n    (let [repo (state/get-current-repo)\n          ;; TODO: support org mode\n          md-content (compose-copied-blocks-contents repo [block-id])]\n      (state/set-copied-full-blocks md-content [block])\n      (common-handler/copy-to-clipboard-without-id-property! (:block/format block) md-content)\n      (delete-block-aux! block true))))\n\n(defn clear-last-selected-block!\n  []\n  (let [block (state/drop-last-selection-block!)]\n    (util/select-unhighlight! [block])))\n\n(defn highlight-selection-area!\n  [end-block]\n  (when-let [start-block (state/get-selection-start-block)]\n    (let [blocks (util/get-nodes-between-two-nodes start-block end-block \"ls-block\")\n          direction (util/get-direction-between-two-nodes start-block end-block \"ls-block\")\n\n          blocks (if (= :up direction)\n                   (reverse blocks)\n                   blocks)]\n      (state/exit-editing-and-set-selected-blocks! blocks direction))))\n\n(defn- select-block-up-down\n  [direction]\n  (cond\n      ;; when editing, quit editing and select current block\n    (state/editing?)\n    (state/exit-editing-and-set-selected-blocks! [(gdom/getElement (state/get-editing-block-dom-id))])\n\n      ;; when selection and one block selected, select next block\n    (and (state/selection?) (== 1 (count (state/get-selection-blocks))))\n    (let [f (if (= :up direction) util/get-prev-block-non-collapsed util/get-next-block-non-collapsed-skip)\n          element (f (first (state/get-selection-blocks)))]\n      (when element\n        (state/conj-selection-block! element direction)))\n\n      ;; if same direction, keep conj on same direction\n    (and (state/selection?) (= direction (state/get-selection-direction)))\n    (let [f (if (= :up direction) util/get-prev-block-non-collapsed util/get-next-block-non-collapsed-skip)\n          first-last (if (= :up direction) first last)\n          element (f (first-last (state/get-selection-blocks)))]\n      (when element\n        (state/conj-selection-block! element direction)))\n\n      ;; if different direction, keep clear until one left\n    (state/selection?)\n    (clear-last-selected-block!)))\n\n(defn on-select-block\n  [direction]\n  (fn [_event]\n    (select-block-up-down direction)))\n\n(defn save-block-aux!\n  [block value opts]\n  (let [value (string/trim value)]\n    ;; FIXME: somehow frontend.components.editor's will-unmount event will loop forever\n    ;; maybe we shouldn't save the block/file in \"will-unmount\" event?\n    (save-block-if-changed! block value\n                            (merge\n                             {:init-properties (:block/properties block)}\n                             opts))))\n\n(defn save-block!\n  ([repo block-or-uuid content]\n   (let [block (if (or (uuid? block-or-uuid)\n                       (string? block-or-uuid))\n                 (db-model/query-block-by-uuid block-or-uuid) block-or-uuid)\n         format (:block/format block)]\n     (save-block! {:block block :repo repo :format format} content)))\n  ([{:keys [block repo] :as _state} value]\n   (when (:db/id (db/entity repo [:block/uuid (:block/uuid block)]))\n     (save-block-aux! block value {}))))\n\n(defn save-current-block!\n  \"skip-properties? if set true, when editing block is likely be properties, skip saving\"\n  ([]\n   (save-current-block! {}))\n  ([{:keys [force? skip-properties? current-block] :as opts}]\n   ;; non English input method\n   (when-not (state/editor-in-composition?)\n     (when (state/get-current-repo)\n       (when (and (not @commands/*show-commands)\n                  (not @commands/*show-block-commands)\n                  (not (state/get-editor-show-page-search?))\n                  (not (state/get-editor-show-page-search-hashtag?))\n                  (not (state/get-editor-show-block-search?))\n                  (not (state/get-editor-show-date-picker?))\n                  (not (state/get-editor-show-template-search?))\n                  (not (state/get-editor-show-input)))\n         (try\n           (let [input-id (state/get-edit-input-id)\n                 block (state/get-edit-block)\n                 db-block (when-let [block-id (:block/uuid block)]\n                            (db/pull [:block/uuid block-id]))\n                 elem (and input-id (gdom/getElement input-id))\n                 db-content (:block/content db-block)\n                 db-content-without-heading (and db-content\n                                                 (gp-util/safe-subs db-content (:block/level db-block)))\n                 value (if (= (:block/uuid current-block) (:block/uuid block))\n                         (:block/content current-block)\n                         (and elem (gobj/get elem \"value\")))]\n             (when value\n               (cond\n                 force?\n                 (save-block-aux! db-block value opts)\n\n                 (and skip-properties?\n                      (db-model/top-block? block)\n                      (when elem (thingatpt/properties-at-point elem)))\n                 nil\n\n                 (and block value db-content-without-heading\n                      (not= (string/trim db-content-without-heading)\n                            (string/trim value)))\n                 (save-block-aux! db-block value opts))))\n           (catch js/Error error\n             (log/error :save-block-failed error))))))))\n\n(defn- clean-content!\n  [format content]\n  (->> (text/remove-level-spaces content format (config/get-block-pattern format))\n       (drawer/remove-logbook)\n       (property/remove-properties format)\n       string/trim))\n\n(defn insert-command!\n  [id command-output format {:keys [restore?]\n                             :or {restore? true}\n                             :as option}]\n  (cond\n    ;; replace string\n    (string? command-output)\n    (commands/insert! id command-output option)\n\n    ;; steps\n    (vector? command-output)\n    (commands/handle-steps command-output format)\n\n    (fn? command-output)\n    (let [s (command-output)]\n      (commands/insert! id s option))\n\n    :else\n    nil)\n\n  (when restore?\n    (let [restore-slash-caret-pos? (if (and\n                                        (seq? command-output)\n                                        (= :editor/click-hidden-file-input\n                                           (ffirst command-output)))\n                                     false\n                                     true)]\n      (commands/restore-state restore-slash-caret-pos?))))\n\n(defn get-asset-file-link\n  [format url file-name image?]\n  (let [pdf? (and url (string/ends-with? (string/lower-case url) \".pdf\"))]\n    (case (keyword format)\n      :markdown (util/format (str (when (or image? pdf?) \"!\") \"[%s](%s)\") file-name url)\n      :org (if image?\n             (util/format \"[[%s]]\" url)\n             (util/format \"[[%s][%s]]\" url file-name))\n      nil)))\n\n(defn ensure-assets-dir!\n  [repo]\n  (let [repo-dir (config/get-repo-dir repo)\n        assets-dir \"assets\"]\n    (p/then\n     (fs/mkdir-if-not-exists (str repo-dir \"/\" assets-dir))\n     (fn [] [repo-dir assets-dir]))))\n\n(defn get-asset-path [filename]\n  (p/let [[repo-dir assets-dir] (ensure-assets-dir! (state/get-current-repo))\n          path (path/join repo-dir assets-dir filename)]\n    (if (mobile-util/native-android?)\n      path\n      (js/encodeURI (js/decodeURI path)))))\n\n(defn save-assets!\n  ([_ repo files]\n   (p/let [[repo-dir assets-dir] (ensure-assets-dir! repo)]\n     (save-assets! repo repo-dir assets-dir files\n                   (fn [index file-base]\n                     ;; TODO: maybe there're other chars we need to handle?\n                     (let [file-base (-> file-base\n                                         (string/replace \" \" \"_\")\n                                         (string/replace \"%\" \"_\")\n                                         (string/replace \"/\" \"_\"))\n                           file-name (str file-base \"_\" (.now js/Date) \"_\" index)]\n                       (string/replace file-name #\"_+\" \"_\"))))))\n  ([repo dir path files gen-filename]\n   (p/all\n    (for [[index ^js file] (map-indexed vector files)]\n      ;; WARN file name maybe fully qualified path when paste file\n      (let [file-name (util/node-path.basename (.-name file))\n            [file-base ext] (if file-name\n                              (let [last-dot-index (string/last-index-of file-name \".\")]\n                                [(subs file-name 0 last-dot-index)\n                                 (subs file-name last-dot-index)])\n                              [\"\" \"\"])\n            filename (str (gen-filename index file-base) ext)\n            filename (str path \"/\" filename)]\n                                        ;(js/console.debug \"Write asset #\" dir filename file)\n        (if (util/electron?)\n          (let [from (.-path file)\n                from (if (string/blank? from) nil from)]\n            (p/then (js/window.apis.copyFileToAssets dir filename from)\n                    #(p/resolved [filename (if (string? %) (js/File. #js[] %) file) (.join util/node-path dir filename)])))\n          (p/then (fs/write-file! repo dir filename (.stream file) nil)\n                  #(p/resolved [filename file]))))))))\n\n(defonce *assets-url-cache (atom {}))\n\n(defn make-asset-url\n  [path] ;; path start with \"/assets\" or compatible for \"../assets\"\n  (let [repo-dir (config/get-repo-dir (state/get-current-repo))\n        path (string/replace path \"../\" \"/\")]\n    (cond\n      (util/electron?)\n      (str \"assets://\" repo-dir path)\n\n      (mobile-util/native-platform?)\n      (mobile-util/convert-file-src (str repo-dir path))\n\n      :else\n      (let [handle-path (str \"handle\" repo-dir path)\n            cached-url (get @*assets-url-cache (keyword handle-path))]\n        (if cached-url\n          (p/resolved cached-url)\n          (p/let [handle (idb/get-item handle-path)\n                  file (and handle (.getFile handle))]\n            (when file\n              (p/let [url (js/URL.createObjectURL file)]\n                (swap! *assets-url-cache assoc (keyword handle-path) url)\n                url))))))))\n\n(defn delete-asset-of-block!\n  [{:keys [repo href full-text block-id local? delete-local?] :as _opts}]\n  (let [block (db-model/query-block-by-uuid block-id)\n        _ (or block (throw (str block-id \" not exists\")))\n        text (:block/content block)\n        content (string/replace text full-text \"\")]\n    (save-block! repo block content)\n    (when (and local? delete-local?)\n      ;; FIXME: should be relative to current block page path\n      (when-let [href (if (util/electron?) href (second (re-find #\"\\((.+)\\)$\" full-text)))]\n        (fs/unlink! repo\n                    (config/get-repo-path\n                     repo (-> href\n                              (string/replace #\"^../\" \"/\")\n                              (string/replace #\"^assets://\" \"\"))) nil)))))\n\n;; assets/journals_2021_02_03_1612350230540_0.png\n(defn resolve-relative-path\n  [file-path]\n  (if-let [current-file (or (db-model/get-block-file-path (state/get-edit-block))\n                            ;; fix dummy file path of page\n                            (and (util/electron?)\n                                 (util/node-path.join\n                                  (config/get-repo-dir (state/get-current-repo))\n                                  (config/get-pages-directory) \"_.md\")))]\n    (util/get-relative-path current-file file-path)\n    file-path))\n\n(defn upload-asset\n  [id ^js files format uploading? drop-or-paste?]\n  (let [repo (state/get-current-repo)\n        block (state/get-edit-block)]\n    (if (config/local-db? repo)\n      (-> (save-assets! block repo (js->clj files))\n          (p/then\n           (fn [res]\n             (when-let [[asset-file-name file full-file-path] (and (seq res) (first res))]\n               (let [image? (util/ext-of-image? asset-file-name)]\n                 (insert-command!\n                  id\n                  (get-asset-file-link format (resolve-relative-path (or full-file-path asset-file-name))\n                                       (if file (.-name file) (if image? \"image\" \"asset\"))\n                                       image?)\n                  format\n                  {:last-pattern (if drop-or-paste? \"\" (state/get-editor-command-trigger))\n                   :restore?     true})))))\n          (p/finally\n            (fn []\n              (reset! uploading? false)\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process 0))))\n      (image/upload\n       files\n       (fn [file file-name file-type]\n         (image-handler/request-presigned-url\n          file file-name file-type\n          uploading?\n          (fn [signed-url]\n            (insert-command! id\n                             (get-asset-file-link format signed-url file-name true)\n                             format\n                             {:last-pattern (if drop-or-paste? \"\" (state/get-editor-command-trigger))\n                              :restore?     true})\n\n            (reset! *asset-uploading? false)\n            (reset! *asset-uploading-process 0))\n          (fn [e]\n            (let [process (* (/ (gobj/get e \"loaded\")\n                                (gobj/get e \"total\"))\n                             100)]\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process process)))))))))\n\n;; Editor should track some useful information, like editor modes.\n;; For example:\n;; 1. Which file format is it, markdown or org mode?\n;; 2. Is it in the properties area? Then we can enable the \":\" autopair\n(def autopair-map\n  {\"[\" \"]\"\n   \"{\" \"}\"\n   \"(\" \")\"\n   \"`\" \"`\"\n   \"~\" \"~\"\n   \"*\" \"*\"\n   \"_\" \"_\"\n   \"^\" \"^\"\n   \"=\" \"=\"\n   \"/\" \"/\"\n   \"+\" \"+\"})\n;; \":\" \":\"                              ; TODO: only properties editing and org mode tag\n\n(def reversed-autopair-map\n  (zipmap (vals autopair-map)\n          (keys autopair-map)))\n\n(def autopair-when-selected\n  #{\"*\" \"^\" \"_\" \"=\" \"+\" \"/\"})\n\n(def delete-map\n  (assoc autopair-map\n         \"$\" \"$\"\n         \":\" \":\"))\n\n(defn autopair\n  [input-id prefix _format _option]\n  (let [value (get autopair-map prefix)\n        selected (util/get-selected-text)\n        postfix (str selected value)\n        value (str prefix postfix)\n        input (gdom/getElement input-id)]\n    (when value\n      (when-not (string/blank? selected) (reset! *selected-text selected))\n      (let [[prefix _pos] (commands/simple-replace! input-id value selected\n                                                    {:backward-pos (count postfix)\n                                                     :check-fn (fn [new-value prefix-pos]\n                                                                 (when (>= prefix-pos 0)\n                                                                   [(subs new-value prefix-pos (+ prefix-pos 2))\n                                                                    (+ prefix-pos 2)]))})]\n        (case prefix\n          \"[[\"\n          (do\n            (commands/handle-step [:editor/search-page])\n            (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n          \"((\"\n          (do\n            (commands/handle-step [:editor/search-block :reference])\n            (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n          nil)))))\n\n(defn surround-by?\n  [input before end]\n  (when input\n    (let [value (gobj/get input \"value\")\n          pos (cursor/pos input)]\n      (text/surround-by? value pos before end))))\n\n(defn wrapped-by?\n  [input before end]\n  (when input\n    (let [value (gobj/get input \"value\")\n          pos (dec (cursor/pos input))]\n      (when (>= pos 0)\n        (text/wrapped-by? value pos before end)))))\n\n(defn get-matched-pages\n  \"Return matched page names\"\n  [q]\n  (let [block (state/get-edit-block)\n        editing-page (and block\n                          (when-let [page-id (:db/id (:block/page block))]\n                            (:block/name (db/entity page-id))))\n        pages (search/page-search q 20)]\n    (if editing-page\n      ;; To prevent self references\n      (remove (fn [p] (= (util/page-name-sanity-lc p) editing-page)) pages)\n      pages)))\n\n(defn get-matched-blocks\n  [q block-id]\n  ;; remove current block\n  (let [current-block (state/get-edit-block)\n        block-parents (set (->> (db/get-block-parents (state/get-current-repo)\n                                                      block-id\n                                                      99)\n                                (map (comp str :block/uuid))))\n        current-and-parents (set/union #{(str (:block/uuid current-block))} block-parents)]\n    (p/let [result (search/block-search (state/get-current-repo) q {:limit 20})]\n      (remove\n       (fn [h]\n         (contains? current-and-parents (:block/uuid h)))\n       result))))\n\n(defn get-matched-templates\n  [q]\n  (search/template-search q))\n\n(defn get-matched-commands\n  [input]\n  (try\n    (let [edit-content (or (gobj/get input \"value\") \"\")\n          pos (cursor/pos input)\n          last-slash-caret-pos (:pos @*slash-caret-pos)\n          last-command (and last-slash-caret-pos (subs edit-content last-slash-caret-pos pos))]\n      (when (> pos 0)\n        (or\n         (and (= (state/get-editor-command-trigger) (util/nth-safe edit-content (dec pos)))\n              @commands/*initial-commands)\n         (and last-command\n              (commands/get-matched-commands last-command)))))\n    (catch js/Error e\n      (js/console.error e)\n      nil)))\n\n(defn get-matched-block-commands\n  [input]\n  (try\n    (let [edit-content (gobj/get input \"value\")\n          pos (cursor/pos input)\n          last-command (subs edit-content\n                             (:pos @*angle-bracket-caret-pos)\n                             pos)]\n      (when (> pos 0)\n        (or\n         (and (= \\< (util/nth-safe edit-content (dec pos)))\n              (commands/block-commands-map))\n         (and last-command\n              (commands/get-matched-commands\n               last-command\n               (commands/block-commands-map))))))\n    (catch js/Error _error\n      nil)))\n\n(defn auto-complete?\n  []\n  (or @*show-commands\n      @*show-block-commands\n      @*asset-uploading?\n      (state/get-editor-show-input)\n      (state/get-editor-show-page-search?)\n      (state/get-editor-show-block-search?)\n      (state/get-editor-show-template-search?)\n      (state/get-editor-show-date-picker?)))\n\n(defn get-current-input-char\n  [input]\n  (when-let [pos (cursor/pos input)]\n    (let [value (gobj/get input \"value\")]\n      (when (and (>= (count value) (inc pos))\n                 (>= pos 1))\n        (util/nth-safe value pos)))))\n\n(defn move-up-down\n  [up?]\n  (fn [event]\n    (util/stop event)\n    (let [edit-block-id (:block/uuid (state/get-edit-block))\n          move-nodes (fn [blocks]\n                       (outliner-tx/transact!\n                         {:outliner-op :move-blocks}\n                         (save-current-block!)\n                         (outliner-core/move-blocks-up-down! blocks up?))\n                       (when-let [block-node (util/get-first-block-by-id (:block/uuid (first blocks)))]\n                         (.scrollIntoView block-node #js {:behavior \"smooth\" :block \"nearest\"})))]\n      (if edit-block-id\n        (when-let [block (db/pull [:block/uuid edit-block-id])]\n          (let [blocks [block]]\n            (move-nodes blocks))\n          (when-let [input-id (state/get-edit-input-id)]\n            (when-let [input (gdom/getElement input-id)]\n              (.focus input)\n              (js/setTimeout #(util/scroll-editor-cursor input) 100))))\n        (let [ids (state/get-selection-block-ids)]\n          (when (seq ids)\n            (let [lookup-refs (map (fn [id] [:block/uuid id]) ids)\n                  blocks (db/pull-many (state/get-current-repo) '[*] lookup-refs)]\n              (move-nodes blocks))))))))\n\n(defn get-selected-ordered-blocks\n  []\n  (let [repo (state/get-current-repo)\n        ids (state/get-selection-block-ids)\n        lookup-refs (->> (map (fn [id] [:block/uuid id]) ids)\n                         (remove nil?))]\n    (db/pull-many repo '[*] lookup-refs)))\n\n(defn on-tab\n  \"`direction` = :left | :right.\"\n  [direction]\n  (let [blocks (get-selected-ordered-blocks)]\n    (when (seq blocks)\n      (outliner-tx/transact!\n        {:outliner-op :move-blocks\n         :real-outliner-op :indent-outdent}\n        (outliner-core/indent-outdent-blocks! blocks (= direction :right))))))\n\n(defn- get-link [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util/format \"[%s](%s)\" label link)\n      :org (util/format \"[[%s][%s]]\" link label)\n      nil)))\n\n(defn- get-image-link\n  [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util/format \"![%s](%s)\" label link)\n      :org (util/format \"[[%s]]\"))))\n\n(defn handle-command-input [command id format m]\n  ;; TODO: Add error handling for when user doesn't provide a required field.\n  ;; (The current behavior is to just revert back to the editor.)\n  (case command\n\n    :link (let [{:keys [link label]} m]\n            (when-not (or (string/blank? link) (string/blank? label))\n              (insert-command!\n               id\n               (get-link format link label)\n               format\n               {:last-pattern (str (state/get-editor-command-trigger) \"link\")})))\n\n    :image-link (let [{:keys [link label]} m]\n                  (when (not (string/blank? link))\n                    (insert-command!\n                     id\n                     (get-image-link format link label)\n                     format\n                     {:last-pattern (str (state/get-editor-command-trigger) \"link\")})))\n\n    nil)\n\n  (state/set-editor-show-input! nil)\n\n  (when-let [saved-cursor (state/get-editor-last-pos)]\n    (when-let [input (gdom/getElement id)]\n      (.focus input)\n      (cursor/move-cursor-to input saved-cursor))))\n\n(defn get-search-q\n  []\n  (when-let [id (state/get-edit-input-id)]\n    (when-let [input (gdom/getElement id)]\n      (let [current-pos (cursor/pos input)\n            pos (state/get-editor-last-pos)\n            edit-content (or (state/sub [:editor/content id]) \"\")]\n        (or\n         @*selected-text\n         (gp-util/safe-subs edit-content pos current-pos))))))\n\n(defn close-autocomplete-if-outside\n  [input]\n  (when (and input\n             (or (state/get-editor-show-page-search?)\n                 (state/get-editor-show-page-search-hashtag?)\n                 (state/get-editor-show-block-search?))\n             (not (wrapped-by? input \"[[\" \"]]\")))\n    (when (get-search-q)\n      (let [value (gobj/get input \"value\")\n            pos (state/get-editor-last-pos)\n            current-pos (cursor/pos input)\n            between (gp-util/safe-subs value (min pos current-pos) (max pos current-pos))]\n        (when (and between\n                   (or\n                    (string/includes? between \"[\")\n                    (string/includes? between \"]\")\n                    (string/includes? between \"(\")\n                    (string/includes? between \")\")))\n          (state/set-editor-show-block-search! false)\n          (state/set-editor-show-page-search! false)\n          (state/set-editor-show-page-search-hashtag! false))))))\n\n(defn resize-image!\n  [block-id metadata full_text size]\n  (let [new-meta (merge metadata size)\n        image-part (first (string/split full_text #\"\\{\"))\n        new-full-text (str image-part (pr-str new-meta))\n        block (db/pull [:block/uuid block-id])\n        value (:block/content block)\n        new-value (string/replace value full_text new-full-text)]\n    (save-block-aux! block new-value {})))\n\n(defn- mark-last-input-time!\n  [repo]\n  (when repo\n    (state/set-editor-last-input-time! repo (util/time-ms))\n    (db/clear-repo-persistent-job! repo)))\n\n(defonce *auto-save-timeout (atom nil))\n(defn edit-box-on-change!\n  [e _block id]\n  (let [value (util/evalue e)\n        repo (state/get-current-repo)]\n    (state/set-edit-content! id value false)\n    (when @*auto-save-timeout\n      (js/clearTimeout @*auto-save-timeout))\n    (mark-last-input-time! repo)\n    (reset! *auto-save-timeout\n            (js/setTimeout\n             (fn []\n               (when (state/input-idle? repo)\n                 (state/set-editor-op! :auto-save)\n                 ; don't auto-save for page's properties block\n                 (save-current-block! {:skip-properties? true})\n                 (state/set-editor-op! nil)))\n             500))))\n\n(defn handle-last-input []\n  (let [input           (state/get-input)\n        pos             (cursor/pos input)\n        last-input-char (util/nth-safe (.-value input) (dec pos))]\n\n    ;; TODO: is it cross-browser compatible?\n    ;; (not= (gobj/get native-e \"inputType\") \"insertFromPaste\")\n    (when (= last-input-char (state/get-editor-command-trigger))\n      (when (seq (get-matched-commands input))\n        (reset! commands/*slash-caret-pos (cursor/get-caret-pos input))\n        (reset! commands/*show-commands true)))\n\n    (if (= last-input-char commands/angle-bracket)\n      (when (seq (get-matched-block-commands input))\n        (reset! commands/*angle-bracket-caret-pos (cursor/get-caret-pos input))\n        (reset! commands/*show-block-commands true))\n      nil)))\n\n(defn block-on-chosen-handler\n  [_input id q format]\n  (fn [chosen _click?]\n    (state/set-editor-show-block-search! false)\n    (let [uuid-string (str (:block/uuid chosen))]\n\n      ;; block reference\n      (insert-command! id\n                       (util/format \"((%s))\" uuid-string)\n                       format\n                       {:last-pattern (str \"((\" (if @*selected-text \"\" q))\n                        :end-pattern \"))\"\n                        :postfix-fn   (fn [s] (util/replace-first \"))\" s \"\"))\n                        :forward-pos 3})\n\n      ;; Save it so it'll be parsed correctly in the future\n      (set-block-property! (:block/uuid chosen)\n                           :id\n                           uuid-string)\n\n      (when-let [input (gdom/getElement id)]\n        (.focus input)))))\n\n(defn block-non-exist-handler\n  [input]\n  (fn []\n    (state/set-editor-show-block-search! false)\n    (cursor/move-cursor-forward input 2)))\n\n(defn- paste-block-cleanup\n  [block page exclude-properties format content-update-fn]\n  (let [new-content\n        (if content-update-fn\n          (content-update-fn (:block/content block))\n          (:block/content block))\n        new-content\n        (->> new-content\n             (property/remove-property format \"id\")\n             (property/remove-property format \"custom_id\"))]\n    (merge (dissoc block\n                   :block/pre-block?\n                   :block/meta)\n           {:block/page {:db/id (:db/id page)}\n            :block/format format\n            :block/properties (apply dissoc (:block/properties block)\n                                (concat [:id :custom_id :custom-id]\n                                        exclude-properties))\n            :block/content new-content\n            :block/path-refs (->> (cons (:db/id page) (:block/path-refs block))\n                                  (remove nil?))})))\n\n(defn- edit-last-block-after-inserted!\n  [result]\n  (js/setTimeout\n   (fn []\n     (when-let [last-block (last (:blocks result))]\n       (clear-when-saved!)\n       (let [last-block' (db/pull [:block/uuid (:block/uuid last-block)])]\n         (edit-block! last-block' :max (:block/uuid last-block')))))\n   0))\n\n(defn paste-blocks\n  [blocks {:keys [content-update-fn\n                  exclude-properties\n                  target-block\n                  sibling?]\n           :or {exclude-properties []}}]\n  (let [editing-block (when-let [editing-block (state/get-edit-block)]\n                        (some-> (db/pull (:db/id editing-block))\n                                (assoc :block/content (state/get-edit-content))))\n        target-block (or target-block editing-block)\n        block (db/entity (:db/id target-block))\n        page (if (:block/name block) block\n                 (when target-block (:block/page (db/entity (:db/id target-block)))))\n        target-block (or target-block editing-block)\n        sibling? (cond\n                   (some? sibling?)\n                   sibling?\n\n                   (db/has-children? (:block/uuid target-block))\n                   false\n\n                   :else\n                   true)]\n    (outliner-tx/transact!\n      {:outliner-op :insert-blocks}\n      (when editing-block\n        (outliner-core/save-block! editing-block))\n      (when target-block\n        (let [format (or (:block/format target-block) (state/get-preferred-format))\n              blocks' (map (fn [block]\n                             (paste-block-cleanup block page exclude-properties format content-update-fn))\n                        blocks)\n              result (outliner-core/insert-blocks! blocks' target-block {:sibling? sibling?})]\n          (edit-last-block-after-inserted! result))))))\n\n(defn- block-tree->blocks\n  [tree-vec format]\n  (->> (outliner-core/tree-vec-flatten tree-vec)\n       (map (fn [block]\n              (let [content (:content block)\n                    props (into [] (:properties block))\n                    content* (str (if (= :markdown format) \"- \" \"* \")\n                                  (property/insert-properties format content props))\n                    ast (mldoc/->edn content* (gp-mldoc/default-config format))\n                    blocks (block/extract-blocks ast content* true format)\n                    fst-block (first blocks)]\n                (assert fst-block \"fst-block shouldn't be nil\")\n                (assoc fst-block :block/level (:block/level block)))))))\n\n(defn insert-block-tree-after-target\n  \"`tree-vec`: a vector of blocks.\n   Block element: {:content :properties :children [block-1, block-2, ...]}\"\n  [target-block-id sibling? tree-vec format]\n  (let [blocks (block-tree->blocks tree-vec format)\n        target-block (db/pull target-block-id)\n        page-id (:db/id (:block/page target-block))\n        blocks (gp-block/with-parent-and-left page-id blocks)]\n    (paste-blocks\n     blocks\n     {:target-block target-block\n      :sibling? sibling?})))\n\n(defn insert-template!\n  ([element-id db-id]\n   (insert-template! element-id db-id {}))\n  ([element-id db-id {:keys [target] :as opts}]\n   (when-let [db-id (if (integer? db-id)\n                      db-id\n                      (:db/id (db-model/get-template-by-name (name db-id))))]\n     (let [repo (state/get-current-repo)\n           target (or target (state/get-edit-block))\n           block (db/entity db-id)\n           format (:block/format block)\n           block-uuid (:block/uuid block)\n           template-including-parent? (not (false? (:template-including-parent (:block/properties block))))\n           blocks (db/get-block-and-children repo block-uuid)\n           root-block (db/pull db-id)\n           blocks-exclude-root (remove (fn [b] (= (:db/id b) db-id)) blocks)\n           sorted-blocks (tree/sort-blocks blocks-exclude-root root-block)\n           blocks (if template-including-parent?\n                    sorted-blocks\n                    (drop 1 sorted-blocks))]\n       (when element-id\n         (insert-command! element-id \"\" format {}))\n       (let [exclude-properties [:id :template :template-including-parent]\n             content-update-fn (fn [content]\n                                 (->> content\n                                      (property/remove-property format \"template\")\n                                      (property/remove-property format \"template-including-parent\")\n                                      template/resolve-dynamic-template!))\n             page (if (:block/name block) block\n                      (when target (:block/page (db/entity (:db/id target)))))\n             blocks' (map (fn [block]\n                            (paste-block-cleanup block page exclude-properties format content-update-fn))\n                       blocks)\n             sibling? (:sibling? opts)\n             sibling?' (cond\n                         (some? sibling?)\n                         sibling?\n\n                         (db/has-children? (:block/uuid target))\n                         false\n\n                         :else\n                         true)]\n         (outliner-tx/transact!\n           {:outliner-op :insert-blocks}\n           (save-current-block!)\n           (let [result (outliner-core/insert-blocks! blocks'\n                                                      target\n                                                      (assoc opts :sibling? sibling?'))]\n             (edit-last-block-after-inserted! result))))))))\n\n(defn template-on-chosen-handler\n  [element-id]\n  (fn [[_template db-id] _click?]\n    (insert-template! element-id db-id\n                      {:replace-empty-target? true})))\n\n(defn parent-is-page?\n  [{{:block/keys [parent page]} :data :as node}]\n  {:pre [(tree/satisfied-inode? node)]}\n  (= parent page))\n\n(defn outdent-on-enter\n  [node]\n  (when-not (parent-is-page? node)\n    (let [parent-node (tree/-get-parent node)]\n      (outliner-tx/transact!\n        {:outliner-op :move-blocks\n         :real-outliner-op :indent-outdent}\n        (save-current-block!)\n        (outliner-core/move-blocks! [(:data node)] (:data parent-node) true)))))\n\n(defn- last-top-level-child?\n  [{:keys [id]} current-node]\n  (when id\n    (when-let [entity (if-let [id' (parse-uuid (str id))]\n                        (db/entity [:block/uuid id'])\n                        (db/entity [:block/name (util/page-name-sanity-lc id)]))]\n      (= (:block/uuid entity) (tree/-get-parent-id current-node)))))\n\n(defn- insert\n  [insertion]\n  (when-not (auto-complete?)\n    (let [^js input (state/get-input)\n          selected-start (util/get-selection-start input)\n          selected-end (util/get-selection-end input)\n          value (.-value input)\n          s1 (subs value 0 selected-start)\n          s2 (subs value selected-end)]\n      (state/set-edit-content! (state/get-edit-input-id)\n                               (str s1 insertion s2))\n      (cursor/move-cursor-to input (+ selected-start (count insertion))))))\n\n(defn- keydown-new-line\n  []\n  (insert \"\\n\"))\n\n(declare delete-and-update)\n\n(defn- dwim-in-properties\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state/get-input)\n              content (gobj/get input \"value\")\n              format (:block/format (:block (get-state)))\n              property-key (:raw-content (thingatpt/property-key-at-point input))\n              org? (= format :org)\n              move-to-pos (if org? 2 3)]\n          (if org?\n            (cond\n              (and property-key (not= property-key \"\"))\n              (case property-key\n                ;; When cursor in \"PROPERTIES\", add :|: in a new line and move cursor to |\n                \"PROPERTIES\"\n                (do (cursor/move-cursor-to-line-end input)\n                    (insert \"\\n:: \")\n                    (cursor/move-cursor-backward input move-to-pos))\n                ;; When cursor in \"END\", new block (respect the previous enter behavior)\n                \"END\"\n                (do\n                  (cursor/move-cursor-to-end input)\n                  (save-current-block!)\n                  (insert-new-block! state))\n                ;; cursor in other positions of :ke|y: or ke|y::, move to line end for inserting value.\n                (if (property/property-key-exist? format content property-key)\n                  (notification/show!\n                   [:p.content\n                    (util/format \"Property key \\\"%s\\\" already exists!\" property-key)]\n                   :error)\n                  (cursor/move-cursor-to-line-end input)))\n\n              ;; when cursor in empty property key\n              (and property-key (= property-key \"\"))\n              (do (delete-and-update\n                   input\n                   (cursor/line-beginning-pos input)\n                   (inc (cursor/line-end-pos input)))\n                  (property/goto-properties-end format input)\n                  (cursor/move-cursor-to-line-end input))\n              :else\n              ;;When cursor in other place of PROPERTIES drawer, add :|: in a new line and move cursor to |\n              (do\n                (insert \"\\n:: \")\n                (cursor/move-cursor-backward input move-to-pos)))\n            (insert \"\\n\")))))))\n\n(defn toggle-list-checkbox\n  [{:block/keys [content] :as block} old-item-content new-item-content]\n  (let [new-content (string/replace-first content old-item-content new-item-content)]\n    (save-block-if-changed! block new-content)))\n\n(defn- dwim-in-list\n  []\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state/get-input)]\n          (when-let [item (thingatpt/list-item-at-point input)]\n            (let [{:keys [full-content indent bullet checkbox ordered _]} item\n                  next-bullet (if ordered (str (inc bullet) \".\") bullet)\n                  checkbox (when checkbox \"[ ] \")]\n              (if (and\n                   (= (count full-content)\n                      (+ (if ordered (+ (count (str bullet)) 2) 2) (when checkbox (count checkbox))))\n                   (string/includes? (.-value input) \"\\n\"))\n                (delete-and-update input (cursor/line-beginning-pos input) (cursor/line-end-pos input))\n                (let [start-pos (util/get-selection-start input)\n                      value (.-value input)\n                      before (subs value 0 start-pos)\n                      after (subs value start-pos)\n                      cursor-in-item-content? (and (re-find #\"^(\\d+){1}\\.\" (last (string/split-lines before)))\n                                                   (not (string/blank? (first (string/split-lines after)))))]\n                  (when-not cursor-in-item-content?\n                    (cursor/move-cursor-to-line-end input)\n                    (insert (str \"\\n\" indent next-bullet \" \" checkbox)))\n                  (when ordered\n                    (let [value (.-value input)\n                          start-pos (util/get-selection-start input)\n                          after-lists-str (string/trim (subs value start-pos))\n                          after-lists-str (if cursor-in-item-content?\n                                            (str indent next-bullet \" \" after-lists-str)\n                                            after-lists-str)\n                          lines (string/split-lines after-lists-str)\n                          after-lists-str' (list/re-order-items lines (if cursor-in-item-content? bullet (inc bullet)))\n                          value' (str (subs value 0 start-pos) \"\\n\" after-lists-str')\n                          cursor' (if cursor-in-item-content?\n                                    (inc (count (str (subs value 0 start-pos) indent next-bullet \" \")))\n                                    (+ (:end item) (count next-bullet) 2))]\n                      (state/set-edit-content! (state/get-edit-input-id) value')\n                      (cursor/move-cursor-to input cursor'))))))))))))\n\n(defn toggle-list!\n  []\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state/get-input)\n              format (or (db/get-page-format (state/get-current-page)) (state/get-preferred-format))\n              new-unordered-bullet (case format :org \"-\" \"*\")\n              current-pos (cursor/pos input)\n              content (state/get-edit-content)\n              pos (atom current-pos)]\n          (if-let [item (thingatpt/list-item-at-point input)]\n            (let [{:keys [ordered]} item\n                  list-beginning-pos (list/list-beginning-pos input)\n                  list-end-pos (list/list-end-pos input)\n                  list (subs content list-beginning-pos list-end-pos)\n                  items (string/split-lines list)\n                  splitter-reg (if ordered #\"[\\d]*\\.\\s*\" #\"[-\\*]{1}\\s*\")\n                  items-without-bullet (vec (map #(last (string/split % splitter-reg 2)) items))\n                  new-list (string/join \"\\n\"\n                                        (if ordered\n                                          (map #(str new-unordered-bullet \" \" %) items-without-bullet)\n                                          (map-indexed #(str (inc %1) \". \" %2) items-without-bullet)))\n                  index-of-current-item (inc (.indexOf items-without-bullet\n                                                       (last (string/split (:raw-content item) splitter-reg 2))))\n                  numbers-length (->> (map-indexed\n                                       #_:clj-kondo/ignore\n                                       #(str (inc %1) \". \")\n                                       (subvec items-without-bullet 0 index-of-current-item))\n                                      string/join\n                                      count)\n                  pos-diff (- numbers-length (* 2 index-of-current-item))]\n              (delete-and-update input list-beginning-pos list-end-pos)\n              (insert new-list)\n              (reset! pos (if ordered\n                            (- current-pos pos-diff)\n                            (+ current-pos pos-diff))))\n            (let [prev-item (list/get-prev-item input)]\n              (cursor/move-cursor-down input)\n              (cursor/move-cursor-to-line-beginning input)\n              (if prev-item\n                (let [{:keys [bullet ordered]} prev-item\n                      current-bullet (if ordered (str (inc bullet) \".\") bullet)]\n                  (insert (str current-bullet \" \"))\n                  (reset! pos (+ current-pos (count current-bullet) 1)))\n                (do (insert (str new-unordered-bullet \" \"))\n                    (reset! pos (+ current-pos 2))))))\n          (cursor/move-cursor-to input @pos))))))\n\n(defn toggle-page-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state/get-input)\n            new-pos (cursor/get-caret-pos input)\n            page-ref-fn (fn [bounds backward-pos]\n                          (commands/simple-insert!\n                           parent-id bounds\n                           {:backward-pos backward-pos\n                            :check-fn (fn [_ _ _]\n                                        (reset! commands/*slash-caret-pos new-pos)\n                                        (commands/handle-step [:editor/search-page]))}))]\n        (state/set-editor-show-page-search! false)\n        (let [selection (get-selection-and-format)\n              {:keys [selection-start selection-end selection]} selection]\n          (if selection\n            (do (delete-and-update input selection-start selection-end)\n                (insert (util/format \"[[%s]]\" selection)))\n            (if-let [embed-ref (thingatpt/embed-macro-at-point input)]\n              (let [{:keys [raw-content start end]} embed-ref]\n                (delete-and-update input start end)\n                (if (= 5 (count raw-content))\n                  (page-ref-fn \"[[]]\" 2)\n                  (insert raw-content)))\n              (if-let [page-ref (thingatpt/page-ref-at-point input)]\n                (let [{:keys [start end full-content raw-content]} page-ref]\n                  (delete-and-update input start end)\n                  (if (= raw-content \"\")\n                    (page-ref-fn \"{{embed [[]]}}\" 4)\n                    (insert (util/format \"{{embed %s}}\" full-content))))\n                (page-ref-fn \"[[]]\" 2)))))))))\n\n(defn toggle-block-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state/get-input)\n            new-pos (cursor/get-caret-pos input)\n            block-ref-fn (fn [bounds backward-pos]\n                           (commands/simple-insert!\n                            parent-id bounds\n                            {:backward-pos backward-pos\n                             :check-fn     (fn [_ _ _]\n                                             (reset! commands/*slash-caret-pos new-pos)\n                                             (commands/handle-step [:editor/search-block]))}))]\n        (state/set-editor-show-block-search! false)\n        (if-let [embed-ref (thingatpt/embed-macro-at-point input)]\n          (let [{:keys [raw-content start end]} embed-ref]\n            (delete-and-update input start end)\n            (if (= 5 (count raw-content))\n              (block-ref-fn \"(())\" 2)\n              (insert raw-content)))\n          (if-let [page-ref (thingatpt/block-ref-at-point input)]\n            (let [{:keys [start end full-content raw-content]} page-ref]\n              (delete-and-update input start end)\n              (if (= raw-content \"\")\n                (block-ref-fn \"{{embed (())}}\" 4)\n                (insert (util/format \"{{embed %s}}\" full-content))))\n            (block-ref-fn \"(())\" 2)))))))\n\n(defn- keydown-new-block\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block config]} (get-state)]\n      (when block\n        (let [input (state/get-input)\n              content (gobj/get input \"value\")\n              pos (cursor/pos input)\n              current-node (outliner-core/block block)\n              has-right? (-> (tree/-get-right current-node)\n                             (tree/satisfied-inode?))\n              thing-at-point ;intern is not supported in cljs, need a more elegant solution\n              (or (when (thingatpt/get-setting :admonition&src?)\n                    (thingatpt/admonition&src-at-point input))\n                  (when (thingatpt/get-setting :markup?)\n                    (thingatpt/markup-at-point input))\n                  (when (thingatpt/get-setting :block-ref?)\n                    (thingatpt/block-ref-at-point input))\n                  (when (thingatpt/get-setting :page-ref?)\n                    (thingatpt/page-ref-at-point input))\n                  (when (thingatpt/get-setting :properties?)\n                    (thingatpt/properties-at-point input))\n                  (when (thingatpt/get-setting :list?)\n                    (and (not (cursor/beginning-of-line? input))\n                         (thingatpt/list-item-at-point input))))]\n          (cond\n            thing-at-point\n            (case (:type thing-at-point)\n              \"markup\" (let [right-bound (:bounds thing-at-point)]\n                         (cursor/move-cursor-to\n                          input\n                          (+ (string/index-of content right-bound pos)\n                             (count right-bound))))\n              \"admonition-block\" (keydown-new-line)\n              \"source-block\" (do\n                               (keydown-new-line)\n                               (case (:action thing-at-point)\n                                 :into-code-editor\n                                 (state/into-code-editor-mode!)\n                                 nil))\n              \"block-ref\" (open-block-in-sidebar! (:link thing-at-point))\n              \"page-ref\" (when-not (string/blank? (:link thing-at-point))\n                           (let [page (:link thing-at-point)\n                                 page-name (db-model/get-redirect-page-name page)]\n                             (insert-first-page-block-if-not-exists! page-name)))\n              \"list-item\" (dwim-in-list)\n              \"properties-drawer\" (dwim-in-properties state))\n\n            (and\n             (string/blank? content)\n             (not has-right?)\n             (not (last-top-level-child? config current-node)))\n            (outdent-on-enter current-node)\n\n            :else\n            (profile\n             \"Insert block\"\n             (do (save-current-block!)\n                 (insert-new-block! state)))))))))\n\n(defn keydown-new-block-handler [state e]\n  (if (state/doc-mode-enter-for-new-line?)\n    (keydown-new-line)\n    (do\n      (.preventDefault e)\n      (keydown-new-block state))))\n\n(defn keydown-new-line-handler [state e]\n  (if (state/doc-mode-enter-for-new-line?)\n    (keydown-new-block state)\n    (do\n      (.preventDefault e)\n      (keydown-new-line))))\n\n(defn- select-first-last\n  \"Select first or last block in viewpoint\"\n  [direction]\n  (let [f (case direction :up last :down first)\n        block (->> (util/get-blocks-noncollapse)\n                   (f))]\n    (when block\n      (.scrollIntoView block #js {:behavior \"smooth\" :block \"center\"})\n      (state/exit-editing-and-set-selected-blocks! [block]))))\n\n(defn- select-up-down [direction]\n  (let [selected (first (state/get-selection-blocks))\n        f (case direction\n            :up util/get-prev-block-non-collapsed\n            :down util/get-next-block-non-collapsed)\n        sibling-block (f selected)]\n    (when (and sibling-block (dom/attr sibling-block \"blockid\"))\n      (.scrollIntoView sibling-block #js {:behavior \"smooth\" :block \"center\"})\n      (state/exit-editing-and-set-selected-blocks! [sibling-block]))))\n\n(defn- move-cross-boundrary-up-down\n  [direction]\n  (let [input (state/get-input)\n        line-pos (util/get-first-or-last-line-pos input)\n        repo (state/get-current-repo)\n        f (case direction\n            :up util/get-prev-block-non-collapsed\n            :down util/get-next-block-non-collapsed)\n        sibling-block (f (gdom/getElement (state/get-editing-block-dom-id)))\n        {:block/keys [uuid content format]} (state/get-edit-block)]\n    (when sibling-block\n      (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n        (let [value (state/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string/trim value))\n            (save-block! repo uuid value)))\n\n        (let [new-id (string/replace (gobj/get sibling-block \"id\") \"ls-block\" \"edit-block\")\n              new-uuid (cljs.core/uuid sibling-block-id)\n              block (db/pull repo '[*] [:block/uuid new-uuid])]\n          (edit-block! block\n                       [direction line-pos]\n                       new-id))))))\n\n(defn keydown-up-down-handler\n  [direction]\n  (let [input (state/get-input)\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)\n        up? (= direction :up)\n        down? (= direction :down)]\n    (cond\n      (not= selected-start selected-end)\n      (if up?\n        (cursor/move-cursor-to input selected-start)\n        (cursor/move-cursor-to input selected-end))\n\n      (or (and up? (cursor/textarea-cursor-first-row? input))\n          (and down? (cursor/textarea-cursor-last-row? input)))\n      (move-cross-boundrary-up-down direction)\n\n      :else\n      (if up?\n        (cursor/move-cursor-up input)\n        (cursor/move-cursor-down input)))))\n\n(defn- move-to-block-when-cross-boundrary\n  [direction]\n  (let [up? (= :left direction)\n        pos (if up? :max 0)\n        {:block/keys [format uuid] :as block} (state/get-edit-block)\n        id (state/get-edit-input-id)\n        repo (state/get-current-repo)\n        f (if up? util/get-prev-block-non-collapsed util/get-next-block-non-collapsed)\n        sibling-block (f (gdom/getElement (state/get-editing-block-dom-id)))]\n    (when sibling-block\n      (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n        (let [content (:block/content block)\n              value (state/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string/trim value))\n            (save-block! repo uuid value)))\n        (let [block (db/pull repo '[*] [:block/uuid (cljs.core/uuid sibling-block-id)])]\n          (edit-block! block pos id))))))\n\n(defn keydown-arrow-handler\n  [direction]\n  (let [input (state/get-input)\n        element js/document.activeElement\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)\n        left? (= direction :left)\n        right? (= direction :right)]\n    (when (= input element)\n      (cond\n        (not= selected-start selected-end)\n        (if left?\n          (cursor/move-cursor-to input selected-start)\n          (cursor/move-cursor-to input selected-end))\n\n        (or (and left? (cursor/start? input))\n            (and right? (cursor/end? input)))\n        (move-to-block-when-cross-boundrary direction)\n\n        :else\n        (if left?\n          (cursor/move-cursor-backward input)\n          (cursor/move-cursor-forward input))))))\n\n(defn- delete-and-update [^js input start end]\n  (util/safe-set-range-text! input \"\" start end)\n  (state/set-edit-content! (state/get-edit-input-id) (.-value input)))\n\n(defn- delete-concat [current-block]\n  (let [input-id (state/get-edit-input-id)\n        ^js input (state/get-input)\n        current-pos (cursor/pos input)\n        value (gobj/get input \"value\")\n        right (outliner-core/get-right-node (outliner-core/block current-block))\n        current-block-has-children? (db/has-children? (:block/uuid current-block))\n        collapsed? (util/collapsed? current-block)\n        first-child (:data (tree/-get-down (outliner-core/block current-block)))\n        next-block (if (or collapsed? (not current-block-has-children?))\n                     (:data right)\n                     first-child)]\n    (cond\n      (and collapsed? right (db/has-children? (tree/-get-id right)))\n      nil\n\n      (and (not collapsed?) first-child (db/has-children? (:block/uuid first-child)))\n      nil\n\n      :else\n      (do\n        (delete-block-aux! next-block false)\n        (state/set-edit-content! input-id (str value \"\" (:block/content next-block)))\n        (cursor/move-cursor-to input current-pos)))))\n\n(defn keydown-delete-handler\n  [_e]\n  (let [^js input (state/get-input)\n        current-pos (cursor/pos input)\n        value (gobj/get input \"value\")\n        end? (= current-pos (count value))\n        current-block (state/get-edit-block)\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)]\n    (when current-block\n      (cond\n        (not= selected-start selected-end)\n        (delete-and-update input selected-start selected-end)\n\n        (and end? current-block)\n        (delete-concat current-block)\n\n        :else\n        (delete-and-update input current-pos (inc current-pos))))))\n\n(defn keydown-backspace-handler\n  [cut? e]\n  (let [^js input (state/get-input)\n        id (state/get-edit-input-id)\n        current-pos (cursor/pos input)\n        value (gobj/get input \"value\")\n        deleted (and (> current-pos 0)\n                     (util/nth-safe value (dec current-pos)))\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)\n        block (state/get-edit-block)\n        repo (state/get-current-repo)\n        top-block? (= (:block/left block) (:block/page block))\n        root-block? (= (:block/container block) (str (:block/uuid block)))]\n    (mark-last-input-time! repo)\n    (cond\n      (not= selected-start selected-end)\n      (do\n        (util/stop e)\n        (when cut?\n          (js/document.execCommand \"copy\"))\n        (delete-and-update input selected-start selected-end))\n\n      (zero? current-pos)\n      (do\n        (util/stop e)\n        (when (and (if top-block? (string/blank? value) true)\n                   (not root-block?))\n          (delete-block! repo false)))\n\n      (and (> current-pos 1)\n           (= (util/nth-safe value (dec current-pos)) (state/get-editor-command-trigger)))\n      (do\n        (util/stop e)\n        (reset! *slash-caret-pos nil)\n        (reset! *show-commands false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      (and (> current-pos 1)\n           (= (util/nth-safe value (dec current-pos)) commands/angle-bracket))\n      (do\n        (util/stop e)\n        (reset! *angle-bracket-caret-pos nil)\n        (reset! *show-block-commands false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; pair\n      (and\n       deleted\n       (contains?\n        (set (keys delete-map))\n        deleted)\n       (>= (count value) (inc current-pos))\n       (= (util/nth-safe value current-pos)\n          (get delete-map deleted)))\n\n      (do\n        (util/stop e)\n        (commands/delete-pair! id)\n        (cond\n          (and (= deleted \"[\") (state/get-editor-show-page-search?))\n          (state/set-editor-show-page-search! false)\n\n          (and (= deleted \"(\") (state/get-editor-show-block-search?))\n          (state/set-editor-show-block-search! false)\n\n          :else\n          nil))\n\n      ;; deleting hashtag\n      (and (= deleted \"#\") (state/get-editor-show-page-search-hashtag?))\n      (do\n        (state/set-editor-show-page-search-hashtag! false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; just delete\n      :else\n      (when-not (mobile-util/native-ios?)\n        (util/stop e)\n        (delete-and-update\n         input (util/safe-dec-current-pos-from-end (.-value input) current-pos) current-pos)))))\n\n(defn indent-outdent\n  [indent?]\n  (state/set-editor-op! :indent-outdent)\n  (let [pos (some-> (state/get-input) cursor/pos)\n        {:keys [block]} (get-state)]\n    (when block\n      (state/set-editor-last-pos! pos)\n      (outliner-tx/transact!\n        {:outliner-op :move-blocks\n         :real-outliner-op :indent-outdent}\n        (save-current-block!)\n        (outliner-core/indent-outdent-blocks! [block] indent?)))\n    (state/set-editor-op! :nil)))\n\n(defn keydown-tab-handler\n  [direction]\n  (fn [e]\n    (cond\n      (state/editing?)\n      (when (and (not (state/get-editor-show-input))\n                 (not (state/get-editor-show-date-picker?))\n                 (not (state/get-editor-show-template-search?)))\n        (util/stop e)\n        (indent-outdent (not (= :left direction))))\n\n      (state/selection?)\n      (do\n        (util/stop e)\n        (on-tab direction)))\n    nil))\n\n(defn keydown-not-matched-handler\n  [format]\n  (fn [e _key-code]\n    (let [input-id (state/get-edit-input-id)\n          input (state/get-input)\n          key (gobj/get e \"key\")\n          value (gobj/get input \"value\")\n          ctrlKey (gobj/get e \"ctrlKey\")\n          metaKey (gobj/get e \"metaKey\")\n          pos (cursor/pos input)\n          hashtag? (or (surround-by? input \"#\" \" \")\n                       (surround-by? input \"#\" :end)\n                       (= key \"#\"))]\n      (cond\n        (and (util/event-is-composing? e true) ;; #3218\n             (not hashtag?) ;; #3283 @Rime\n             (not (state/get-editor-show-page-search-hashtag?))) ;; #3283 @MacOS pinyin\n        nil\n\n        (or ctrlKey metaKey)\n        nil\n\n        ;; FIXME: On mobile, a backspace click to call keydown-backspace-handler\n        ;; does not work if cursor is at the beginning of a block, hence the block\n        ;; can't be deleted. Need to figure out why and find a better solution.\n        (and (mobile-util/native-platform?)\n             (= key \"Backspace\")\n             (zero? pos))\n        (do\n          (util/stop e)\n          (let [block (state/get-edit-block)\n                top-block? (= (:block/left block) (:block/page block))\n                root-block? (= (:block/container block) (str (:block/uuid block)))\n                repo (state/get-current-repo)]\n           (when (and (if top-block? (string/blank? value) true)\n                      (not root-block?))\n             (delete-block! repo false))))\n\n        (and (= key \"#\")\n             (and (> pos 0)\n                  (= \"#\" (util/nth-safe value (dec pos)))))\n        (state/set-editor-show-page-search-hashtag! false)\n\n        (and (contains? (set/difference (set (keys reversed-autopair-map))\n                                        #{\"`\"})\n                        key)\n         (= (get-current-input-char input) key))\n        (do (util/stop e)\n            (cursor/move-cursor-forward input))\n\n        (and (autopair-when-selected key) (string/blank? (util/get-selected-text)))\n        nil\n\n        (and (not (string/blank? (util/get-selected-text)))\n             (contains? keycode/left-square-brackets-keys key))\n        (do (autopair input-id \"[\" format nil)\n            (util/stop e))\n\n        (and (not (string/blank? (util/get-selected-text)))\n             (contains? keycode/left-paren-keys key))\n        (do (util/stop e)\n            (autopair input-id \"(\" format nil))\n\n        (contains? (set (keys autopair-map)) key)\n        (do (util/stop e)\n            (autopair input-id key format nil))\n\n        hashtag?\n        (do\n          (commands/handle-step [:editor/search-page-hashtag])\n          (if (= key \"#\")\n            (state/set-editor-last-pos! (inc (cursor/pos input))) ;; In keydown handler, the `#` is not inserted yet.\n            (state/set-editor-last-pos! (cursor/pos input)))\n          (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n        (let [sym \"$\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands/simple-insert! input-id \"$$\" {:backward-pos 2})\n\n        (let [sym \"^\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands/simple-insert! input-id \"^^\" {:backward-pos 2})\n\n        :else\n        nil))))\n\n(defn ^:large-vars/cleanup-todo keyup-handler\n  [_state input input-id search-timeout]\n  (fn [e key-code]\n    (when-not (util/event-is-composing? e)\n      (let [k (gobj/get e \"key\")\n            code (gobj/getValueByKeys e \"event_\" \"code\")\n            format (:format (get-state))\n            current-pos (cursor/pos input)\n            value (gobj/get input \"value\")\n            c (util/nth-safe value (dec current-pos))\n            last-key-code (state/get-last-key-code)\n            blank-selected? (string/blank? (util/get-selected-text))\n            is-processed? (util/event-is-composing? e true) ;; #3440\n            non-enter-processed? (and is-processed? ;; #3251\n                                      (not= code keycode/enter-code))] ;; #3459\n        (when-not (or (state/get-editor-show-input) non-enter-processed?)\n          (cond\n            (and (not (contains? #{\"ArrowDown\" \"ArrowLeft\" \"ArrowRight\" \"ArrowUp\"} k))\n                 (not (:editor/show-page-search? @state/state))\n                 (not (:editor/show-page-search-hashtag? @state/state))\n                 (wrapped-by? input \"[[\" \"]]\"))\n            (let [orig-pos (cursor/get-caret-pos input)\n                  value (gobj/get input \"value\")\n                  square-pos (string/last-index-of (subs value 0 (:pos orig-pos)) \"[[\")\n                  pos (+ square-pos 2)\n                  _ (state/set-editor-last-pos! pos)\n                  pos (assoc orig-pos :pos pos)\n                  command-step (if (= \\# (util/nth-safe value (dec square-pos)))\n                                 :editor/search-page-hashtag\n                                 :editor/search-page)]\n              (commands/handle-step [command-step])\n              (reset! commands/*slash-caret-pos pos))\n\n            (and blank-selected?\n                 (contains? keycode/left-square-brackets-keys k)\n                 (= (:key last-key-code) k)\n                 (> current-pos 0)\n                 (not (wrapped-by? input \"[[\" \"]]\")))\n            (do\n              (commands/handle-step [:editor/input \"[[]]\" {:backward-truncate-number 2\n                                                           :backward-pos 2}])\n              (commands/handle-step [:editor/search-page])\n              (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n            (and blank-selected?\n                 (contains? keycode/left-paren-keys k)\n                 (= (:key last-key-code) k)\n                 (> current-pos 0)\n                 (not (wrapped-by? input \"((\" \"))\")))\n            (do\n              (commands/handle-step [:editor/input \"(())\" {:backward-truncate-number 2\n                                                           :backward-pos 2}])\n              (commands/handle-step [:editor/search-block :reference])\n              (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n            (and (= \"\u3008\" c)\n                 (= \"\u300a\" (util/nth-safe value (dec (dec current-pos))))\n                 (> current-pos 0))\n            (do\n              (commands/handle-step [:editor/input commands/angle-bracket {:last-pattern \"\u300a\u3008\"\n                                                                           :backward-pos 0}])\n              (reset! commands/*angle-bracket-caret-pos (cursor/get-caret-pos input))\n              (reset! commands/*show-block-commands true))\n\n            (and (= c \" \")\n                 (or (= (util/nth-safe value (dec (dec current-pos))) \"#\")\n                     (not (state/get-editor-show-page-search?))\n                     (and (state/get-editor-show-page-search?)\n                          (not= (util/nth-safe value current-pos) \"]\"))))\n            (state/set-editor-show-page-search-hashtag! false)\n\n            (and @*show-commands (not= k (state/get-editor-command-trigger)))\n            (let [matched-commands (get-matched-commands input)]\n              (if (seq matched-commands)\n                (do\n                  (reset! *show-commands true)\n                  (reset! commands/*matched-commands matched-commands))\n                (reset! *show-commands false)))\n\n            (and @*show-block-commands (not= key-code 188)) ; not <\n            (let [matched-block-commands (get-matched-block-commands input)]\n              (if (seq matched-block-commands)\n                (cond\n                  (= key-code 9)       ;tab\n                  (when @*show-block-commands\n                    (util/stop e)\n                    (insert-command! input-id\n                                     (last (first matched-block-commands))\n                                     format\n                                     {:last-pattern commands/angle-bracket}))\n\n                  :else\n                  (reset! commands/*matched-block-commands matched-block-commands))\n                (reset! *show-block-commands false)))\n\n            (nil? @search-timeout)\n            (close-autocomplete-if-outside input)\n\n            :else\n            nil))\n        (when-not (or (= k \"Shift\") is-processed?)\n          (state/set-last-key-code! {:key-code key-code\n                                     :code code\n                                     :key k\n                                     :shift? (.-shiftKey e)}))))))\n\n(defn editor-on-click!\n  [id]\n  (fn [_e]\n    (let [input (gdom/getElement id)]\n      (util/scroll-editor-cursor input)\n      (close-autocomplete-if-outside input))))\n\n(defn editor-on-change!\n  [block id search-timeout]\n  (fn [e]\n    (if (state/sub :editor/show-block-search?)\n      (let [timeout 300]\n        (when @search-timeout\n          (js/clearTimeout @search-timeout))\n        (reset! search-timeout\n                (js/setTimeout\n                 #(edit-box-on-change! e block id)\n                 timeout)))\n      (let [input (gdom/getElement id)]\n        (edit-box-on-change! e block id)\n        (util/scroll-editor-cursor input)))))\n\n(defn- paste-text-parseable\n  [format text]\n  (when-let [editing-block (state/get-edit-block)]\n    (let [page-id (:db/id (:block/page editing-block))\n          blocks (block/extract-blocks\n                  (mldoc/->edn text (gp-mldoc/default-config format)) text true format)\n          blocks' (gp-block/with-parent-and-left page-id blocks)]\n      (paste-blocks blocks' {}))))\n\n(defn- paste-segmented-text\n  [format text]\n  (let [paragraphs (string/split text #\"(?:\\r?\\n){2,}\")\n        updated-paragraphs\n        (string/join \"\\n\"\n                     (mapv (fn [p] (->> (string/trim p)\n                                        ((fn [p]\n                                           (if (util/safe-re-find (if (= format :org)\n                                                                    #\"\\s*\\*+\\s+\"\n                                                                    #\"\\s*-\\s+\") p)\n                                             p\n                                             (str (if (= format :org) \"* \" \"- \") p))))))\n                           paragraphs))]\n    (paste-text-parseable format updated-paragraphs)))\n\n(defn- get-all-blocks-by-ids\n  [repo ids]\n  (loop [ids ids\n         result []]\n    (if (seq ids)\n      (let [blocks (db/get-block-and-children repo (first ids))\n            result (vec (concat result blocks))]\n        (recur (remove (set (map :block/uuid result)) (rest ids)) result))\n      result)))\n\n(defn wrap-macro-url\n  [url]\n  (cond\n    (boolean (text/get-matched-video url))\n    (util/format \"{{video %s}}\" url)\n\n    (string/includes? url \"twitter.com\")\n    (util/format \"{{twitter %s}}\" url)\n\n    :else\n    (notification/show! (util/format \"No macro is available for %s\" url) :warning)))\n\n(defn- paste-copied-blocks-or-text\n  [text e]\n  (let [copied-blocks (state/get-copied-blocks)\n        copied-block-ids (:copy/block-ids copied-blocks)\n        copied-graph (:copy/graph copied-blocks)\n        input (state/get-input)\n        *stop-event? (atom true)]\n    (cond\n      ;; Internal blocks by either copy or cut blocks\n      (and\n       (= copied-graph (state/get-current-repo))\n       (or (seq copied-block-ids)\n           (seq (:copy/full-blocks copied-blocks)))\n       text\n       ;; not copied from the external clipboard\n       (= (string/replace (string/trim text) \"\\r\" \"\")\n          (string/replace (string/trim (or (:copy/content copied-blocks) \"\")) \"\\r\" \"\")))\n      (let [blocks (or\n                    (:copy/full-blocks copied-blocks)\n                    (get-all-blocks-by-ids (state/get-current-repo) copied-block-ids))]\n        (when (seq blocks)\n          (state/set-copied-full-blocks! blocks)\n          (paste-blocks blocks {})))\n\n      (and (gp-util/url? text)\n           (not (string/blank? (util/get-selected-text))))\n      (html-link-format! text)\n\n      (and (text/block-ref? text)\n           (wrapped-by? input \"((\" \"))\"))\n      (commands/simple-insert! (state/get-edit-input-id) (text/get-block-ref text) nil)\n\n      :else\n      ;; from external\n      (let [format (or (db/get-page-format (state/get-current-page)) :markdown)]\n        (match [format\n                (nil? (util/safe-re-find #\"(?m)^\\s*(?:[-+*]|#+)\\s+\" text))\n                (nil? (util/safe-re-find #\"(?m)^\\s*\\*+\\s+\" text))\n                (nil? (util/safe-re-find #\"(?:\\r?\\n){2,}\" text))]\n          [:markdown false _ _]\n          (paste-text-parseable format text)\n\n          [:org _ false _]\n          (paste-text-parseable format text)\n\n          [:markdown true _ false]\n          (paste-segmented-text format (string/trim text))\n\n          [:markdown true _ true]\n          (reset! *stop-event? false)\n\n          [:org _ true false]\n          (paste-segmented-text format (string/trim text))\n\n          [:org _ true true]\n          (reset! *stop-event? false))))\n    (when @*stop-event?\n      (util/stop e))))\n\n(defn paste-text-in-one-block-at-point\n  []\n  (utils/getClipText\n   (fn [clipboard-data]\n     (when-let [_ (state/get-input)]\n       (let [data (if (gp-util/url? clipboard-data)\n                        (wrap-macro-url clipboard-data)\n                        clipboard-data)]\n             (state/append-current-edit-content! data))))\n   (fn [error]\n     (js/console.error error))))\n\n(defn editor-on-paste!\n  [id]\n  (fn [e]\n    (state/set-state! :editor/on-paste? true)\n    (let [text (.getData (gobj/get e \"clipboardData\") \"text\")\n          input (state/get-input)]\n      (if-not (string/blank? text)\n        (if (or (thingatpt/markdown-src-at-point input)\n                (thingatpt/org-admonition&src-at-point input))\n          (when-not (mobile-util/native-ios?)\n            (util/stop e)\n            (paste-text-in-one-block-at-point))\n          (paste-copied-blocks-or-text text e))\n        (let [_handled\n              (let [clipboard-data (gobj/get e \"clipboardData\")\n                    files (.-files clipboard-data)]\n                (when-let [file (first files)]\n                  (when-let [block (state/get-edit-block)]\n                    (upload-asset id #js[file] (:block/format block) *asset-uploading? true))))]\n          (util/stop e))))))\n\n(defn- cut-blocks-and-clear-selections!\n  [copy?]\n  (cut-selection-blocks copy?)\n  (clear-selection!))\n\n(defn shortcut-copy-selection\n  [_e]\n  (copy-selection-blocks))\n\n(defn shortcut-cut-selection\n  [e]\n  (util/stop e)\n  (cut-blocks-and-clear-selections! true))\n\n(defn shortcut-delete-selection\n  [e]\n  (util/stop e)\n  (cut-blocks-and-clear-selections! false))\n\n;; credits to @pengx17\n(defn- copy-current-block-ref\n  []\n  (when-let [current-block (state/get-edit-block)]\n    (when-let [block-id (:block/uuid current-block)]\n      (copy-block-ref! block-id #(str \"((\" % \"))\"))\n      (notification/show!\n       [:div\n        [:span.mb-1.5 \"Block ref copied!\"]\n        [:div [:code.whitespace-nowrap (str \"((\" block-id \"))\")]]]\n       :success true\n       ;; use uuid to make sure there is only one toast a time\n       (str \"copied-block-ref:\" block-id)))))\n\n(defn shortcut-copy\n  \"shortcut copy action:\n  * when in selection mode, copy selected blocks\n  * when in edit mode but no text selected, copy current block ref\n  * when in edit mode with text selected, copy selected text as normal\"\n  [e]\n  (when-not (auto-complete?)\n    (cond\n      (state/selection?)\n      (shortcut-copy-selection e)\n\n      (state/editing?)\n      (let [input (state/get-input)\n            selected-start (util/get-selection-start input)\n            selected-end (util/get-selection-end input)]\n        (if (= selected-start selected-end)\n          (copy-current-block-ref)\n          (js/document.execCommand \"copy\")))\n\n      :else\n      (js/document.execCommand \"copy\"))))\n\n(defn shortcut-cut\n  \"shortcut cut action:\n  * when in selection mode, cut selected blocks\n  * when in edit mode with text selected, cut selected text\n  * otherwise same as delete shortcut\"\n  [e]\n  (cond\n    (state/selection?)\n    (shortcut-cut-selection e)\n\n    (state/editing?)\n    (keydown-backspace-handler true e)))\n\n(defn delete-selection\n  [e]\n  (when (state/selection?)\n    (shortcut-delete-selection e)))\n\n(defn editor-delete\n  [_state e]\n  (when (state/editing?)\n    (util/stop e)\n    (keydown-delete-handler e)))\n\n(defn editor-backspace\n  [_state e]\n  (when (state/editing?)\n    (keydown-backspace-handler false e)))\n\n(defn shortcut-up-down [direction]\n  (fn [e]\n    (when-not (auto-complete?)\n      (util/stop e)\n      (cond\n        (state/editing?)\n        (keydown-up-down-handler direction)\n\n        (and (state/selection?) (== 1 (count (state/get-selection-blocks))))\n        (select-up-down direction)\n\n        :else\n        (select-first-last direction)))))\n\n(defn shortcut-select-up-down [direction]\n  (fn [e]\n    (util/stop e)\n    (if (state/editing?)\n      (let [input (state/get-input)\n            selected-start (util/get-selection-start input)\n            selected-end (util/get-selection-end input)\n            [anchor cursor] (case (util/get-selection-direction input)\n                              \"backward\" [selected-end selected-start]\n                              [selected-start selected-end])\n            cursor-rect (cursor/get-caret-pos input cursor)]\n        (if\n          ;; if the move is to cross block boundary, select the whole block\n         (or (and (= direction :up) (cursor/textarea-cursor-rect-first-row? cursor-rect))\n             (and (= direction :down) (cursor/textarea-cursor-rect-last-row? cursor-rect)))\n          (select-block-up-down direction)\n          ;; simulate text selection\n          (cursor/select-up-down input direction anchor cursor-rect)))\n      (select-block-up-down direction))))\n\n(defn open-selected-block!\n  [direction e]\n  (when-let [block-id (some-> (state/get-selection-blocks)\n                              first\n                              (dom/attr \"blockid\")\n                              uuid)]\n    (util/stop e)\n    (let [block    {:block/uuid block-id}\n          block-id (-> (state/get-selection-blocks)\n                       first\n                       (gobj/get \"id\")\n                       (string/replace \"ls-block\" \"edit-block\"))\n          left?    (= direction :left)]\n      (edit-block! block\n                   (if left? 0 :max)\n                   block-id))))\n\n(defn shortcut-left-right [direction]\n  (fn [e]\n    (when-not (auto-complete?)\n      (cond\n        (state/editing?)\n        (do\n          (util/stop e)\n          (keydown-arrow-handler direction))\n\n        (and (state/selection?) (== 1 (count (state/get-selection-blocks))))\n        (do\n          (util/stop e)\n          (open-selected-block! direction e))\n\n        :else\n        nil))))\n\n(defn clear-block-content! []\n  (save-current-block! {:force? true})\n  (state/set-edit-content! (state/get-edit-input-id) \"\"))\n\n(defn kill-line-before! []\n  (save-current-block! {:force? true})\n  (util/kill-line-before! (state/get-input)))\n\n(defn kill-line-after! []\n  (save-current-block! {:force? true})\n  (util/kill-line-after! (state/get-input)))\n\n(defn beginning-of-block []\n  (cursor/move-cursor-to (state/get-input) 0))\n\n(defn end-of-block []\n  (cursor/move-cursor-to-end (state/get-input)))\n\n(defn cursor-forward-word []\n  (cursor/move-cursor-forward-by-word (state/get-input)))\n\n(defn cursor-backward-word []\n  (cursor/move-cursor-backward-by-word (state/get-input)))\n\n(defn backward-kill-word []\n  (let [input (state/get-input)]\n    (save-current-block! {:force? true})\n    (util/backward-kill-word input)\n    (state/set-edit-content! (state/get-edit-input-id) (.-value input))))\n\n(defn forward-kill-word []\n  (let [input (state/get-input)]\n    (save-current-block! {:force? true})\n    (util/forward-kill-word input)\n    (state/set-edit-content! (state/get-edit-input-id) (.-value input))))\n\n(defn block-with-title?\n  [format content semantic?]\n  (and (string/includes? content \"\\n\")\n       (if semantic?\n         (let [ast (mldoc/->edn content (gp-mldoc/default-config format))\n               first-elem-type (first (ffirst ast))]\n           (mldoc/block-with-title? first-elem-type))\n         true)))\n\n(defn collapsable?\n  ([block-id]\n   (collapsable? block-id {}))\n  ([block-id {:keys [semantic?]\n              :or {semantic? false}}]\n   (when block-id\n     (if-let [block (db-model/query-block-by-uuid block-id)]\n       (and\n        (not (util/collapsed? block))\n        (or (db-model/has-children? block-id)\n            (and\n             (:outliner/block-title-collapse-enabled? (state/get-config))\n             (block-with-title? (:block/format block)\n                                (:block/content block)\n                                semantic?))))\n       false))))\n\n(defn all-blocks-with-level\n  \"Return all blocks associated with correct level\n   if :root-block is not nil, only return root block with its children\n   if :expanded? true, return expanded children\n   if :collapse? true, return without any collapsed children\n   if :incremental? true, collapse/expand will be step by step\n   for example:\n   - a\n    - b (collapsed)\n     - c\n     - d\n    - e\n   return:\n    blocks\n    [{:block a :level 1}\n     {:block b :level 2}\n     {:block e :level 2}]\"\n  [{:keys [collapse? expanded? incremental? root-block]\n    :or {collapse? false expanded? false incremental? true root-block nil}}]\n  (when-let [page (or (state/get-current-page)\n                      (date/today))]\n    (let [block-id (or root-block (parse-uuid page))\n          blocks (if block-id\n                   (db/get-block-and-children (state/get-current-repo) block-id)\n                   (db/get-page-blocks-no-cache page))\n          root-block (or block-id root-block)]\n      (if incremental?\n        (let [blocks (tree/blocks->vec-tree blocks (or block-id page))]\n          (->>\n           (cond->> blocks\n             root-block\n             (map (fn find [root]\n                    (if (= root-block (:block/uuid root))\n                      root\n                      (first (filter find (:block/children root []))))))\n\n             collapse?\n             (w/postwalk\n              (fn [b]\n                (if (and (map? b)\n                         (util/collapsed? b)\n                         (not= root-block (:block/uuid b)))\n                  (assoc b :block/children []) b)))\n\n             true\n             (mapcat (fn [x] (tree-seq map? :block/children x)))\n\n             expanded?\n             (filter (fn [b] (collapsable? (:block/uuid b))))\n\n             true\n             (map (fn [x] (dissoc x :block/children))))\n           (remove nil?)))\n\n        (cond->> blocks\n          collapse?\n          (filter util/collapsed?)\n\n          expanded?\n          (filter (fn [b] (collapsable? (:block/uuid b))))\n\n          true\n          (remove nil?))))))\n\n(defn- skip-collapsing-in-db?\n  []\n  (let [config (last (state/get-editor-args))]\n    (:ref? config)))\n\n(defn- set-blocks-collapsed!\n  [block-ids value]\n  (let [block-ids (map (fn [block-id] (if (string? block-id) (uuid block-id) block-id)) block-ids)\n        repo (state/get-current-repo)\n        value (boolean value)]\n    (when repo\n      (outliner-tx/transact!\n        {:outliner-op :collapse-expand-blocks}\n        (doseq [block-id block-ids]\n          (when-let [block (db/entity [:block/uuid block-id])]\n            (let [current-value (:block/collapsed? block)]\n              (when-not (= current-value value)\n                (let [block {:block/uuid block-id\n                             :block/collapsed? value}]\n                  (outliner-core/save-block! block)))))))\n      (let [block-id (first block-ids)\n            input-pos (or (state/get-edit-pos) :max)]\n        ;; update editing input content\n        (when-let [editing-block (state/get-edit-block)]\n          (when (= (:block/uuid editing-block) block-id)\n            (edit-block! editing-block\n                         input-pos\n                         (state/get-edit-input-id))))))))\n\n(defn collapse-block! [block-id]\n  (when (collapsable? block-id)\n    (when-not (skip-collapsing-in-db?)\n      (set-blocks-collapsed! [block-id] true)))\n  (state/set-collapsed-block! block-id true))\n\n(defn expand-block! [block-id]\n  (when-not (skip-collapsing-in-db?)\n    (set-blocks-collapsed! [block-id] false)\n    (state/set-collapsed-block! block-id false)))\n\n(defn expand!\n  ([e] (expand! e false))\n  ([e clear-selection?]\n   (util/stop e)\n   (cond\n     (state/editing?)\n     (when-let [block-id (:block/uuid (state/get-edit-block))]\n       (expand-block! block-id))\n\n     (state/selection?)\n     (do\n       (->> (get-selected-blocks)\n            (map (fn [dom]\n                   (-> (dom/attr dom \"blockid\")\n                       uuid\n                       expand-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n     :else\n     ;; expand one level\n     (let [blocks-with-level (all-blocks-with-level {})\n           max-level (or (apply max (map :block/level blocks-with-level)) 99)]\n       (loop [level 1]\n         (if (> level max-level)\n           nil\n           (let [blocks-to-expand (->> blocks-with-level\n                                       (filter (fn [b] (= (:block/level b) level)))\n                                       (filter util/collapsed?))]\n             (if (empty? blocks-to-expand)\n               (recur (inc level))\n               (doseq [{:block/keys [uuid]} blocks-to-expand]\n                 (expand-block! uuid))))))))))\n\n(defn collapse!\n  ([e] (collapse! e false))\n  ([e clear-selection?]\n   (when e (util/stop e))\n   (cond\n     (state/editing?)\n     (when-let [block-id (:block/uuid (state/get-edit-block))]\n       (collapse-block! block-id))\n\n     (state/selection?)\n     (do\n       (->> (get-selected-blocks)\n            (map (fn [dom]\n                   (-> (dom/attr dom \"blockid\")\n                       uuid\n                       collapse-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n\n     :else\n     ;; collapse by one level from outside\n     (let [blocks-with-level\n           (all-blocks-with-level {:collapse? true})\n           max-level (or (apply max (map :block/level blocks-with-level)) 99)]\n       (loop [level max-level]\n         (if (zero? level)\n           nil\n           (let [blocks-to-collapse\n                 (->> blocks-with-level\n                      (filter (fn [b] (= (:block/level b) level)))\n                      (filter (fn [b] (collapsable? (:block/uuid b)))))]\n             (if (empty? blocks-to-collapse)\n               (recur (dec level))\n               (doseq [{:block/keys [uuid]} blocks-to-collapse]\n                 (collapse-block! uuid))))))))))\n\n(defn collapse-all!\n  ([]\n   (collapse-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :expanded? true\n                                        :root-block block-id})\n         block-ids (map :block/uuid blocks)]\n     (set-blocks-collapsed! block-ids true))))\n\n(defn expand-all!\n  ([]\n   (expand-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :collapse? true\n                                        :root-block block-id})\n         block-ids (map :block/uuid blocks)]\n     (set-blocks-collapsed! block-ids false))))\n\n(defn toggle-open! []\n  (let [all-expanded? (empty? (all-blocks-with-level {:incremental? false\n                                                      :collapse? true}))]\n    (if all-expanded?\n      (collapse-all!)\n      (expand-all!))))\n\n(defn select-all-blocks!\n  []\n  (if-let [current-input-id (state/get-edit-input-id)]\n    (let [input (gdom/getElement current-input-id)\n          blocks-container (util/rec-get-blocks-container input)\n          blocks (dom/by-class blocks-container \"ls-block\")]\n      (state/exit-editing-and-set-selected-blocks! blocks))\n    (->> (all-blocks-with-level {:collapse? true})\n         (map (comp gdom/getElementByClass str :block/uuid))\n         state/exit-editing-and-set-selected-blocks!)))\n\n(defn escape-editing\n  ([]\n   (escape-editing true))\n  ([select?]\n   (when (state/editing?)\n     (if select?\n       (->> (:block/uuid (state/get-edit-block))\n            select-block!)\n       (state/clear-edit!)))))\n\n(defn replace-block-reference-with-content-at-point\n  []\n  (when-let [{:keys [start end link]} (thingatpt/block-ref-at-point)]\n    (when-let [block (db/pull [:block/uuid link])]\n      (let [block-content (:block/content block)\n            format (or (:block/format block) :markdown)\n            block-content-without-prop (-> (property/remove-properties format block-content)\n                                           (drawer/remove-logbook))]\n        (when-let [input (state/get-input)]\n          (when-let [current-block-content (gobj/get input \"value\")]\n            (let [block-content* (str (subs current-block-content 0 start)\n                                      block-content-without-prop\n                                      (subs current-block-content end))]\n              (state/set-block-content-and-last-pos! input block-content* 1))))))))\n\n(defn copy-current-ref\n  [block-id]\n  (when block-id\n    (util/copy-to-clipboard! (util/format \"((%s))\" (str block-id)))))\n\n(defn delete-current-ref!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (re-pattern (str \"\\\\s?\" (util/format \"\\\\(\\\\(%s\\\\)\\\\)\" (str ref-id))))\n          content (string/replace-first (:block/content block) match \"\")]\n      (save-block! (state/get-current-repo)\n                   (:block/uuid block)\n                   content))))\n\n(defn replace-ref-with-text!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (util/format \"((%s))\" (str ref-id))\n          ref-block (db/entity [:block/uuid ref-id])\n          block-ref-content (->> (or (:block/content ref-block)\n                                     \"\")\n                                 (property/remove-built-in-properties (:block/format ref-block))\n                                 (drawer/remove-logbook))\n          content (string/replace-first (:block/content block) match\n                                        block-ref-content)]\n      (save-block! (state/get-current-repo)\n                   (:block/uuid block)\n                   content))))\n\n(defn replace-ref-with-embed!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (util/format \"((%s))\" (str ref-id))\n          content (string/replace-first (:block/content block) match\n                                        (util/format \"{{embed ((%s))}}\"\n                                                     (str ref-id)))]\n      (save-block! (state/get-current-repo)\n                   (:block/uuid block)\n                   content))))\n\n(defn block-default-collapsed?\n  \"Whether a block should be collapsed by default.\n  Currently, this handles several cases:\n  1. References.\n  2. Custom queries.\"\n  [block config]\n  (or\n   (and\n    (or (:ref? config) (:custom-query? config))\n    (>= (inc (:block/level block))\n        (state/get-ref-open-blocks-level))\n    ;; has children\n    (first (:block/_parent (db/entity (:db/id block)))))\n   (util/collapsed? block)))\n"]}