{"version":3,"sources":["frontend/handler/editor.cljs"],"mappings":";;;;;AA4DA,GAAA,QAAAA,qCAAAC,6CAAAC,oDAAAC;AAAA;AAAA,AAAA,AAASC,uDAAkB,6CAAA,7CAACC;;AAC5B,GAAA,QAAAL,qCAAAC,6CAAAC,oDAAAI;AAAA;AAAA,AAAA,AAASC,wDAAyB,6CAAA,7CAACF;;AACnC,GAAA,QAAAL,qCAAAC,6CAAAC,oDAAAM;AAAA;AAAA,AAAA,AAASC,8CAAe,6CAAA,7CAACJ;;AAEzB,mDAAA,nDAAOK;AAAP,AAEE,IAAAC,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAM,AAAA,6FAAaA;AAAnB,AACE,IAAAD,yBAAmB,AAACI;AAApB,AAAA,oBAAAJ;AAAA,AAAA,cAAAA,VAAWG;AAAX,AACE,IAAAH,yBAAiB,AAACM,oBAAgBH;AAAlC,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAME,kBAAgB,AAACC,kCAAyBH;IAC1CI,gBAAc,AAACC,gCAAuBL;IACtCM,QAAM,0DAAA,1DAACC,oDAASP;IAChBQ,YAAU,kFAAA,kFAAA,lKAAM,AAACC,gDAAKP,gBAAgBE,gBAC1B,AAACM,6CAAKJ,MAAMJ,gBAAgBE;IACxCF,sBAAgB,CAAGA,kBACA,AAACS,gBAAM,mDAAA,WAAAC,9DAACC;AAAD,AAAa,oDAAA,IAAAD,jDAACE;GAASN;IACjDJ,oBAAc,CAAGA,gBACA,AAACO,gBAAM,mDAAA,WAAAI,9DAACF;AAAD,AAAa,oDAAA,IAAAE,jDAACD;GAAS,AAACE,kBAAQR;AAR9D,AAAA,kDAAA,+FAAA,wFAAA,5GASoBN,0FACFE,gFACJ,iBAAAa,YAAQT;AAAR,AAAA,GAAA,CAAAS,aAAA;AAAA;;AAAA,2BAAAA,pBACQC;;KAZtB,kKAAA,4DAAA,4DAAA,mEAAA,nSAaW,AAAA,iGAAetB,6DAChBU,4DACAV,iEACEE,8DACFE;;AAlBZ;;;AADF;;;AADF;;;AADF;;;AAuBF,4CAAA,5CAAOmB,gGACJC;AADH,AAEE,IAAAzB,qBAAa,AAACD;AAAd,AAAA,oBAAAC;AAAA,AAAA,QAAAA,JAAW0B;AAAX,AACE,IAAAC,cAAmFD;IAAnFC,kBAAA,AAAAC,4BAAAD;sBAAA,AAAAE,4CAAAF,gBAAA,9EAAcpB;oBAAd,AAAAsB,4CAAAF,gBAAA,5EAA8BlB;aAA9B,AAAAoB,4CAAAF,gBAAA,rEAA4CG;gBAA5C,AAAAD,4CAAAF,gBAAA,xEAAmDd;YAAnD,AAAAgB,4CAAAF,gBAAA,pEAA6DhB;cAA7D,AAAAkB,4CAAAF,gBAAA,tEAAmExB;YAAnE,AAAA0B,4CAAAF,gBAAA,pEAA2EtB;IACrE0B,UAAQ,CAACN,2CAAAA,mDAAAA,VAAWK,+BAAAA;IACpBE,gBAAc,AAAChB,gBAAMe;IACrBE,iBAAe,AAAClB,6CAAKJ,MAAM,iBAAAuB,kBAAA;IAAAC,kBAAO,CAAG5B,kBAAgByB;AAA1B,AAAA,SAAAE,kBAAAC,mBAAAD,kBAAAC;KAA0C5B;IACrE6B,iBAAe,AAACrB,6CAAKJ,MAAMF,cAAc,iBAAA4B,kBAAK,AAACrB,gBAAML;IAAZ2B,kBAAmB,CAAG7B,gBAAcuB;AAApC,AAAA,SAAAK,kBAAAC,mBAAAD,kBAAAC;;IACzCC,yBAAiB,AAACpB,oDAAEY,QAAQE,iEAAeG;IAC3CI,SAAO,EAAID,wBACF,mDAAA,nDAACxB,6CAAKJ,UAAQ,CAAGJ,kBAAgByB,gBACjC,mDAAA,nDAACjB,6CAAKJ,UAAQJ;IACvBkC,UAAQ,EAAIF,wBACF,AAACxB,6CAAKJ,MAAM,CAAGF,gBAAcuB,gBAC7B,AAACjB,6CAAKJ,MAAMF;IACtBiC,cAAY,iBAAAC,YAAQ9B;AAAR,AAAA,GACE,GAAK0B;AACL,OAAA,WAAAK;AAAA,AAAE,yGAAAA,rDAAKb,oHAAUA;GAAjBY;;AAFFA;;;IAGZE,YAAU,CAAKL,mDAAOE,aAAYD;AAfxC,AAgBE,AAACK,oEAAwB3C,QAAQ0C;;AACjC,GACEN;AAAiB,OAACQ,sCAAwB1C,MAAM,CAAGE,kBAAgByB,eAAe,CAAGvB,gBAAcuB;;AADrG,oBAEEnB;AAAU,OAACmC,oCAAsB3C,MAAM,CAAGI,gBAAcuB;;AAF1D,AAGQ,OAACe,sCAAwB1C,MAAM,CAAGE,kBAAgByB,eAAe,CAAGvB,gBAAcuB;;;;;AArB9F;;;AAuBF,4CAAA,5CAAMiB;AAAN,AACE,OAACzB,0CAAa0B;;AAEhB,+CAAA,/CAAMC;AAAN,AACE,OAAC3B,0CAAa4B;;AAEhB,iDAAA,jDAAMC;AAAN,AACE,IAAArD,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAM6B,SAAO,AAAA,iGAAe7B;AAA5B,AACE,iDAAA,1CAACuB;AAAD,AAAe,OAAC8B,8BAAqBxB;;;AAFzC;;;AAIF,sDAAA,tDAAMyB;AAAN,AACE,OAAC/B,0CAAagC;;AAEhB,AAAA,iDAAA,yDAAAC,1GAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAAMD;AAAN,AAEG,oFAAA,7EAACE;;;AAFJ,CAAA,+EAAA,/EAAMF,0FAGFG;AAHJ,AAIG,IAAA9D,qBAAa,AAACD;AAAd,AAAA,oBAAAC;AAAA,AAAA,QAAAA,JAAW0B;AAAX,AACE,IAAAqC,cAAmFrC;IAAnFqC,kBAAA,AAAAnC,4BAAAmC;sBAAA,AAAAlC,4CAAAkC,gBAAA,9EAAcxD;oBAAd,AAAAsB,4CAAAkC,gBAAA,5EAA8BtD;aAA9B,AAAAoB,4CAAAkC,gBAAA,rEAA4CjC;gBAA5C,AAAAD,4CAAAkC,gBAAA,xEAAmDlD;YAAnD,AAAAgB,4CAAAkC,gBAAA,pEAA6DpD;cAA7D,AAAAkB,4CAAAkC,gBAAA,tEAAmE5D;YAAnE,AAAA0B,4CAAAkC,gBAAA,pEAA2E1D;IACrE6D,UAAQ,AAACC,yBAAW9D;IACpB+D,yBAAiB,AAACjD,6CAAEZ,gBAAgBE;IACpC4D,wBAAgB,iBAAAC,oBAAKzD;AAAL,AAAA,oBAAAyD;AAAe,SAAI,2CAAA,3CAACC,iCAAkB1D,0BACnB,2CAAA,3CAAC0D,iCAAkB1D;;AADtCyD;;;IAHtBN,cAK4B,iFAAA,+EAAA,6FAAA,3PACEI,wBACA,AAACM,+CAAsC5C,0BAEvCgC,MACA,AAACa,gCAAuB7C,OAAOjB,UAAUiD,wBAEzCO,uBACA,AAACO,kCAAyB9C,OAAOjB,WAGjC,AAACgE,mCAA0B/C,OAAOjB;;cAhBhE,AAAAoD,4CAAAD,YAAA,IAAA,tEAKOQ;kBALP,AAAAP,4CAAAD,YAAA,IAAA,1EAKeS;IAYT5B,YAAU,CACC,mDAAA,nDAAC9B,6CAAKJ,UAAQJ,6DACdiE,SACA,AAACzD,6CAAKJ,MAAMF;IACvByD,cAAQ,iBAAAY,mBAAIvE;AAAJ,AAAA,oBAAAuE;AAAAA;;AAAoBZ;;;AArBlC,AAsBE,AAACpB,oEAAwB3C,QAAQ0C;;AACjC,OAACG,oCAAsB3C,MAAM,CAAG6D,cAAQO;;AAxB5C;;;;AAJH,CAAA,yEAAA,zEAAMd;;AAAN,AA8BA,sDAAA,tDAAMoB,oHACHC;AADH,AAEE,oBAAMA;AAAN,AACE,IAAAhF,qBAAiB,iBAAAiF,YAAA,mFAAA,+DAAwBD;AAAxB,AAAA,4GAAAC,0CAAAA,9IAACC,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMkF,cAAM,sGAAA,rGAAM,AAAA,2FAAalF;AAA/B,AACE,OAACmF,uCACA,AAACC,kCACD,AAAA,mFAAQpF,OACR,eAAA,oDAAA,jEAAIkF;;AALT;;;AADF;;;AAQF,mDAAA,nDAAMG,8GACHC;AADH,AAEE,oBAAMA;AAAN,AACE,OAACC,sCAAwB,AAACC,0BAAiBF;;AAD7C;;;AAGF,mDAAA,nDAAMG,8GACHC,GAAGC;AADN,AAEE,IAAA5F,qBAAgB,AAACM,oBAAgB,4CAAKqF;AAAtC,AAAA,oBAAA3F;AAAA,AAAA,WAAAA,PAAWuF;AAAX,AACE,IAAMM,eAAa,AAACC;IACdC,MAAI,iBAAAjB,mBAAI,AAACkB;AAAL,AAAA,oBAAAlB;AAAAA;;AACI,IAAAR,oBAAKuB;AAAL,AAAA,oBAAAvB;AACK,OAAC2B,4BAAmBL,OAAOC;;AADhCvB;;;;AAFd,AAIE,AAACtB,oCAAsBuC,KAAKQ;;AAC5B,OAACG;;AANL;;;AAQF,gDAAA,hDAAMC,wGACHC;AADH,AAEE,IAAMC,SAAO,AAACC,kDAAU,AAACC,gCAAmC,4CAAKH;AAAjE,AACE,IAAAI,cAAA,AAAAC,cAAcJ;IAAdK,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,YAAA,AAAAD,mDAAAE,3DAAQ3G;AAAR,AAAA,AACE,+DAAA,/DAACkH,yDAAelH;;AADlB;AAAA,gBAAAuG;gBAAAE;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAA5G,qBAAA,AAAAyG,cAAAD;AAAA,AAAA,GAAAxG;AAAA,AAAA,IAAAwG,kBAAAxG;AAAA,AAAA,GAAA,AAAA6G,6BAAAL;AAAA,IAAAM,kBAAA,AAAAC,sBAAAP;AAAA,AAAA,gBAAA,AAAAQ,qBAAAR;gBAAAM;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,YAAA,AAAAG,gBAAAT,xBAAQvG;AAAR,AAAA,AACE,+DAAA,/DAACkH,yDAAelH;;AADlB;AAAA,gBAAA,AAAAiH,eAAAV;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;AAGJ,mDAAA,nDAAMY;AAAN,AAEE,IAAMf,SAAO,iBAAAgB,YAAS,AAACf,kDAAU,gCAAA,hCAACC;IAArBc,gBAAA,EAAA,CAAAA,aAAA,OAAA,KACS,+CAAA,IAAAA,nDAACC;AADV,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAES,sEAAAA,/DAACE,8CAAMC;;;AAF7B,AAGE,IAAAC,cAAA,AAAAhB,cAAcJ;IAAdqB,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,YAAA,AAAAD,mDAAAE,3DAAQ3H;AAAR,AAAA,AACE,8BAAA,9BAAC4H,wBAAoB5H;;AADvB;AAAA,gBAAAwH;gBAAAC;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAA5H,qBAAA,AAAAyG,cAAAgB;AAAA,AAAA,GAAAzH;AAAA,AAAA,IAAAyH,kBAAAzH;AAAA,AAAA,GAAA,AAAA6G,6BAAAY;AAAA,IAAAX,kBAAA,AAAAC,sBAAAU;AAAA,AAAA,gBAAA,AAAAT,qBAAAS;gBAAAX;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,YAAA,AAAAG,gBAAAQ,xBAAQxH;AAAR,AAAA,AACE,8BAAA,9BAAC4H,wBAAoB5H;;AADvB;AAAA,gBAAA,AAAAiH,eAAAO;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;AAGJ,0DAAA,1DAAOK,4HACJ9C;AADH,AAEE,IAAAhF,qBAAuB,AAACgI,oCAA2BhD;AAAnD,AAAA,oBAAAhF;AAAA,AAAA,kBAAAA,dAAW+H;AAAX,AACE,oGAAA,WAAA,xGAACE,uBAAe,gEAAA,hEAACrH,oDAASmH;;AAD5B;;;AAKF,gDAAA,hDAAMG;AAAN,AAEE,AAACC,uCAAyB,AAAAC,uBAAA,AAAAC,gCAAA;;AAC1B,OAACC;;AAEH,qDAAA,qEAAAC,1HAAOE,kHAA4BjE;AAAnC,AAAA,IAAAgE,cAAAD;gBAAA,AAAAtE,4CAAAuE,YAAA,IAAA,xEAA4CE;UAA5C,AAAAzE,4CAAAuE,YAAA,IAAA,lEAAsDzC;AAAtD,AACE,IAAA4C,YAAMD;IAANC,gBAAA,EAAA,CAAAA,qBAAAC,oBAAA,AAAAD,cAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,IAAME,gBAAc,iBAAA/D,mBAAI,mEAAA,nEAACgE,2DAAqBtE;AAA1B,AAAA,oBAAAM;AAAAA;;AAAA;;;IACdiE,MAAI,CAAA,wBAAA,vBAAGF,gBAAc9C;AAD3B,AAEE,4DAAA,rDAAChF,6CAAKyD,YAAUuE;;;KAJpB;wGAMM,AAACC,2BAAmBxE,3CACpByC,pCACA,iBAAAnC,mBAAA,xFACA,OAAC/D;AADD,AAAA,oBAAA+D;AAAAA;;AAAA;;KACA,IAAQiB;;;;AATd,MAAA,KAAAnC,MAAA,CAAA,mEAAA+E;;;;AAYF,AAAA,2CAAA,mDAAAlF,9FAAMyF;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMsF,oFACFjJ,MAAM8F,IAAIJ;AADd,AAEG,2FAAA,pFAAC0D,uEAAYpJ,MAAM8F,IAAIJ;;;AAF1B,CAAA,yEAAA,wBAAAwD,jGAAMD,oFAGFjJ,MAAM8F,IAAIJ;AAHd,AAAA,IAAAyD,cAAAD;IAAAC,kBAAA,AAAAxH,4BAAAwH;qBAAA,AAAAvH,4CAAAuH,gBAAA,7EAGyBE;eAHzB,AAAAzH,4CAAAuH,gBAAA,4DAAA,nIAGwCG;yBAHxC,AAAA1H,4CAAAuH,gBAAA,qEAAA,tJAGiDI;AAHjD,AAMG,GAAUC;AAAV;;AAAA,AACE,IAAAzJ,qBAAoB,AAAA,6FAAaC;AAAjC,AAAA,oBAAAD;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,IAAM/E,YAAM,iBAAA6E,mBAAI,iBAAA4E,YAAA,mFAAA,+DAAsB1E;AAAtB,AAAA,wGAAA0E,wCAAAA,xIAACC,iDAAAA,4DAAAA;;AAAL,AAAA,oBAAA7E;AAAAA;;AAAqC7E;;;IAC3C2J,gBAAc,EAAI,AAACC,sBAAMlE,KACT,AAACmC,wDAAgCnC,2BAC7B,CAAK,gDAAA,hDAAC5E,6CAAK4E,OAAK,uBAAA,tBAAG,AAAC3E,gBAAM2E,yDAASX,tJACnC,0KAAA,WAAA,rLAACiD;IACrBzD,UAAQ,iBAAAM,mBAAIwE;AAAJ,AAAA,oBAAAxE;AAAAA;;AAAA,IAAAA,uBAAmB,AAAA,kGAAgB7E;AAAnC,AAAA,oBAAA6E;AAAAA;;AAAA;;;;IACRgF,iBAAe,AAAC9I,gBAAMwD;IACtBuF,aAAW,gGAAA,oKAAA,+IAAA,jZACE,AAACC,wBAAQjE,MACT,AAAC0C,mDAA2BjE,QAAQuB,OAEpC,EAAK,YAAA,XAAGwD,qBAAY,CAAI,AAACvI,gBAAMwD,YAAS+E,aACxC,qDAAA,rDAACxI,6CAAKyD,YAAU,CAAG,AAACxD,gBAAMwD,WAAS+E,aAEnC,EAAI,6CAAA,7CAACpI,8FAAO4E,UAAK,CAAI+D,kBAAe/D,QACpCvB,QAGA,qDAAA,rDAACzD,6CAAKyD,YAAUuB;;IAC7BvB,kDAAY,AAACyF,kDAAoC,AAAA,iGAAehK,WACfuE,lMACrC,AAAC0F;AArBnB,AAsBE,AAAChC;;AACD,OAACiC,+DAAmBP,cAAcpF,YAAQvE,UAAM8J,WAAWP;;AAxB/D;;;;;AAPL,CAAA,mEAAA,nEAAMN;;AAAN,AAiCA,mEAAA,nEAAOkB,8IACJC,WAAWrF;AADd,AAEE,IAAAV,oBAAK,OAASU;AAAd,AAAA,GAAAV;AAAA,IAAAA,wBACK,AAACgG,4CAAqBtF;AAD3B,AAAA,oBAAAV;AAAA,IAAAA,wBAEK,AAACxD,gDAAKuJ,WAAW,AAACE,eAAevF;AAFtC,AAAA,GAAAV;AAGK,IAAAkG,YAAA,mFAAA,+DAAwB,AAACD,eAAevF;AAAxC,AAAA,4GAAAwF,0CAAAA,9IAACtF,mDAAAA,8DAAAA;;AAHNZ;;;AAAAA;;;AAAAA;;;AAKF,iEAAA,jEAAOmG,0IACJxK;AADH,AAEE,oBAAI,iBAAAqE,oBAAK,AAAA,yGAAmBrE;AAAxB,AAAA,oBAAAqE;AACK,OAACmC,cAAI,AAAA,uGAAmBxG;;AAD7BqE;;;AAEF,IAAMqG,kBAAgB,AAAA,uGAAmB1K;IACnC2K,eAAU,WAAKC;AAAL,AAAQ,+EAAA,xEAACC,sEAAqBD;;IACxCE,uYACU,AAACC,+CAAO,WAAAC,zEACR,AAACK,/DACD,AAAC/D,8CAAMC,5DACP,AAAC+D,zDACD,AAACC,4CAAIZ,/LACL,AAACa,+CAAO,AAAA,6FAAaxL,pOACrB,0BAAA,1BAACyL;AANO,AAAA,IAAAR,cAAAD;QAAA,AAAAhH,4CAAAiH,YAAA,IAAA,hEAAMC;QAAN,AAAAlH,4CAAAiH,YAAA,IAAA,hEAAQE;AAAR,AAAY,OAACC,sBAAMD;GAD3BT;IAFhBD,cAU2BC;IAV3BD,kBAAA,AAAA9I,4BAAA8I;WAAA,AAAA7I,4CAAA6I,gBAAA,nEAUciB;YAVd,AAAA9J,4CAAA6I,gBAAA,pEAUmBkB;IACbC,UAAQ,iBAAMlG,KAAG,AAAA,mFAAQ,AAAA,2FAAa1F;IACxB6L,qBAAmB,sBAAA,JAAMnG,IACJ,AAACoG,6CAAK,WAAKC;AAAL,AAAA,0FAAA,+DACerG,GAAGqG;uSAF1B,pSACE,mFAAA,yEAAA,8DAAA;IAGrBL,+EAAU,AAACH,4CAAIZ,aAAUe,7HAAM,AAACM,+CAAOC;IACvCN,gFAAW,AAACJ,4CAAIZ,aAAUgB,7HAAO,AAACK,+CAAOC;IACzCC,KAAG,iBAAAC,YAAA,2CAAA,wDAAA,HAAgBzG,4EACWgF;IAD3ByB,gBAAA,2JAAAA,zJAEE,AAAC3F,cAAIkF,WACL,8CAAAS,UAAA,xDAACC,sHAAkBV;AAHrB,AAAA,GAIE,AAAClF,cAAImF;AACL,qDAAAQ,cAAA,5DAACC,6HAAmBT;;AALtBQ;;;AAPT,AAaE,OAACE,6CAAKR,mBAAmBK;;AAxBzC,AAyBE,kEAAA,sHAAA,jLAACE,qDAAMpM,qEACY8K,sHACCc;;AACtB5L;;;AAEJ,wDAAA,xDAAOsM,wHACJxB;AADH,AAEE,OAACkB,+CAAO,WAAKO;AAAL,AAAQ,SACC,kCAAA,hCAAK,AAACxC,wBAAQwC,UACT,6CAAA,7CAACrL,4GAAc,AAAC8F,gBAAMuF,SACtB,+IAAA,9IAAM,CAACtH,mDAAAA,sDAAAA,LAAUsH,kCAAAA,sBACtB,MAAA,LAAMA;GAAKzB;;AAE9B,2CAAA,3CAAO0B,8FACJjI,QAAQvE,MAAM6B,OAAO4K,WAAWC;AADnC,AAEE,oBAAI,iBAAArI,oBAAK,AAACsI;AAAN,AAAA,GAAAtI;AAAkCoI;;AAAlCpI;;;AACF,IAAA,AACE,IAAMwI,wBAAgB,iBAAAxI,oBAAK,AAAA,4FAAarE;AAAlB,AAAA,oBAAAqE;AAAyB,OAACyI,iCAAmB,AAAA,4FAAa9M;;AAA1DqE;;;IAChBoI,iBAAW,AAACnL,oBAAY,AAACyL,0BAAkB,AAACC,eAAKP;IACjDC,iBAAW,8BAAA,2EAAA,vFAAMA,YAAW,AAACpL,oBAAY,AAACyL,0BAAkB,AAACC,eAAKN;IAClEO,cAAY,w6BAAA,qlBAAA,3/CACE,0LAAA,yJAAA,wJAAA,zeAAI,EAAK,mBAAA,lBAAMP,6BAAY,EAAI,4DAAA,5DAACxL,6CAAEuL,6BACH,4DAAA,5DAACvL,6CAAEuL,iCAC9B,EAAK,4DAAA,5DAACvL,6CAAEwL,4BAAmB,4DAAA,5DAACxL,6CAAEuL,iCAC9B,EAAK,4DAAA,5DAACvL,6CAAEwL,6BAAoB,4DAAA,5DAACxL,6CAAEuL,+BAC/B,EAAK,oIAAA,pIAACvL,oDAAEwL,eAAWD,kFAAkB,AAACS,cAAIL,8BAC1C,EAAK,oIAAA,pIAAC3L,oDAAEwL,eAAWD,oFAAoB,AAACS,cAAIL,kCAChD,AAACM,6BAAetL,OAAO0C,WAEvB,yJAAA,vJACC,EAAK,4DAAA,5DAACrD,6CAAEwL,6BAAoB,4DAAA,5DAACxL,6CAAEuL,gCAC/B,EAAK,4DAAA,5DAACvL,6CAAEwL,2BAAkB,4DAAA,5DAACxL,6CAAEuL,+BAC7B,EAAK,0BAAA,iFAAA,aAAA,xHAACW,kJAA2BV,qBAC5B,4DAAA,5DAACxL,6CAAEuL,8BACT,AAACY,8BAAgBxL,OAAO0C,SAGxBA;;AApBpB,AAqBE0I;iBAtBJ,GAAA,CAAAL,mBAuBSjJ;AAvBT,SAAAiJ,LAuBkBU;AAvBlB,AAwBI/I;;AAxBJ,AAAA,MAAAqI;;;;AAyBArI;;;AAEJ,4CAAA,5CAAOgJ,gGACJvN,MAAMU;AADT,AAEE,GAAI,EAAK,AAACiM,iDACD,AAAC9L,gDAAK,AAAA,kGAAgBb,OAAOU;AACpC,IAAMmB,SAAO,AAAA,iGAAe7B;IACtByM,aAAW,AAACe,eAAK,AAACC,sCAAqB,AAACC,oCAAsB7L,QAAQ,iBAAAgD,mBAAInE;AAAJ,AAAA,oBAAAmE;AAAAA;;AAAA;;;IACtEjC,YAAU,AAAC4J,yCAAiB9L,MAAMV,MAAM6B,OAC5B4K,WACA,AAAA,gGAAezM;AAJjC,AAKE4C;;AACFlC;;;AAEJ,2CAAA,mDAAAiN,9FAAME;AAAN,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAAjM,4BAAAiM;YAAAA,RACqE5N;cADrE,AAAA4B,4CAAAgM,gBAAA,tEACiBrJ;aADjB,AAAA3C,4CAAAgM,gBAAA,rEACyB/L;WADzB,AAAAD,4CAAAgM,gBAAA,nEACgCE;WADhC,AAAAlM,4CAAAgM,gBAAA,nEACqCG;WADrC,AAAAnM,4CAAAgM,gBAAA,nEAC0CI;YAD1C,AAAApM,4CAAAgM,gBAAA,pEAC+CK;uBAD/C,AAAArM,4CAAAgM,gBAAA,/EACqDM;AADrD,AAEE,IAAMlO,YAAM,iBAAA6E,mBAAI,iBAAAR,oBAAK,AAAA,mFAAQrE;AAAb,AAAA,oBAAAqE;AAAoB,IAAA+J,YAAS,AAAA,mFAAQpO;AAAjB,AAAA,wGAAAoO,wCAAAA,xIAAC1E,iDAAAA,4DAAAA;;AAArBrF;;;AAAJ,AAAA,oBAAAQ;AAAAA;;AAAkD7E;;;IACxDA,YAAM,AAACqO,uGAAMrO,UACA,AAACsO,yEAA2BN,KAAKnM,OAAOqM,iBAAW,AAAA,kGAAgBlO;IAChFuO,aAAW,AAAA,uGAAmBvO;IAC9BwO,eAAa,AAAA,kGAAgBxO;IAC7BuE,cAAQ,kBAAI,iBAAAF,oBAAK,AAACmC,cAAI+H;AAAV,AAAA,GAAAlK;AAAA,IAAAA,wBAAsBmK;AAAtB,AAAA,oBAAAnK;AAAmC,OAACxD,gDAAK2N,aAAajK;;AAAtDF;;;AAAAA;;MACF,AAACoK,gDAAkCF,WAAWhK,QAAQ1C,QACtD0C;IACVA,cAAQ,AAACmK,kCAAoB1O,UAAMuE;IACnCA,cAAQ,AAACgJ,0CAAkBvN,UAAMuE;IACjCoK,qBAAa,AAACzN,6CAAE4M,KAAKC;IACrBa,MAAI,AAACC,+BAAY,AAACvN,oBAAYiD,aAAS,AAACuK,uEAAwBjN;IAChEkN,kBAAgB,AAAC/H,gBAAM,AAACgI,iBAAOJ;IAC/BK,kBAAgB,AAACC,iBAAO,AAACF,iBAAOJ;IAChCO,oBAAY,0BAAA,iFAAA,uBAAA,lIAAC/B,mKAA4C2B;IACzDK,0BAAkB,yHAAA,vHAAK,oDAAA,pDAAClO,6CAAEW,4EACH,6CAAA,7CAACX,uDAAY6N,sBACb,wGAAA,vGAAM,AAAA,mFAAOE;IACpCI,0BAAkB,AAACC,8CAAwBP;IAC3CxK,cAAQ,AAACgL,qBAAahL;IACtBA,cAAQ,gNAAA,hNAACyD,uBAAezD,YAAQ,0DAAA,1DAACiL,qHAAqB,4CAAKxB;IApBjEG,cAqByB,iDAAA,mHAAA,2BAAA,mHAAA,hTACE,EAAKQ,wBAAaQ,wGACjB5K,YAAQA,sBAET6K,4GACC7K,YAAQA,oBAGT,iBAAMkL,uBAAS,6CAAK,AAACC,kCAAyB7N,SAAQ,2BAAA,IAAA,7BAAIwN,mCAA4B9K;AAAtF,AAAA,0FACGA,YAAQkL;;;kBA9BtC,AAAAzL,4CAAAmK,YAAA,IAAA,1EAqBO5J;2BArBP,AAAAP,4CAAAmK,YAAA,IAAA,nFAqBesB;IAUTzP,YAAM,+DAAA,2IAAA,1MAACoM,qDAAMpM,8EACeyP,0IACD5N;IAC3B7B,YAAM,AAACsH,8CAAMqI,iBAAO3P,UAAM,+CAAA,iFAAA,hIAACgM,+NAA4B4D;IACvD5P,YAAM,AAAC6P,gEAAkB7P;IACzBA,YAAM,kBAAI,iBAAAqE,oBAAKsK;AAAL,AAAA,GAAAtK;AAAkB,OAAA,yGAAmBrE;;AAArCqE;;MACFrE,UACA,yDAAA,zDAAC8P,+CAAO9P;IAChBA,YAAM,yDAAA,zDAAC+P,+CAAO/P,yEAAkBsM;IAChCtM,YAAM,AAACwK,+DAAkCxK;IACzCgQ,iBAAe,AAAC3B,uGACA,AAAC4B,sBAAY1B,WAAW,AAAC2B,8CACzB,AAAA,uGAAmBlQ;AA3CzC,yNA4CMA,tDACA,gEAAA,iHAAA,jLAAC8P,rDAED,iTAAA,kIAAA,nbAAC1D,qXAAqB7H,uIACGyL,1mBACzB,OAAC3B,wnBAAM,yBAAA,2CAAA,8EAAA,hIAAIJ,kHAAoBA;;AAEvC,iDAAA,qEAAAkC,tHAAOE,0GACJrQ,MAAMU;AADT,AAAA,IAAA0P,cAAAD;IAAAC,kBAAA,AAAAzO,4BAAAyO;AAAA,AAEE,IAAMpQ,YAAM,oDAAA,pDAACoM,8CAAMpM,0EAAqBU;IAClCV,YAAM,AAACsH,8CAAMqI,iBAAO3P,UAAM4P;AADhC,AAEE,oBAAAU;AAAA,IAAAC,mBAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,qBAAA,AAEC,iBAAMzQ,YAAM,AAAC6N,yCAAiB7N;AAA9B,AACE,IAAA0Q,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,wEAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACiB,gDAA0B3R;;AAF7B,IAAA6Q,uDAAAF;IAAAG,uDAAA,AAAAC,qBAAA;AAAA,AAAA,CAAAJ,8DAAAG;;AAAA,IAAA,AAEE,AAACa,gDAA0B3R;;AAF7B,IAAAgR,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAE;;;AAKA,IAAA9Q,qBAAiB,yDAAA,mFAAA,yEAAA,rNAAC8R,+CAAO7R;AAAzB,AAAA,oBAAAD;AAAA,AAAA,YAAAA,RAAW6R;AAAX,AACE,IAAA7R,yBAAyB,AAAA,4FAAa,iBAAAgS,YAAW,AAAA,mFAAQ,AAAA,2FAAa/R;AAAhC,AAAA,4GAAA+R,0CAAAA,9IAAC9M,mDAAAA,8DAAAA;;AAAvC,AAAA,oBAAAlF;AAAA,AAAA,oBAAAA,hBAAW+R;AAAX,AACE,oBAAM,iBAAAzN,oBAAK,AAAA,yGAAmBrE;AAAxB,AAAA,oBAAAqE;AAAA,SACK,GAAK,AAAC4N,4BAAcL,cACpB,AAAC/Q,gDAAK,AAACqR,kCAAyBN,OAAOE;;AAF5CzN;;;AAAN,AAGE,sCAAA,mFAAA,lHAAC8N,mNAA+CL,cAAcF;;AAHhE;;;AADF;;;AADF;;;AARH,AAAA,AAAApB,gBAAAD;;AAAAE;;AAAA,AAEC,IAAMzQ,YAAM,AAAC6N,yCAAiB7N;AAA9B,AACE,IAAA0Q,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,wEAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACiB,gDAA0B3R;;AAF7B,IAAAyR,uDAAAd;IAAAe,uDAAA,AAAAX,qBAAA;AAAA,AAAA,CAAAJ,8DAAAe;;AAAA,IAAA,AAEE,AAACC,gDAA0B3R;;AAF7B,IAAAgR,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAc;;;AAKA,IAAA1R,qBAAiB,yDAAA,mFAAA,yEAAA,rNAAC8R,+CAAO7R;AAAzB,AAAA,oBAAAD;AAAA,AAAA,YAAAA,RAAW6R;AAAX,AACE,IAAA7R,yBAAyB,AAAA,4FAAa,iBAAAiS,YAAW,AAAA,mFAAQ,AAAA,2FAAahS;AAAhC,AAAA,4GAAAgS,0CAAAA,9IAAC/M,mDAAAA,8DAAAA;;AAAvC,AAAA,oBAAAlF;AAAA,AAAA,oBAAAA,hBAAW+R;AAAX,AACE,oBAAM,iBAAAzN,oBAAK,AAAA,yGAAmBrE;AAAxB,AAAA,oBAAAqE;AAAA,SACK,GAAK,AAAC4N,4BAAcL,cACpB,AAAC/Q,gDAAK,AAACqR,kCAAyBN,OAAOE;;AAF5CzN;;;AAAN,AAGE,sCAAA,mFAAA,lHAAC8N,mNAA+CL,cAAcF;;AAHhE;;;AADF;;;AADF;;;;AAOP,AAAA,sDAAA,8DAAApO,pHAAM6O;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1O,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oFAAA,pFAAM0O,+FACFrS,MAAMU;AADV,AAEG,qGAAA,9FAAC8R,kFAAuBxS,MAAMU;;;AAFjC,CAAA,oFAAA,uBAAA4R,3GAAMD,+FAGFrS,MAAMU;AAHV,AAAA,IAAA6R,cAAAD;IAAAC,kBAAA,AAAA5Q,4BAAA4Q;WAAAA,PAKSG;mBALT,AAAA9Q,4CAAA2Q,gBAAA,3EAIYE;AAJZ,AAMG,IAAAE,cAA+D3S;IAA/D2S,kBAAA,AAAAhR,4BAAAgR;WAAA,AAAA/Q,4CAAA+Q,gBAAA,nEAAoB3E;WAApB,AAAApM,4CAAA+Q,gBAAA,nEAAyB5E;aAAzB,AAAAnM,4CAAA+Q,gBAAA,rEAA8B9Q;WAA9B,AAAAD,4CAAA+Q,gBAAA,nEAAqCC;cAArC,AAAAhR,4CAAA+Q,gBAAA,tEAA0CpO;iBAA1C,AAAA3C,4CAAA+Q,gBAAA,zEAAkDpE;IAC5CqE,WAAK,iBAAA/N,mBAAI+N;AAAJ,AAAA,oBAAA/N;AAAAA;;AAAS,OAACO;;;IACfvD,aAAO,iBAAAgD,mBAAIhD;AAAJ,AAAA,oBAAAgD;AAAAA;;AAAW,OAACgO;;;IACnB9E,WAAK,iBAAA+E,YAAWF;IAAXG,YAAgB,AAAA,mFAAQhF;AAAxB,AAAA,4GAAA+E,UAAAC,0CAAAD,UAAAC,lKAAC9N,mDAAAA,wEAAAA;;IACNF,WAAS,oCAAA,0GAAA,5IAAM,AAACiO,qBAAKzE,aAAY,uDAAA,vDAAC3M,4CAAI2M;IACtChK,kDAAY,AAACyF,kDAAoCnI,WAAO0C,jGAC5C,AAAC0F;AANnB,AAOE,oBACE,AAACE,iEAAmC6D,KAAKjJ;AACzC,8EAAA,mFAAA,0OAAA,pYAACkO,0NAEC,0DAAA,1DAACzD,mJAAmDzK;;AAJxD,oBAOE0N;AACA,OAACpC,+CAAkBrQ,MAAMU,MAAMgS;;AARjC,AAWE,IAAMQ,yBAAiB,AAACrS,gDAAK,AAACS,oBAAYiD,aAAS,AAACjD,oBAAYZ;AAAhE,AACE,oBAAM,iBAAA2D,oBAAK6O;AAAL,AAAA,GAAA7O;AAAsB0J;;AAAtB1J;;;AAAN,AACE,OAACgM,+CAAkBrQ,MAAMU,MAAMgS;;AADjC;;;;;;;AAzBT,CAAA,8EAAA,9EAAML;;AAAN,AA4BA,qDAAA,rDAAOc,kHACJzS,MAAMoF;AADT,AAEE,GAAM,OAASpF;AAAf,AACE,IAAM0S,iBAAe,mDAAA,nDAACtS,6CAAKJ,UAAQoF;IAC7BuN,iBAAe,AAAC9D,qBAAa,AAACzO,6CAAKJ,MAAMoF;AAD/C,AAAA,0FAEGsN,eAAeC;;AAHpB;;;AAKF,AAAA,AACA,sDAAA,6FAAAC,nJAAME,oHACHC,OAAOC,cAAcC;AADxB,AAAA,IAAAJ,cAAAD;IAAAC,kBAAA,AAAA5R,4BAAA4R;qBAAA,AAAA3R,4CAAA2R,gBAAA,7EAC0CK;uBAD1C,AAAAhS,4CAAA2R,gBAAA,/EACmDM;kCADnD,AAAAjS,4CAAA2R,gBAAA,1FAC8DO;AAD9D,AAEE,IAAMC,6BAAqB,iBAAA1P,oBAAK,iBAAAQ,mBAAI,AAAA,mFAAO4O;AAAX,AAAA,oBAAA5O;AAAAA;;AACI,OAAA,qGAAgB4O;;;AADzB,AAAA,oBAAApP;AAEK,OAAC6I,cAAI,AAAA,0GAAmBuG;;AAF7BpP;;;IAGrB2P,sBAAc,iBAAAC,YAAkB,AAAA,6FAAaP;AAA/B,AAAA,sIAAAO,uDAAAA,rLAACC,gEAAAA,2EAAAA;;IACfN,qBAAS,8CAAA,MAAA,2DAAA,iEAAA,KAAA,nKACEG,oCAGA,AAACI,yBAASP,iBACVA,iCAEA,AAACQ,+BAAgBV,qBAIjB,AAACxG,cAAI8G;;AAftB,AAgBE,IAAAtD,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,IAAA6D,mBAAA,2CAAA,uEAAqCb;AAArC,AAAA,iKAAAa,+EAAAA,/OAACE,iFAAAA,mGAAAA;;AACD,0DAAA,mHAAA,2CAAA,iFAAA,iFAAA,nXAACC,sIAA8Bf,kBAAWD,uHAAyBE,mFACEC,wGACWC;;AALlF,IAAAO,gDAAA1D;IAAA2D,gDAAA,AAAAvD,qBAAA;AAAA,AAAA,CAAAJ,8DAAA2D;;AAAA,IAAA,AAEE,IAAAE,mBAAA,2CAAA,uEAAqCd;AAArC,AAAA,iKAAAc,+EAAAA,/OAACC,iFAAAA,mGAAAA;;AACD,mDAAA,mHAAA,2CAAA,iFAAA,iFAAA,nXAACC,sIAA8Bf,kBAAWD,uHAAyBE,mFACEC,wGACWC;;AALlF,IAAA9C,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAA0D;;;AAOJ,8DAAA,9DAAOM,oIACJlB,OAAOzF;AADV,AAEE,IAAM4G,eAAa,AAACC;IACd9P,WAAS,iBAAAF,mBACC,iBAAAR,oBAAK,AAAA,gFAAKoP;AAAV,AAAA,oBAAApP;AAAA,IAAAA,wBACK,AAACgG,4CAAqB,AAAA,gFAAKoJ;AADhC,AAAA,oBAAApP;AAEK,OAAA,gFAAKoP;;AAFVpP;;;AAAAA;;;AADD,AAAA,oBAAAQ;AAAAA;;AAIC,IAAAR,oBAAKuQ;AAAL,AAAA,oBAAAvQ;AAAA,IAAAA,wBACK,AAACgG,4CAAqBuK;AAD3B,AAAA,oBAAAvQ;AAEKuQ;;AAFLvQ;;;AAAAA;;;;AALhB,AAQE,OAACnD,6CAAE8M,KAAK,iBAAA3J,oBAAKU;AAAL,AAAA,oBAAAV;AAAc,OAACyQ,iBAAY/P;;AAA3BV;;;;AAEZ,kEAAA,8FAAA0Q,hKAAME,4IACHxB,OAAOzT,MAAMkV;AADhB,AAAA,IAAAF,cAAAD;IAAAC,kBAAA,AAAArT,4BAAAqT;iBAAA,AAAApT,4CAAAoT,gBAAA,zEAC+BG;AAD/B,AAEE,YAAA,2CAAA,0FAAA,oEAAA,jNAAMC,kHAAmB,AAACC;IAEpBC,sDAAe,AAACjH,uGAAM,4BAAA,mFAAA,kEAAA,8DAAA,mEAAA,6DAAA,/WAAC4B,sBAAYjQ,waACqCoV,9kBACzD,AAACvH;IAChB0H,aAAW,iBAAAC,YAAS,AAAA,mFAAQ,AAAA,4FAAaxV;AAA9B,AAAA,wGAAAwV,wCAAAA,xIAAC9L,iDAAAA,4DAAAA;;AALlB,AAME,oBAAA4G;AAAA,IAAAC,0BAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,4BAAA,AAEC,iBAAMmD,iBAAS,AAAC/S,gDAAK,AAAA,mFAAQ0U,YAAY,AAAA,mFAAQ,AAAA,gGAAevV;AAAhE,AACE,wFAAA,2CAAA,6EAAA,gEAAA,zQAACwT,oDAAuBC,OAAO8B,WAAWD,oHAAsB1B;;AAHnE,AAAA,AAAApD,gBAAAD;;AAAAE;AAAA,AAEC,IAAMmD,wBAAS,AAAC/S,gDAAK,AAAA,mFAAQ0U,YAAY,AAAA,mFAAQ,AAAA,gGAAevV;AAAhE,AACE,iFAAA,2CAAA,oFAAA,gEAAA,hRAACwT,oDAAuBC,OAAO8B,WAAWD,oHAAsB1B;;;AAEnE,QAACuB,2CAAAA,uDAAAA,dAAWG,mCAAAA;;AAEhB,qDAAA,oEAAAG,gBAAAC,zIAAMG,kHACHpC,iBAGA/S;AAJH,AAAA,IAAAiV,cAAAF;IAAAE,kBAAA,AAAAhU,4BAAAgU;YAAAA,RAGQ3V;WAHR,AAAA4B,4CAAA+T,gBAAA,nEAEiB3H;IAFjB4H,cAAAF;IAAAE,kBAAA,AAAAjU,4BAAAiU;YAAAA,RAMQE;iBANR,AAAAlU,4CAAAgU,gBAAA,zEAKWT;AALX,AAOE,IAAMa,oBAAY,AAACrB,4DAA8BlB,OAAOzF;IAClD5N,QAAM,AAACC,oBAAgB,AAACF;IACxB2F,MAAI,AAAC5B,yBAAW9D;IAFtB2V,cAGsC,AAAC5C,mDAA2BzS,MAAMoF;qBAHxE,AAAA9B,4CAAA+R,YAAA,IAAA,7EAGO3C;qBAHP,AAAApP,4CAAA+R,YAAA,IAAA,7EAGsB1C;IAChBK,gBAAc,oDAAA,pDAACtH,8CAAMpM,0EAAqBoT;IAC1CM,oBAAc,AAACpM,8CAAMqI,iBAAO+D,cAAc9D;IAC1C8D,oBAAc,AAAC7F,yCAAiB6F;YANtC,2CAAA,0FAAA,7IAOM0B,kHAAmB,AAACC,+FACEhC;IACtB4C,sDAAe,AAAC5H,uGAAM,4BAAA,mFAAA,kEAAA,8DAAA,mEAAA,6DAAA,/WAAC4B,sBAAYjQ,waACqCoV,9kBACzD,AAACvH;IAChB+F,iBAAS,qBAAA,AAAA,MAAA,zBAAMoC;AAZrB,AAaE,wFAAA,2CAAA,6EAAA,gEAAA,hRAACxC,oDAAuBC,OAAOC,kBAAcuC,oHAAsBrC;;AAEnE,AAACsC,+BAAsB9V,MAAMgT;;AAC7B,QAAC+B,2CAAAA,uDAAAA,dAAWc,mCAAAA;;AAEhB,iDAAA,jDAAME;AAAN,AAEE,AAACC;;AACD,uCAAA,hCAACC;;AAEH,oCAAA,pCAAMC;AAAN,AAEE,IAAAC,cAAmF,AAACK;IAApFJ,cAAA,AAAAxS,4CAAAuS,YAAA,IAAA;IAAAC,kBAAA,AAAA7U,4BAAA6U;cAAA,AAAA5U,4CAAA4U,gBAAA,tEAAeC;YAAf,AAAA7U,4CAAA4U,gBAAA,pEAAuBxW;eAAvB,AAAA4B,4CAAA4U,gBAAA,vEAA6BzR;sBAA7B,AAAAnD,4CAAA4U,gBAAA,9EAAsCE;aAAtC,AAAA9U,4CAAA4U,gBAAA,rEAAsD3U;qBAAtD,AAAAD,4CAAA4U,gBAAA,7EAA6DG;SAA7D,AAAA3S,4CAAAuS,YAAA,IAAA,jEAAwE7Q;aAAxE,AAAA1B,4CAAAuS,YAAA,IAAA,rEAA2E9C;IACrEnO,OAAK,AAACjF,oBAAgBqF;AAD5B,AAEE,oBAAMJ;AAAN,AACE,IAAM5E,QAAM,yDAAA,zDAACC,oDAAS2E;IAChBQ,MAAI,AAACvF,kCAAyB+E;AADpC,AAAA,+CAAA,0DAAA,sDAAA,wDAAA,6DAAA,sDAAA,mDAAA,2DAAA,oDAAA,4DAAA,kDAAA,4EAKWzD,OAED,iBAAAgD,mBAAI,iBAAAgS,YAAA,mFAAA,+DAAsB,AAAA,6FAAa7W;AAAnC,AAAA,wGAAA6W,wCAAAA,xIAACnN,iDAAAA,4DAAAA;;AAAL,AAAA,oBAAA7E;AAAAA;;AAAgD7E;;KAL/CyT,gCACCgD,zBACCE,+CAENjR,TAEMX,YACO2R,jBACXpR,lBACC5E,MACFoF;;AAbV;;;AAeJ,AAAA;;;iDAAA,yDAAAtC,1GAAMuT;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAAMoT,0FAEFC;AAFJ,AAGG,0FAAA,nFAACC,6EAAkBD;;;AAHtB,CAAA,+EAAA,/EAAMD,0FAIFG,OAAOC;AAJX,AAKG,GAAM,EAAK,GAAK3N,yCACL,gDAAA,hDAAC3I,yGAAa,AAACuW;AAD1B,AAEE,mCAAA,nCAACC;;AACD,IAAAtX,4BAAiB,AAACuW;AAAlB,AAAA,oBAAAvW;AAAA,AAAA,mBAAAA,fAAWiX;AAAX,AACE,IAAAM,qBAAsCN;IAAtCM,yBAAA,AAAA3V,4BAAA2V;mBAAA,AAAA1V,4CAAA0V,uBAAA,lFAActX;mBAAd,AAAA4B,4CAAA0V,uBAAA,lFAAoB5W;gBAApB,AAAAkB,4CAAA0V,uBAAA,/EAA0B5R;oBAA1B,AAAA9D,4CAAA0V,uBAAA,nFAA6B7D;IACvB/S,mBAAM,EAAI,OAASyW,0BAAaA,YAAYzW;IAC5CqE,kBAAS,AAAA,6FAAa/E;IACtBA,mBAAM,iBAAA6E,mBAAI,iBAAA2S,YAAA,mFAAA,+DAAsBzS;AAAtB,AAAA,wGAAAyS,wCAAAA,xIAAC9N,iDAAAA,4DAAAA;;AAAL,AAAA,oBAAA7E;AAAAA;;AACI7E;;;IACVgW,2BAAY,AAACrB,4DAA8BlB,cAAO1O;IAClD3E,eAAM,AAACC,oBAAgB,AAACF;IACxB2F,aAAI,AAAC5B,yBAAW9D;IAPtBmX,qBAQsC,AAACpE,mDAA2BzS,iBAAMoF;4BARxE,AAAA9B,4CAAAuT,mBAAA,IAAA,3FAQOnE;4BARP,AAAApP,4CAAAuT,mBAAA,IAAA,3FAQsBlE;IAChBoE,mBAAU,+EAAA,uLAAA,pQACEzB,0BACAH,qDAEA,EAAK,AAAC5D,4BAAcmB,4BAAgB,GAAK,AAACnB,4BAAcoB,4BACxD4B,gEAGAY;;AAjBlB,AAkBE,IAAA6B,mBAAWjE;IAAXkE,mBAAkB3X;IAAlB4X,mBAAwBlX;IAAxBmX,mBAAA,2CAAA,iEAEY,WAAKC;AAAL,AACE,AAAC3B;;AACD,yFAAA,lFAAC/M,uEAAY0O,eAAapS;;AAJxC,AAAA,iGAAAgS,iBAAAC,iBAAAC,iBAAAC,+CAAAH,iBAAAC,iBAAAC,iBAAAC,rPAACJ,iDAAAA,sHAAAA;;AAnBL;;AAHF;;AA2BA,0CAAA,nCAACJ;;;AAhCJ,CAAA,yEAAA,zEAAMN;;AAAN,AAkCA,qDAAA,qEAAAgB,1HAAME,kHACH1T;AADH,AAAA,IAAAyT,cAAAD;IAAAC,kBAAA,AAAArW,4BAAAqW;WAAA,AAAApW,4CAAAoW,gBAAA,nEACmBjK;iBADnB,AAAAnM,4CAAAoW,gBAAA,zEACwB7R;qBADxB,AAAAvE,4CAAAoW,gBAAA,8DAAA,3IACmCpE;oBADnC,AAAAhS,4CAAAoW,gBAAA,0DAAA,tIAC4CE;iBAD5C,AAAAtW,4CAAAoW,gBAAA,zEACoDzJ;kBADpD,AAAA3M,4CAAAoW,gBAAA,1EAEmBG;kCAFnB,AAAAvW,4CAAAoW,gBAAA,1FAE+BlE;wBAF/B,AAAAlS,4CAAAoW,gBAAA,mEAAA,nJAEqDI;AAFrD,AAME,oBAAM,iBAAAvT,mBAAIkJ;AAAJ,AAAA,oBAAAlJ;AAAAA;;AAASsB;;;AAAf,AACE,IAAM+R,oBAAQ,wBAAA,NAAInK,YAAWmK;IACvBtE,qBAAS,qCAAA,nBAAIsE,wBAAa,wBAAA,NAAInK,YAAW6F;IACzC5T,QAAM,kBAAI+N,MACF,iBAAAsK,YAAA,mFAAA,8DAAwB,AAACnG,kCAAyBnE;AAAlD,AAAA,4GAAAsK,0CAAAA,9IAACpT,mDAAAA,8DAAAA;KACD,iBAAAqT,YAAA,mFAAA,+DAAwBnS;AAAxB,AAAA,4GAAAmS,0CAAAA,9IAACrT,mDAAAA,8DAAAA;;AAJf,AAKE,oBAAMjF;AAAN,AACE,IAAM8X,aAAW,qCAAA,nCAAM,AAAC5K,cAAI0G,qBACT,iBAAM4E,WAAS,AAAA,kGAAgBxY;IACzBoG,SAAO,CAACqS,yDAAAA,yEAAAA,lBAAgBD,qDAAAA,5CAASxY,qDAAAA;IACjC0Y,gBAAc,AAAA,mFAAQ,AAAClL,eAAKpH;AAFlC,AAGE,oBAAMsS;AAAN,AACE,QAAChP,iDAAAA,gEAAAA,jBAAQgP,4CAAAA;;AADX;;KAJJ;IAMX7W,SAAO,iBAAAgD,mBACC,AAAA,iGAAe7E;AADhB,AAAA,oBAAA6E;AAAAA;;AAAA,IAAAA,uBAEC,iBAAA8T,YAAoB,AAAA,mFAAQ3Y;AAA5B,AAAA,8HAAA2Y,mDAAAA,zKAACC,4DAAAA,uEAAAA;;AAFF,AAAA,oBAAA/T;AAAAA;;AAGC,OAACgO;;;;IACTtO,cAAQ,EAAI,AAACiC,cAAI+H,aACP,AAACsK,yCAA2BhX,OAAO0C,QAAQgK,YAC3ChK;IACVoP,iEAAc,4BAAA,mFAAA,6DAAA,sEAAA,lPAAC1D,sBAAYjQ,3EAEb,4XAAA,kIAAA,9fAACoM,gcAAqB7H,iIACD1C;IACnC8R,gBAAU,wDAAA,xDAACvH,8CAAMuH,uEACA,kBAAI5F,MACF,AAAA,mFAAQ/N,OACR,AAAA,mFAAQ,AAAA,2FAAa2T;IACxCA,uGAAcA,zCACA,AAAC9F,9CACD,sGAAA,tGAACzB,qKAAkB,iBAAAvH,mBAAIsT;AAAJ,AAAA,oBAAAtT;AAAAA;;AAAgB,OAACwQ;;;IAvBxDkD,cAwByB,kBACEL,mBACA,iBAAMa,kFACkB,4CAAA,WAAAC,vDAACzN,7DACD,AAACjE,8CAAM2R;AADP,AAAM,OAAA,mFAAQ,kDAAAD,lDAACpX,4CAAI5B;GAAnB,mFAAA,kEAAA;IAElBA,YAAM,iBAAAkZ,YAAS,AAAA,mFAAQ,AAAA,4FAAalZ;AAA9B,AAAA,wGAAAkZ,wCAAAA,xIAACxP,iDAAAA,4DAAAA;;IACPkK,qBAAS,kBAAI,iBAAA/O,mBAAIkU;AAAJ,AAAA,oBAAAlU;AAAAA;;AACI,OAAA,4FAAa7E;;MADrB,MAEQ4T;AANvB,AAAA,0FAOG5T,UAAM4T;KATX,sCAAA,pBAWEA,uGACC,iBAAAuF,YAAS,AAAA,mFAAQnZ;AAAjB,AAAA,wGAAAmZ,wCAAAA,xIAACzP,iDAAAA,4DAAAA;gCAZJ,8BAAA,8FAAA,aAAA,yBAAA,7LAY4BkK,6CAE1BkE,+FACCA,0CAED9X,0FACC,iBAAAoZ,YAAS,AAAA,mFAAQpZ;AAAjB,AAAA,wGAAAoZ,wCAAAA,xIAAC1P,iDAAAA,4DAAAA;gCAlBJ,AAAA,3BAkB4BkK;;cA1CrD,AAAA5P,4CAAAuU,YAAA,IAAA,tEAwBOO;yBAxBP,AAAA9U,4CAAAuU,YAAA,IAAA,jFAwBe3E;AAxBf,AA+CE,oBAAMkF;AAAN,AACE,oDAAA,yDAAA,2CAAA,iFAAA,gEAAA,KAAA,9SAACtF,uFAA0BsF,QAAQnF,uHAAqBC,+KAEaE;;AACrE,oBAAMsE;AAAN,AACE,oBAAI,iBAAA/T,oBAAKyP;AAAL,AAAA,oBAAAzP;AACK,OAAC4N,4BAAc,AAAA,kGAAgB6F;;AADpCzT;;;AAEF,WAAA,XAACgV;AAAD,AAAgB,yFAAA,lFAACjQ,uEAAY0O,4DAAgB,AAAA,6FAAaA;GAA1D;;AACA,WAAA,XAACuB;AAAD,AAAgB,4FAAA,rFAACjQ,uEAAYuK,+DAAe,AAAA,6FAAaA;GAAzD;;;AAJJ;;AAKAA;;AATF;;;AAhDJ;;;AANJ;;;AAiEF,AAAA,sEAAA,8EAAAnQ,pJAAM+V;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kGAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kGAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA5V,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oGAAA,pGAAM4V,+GACFC;AADJ,AAEG,oHAAA,7GAACC,kGAAuCD;;;AAF3C,CAAA,oGAAA,pGAAMD,+GAGFC,WAAW9G;AAHf,AAIG,GAAM,EAAK,OAAS8G,6BACT,GAAK,AAACvH,4BAAcuH;AAD/B,AAEE,sCAAA,mFAAA,lHAACrH,mLAA+BqH,WAAW9G;;AAF7C;;;;AAJH,CAAA,8FAAA,9FAAM6G;;AAAN,AAQA,2CAAA,3CAAMG,8FACHnL,WAAW1M,OAAOkM;AADrB,AAEE,IAAMxJ,UAAQ,gDAAA,hDAACsU,yCAA2BhX,UAAU0M;IAC9CzD,OAAK,AAAC6O,oDAAoCpL;AADhD,AAAA,+CAAA,2EAAA,+DAAA,yEAAA,8DAAA,+DAAA,sFAAA,mEAAA,oEAAA,kEAAA,+DAAA,KAGe,AAAC8G,2BACK9G,qBACM,AAACqL,eAAKrL,pBAClBzD,LACAiD,qCACElM,OACC0C,QACDwJ,KACFA;;AAEjB,0DAAA,kEAAA8L,5HAAME,sIAC+CxV;AADrD,AAAA,IAAAuV,cAAAD;IAAAC,kBAAA,AAAAnY,4BAAAmY;YAAAA,RAC8C9Z;sBAD9C,AAAA4B,4CAAAkY,gBAAA,9EACiBE;aADjB,AAAApY,4CAAAkY,gBAAA,rEAC2BG;aAD3B,AAAArY,4CAAAkY,gBAAA,rEACkCjY;AADlC,AAEE,oBAAImY;AACF,IAAME,gBAAc,AAACC,yCAAgCna;IAC/Coa,eAAa,AAACC,wCAA+Bra;IAC7CuE,cAAQ,iBAAA+V,YAAS,yFAAA,zFAACvP,+CAAOwP,6HAAoBL,cAAcE;IAAnDE,gBAAA,EAAA,CAAAA,aAAA,OAAA,KACS,AAAC/O,4CAAI,WAAKiP;AAAL,AAAA,0FACG,AAACC,2EAAyBD,IAC1B,AAACE,8CAA6BF;GAFtCF;AADT,AAAA,GAAA,CAAAA,iBAAA;AAAA;;AAIS,OAACK,+CAAO,uBAAAC,ZAAKrW;AAAL,AAAA,IAAAsW,cAAAD;UAAA,AAAA5W,4CAAA6W,YAAA,IAAA,lEAAcC;WAAd,AAAA9W,4CAAA6W,YAAA,IAAA,nEAAkBE;AAAlB,AACE,OAAC/S,uBAAezD,YAAQuW,IAAIC;WADtCT,RAEQ/V;;;IACzBA,cAAQ,AAACyW,6BACAzW,YAAQ0V,OACR,iBAAAgB,YAAMhB;AAAN,AAAA,QAAAgB;KAAA;AAAA;;;KAAA;AAAA;;;;AAOEhB;;;;IACX1V,cAAQ,AAAC8I,8BAAgBxL,OAAO0C;IAChCA,cAAQ,sDAAA,tDAAC2W,mCACArZ,OAAO0C,sBACP,AAACiL,0DAAY,kHAAA,jHAAK,wGAAA,IAAA,1GAAI,6CAAA,7CAACtO,6FAAOW,iHAEjBoY,OACA,AAACkB;AAzB7B,AA0BE5W;;AACFA;;;AAEJ,gCAAA,wCAAA6W,xEAAME;AAAN,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAA1Z,4BAAA0Z;YAAAA,RACoDrb;aADpD,AAAA4B,4CAAAyZ,gBAAA,rEACiBpB;cADjB,AAAArY,4CAAAyZ,gBAAA,tEACwB9W;sBADxB,AAAA3C,4CAAAyZ,gBAAA,9EACgCrB;WADhC,AAAApY,4CAAAyZ,gBAAA,nEAC0CrN;AAD1C,AAEE,IAAMf,cAAY,4CAAA,5CAAC+N,6BAAqBzW,QAAQ0V;IAC1ChN,kBAAY,kBAAI+M,iBACF,AAACD,wDAA2B/Z,MAAMuE,SAClC0I;IACdsO,WAAS,AAACpb;AAJhB,AAKE,oBAAI,iBAAAkE,oBAAKkX;AAAL,AAAA,oBAAAlX;AACK,OAACmX,gCAAkBD,SAAS,4CAAKvN;;AADtC3J;;;AAEF,OAACxB,oEAAwB0Y,SAAStO;;AAClC,OAACuF,kFAAuBxS,MAAMiN;;;AAEpC,kCAAA,0CAAAwO,5EAAME;AAAN,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAA/Z,4BAAA+Z;YAAAA,RACmC1b;cADnC,AAAA4B,4CAAA8Z,gBAAA,tEACiBnX;WADjB,AAAA3C,4CAAA8Z,gBAAA,nEACyB1N;AADzB,AAEE,IAAMiM,SAAO,6IAAA,QAAA,nJAAI,6CAAA,7CAAC/Y,iGAAO,AAAC0a;IAGpB3O,cAAY,qCAAA,rCAAC+N,6BAAqBzW,eAAe0V;IACjDsB,WAAS,AAACpb;AAJhB,AAKE,oBAAI,iBAAAkE,oBAAKkX;AAAL,AAAA,oBAAAlX;AACK,OAACmX,gCAAkBD,SAAS,4CAAKvN;;AADtC3J;;;AAEF,OAACxB,oEAAwB0Y,SAAStO;;AAClC,OAACuF,kFAAuBxS,MAAMiN;;;AAEpC,8CAAA,9CAAM4O;AAAN,AAEE,OAACC,iDAAS,AAACtV,cAAI,AAACuV;;AAElB,AAAA;;;;qCAAA,6CAAAvY,lFAAMyY;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtY,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMsY,8EAGFjc;AAHJ,AAIG,8EAAA,vEAACoc,iEAAWpc;;;AAJf,CAAA,mEAAA,WAAAkc,9EAAMD,wFAK8CxP;AALpD,AAAA,IAAA0P,cAAAD;IAAAC,kBAAA,AAAAxa,4BAAAwa;YAAAA,RAK6Cnc;aAL7C,AAAA4B,4CAAAua,gBAAA,rEAKkBlC;cALlB,AAAArY,4CAAAua,gBAAA,tEAKyB5X;aALzB,AAAA3C,4CAAAua,gBAAA,rEAKiCta;AALjC,AAMG,IAAAwa,cAAsB,AAACC,kCAAoB/X,QAAQ0V,OAAOxN,WAAW5K,OAAO,AAAC+Z;kBAA7E,AAAA5X,4CAAAqY,YAAA,IAAA,1EAAOpP;QAAP,AAAAjJ,4CAAAqY,YAAA,IAAA,hEAAmBnR;AAAnB,AACE,OAACsH,kFAAuBxS,MAAMiN;;;AAPnC,CAAA,6DAAA,7DAAMgP;;AAAN,AASA,4CAAA,5CAAMM;AAAN,AAEE,IAAAxc,qBAAkB,AAACyG,cAAI,AAACqV;AAAxB,AAAA,GAAA9b;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMoW,0EAAS,AAACV,iDAAS,4CAAA,WAAAW,vDAAClR,rHAEX,AAACS,+CAAOC;AAFE,AAAM,IAAAlM,yBAAc,gBAAA0c,kBAAA,lCAACC;AAAf,AAAA,oBAAA3c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAAC4E,eAAK5E;;AADR;;GACaU;AAD5C,AAGE,IAAAuW,cAAA,AAAAnW,cAAWgW;IAAXI,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,SAAA,AAAAD,mDAAAE,xDAAQpX;AAAR,AAAA,AACE,IAAM1F,eAAM,iBAAA+c,YAAA,mFAAA,+DAAsBrX;AAAtB,AAAA,wGAAAqX,wCAAAA,xIAACrT,iDAAAA,4DAAAA;;AAAb,AACE,AAAC0S,iEAAWpc;;AAFhB;AAAA,gBAAA2c;gBAAAC;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAA/c,yBAAA,AAAAyG,cAAAmW;AAAA,AAAA,GAAA5c;AAAA,AAAA,IAAA4c,kBAAA5c;AAAA,AAAA,GAAA,AAAA6G,6BAAA+V;AAAA,IAAA9V,kBAAA,AAAAC,sBAAA6V;AAAA,AAAA,gBAAA,AAAA5V,qBAAA4V;gBAAA9V;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,SAAA,AAAAG,gBAAA2V,rBAAQjX;AAAR,AAAA,AACE,IAAM1F,eAAM,iBAAAgd,YAAA,mFAAA,+DAAsBtX;AAAtB,AAAA,wGAAAsX,wCAAAA,xIAACtT,iDAAAA,4DAAAA;;AAAb,AACE,AAAC0S,iEAAWpc;;AAFhB;AAAA,gBAAA,AAAAiH,eAAA0V;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;AAJJ;;;AAQF,2CAAA,3CAAMM;AAAN,AAGE,IAAAC,qBAAgB,AAAC1W,cAAI,AAACqV;AAAtB,AAAA,GAAAqB;AAAA,aAAAA,TAAS9W;AAAT,AACE,OAACmW;;AACD,oBAAM,AAACtc;AAAP,AACE,IAAM0J,gBAAc,AAACxJ;IACfid,gBAAc,AAAC/c,oBAAgBsJ;IAC/BpF,UAAQ,AAAC8Y;IACTxb,SAAO,iBAAAgD,mBAAI,iBAAAyY,YAAoB,AAACzI;AAArB,AAAA,8HAAAyI,mDAAAA,zKAAC1E,4DAAAA,uEAAAA;;AAAL,AAAA,oBAAA/T;AAAAA;;AACI,OAACgO;;;IAJlBsK,cAK2B,0CAAA,KAAA,/CAACb,kCAAoB/X,kBAAgB1C,OAAO,AAAC+Z;kBALxE,AAAA5X,4CAAAmZ,YAAA,IAAA,1EAKOlQ;aALP,AAAAjJ,4CAAAmZ,YAAA,IAAA,rEAKmBlD;IACbsD,UAAQ,AAACC,uDACAjZ,QAAQ0V,OAAO,AAAC/V,yBAAWkZ;AAP1C,AAQE,AAACva,oEAAwB8G,cAAcsD;;AACvC,OAAClK,oCAAsBqa,cAAcG;;AAVzC;;;;AAYJ,uCAAA,+CAAAE,tFAAME,gGACwCE;AAD9C,AAAA,IAAAH,cAAAD;IAAAC,kBAAA,AAAA/b,4BAAA+b;YAAAA,RACuC1d;eADvC,AAAA4B,4CAAA8b,gBAAA,vEACiBE;cADjB,AAAAhc,4CAAA8b,gBAAA,tEAC0BnZ;AAD1B,AAEE,IAAM0I,cAAY,AAAC+N,6BAAqBzW,QACA,0DAAA,1DAACiL,oHAAoBoO,eACrB,0DAAA,1DAACpO,oHAAoBqO;AAF7D,AAGE,OAACrL,kFAAuBxS,MAAMiN;;AAElC,+CAAA,/CAAM6Q;AAAN,AAEE,oBAAM,AAAC7d;AAAP,AACE,IAAM4B,SAAO,iBAAAgD,mBAAI,iBAAAkZ,YAAoB,AAAClJ;AAArB,AAAA,8HAAAkJ,mDAAAA,zKAACnF,4DAAAA,uEAAAA;;AAAL,AAAA,oBAAA/T;AAAAA;;AACI,OAACgO;;;IACZ0I,WAAS,AAACpb;IACVoE,UAAQ,AAAC8Y;IACTQ,eAAa,AAACG,4CAA8BzZ;IAC5C3B,YAAU,AAACqb,8CAAgC1Z,QAAQ1C,OAAOgc;AALhE,AAME,OAAChb,oEAAwB0Y,SAAS3Y;;AAPtC;;;AASF,iDAAA,yDAAAsb,1GAAME,oHACkCE;AADxC,AAAA,IAAAH,cAAAD;IAAAC,kBAAA,AAAAxc,4BAAAwc;aAAAA,TACgCE;WADhC,AAAAzc,4CAAAuc,gBAAA,nEACiBnQ;WADjB,AAAApM,4CAAAuc,gBAAA,nEACsBvL;AADtB,AAEE,IAAMA,WAAK,iBAAA/N,mBAAI+N;AAAJ,AAAA,oBAAA/N;AAAAA;;AAAS,OAACO;;;IACfpF,QAAM,iBAAAue,YAAS3L;IAAT4L,YAAA,AAAA;IAAAC,YAAA,mFAAA,+DAAgCzQ;AAAhC,AAAA,wGAAAuQ,UAAAC,UAAAC,wCAAAF,UAAAC,UAAAC,hLAAC/U,iDAAAA,gFAAAA;;AADb,AAEE,oBAAM1J;AAAN,AACE,IAAA0Q,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,0DAAA,iGAAA,2CAAA,/LAACkO,sIAA8B5e,yHAAmBse;;AAFpD,IAAAI,gDAAA/N;IAAAgO,gDAAA,AAAA5N,qBAAA;AAAA,AAAA,CAAAJ,8DAAAgO;;AAAA,IAAA,AAEE,mDAAA,iGAAA,2CAAA,/LAACC,sIAA8B5e,yHAAmBse;;AAFpD,IAAAtN,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAA+N;;;AADF;;;AAKJ,6CAAA,7CAAOG,kGACJjM,KAAKkM,cAAcjd,OAAO6D,GAAGhF;AADhC,AAEE,oBAAM,iBAAA2D,oBAAKuO;AAAL,AAAA,oBAAAvO;AAAUya;;AAAVza;;;AAAN,AACE,IAAAtE,qBAA4B,8BAAA,9BAAC2c,gBAASoC;AAAtC,AAAA,oBAAA/e;AAAA,AAAA,uBAAAA,nBAAWgf;AAAX,AACE,IAAAhf,yBAAiB,iBAAAif,YAASpM;IAATqM,YAAA,AAAA;IAAAC,YAAA,mFAAA,+DAAgC,AAAC5U,eAAKyU;AAAtC,AAAA,wGAAAC,UAAAC,UAAAC,wCAAAF,UAAAC,UAAAC,hLAACxV,iDAAAA,gFAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMmf,mBAAiB,AAACC,wBAAe,AAAA,kGAAgBpf;IACjDqf,yDAAW,AAACrV,kDAAoCnI,OAAOsd,7FAC5C,AAAClV;IACZrH,YAAU,6CAAKyc,gEAAO3e;IACtB4I,WAAS,AAACvI,gBAAML;IAChBoF,MAAI,iBAAA7D,kBACC,uHAAA,rGAAIkd,kBACF,AAACG,gCAAY,AAACC,gCAAYJ;IAF7Bjd,kBAAA;AAAA,AAAA,SAAAD,kBAAAC,mBAAAD,kBAAAC;;AALV,AAUE,2FAAA,2CAAA,iFAAA,qEAAA,qEAAA,1VAACkH,uEAAYpJ,MAAM8F,IAAIJ,qHACO9C,sEACN0G;;AAb5B;;;AADF;;;AADF;;;AAkBF,AAAA,6CAAA,qDAAA9F,lGAAMic;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9b,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAM8b,sFACF7M;AADJ,AAEG,qFAAA,9EAAC8M,yEAAc9M;;;AAFlB,CAAA,2EAAA,3EAAM6M,sFAGF7M,KAAK+M;AAHT,AAIG,mCAAA,nCAACtI;;AACD,IAAAuI,qBAAyD,AAACtJ;IAA1DsJ,yBAAA,AAAAje,4BAAAie;gBAAA,AAAAhe,4CAAAge,uBAAA,/EAAcla;sBAAd,AAAA9D,4CAAAge,uBAAA,rFAAiB7a;6BAAjB,AAAAnD,4CAAAge,uBAAA,5FAA0BlJ;mBAA1B,AAAA9U,4CAAAge,uBAAA,lFAA0Clf;oBAA1C,AAAAkB,4CAAAge,uBAAA,nFAAgD/d;AAAhD,AACE,oBAAMkD;AAAN,AACE,IAAM8a,iBAAQ,AAAA,mFAAQ,AAAA,2FAAa,iBAAAC,YAAA,mFAAA,+DAAwB/a;AAAxB,AAAA,4GAAA+a,0CAAAA,9IAAC7a,mDAAAA,8DAAAA;;IAC9B8a,2BAAkB,iBAAA1b,oBAAKwb;AAAL,AAAA,oBAAAxb;AAAa,QAAC2b,kEAAAA,uFAAAA,vBAAyBpN,mEAAAA,9DAAKiN,mEAAAA;;AAA5Cxb;;;AADxB,AAEE,GAAM,4BAAA,3BAAG0b;AAAT,AACE,IAAM/f,eAAM,iBAAAigB,YAAA,mFAAA,+DAAwBlb;AAAxB,AAAA,4GAAAkb,0CAAAA,9IAAChb,mDAAAA,8DAAAA;;IACP+O,6BAAc,AAACxN,cAAI,AAAA,kGAAgBxG;IACnCA,mBAAM,iBAAAkgB,YAAS,AAAA,mFAAQlgB;AAAjB,AAAA,wGAAAkgB,wCAAAA,xIAACxW,iDAAAA,4DAAAA;;IACPoE,cAAK,AAACqS,yCAAe,AAACC,qCAAoBpgB;IAC1CqgB,kCAAmB,iBAAAhc,oBAAKyJ;AAAL,AAAA,oBAAAzJ;AACK,IAAAtE,qBAAoB,AAAA,6FAAa,AAAA,mFAAO+N;AAAxC,AAAA,oBAAA/N;AAAA,AAAA,mBAAAA,fAAWgF;AAAX,AACE,IAAM/E,YAAM,iBAAAsgB,YAAA,mFAAA,+DAAwBvb;AAAxB,AAAA,4GAAAub,0CAAAA,9IAACrb,mDAAAA,8DAAAA;;AAAb,AACE,OAACuB,cAAI,AAAA,kGAAgBxG;;AAFzB;;;AADLqE;;;AAJzB,AAQE,oBAAU,iBAAAA,oBAAK2P;AAAL,AAAA,GAAA3P;AAAmBgc;;AAAnBhc;;;AAAV;AAAA,AACE,oBAAMqS;AAAN,AACE,IAAM6J,sBAAa,AAAClgB,oBAAgBqW;IAC9BoI,uBAAc,AAAC0B,qDAA4CD;AADjE,AAEE,AAACnC,+CAAkBpe,iBAAM2f;;AACzB,AAACd,2CAAmBjM,KAAKkM,qBAAcjd,cAAO6D,UAAGhF;;AAJrD;;;AAVN;;AAHJ;;AAkBF,0CAAA,nCAAC2W;;;AAxBJ,CAAA,qEAAA,rEAAMoI;;AAAN,AA0BA,8CAAA,9CAAMgB,oGACH7N,KAAK8N,YAAYta,OAAOua;AAD3B,AAEE,GAAM,AAACna,cAAIka;AAAX,AACE,IAAME,qBAAgB,AAACC,iBAAOH,YAAYC;IACpC3gB,QAAM,AAACgH,gBAAMZ;IACbma,eAAa,AAAC3e,4CAAIgf,mBAAgB,AAAA,6FAAa5gB;IAC/C8e,gBAAc,gCAAA,mEAAA,jFAAMyB,cAAa,AAACC,qDAA4CD;AAHpF,AAIE,IAAA7P,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,0DAAA,1DAACkO,mDAA6BxY;;AAFhC,IAAA0a,uDAAAnQ;IAAAoQ,uDAAA,AAAAhQ,qBAAA;AAAA,AAAA,CAAAJ,8DAAAoQ;;AAAA,IAAA,AAEE,0DAAA,1DAACnC,mDAA6BxY;;AAFhC,IAAA4K,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAmQ;;;AAGA,oBAAMhC;AAAN,AACE,iNAAA,1MAACD,2CAAmBjM,KAAKkM,cACL,AAAA,iGAAe9e,OACf,8BAAA,9BAAC0c,gBAASoC;;AAHhC;;;AARJ;;;AAcF;;;yDAAA,zDAAOkC,0HAEJC;AAFH,AAIE,IAAAlhB,qBAAgB,AAACqF;AAAjB,AAAA,oBAAArF;AAAA,AAAA,WAAAA,PAAW6S;AAAX,AACE,IAAAlC,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,wEAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,IAAA0Q,qBAAA,AAAA5a,cAA6Bya;IAA7BI,uBAAA;IAAAC,uBAAA;IAAAC,mBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,mBAAAD;AAAA,IAAAE,qBAAA,AAAAH,0DAAAE;sBAAA,AAAAvd,4CAAAwd,mBAAA,IAAA,rFAASzc;iBAAT,AAAAf,4CAAAwd,mBAAA,IAAA,hFAAkBQ;mBAAlB,AAAAhe,4CAAAwd,mBAAA,IAAA,lFAAsB9gB;AAAtB,AAAA,AACE,IAAMqE,sBAAS,EAAI,OAASA,8BAAU,AAACuF,eAAKvF,iBAAUA;AAAtD,AACE,IAAAhF,gCAAiB,iBAAAkiB,YAAA,mFAAA,+DAAwBld;AAAxB,AAAA,4GAAAkd,0CAAAA,9IAAChd,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAM6B,gBAAO,AAAA,iGAAe7B;IACtBuE,iBAAQ,AAAA,kGAAgBvE;IACxBuO,oBAAW,AAAA,uGAAmBvO;IAC9BuO,wBAAW,EAAI,iBAAA,hBAAM7N,uBACR,AAACoP,+CAAOvB,kBAAWyT,YACnB,AAAC5V,8CAAMmC,kBAAWyT,WAAIthB;IACnC6D,qBAAQ,EAAI,iBAAA,hBAAM7D,uBACR,AAAC2hB,qEAAyBxgB,cAAOmgB,WAAIzd,gBACrC,AAAC+d,qEAAyBzgB,cAAO0C,eAAQyd,WAAIthB;IACvD6D,qBAAQ,AAACge,+CAAiChe;uBAThD,2CAAA,mFAAA,+FAAA,hPAUMvE,6HAAmB+E,6FACMwJ,0FACHhK;AAZ5B,AAaE,AAACoN,gDAA0B3R;;AAd/B;;AAFJ;AAAA,gBAAAohB;gBAAAC;gBAAAC;gBAAA,CAAAC,mBAAA;;;;;;;AAAA,IAAAxhB,gCAAA,AAAAyG,cAAA4a;AAAA,AAAA,GAAArhB;AAAA,AAAA,IAAAqhB,yBAAArhB;AAAA,AAAA,GAAA,AAAA6G,6BAAAwa;AAAA,IAAAva,yBAAA,AAAAC,sBAAAsa;AAAA,AAAA,gBAAA,AAAAra,qBAAAqa;gBAAAva;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,IAAA4a,qBAAA,AAAAza,gBAAAoa;sBAAA,AAAApd,4CAAAyd,mBAAA,IAAA,rFAAS1c;iBAAT,AAAAf,4CAAAyd,mBAAA,IAAA,hFAAkBO;mBAAlB,AAAAhe,4CAAAyd,mBAAA,IAAA,lFAAsB/gB;AAAtB,AAAA,AACE,IAAMqE,sBAAS,EAAI,OAASA,8BAAU,AAACuF,eAAKvF,iBAAUA;AAAtD,AACE,IAAAhF,gCAAiB,iBAAAmiB,YAAA,mFAAA,+DAAwBnd;AAAxB,AAAA,4GAAAmd,0CAAAA,9IAACjd,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAM6B,gBAAO,AAAA,iGAAe7B;IACtBuE,iBAAQ,AAAA,kGAAgBvE;IACxBuO,oBAAW,AAAA,uGAAmBvO;IAC9BuO,wBAAW,EAAI,iBAAA,hBAAM7N,uBACR,AAACoP,+CAAOvB,kBAAWyT,YACnB,AAAC5V,8CAAMmC,kBAAWyT,WAAIthB;IACnC6D,qBAAQ,EAAI,iBAAA,hBAAM7D,uBACR,AAAC2hB,qEAAyBxgB,cAAOmgB,WAAIzd,gBACrC,AAAC+d,qEAAyBzgB,cAAO0C,eAAQyd,WAAIthB;IACvD6D,qBAAQ,AAACge,+CAAiChe;uBAThD,2CAAA,mFAAA,+FAAA,hPAUMvE,6HAAmB+E,6FACMwJ,0FACHhK;AAZ5B,AAaE,AAACoN,gDAA0B3R;;AAd/B;;AAFJ;AAAA,gBAAA,AAAAiH,eAAAma;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;AAFF,IAAAF,uDAAAvQ;IAAAwQ,uDAAA,AAAApQ,qBAAA;AAAA,AAAA,CAAAJ,8DAAAwQ;;AAAA,IAAA,AAEE,IAAAO,qBAAA,AAAAlb,cAA6Bya;IAA7BU,uBAAA;IAAAC,uBAAA;IAAAC,mBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,mBAAAD;AAAA,IAAAE,qBAAA,AAAAH,0DAAAE;sBAAA,AAAA7d,4CAAA8d,mBAAA,IAAA,rFAAS/c;iBAAT,AAAAf,4CAAA8d,mBAAA,IAAA,hFAAkBE;mBAAlB,AAAAhe,4CAAA8d,mBAAA,IAAA,lFAAsBphB;AAAtB,AAAA,AACE,IAAMqE,sBAAS,EAAI,OAASA,8BAAU,AAACuF,eAAKvF,iBAAUA;AAAtD,AACE,IAAAhF,gCAAiB,iBAAAoiB,YAAA,mFAAA,+DAAwBpd;AAAxB,AAAA,4GAAAod,0CAAAA,9IAACld,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAM6B,gBAAO,AAAA,iGAAe7B;IACtBuE,iBAAQ,AAAA,kGAAgBvE;IACxBuO,oBAAW,AAAA,uGAAmBvO;IAC9BuO,wBAAW,EAAI,iBAAA,hBAAM7N,uBACR,AAACoP,+CAAOvB,kBAAWyT,YACnB,AAAC5V,8CAAMmC,kBAAWyT,WAAIthB;IACnC6D,qBAAQ,EAAI,iBAAA,hBAAM7D,uBACR,AAAC2hB,qEAAyBxgB,cAAOmgB,WAAIzd,gBACrC,AAAC+d,qEAAyBzgB,cAAO0C,eAAQyd,WAAIthB;IACvD6D,qBAAQ,AAACge,+CAAiChe;uBAThD,2CAAA,mFAAA,+FAAA,hPAUMvE,6HAAmB+E,6FACMwJ,0FACHhK;AAZ5B,AAaE,AAACoN,gDAA0B3R;;AAd/B;;AAFJ;AAAA,gBAAA0hB;gBAAAC;gBAAAC;gBAAA,CAAAC,mBAAA;;;;;;;AAAA,IAAA9hB,gCAAA,AAAAyG,cAAAkb;AAAA,AAAA,GAAA3hB;AAAA,AAAA,IAAA2hB,yBAAA3hB;AAAA,AAAA,GAAA,AAAA6G,6BAAA8a;AAAA,IAAA7a,yBAAA,AAAAC,sBAAA4a;AAAA,AAAA,gBAAA,AAAA3a,qBAAA2a;gBAAA7a;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,IAAAkb,qBAAA,AAAA/a,gBAAA0a;sBAAA,AAAA1d,4CAAA+d,mBAAA,IAAA,rFAAShd;iBAAT,AAAAf,4CAAA+d,mBAAA,IAAA,hFAAkBC;mBAAlB,AAAAhe,4CAAA+d,mBAAA,IAAA,lFAAsBrhB;AAAtB,AAAA,AACE,IAAMqE,sBAAS,EAAI,OAASA,8BAAU,AAACuF,eAAKvF,iBAAUA;AAAtD,AACE,IAAAhF,gCAAiB,iBAAAqiB,YAAA,mFAAA,+DAAwBrd;AAAxB,AAAA,4GAAAqd,0CAAAA,9IAACnd,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAM6B,gBAAO,AAAA,iGAAe7B;IACtBuE,iBAAQ,AAAA,kGAAgBvE;IACxBuO,oBAAW,AAAA,uGAAmBvO;IAC9BuO,wBAAW,EAAI,iBAAA,hBAAM7N,uBACR,AAACoP,+CAAOvB,kBAAWyT,YACnB,AAAC5V,8CAAMmC,kBAAWyT,WAAIthB;IACnC6D,qBAAQ,EAAI,iBAAA,hBAAM7D,uBACR,AAAC2hB,qEAAyBxgB,cAAOmgB,WAAIzd,gBACrC,AAAC+d,qEAAyBzgB,cAAO0C,eAAQyd,WAAIthB;IACvD6D,qBAAQ,AAACge,+CAAiChe;uBAThD,2CAAA,mFAAA,+FAAA,hPAUMvE,6HAAmB+E,6FACMwJ,0FACHhK;AAZ5B,AAaE,AAACoN,gDAA0B3R;;AAd/B;;AAFJ;AAAA,gBAAA,AAAAiH,eAAAya;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;AAFF,IAAA1Q,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAuQ;;;AAoBA,IAAMnc,WAAS,AAACiK,iBAAOiS;IACjBlc,eAAS,EAAI,OAASA,uBAAU,AAACuF,eAAKvF,UAAUA;IAChDyd,YAAU,iBAAA3d,mBAAI,AAAC4d;AAAL,AAAA,oBAAA5d;AAAAA;;AAAA;;;AAFhB,AAIE,IAAA9E,yBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAW2iB;AAAX,AACE,GAAM,AAACxhB,6CAAE,AAAA,6FAAawhB,eAAe3d;AAArC,AACE,OAACqE,uEAAYsZ,cACAF,UACA,AAACriB;;AAHhB;;;AADF;;;AAzBJ;;;AA+BF,sDAAA,tDAAMwiB,oHACH5d,SAASid;AADZ,AAEE,IAAMA,UAAI,AAACY,gDAAQZ;AAAnB,AACE,8DAAA,mFAAA,oGAAA,9OAAChB,6NAA4Bjc,SAASid;;AAE1C,mDAAA,nDAAMa,8GACH9d,SAASid,IAAIthB;AADhB,AAEE,IAAMshB,UAAI,AAACY,gDAAQZ;AAAnB,AACE,8DAAA,mFAAA,1IAAChB,6NAA4Bjc,SAASid,QAAIthB;;AAE9C,2DAAA,3DAAMoiB,8HACH/d,SAASge,eAAef,IAAIgB;AAD/B,AAEE,IAAAjjB,qBAAiB,iBAAAkjB,YAAA,mFAAA,+DAAwBle;AAAxB,AAAA,4GAAAke,0CAAAA,9IAAChe,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMkjB,4DAAqB,qDAAA,mFAAA,yEAAA,qFAAA,tSAACrR,+CAAO7R,xFACR,mVAAA,nVAACmjB;IACtBD,uBAAiB,EAAI,AAAC1c,cAAI0c,mBACPA,iBACAH;IACnBG,uBAAiB,kBAAIF,YACF,AAAClH,iDAAS,AAACzP,6CAAK6W,qBAAiBlB,MACjC,+CAAA,/CAAChW,8FAASgW,MAAKkB;IAClCA,uBAAiB,AAACE,cAAIF;AAR5B,AASE,GAAI,AAAC1c,cAAI0c;AACP,iEAAA,1DAACL,iDAAoB9d,sFAA2B,4CAAKme;;AACrD,oEAAA,7DAACP,oDAAuB5d;;;AAZ9B;;;AAcF,oDAAA,pDAAMse,gHACHte,SAASid,IAAIthB;AADhB,AAEE,IAAMshB,UAAI,AAACjV,0BAAkBiV;IACvBjd,eAAS,EAAI,OAASA,uBAAU,AAACuF,eAAKvF,UAAUA;IAChDid,UAAI,AAACjV,0BAAuBiV;IAC5BthB,YAAM,4CAAKA;AAHjB,AAIE,IAAAX,qBAAiB,iBAAAujB,YAAA,mFAAA,+DAAsBve;AAAtB,AAAA,wGAAAue,wCAAAA,xIAAC5Z,iDAAAA,4DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAAujB,cAA8BvjB;IAA9BujB,kBAAA,AAAA5hB,4BAAA4hB;cAAA,AAAA3hB,4CAAA2hB,gBAAA,tEAAoBhf;IACdA,cAAQ,iBAAAM,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAY,OAACwY;;;IACrBpQ,qDAAgB,AAACuW,0CAAsBjf,YAAQyd,7FAC/B,AAACyB,sGAAmBzB,QAAIthB;AAH9C,AAIE,GAAM,AAACG,gDAAK0D,YAAQ0I;AAApB,AACE,IAAMsO,WAAS,AAACpb;AAAhB,AACE,oBAAI,iBAAAkE,oBAAKkX;AAAL,AAAA,oBAAAlX;AACK,OAACmX,gCAAkBD,SAAS,4CAAKxW;;AADtCV;;;AAEF,OAACxB,oEAAwB0Y,SAAStO;;AAClC,OAACuF,kFAAuBxS,MAAMiN;;;AALpC;;;AALJ;;;AAYJ,8CAAA,9CAAOyW,oGACJC;AADH,AAEE,IAAMA,gBAAU,AAAC3X,+CAAOC,qBAAK0X;IACvB1C,MAAI,AAAC1V,4CAAI,WAAKxG;AAAL,AACE,IAAM/E,QAAM,iBAAA4jB,YAAA,mFAAA,+DAAwB7e;AAAxB,AAAA,4GAAA6e,0CAAAA,9IAAC3e,mDAAAA,8DAAAA;;AAAb,AACE,oBAAU,AAAA,yGAAmBjF;AAA7B;;AAAA,AAAA,mGAAA,TACG+E,2DAAa,4CAAKA;;GACzB4e;AALf,AAME,OAAC3C,uDAA0BC;;AAE/B,AAAA,+CAAA,uDAAAzd,tGAAMsgB;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAngB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAMmgB,wFACF/e;AADJ,AAEG,2FAAA,WAAAgf,/FAACC,2EAAgBjf;AAAjB,AAA2B,mDAAAgf;;;;AAF9B,CAAA,6EAAA,7EAAMD,wFAGF/e,SAASkf;AAHb,AAIG,4CAAA,5CAACP,+HAAgB3e;;AACjB,OAACmf,oEAAwB,CAACD,8CAAAA,wDAAAA,ZAAclf,oCAAAA;;;AAL3C,CAAA,uEAAA,vEAAM+e;;AAAN,AAOA,6CAAA,7CAAMK,kGACHhe;AADH,AAEE,IAAMC,SAAO,AAACE,gCAAmC,4CAAKH;AAAtD,AACE,GAAM,AAACK,cAAIJ;AAAX,AACE,OAACge,wFAA4Che;;AAD/C;;;AAGJ,yDAAA,zDAAOie,0HACJzR,KAAK+Q;AADR,AAEE,IAAMvd,SAAO,+DAAA,AAAA,/DAACke,0DAAmB1R,kJAAU,AAAC9G,6CAAK,WAAKpG;AAAL,AAAA,0FAAA,+DAAsBA;GAAKie;IACtEY,mIAA2B,AAACC,oDAAmCpe,/JACpC,4CAAA,5CAACmF;AAFlC,AAGE,OAACkZ,mDACA7R,KAAK2R,sBACL,AAACG,oDACD,6CAAA,7CAACC,8EAAQ,AAACC;;AAEf,gDAAA,hDAAMC;AAAN,AAEE,IAAA9kB,qBAAkB,AAACyG,cAAI,AAACuV;AAAxB,AAAA,GAAAhc;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMwM,OAAK,AAACxN;IACNoX,MAAI,AAACV,iDAAS,6CAAA,WAAAgJ,xDAACC;AAAD,AAAO,IAAAhlB,yBAAc,gBAAA+kB,kBAAA,lCAACpI;AAAf,AAAA,oBAAA3c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAAC4E,eAAK5E;;AADR;;GACaU;IAClC7B,UAAQ,AAAC8f,uDAA+BzR,KAAK4J;IAC7Cxc,QAAM,iBAAAglB,YAAA,mFAAA,+DAAwB,AAAChe,gBAAMwV;AAA/B,AAAA,4GAAAwI,0CAAAA,9IAAC/f,mDAAAA,8DAAAA;;AAJb,AAKE,oBAAMjF;AAAN,AACE,AAACilB,oEAAsD,AAAA,iGAAejlB,OAAOuE;;AAC7E,AAAC2gB,iCAAwB3gB,QAAQiY;;AACjC,8EAAA,UAAA,jFAACvJ;;AAHH;;;AANJ;;;AAWF,0CAAA,1CAAMkS;AAAN,AAEE,IAAAplB,qBAA2B,AAACyG,cAAI,AAACqV;AAAjC,AAAA,GAAA9b;AAAA,AAAA,sBAAAA,lBAAWqlB;AAAX,AACE,IAAMhf,6EAAY,AAAC0V,iDAAS,4CAAA,WAAAuJ,vDAAC9Z,rHAKX,AAACS,+CAAOC;AALE,AAAM,IAAAlM,yBAAc,gBAAAslB,kBAAA,lCAAC3I;AAAf,AAAA,oBAAA3c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,IAAMuI,QAAM,gBAAAoX,kBAAA,lCAAC3I;AAAb,AAAA,kDAAA,qEAAA,nBACO,AAACpS,eAAK5E,2DACH,SAAA,RAAKuI;;AAHjB;;GAIDmX;IAE3Btd,cAAY,AAACd,gBAAMZ;IACnBkf,yBAAuB,AAACtW,iBACA,AAACjE,+CAAO,WAAAwa;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAAvhB,4CAAAwhB,YAAA,IAAA,hEAAMta;YAAN,AAAAlH,4CAAAwhB,YAAA,IAAA,pEAAQxlB;AAAR,AAAgB,gJAAA,zIAACkB,6CAAE,AAAA,qFAAQlB;GAC3B,AAACylB,oDAAYC,iBAAOtf;IACpDuf,aAAW,AAAClmB,6CAAK,AAAA,qFAAQqI;IACzB8d,kBAAgB,AAACH,oDACA,iBAAAI,NAAKE;AAAL,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAAnkB,4BAAAmkB;SAAA,AAAAlkB,4CAAAkkB,gBAAA,jEAAmBpgB;YAAnB,AAAA9D,4CAAAkkB,gBAAA,pEAAsB7X;AAAtB,AAAA,kDAAA,qDAAA,HACOvI,0DACG,EAAI,CAAGqgB,QAAMT,yBACX,EAAI,SAAA,AAAAU,RAAG/X,wBAAO0X,cACZ;AACE,AAACM,sBAAON,WAAW1X;;AADrB;;CAGA,yCAAA,xCAAK,SAAA,AAAA+X,RAAG/X,wBAAO0X,qBACjB1X;GACZ7H;IACjBpG,QAAM,iBAAAkmB,YAAA,mFAAA,+DAAsB,AAAA,gFAAKpe;AAA3B,AAAA,wGAAAoe,wCAAAA,xIAACxc,iDAAAA,4DAAAA;;IACPyc,WAAS,iBAAAC,YAASR;IAATQ,gBAAA,EAAA,CAAAA,aAAA,OAAA,KACS,AAAC7a,4CAAI,WAAA8a;AAAA,AAAA,IAAAC,cAAAD;IAAAC,kBAAA,AAAA3kB,4BAAA2kB;SAAA,AAAA1kB,4CAAA0kB,gBAAA,jEAAa5gB;YAAb,AAAA9D,4CAAA0kB,gBAAA,pEAAgBrY;AAAhB,AACE,IAAAsY,eAAOtN;IAAPuN,eAAS,AAAA,iGAAexmB;AAAxB,AAAA,oBAAA,CAAAumB,6CAAAA,2CAAA,gDAAAC,gBAAAD,uBAAA,gDAAAC;AAEE,OAAChX,0DAAY,8GAAA,7GAAK,AAACiX,kDAAY,qDAAA,rDAACpf,+CAAO4G,kFAAuBvI;;AAFhE,oBAAA,CAAA6gB,6CAAAA,2CAAA,6DAAAC,gBAAAD,uBAAA,6DAAAC;AAIE,OAAChX,0DAAY,uHAAA,tHAAK,AAACiX,kDAAY,6DAAA,7DAACpf,+CAAO,SAAA,RAAK4G,2FAA0BvI;;AAJxE,MAAA,KAAA/B,MAAA,CAAA,mEAAA6iB;;;GADPJ;AADT,AAAA,GAAA,CAAAA,iBAAA;AAAA;;AAOS,yDAAA,OAAAA,zDAACK;;;AA9BzB,AA+BE,AAAC/C,4CAAe,4CAAA,5CAACnY,8FAAQnF;;AACzB,OAAC8d,oEAAwBiC;;AAjC7B;;;AAmCF,4CAAA,5CAAMO;AAAN,AAEE,IAAA3mB,qBAAkB,AAACyG,cAAI,AAACqV;AAAxB,AAAA,GAAA9b;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMoW,0EAAS,AAACV,iDAAS,4CAAA,WAAA6K,vDAACpb,rHAEX,AAACS,+CAAOC;AAFE,AAAM,IAAAlM,yBAAc,gBAAA4mB,kBAAA,lCAACjK;AAAf,AAAA,oBAAA3c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAAC4E,eAAK5E;;AADR;;GACaU;IAEtCwgB,UAAQ,iBAAAC,YAASrK;IAATqK,gBAAA,EAAA,CAAAA,aAAA,OAAA,KACS,AAACtb,4CAAI,WAAK7F;AAAL,AAAS,iEAAA,1DAAC8J,+HAA+B9J;GAA9CmhB;AADT,AAAA,GAAA,CAAAA,iBAAA;AAAA;;AAES,yDAAA,OAAAA,zDAACJ;;;AALxB,AAME,AAAC/C,4CAAelH;;AAChB,OAAC0H,oEAAwB0C;;AAR7B;;;AAUF,4DAAA,5DAAME;AAAN,AAEE,IAAA/mB,qBAAkB,AAACyG,cAAI,AAACqV;AAAxB,AAAA,GAAA9b;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AACE,IAAMwM,OAAK,AAACxN;IACNue,gFAAe,AAAC7H,iDAAS,4CAAA,WAAAiL,vDAACxb,rHAEX,AAACS,+CAAOC;AAFE,AAAM,IAAAlM,yBAAc,gBAAAgnB,kBAAA,lCAACrK;AAAf,AAAA,oBAAA3c;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,OAAC4E,eAAK5E;;AADR;;GACaU;IAE5CA,aAAO,+DAAA,AAAA,/DAACke,0DAAmB1R,kJAAU,AAAC9G,6CAAK,WAAKpG;AAAL,AAAA,0FAAA,+DAAsBA;GAAKie;IACtE9D,UAAQ,AAAA,mFAAQ,AAAA,2FAAa,AAAC7Y,gBAAMZ;IAEpC4gB,eAAQ,AAAChb,+CAAO,WAAKhM;AAAL,AAAY,IAAAinB,YAAQ,AAAA,mFAAQ,AAAA,2FAAajnB;AAA7B,AAAA,GAAA,CAAAinB,aAAA;AAAA;;AAAqC,uDAAAA,hDAACpmB,0DAAKgf;;GAAWzZ;AAPxF,kHAQO,AAACoe,oDAAmCwC,tKACpC,mDAAA,5CAACzb;;AAVV;;;AAYF,+CAAA,/CAAM2b,sGACHC;AADH,AAEE,oBAAMA;AAAN,AAAY,AAACtC;;AAAb;;AACA,IAAA9kB,qBAAkB,AAACyG,cAAI,AAACqV;AAAxB,AAAA,GAAA9b;AAAA,AAAA,aAAAA,TAAWqG;AAAX,AAEE,IAAMua,aAAW,AAAC3U,+CAAO,WAAKhM;AAAL,AACF,SAAI,6CAAA,7CAACkB,oDAAS,sBAAA,tBAACwb,gBAAS1c,+BACpB,6CAAA,7CAACkB,oDAAS,sBAAA,tBAACwb,gBAAS1c;GAAuBoG;AAFtE,AAGE,GAAM,AAACI,cAAIma;AAAX,AACE,IAAM/N,OAAK,AAACxN;IACNsb,cAAY,AAAC5E,iDAAS,4CAAA,WAAAsL,vDAAC7b;AAAD,AAAM,OAACjB,eAAK,gBAAA8c,kBAAA,lCAAC1K;GAAuBiE;IAC1D0G,cAAY,AAAC9b,4CAAI,WAAK7F;AAAL,AAAA,0FAAA,+DAAsBA;GAAKgb;IAC5Cta,aAAO,iBAAAkhB,YAAc1U;IAAd2U,YAAA,AAAA;IAAAC,YAAwBH;AAAxB,AAAA,kHAAAC,UAAAC,UAAAC,6CAAAF,UAAAC,UAAAC,/LAACC,sDAAAA,qFAAAA;;AAHd,AAIE,sCAAA,tCAACC,2CAAiCthB;;AAClC,OAACqa,4CAAe7N,KAAK8N,YAAYta,WAAOua;;AAN5C;;;AALJ;;;AAaF;;;oCAAA,pCAAKgH;AAIL,AAAA,yDAAA,iEAAAnkB,1HAAMykB;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8FAAA,9FAAME,yGACHK,KAAKxiB,IAAMyiB;AADd,AAEE,mBAAA,fAAME;oBAAN,hBACMC;kBADN,dAEMC;IACAC,eAAa,AAACC,qBAAYJ,aAAaH;IACvCQ,gBAAc,AAACD,qBAAYH,cAAcJ;IACzCS,cAAY,AAACF,qBAAYF,YAAYL;IACrCU,qBAAmB,sDAAA,WAAAC,jEAAC9X;AAAD,AAAS,4BAAA8X,rBAACJ,uCAAcP;qDAAMC;IACjDW,8EAAa,AAAC1d,sDAAOod,aAAaE,gEAAcC,YAAYC,nNAC/C,AAAChd,+CAAOC;IAR3Buc,cASgB,AAACxhB,gBAAM,AAACoiB,gDACA,WAAAC;AAAA,AAAA,IAAAC,cAAAD;gBAAA,AAAArlB,4CAAAslB,YAAA,IAAA,xEAAMC;cAAN,AAAAvlB,4CAAAslB,YAAA,IAAA,tEAAgB/kB;AAAhB,AACE,IAAMilB,UAAQ,CAAGD,YAAU,AAACxoB,gBAAMwD;AAAlC,AACE,GACE,CAAGuB,MAAIyjB;AACP,QAAGzjB,MAAIyjB;;AAFT,GAIE,CAAGzjB,MAAI0jB;AACP,QAAGA,UAAQ1jB;;AALb,AAAA;;;;GASJ2jB,eACAP;QAtBxB,AAAAllB,4CAAAwkB,YAAA,IAAA,hEASOtd;YATP,AAAAlH,4CAAAwkB,YAAA,IAAA,pEASSW;AATT,AAuBE,oBAAMA;AAAN,AACE,oBACE,eAAA,WAAAO,1BAACC;AAAD,AAAO,yBAAAD,lBAACE,oCAAUT;GAAOZ;AACzBY;;AAFF,GAGE,wCAAA,xCAACU,kCAAoBV;AACrB,0DAAA,nDAACroB,6CAAKqoB,UAAQ,AAACpoB,gBAAMooB;;AAJvB,AAME,0DAAA,nDAACroB,6CAAKqoB,UAAQ,0BAAA,zBAAG,AAACpoB,gBAAMooB;;;;;AAP5B;;;;AAzBJ,CAAA,iFAAA,jFAAMlB;;AAAN;AAAA,CAAA,2EAAA,WAAAC,tFAAMD;AAAN,AAAA,IAAAE,YAAA,AAAAnhB,gBAAAkhB;IAAAA,gBAAA,AAAAjhB,eAAAihB;IAAAE,YAAA,AAAAphB,gBAAAkhB;IAAAA,gBAAA,AAAAjhB,eAAAihB;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,UAAAC,UAAAF;;;AAAA,AAkCA;;;kDAAA,lDAAO4B;AAAP,AAGE,IAAA/pB,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAM,AAAA,6FAAaA;AAAnB,AACE,IAAAD,yBAAmB,AAACI;AAApB,AAAA,oBAAAJ;AAAA,AAAA,cAAAA,VAAWG;AAAX,AACE,IAAAH,yBAAiB,AAACM,oBAAgBH;AAAlC,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAAL,yBAAe,AAACmE,yBAAW9D;AAA3B,AAAA,oBAAAL;AAAA,AAAA,UAAAA,NAAW+F;AAAX,AACE,IAAMpF,QAAM,0DAAA,1DAACC,oDAASP;AAAtB,AACE,OAAC2pB,4FAA+BrpB,MAAMoF,sDAAI6hB;;AAF9C;;;AADF;;;AADF;;;AADF;;;AADF;;;AAQF;;;2CAAA,3CAAOqC;AAAP,AAGE,IAAAjqB,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAM,AAAA,6FAAaA;AAAnB,AACE,IAAAD,yBAAmB,AAACI;AAApB,AAAA,oBAAAJ;AAAA,AAAA,cAAAA,VAAWG;AAAX,AACE,IAAAH,yBAAiB,AAACM,oBAAgBH;AAAlC,AAAA,oBAAAH;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAAL,yBAAe,AAACmE,yBAAW9D;AAA3B,AAAA,oBAAAL;AAAA,AAAA,UAAAA,NAAW+F;AAAX,AACE,IAAMpF,QAAM,0DAAA,1DAACC,oDAASP;AAAtB,AACE,OAAC6nB,uDAA+BvnB,MAAMoF;;AAF1C;;;AADF;;;AADF;;;AADF;;;AADF;;;AAQF,yDAAA,zDAAMmkB;AAAN,AAEE,IAAAlqB,qBAAgB,AAAC+pB;AAAjB,AAAA,oBAAA/pB;AAAA,AAAA,WAAAA,PAAWgO;AAAX,AACE,GAAU,AAACkE,4BAAclE;AAAzB;;AAAA,AACE,oBAAI,AAAC6b,kBAAQjC,kCAAU5Z;AACrB,OAACmc,YAAenc;;AAChB,IAAMoc,YAAU,AAACC,uEAAgCrc;AAAjD,AACE,AAACsc;;AACD,OAAC5Q,kGAAuC0Q;;;;AANhD;;;AAQF,qDAAA,rDAAMG;AAAN,AAEE,IAAAvqB,qBAAgB,AAACiqB;AAAjB,AAAA,oBAAAjqB;AAAA,AAAA,WAAAA,PAAWgO;AAAX,AACE,IAAMoc,YAAU,AAACpd,0BAAkBgB;IAC7Bwc,eAAO,AAAClgB,4CAAqB8f;AADnC,AAEE,IAAApqB,yBAAgB,CAACyqB,qDAAAA,gEAAAA,bAAYL,4CAAAA;AAA7B,AAAA,oBAAApqB;AAAA,AAAA,eAAAA,XAAWgO;AAAX,AACE,oBAAIwc;AACF,6KAAA,tKAACplB,uCACA,AAACC,kCACD,AAAA,mFAAQ2I;;AAET,6KAAA,tKAAC5I,uCACA,AAACC,kCACD,AAAA,mFAAQ2I;;;AARb;;;AAHJ;;;AAcF,wCAAA,xCAAM0c;AAAN,AACE,oBAAI,AAACC;AACH,IAAA3qB,qBAAc,iBAAA4qB,YAAQ,AAAC1qB;IAAT0qB,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,AAAA,6FAAAA;IAAAA,gBAAA,EAAA,CAAAA,iBAAA,OAAA,KAEQ,AAAC,WAAKjlB;AAAL,AAAA,0FAAA,+DAAsBA;GAAvBilB;IAFRA,gBAAA,EAAA,CAAAA,iBAAA,OAAA,KAAA,qGAAAA,8CAAAA,lJAGQ1lB,mDAAAA,kEAAAA;AAHR,AAAA,GAAA,CAAA0lB,iBAAA;AAAA;;AAAA,OAAA,6FAAAA;;;AAAd,AAAA,oBAAA5qB;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AAKE,IAAMI,MAAI,AAAC2c;AAAX,AACE,AAACmI,4EAAgCllB;;AACjC,kBAAA,XAAC2T;AAAD,AAAgB,8EAAA,2CAAA,lHAACjQ,iLAAyB1D,WAAII,IAAIJ;GAAlD;;AAPJ;;;AAQA,OAACmlB;;;AAEL,yCAAA,zCAAMC;AAAN,AAEE,oBAAI,AAACJ;AACH,IAAM3c,OAAK,AAAC8G;IACN9P,WAAS,iBAAAV,oBACC,OAAS0J;AADV,AAAA,GAAA1J;AAAA,IAAAA,wBAEC,AAACgG,4CAAqB0D;AAFvB,AAAA,oBAAA1J;AAGC,OAACyQ,iBAAY/G;;AAHd1J;;;AAAAA;;;AADf,AAKE,oBAAMU;AAAN,AACE,IAAMwb,eAAa,CAACwK,6DAAAA,uEAAAA,ZAAoBhmB,mDAAAA;AAAxC,AACE,IAAAmY,qBAAY,iBAAA7Y,oBACC,8GAAA,7GAAM,AAAA,4FAAakc;AADpB,AAAA,GAAAlc;AAEC,OAAA,6FAAakc;;AAFdlc;;;AAAZ,AAAA,oBAAA6Y;AAAA,SAAAA,LAASxX;AAAT,AAGE,AACE,AAACklB,4EAAgCllB;;AACjC,kBAAA,XAAC2T;AAAD,AAAgB,8EAAA,2CAAA,gFAAA,lMAACjQ,iLAAyBrE,kEAAeA;GAAzD;;AACF,IAAM8a,UAAQ,iBAAAmL,YAAQ,iBAAAC,YAAA,mFAAA,+DAAwBlmB;AAAxB,AAAA,4GAAAkmB,0CAAAA,9IAAChmB,mDAAAA,8DAAAA;;IAAT+lB,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,AAAA,2FAAAA;AAAA,AAAA,GAAA,CAAAA,iBAAA;AAAA;;AAAA,OAAA,mFAAAA;;;AAAd,AAIE,IAAAjrB,qBAAqB,AAAA,4FAAa,CAACkF,mDAAAA,4DAAAA,XAAU4a,wCAAAA;AAA7C,AAAA,oBAAA9f;AAAA,AAAA,gBAAAA,ZAAWoqB;AAAX,AACE,AAACS,4EAAgCT;;AACjC,kBAAA,XAAC9Q;AAAD,AAAgB,8EAAA,2CAAA,gFAAA,lMAACjQ,iLAAyBrE,kEAAeA;GAAzD;;AAFF;;;;AAZR;;;AAeF,OAACmmB;;;AAEL,0CAAA,1CAAMC,4FACHpmB;AADH,AAEE,IAAAhF,qBAAiB,iBAAAqrB,YAAA,mFAAA,+DAAsBrmB;AAAtB,AAAA,wGAAAqmB,wCAAAA,xIAAC1hB,iDAAAA,4DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAM4S,OAAK,AAACxN;IAENimB,aAAW,4DAAA,5DAAChH,uDAA+BzR,wFAAM7N;AAFvD,AAGE,iDAAA,jDAAC2iB,sCAA6B2D,8FAAYrrB;;AAC1C,AAACilB,oEAAsD,AAAA,iGAAejlB,OAAOqrB;;AAC7E,4DAAA,rDAACjN,+CAAkBpe;;AANvB;;;AAQF,0DAAA,1DAAMsrB;AAAN,AAEE,IAAMtrB,QAAM,AAACurB;AAAb,AACE,8CAAA,vCAACrjB,0HAA0BlI;;AAE/B,yDAAA,zDAAMwrB,0HACHC;AADH,AAEE,IAAA1rB,qBAAuB,AAAC4rB;AAAxB,AAAA,oBAAA5rB;AAAA,AAAA,kBAAAA,dAAW2rB;AAAX,AACE,IAAMtlB,SAAO,gEAAA,hEAACwlB,0CAAiCF,YAAYD;IACrDhjB,YAAU,oEAAA,pEAACojB,8CAAqCH,YAAYD;IAE5DrlB,aAAO,EAAI,6CAAA,7CAAClF,8FAAMuH,YACT,AAACrH,kBAAQgF,QACTA;AALf,AAME,OAACge,wFAA4Che,WAAOqC;;AAPxD;;;AASF,+CAAA,/CAAOqjB,sGACJrjB;AADH,AAEE,oBAEE,AAACiiB;AACD,+FAAA,xFAACtG,2KAA6C,AAAC/jB,oBAAgB,AAAC0rB;;AAHlE,oBAME,iBAAA1nB,oBAAK,AAAC2nB;AAAN,AAAA,oBAAA3nB;AAAwB,QAAA,QAAM,AAACtD,gBAAM,AAACgb;;AAAtC1X;;;AACA,IAAM4nB,IAAE,EAAI,6CAAA,7CAAC/qB,8FAAMuH,YAAWyjB,2CAAkCC;IAC1DC,UAAQ,iBAAAC,YAAG,AAACrlB,gBAAM,AAAC+U;AAAX,AAAA,0EAAAsQ,yBAAAA,3FAACJ,kCAAAA,6CAAAA;;AADf,AAEE,oBAAMG;AAAN,AACE,OAACE,0CAA4BF,QAAQ3jB;;AADvC;;;AATJ,oBAaE,iBAAApE,oBAAK,AAAC2nB;AAAN,AAAA,oBAAA3nB;AAAwB,OAACnD,6CAAEuH,UAAU,AAAC8jB;;AAAtCloB;;;AACA,IAAM4nB,IAAE,EAAI,6CAAA,7CAAC/qB,8FAAMuH,YAAWyjB,2CAAkCC;IAC1DK,aAAW,EAAI,6CAAA,7CAACtrB,8FAAMuH,YAAWzB,gBAAMwG;IACvC4e,UAAQ,iBAAAK,YAAG,iBAAAC,YAAY,AAAC3Q;AAAb,AAAA,4FAAA2Q,kCAAAA,tHAACF,2CAAAA,sDAAAA;;AAAJ,AAAA,0EAAAC,yBAAAA,3FAACR,kCAAAA,6CAAAA;;AAFf,AAGE,oBAAMG;AAAN,AACE,OAACE,0CAA4BF,QAAQ3jB;;AADvC;;;AAjBJ,oBAqBE,AAACujB;AACD,OAACV;;AAtBH;;;;;;AAwBF,0CAAA,1CAAMqB,4FACHlkB;AADH,AAEE,kBAAKmkB;AAAL,AACE,OAACd,6CAAqBrjB;;;AAE1B,+CAAA,/CAAMokB,sGACH7sB,MAAMU,MAAMgS;AADf,AAEE,IAAMhS,YAAM,AAACY,oBAAYZ;AAAzB,AAGE,OAAC8R,kFAAuBxS,MAAMU,UACN,uGAAA,2CAAA,lJAAC2N,6NACkB,AAAA,uGAAmBrO,eACrC0S;;AAE7B,AAAA,2CAAA,mDAAAlP,9FAAMupB;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAppB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMopB,oFACFna,KAAKsa,cAAc3oB;AADvB,AAEG,IAAMvE,QAAM,EAAI,EAAI,AAAC4J,sBAAMsjB,oBACP,OAASA,8BACf,AAACC,sCAA6BD,eAAeA;IACrDrrB,SAAO,AAAA,iGAAe7B;AAH5B,AAIE,8EAAA,2CAAA,4DAAA,2DAAA,zOAACotB,wKAAoBptB,4DAAY4S,+DAAa/Q,eAAQ0C;;;AAN3D,CAAA,yEAAA,WAAAyoB,pFAAMD,8FAO8BrsB;AAPpC,AAAA,IAAAusB,cAAAD;IAAAC,kBAAA,AAAAtrB,4BAAAsrB;aAAAA,TAO4B/V;YAP5B,AAAAtV,4CAAAqrB,gBAAA,pEAOYjtB;WAPZ,AAAA4B,4CAAAqrB,gBAAA,nEAOkBra;AAPlB,AAQG,oBAAM,AAAA,mFAAQ,iBAAAya,YAAWza;IAAX0a,YAAA,mFAAA,+DAA6B,AAAA,6FAAattB;AAA1C,AAAA,4GAAAqtB,UAAAC,0CAAAD,UAAAC,lKAACroB,mDAAAA,wEAAAA;;AAAf,AACE,gEAAA,zDAAC4nB,6CAAgB7sB,MAAMU;;AADzB;;;;AARH,CAAA,mEAAA,nEAAMqsB;;AAAN,AAWA,AAAA;;;mDAAA,2DAAAvpB,9GAAMiR;AAAN,AAAA,IAAA8Y,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA9Y;;;KAAA;AAAA,OAAAA,+EAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9Q,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iFAAA,jFAAM8Q;AAAN,AAGG,sFAAA,/EAACiZ;;;AAHJ,CAAA,iFAAA,WAAAF,5FAAM/Y;AAAN,AAAA,IAAAgZ,cAAAD;IAAAC,kBAAA,AAAA9rB,4BAAA8rB;WAAAA,PAIuD/a;mBAJvD,AAAA9Q,4CAAA6rB,gBAAA,3EAIYhb;6BAJZ,AAAA7Q,4CAAA6rB,gBAAA,rFAImBE;oBAJnB,AAAA/rB,4CAAA6rB,gBAAA,5EAIoC/Z;AAJpC,AAMG,oBAAU,AAACka;AAAX;;AAAA,AACE,oBAAM,AAACxoB;AAAP,AACE,GAAM,6EAAA,mFAAA,0EAAA,kFAAA,2EAAA,0EAAA,/cAAK,cAAA,AAAA4gB,dAAC9Y,8BAAK2gB,+CACN,cAAA,AAAA7H,dAAC9Y,8BAAK4gB,qDACN,AAAC5gB,cAAI,AAAC6gB,4DACN,AAAC7gB,cAAI,AAAC8gB,oEACN,AAAC9gB,cAAI,AAAC+gB,6DACN,AAAC/gB,cAAI,AAACghB,4DACN,AAAChhB,cAAI,AAACihB,8DACN,AAACjhB,cAAI,AAACkhB;AAPjB,AAQE,IAAA,AACE,IAAM7S,WAAS,AAACpb;IACVH,QAAM,AAACC;IACPquB,WAAS,iBAAAvuB,qBAAoB,AAAA,6FAAaC;AAAjC,AAAA,oBAAAD;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,IAAAwpB,YAAA,mFAAA,+DAAsBxpB;AAAtB,AAAA,wGAAAwpB,wCAAAA,xIAAC7kB,iDAAAA,4DAAAA;;AADH;;;IAET8kB,OAAK,iBAAAnqB,oBAAKkX;AAAL,AAAA,oBAAAlX;AAAc,OAAChE,oBAAgBkb;;AAA/BlX;;;IACLoqB,aAAW,AAAA,kGAAgBH;IAC3BI,6BAA2B,iBAAArqB,oBAAKoqB;AAAL,AAAA,oBAAApqB;AACK,OAACsqB,iEAAkBF,WAAW,AAAA,8FAAcH;;AADjDjqB;;;IAE3B3D,QAAM,iBAAAmE,mBAAI,AAAA,kGAAgB6O;AAApB,AAAA,oBAAA7O;AAAAA;;AACI,IAAAR,oBAAKmqB;AAAL,AAAA,oBAAAnqB;AAAU,gEAAA,zDAAC1D,oDAAS6tB;;AAApBnqB;;;;AAThB,AAUE,oBACEoO;AACA,OAACoa,6CAAgByB,SAAS5tB,MAAMgS;;AAFlC,oBAIE,iBAAArO,oBAAKspB;AAAL,AAAA,oBAAAtpB;AAAA,IAAAA,wBACK,AAACuqB,mCAAoB5uB;AAD1B,AAAA,GAAAqE;AAEK,oBAAMmqB;AAAN,AAAW,OAACK,mIAA8BL;;AAA1C;;;AAFLnqB;;;AAAAA;;;AAJF;;AAAA,oBASE,iBAAAA,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAA,IAAAA,wBAAW3D;AAAX,AAAA,oBAAA2D;AAAA,IAAAA,wBAAiBqqB;AAAjB,AAAA,oBAAArqB;AACK,OAACxD,gDAAK,AAACS,oBAAYotB,4BACb,AAACptB,oBAAYZ;;AAFxB2D;;;AAAAA;;;AAAAA;;;AAGA,OAACwoB,6CAAgByB,SAAS5tB,MAAMgS;;AAZlC;;;;iBAXJ,GAAA,CAAA2b,mBAwBS1qB;AAxBT,YAAA0qB,RAwBkBS;AAxBlB,AAyBI,OAAAC,qDAAA,0BAAA,uDAAA,AAAAC,mBAAA,2CAAA,oFAAA,oDAAA,cAAA,xEAA8BF;;AAzBlC,AAAA,MAAAT;;;;AARF;;;AADF;;;;;AAPL,CAAA,2EAAA,3EAAM5Z;;AAAN,AA2CA,8CAAA,9CAAOwa,oGACJptB,OAAO0C;AADV,AAEE,+GAAK,AAAC2qB,2EAAyB3qB,QAAQ1C,OAAO,AAAC6N,kCAAyB7N,hKACnE,AAACoI,hDACD,AAACklB,yCAA2BttB,7DAC5BP;;AAEP,+CAAA,gFAAA8tB,/HAAME,sGACH5pB,GAAG6pB,eAAe1tB;AADrB,AAAA,IAAAwtB,cAAAD;IAAAC,kBAAA,AAAA1tB,4BAAA0tB;aAAAA,TAGiCI;qBAHjC,AAAA7tB,4CAAAytB,gBAAA,6DAAA,1IACoCG;AADpC,AAIE,GAEE,OAASD;AACT,AAACG,+BAAiBhqB,GAAG6pB,eAAeE;;AAHtC,GAME,AAAC1lB,wBAAQwlB;AACT,AAACI,+BAAsBJ,eAAe1tB;;AAPxC,GASE,AAAC+tB,oBAAIL;AACL,IAAMM,WAAE,CAACN,+CAAAA,iDAAAA;AAAT,AACE,AAACG,+BAAiBhqB,GAAGmqB,SAAEJ;;AAX3B,AAAA;;;;;AAgBA,oBAAMD;AAAN,AACE,IAAMM,iCAAyB,sOAAA,MAAA,1OAAI,EACC,AAACC,qBAAKR,qBACN,6CAAA,7CAACruB,mJACE,AAAC8N,iBAAOugB;AAH/C,AAME,OAAClZ,gCAAuByZ;;AAP5B;;;AASF,8CAAA,9CAAME,oGACHnuB,OAAOouB,IAAIC,UAAUC;AADxB,AAEE,IAAMC,aAAK,iBAAA/rB,oBAAK4rB;AAAL,AAAA,oBAAA5rB;AAAS,2CAAA,pCAACmX,gCAAkByU;;AAA5B5rB;;;AAAX,AACE,IAAAgsB,YAAM,AAACzN,gDAAQ/gB;IAAfwuB,gBAAA,EAAA,CAAAA,qBAAA1nB,oBAAA,AAAA0nB,cAAA;AAAA,AAAA,QAAAA;KAAA;AACY,OAAC7gB,0DAAY,CAAK,kBAAM,iBAAA3K,mBAAIsrB;AAAJ,AAAA,oBAAAtrB;AAAAA;;AAAWurB;;gBAAtB,VAAK,AAAA,IAAA,6EAAwCF,UAAUD;;;KADhF;AAEO,oBAAIE;AACF,iEAAA,1DAAC3gB,qHAAqBygB;;AACtB,iEAAA,1DAACzgB,yHAAyBygB,IAAIC;;;;;AAJvC;;;;AAOJ,kDAAA,lDAAMI,4GACH1d;AADH,AAEE,IAAM2d,WAAS,AAACC,6BAAoB5d;iBAApC,bACM6d;AADN,AAEE,OAACC,gDACA,AAACC,gCAAuB,UAAA,TAAKJ,aAAaE,sBAC1C;AAAA,AAAA,0FAAQF,SAASE;;;AAEtB,yCAAA,zCAAMG,0FAAgBC;AAAtB,AACE,OAAAC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,mIAAA,WAAAE,9FAA8B,AAACV,gDAAmB,AAAClrB;AAAnD,AAAA,IAAA6rB,cAAAD;eAAA,AAAAhtB,4CAAAitB,YAAA,IAAA,vEAASV;iBAAT,AAAAvsB,4CAAAitB,YAAA,IAAA,zEAAkBR;AAAlB,AAAA,OAAAK,iHAAA,WACQK,5EAAK,AAACC,mCAAUb,SAASE,WAAWI;AAD5C,AAAA,OAAAK,2BAAA,AAEE,kBAAI,AAACG,8CACHF,KACA,AAACG,UAAa,AAACC,UAAaJ;;;;;AAElC,AAAA,4CAAA,oDAAA3tB,hGAAMiuB;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9tB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0EAAA,1EAAM8tB,qFACFvmB,EAAE0H,KAAK8e;AADX,AAEG,OAAAZ,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sGAAA,WAAAa,jEAA8B,AAACrB,gDAAmB1d;AAAlD,AAAA,IAAAgf,cAAAD;eAAA,AAAA3tB,4CAAA4tB,YAAA,IAAA,vEAASrB;iBAAT,AAAAvsB,4CAAA4tB,YAAA,IAAA,zEAAkBnB;AAAlB,AAAA,OAAAS,2BAAA,AACE,AAACW,wEAAajf,KAAK2d,SAASE,WAAWiB,MACzB,WAAK3L,MAAM+L;AAAX,AAEE,IAAMA,qFAAcA,vBACA,iCAAA,IAAA,rCAAC9pB,vBACD,iEAAA,IAAA,rEAACA,vBACD,iGAAA,IAAA,rGAACA;IACfkoB,YAAU,eAAA,4DAAA,1EAAK4B,8DAAc,AAAMC,4DAAahM;AAJtD,AAKE,wCAAA,KAAA,tCAAC/d,uBAAekoB;;;;;;AAXvC,CAAA,0EAAA,1EAAMuB,qFAYF7e,KAAKof,IAAIb,KAAKO,MAAMO;AAZxB,AAaG,OAACC,iBACA,iBAAAC,qBAAA,+CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,gBAAAA;;AAAA,AAAA,IAAAryB,qBAAA,AAAAyG,cAAA4rB;AAAA,AAAA,GAAAryB;AAAA,AAAA,IAAAqyB,gBAAAryB;AAAA,AAAA,GAAA,AAAA6G,6BAAAwrB;AAAA,IAAAE,kBA4kC+C,AAAAxrB,sBAAAsrB;IA5kC/CG,qBAAA,AAAAxxB,gBAAAuxB;IAAAE,YAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,YAAA;;AAAA,AAAA,GAAA,CAAAA,YAAAH;AAAA,IAAAI,cAAA,AAAAC,eAAAN,gBAAAI;YAAA,AAAA1uB,4CAAA2uB,YAAA,IAAA,pEAAO5M;WAAP,AAAA/hB,4CAAA2uB,YAAA,IAAA,nEAAiBS;AAAjB,AAAA,AAAA,AAAAP,uBAAAL,UAEE,iBAAMtC,YAAU,iBAAAqD,YAAyB,AAAQH;AAAjC,AAAA,wIAAAG,wDAAAA,xLAAC,AAAAE,iEAAA,AAAAA,4EAAA,AAAAA;;IAAjBJ,cACsB,kBAAInD,WACF,iBAAMyD,iBAAe,qEAAA,rEAAC9qB,2DAAqBqnB;AAA3C,AAAA,0FACG,uDAAA,vDAACpvB,6CAAKovB,cAAYyD,gBAClB,AAAC7yB,6CAAKovB,UAAUyD;KAHrB,mFAAA,GAAA;gBADtB,AAAA3vB,4CAAAqvB,YAAA,IAAA,xEACOvB;UADP,AAAA9tB,4CAAAqvB,YAAA,IAAA,lEACiBK;IAKX7C,WAAS,6CAAK,CAACoB,6CAAAA,8DAAAA,nBAAalM,0CAAAA,pCAAM+L,0CAAAA,yDAAW4B;IAC7C7C,eAAS,mDAAA,NAAKM,UAASN;AAP7B,AASE,oBAAI,AAAC+C;AACH,IAAMC,OAAK,AAAQT;IACbS,WAAK,qCAAA,nCAAI,AAAC5hB,4BAAc4hB,YAAUA;AADxC,AAEE,+GAAA,xGAACnD,gDAAO,AAACqD,6BAAgC/B,IAAInB,aAASgD;kBAAtDC;AAAA,AACS,6BAAA,tBAACE,yGAAYnD,aAAS,EAAI,OAAAiD,gCAAY,KAAAG,KAAA,GAAAH,oBAAmBV,MAAM,AAAOK,6BAAezB,IAAInB;;;;AACpG,8HAAA,vHAACH,gDAAO,iEAAA,jEAACwD,6BAAethB,KAAKof,IAAInB,aAAS,AAASuC;;AAAnD,AACS,6BAAA,tBAACY,yGAAYnD,aAASuC;;;;;;AAjBrC,gBAAA,CAAAV,YAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,WAAA,AAAAQ,qCAAA,AAAAjsB,qBAAAqrB;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAP,WAAA;;;AAAA,IAAAS,cAAA,AAAAjsB,gBAAAorB;YAAA,AAAApuB,4CAAAivB,YAAA,IAAA,pEAAOlN;WAAP,AAAA/hB,4CAAAivB,YAAA,IAAA,nEAAiBG;AAAjB,AAAA,OAAAF,eAEE,iBAAMhD,YAAU,iBAAAsD,YAAyB,AAAQJ;AAAjC,AAAA,wIAAAI,wDAAAA,xLAAC,AAAAC,iEAAA,AAAAA,4EAAA,AAAAA;;IAAjBH,cACsB,kBAAIpD,WACF,iBAAMyD,iBAAe,qEAAA,rEAAC9qB,2DAAqBqnB;AAA3C,AAAA,0FACG,uDAAA,vDAACpvB,6CAAKovB,cAAYyD,gBAClB,AAAC7yB,6CAAKovB,UAAUyD;KAHrB,mFAAA,GAAA;gBADtB,AAAA3vB,4CAAAsvB,YAAA,IAAA,xEACOxB;UADP,AAAA9tB,4CAAAsvB,YAAA,IAAA,lEACiBI;IAKX7C,WAAS,6CAAK,CAACoB,6CAAAA,8DAAAA,nBAAalM,0CAAAA,pCAAM+L,0CAAAA,yDAAW4B;IAC7C7C,eAAS,mDAAA,NAAKM,UAASN;AAP7B,AASE,oBAAI,AAAC+C;AACH,IAAMC,OAAK,AAAQT;IACbS,WAAK,qCAAA,nCAAI,AAAC5hB,4BAAc4hB,YAAUA;AADxC,AAEE,+GAAA,xGAACnD,gDAAO,AAACqD,6BAAgC/B,IAAInB,aAASgD;kBAAtDC;AAAA,AACS,6BAAA,tBAACE,yGAAYnD,aAAS,EAAI,OAAAiD,gCAAY,KAAAG,KAAA,GAAAH,oBAAmBV,MAAM,AAAOK,6BAAezB,IAAInB;;;;AACpG,8HAAA,vHAACH,gDAAO,iEAAA,jEAACwD,6BAAethB,KAAKof,IAAInB,aAAS,AAASuC;;AAAnD,AACS,6BAAA,tBAACY,yGAAYnD,aAASuC;;;;KAjBrC,AAAAJ,qCAAA,AAAAG,eAAAf;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAuB,AAAC1M,oDAAYC,iBAAOgM;;;;AAd/C,CAAA,oEAAA,pEAAMD;;AAAN,AAiCA,GAAA,QAAAryB,qCAAAC,6CAAAC,oDAAA60B;AAAA;AAAA,AAAA,AAASC,iDAAkB,6CAAA,7CAAC30B;;AAE5B,yCAAA,zCAAM40B,0FACHlD;AADH,AAEE,IAAMZ,WAAS,AAACC,6BAAoB,AAACprB;IAC/B+rB,WAAK,4BAAA,MAAA,lCAACnpB,uBAAempB;AAD3B,AAEE,oBACE,AAACyC;AACD,QAAA,YAAiBrD,SAASY;;AAF5B,oBAIE,AAACmD;AACD,OAACC,sCAA6B,CAAKhE,SAASY;;AAL9C,AAQE,IAAMqD,cAAY,CAAA,SAAcjE,SAASY;IACnCsD,aAAW,4CAAA,AAAAzO,5CAACpkB,4DAAKwyB,gDAAkB,AAACxR,gDAAQ4R;AADlD,AAEE,oBAAIC;AACF,OAACT,sBAAWS;;AACZ,OAAA3D,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,mFAAA,WAAQ4D,9CAAO,AAACC,sBAAaH;AAA7B,AAAA,OAAA1D,gDACa,iBAAAzsB,oBAAKqwB;AAAL,AAAA,oBAAArwB;AAAY,OAAUqwB;;AAAtBrwB;;KADb,WACQ+uB;AADR,AAAA,OAAAlC,2BAAA,AAEE,wBAAA,NAAMkC,MACJ,AAAAtC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,0EAAA,WAAQb,rCAAI,AAAC2E,oBAAuBxB;AAApC,AAAA,OAAAlC,2BAAA;AACE,AAAC2D,mDAAMT,+CAAkBU,gBAAM,AAAClS,gDAAQ4R,aAAavE;;AACrDA;;;;IAHJ;;;;;;;;;AAKZ,sDAAA,8DAAA8E,pHAAME;AAAN,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAArzB,4BAAAqzB;YAAAA,RACkElf;WADlE,AAAAlU,4CAAAozB,gBAAA,nEACWpiB;WADX,AAAAhR,4CAAAozB,gBAAA,nEACgBE;gBADhB,AAAAtzB,4CAAAozB,gBAAA,xEACqBG;eADrB,AAAAvzB,4CAAAozB,gBAAA,vEAC+BjwB;mBAD/B,AAAAnD,4CAAAozB,gBAAA,3EACwCI;0BADxC,AAAAxzB,4CAAAozB,gBAAA,lFAC+CK;AAD/C,AAEE,IAAMr1B,QAAM,AAACmtB,sCAA6BpoB;IACpCmG,IAAE,iBAAArG,mBAAI7E;AAAJ,AAAA,oBAAA6E;AAAAA;;AAAU,MAAO,uDAAA,VAAKE;;;IACxBujB,OAAK,AAAA,kGAAgBtoB;IACrBuE,UAAQ,sCAAA,tCAACyD,uBAAesgB,KAAK6M;AAHnC,AAIE,AAAC/H,uEAAYxa,KAAK5S,MAAMuE;;AACxB,oBAAM,iBAAAF,oBAAK+wB;AAAL,AAAA,oBAAA/wB;AAAYgxB;;AAAZhxB;;;AAAN,AAEE,IAAAtE,qBAAgB,kBAAI,AAAC6zB,iCAAgBsB,KAAK,AAAChmB,iBAAO,kBAAA,lBAAC0a,8BAAqBuL;AAAxE,AAAA,oBAAAp1B;AAAA,AAAA,eAAAA,XAAWm1B;AAAX,AACE,gKAAA,zJAACI,yBAAW1iB,KACA,AAAC2iB,8BACA3iB,mDAASsiB,vBACA,gCAAA,QAAA,xCAACltB,vBACD,oEAAA,eAAA,nFAACA;;AALzB;;;AAFF;;;AAUJ,gDAAA,hDAAMwtB,wGACHC;AADH,AAEE,IAAAvY,qBAAsB,iBAAArY,mBAAI,AAAC8wB,sCAA6B,AAAC11B;AAAnC,AAAA,oBAAA4E;AAAAA;;AAEI,IAAAR,oBAAK,AAACuvB;AAAN,AAAA,oBAAAvvB;AACK,IAAAuxB,YACC,AAACpF,6BAAoB,AAACprB;IADvBywB,YAEC,AAACE;IAFFD,YAAA;AAAA,AAAA,gIAAAF,UAAAC,UAAAC,oDAAAF,UAAAC,UAAAC,pNAAC,AAAArC,6DAAA,AAAAA,4FAAA,AAAAA;;AADNpvB;;;;AAF1B,AAAA,oBAAA6Y;AAAA,mBAAAA,fAASwY;AAAT,AAME,OAACM,gCAAuBN,aAAaD;;AACrCA;;;AAEJ,uCAAA,vCAAMQ,sFACHvwB,GAAOgsB,MAAM7vB,OAAOq0B,iBAAWC;AADlC,AAEE,IAAMvjB,OAAK,AAACxN;IACNpF,QAAM,AAACC;AADb,AAEE,GAAI,AAACm2B,gCAAiBxjB;2GAChB,AAACif,wEAAa7xB,MAAM4S,KAAK,AAACyjB,mDAAQ3E,tLAClC,AAAChB,8LACA,WAAK4F,pQAWN,OAACM;AAXA,AACE,IAAA72B,qBAAiD,iBAAAsE,oBAAK,AAACmC,cAAI8vB;AAAV,AAAA,GAAAjyB;AAAe,OAAC2C,gBAAMsvB;;AAAtBjyB;;;AAAjD,AAAA,oBAAAtE;AAAA,AAAA,IAAAw2B,cAAAx2B;sBAAA,AAAAiE,4CAAAuyB,YAAA,IAAA,9EAAYC;WAAZ,AAAAxyB,4CAAAuyB,YAAA,IAAA,nEAA4BnD;qBAA5B,AAAApvB,4CAAAuyB,YAAA,IAAA,7EAAiCE;AAAjC,AACE,IAAMtG,eAAO,AAACuG,kCAAmBF;AAAjC,AACE,OAAClH,6CACA5pB,GACA,AAACsqB,4CAAoBnuB,OAAO,AAAC2zB,8CAAsB,iBAAA3wB,mBAAI4xB;AAAJ,AAAA,oBAAA5xB;AAAAA;;AAAmB2xB;;+GAFvE,2CAAA,2LAAA,6DAAA,5YAGsB,kBAAIpD,MAAK,AAAQA,UAAM,gCAAA,QAAA,tBAAIjD,gCAC3BA,cACrBtuB,uHACe,wCAAA,tBAAIs0B,yBAAkB,AAACQ;;AAR3C;;IAWD;AAAA,AACE,uCAAA,vCAAC1Q,sBAAOiQ;;AACR,2EAAA,3EAACjQ,sBAAOzmB;;AACR,mFAAA,5EAACymB,sBAAOtmB;;;AAChB,OAACk3B,sBACAnF,MACA,WAAK0B,KAAKlD,UAAU4G;AAApB,AACE,OAACC,6CACA3D,KAAKlD,UAAU4G,UACfZ,iBACA,WAAKc;AAAL,AACE,qIAAA,2CAAA,2LAAA,6DAAA,xaAAC1H,6CAAgB5pB,GACA,wEAAA,xEAACsqB,4CAAoBnuB,OAAOm1B,WAAW9G,gBACvCruB,uHACe,wCAAA,tBAAIs0B,yBAAkB,AAACQ;;AAGvD,2EAAA,3EAAC1Q,sBAAOzmB;;AACR,mFAAA,5EAACymB,sBAAOtmB;GACV,WAAKs3B;AAAL,AACE,IAAMC,UAAQ,sIAAA,rIAAG,CAAG,sDAAA,tDAACv2B,oDAASs2B,cACV,sDAAA,tDAACt2B,oDAASs2B;AAD9B,AAGE,2EAAA,3EAAChR,sBAAOzmB;;AACR,OAACymB,sBAAOtmB,sDAAyBu3B;;;;;AAM/C,uCAAA,wCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,MAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,rKAAKC;AAcL,AAAKC,gDACH,AAACvW,iBAAO,AAACxV,eAAK8rB,sCACN,AAACvd,eAAKud;AAEhB,iDAAA,iFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,/KAAKE;AAGL,AAAKC,qCACH,0FAAA,IAAA,sDAAA,IAAA,xJAAClrB,qDAAM+qB;AAIT,mCAAA,nCAAMI,8EACHhc,SAAShZ,OAAOi1B,QAAQC;AAD3B,AAEE,IAAM/2B,QAAM,AAACkB,4CAAIu1B,qCAAa50B;IACxBm1B,WAAS,AAACC;IACVn1B,UAAQ,6CAAKk1B,sDAASh3B;IACtBA,YAAM,6CAAK6B,QAAOC;IAClBpC,QAAM,AAACC,oBAAgBkb;AAJ7B,AAKE,oBAAM7a;AAAN,AACE,GAAU,AAACuR,4BAAcylB;AAAzB;AAAA,AAAmC,AAACzR,sBAAOpmB,4CAAe63B;;;AAC1D,IAAAE,cAAoB,mEAAA,2CAAA,wFAAA,tMAACE,uCAAyBvc,SAAS7a,UAAMg3B,yHACA,EAAOl1B,+EACX,WAAKI,UAAUm1B;AAAf,AACE,GAAM,eAAA,dAAIA;AAAV,AAAA,0FACG,AAACj3B,6CAAK8B,UAAUm1B,WAAW,cAAA,bAAGA,mBAC9B,cAAA,bAAGA;;AAFN;;;iBAH3D,AAAA/zB,4CAAA4zB,YAAA,IAAA,zEAAOr1B;WAAP,AAAAyB,4CAAA4zB,YAAA,IAAA,nEAAcC;AAAd,AAME,IAAAG,YAAMz1B;AAAN,AAAA,QAAAy1B;KAAA;AAEE,AACE,4DAAA,mFAAA,/IAACC;;AACD,OAAChS,sBAAOiS,wCAA0B,AAACC,iEAAqB/3B;;;KAJ5D;AAOE,AACE,4DAAA,mFAAA,gFAAA,/NAAC63B;;AACD,OAAChS,sBAAOiS,wCAA0B,AAACC,iEAAqB/3B;;;;AAT5D;;;;AARJ;;;AAqBJ,6CAAA,7CAAMg4B,kGACHh4B,MAAMi4B,OAAOvvB;AADhB,AAEE,oBAAM1I;AAAN,AACE,IAAMM,QAAM,0DAAA,1DAACC,oDAASP;IAChB0F,MAAI,AAAC5B,yBAAW9D;AADtB,AAEE,OAACk4B,4CAAkB53B,MAAMoF,IAAIuyB,OAAOvvB;;AAHxC;;;AAKF,4CAAA,5CAAMyvB,gGACHn4B,MAAMi4B,OAAOvvB;AADhB,AAEE,oBAAM1I;AAAN,AACE,IAAMM,QAAM,0DAAA,1DAACC,oDAASP;IAChB0F,MAAI,mCAAA,lCAAK,AAAC5B,yBAAW9D;AAD3B,AAEE,GAAM,QAAA,PAAI0F;AAAV,AACE,OAAC0yB,2CAAiB93B,MAAMoF,IAAIuyB,OAAOvvB;;AADrC;;;AAHJ;;;AAMF;;;4CAAA,5CAAM2vB,gGAEHC;AAFH,AAGE,IAAM14B,QAAM,AAACC;IACP04B,eAAa,iBAAAt0B,oBAAKrE;AAAL,AAAA,oBAAAqE;AACK,IAAAtE,qBAAmB,AAAA,mFAAQ,AAAA,2FAAaC;AAAxC,AAAA,oBAAAD;AAAA,AAAA,cAAAA,VAAW8f;AAAX,AACE,OAAA,4FAAa,CAAC5a,mDAAAA,4DAAAA,XAAU4a,wCAAAA;;AAD1B;;;AADLxb;;;IAGbu0B,QAAM,4DAAA,5DAACC,0DAAmBH;AAJhC,AAKE,oBAAIC;AAEF,OAAC3sB,+CAAO,WAAK8sB;AAAL,AAAQ,OAAC53B,6CAAE,AAACgR,kCAAyB4mB,GAAGH;GAAeC;;AAC/DA;;;AAEN,6CAAA,7CAAMG,kGACHL,EAAE3zB;AADL,AAGE,IAAM2O,gBAAc,AAACzT;IACf+4B,gBAAc,AAAC1tB,qLAAS,iBAAA2tB,YAAsB,AAAC7zB,pMAGvB,AAACmG,4CAAI,2DAAA,3DAAC8tB,6CAAKC;IAHXJ,YACsBn0B;IADtBo0B,YAAA;AAAA,AAAA,kIAAAF,UAAAC,UAAAC,qDAAAF,UAAAC,UAAAC,vNAACC,8DAAAA,6FAAAA;;IAIzBG,sBAAoB,gDAAA,hDAACC,+FAAY,4CAAK,AAAA,6FAAa9lB,kBAAiBslB;AAL1E,AAME,OAAAlI,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,kOAAA,WAAQ2I,7LAAO,iEAAA,2CAAA,wDAAA,pKAACC,6BAAoB,AAACt0B,kCAAwBszB;AAA7D,AAAA,OAAAxH,2BAAA,AACE,AAACllB,+CACA,WAAK2tB;AAAL,AACE,OAACvsB,0BAAUmsB,oBAAoB,AAAA,6FAAaI;GAC9CF;;;;AAEP,gDAAA,hDAAMG,wGACHlB;AADH,AAEE,OAACmB,8DAAuBnB;;AAE1B,+CAAA,/CAAMoB,sGACH15B;AADH,AAEE,IAAA,AACE,IAAM45B,eAAa,iBAAAn1B,mBAAI,0DAAA,1DAAClE,oDAASP;AAAd,AAAA,oBAAAyE;AAAAA;;AAAA;;;IACbiB,MAAI,AAAC5B,yBAAW9D;IAChB65B,uBAAqB,AAAA,iFAAA,AAAAjU,gBAAOkS;IAC5BgC,eAAa,iBAAA71B,oBAAK41B;AAAL,AAAA,oBAAA51B;AAA0B,OAACvD,6CAAKk5B,aAAaC,qBAAqBn0B;;AAAlEzB;;;AAHnB,AAIE,GAAM,OAAA,NAAGyB;AAAT,AACE,IAAAjB,mBACC,iBAAAR,oBAAK,AAACnD,6CAAE,AAACy1B,0EAAkC,AAACwD,uBAAcH,aAAa,OAAA,NAAKl0B;AAA5E,AAAA,GAAAzB;AAAA,OAAA2hB,gBACMoU;;AADN/1B;;;AADD,AAAA,oBAAAQ;AAAAA;;AAGC,IAAAR,oBAAK61B;AAAL,AAAA,oBAAA71B;AACK,OAACg2B,qEAA8BH;;AADpC71B;;;;AAJH;;iBALJ,GAAA,CAAA01B,mBAWSp2B;AAXT,QAAAo2B,JAWkB9C;AAXlB,AAYI,AAACqD,cAAiBrD;;AAZtB;;AAAA,AAAA,MAAA8C;;;;AAeF,qDAAA,rDAAMQ,kHACHn6B;AADH,AAEE,IAAA,AACE,IAAM45B,eAAa,0DAAA,1DAACr5B,oDAASP;IACvB0F,MAAI,AAAC5B,yBAAW9D;IAChB85B,eAAa,AAACp5B,6CAAKk5B,aACA,AAAA,iFAAA,AAAAhU,gBAAOyU,kDACP30B;AAJzB,AAKE,GAAM,OAAA,NAAGA;AAAT,AACE,IAAAjB,mBACC,iBAAAR,oBAAK,6CAAA,7CAACnD,iDAAK,AAACi5B,uBAAcH,aAAa,OAAA,NAAKl0B;AAA5C,AAAA,GAAAzB;AACK,OAACq2B;;AADNr2B;;;AADD,AAAA,oBAAAQ;AAAAA;;AAGC,IAAAR,oBAAK61B;AAAL,AAAA,oBAAA71B;AACK,OAACg2B,qEACAH,aACA,AAACQ;;AAHPr2B;;;;AAJH;;iBANJ,GAAA,CAAAm2B,mBAcS72B;AAdT,aAAA62B,TAckBG;AAdlB,AAAA;;AAAA,AAAA,MAAAH;;;;AAiBF,+CAAA,/CAAMI;AAAN,AAEE,IAAA/1B,mBAAA,AAAAmhB,gBAAK6H;AAAL,AAAA,oBAAAhpB;AAAAA;;AAAA,IAAAA,uBAAA,AAAAmhB,gBACK8H;AADL,AAAA,oBAAAjpB;AAAAA;;AAAA,IAAAA,uBAAA,AAAAmhB,gBAEKxmB;AAFL,AAAA,oBAAAqF;AAAAA;;AAAA,IAAAA,uBAGI,AAACupB;AAHL,AAAA,oBAAAvpB;AAAAA;;AAAA,IAAAA,uBAII,AAACkpB;AAJL,AAAA,oBAAAlpB;AAAAA;;AAAA,IAAAA,uBAKI,AAACopB;AALL,AAAA,oBAAAppB;AAAAA;;AAAA,IAAAA,uBAMI,AAACspB;AANL,AAAA,oBAAAtpB;AAAAA;;AAOI,OAACqpB;;;;;;;;;AAEP,iDAAA,jDAAM2M,0GACHz6B;AADH,AAEE,IAAAL,qBAAe,AAACmE,yBAAW9D;AAA3B,AAAA,oBAAAL;AAAA,AAAA,UAAAA,NAAW+F;AAAX,AACE,IAAMpF,QAAM,0DAAA,1DAACC,oDAASP;AAAtB,AACE,GAAM,EAAK,CAAI,AAACW,gBAAML,UAAO,OAAA,NAAKoF,iBACvB,QAAA,PAAIA;AADf,AAEE,OAACq0B,uBAAcz5B,MAAMoF;;AAFvB;;;AAFJ;;;AAMF,uCAAA,vCAAMg1B,sFACHC;AADH,AAEE,kBAAKC;AAAL,AACE,AAACC,mBAAUD;;AACX,IAAME,gBAAc,AAAA,6FAAa,AAACj7B;IAC5Bk7B,aAAW,WAAK/0B;AAAL,AACE,IAAAsK,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,2EAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACgd;;AACD,AAAC4N,yDAAmCl1B,OAAO20B;;AAH7C,IAAAK,uDAAAzqB;IAAA0qB,uDAAA,AAAAtqB,qBAAA;AAAA,AAAA,CAAAJ,8DAAA0qB;;AAAA,IAAA,AAEE,AAAC3N;;AACD,AAAC4N,yDAAmCl1B,OAAO20B;;AAH7C,IAAA/pB,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAyqB;;;AAIA,IAAAr7B,qBAAsB,AAACgI,oCAA2B,AAAA,6FAAa,AAACf,gBAAMZ;AAAtE,AAAA,oBAAArG;AAAA,AAAA,iBAAAA,bAAWw7B;AAAX,AACE,iCAAA,cAAA,mBAAA,3DAAiBA;;AADnB;;;AANnB,AAQE,oBAAIL;AACF,IAAAn7B,qBAAiB,iBAAAy7B,YAAA,mFAAA,+DAAsBN;AAAtB,AAAA,wGAAAM,wCAAAA,xIAAC9xB,iDAAAA,4DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,oBAAA,hBAAMoG,mGAAQpG;AAAd,AACE,AAACm7B,WAAW/0B;;AACd,IAAArG,yBAAoB,AAACI;AAArB,AAAA,oBAAAJ;AAAA,AAAA,eAAAA,XAAWwb;AAAX,AACE,IAAAxb,yBAAiB,AAACM,oBAAgBkb;AAAlC,AAAA,oBAAAxb;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,OAAQA;;AADV;;;AADF;;;AAHF;;;AAMA,IAAMoc,MAAI,AAACif;AAAX,AACE,GAAM,AAACj1B,cAAIgW;AAAX,AACE,IAAM6K,cAAY,AAAC9b,4CAAI,WAAK7F;AAAL,AAAA,0FAAA,+DAAsBA;GAAK8W;IAC5CpW,SAAO,iBAAAs1B,YAAc,AAACt2B;IAAfu2B,YAAA,AAAA;IAAAC,YAA4CvU;AAA5C,AAAA,kHAAAqU,UAAAC,UAAAC,6CAAAF,UAAAC,UAAAC,/LAACnU,sDAAAA,qFAAAA;;AADd,AAEE,OAAC0T,WAAW/0B;;AAHhB;;;;;AAKV,sDAAA,tDAAMy1B;AAAN,AAEE,IAAMjpB,OAAK,AAACxN;IACNoX,MAAI,AAACif;IACLpU,kFAAiB,AAAC9b,4CAAI,WAAK7F,3HACV,AAACsG,+CAAOC;AADH,AAAA,0FAAA,+DAAsBvG;GAAK8W;AAFvD,AAIE,IAAAsf,YAAclpB;IAAdmpB,YAAA,AAAA;IAAAC,YAAwB3U;AAAxB,AAAA,kHAAAyU,UAAAC,UAAAC,6CAAAF,UAAAC,UAAAC,/LAACvU,sDAAAA,qFAAAA;;AAEL;;;iCAAA,jCAAMwU,0EAEHxzB;AAFH,AAGE,IAAMrC,SAAO,AAACy1B;AAAd,AACE,GAAM,AAACr1B,cAAIJ;AAAX,AACE,IAAAsK,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,2EAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,OAAC0rB,2DAAqCh2B,OAAO,uDAAA,vDAAClF,6CAAEuH;;AAFlD,IAAAyzB,gDAAAvrB;IAAAwrB,gDAAA,AAAAprB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAwrB;;AAAA,IAAA,AAEE,AAACC,2DAAqCh2B,OAAO,uDAAA,vDAAClF,6CAAEuH;;AAFlD,IAAAuI,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAAurB;;;AADF;;;AAKJ,mCAAA,nCAAOG,8EAAUx6B,OAAOgC,KAAKy4B;AAA7B,AACE,IAAMz4B,WAAK,iBAAAgB,mBAAIhB;AAAJ,AAAA,oBAAAgB;AAAAA;;AAAA;;;IACLy3B,YAAM,iBAAAz3B,mBAAIy3B;AAAJ,AAAA,oBAAAz3B;AAAAA;;AAAA;;;AADZ,AAEE,IAAA03B,YAAM,AAAC3Z,gDAAQ/gB;IAAf06B,gBAAA,EAAA,CAAAA,qBAAA5zB,oBAAA,AAAA4zB,cAAA;AAAA,AAAA,QAAAA;KAAA;AACY,iEAAA,1DAAC/sB,uHAAuB8sB,UAAMz4B;;;KAD1C;AAEO,iEAAA,1DAAC2L,yHAAyB3L,SAAKy4B;;;;AAFtC;;;;AAKJ,yCAAA,zCAAOE,0FACJ36B,OAAOgC,KAAKy4B;AADf,AAEE,IAAMz4B,WAAK,iBAAAgB,mBAAIhB;AAAJ,AAAA,oBAAAgB;AAAAA;;AAAA;;;IACLy3B,YAAM,iBAAAz3B,mBAAIy3B;AAAJ,AAAA,oBAAAz3B;AAAAA;;AAAA;;;AADZ,AAEE,IAAA43B,YAAM,AAAC7Z,gDAAQ/gB;IAAf46B,gBAAA,EAAA,CAAAA,qBAAA9zB,oBAAA,AAAA8zB,cAAA;AAAA,AAAA,QAAAA;KAAA;AACY,iEAAA,1DAACjtB,wHAAwB8sB,UAAMz4B;;;KAD3C;AAEO,4BAAA,rBAAC64B;;;;AAFR,MAAA,KAAA/4B,MAAA,CAAA,mEAAA84B;;;;AAIJ,+CAAA,/CAAME,sGAAsBC,QAAQl3B,GAAG7D,OAAOJ;AAA9C,AAGE,IAAAo7B,mBAAMD;IAANC,uBAAA,EAAA,CAAAA,4BAAAl0B,oBAAA,AAAAk0B,qBAAA;AAAA,AAAA,QAAAA;KAAA;AAEQ,IAAAC,qBAA2Br7B;IAA3Bq7B,yBAAA,AAAAn7B,4BAAAm7B;kBAAA,AAAAl7B,4CAAAk7B,uBAAA,jFAAcj5B;mBAAd,AAAAjC,4CAAAk7B,uBAAA,lFAAmBR;AAAnB,AACE,GAAU,EAAI,AAACrqB,4BAAcpO,kBAAM,AAACoO,4BAAcqqB;AAAlD;AAAA,AACE,yHAAA,2CAAA,pKAAChN,6CACA5pB,GACA,AAAC22B,iCAASx6B,OAAOgC,YAAKy4B,cACtBz6B,uHACe,wHAAA,3EAAK,AAAC80B;;;;KARlC;AAUc,IAAAoG,qBAA2Bt7B;IAA3Bs7B,yBAAA,AAAAp7B,4BAAAo7B;kBAAA,AAAAn7B,4CAAAm7B,uBAAA,jFAAcl5B;mBAAd,AAAAjC,4CAAAm7B,uBAAA,lFAAmBT;AAAnB,AACE,GAAM,GAAK,AAACrqB,4BAAcpO;AAA1B,AACE,+HAAA,2CAAA,1KAACyrB,6CACA5pB,GACA,AAAC82B,uCAAe36B,OAAOgC,YAAKy4B,cAC5Bz6B,uHACe,wHAAA,3EAAK,AAAC80B;;AALxB;;;;AAXhB;;;AAoBA,2CAAA,3CAACqG;;AAED,IAAAj9B,qBAAwB,AAACgG;AAAzB,AAAA,oBAAAhG;AAAA,AAAA,mBAAAA,fAAWk9B;AAAX,AACE,IAAAl9B,yBAAiB,AAACM,oBAAgBqF;AAAlC,AAAA,oBAAA3F;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,AAAQA;;AACR,OAAC2C,oCAAsB3C,MAAM68B;;AAF/B;;;AADF;;;AAKF,uCAAA,vCAAMC;AAAN,AAEE,IAAAn9B,qBAAc,AAACI;AAAf,AAAA,oBAAAJ;AAAA,AAAA,SAAAA,LAAW2F;AAAX,AACE,IAAA3F,yBAAiB,AAACM,oBAAgBqF;AAAlC,AAAA,oBAAA3F;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAM+8B,cAAY,AAACj5B,yBAAW9D;IACxB0F,MAAI,AAACC;IACLi0B,eAAa,iBAAAn1B,mBAAI,mBAAA,mFAAA,tGAACu4B,4KAA2B13B;AAAhC,AAAA,oBAAAb;AAAAA;;AAAA;;;AAFnB,AAGE,IAAAA,mBAAA,AAAAmhB,gBACEnmB;AADF,AAAA,oBAAAgF;AAAAA;;AAEC,OAAC8pB,iEAAkBqL,aAAal0B,IAAIq3B;;;AANzC;;;AADF;;;AASF,wDAAA,xDAAME,wHACHj9B;AADH,AAEE,oBAAM,iBAAAiE,oBAAKjE;AAAL,AAAA,oBAAAiE;AAAA,IAAAA,wBACK,iBAAAQ,mBAAI,AAACkpB;AAAL,AAAA,oBAAAlpB;AAAAA;;AAAA,IAAAA,uBACI,AAACmpB;AADL,AAAA,oBAAAnpB;AAAAA;;AAEI,OAACopB;;;;AAHV,AAAA,oBAAA5pB;AAIK,OAAC6I,cAAI,gDAAA,KAAA,rDAACqrB,0CAAYn4B;;AAJvBiE;;;AAAAA;;;AAAN,AAKE,oBAAM,AAAC64B;AAAP,AACE,IAAMx8B,QAAM,0DAAA,1DAACC,oDAASP;IAChB0F,MAAI,AAACC;IACLo3B,cAAY,AAACj5B,yBAAW9D;IACxBk9B,UAAQ,AAAC3O,iEAAkBjuB,MAAM,iBAAA0B,kBAAK0D;IAALzD,kBAAS86B;AAAT,AAAA,SAAA/6B,kBAAAC,mBAAAD,kBAAAC;KAAsB,iBAAAJ,kBAAK6D;IAAL5D,kBAASi7B;AAAT,AAAA,SAAAl7B,kBAAAC,mBAAAD,kBAAAC;;AAH7D,AAIE,oBAAM,iBAAAmC,oBAAKi5B;AAAL,AAAA,oBAAAj5B;AACK,0DAAA,mDAAA,pGACC,uCAAA,vCAACk5B,+BAAiBD,oBAClB,uCAAA,vCAACC,+BAAiBD,oBAClB,uCAAA,vCAACC,+BAAiBD,kBAClB,uCAAA,vCAACC,+BAAiBD;;AALxBj5B;;;AAAN,AAME,kDAAA,lDAACm5B;;AACD,iDAAA,jDAACC;;AACD,gEAAA,zDAACC;;AARH;;;AALJ;;;AALF;;;AAoBF,6CAAA,7CAAMC,kGACH54B,SAAS64B,SAASC,UAAUC;AAD/B,AAEE,IAAMC,WAAS,AAAC1vB,uGAAMuvB,SAASE;IACzBE,aAAW,AAACh3B,gBAAM,6DAAA,7DAACi3B,mDAAaJ;IAChCK,gBAAc,6CAAKF,YAAW,AAACG,wGAAOJ;IACtC/9B,QAAM,iBAAAo+B,YAAA,mFAAA,+DAAsBr5B;AAAtB,AAAA,wGAAAq5B,wCAAAA,xIAAC10B,iDAAAA,4DAAAA;;IACPhJ,QAAM,AAAA,kGAAgBV;IACtB4C,YAAU,AAACoF,uBAAetH,MAAMm9B,UAAUK;AALhD,AAME,oEAAA,7DAACrR,6CAAgB7sB,MAAM4C;;AAE3B,qDAAA,rDAAOy7B,kHACJzrB;AADH,AAEE,oBAAMA;AAAN,AACE,AAAC0rB,gDAAkC1rB,KAAK,AAAC2rB;;AACzC,OAACC,4CAA8B5rB;;AAFjC;;;AAIF,GAAA,QAAAxT,qCAAAC,6CAAAC,oDAAAm/B;AAAA;AAAA,AAAA,AAASC,kDAAmB,6CAAA,7CAACj/B;;AAC7B,mDAAA,nDAAMk/B,8GACH1H,EAAE5Y,OAAO3Y;AADZ,AAEE,IAAMhF,QAAM,AAACk+B,qBAAY3H;IACnBrkB,OAAK,AAACxN;AADZ,AAEE,6EAAA,7EAACvC,oEAAwB6C,GAAGhF;;AAC5B,oBAAA,AAAAslB,gBAAO0Y;AAAP,AACE,aAAA,AAAA1Y,bAAC6Y,6BAAiBH;;AADpB;;AAEA,AAACL,mDAAsBzrB;;AACvB,OAACqT,sBAAOyY,gDACA,AAACrlB,WACA;AAAA,AACE,oBAAM,AAACylB,iCAAkBlsB;AAAzB,AACE,mCAAA,nCAACyE;;AAED,+EAAA,2CAAA,4EAAA,tMAACqW;;AACD,0CAAA,nCAACrW;;AAJH;;GAFH;;AASZ,4CAAA,5CAAM0nB;AAAN,AACE,IAAM3+B,QAAgB,AAAC4+B;IACjBl5B,MAAgB,AAAC5B,yBAAW9D;IAC5B6+B,kBAAgB,AAAC9E,uBAAc,AAAS/5B,YAAO,OAAA,NAAK0F;AAF1D,AAME,GAAM,AAAC5E,6CAAE+9B,gBAAgB,AAACtI;AAA1B,AACE,GAAM,AAACnwB,cAAI,AAACszB,6CAAqB15B;AAAjC,AACE,AAAC6lB,sBAAOiS,wCAA0B,AAACC,iEAAqB/3B;;AACxD,4DAAA,5DAAC6lB,sBAAO4H;;AAFV;;AADF;;AAKA,GAAI,AAAC3sB,6CAAE+9B,gBAAgBC;AACrB,GAAM,AAAC14B,cAAI,AAAC+zB,mDAA2Bn6B;AAAvC,AACE,AAAC6lB,sBAAOwU,gDAAkC,AAACtC,iEAAqB/3B;;AAChE,yEAAA,lEAAC6lB,sBAAO6H;;AAFV;;;AADF;;;AAMJ,kDAAA,lDAAMqR,4GACHC,OAAO15B,GAAGgzB,EAAE72B;AADf,AAEE,kBAAKw9B,OAAOC;AAAZ,AACE,kDAAA,lDAAC9B;;AACD,IAAM+B,cAAY,4CAAK,AAAA,6FAAaF;AAApC,AAGE,8LAAA,2CAAA,wNAAA,mEAAA,KAAA,zgBAAC/P,6CAAgB5pB,GACA,0DAAA,1DAAC8J,qHAAqB+vB,kBACtB19B,uHACe,CAAA,iDAAU,kBAAA,AAAAmkB,8DAAA,9CAAKnmB,iDAAkB64B,wJAEjC,WAAK7I;AAAL,AAAQ,mCAAA,OAAA,nCAAC2P,iCAAwB3P;GALjE,oEAAA;;AASA,sJAAA,tJAAChN,iDAAoB,AAAA,6FAAawc,0DAEbE;;AAErB,IAAAx/B,qBAAiB,AAACM,oBAAgBqF;AAAlC,AAAA,oBAAA3F;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,OAAQA;;AADV;;;;AAGN,kDAAA,lDAAMq/B,4GACHr/B;AADH,AAEE;AAAA,AACE,kDAAA,lDAACo9B;;AACD,oFAAA,7EAACkC,uEAA2Bt/B;;;AAEhC,8CAAA,9CAAOu/B,oGACJ3/B,MAAM+N,KAAK6xB,mBAAmB/9B,OAAOg+B;AADxC,AAEE,IAAM5yB,cACA,kBAAI4yB,mBACF,iBAAAC,YAAmB,AAAA,kGAAgB9/B;AAAnC,AAAA,0GAAA8/B,yCAAAA,3IAACD,kDAAAA,6DAAAA;KACD,AAAA,kGAAgB7/B;IAClBiN,2LACKA,jFACA,4EAAA,5EAACoV,qEAAyBxgB,7JAC1B,4EAAA,5EAACwgB,qEAAyBxgB;AAPrC,AAQE,2WAAA,2CAAA,6DAAA,2CAAA,sJAAA,0EAAA,okBAAA,oFAAA,/2CAACwM,uGAAM,4DAAA,6HAAA,zLAACyB,sDAAO9P,+YAGa,AAAA,mFAAQ+N,iFACdlM,gFACI,AAACyF,8CAAMqI,iBAAO,AAAA,uGAAmB3P,OAC/B,+CAAA,mFAAA,kDAAA,8DAAA,lPAACwL,yTACOo0B,yFACb3yB,6JACO,AAACimB,eAAK,AAAA,mFAAQnlB,MAAM,AAAA,uGAAkB/N,nRACtC,AAACgM,+CAAOC;;AAE1C,+DAAA,/DAAO8zB,sIACJtG;AADH,AAEE,OAACpgB,WACA;AAAA,AACE,IAAAtZ,qBAAsB,AAACyN,eAAK,AAAA,uFAASisB;AAArC,AAAA,oBAAA15B;AAAA,AAAA,iBAAAA,bAAW+X;AAAX,AACE,AAAC3B;;AACD,IAAM6pB,0BAAY,iBAAAC,YAAA,mFAAA,+DAAsB,AAAA,6FAAanoB;AAAnC,AAAA,wGAAAmoB,wCAAAA,xIAACv2B,iDAAAA,4DAAAA;;AAAnB,AACE,sGAAA,/FAACN,uEAAY42B,yEAAiB,AAAA,6FAAaA;;AAH/C;;GAFH;;AAQF,uCAAA,sDAAAE,7FAAME,sFACHh6B;AADH,AAAA,IAAA+5B,cAAAD;IAAAC,kBAAA,AAAAx+B,4BAAAw+B;wBAAA,AAAAv+B,4CAAAu+B,gBAAA,hFACkBN;yBADlB,AAAAj+B,4CAAAu+B,gBAAA,iFAAA,lKAEkBP;mBAFlB,AAAAh+B,4CAAAu+B,gBAAA,3EAGkBE;qBAHlB,AAAAz+B,4CAAAu+B,gBAAA,7EAIkBvsB;AAJlB,AAME,IAAM8O,gBAAc,iBAAA3iB,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAW2iB;AAAX,AACE,IAAA4d,YAAQ,iBAAAC,YAAS,AAAA,mFAAQ7d;AAAjB,AAAA,wGAAA6d,wCAAAA,xIAAC72B,iDAAAA,4DAAAA;;AAAT,AAAA,GAAA,CAAA42B,aAAA;AAAA;;AACQ,qDAAAA,UAAA,xDAACl0B,4HAAqB,AAACiR;;;AAFjC;;;IAGdgjB,mBAAa,iBAAAx7B,mBAAIw7B;AAAJ,AAAA,oBAAAx7B;AAAAA;;AAAiB6d;;;IAC9B1iB,QAAM,iBAAAwgC,YAAW,AAAA,mFAAQH;AAAnB,AAAA,4GAAAG,0CAAAA,9IAACv7B,mDAAAA,8DAAAA;;IACP8I,OAAK,kBAAI,AAAA,4FAAa/N,QAAOA,MACpB,oCAAA,lBAAMqgC,kBAAa,AAAA,2FAAa,iBAAAI,YAAW,AAAA,mFAAQJ;AAAnB,AAAA,4GAAAI,0CAAAA,9IAACx7B,mDAAAA,8DAAAA;MAAjC;IACTo7B,mBAAa,iBAAAx7B,mBAAIw7B;AAAJ,AAAA,oBAAAx7B;AAAAA;;AAAiB6d;;;IAC9B9O,qBAAS,gDAAA,9CACE,GAAA,mBAAA,lBAAOA,2BACPA,iCAEA,iBAAA8sB,YAAkB,AAAA,6FAAaL;AAA/B,AAAA,sIAAAK,uDAAAA,rLAACxsB,gEAAAA,2EAAAA;MAJH,MAAA,AAAA;;AARf,AAiBE,IAAAxD,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,oBAAMgS;AAAN,AACE,AAAC/Q,gDAA0B+Q;;AAD7B;;AAEA,oBAAM2d;AAAN,AACE,IAAMx+B,SAAO,iBAAAgD,mBAAI,AAAA,iGAAew7B;AAAnB,AAAA,oBAAAx7B;AAAAA;;AAAiC,OAACgO;;;IACzCguB,sBAAQ,AAACt1B,4CAAI,WAAKvL;AAAL,AACE,OAAC2/B,4CAAoB3/B,UAAM+N,KAAK6xB,mBAAmB/9B,OAAOg+B;GAC/Dz5B;IACVqzB,SAAO,wFAAA,2CAAA,nIAAC/kB,mDAA6BmsB,oBAAQR,0HAAwBzsB;AAJ3E,AAKE,OAACmsB,6DAAgCtG;;AANrC;;;AAJF,IAAAkH,gDAAAhwB;IAAAiwB,gDAAA,AAAA7vB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAiwB;;AAAA,IAAA,AAEE,oBAAMle;AAAN,AACE,AAAC/Q,gDAA0B+Q;;AAD7B;;AAEA,oBAAM2d;AAAN,AACE,IAAMx+B,gBAAO,iBAAAgD,mBAAI,AAAA,iGAAew7B;AAAnB,AAAA,oBAAAx7B;AAAAA;;AAAiC,OAACgO;;;IACzCguB,6BAAQ,AAACt1B,4CAAI,WAAKvL;AAAL,AACE,OAAC2/B,4CAAoB3/B,UAAM+N,KAAK6xB,mBAAmB/9B,cAAOg+B;GAC/Dz5B;IACVqzB,gBAAO,+FAAA,2CAAA,1IAAC/kB,mDAA6BmsB,2BAAQR,0HAAwBzsB;AAJ3E,AAKE,AAACmsB,6DAAgCtG;;AANrC;;AAJF,IAAAzoB,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAAgwB;;;AAYJ,gDAAA,hDAAOG,wGACJC,SAASl/B;AADZ,AAGO,OAAC0J,4CAAI,WAAKvL;AAAL,AACE,IAAMuE,UAAQ,AAAA,uFAAUvE;IAClBihC,QAAM,6CAAA,7CAACtc,8EAAQ,AAAA,8FAAa3kB;IAC5BkhC,gBAAS,CAAK,qHAAA,KAAA,xHAAI,6CAAA,7CAAChgC,0GAAYW,gEACjB,AAACgX,yCAA2BhX,OAAO0C,QAAQ08B;IACzDryB,MAAI,AAACC,+BAAYqyB,cAAS,AAACpyB,uEAAwBjN;IACnDuE,SAAO,uDAAA,vDAAC+6B,qCAAqBvyB,IAAIsyB,mBAAcr/B;IAC/Cu/B,YAAU,AAACp6B,gBAAMZ;AANvB,AAOE,oBAAQg7B;AAAR;AAAA,AAAA,MAAA,KAAAz9B,MAAA,CAAA,kBAAA,6BAAA,KAAA;;;AACA,+DAAA,xDAACyI,8CAAMg1B,0EAAuB,AAAA,8FAAcphC;GAVrD,AAACghC,8EAA+BD;;AAYvC;;;;yDAAA,zDAAMM,0HAGHC,gBAAgB1tB,eAASmtB,SAASl/B;AAHrC,AAIE,IAAMuE,SAAO,AAAC06B,8CAAmBC,SAASl/B;IACpCw+B,eAAa,CAAC32B,iDAAAA,kEAAAA,nBAAQ43B,8CAAAA;IACtBzhB,UAAQ,AAAA,mFAAQ,AAAA,2FAAawgB;IAC7Bj6B,aAAO,AAACm7B,2CAA2B1hB,QAAQzZ;AAHjD,AAIE,uDAAA,2CAAA,iFAAA,5KAACg6B,qCACAh6B,0HACei6B,2EACJzsB;;AAEhB,AAAA,gDAAA,wDAAApQ,xGAAMi+B;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA99B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8EAAA,9EAAM89B,yFACFG,WAAWC;AADf,AAEG,oGAAA,7FAACC,4EAAiBF,WAAWC;;;AAFhC,CAAA,8EAAA,4BAAAH,1GAAMD,yFAGFG,WAAWC;AAHf,AAAA,IAAAF,cAAAD;IAAAC,kBAAA,AAAAhgC,4BAAAggC;WAAAA,PAGyCjvB;aAHzC,AAAA9Q,4CAAA+/B,gBAAA,rEAG6BI;AAH7B,AAIG,IAAAhiC,qBAAiB,EAAI,AAACiiC,yBAASH,QACZA,MACA,AAAA,mFAAQ,AAACI,uCAA8B,AAACj1B,eAAK60B;AAFhE,AAAA,oBAAA9hC;AAAA,AAAA,gBAAAA,ZAAW8hC;AAAX,AAGE,IAAMjvB,OAAK,AAACxN;IACN28B,aAAO,iBAAAl9B,mBAAIk9B;AAAJ,AAAA,oBAAAl9B;AAAAA;;AAAW,OAAC5E;;;IACnBD,QAAM,CAACiF,mDAAAA,8DAAAA,bAAU48B,0CAAAA;IACjBhgC,SAAO,AAAA,iGAAe7B;IACtBmG,aAAW,AAAA,6FAAanG;IACxBkiC,mCAA2B,GAAK,AAAQ,AAAA,6HAA4B,AAAA,uGAAmBliC;IACvFoG,SAAO,CAAC+7B,mEAAAA,oFAAAA,nBAA0BvvB,gEAAAA,3DAAKzM,gEAAAA;IACvCi8B,aAAW,CAAC14B,iDAAAA,4DAAAA,bAAQm4B,wCAAAA;IACpBQ,sBAAoB,AAACr2B,+CAAO,WAAKs2B;AAAL,AAAQ,OAACphC,6CAAE,AAAA,mFAAQohC,GAAGT;GAAQz7B;IAC1Dm8B,gBAAc,AAACC,2CAAiBH,oBAAoBD;IACpDh8B,aAAO,EAAI87B,kCACFK,cACA,6CAAA,7CAACE,iDAAOF;AAZvB,AAaE,oBAAMX;AAAN,AACE,wDAAA,UAAA,lEAACtS,6CAAgBsS,cAAc//B;;AADjC;;AAEA,yBAAA,mFAAA,kDAAA,6DAAA,vNAAM+9B;IACAC,oBAAkB,WAAKt7B;AAAL,AACE,uPAAKA,vFACA,4EAAA,5EAAC8d,qEAAyBxgB,7KAC1B,4EAAA,5EAACwgB,qEAAyBxgB,tHAC1B6gC;;IACzB30B,OAAK,kBAAI,AAAA,4FAAa/N,QAAOA,MACpB,8BAAA,ZAAM+hC,YAAO,AAAA,2FAAa,iBAAAY,YAAW,AAAA,mFAAQZ;AAAnB,AAAA,4GAAAY,0CAAAA,9IAAC19B,mDAAAA,8DAAAA;MAA3B;IACT47B,sBAAQ,AAACt1B,4CAAI,WAAKvL;AAAL,AACE,OAAC2/B,4CAAoB3/B,UAAM+N,KAAK6xB,mBAAmB/9B,OAAOg+B;GAC/Dz5B;IACVwN,iBAAS,AAAA,4FAAWlB;IACpBkwB,8BAAU,gDAAA,9CACE,GAAA,mBAAA,lBAAOhvB,2BACPA,iCAEA,iBAAAivB,YAAkB,AAAA,6FAAad;AAA/B,AAAA,sIAAAc,uDAAAA,rLAAC3uB,gEAAAA,2EAAAA;MAJH,MAAA,AAAA;;AAZhB,AAqBE,IAAAxD,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,gFAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACgd;;AACD,IAAM+L,SAAO,AAAC/kB,mDAA6BmsB,oBACAkB,WACA,mDAAA,nDAAC31B,8CAAMsG,mEAAekwB;AAFjE,AAGE,OAAC7C,6DAAgCtG;;AANrC,IAAAqJ,gDAAAnyB;IAAAoyB,gDAAA,AAAAhyB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAoyB;;AAAA,IAAA,AAEE,AAACrV;;AACD,IAAM+L,gBAAO,AAAC/kB,mDAA6BmsB,oBACAkB,WACA,mDAAA,nDAAC31B,8CAAMsG,mEAAekwB;AAFjE,AAGE,AAAC7C,6DAAgCtG;;AANrC,IAAAzoB,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAAmyB;;;AAvCN;;;;AAJH,CAAA,wEAAA,xEAAMrB;;AAAN,AAmDA,qDAAA,rDAAMuB,kHACHpB;AADH,AAEE,kBAAAqB,UAAuB3D;AAAvB,AAAA,IAAA4D,cAAAD;gBAAA,AAAAj/B,4CAAAk/B,YAAA,IAAA,xEAAMC;YAAN,AAAAn/B,4CAAAk/B,YAAA,IAAA,pEAAgBrB;AAAhB,AACE,oGAAA,2CAAA,uFAAA,/NAACC,4EAAiBF,WAAWC;;;AAGjC,gDAAA,wDAAAuB,xGAAMG;AAAN,AAAA,IAAAF,cAAAD;IAAAC,kBAAA,AAAA1hC,4BAAA0hC;WAAAA,PAC0C/9B;IAD1Cg+B,cAAA,AAAA1hC,4CAAAyhC,gBAAA;IAAAC,kBAAA,AAAA3hC,4BAAA2hC;aAAA,AAAA1hC,4CAAA0hC,gBAAA,rEACkBE;WADlB,AAAA5hC,4CAAA0hC,gBAAA,nEACyBv1B;AADzB,AAAA,GAES,AAAC01B,sDAAsBn+B;AAFhC;AAAA,AAAA,MAAA,KAAA3B,MAAA;;;AAGE,OAACzC,6CAAEsiC,OAAOz1B;;AAEZ,2CAAA,3CAAM21B,8FACHp+B;AADH,AAEE,GAAU,AAACi+B,8CAAgBj+B;AAA3B;;AAAA,AACE,IAAMq+B,cAAY,AAACC,2CAAiBt+B;AAApC,AACE,IAAAoL,+BAAAC;IAAAC,sBAAA,kBAAAF,8BAAA,AAAAtE,8CAAA,2CAAA,mEAAA,2EAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACgd;;AACD,wDAAA,oRAAA,rUAACqW,oIAA4B,AAAA,mFAAOz+B,cAAO,AAAA,mFAAOq+B;;AAHpD,IAAAE,gDAAAlzB;IAAAmzB,gDAAA,AAAA/yB,qBAAA;AAAA,AAAA,CAAAJ,8DAAAmzB;;AAAA,IAAA,AAEE,AAACpW;;AACD,iDAAA,oRAAA,rUAACqW,oIAA4B,AAAA,mFAAOz+B,cAAO,AAAA,mFAAOq+B;;AAHpD,IAAA3yB,mBAAA,AAAAC,2BAAAN;IAAAO,oBAAA,AAAAC,sDAAA,4GAAAH;IAAAI,yBAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,wBAAA,AAAA7F,+CAAA0F,kBAAA,AAAA,qGAAAN;IAAAU,6BAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,oBAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;;AAAA,AAAA,IAAAW,wBAAA,AAAAC,oDAAAH,sBAAAC;AAAA,AAAA,kDAAA,0DAAAD,sBAAA,2DAAAD,uBAAA,+DAAAG;;;AAAA;;UAAA,AAAA,CAAAZ,8DAAAkzB;;;;AAKN,sDAAA,8DAAAG,pHAAOE,8HACSC;AADhB,AAAA,IAAAF,cAAAD;IAAAC,kBAAA,AAAAtiC,4BAAAsiC;SAAA,AAAAriC,4CAAAqiC,gBAAA,jEACWv+B;AADX,AAEE,oBAAMA;AAAN,AACE,IAAA3F,qBAAkB,kBAAI,AAACsK,4CAAqB,4CAAK3E,MAC7B,iBAAA2+B,YAAA,mFAAA,+DAAwB,AAAC/5B,eAAK5E;AAA9B,AAAA,4GAAA2+B,0CAAAA,9IAACp/B,mDAAAA,8DAAAA;KACD,iBAAAq/B,YAAA,mFAAA,8DAAwB,AAACpyB,kCAAyBxM;AAAlD,AAAA,4GAAA4+B,0CAAAA,9IAACr/B,mDAAAA,8DAAAA;;AAFrB,AAAA,oBAAAlF;AAAA,AAAA,aAAAA,TAAWqkC;AAAX,AAGE,OAACljC,6CAAE,AAAA,6FAAakjC,QAAQ,AAACG,8CAAoBJ;;AAH/C;;;AADF;;;AAMF,iCAAA,jCAAOK,0EACJC;AADH,AAEE,oBAAU,AAAC7J;AAAX;;AAAA,AACE,IAAUx6B,QAAM,AAAC4+B;IACX0F,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;IACrCM,QAAM,AAASN;IACfwkC,KAAG,mDAAA,nDAAC9jC,6CAAKJ,UAAQgkC;IACjBG,KAAG,AAAC/jC,6CAAKJ,MAAMikC;AALrB,AAME,AAAC9hC,oEAAwB,AAAC1C,mCACD,CAAKykC,+CAAGH,WAAUI;;AAC3C,OAAC9hC,oCAAsB3C,MAAM,CAAGskC,iBAAe,AAAC3jC,gBAAM0jC;;;AAE5D,2CAAA,3CAAOK;AAAP,AAEE,sCAAA,/BAACN;;AAEH,AAAA,AAEA,6CAAA,7CAAOO,kGACJ/tB;AADH,AAEE,oBAAU,AAAC4jB;AAAX;;AAAA,AACE,IAAAoK,cAAsB,AAAC1uB;IAAvB0uB,kBAAA,AAAArjC,4BAAAqjC;YAAA,AAAApjC,4CAAAojC,gBAAA,pEAAchlC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAAC4+B;IACPz6B,UAAQ,0DAAA,1DAAC5D,oDAASP;IAClByB,SAAO,AAAA,iGAAe,AAAA,oFAAQ,AAACyU;IAC/B2uB,eAAa,AAAA,kGAAc,AAACC,qIAAgC9kC;IAC5D+kC,aAAK,oDAAA,pDAACjkC,6CAAEW;IACRujC,cAAY,cAAA,IAAA,hBAAID;AALtB,AAME,GAAIA;AACF,oBACE,iBAAA9gC,oBAAK4gC;AAAL,AAAA,oBAAA5gC;AAAkB,oEAAA,7DAACxD,gDAAKokC;;AAAxB5gC;;;AACA,IAAAghC,YAAMJ;AAAN,AAAA,QAAAI;KAAA;AAGE,AAAI,AAACC,6CAA+BllC;;AAChC,+BAAA,/BAACokC;;AACD,OAACe,wEAA4BnlC,MAAMglC;;;KALzC;AAQE,AACE,AAACI,wCAA0BplC;;AAC3B,AAACstB;;AACD,OAACzW,6EAAkBD;;;;AAErB,GAAI,AAACyuB,iDAA6B5jC,OAAO0C,QAAQ0gC;AAC/C,8EAAA,mFAAA,6OAAA,vYAAChyB,0NAEC,0DAAA,1DAACzD,kJAAkDy1B;;AAErD,OAACK,6CAA+BllC;;;;;AApBtC,oBAuBE,iBAAAiE,oBAAK4gC;AAAL,AAAA,oBAAA5gC;AAAkB,iEAAA,1DAACnD,6CAAE+jC;;AAArB5gC;;;AACA,AAAI,IAAAqhC,mBACCtlC;IADDulC,mBAEC,AAACG,wCAA0B1lC;IAF5BwlC,mBAGC,4CAAA,3CAAK,AAACG,kCAAoB3lC;AAH3B,AAAA,mJAAAslC,iBAAAC,iBAAAC,wEAAAF,iBAAAC,iBAAAC,9RAACC,0EAAAA,8HAAAA;;AAID,AAACG,2CAA6BnkC,OAAOzB;;AACrC,OAACklC,6CAA+BllC;;AA7BtC,AAgCE,AACE,+BAAA,/BAACokC;;AACD,OAACe,wEAA4BnlC,MAAMglC;;;;;AACvC,sCAAA,/BAACZ;;;AA3CP;;;;AA6CN,+CAAA,uDAAAyB,tGAAME,gHAC+BC,iBAAiBC;AADtD,AAAA,IAAAH,cAAAD;IAAAC,kBAAA,AAAAvkC,4BAAAukC;YAAAA,RAC8BlmC;cAD9B,AAAA4B,4CAAAskC,gBAAA,tEACiB3hC;AADjB,AAEE,IAAM0I,cAAY,AAAC+N,6BAAqBzW,QAAQ6hC,iBAAiBC;AAAjE,AACE,OAAC7zB,kFAAuBxS,MAAMiN;;AAElC,uCAAA,vCAAOq5B;AAAP,AAEE,oBAAU,AAAC1L;AAAX;;AAAA,AACE,IAAA2L,cAAsB,AAACjwB;IAAvBiwB,kBAAA,AAAA5kC,4BAAA4kC;YAAA,AAAA3kC,4CAAA2kC,gBAAA,pEAAcvmC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAAC4+B;AAAb,AACE,IAAAj/B,qBAAgB,AAAC0mC,kIAA6BrmC;AAA9C,AAAA,oBAAAL;AAAA,AAAA,WAAAA,PAAWymC;AAAX,AACE,IAAAE,cAA8DF;IAA9DE,kBAAA,AAAA/kC,4BAAA+kC;mBAAA,AAAA9kC,4CAAA8kC,gBAAA,3EAAcC;aAAd,AAAA/kC,4CAAA8kC,gBAAA,rEAA2BE;aAA3B,AAAAhlC,4CAAA8kC,gBAAA,rEAAkCG;eAAlC,AAAAjlC,4CAAA8kC,gBAAA,vEAAyCI;cAAzC,AAAAllC,4CAAA8kC,gBAAA,tEAAkDK;QAAlD,AAAAnlC,4CAAA8kC,gBAAA,hEAA0Dx7B;IACpD87B,cAAY,kBAAID,SAAQ,6DAAA,hBAAK,UAAA,TAAKF,6BAAaA;IAC/CC,eAAS,4BAAA,AAAA,OAAA,jBAAMA;AAFrB,AAGE,GAAI,EACC,AAAC5lC,6CAAE,AAACH,gBAAM4lC,cACP,CAAG,kGAAA,hFAAII,SAAQ,kEAAA,jEAAG,EAAO,4CAAKF,+BAAe,gCAAA,wBAAA,tCAAMC,cAAS,EAAOA,mCACtE,2CAAA,3CAACvJ,+BAAiB,AAASn9B;AAC9B,IAAA6mC,YAAmB7mC;IAAnB8mC,YAAyB,AAACpB,wCAA0B1lC;IAApD+mC,YAA2D,AAACpB,kCAAoB3lC;AAAhF,AAAA,0JAAA6mC,UAAAC,UAAAC,iEAAAF,UAAAC,UAAAC,3PAACtB,0EAAAA,yGAAAA;;AACD,IAAMtc,YAAU,AAAChpB,kCAAyBH;IACpCM,QAAM,AAASN;IACfi4B,SAAO,mDAAA,nDAACv3B,6CAAKJ,UAAQ6oB;IACrB6d,QAAM,AAACtmC,6CAAKJ,MAAM6oB;IAClB8d,gCAAwB,iBAAAhjC,oBAAK,kBAAA,lBAACulB,gCAAuB,AAACpc,eAAK,AAACzE,2BAAmBsvB;AAAvD,AAAA,oBAAAh0B;AACK,UAAK,AAAC4N,4BAAc,AAACjL,gBAAM,AAAC+B,2BAAmBq+B;;AADpD/iC;;;AAJ9B,AAME,oBAAUgjC;AAAV;AAAA,AACE,AAAC/B,6CAA+BllC;;AAChC,AAACokC,+BAAO,CAAA,kHAAA,jEAAUoC,oDAAOI,iBAAgBF;;;AAC3C,oBAAMC;AAAN,AACE,IAAMrmC,YAAM,AAASN;IACfmpB,gBAAU,AAAChpB,kCAAyBH;IACpCknC,kBAAgB,AAAChmC,oBAAY,AAACR,6CAAKJ,UAAM6oB;IACzC+d,sBAAgB,kBAAID,+BACF,8GAAA,jEAAKT,oDAAOI,iBAAgBM,0BAC5BA;IAClBC,QAAM,AAACx+B,2BAAmBu+B;IAC1BE,+BAAiB,AAACC,kCAAoBF,MAAM,kBAAIF,+BAAwBR,OAAO,UAAA,TAAKA;IACpFxnB,qBAAO,2EAAA,1EAAK,uDAAA,vDAACve,6CAAKJ,cAAQ6oB,oBAAgBie;IAC1CE,sBAAQ,kBAAIL,+BACF,oNAAA,nNAAK,EAAO,wLAAA,vLAAK,uDAAA,vDAACvmC,6CAAKJ,cAAQ6oB,2DAAWqd,oDAAOI,2CACjD,CAAA,0HAAA,zHAAG,AAAA,iFAAMR,QAAM,AAACzlC,gBAAMimC;AAXtC,AAYE,AAACnkC,oEAAwB,AAAC1C,mCAAyBkf;;AACnD,OAACtc,oCAAsB3C,MAAMsnC;;AAdjC;;;;AAlBR;;;AAFJ;;;;AAoCN,4CAAA,5CAAMC;AAAN,AAEE,oBAAU,AAAC/M;AAAX;;AAAA,AACE,IAAAgN,cAAsB,AAACtxB;IAAvBsxB,kBAAA,AAAAjmC,4BAAAimC;YAAA,AAAAhmC,4CAAAgmC,gBAAA,pEAAc5nC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAAC4+B;IACPn9B,SAAO,iBAAAgD,mBAAI,iBAAAgjC,YAAoB,AAAChzB;AAArB,AAAA,8HAAAgzB,mDAAAA,zKAACjvB,4DAAAA,uEAAAA;;AAAL,AAAA,oBAAA/T;AAAAA;;AAAkD,OAACgO;;;IAC1Di1B,uBAAqB,iBAAAC,YAAMlmC;IAANkmC,gBAAA,EAAA,CAAAA,qBAAAp/B,oBAAA,AAAAo/B,cAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;;AAAA;;;;IACrB5K,cAAY,AAACj5B,yBAAW9D;IACxBmE,UAAQ,AAAC8Y;IACTvX,MAAI,AAACrG,6CAAK09B;AALhB,AAME,IAAAjgB,4BAAc,AAACupB,kIAA6BrmC;AAA5C,AAAA,oBAAA8c;AAAA,kBAAAA,dAASspB;AAAT,AACE,IAAAwB,qBAAwBxB;IAAxBwB,yBAAA,AAAArmC,4BAAAqmC;qBAAA,AAAApmC,4CAAAomC,uBAAA,pFAAcjB;IACRkB,4BAAmB,AAACC,6HAAwB9nC;IAC5C+nC,sBAAa,AAACC,uHAAkBhoC;IAChCioC,cAAK,AAACvnC,6CAAKyD,QAAQ0jC,0BAAmBE;IACtCG,eAAM,AAACv/B,2BAAmBs/B;IAC1BE,sBAAa,kCAAA,aAAA,7BAAIxB;IACjByB,8BAAqB,AAACplB,cAAI,4CAAA,WAAAqlB,vDAACl9B;AAAD,AAAM,OAACiC,eAAK,mDAAAi7B,sCAAA,zFAACxK,qEAAesK;GAAiBD;IACvEI,kBAAS,kDAAA,lDAACjiB,uDACY,kBAAIsgB,gBACF,4CAAA,WAAA4B,vDAACp9B;AAAD,AAAM,0EAAA,gDAAAo9B,tEAAKb;GAA4BU,6BACvC,oDAAA,WAAAI,kBAAAC,jFAACpjB;AAAD,AAAc,+EAAA,iDAAAojB,5EAAK,CAAAD,oBAAA;GAAkBJ;IAC7DM,+BAAsB,mPAAA,lPAAK,AAAUN,oCACA,AAACh7B,eAAK,sLAAA,tLAACywB,mDAAa,AAAA,kGAAcuI,aAAM+B;IAC7EQ,wBAAe,EAAA,kDAAK,oDAAA,WAAAC,/DAACvjB,lDAIDgB;AAJA,AAEE,+EAAA,3BAAK,CAAAuiB,oBAAA;GACN,2EAAA,3EAACC,+CAAOT,gCAAuBM;IAGpDI,kBAAS,CAAGH,wBAAe,CAAA,MAAKD;AAnBtC,AAoBE,CAACjD,0EAAAA,+HAAAA,vDAAkBzlC,2GAAAA,rGAAM6nC,2GAAAA,jFAAmBE,2GAAAA;;AAC5C,AAAC3D,+BAAOkE;;AACR,AAACziB,sBAAOngB,IAAI,kBAAIihC,gBACF,CAAG5J,cAAY+L,iBACf,CAAG/L,cAAY+L;;AAC/B,IAAMC,mBAAU,AAACC,wHAAmBhpC;AAApC,AACE,AAACipC,sCAAwBjpC;;AACzB,AAACkpC,mDAAqClpC;;AACtC,oBAAI+oC;AACF,IAAAI,qBAA+BJ;IAA/BI,yBAAA,AAAA5nC,4BAAA4nC;oBAAA,AAAA3nC,4CAAA2nC,uBAAA,nFAAc1C;qBAAd,AAAAjlC,4CAAA2nC,uBAAA,pFAAqBxC;IACfyC,wBAAe,kBAAIzC,gBAAQ,oEAAA,vBAAK,iBAAA,hBAAKF,oCAAaA;AADxD,AAEE,AAACrC,+BAAO,oEAAA,vBAAKgF;;AACb,AAACvjB,sBAAOngB,IAAI,CAAA,yDAAA,xDAAGq3B,cAAY,AAACp8B,gBAAMyoC;;AACpC,AAAI,AAAChF,+BAAO,mEAAA,tBAAKsD;;AACb,AAAC7hB,sBAAOngB,IAAI,eAAA,dAAGq3B;;;;AACzB,iDAAA,AAAAnX,1CAACjjB,oCAAsB3C,sBAAO0F;;AA3ClC;;;;AA6CN,sDAAA,tDAAM2jC,oHACHC;AADH,AAEE,IAAAC,cAAsB,AAACrzB;IAAvBqzB,kBAAA,AAAAhoC,4BAAAgoC;YAAA,AAAA/nC,4CAAA+nC,gBAAA,pEAAc3pC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAAC4+B;IACPzhB,UAAQ,AAAC4a,iEAAqB/3B;IAC9BwpC,cAAY,WAAKC,OAAOC;AAAZ,AACE,8DAAA,2CAAA,kFAAA,pLAACC,sCACAL,UAAUG,uHACKC,2EACJ,WAAK5+B,EAAEA,MAAEA;AAAT,AACE,AAAC+a,sBAAOiS,wCAA0B3a;;AAClC,mEAAA,mFAAA,/IAAC0a;;;AARnC,AASE,iDAAA,jDAACwF;;AACD,IAAM78B,YAAU,AAACd;IAAjBkqC,cACwDppC;IADxDopC,kBAAA,AAAAroC,4BAAAqoC;sBAAA,AAAApoC,4CAAAooC,gBAAA,9EACc1pC;oBADd,AAAAsB,4CAAAooC,gBAAA,5EAC8BxpC;oBAD9B,AAAAoB,4CAAAooC,gBAAA,5EAC4CppC;AAD5C,AAEE,oBAAIA;AACF,AAAI,CAACilC,0EAAAA,+GAAAA,vCAAkBzlC,2FAAAA,rFAAME,2FAAAA,3EAAgBE,2FAAAA;;AACzC,OAACgkC,+BAAO,0DAAA,1DAACh1B,qHAAqB5O;;AAClC,IAAAsc,qBAAmB,AAACgtB,oIAA+B9pC;AAAnD,AAAA,oBAAA8c;AAAA,gBAAAA,ZAAS+sB;AAAT,AACE,IAAAE,cAAsCF;IAAtCE,kBAAA,AAAAxoC,4BAAAwoC;kBAAA,AAAAvoC,4CAAAuoC,gBAAA,1EAAcC;YAAd,AAAAxoC,4CAAAuoC,gBAAA,pEAA0BE;UAA1B,AAAAzoC,4CAAAuoC,gBAAA,lEAAgCrhC;AAAhC,AACE,CAAC+8B,0EAAAA,2FAAAA,nBAAkBzlC,uEAAAA,jEAAMiqC,uEAAAA,jEAAMvhC,uEAAAA;;AAC/B,GAAI,6CAAA,7CAAC5H,iDAAI,AAACH,gBAAMqpC;AACd,mBAAA,OAAA,nBAACR;;AACD,OAACpF,+BAAO4F;;;AACZ,IAAAltB,yBAAkB,AAACqtB,iIAA4BnqC;AAA/C,AAAA,oBAAA8c;AAAA,eAAAA,XAASotB;AAAT,AACE,IAAAE,cAAmDF;IAAnDE,kBAAA,AAAA7oC,4BAAA6oC;YAAA,AAAA5oC,4CAAA4oC,gBAAA,pEAAcH;UAAd,AAAAzoC,4CAAA4oC,gBAAA,lEAAoB1hC;mBAApB,AAAAlH,4CAAA4oC,gBAAA,3EAAwB7D;kBAAxB,AAAA/kC,4CAAA4oC,gBAAA,1EAAqCJ;AAArC,AACE,CAACvE,0EAAAA,2FAAAA,nBAAkBzlC,uEAAAA,jEAAMiqC,uEAAAA,jEAAMvhC,uEAAAA;;AAC/B,GAAI,yDAAA,zDAAC5H,6CAAEkpC;AACL,mBAAA,iBAAA,7BAACR;;AACD,OAACpF,+BAAO,0DAAA,1DAACh1B,2HAA2Bm3B;;;AACxC,mBAAA,OAAA,nBAACiD;;;;;AA5Bb;;;AA8BJ,uDAAA,vDAAMa,sHACHf;AADH,AAEE,IAAAgB,cAAsB,AAACp0B;IAAvBo0B,kBAAA,AAAA/oC,4BAAA+oC;YAAA,AAAA9oC,4CAAA8oC,gBAAA,pEAAc1qC;AAAd,AACE,oBAAMA;AAAN,AACE,IAAMI,QAAM,AAAC4+B;IACPzhB,UAAQ,AAAC4a,iEAAqB/3B;IAC9BuqC,eAAa,WAAKd,OAAOC;AAAZ,AACE,8DAAA,2CAAA,kFAAA,pLAACC,sCACAL,UAAUG,uHACKC,2EACA,WAAK5+B,EAAEA,MAAEA;AAAT,AACE,AAAC+a,sBAAOiS,wCAA0B3a;;AAClC,mEAAA,mFAAA,/IAAC0a;;;AARxC,AASE,kDAAA,lDAACuF;;AACD,IAAAtgB,qBAAmB,AAACgtB,oIAA+B9pC;AAAnD,AAAA,oBAAA8c;AAAA,gBAAAA,ZAAS+sB;AAAT,AACE,IAAAW,cAAsCX;IAAtCW,kBAAA,AAAAjpC,4BAAAipC;kBAAA,AAAAhpC,4CAAAgpC,gBAAA,1EAAcR;YAAd,AAAAxoC,4CAAAgpC,gBAAA,pEAA0BP;UAA1B,AAAAzoC,4CAAAgpC,gBAAA,lEAAgC9hC;AAAhC,AACE,CAAC+8B,0EAAAA,2FAAAA,nBAAkBzlC,uEAAAA,jEAAMiqC,uEAAAA,jEAAMvhC,uEAAAA;;AAC/B,GAAI,6CAAA,7CAAC5H,iDAAI,AAACH,gBAAMqpC;AACd,oBAAA,OAAA,pBAACO;;AACD,OAACnG,+BAAO4F;;;AACZ,IAAAltB,yBAAkB,AAAC2tB,kIAA6BzqC;AAAhD,AAAA,oBAAA8c;AAAA,eAAAA,XAASotB;AAAT,AACE,IAAAQ,cAAmDR;IAAnDQ,kBAAA,AAAAnpC,4BAAAmpC;YAAA,AAAAlpC,4CAAAkpC,gBAAA,pEAAcT;UAAd,AAAAzoC,4CAAAkpC,gBAAA,lEAAoBhiC;mBAApB,AAAAlH,4CAAAkpC,gBAAA,3EAAwBnE;kBAAxB,AAAA/kC,4CAAAkpC,gBAAA,1EAAqCV;AAArC,AACE,CAACvE,0EAAAA,2FAAAA,nBAAkBzlC,uEAAAA,jEAAMiqC,uEAAAA,jEAAMvhC,uEAAAA;;AAC/B,GAAI,yDAAA,zDAAC5H,6CAAEkpC;AACL,oBAAA,iBAAA,9BAACO;;AACD,OAACnG,+BAAO,0DAAA,1DAACh1B,2HAA2Bm3B;;;AACxC,oBAAA,OAAA,pBAACgE;;;;AAvBT;;;AAyBJ,4CAAA,5CAAOI,gGACJ/zB;AADH,AAEE,oBAAU,AAAC4jB;AAAX;;AAAA,AACE,IAAAoQ,cAA6B,AAAC10B;IAA9B00B,kBAAA,AAAArpC,4BAAAqpC;YAAA,AAAAppC,4CAAAopC,gBAAA,pEAAchrC;aAAd,AAAA4B,4CAAAopC,gBAAA,rEAAoBv3B;AAApB,AACE,oBAAMzT;AAAN,AACE,IAAMI,QAAM,AAAC4+B;IACPz6B,UAAQ,0DAAA,1DAAC5D,oDAASP;IAClB0F,MAAI,AAAC5B,yBAAW9D;IAChB+jC,eAAa,AAAC/jB,qCAAoBpgB;IAClCirC,yEAAe,AAACC,0CAAgB/G,hGACjB,AAACV;IAChB0H,iBACA,iBAAAtmC,mBAAI,mIAAA,6JAAA,9QAAM,oCAAA,pCAACumC,iHACL,AAACC,iJAAkCjrC;AADzC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAEI,oHAAA,2IAAA,7OAAM,oCAAA,pCAACumC,kGACL,AAACE,+HAA0BlrC;AAHjC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAII,yHAAA,8IAAA,rPAAM,oCAAA,pCAACumC,uGACL,AAACP,kIAA6BzqC;AALpC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAMI,sHAAA,6IAAA,jPAAM,oCAAA,pCAACumC,oGACL,AAACb,iIAA4BnqC;AAPnC,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBAQI,wHAAA,+IAAA,rPAAM,oCAAA,pCAACumC,sGACL,AAACvc,mIAA8BzuB;AATrC,AAAA,oBAAAyE;AAAAA;;AAUI,oBAAM,oCAAA,pCAACumC;AAAP,AACE,IAAA/mC,oBAAK,AAAC6I,cAAI,AAACq+B,8CAA0BnrC;AAArC,AAAA,GAAAiE;AACK,OAACoiC,kIAA6BrmC;;AADnCiE;;;AADF;;;;;;;;AAjBV,AAoBE,oBACE8mC;AACA,IAAAK,YAAM,AAAA,mFAAOL;AAAb,AAAA,QAAAK;KAAA;AACW,IAAMC,cAAY,AAAA,uFAASN;AAA3B,AACE,OAACpoC,oCACA3C,MACA,CAAG,AAACsrC,sDAAgBnnC,QAAQknC,YAAY3lC,OACrC,AAAC/E,gBAAM0qC;;;KALxB;AAMqB,OAAC3G;;;KANtB;AAOiB,AACE,AAACA;;AACD,IAAA6G,YAAM,AAAA,uFAASR;IAAfQ,gBAAA,EAAA,CAAAA,qBAAAhjC,oBAAA,AAAAgjC,cAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,OAACC;;;;AAFH;;;;;KATnB;AAac,OAAC9mC,oDAAuB,AAAA,oFAAOqmC;;;KAb7C;AAca,GAAU,AAACl5B,4BAAc,AAAA,oFAAOk5B;AAAhC;;AAAA,AACE,IAAMp9B,OAAK,AAAA,oFAAOo9B;IACZhhB,YAAU,AAACC,uEAAgCrc;AADjD,AAEE,OAAC0L,kGAAuC0Q;;;;KAjBzD;AAkBc,OAACmc;;;KAlBf;AAmBsB,OAACvB,2CAAmB/tB;;;;AAnB1C,MAAA,KAAArT,MAAA,CAAA,mEAAA6nC;;;;AAFF,GAuBE,4CAAA,1CACC,AAACv5B,4BAAc1N,gBACf,GAAK0mC,wBACL,AAAC/9B,cAAI,AAACg3B,oDAAsBzwB,OAAO0wB;AACpC,OAACT,yCAAiBS;;AA3BpB,AA8BE,oBAAA7zB;AAAA,IAAAC,mBAAA;AAAA,AAAA,AAAAC,aAAAD;;AAAA,IAAAE,qBAAA,AAEC;AAAI,AAACid;;AACD,OAACzW,6EAAkBD;;;AAHxB,AAAA,AAAAxG,gBAAAD;;AAAAE;;AAAA,AAEC,AAAI,AAACid;;AACD,OAACzW,6EAAkBD;;;;;;AAtD9B;;;;AAwDN,oDAAA,pDAAM60B,gHAA2B70B,MAAMigB;AAAvC,AACE,oBAAI,AAAC6U;AACH,OAAChH;;AACD,AACE,AAAiB7N;;AACjB,OAAC8T,0CAAkB/zB;;;AAEzB,mDAAA,nDAAM+0B,8GAA0B/0B,MAAMigB;AAAtC,AACE,oBAAI,AAAC6U;AACH,OAACf,0CAAkB/zB;;AACnB,AACE,AAAiBigB;;AACjB,OAAC6N;;;AAEP;;;4CAAA,5CAAOkH,gGAEJvjC;AAFH,AAGE,IAAMwjB,IAAE,iBAAAggB,YAAMxjC;IAANwjC,gBAAA,EAAA,CAAAA,qBAAAtjC,oBAAA,AAAAsjC,cAAA;AAAA,AAAA,QAAAA;KAAA;AAAoBz+B;;;KAApB;AAA+BxG;;;;AAA/B,MAAA,KAAArD,MAAA,CAAA,mEAAAsoC;;;;IACFjsC,qCAAW,AAACksC,7BACD,iBAAAC;AAAA,AAAA,0EAAAA,yBAAAA,3FAAClgB,kCAAAA,6CAAAA;;AAFlB,AAGE,oBAAMjsB;AAAN,AACE,qBAAA,cAAA,mBAAA,tDAAiBA;;AACjB,+FAAA,xFAACokB,2KAA6CpkB;;AAFhD;;;AAIJ,yCAAA,zCAAOosC,0FAAgB3jC;AAAvB,AACE,IAAMivB,WAAS,AAAC1wB,gBAAM,AAAC+U;IACjBkQ,IAAE,iBAAAogB,YAAM5jC;IAAN4jC,gBAAA,EAAA,CAAAA,qBAAA1jC,oBAAA,AAAA0jC,cAAA;AAAA,AAAA,QAAAA;KAAA;AACMngB;;;KADN;AAEQogB;;;;AAFR,MAAA,KAAA3oC,MAAA,CAAA,mEAAA0oC;;;;IAGFvtB,gBAAc,CAACmN,kCAAAA,4CAAAA,ZAAEyL,wBAAAA;AAJvB,AAKE,oBAAM,iBAAArzB,oBAAKya;AAAL,AAAA,oBAAAza;AAAmB,qCAAA,9BAACqY,gBAASoC;;AAA7Bza;;;AAAN,AACE,6BAAA,cAAA,mBAAA,9DAAiBya;;AACjB,+FAAA,xFAACsF,2KAA6CtF;;AAFhD;;;AAIJ,uDAAA,vDAAOytB,sHACJ9jC;AADH,AAEE,IAAMrI,QAAM,AAAC4+B;IACPyN,WAAS,AAACC,yCAAgCtsC;IAC1CwS,OAAK,AAACxN;IACN6mB,IAAE,iBAAA0gB,YAAMlkC;IAANkkC,gBAAA,EAAA,CAAAA,qBAAAhkC,oBAAA,AAAAgkC,cAAA;AAAA,AAAA,QAAAA;KAAA;AACMzgB;;;KADN;AAEQogB;;;;AAFR,MAAA,KAAA3oC,MAAA,CAAA,mEAAAgpC;;;;IAGF7tB,gBAAc,iBAAA8tB,YAAG,AAACvsC,oBAAgB,AAAC0rB;AAArB,AAAA,0EAAA6gB,yBAAAA,3FAAC3gB,kCAAAA,6CAAAA;;IANrBugB,cAO0C,AAACvsC;IAP3CusC,kBAAA,AAAA7qC,4BAAA6qC;WAAA,AAAA5qC,4CAAA4qC,gBAAA,nEAOoBx+B;cAPpB,AAAApM,4CAAA4qC,gBAAA,tEAOyBjoC;aAPzB,AAAA3C,4CAAA4qC,gBAAA,rEAOiC3qC;AAPjC,AAQE,oBAAMid;AAAN,AACE,IAAA/e,qBAA4B,8BAAA,9BAAC2c,gBAASoC;AAAtC,AAAA,oBAAA/e;AAAA,AAAA,uBAAAA,nBAAWgf;AAAX,AACE,IAAMre,eAAM,AAAC2c;AAAb,AACE,GAAM,AAACxc,gDAAK,AAACouB,4CAAeptB,OAAO0C,SACvB,AAACjD,oBAAYZ;AADzB,AAEE,AAAC0sB,uEAAYxa,KAAK5E,KAAKtN;;AAFzB;;AAIF,IAAMmsC,SAAO,+FAAA,WAAA,1GAAC7kC,uBAAe,kEAAA,lEAACrH,oDAASme;IACjCguB,WAAS,AAACxiC,eAAeyU;IACzB/e,QAAM,iBAAA+sC,YAASn6B;IAATo6B,YAAA,AAAA;IAAAC,YAAA,mFAAA,+DAAgCH;AAAhC,AAAA,wGAAAC,UAAAC,UAAAC,wCAAAF,UAAAC,UAAAC,hLAACvjC,iDAAAA,gFAAAA;;AAFb,AAGE,oFAAA,7EAACN,uEAAYpJ,yFACCyI,UAAUgkC,iBACXI;;AAXjB;;;AADF;;;AAcJ,kDAAA,lDAAMK,4GACHzkC;AADH,AAEE,IAAMrI,QAAM,AAAC4+B;IACP0F,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;IACrC26B,YAAI,uDAAA,vDAAC75B,6CAAEuH;IACP0kC,cAAM,uDAAA,vDAACjsC,6CAAEuH;AAJf,AAKE,GACE,AAAC5H,gDAAK6jC,eAAeC;AACrB,GAAI5J;AACF,OAACh4B,oCAAsB3C,MAAMskC;;AAC7B,OAAC3hC,oCAAsB3C,MAAMukC;;;AAJjC,GAME,EAAI,EAAK5J,eAAI,AAACqS,sDAAkChtC,cAC5C,EAAK+sC,iBAAM,AAACE,qDAAiCjtC;AACjD,OAACmsC,qDAA6B9jC;;AARhC,AAWE,GAAIsyB;AACF,OAACuS,oCAAsBltC;;AACvB,OAACipC,sCAAwBjpC;;;;;;AAEjC,6DAAA,7DAAOmtC,kIACJ9kC;AADH,AAEE,IAAMsyB,YAAI,6CAAA,7CAAC75B,kGAAQuH;IACb3C,MAAI,aAAA,iDAAA,5DAAIi1B;IADdyS,cAE4C,AAACvtC;IAF7CutC,kBAAA,AAAA7rC,4BAAA6rC;YAAAA,RAEqCxtC;aAFrC,AAAA4B,4CAAA4rC,gBAAA,rEAEoB3rC;WAFpB,AAAAD,4CAAA4rC,gBAAA,nEAE2Bx/B;IACrBtI,KAAG,AAACvF;IACJyS,OAAK,AAACxN;IACN6mB,IAAE,EAAI8O,WAAI7O,2CAAkCogB;IAC5CxtB,gBAAc,iBAAA2uB,YAAG,AAACptC,oBAAgB,AAAC0rB;AAArB,AAAA,0EAAA0hB,yBAAAA,3FAACxhB,kCAAAA,6CAAAA;;AANrB,AAOE,oBAAMnN;AAAN,AACE,IAAA/e,qBAA4B,8BAAA,9BAAC2c,gBAASoC;AAAtC,AAAA,oBAAA/e;AAAA,AAAA,uBAAAA,nBAAWgf;AAAX,AACE,IAAMxa,iBAAQ,AAAA,kGAAgBvE;IACxBU,eAAM,AAAC2c;AADb,AAEE,GAAM,AAACxc,gDAAK,AAACouB,4CAAeptB,OAAO0C,gBACvB,AAACjD,oBAAYZ;AADzB,AAEE,AAAC0sB,uEAAYxa,KAAK5E,KAAKtN;;AAFzB;;AAGF,IAAMV,YAAM,iBAAA0tC,YAAS96B;IAAT+6B,YAAA,AAAA;IAAAC,YAAA,mFAAA,+DAAgC,AAACtjC,eAAeyU;AAAhD,AAAA,wGAAA2uB,UAAAC,UAAAC,wCAAAF,UAAAC,UAAAC,hLAAClkC,iDAAAA,gFAAAA;;AAAb,AACE,OAACN,uEAAYpJ,UAAM8F,IAAIJ;;AAP3B;;;AADF;;;AAUJ,gDAAA,hDAAMmoC,wGACHplC;AADH,AAEE,IAAMrI,QAAM,AAAC4+B;IACP5S,UAAQ0hB;IACRpJ,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;IACrC2tC,cAAM,uDAAA,vDAAC7sC,6CAAEuH;IACTulC,eAAO,uDAAA,vDAAC9sC,6CAAEuH;AALhB,AAME,GAAM,AAACvH,6CAAEd,MAAMgsB;AAAf,AACE,GACE,AAACvrB,gDAAK6jC,eAAeC;AACrB,GAAIoJ;AACF,OAAChrC,oCAAsB3C,MAAMskC;;AAC7B,OAAC3hC,oCAAsB3C,MAAMukC;;;AAJjC,oBAME,iBAAA9/B,mBAAI,iBAAAR,oBAAK0pC;AAAL,AAAA,GAAA1pC;AAAW,OAAC4pC,kCAAc7tC;;AAA1BiE;;;AAAJ,AAAA,oBAAAQ;AAAAA;;AACI,IAAAR,oBAAK2pC;AAAL,AAAA,GAAA3pC;AAAY,OAAC6pC,gCAAY9tC;;AAAzBiE;;;;AACJ,OAACkpC,2DAAmC9kC;;AARtC,AAWE,GAAIslC;AACF,OAACxI,wEAA4BnlC;;AAC7B,OAACs/B,uEAA2Bt/B;;;;;;AAdlC;;;AAgBJ,4CAAA,5CAAOylC,gGAAuBzlC,MAAMiqC,MAAMvhC;AAA1C,AACE,4EAAA,5EAACqlC,sEAA0B/tC,SAASiqC,MAAMvhC;;AAC1C,OAACjG,oEAAwB,AAAC1C,mCAAyB,AAASC;;AAE9D,wCAAA,xCAAOguC,wFAAe16B;AAAtB,AACE,IAAM6H,WAAS,AAACpb;IACNC,QAAM,AAAC4+B;IACX7B,cAAY,AAACj5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChBiuC,QAAM,AAACC,8CAA6B,AAACluB,qCAAoB1M;IACzD66B,oCAA4B,iBAAAC,YAAkB,AAAA,6FAAa96B;AAA/B,AAAA,sIAAA86B,uDAAAA,rLAACt6B,gEAAAA,2EAAAA;;IAC7Bu6B,mBAAW,AAACr6B,+BAAgBV;IAC5Bg7B,cAAY,AAAA,mFAAO,AAACC,yCAAe,AAACvuB,qCAAoB1M;IACxDuC,aAAW,kBAAI,iBAAApR,mBAAI4pC;AAAJ,AAAA,oBAAA5pC;AAAAA;;AAAe,OAACqI,cAAIqhC;;MACtB,AAAA,mFAAOF,OACPK;AAVnB,AAWE,oBACE,iBAAArqC,oBAAKoqC;AAAL,AAAA,oBAAApqC;AAAA,IAAAA,wBAAgBgqC;AAAhB,AAAA,oBAAAhqC;AAAsB,IAAAuqC,YAAkB,AAACC,uCAAaR;AAAhC,AAAA,sIAAAO,uDAAAA,rLAAC16B,gEAAAA,2EAAAA;;AAAvB7P;;;AAAAA;;;AADF;;AAAA,oBAIE,iBAAAA,oBAAK,AAAC6I,cAAIuhC;AAAV,AAAA,GAAApqC;AAAA,IAAAA,wBAAsBqqC;AAAtB,AAAA,oBAAArqC;AAAkC,IAAAyqC,YAAkB,AAAA,6FAAaJ;AAA/B,AAAA,sIAAAI,uDAAAA,rLAAC56B,gEAAAA,2EAAAA;;AAAnC7P;;;AAAAA;;;AAJF;;AAAA,AAQE,AACE,0DAAA,1DAAC+Z,+CAAkBnI;;AACnB,AAACpT,oEAAwB0Y,SAAS,oDAAA,PAAK7a,sDAAS,AAAA,kGAAgBuV;;AAChE,OAAClT,oCAAsB3C,MAAM+8B;;;;;AAErC,iDAAA,jDAAM4R,0GACHzhC;AADH,AAEE,IAAUlN,QAAM,AAAC4+B;IACX7B,cAAY,AAACj5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChB4uC,aAAK,AAAC9tC,6CAAEi8B,YAAY,AAACp8B,gBAAML;IAC3BgT,gBAAc,AAACzT;IACfykC,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;AAN3C,AAOE,oBAAMsT;AAAN,AACE,GACE,AAAC7S,gDAAK6jC,eAAeC;AACrB,OAACkB,0CAAkBzlC,MAAMskC,eAAeC;;AAF1C,oBAIE,iBAAAtgC,oBAAK2qC;AAAL,AAAA,GAAA3qC;AAAUqP;;AAAVrP;;;AACA,OAAC+pC,sCAAc16B;;AALjB,AAQE,OAACmyB,0CAAkBzlC,MAAM+8B,YAAY,eAAA,dAAKA;;;;;AAT9C;;;AAWJ,oDAAA,pDAAM8R,gHACHC,WAAKjY;AADR,AAEE,IAAU72B,QAAM,AAAC4+B;IACXt5B,KAAG,AAACvF;IACJg9B,cAAY,AAACj5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChB+uC,UAAQ,iBAAA9qC,oBAAK,eAAA,dAAG84B;AAAR,AAAA,GAAA94B;AACK,OAAC81B,uBAAcz5B,MAAM,eAAA,dAAKy8B;;AAD/B94B;;;IAERqgC,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;IACrCJ,QAAM,AAACC;IACP2S,OAAK,AAACxN;IACNgqC,mBAAW,AAACluC,6CAAE,AAAA,4FAAalB,OAAO,AAAA,2FAAaA;IAC/CqvC,oBAAY,AAACnuC,6CAAE,AAAA,qGAAkBlB,OAAO,4CAAK,AAAA,6FAAaA;AAXhE,AAYE,AAACq+B,mDAAsBzrB;;AACvB,GACE,AAAC/R,gDAAK6jC,eAAeC;AACrB,AACE,AAAC1J,mBAAUhE;;AACX,oBAAMiY;AAAN,AACE,qBAAA,rBAACI;;AADH;;AAEA,OAACzJ,0CAAkBzlC,MAAMskC,eAAeC;;AAN5C,GAQE,iBAAA,hBAAOxH;AACP,AACE,AAAClC,mBAAUhE;;AACX,GAAM,iBAAA5yB,oBAAK,uDAAA,rDAAI+qC,kBAAW,AAACn9B,4BAAcvR;AAAnC,AAAA,GAAA2D;AACK,UAAKgrC;;AADVhrC;;;AAAN,AAEE,qFAAA,9EAACqb,yEAAc9M;;AAFjB;;;AAXJ,GAeE,EAAK,eAAA,dAAGuqB,wBACH,AAACj8B,6CAAE,AAACi5B,uBAAcz5B,MAAM,eAAA,dAAKy8B,oBAAc,AAACxG;AACjD,AACE,AAACsE,mBAAUhE;;AACX,8DAAA,9DAAChR,sBAAOiS;;AACR,4DAAA,5DAACjS,sBAAO4H;;AACR,OAACgY,0CAAkBzlC,MAAM,eAAA,dAAK+8B,mBAAaA;;AArB/C,GAuBE,EAAK,eAAA,dAAGA,wBACH,AAACj8B,6CAAE,AAACi5B,uBAAcz5B,MAAM,eAAA,dAAKy8B,oBAAc+B;AAChD,AACE,AAACjE,mBAAUhE;;AACX,sEAAA,tEAAChR,sBAAOwU;;AACR,kEAAA,lEAACxU,sBAAO6H;;AACR,OAAC+X,0CAAkBzlC,MAAM,eAAA,dAAK+8B,mBAAaA;;AA7B/C,oBAgCE,iBAAA94B,oBACC8qC;AADD,AAAA,oBAAA9qC;AAAA,mHAAA,1GAEC,AAAC+I,0BACA,AAAC9B,cAAI,AAACsO,eAAK0d,qCACX6X,gBACD,CAAI,AAACpuC,gBAAML,UAAO,eAAA,dAAKy8B,yBACvB,AAACj8B,6CAAE,AAACi5B,uBAAcz5B,MAAMy8B,aACrB,AAACv7B,4CAAI01B,mCAAW6X;;AAPpB9qC;;;AASA,AACE,AAAC42B,mBAAUhE;;AACX,AAACsY,oCAAsB7pC;;AACvB,oBACE,iBAAArB,oBAAK,qDAAA,rDAACnD,6CAAEiuC;AAAR,AAAA,GAAA9qC;AAAqB,OAAC0pB;;AAAtB1pB;;;AACA,wDAAA,jDAACo5B;;AAFH,oBAIE,iBAAAp5B,oBAAK,qDAAA,rDAACnD,6CAAEiuC;AAAR,AAAA,GAAA9qC;AAAqB,OAAC4pB;;AAAtB5pB;;;AACA,yDAAA,lDAACm5B;;AALH,AAAA;;;;;AA5CJ,oBAuDE,iBAAAn5B,oBAAK,qDAAA,rDAACnD,6CAAEiuC;AAAR,AAAA,GAAA9qC;AAAqB,OAAC2pB;;AAAtB3pB;;;AACA,AACE,yDAAA,zDAACq5B;;AACD,OAACmI,0CAAkBzlC,MAAM,eAAA,dAAK+8B,mBAAaA;;AA1D/C,AA8DE,AACE,AAAClC,mBAAUhE;;AACX,OAAC4O,0CACAzlC,MAAM,AAACovC,4CAAmC,AAASpvC,YAAO+8B,aAAaA;;;;;;;;;AAEhF,yCAAA,zCAAMsS,0FACHC;AADH,AAEE,mCAAA,nCAACr4B;;AACD,IAAMvR,MAAI,iBAAA8pC,YAAQ,AAAC5Q;AAAT,AAAA,GAAA,CAAA4Q,aAAA;AAAA;;AAAA,gCAAAA,zBAA0B1rC;;;IAApCyrC,cACsB,AAACr5B;IADvBq5B,kBAAA,AAAAhuC,4BAAAguC;YAAA,AAAA/tC,4CAAA+tC,gBAAA,pEACc3vC;AADd,AAEE,oBAAMA;AAAN,AACE,AAAC6vC,yCAA2B/pC;;AAC5B,IAAA4K,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,2EAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,AAACgd;;AACD,2DAAA,3DAAC0O,8IAAsCp8B,cAAO0vC;;AAHhD,IAAAI,uDAAAn/B;IAAAo/B,uDAAA,AAAAh/B,qBAAA;AAAA,AAAA,CAAAJ,8DAAAo/B;;AAAA,IAAA,AAEE,AAACriB;;AACD,2DAAA,3DAAC0O,8IAAsCp8B,cAAO0vC;;AAHhD,IAAA1+B,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAm/B;;;AAFF;;AAMA,0CAAA,nCAACz4B;;AAEL,8CAAA,9CAAM24B,oGACHvnC;AADH,AAEE,kBAAKwuB;AAAL,AACE,oBACE,AAACvM;AACD,GAAM,6DAAA,3DAAK,AAACxd,cAAI,AAACkhB,+CACN,AAAClhB,cAAI,AAACghB,0DACN,AAAChhB,cAAI,AAACihB;AAFjB,AAGE,AAAC8M,mBAAUhE;;AACX,AAACwY,uCAAe,GAAK,6CAAA,7CAACvuC,kGAAQuH;;AAJhC;;AAFF,oBAQE,AAACujB;AACD,AACE,AAACiP,mBAAUhE;;AACX,AAACgF,+BAAOxzB;;AAXZ;;;AADF;;;AAeF,sDAAA,tDAAMwnC,oHACHpuC;AADH,AAEE,kBAAKo1B,EAAEiZ;AAAP,AACE,IAAM30B,WAAS,AAACpb;IACVC,QAAM,AAAC4+B;IACPhd,MAAI,sDAAA,tDAACrhB,oDAASs2B;IACdv2B,QAAM,0DAAA,1DAACC,oDAASP;IAChB+vC,UAAQ,sDAAA,tDAACxvC,oDAASs2B;IAClBmZ,UAAQ,sDAAA,tDAACzvC,oDAASs2B;IAClBnxB,MAAI,AAAC5B,yBAAW9D;IAChBiwC,iBAAS,iBAAAxrC,mBAAI,iDAAA,IAAA,rDAACuzB,2CAAah4B;AAAlB,AAAA,oBAAAyE;AAAAA;;AAAA,IAAAA,uBACI,iDAAA,IAAA,rDAACuzB,2CAAah4B;AADlB,AAAA,oBAAAyE;AAAAA;;AAEI,wDAAA,jDAAC3D,6CAAE8gB;;;;AATtB,AAUE,oBACE,iBAAA3d,oBAAK,wEAAA,xEAACisC,sEAAyBrZ;AAA/B,AAAA,oBAAA5yB;AAAA,SACK,GAAKgsC,sBACL,AAACnjC,cAAI,AAAC8gB;;AAFX3pB;;;AADF;;AAAA,oBAME,iBAAAQ,mBAAIsrC;AAAJ,AAAA,oBAAAtrC;AAAAA;;AAAYurC;;;AANd;;AAAA,oBAYE,iBAAA/rC,oBAAK,AAACiwB;AAAN,AAAA,oBAAAjwB;AAAA,SACK,iDAAA,jDAACnD,6CAAE8gB,sBACH,mDAAA,nDAAC9gB,6CAAER;;AAFR2D;;;AAGA,AACE,AAAC42B,mBAAUhE;;AACX,kHAAA,3GAACvX,yEAAc,AAACta;;AAjBpB,GAmBE,EAAK,iDAAA,jDAAClE,6CAAE8gB,cACH,EACC,OAAA,NAAGlc,gBACH,6CAAA,7CAAC5E,iDAAM,AAACi5B,uBAAcz5B,MAAM,OAAA,NAAKoF;AACvC,gEAAA,zDAAC43B;;AAvBH,GAyBE,EACC,AAACtwB,0BAAU,kIAAA,iFAAA,nNAACmjC,qDAAe,AAACjlC,cAAI,AAACsO,eAAKwd,0JAE3BpV,UACX,AAAC9gB,6CAAE,AAAC25B,+CAAuBz6B,OAAO4hB;AACnC,AACE,AAACiZ,mBAAUhE;;AACX,OAACyI,uEAA2Bt/B;;AAhChC,oBAkCE,iBAAAiE,oBAAK,CAACgzB,+EAAAA,oFAAAA,PAAuBrV,gEAAAA;AAA7B,AAAA,oBAAA3d;AAAkC,OAAC4N,4BAAc,AAAC0lB;;AAAlDtzB;;;AAlCF;;AAAA,GAqCE,EAAK,GAAK,AAAC4N,4BAAc,AAAC0lB,0CACrB,AAACvqB,0BAAUojC,gDAAkCxuB;AAClD,AACE,0CAAA,WAAA,rDAACuV,iCAAShc,aAAa1Z;;AACvB,OAACo5B,mBAAUhE;;AAzCf,GA2CE,EAAK,GAAK,AAAChlB,4BAAc,AAAC0lB,0CACrB,AAACvqB,0BAAUqjC,sCAAwBzuB;AACxC,AACE,AAACiZ,mBAAUhE;;AACX,iDAAA,WAAA,rDAACM,iCAAShc,aAAa1Z;;AA/C3B,GAiDE,AAACuL,0BAAU,AAAC9B,cAAI,AAACsO,eAAKud,uCAAenV;AACrC,AACE,AAACiZ,mBAAUhE;;AACX,4DAAA,rDAACM,iCAAShc,SAASyG,IAAIngB;;AApD3B,GAsDEwuC;AACA,AACE,4DAAA,mFAAA,/IAACpY;;AACD,GAAI,iDAAA,jDAAC/2B,6CAAE8gB;AACL,AAAC6tB,yCAA2B,mCAAA,lCAAK,AAAC3rC,yBAAW9D;;AAC7C,AAACyvC,yCAA2B,AAAC3rC,yBAAW9D;;;AAC1C,OAAC6lB,sBAAOiS,wCAA0B,AAACC,iEAAqB/3B;;AA5D5D,GA8DE,uBAAA,NAAMswC;AAAN,AACE,IAAArsC,oBAAK,AAACnD,6CAAE8gB,IAAI0uB;AAAZ,AAAA,GAAArsC;AAAA,IAAAA,wBACK,2BAAA,1BAAI,AAACtD,gBAAML;AADhB,AAAA,GAAA2D;AAAA,IAAAA,wBAEK,OAAA,NAAGyB;AAFR,AAAA,GAAAzB;AAAA,IAAAA,wBAGK,AAACnD,6CAAE,AAAC8C,4CAAItD,MAAM,OAAA,NAAKoF,YAAM4qC;AAH9B,AAAA,GAAArsC;AAIK,GAAI,CAAG,AAACtD,gBAAML,SAAOoF;AACnB,OAACjF,gDAAK,AAACmD,4CAAItD,MAAMoF,KAAK4qC;;AADxB;;;AAJLrsC;;;AAAAA;;;AAAAA;;;AAAAA;;;AAOF,sDAAA,KAAA,2CAAA,qEAAA,pKAAC0lC,sCAAwBxuB;;AAtE3B,GAwEE,uBAAA,NAAMm1B;AAAN,AACE,IAAArsC,oBAAK,AAACnD,6CAAE8gB,IAAI0uB;AAAZ,AAAA,GAAArsC;AAAA,IAAAA,wBACK,2BAAA,1BAAI,AAACtD,gBAAML;AADhB,AAAA,GAAA2D;AAAA,IAAAA,wBAEK,OAAA,NAAGyB;AAFR,AAAA,GAAAzB;AAAA,IAAAA,wBAGK,AAACnD,6CAAE,AAAC8C,4CAAItD,MAAM,OAAA,NAAKoF,YAAM4qC;AAH9B,AAAA,GAAArsC;AAIK,GAAI,CAAG,AAACtD,gBAAML,SAAOoF;AACnB,OAACjF,gDAAK,AAACmD,4CAAItD,MAAMoF,KAAK4qC;;AADxB;;;AAJLrsC;;;AAAAA;;;AAAAA;;;AAAAA;;;AAOF,sDAAA,KAAA,2CAAA,qEAAA,pKAAC0lC,sCAAwBxuB;;AAhF3B,AAAA;;;;;;;;;;;;;;;;AAqFN,wCAAA,xCAAgCo1B,wFAC7Bz5B,OAAO9W,MAAMmb,SAASq1B;AADzB,AAEE,kBAAK3Z,EAAE4Z;AAAP,AACE,oBAAU,AAACP,sEAAyBrZ;AAApC;;AAAA,AACE,IAAM6Z,IAAE,sDAAA,tDAACnwC,oDAASs2B;IACZ8Z,OAAK,iEAAA,SAAA,1EAACC,+DAAoB/Z;IAC1Bp1B,SAAO,AAAA,wFAAS,AAACyU;IACjB6mB,cAAY,AAACj5B,yBAAW9D;IACxBM,QAAM,0DAAA,1DAACC,oDAASP;IAChB6wC,IAAE,AAAC9W,uBAAcz5B,MAAM,eAAA,dAAKy8B;IAC5B+T,gBAAc,AAACC;IACfC,wBAAgB,AAACn/B,4BAAc,AAAC0lB;IAChC0Z,sBAAc,wEAAA,xEAACf,sEAAyBrZ;IACxCqa,6BAAqB,iBAAAjtC,oBAAKgtC;AAAL,AAAA,oBAAAhtC;AACK,OAACxD,gDAAKkwC,KAAKQ;;AADhBltC;;;AAT3B,AAWE,oBAAU,iBAAAQ,mBAAI,AAACupB;AAAL,AAAA,oBAAAvpB;AAAAA;;AAAkCysC;;;AAA5C;AAAA,AACE,oBACE,iBAAAjtC,oBAAK,GAAK,0BAAA,iFAAA,eAAA,iBAAA,kBAAA,7JAAC+I,6LAA4D0jC;AAAvE,AAAA,GAAAzsC;AAAA,IAAAA,wBACK,AAAC6I,cAAI,AAAA,uHAAA,AAAA8Y,gBAA4BwrB;AADtC,AAAA,GAAAntC;AAAA,IAAAA,wBAEK,AAAC6I,cAAI,AAAA,wIAAA,AAAA8Y,gBAAoCwrB;AAF9C,AAAA,GAAAntC;AAGK,uDAAA,KAAA,rDAACk0B,0CAAYn4B;;AAHlBiE;;;AAAAA;;;AAAAA;;;AAIA,IAAMotC,kBAAS,AAACtZ,iEAAqB/3B;IAC/BM,mBAAM,0DAAA,1DAACC,oDAASP;IAChBsxC,oBAAW,gOAAA,hOAAC7oC,2DAAqB,8DAAA,9DAAC/H,6CAAKJ,qBAAQ,AAAA,iFAAM+wC;IACrD3rC,aAAI,qBAAA,pBAAG4rC;IACPxmC,WAAE,AAAC2kC,yCAA2B/pC;IAC9BA,iBAAI,8DAAA,9DAACsG,8CAAMqlC,mEAAc3rC;IACzB6rC,sBAAa,wHAAA,8FAAA,pNAAI,6CAAA,7CAACzwC,iDAAK,AAACi5B,uBAAcz5B,iBAAM,qBAAA,pBAAKgxC;AANvD,AASE,4DAAA,5DAACzZ,+IAAsB0Z;;AACvB,AAAC1rB,sBAAOiS,wCAA0BpyB;;AAftC,GAiBE,6BAAA,oFAAA,wJAAA,vQAAKsrC,6BACA,AAAChkC,0BAAUojC,gDAAkCM,UAC7C,AAAC5vC,6CAAE,AAAA,kFAAMgwC,eAAeJ,UACxB,eAAA,dAAG3T,wBACH,AAACjwB,cAAI,gDAAA,KAAA,rDAACqrB,0CAAYn4B;AACvB,AACE,4DAAA,mFAAA,kEAAA,OAAA,2CAAA,8FAAA,IAAA,qEAAA,1aAAC63B;;AAED,4DAAA,mFAAA,/IAACA;;AACD,AAAChS,sBAAOiS,wCAA0B,AAACC,iEAAqB/3B;;AA1B5D,GA4BE,6BAAA,0EAAA,wJAAA,7PAAKgxC,6BACA,AAAChkC,0BAAUqjC,sCAAwBK,UACnC,AAAC5vC,6CAAE,AAAA,kFAAMgwC,eAAeJ,UACxB,eAAA,dAAG3T,wBACH,AAACjwB,cAAI,gDAAA,KAAA,rDAACqrB,0CAAYn4B;AACvB,AACE,4DAAA,mFAAA,kEAAA,OAAA,2CAAA,8FAAA,IAAA,qEAAA,1aAAC63B;;AAED,4DAAA,mFAAA,gFAAA,/NAACA;;AACD,AAAChS,sBAAOiS,wCAA0B,AAACC,iEAAqB/3B;;AArC5D,GAuCE,gEAAA,9DAAK,6CAAA,7CAACc,sDAAM+vC,UACP,6CAAA,7CAAC/vC,sDAAM,AAACi5B,uBAAcz5B,MAAM,uBAAA,tBAAK,eAAA,dAAKy8B,iCACtC,eAAA,dAAGA;AACR,AACE,4DAAA,mFAAA,kGAAA,2CAAA,qEAAA,eAAA,qEAAA,rbAAClF,iNAAoCiH;;AAErC,AAACjZ,sBAAOwU,gDAAkC,AAACtC,iEAAqB/3B;;AAChE,kEAAA,lEAAC6lB,sBAAO6H;;AA9CZ,oBAgDE,iBAAAzpB,oBAAK,+CAAA,/CAACnD,6CAAE+vC;AAAR,AAAA,GAAA5sC;AACK,IAAAQ,mBAAI,uGAAA,vGAAC3D,6CAAE,AAACi5B,uBAAcz5B,MAAM,uBAAA,tBAAK,eAAA,dAAKy8B;AAAtC,AAAA,GAAAt4B;AAAAA;;AAAA,IAAAA,uBACI,AAACqI,cAAI,AAAC6gB;AADV,AAAA,GAAAlpB;AAAAA;;AAEI,IAAAR,wBAAK,AAAC0pB;AAAN,AAAA,oBAAA1pB;AACK,iGAAA,1FAACxD,gDAAK,AAACs5B,uBAAcz5B,MAAMy8B;;AADhC94B;;;;;AAHTA;;;AAKA,yDAAA,zDAACq5B;;AArDH,oBAuDE,iBAAAr5B,oBAAA,AAAA2hB,gBAAM6H;AAAN,AAAA,oBAAAxpB;AAAqB,OAACxD,gDAAKiwC,EAAE,AAACna;;AAA9BtyB;;;AACA,IAAMutC,0BAAiB,AAAC9X,6CAAqB15B;AAA7C,AACE,GAAI,AAACoG,cAAIorC;AACP,AACE,4DAAA,5DAAC3rB,sBAAO4H;;AACR,AAAC5H,sBAAO4rB,yCAA2BD;;AACrC,4DAAA,5DAAC3rB,sBAAO4H;;;AA7Dd,oBA+DE,iBAAAxpB,oBAAA,AAAA2hB,gBAAM8H;AAAN,AAAA,oBAAAzpB;AAA2B,gEAAA,zDAACxD,gDAAKgwC;;AAAjCxsC;;;AACA,IAAMytC,gCAAuB,AAACvX,mDAA2Bn6B;AAAzD,AACE,GAAI,AAACoG,cAAIsrC;AACP,GACE,sDAAA,tDAAC5wC,6CAAE2vC;AACH,oBAAA,AAAA7qB,gBAAO8H;AAAP,AACE,AAACmN,mBAAUhE;;AACX,4HAAA,2CAAA,vKAAC3H,6CAAgB/T,SACA,AAAC/N,eAAK,AAACxG,gBAAM8qC,gCACbjwC,uHACeq9B;;AALlC;;AAFF,AAUE,AAACjZ,sBAAO8rB,+CAAiCD;;;;AAC3C,kEAAA,lEAAC7rB,sBAAO6H;;;AA7Ed,GA+EE,CAAA,AAAA9H,mCAAA,nBAAO4qB;AACP,AAACvT,sDAA8Bj9B;;AAhFjC,AAAA;;;;;;;;;;;AAoFF,oBAAU,iBAAAyE,mBAAI,+CAAA,/CAAC3D,6CAAE4vC;AAAP,AAAA,GAAAjsC;AAAAA;;AAAkBwsC;;;AAA5B;;AAAA,AACE,8CAAA,2CAAA,uEAAA,0DAAA,sDAAA,zQAACW,gJAAoCnB,8DACJE,yDACDD,4DACG,AAAY7Z;;;;;AAEzD,gDAAA,hDAAMgb,wGACHvsC;AADH,AAEE,kBAAK4H;AAAL,AACE,IAAMlN,QAAM,AAACC,oBAAgBqF;AAA7B,AACE,OAAC23B,sDAA8Bj9B;;;AAErC,GAAA,QAAAhB,qCAAAC,6CAAAC,oDAAA4yC;AAAA;AAAA,AAAA,gDAAA,hDAASC;;AACT,wDAAA,xDAAMC,wHACH1sC;AADH,AAEE,kBAAK2sC,WAAeC;AAApB,AACE,IAAMA,iBAAW,AAAA,6FAAY,uHAAA,2EAAA,lMAACjc,0DAAQic;IAChClyC,QAAM,AAACC,oBAAgBqF;IACvB6sC,QAAM,AAACpa,iEAAqB/3B;IAC5BoyC,gBAAc,kBAAID,OAAM,CAAGD,iBAAW,AAAA,kFAAMC,QAAQF;IACpDI,UAAQ,kFAAA,lFAAC9xC,oDAAS,AAAwBP;IAC1CsyC,WAAS,CAAGF,gBAAcC;IAC1BE,YAAU,AAAUC;AAN1B,AAOE,GAAM,CAAID,YAAU,CAAGD,WAASP;AAAhC,AACE,IAAMU,YAAU,oBAAA,pBAACxyC;IACXyyC,aAAW,AAAaD;AAD9B,AAEE,QAAM,AAAaA,sBAAW,CAAGC,aAAWR;;AAHhD;;;;AAKN,iDAAA,jDAAMS,0GACH/yC,MAAM0F,GAAGkrC;AADZ,AAEE,kBAAK3Z;AAAL,AACE,oBAAI,mBAAA,nBAACmG;AACH,cAAA,VAAM4V;AAAN,AACE,oBAAA,AAAAhtB,gBAAO4qB;AAAP,AACE,aAAA,AAAA5qB,bAAC6Y,6BAAiB+R;;AADpB;;AAEA,OAAC3qB,sBAAO2qB,eACA,WAAA,XAACv3B;AAAD,AACE,OAACslB,iDAAoB1H,EAAEj3B,MAAM0F;GAC9BstC;;AACX,OAACrU,iDAAoB1H,EAAEj3B,MAAM0F;;;;AAEnC,+CAAA,/CAAOutC,sGACJpxC,OAAOymB;AADV,AAEE,IAAAvoB,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAW2iB;AAAX,AACE,IAAM7C,UAAQ,AAAA,mFAAQ,AAAA,2FAAa6C;IAC7Btc,SAAO,8JAAA,9JAAC+6B,qCACA,AAACtyB,+BAAYyZ,KAAK,AAACxZ,uEAAwBjN,SAASymB,UAAUzmB;IACtEg/B,sBAAQ,AAACU,2CAA2B1hB,QAAQzZ;AAHlD,AAIE,gEAAA,zDAACg6B,qCAAaS;;AALlB;;;AAOF,+CAAA,/CAAOqS,sGACJrxC,OAAOymB;AADV,AAEE,IAAM6qB,aAAW,wDAAA,xDAAClV,mDAAa3V;IACzB8qB,qBACA,kDAAA,lDAAC3sB,uDACY,AAAC3a,6CAAK,WAAKgtB;AAAL,AACa,OAAC,WAAKA;AAAL,AACE,oBAAI,AAACrrB,sCAAqB,wGAAA,YAAA,lHAAI,oDAAA,pDAACvM,6CAAEW,gFAEIi3B;AACnCA;;AACA,QAAK,wGAAA,KAAA,3GAAI,oDAAA,pDAAC53B,6CAAEW,gHAAwBi3B;;GANzC,AAACx3B,oBAAYw3B;GAO1Bqa;AAVzB,AAWE,OAACF,6CAAqBpxC,OAAOuxC;;AAEjC,gDAAA,hDAAOC,wGACJzgC,KAAK4J;AADR,AAEE,IAAOA,UAAIA;aAAX,TACOid;;AADP,AAEE,GAAI,AAACjzB,cAAIgW;AACP,IAAMpW,SAAO,iBAAAktC,YAA2B1gC;IAA3B2gC,YAAgC,AAACvsC,gBAAMwV;AAAvC,AAAA,4IAAA82B,UAAAC,0DAAAD,UAAAC,lNAACpR,mEAAAA,wFAAAA;;IACR1I,aAAO,AAACrW,cAAI,AAAC5X,+CAAOiuB,OAAOrzB;AADjC,AAEE,gBAAO,AAAC4F,+CAAO,AAACV,cAAI,4CAAA,5CAACC,2GAAgBkuB,aAAS,AAACtG,eAAK3W;gBAAMid;;;;;AAC5DA;;;;;AAEN,sDAAA,tDAAO+Z,oHACJlrB,KAAK2O;AADR,AAEE,IAAMwc,gBAAc,AAACC;IACfC,mBAAiB,AAAA,mGAAiBF;IAClCG,eAAa,AAAA,4FAAaH;IAC1BrzC,QAAM,AAAC4+B;IACP6U,0BAAa,6CAAA,7CAACp0C;AAJpB,AAKE,oBAEE,iBAAA4E,oBACC,AAACnD,6CAAE0yC,aAAa,AAACxuC;AADlB,AAAA,GAAAf;AAAA,IAAAA,wBAEC,EAAI,AAACmC,cAAImtC,uBACL,AAACntC,cAAI,AAAA,yGAAmBitC;AAH7B,AAAA,GAAApvC;AAAA,IAAAA,wBAICikB;AAJD,AAAA,oBAAAjkB;AAMC,OAACnD,6CAAE,iDAAA,KAAA,tDAAC8G,uBAAe,AAAC1G,oBAAYgnB,eAC7B,AAACtgB,uBAAe,AAAC1G,oBAAY,iBAAAuD,mBAAI,AAAA,8FAAe4uC;AAAnB,AAAA,oBAAA5uC;AAAAA;;AAAA;;MAA7B,KAAA;;AAPJR;;;AAAAA;;;AAAAA;;;AAQA,IAAM+B,gBAAO,iBAAAvB,mBACC,AAAA,yGAAmB4uC;AADpB,AAAA,oBAAA5uC;AAAAA;;AAEC,OAACwuC,8CAAsB,AAACjuC,kCAAwBuuC;;;AAF9D,AAGE,GAAM,AAACntC,cAAIJ;AAAX,AACE,AAAC0tC,4CAA8B1tC;;AAC/B,mDAAA,nDAACg6B,qCAAah6B;;AAFhB;;AAbJ,oBAiBE,iBAAA/B,oBAAK,AAAC0vC,oCAAazrB;AAAnB,AAAA,oBAAAjkB;AACK,UAAK,AAAC4N,4BAAc,AAAC0lB;;AAD1BtzB;;;AAEA,AAACT,6EAAkB0kB;;AAnBrB,oBAqBE,iBAAAjkB,oBAAK,AAAC0vC,oCAAazrB;AAAnB,AAAA,oBAAAjkB;AAAA,IAAAA,wBACK,EAAI,oCAAA,pCAACk5B,+BAAiBjV,yBAClB,oCAAA,pCAACiV,+BAAiBjV;AAF3B,AAAA,GAAAjkB;AAGK,OAACiwB;;AAHNjwB;;;AAAAA;;;AAIA,iNAAA,jNAAC0lC,sCAAwB,AAAC5pC,mCAAyB,0DAAA,1DAACqP,6HAA6B8Y;;AAzBnF,oBA2BE,iBAAAjkB,oBAAK,AAAC0vC,oCAAazrB;AAAnB,AAAA,oBAAAjkB;AAAA,IAAAA,wBACK,oCAAA,pCAACk5B,+BAAiBjV;AADvB,AAAA,GAAAjkB;AAEK,OAACiwB;;AAFNjwB;;;AAAAA;;;AAGA,iNAAA,jNAAC0lC,sCAAwB,AAAC5pC,mCAAyB,0DAAA,1DAACqP,6HAA6B8Y;;AA9BnF,oBAgCE,iBAAAjkB,oBAAK,AAAC2vC,0CAAgB1rB;AAAtB,AAAA,GAAAjkB;AACK,uDAAA,KAAA,rDAACk0B,0CAAYn4B;;AADlBiE;;;AAEA,sHAAA,tHAAC0lC,sCAAwB,AAAC5pC,mCAAyB,AAAC8zC,uCAAmB3rB;;AAlCzE,AAsCE,IAAMzmB,gBAAO,iBAAAgD,mBAAI,iBAAAqvC,YAAoB,AAACr/B;AAArB,AAAA,8HAAAq/B,mDAAAA,zKAACt7B,4DAAAA,uEAAAA;;AAAL,AAAA,oBAAA/T;AAAAA;;AAAA;;;AAAb,AACE,IAAQhD,oBAAAA;IAARsyC,oBACQ,uEAAA,tEAAM,sCAAA,tCAAC1mC,6DAAgD6a;IAD/D8rB,oBAEQ,8DAAA,7DAAM,sCAAA,tCAAC3mC,oDAAuC6a;IAFtD+rB,oBAGQ,gEAAA,/DAAM,sCAAA,tCAAC5mC,sDAAsC6a;AAHrD,AAAA,IAAA,AAAA,GAAA,AAAAgsB,qDAAA,lBAAQzyC;AAAR,IAAA,AAAA,GAAA,CAAAsyC,sBAAA;AAKE,AAAClB,6CAAqBpxC,kBAAOymB;;AAL/B,AAAA,MAAAisB;;;iBAAA,GAAA,CAAAC,mBAAA7wC;AAAA,IAAA8wC,0BAAAD;AAAA,AAAA,GAAA,CAAAC,4BAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAD;;;;AAAA,AAAA,MAAAD;;;iBAAA,GAAA,CAAAG,mBAAA/wC;AAAA,IAAA8wC,0BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,qDAAA,lBAAQzyC;AAAR,IAAA,AAAA,GAAA,CAAAuyC,sBAAA;AAQE,AAACnB,6CAAqBpxC,kBAAOymB;;AAR/B,AAAA,MAAAisB;;;iBAAA,GAAA,CAAAI,mBAAAhxC;AAAA,IAAA8wC,8BAAAE;AAAA,AAAA,GAAA,CAAAF,gCAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAE;;;;AAAA,AAAA,MAAAJ;;;iBAAA,GAAA,CAAAK,mBAAAjxC;AAAA,IAAA8wC,8BAAAG;AAAA,AAAA,GAAA,CAAAH,gCAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,qDAAA,lBAAQzyC;AAAR,IAAA,AAAA,GAAA,CAAAsyC,sBAAA;AAAA,IAAA,AAAA,GAAA,CAAAE,sBAAA;AAWE,AAACnB,6CAAqBrxC,kBAAO,AAACP,oBAAYgnB;;AAX5C,AAAA,MAAAisB;;;iBAAA,GAAA,CAAAM,mBAAAlxC;AAAA,IAAA8wC,8BAAAI;AAAA,AAAA,GAAA,CAAAJ,gCAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,CAAAF,sBAAA;AAcE,8CAAA,9CAACpuB,sBAAO4tB;;AAdV,AAAA,MAAAU;;;iBAAA,GAAA,CAAAO,mBAAAnxC;AAAA,IAAA8wC,8BAAAK;AAAA,AAAA,GAAA,CAAAL,gCAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAK;;;;AAAA,MAAAL;;;AAAA,AAAA,MAAAI;;;;AAAA,AAAA,MAAAN;;;iBAAA,GAAA,CAAAQ,mBAAApxC;AAAA,IAAA8wC,8BAAAM;AAAA,AAAA,GAAA,CAAAN,gCAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAM;;;;AAAA,AAAA,MAAAR;;;iBAAA,GAAA,CAAAS,mBAAArxC;AAAA,IAAA8wC,8BAAAO;AAAA,AAAA,GAAA,CAAAP,gCAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,qDAAA,lBAAQzyC;AAAR,IAAA,AAAA,GAAA,CAAAuyC,sBAAA;AAAA,IAAA,AAAA,GAAA,CAAAC,sBAAA;AAiBE,AAACnB,6CAAqBrxC,kBAAO,AAACP,oBAAYgnB;;AAjB5C,AAAA,MAAAisB;;;iBAAA,GAAA,CAAAU,mBAAAtxC;AAAA,IAAA8wC,8BAAAQ;AAAA,AAAA,GAAA,CAAAR,gCAAAF;AAAA,AAAA,IAAA,AAAA,GAAA,CAAAF,sBAAA;AAoBE,8CAAA,9CAACpuB,sBAAO4tB;;AApBV,AAAA,MAAAU;;;iBAAA,GAAA,CAAAW,mBAAAvxC;AAAA,IAAA8wC,8BAAAS;AAAA,AAAA,GAAA,CAAAT,gCAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAS;;;;AAAA,MAAAT;;;AAAA,AAAA,MAAAQ;;;;AAAA,AAAA,MAAAV;;;iBAAA,GAAA,CAAAY,mBAAAxxC;AAAA,IAAA8wC,8BAAAU;AAAA,AAAA,GAAA,CAAAV,gCAAAF;AAAA,AAAA,MAAAA;;AAAA,MAAAE;;;AAAA,AAAA,MAAAU;;;;AAAA,AAAA,MAAAZ;;;iBAAA,GAAA,CAAAa,mBAAAzxC;AAAA,IAAA8wC,8BAAAW;AAAA,AAAA,GAAA,CAAAX,gCAAAF;AAAA,AAAA,MAAA,KAAA5wC,MAAA,CAAA,sFAAA,gDAAAwwC,mBAAA,gDAAAC,mBAAA,gDAAAC,zMAAQxyC;;AAAR,MAAA4yC;;;AAAA,AAAA,MAAAW;;;;AAAA,MAAAX;;;AAAA,AAAA,MAAAO;;;;AAAA,MAAAP;;;AAAA,AAAA,MAAAG;;;;AAAA,MAAAH;;;AAAA,AAAA,MAAAC;;;;;;;;;;AAqBJ,oBAAA,AAAA1uB,gBAAO6tB;AAAP,AACE,OAAC5Y,mBAAUhE;;AADb;;;AAGJ,2DAAA,3DAAMoe;AAAN,AAEE,OAACC,kCACA,WAAKC;AAAL,AACE,IAAAx1C,qBAAa,AAACi/B;AAAd,AAAA,oBAAAj/B;AAAA,AAAA,QAAAA,JAAWmL;AAAX,AACE,OAACsqC,iDAAmCD;;AADtC;;GAEF,WAAKzmB;AAAL,AACE,OAACwL,cAAiBxL;;;AAEvB,gDAAA,hDAAM2mB,wGACH/vC;AADH,AAEE,kBAAKuxB;AAAL,AACE,+BAAA,0EAAA,zGAACye;;AACD,IAAMptB,OAAK,+EAAA,/EAAU,sDAAA,tDAAC3nB,oDAASs2B;IACzB72B,QAAM,AAAC4+B;AADb,AAEE,GAAA,GAAQ,AAAC/sB,4BAAcqW;AACrB,oBAAI,AAACqtB,qJAAsCv1C;AACzC,oBAAU,AAACw1C;AAAX;;AAAA,AACE,AAAC3a,mBAAUhE;;AACX,OAACoe;;;AACH,OAAC7B,oDAA4BlrB,KAAK2O;;;AACpC,IAAM4e,WACA,iBAAMN,iBAAe,sDAAA,tDAAC50C,oDAASs2B;IACzBvF,QAAM,AAAS6jB;AADrB,AAEE,IAAAx1C,qBAAgB,AAACiH,gBAAM0qB;AAAvB,AAAA,oBAAA3xB;AAAA,AAAA,WAAAA,PAAWqzB;AAAX,AACE,IAAArzB,yBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,+CAAA,oKAAA,5MAACi2B,qCAAavwB,IAAO0tB,MAAM,AAAA,iGAAepzB,OAAOR;;AADnD;;;AADF;;;AAHR,AAME,OAACy7B,mBAAUhE;;;;AAErB,gEAAA,hEAAO6e,wIACJ3uB;AADH,AAEE,AAACD,6CAAqBC;;AACtB,OAAClf;;AAEH,kDAAA,lDAAM8tC,4GACHzoC;AADH,AAEE,OAACuX;;AAEH,iDAAA,jDAAMmxB,0GACH/e;AADH,AAEE,AAACgE,mBAAUhE;;AACX,qEAAA,9DAAC6e;;AAEH,oDAAA,pDAAMG,gHACHhf;AADH,AAEE,AAACgE,mBAAUhE;;AACX,qEAAA,9DAAC6e;;AAGH,iDAAA,jDAAOI;AAAP,AAEE,IAAAn2C,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAW2T;AAAX,AACE,IAAA3T,yBAAoB,AAAA,6FAAa2T;AAAjC,AAAA,oBAAA3T;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,oFAAA,WAAAoxC,/FAACnyB,2EAAgBjf;AAAjB,AAA2B,QAAA,iDAAAoxC,mBAAA;;;AAC3B,8EAAA,mFAAA,mDAAA,mFAAA,oEAAA,4BAAA,mFAAA,mDAAA,mFAAA,6LAAA,2DAAA,j1BAACljC,mrBAGgC,CAAA,2DAAA,VAAUlO,iHAG1C,CAAA,gEAAyBA;;AAR5B;;;AADF;;;AAWF;;;;;;wCAAA,xCAAMqxC,wFAKHnf;AALH,AAME,oBAAU,AAAC2D;AAAX;;AAAA,AACE,oBACE,AAAC5O;AACD,OAAC+pB,gDAAwB9e;;AAF3B,oBAIE,AAACvM;AACD,IAAMtqB,QAAM,AAAC4+B;IACP0F,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;AAF3C,AAGE,GAAI,AAACc,6CAAEwjC,eAAeC;AACpB,OAACuR;;AACD,4BAAA,rBAAC5G;;;AAVP,AAaE,4BAAA,rBAACA;;;;;;AAEP;;;;;;uCAAA,vCAAM+G,sFAKHpf;AALH,AAME,oBACE,AAACjL;AACD,OAACgqB,+CAAuB/e;;AAF1B,oBAIE,AAACvM;AACD,yDAAA,lDAACukB,uDAA+BhY;;AALlC;;;;AAOF,2CAAA,3CAAMqf,8FACHrf;AADH,AAEE,oBAAM,AAACjL;AAAP,AACE,OAACiqB,kDAA0Bhf;;AAD7B;;;AAGF,wCAAA,xCAAMsf,wFACHr/B,OAAO+f;AADV,AAEE,oBAAM,AAACvM;AAAP,AACE,AAACuQ,mBAAUhE;;AACX,OAAC8X,+CAAuB9X;;AAF1B;;;AAIF,2CAAA,3CAAMuf,8FACHt/B,OAAO+f;AADV,AAEE,oBAAM,AAACvM;AAAP,AACE,yDAAA,lDAACukB,wDAAgChY;;AADnC;;;AAGF,2CAAA,3CAAMwf,8FAAkBhuC;AAAxB,AACE,kBAAKwuB;AAAL,AACE,oBAAU,AAAC2D;AAAX;;AAAA,AACE,AAACK,mBAAUhE;;AACX,oBACE,AAACvM;AACD,OAACwiB,gDAAwBzkC;;AAF3B,oBAIE,iBAAApE,oBAAK,AAAC2nB;AAAN,AAAA,oBAAA3nB;AAAwB,QAAA,QAAM,AAACtD,gBAAM,AAACgb;;AAAtC1X;;;AACA,OAAC+nC,uCAAe3jC;;AALlB,AAQE,OAACujC,0CAAkBvjC;;;;;;;AAE3B,kDAAA,lDAAMiuC,4GAAyBjuC;AAA/B,AACE,kBAAKwuB;AAAL,AACE,AAACgE,mBAAUhE;;AACX,oBAAI,AAACvM;AACH,IAAMtqB,QAAM,AAAC4+B;IACP0F,iBAAe,AAACnkC,kCAAyBH;IACzCukC,eAAa,AAAClkC,gCAAuBL;IAF3Cu2C,cAGsB,iBAAAG,YAAM,AAACC,sCAA6B32C;AAApC,AAAA,QAAA02C;KAAA;AAAA,0FACcnS,aAAaD;;;;AAD3B,0FAEGA,eAAeC;;;;aALxC,AAAA3gC,4CAAA2yC,YAAA,IAAA,rEAGOC;aAHP,AAAA5yC,4CAAA2yC,YAAA,IAAA,rEAGcE;IAGRG,cAAY,AAAC7e,iEAAqB/3B,MAAMy2C;AAN9C,AAOE,GAEC,EAAI,EAAK,uDAAA,vDAAC31C,6CAAEuH,iEAAe,AAACwuC,2DAAuCD,oBAC/D,EAAK,uDAAA,vDAAC91C,6CAAEuH,qEAAiB,AAACyuC,0DAAsCF;AACnE,OAAClrB,6CAAqBrjB;;AAEtB,OAAC0uC,oCAAsB/2C,MAAMqI,UAAUmuC,OAAOI;;;AAClD,OAAClrB,6CAAqBrjB;;;;AAE5B,oDAAA,pDAAM2uC,gHACH3uC,UAAUwuB;AADb,AAEE,IAAAl3B,qBAAoB,iBAAAs3C,YAAQ,AAACt7B;IAATs7B,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,gBAAAA,hBACQrwC;IADRqwC,gBAAA,EAAA,CAAAA,iBAAA,OAAA,KAEQ,gBAAAA,cAAA,9BAAC36B;AAFT,AAAA,GAAA,CAAA26B,iBAAA;AAAA;;AAAA,wBAAAA,jBAGQviC;;;AAH5B,AAAA,oBAAA/U;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AAIE,AAACk2B,mBAAUhE;;AACX,YAAA,2CAAA,nDAAMj3B,kHAAsB+E;IACtBA,0GAAa,AAACgX,hBACD/U,pDACA,oDAAA,uDAAA,3GAACrG,vBACD,wIAAA,WAAA,nJAACqH;IACd+lC,cAAS,uDAAA,vDAAC7sC,6CAAEuH;AALlB,AAME,OAACW,uEAAYpJ,MACA,eAAA,IAAA,jBAAI+tC,mEACJhpC;;AAbjB;;;AAeF,8CAAA,9CAAMuyC,oGAAqB7uC;AAA3B,AACE,kBAAKwuB;AAAL,AACE,oBAAU,AAAC2D;AAAX;;AAAA,AACE,oBACE,AAAClQ;AACD,AACE,AAACuQ,mBAAUhE;;AACX,OAAC4W,8CAAsBplC;;AAJ3B,oBAME,iBAAApE,oBAAK,AAAC2nB;AAAN,AAAA,oBAAA3nB;AAAwB,QAAA,QAAM,AAACtD,gBAAM,AAACgb;;AAAtC1X;;;AACA,AACE,AAAC42B,mBAAUhE;;AACX,OAACmgB,kDAAqB3uC,UAAUwuB;;AATpC,AAAA;;;;;;;AAcN,oDAAA,pDAAMsgB;AAAN,AACE,+EAAA,2CAAA,yDAAA,nLAAC7pB;;AACD,8GAAA,vGAAC7qB,oEAAwB,AAAC1C;;AAE5B,iDAAA,jDAAMq3C;AAAN,AACE,+EAAA,2CAAA,yDAAA,nLAAC9pB;;AACD,OAAC+pB,qCAAuB,AAACzY;;AAE3B,gDAAA,hDAAM0Y;AAAN,AACE,+EAAA,2CAAA,yDAAA,nLAAChqB;;AACD,OAACiqB,oCAAsB,AAAC3Y;;AAE1B,6CAAA,7CAAM4Y;AAAN,AACE,sEAAA,/DAAC70C,oCAAsB,AAACi8B;;AAE1B,uCAAA,vCAAM6Y;AAAN,AACE,OAACrS,wCAA0B,AAACxG;;AAE9B,8CAAA,9CAAM8Y;AAAN,AACE,OAACC,iDAAmC,AAAC/Y;;AAEvC,+CAAA,/CAAMgZ;AAAN,AACE,OAACC,kDAAoC,AAACjZ;;AAExC,6CAAA,7CAAMkZ;AAAN,AACE,IAAM93C,QAAM,AAAC4+B;AAAb,AACE,+EAAA,2CAAA,yDAAA,nLAACtR;;AACD,AAACyqB,iCAAwB/3C;;AACzB,OAACyC,oEAAwB,AAAC1C,mCAAyB,AAASC;;AAEhE,4CAAA,5CAAMg4C;AAAN,AACE,IAAMh4C,QAAM,AAAC4+B;AAAb,AACE,+EAAA,2CAAA,yDAAA,nLAACtR;;AACD,AAAC2qB,gCAAuBj4C;;AACxB,OAACyC,oEAAwB,AAAC1C,mCAAyB,AAASC;;AAEhE,kDAAA,lDAAMk4C,4GACHz2C,OAAO0C,QAAQg0C;AADlB,AAEE,IAAAl0C,oBAAK,uCAAA,vCAACk5B,+BAAiBh5B;AAAvB,AAAA,GAAAF;AACK,oBAAIk0C;AACF,IAAM3pC,MAAI,AAACC,+BAAYtK,QAAQ,AAACuK,uEAAwBjN;IAClDkN,kBAAgB,AAAC/H,gBAAM,AAACgI,iBAAOJ;AADrC,AAEE,OAACU,8CAAwBP;;AAH7B;;;AADL1K;;;AAOF,AAAA,6CAAA,qDAAAb,lGAAMi1C;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA90C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAM80C,sFACF1zC;AADJ,AAEG,yFAAA,lFAAC6zC,yEAAa7zC;;;AAFjB,CAAA,2EAAA,oBAAA2zC,/FAAMD,sFAGF1zC;AAHJ,AAAA,IAAA4zC,cAAAD;IAAAC,kBAAA,AAAAh3C,4BAAAg3C;sBAAA,AAAA/2C,4CAAA+2C,gBAAA,gEAAA,9IAGqBJ;AAHrB,AAKG,oBAAMxzC;AAAN,AACE,IAAAmY,qBAAe,AAACiQ,sCAA6BpoB;AAA7C,AAAA,oBAAAmY;AAAA,YAAAA,RAASld;AAAT,AACE,IAAAqE,oBACC,AAAC6I,cAAI,AAACkH,+BAAgBpU;AADvB,AAAA,GAAAqE;AAEC,IAAAQ,mBAAI,AAACg0C,oEAAuB9zC;AAA5B,AAAA,oBAAAF;AAAAA;;AACI,IAAAR,wBACC,AAAA,oJAAyC,AAACy0C;AAD3C,AAAA,oBAAAz0C;AAEC,OAACi0C,gDAAkB,AAAA,iGAAet4C,OACf,AAAA,kGAAgBA,OAChBu4C;;AAJpBl0C;;;;AAHLA;;;AADF;;;AADF;;;;AALH,CAAA,qEAAA,rEAAMo0C;;AAAN,AAiBA;;;;;;;;;;;;;;;;;;gDAAA,wDAAAM,xGAAME;AAAN,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAAr3C,4BAAAq3C;sBAAA,AAAAp3C,4CAAAo3C,gBAAA,8DAAA,5IAiBWE;sBAjBX,AAAAt3C,4CAAAo3C,gBAAA,+DAAA,7IAiBqBG;yBAjBrB,AAAAv3C,4CAAAo3C,gBAAA,qEAAA,tJAiB+BI;iBAjB/B,AAAAx3C,4CAAAo3C,gBAAA,iEAAA,1IAiB4C5W;AAjB5C,AAmBE,IAAAriC,qBAAgB,iBAAA8E,mBAAI,AAACgQ;AAAL,AAAA,oBAAAhQ;AAAAA;;AACI,OAACw0C;;;AADrB,AAAA,oBAAAt5C;AAAA,AAAA,WAAAA,PAAWgO;AAAX,AAEE,IAAMwc,eAAO,AAAClgB,4CAAqB0D;IAC7BhJ,WAAS,iBAAAF,mBAAIu9B;AAAJ,AAAA,oBAAAv9B;AAAAA;;AAAe,IAAAR,oBAAKkmB;AAAL,AAAA,oBAAAlmB;AAAY,OAACiG,eAAKyD;;AAAlB1J;;;;IACxB+B,SAAO,kBAAIrB,UACF,iBAAAu0C,YAA2B,AAACl0C;IAA5Bm0C,YAAoDx0C;AAApD,AAAA,4IAAAu0C,UAAAC,0DAAAD,UAAAC,lNAACpX,mEAAAA,wFAAAA;KACD,CAACqX,qEAAAA,2EAAAA,RAA4BzrC,uDAAAA;IACtCq0B,iBAAW,iBAAAv9B,mBAAIE;AAAJ,AAAA,oBAAAF;AAAAA;;AAAau9B;;;AAL9B,AAME,oBAAIgX;AACF,IAAMhzC,aAAO,AAACqzC,iFAAsBrzC,OAAO,iBAAAvB,mBAAIE;AAAJ,AAAA,oBAAAF;AAAAA;;AAAakJ;;;AAAxD,2EAEG,iBAAA2rC,YAAStzC,xGAuBT,OAAC4F,+CAAOC;IAvBRytC,gBAAA,kBACEtX,gBACA,AAAC72B,4CAAI,+DAAUouC;AAAV,AACE,GAAI,AAACz4C,6CAAEkhC,eAAW,AAAA,6FAAauX;AAC7BA;;AACA,OAAC3yC,gBAAM,AAAC+D,+CAAO6uC,qDAAK,AAAA,0GAAA,LAAiBD;;cALhDD,XAEEA;IAFFA,gBAAA,kBAOER,iBACA,AAACW,sBACA,WAAKvX;AAAL,AACE,oBAAI,iBAAAj+B,oBAAK,AAAC2O,qBAAKsvB;AAAX,AAAA,GAAAj+B;AAAA,IAAAA,wBACK,AAAC+P,+BAAgBkuB;AADtB,AAAA,oBAAAj+B;AAEK,OAACxD,gDAAKuhC,eAAW,AAAA,6FAAaE;;AAFnCj+B;;;AAAAA;;;AAGF,uDAAA,uEAAA,vHAAC+H,8CAAMk2B;;AAAsBA;;kBAbpCoX,fAQEA;IARFA,gBAAA,AAgBE,AAACvoC,sDAAO,WAAK5E;AAAL,AAAQ,+CAAA,xCAACutC,mBAAS9mC,4FAAqBzG;qDAA/CmtC;;IAhBFA,gBAAA,kBAkBEP,iBACA,AAACpuC,+CAAO,WAAKu3B;AAAL,AAAQ,OAACsW,yEAAa,AAAA,6FAAatW;kBAnB7CoX,fAmBEA;AAnBF,AAAA,AAsBE,OAACnuC,4CAAI,WAAKgB;AAAL,AAAQ,wDAAA,jDAACuD,+CAAOvD;GAArBmtC;;;;AAGL,IAAAK,YAAS3zC;IAAT2zC,gBAAA,4HAAAA,1GACEb,iBACA,8EAAAa,9EAAChvC,+CAAOqJ;IAFV2lC,gBAAA,kBAIEZ,iBACA,AAACpuC,+CAAO,WAAKu3B;AAAL,AAAQ,OAACsW,yEAAa,AAAA,6FAAatW;kBAL7CyX,fAKEA;AALF,AAAA,AAQE,2EAAAA,pEAAC/tC,+CAAOC;;;;AA5ChB;;;AA8CF,uDAAA,vDAAO+tC;AAAP,AAEE,IAAMvmC,SAAO,AAACjG,eAAK,AAACoJ;AAApB,AACE,OAAA,mFAAOnD;;AAEX,qDAAA,rDAAOwmC,kHACJt2B,UAAUjjB;AADb,AAEE,IAAMijB,gBAAU,AAACpY,4CAAI,WAAKxG;AAAL,AAAe,GAAI,OAASA;AAAU,OAACuF,eAAKvF;;AAAUA;;GAAW4e;IAChF/Q,OAAK,AAACxN;IACN1E,YAAM,AAACw5C,mBAAQx5C;AAFrB,AAGE,oBAAMkS;AAAN,AACE,IAAAlC,sCAAAC;IAAAC,6BAAA,kBAAAF,qCAAA,AAAAtE,8CAAA,2CAAA,mEAAA,iGAAA,oFAAA,MAAA,2CAAA,mEAAA;AAAA,AAAA,oBAAAsE;AAAA,AAEE,IAAA2pC,qBAAA,AAAA7zC,cAAiBmd;IAAjB22B,uBAAA;IAAAC,uBAAA;IAAAC,mBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,mBAAAD;AAAA,sBAAA,AAAAD,0DAAAE,5EAAQz1C;AAAR,AAAA,AACE,IAAAhF,4BAAiB,iBAAA86C,YAAA,mFAAA,+DAAwB91C;AAAxB,AAAA,4GAAA81C,0CAAAA,9IAAC51C,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAMi7C,uBAAc,AAAA,wGAAmBj7C;AAAvC,AACE,GAAU,AAACkB,6CAAE+5C,qBAAcv6C;AAA3B;AAAA,AACE,uBAAA,2CAAA,+EAAA,7IAAMV,6HAAmB+E,0FACMrE;AAD/B,AAEE,AAACiR,gDAA0B3R;;;AALnC;;AADF;AAAA,gBAAAq6C;gBAAAC;gBAAAC;gBAAA,CAAAC,mBAAA;;;;;;;AAAA,IAAAz6C,4BAAA,AAAAyG,cAAA6zC;AAAA,AAAA,GAAAt6C;AAAA,AAAA,IAAAs6C,yBAAAt6C;AAAA,AAAA,GAAA,AAAA6G,6BAAAyzC;AAAA,IAAAxzC,yBAAA,AAAAC,sBAAAuzC;AAAA,AAAA,gBAAA,AAAAtzC,qBAAAszC;gBAAAxzC;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,sBAAA,AAAAG,gBAAAqzC,lCAAQt1C;AAAR,AAAA,AACE,IAAAhF,gCAAiB,iBAAA+6C,YAAA,mFAAA,+DAAwB/1C;AAAxB,AAAA,4GAAA+1C,0CAAAA,9IAAC71C,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAMi7C,uBAAc,AAAA,wGAAmBj7C;AAAvC,AACE,GAAU,AAACkB,6CAAE+5C,qBAAcv6C;AAA3B;AAAA,AACE,uBAAA,2CAAA,+EAAA,7IAAMV,6HAAmB+E,0FACMrE;AAD/B,AAEE,AAACiR,gDAA0B3R;;;AALnC;;AADF;AAAA,gBAAA,AAAAiH,eAAAozC;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;AAFF,IAAAF,uDAAAxpC;IAAAypC,uDAAA,AAAArpC,qBAAA;AAAA,AAAA,CAAAJ,8DAAAypC;;AAAA,IAAA,AAEE,IAAAK,qBAAA,AAAAj0C,cAAiBmd;IAAjB+2B,uBAAA;IAAAC,uBAAA;IAAAC,mBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,mBAAAD;AAAA,sBAAA,AAAAD,0DAAAE,5EAAQ71C;AAAR,AAAA,AACE,IAAAhF,4BAAiB,iBAAAg7C,YAAA,mFAAA,+DAAwBh2C;AAAxB,AAAA,4GAAAg2C,0CAAAA,9IAAC91C,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAMi7C,uBAAc,AAAA,wGAAmBj7C;AAAvC,AACE,GAAU,AAACkB,6CAAE+5C,qBAAcv6C;AAA3B;AAAA,AACE,uBAAA,2CAAA,+EAAA,7IAAMV,6HAAmB+E,0FACMrE;AAD/B,AAEE,AAACiR,gDAA0B3R;;;AALnC;;AADF;AAAA,gBAAAy6C;gBAAAC;gBAAAC;gBAAA,CAAAC,mBAAA;;;;;;;AAAA,IAAA76C,4BAAA,AAAAyG,cAAAi0C;AAAA,AAAA,GAAA16C;AAAA,AAAA,IAAA06C,yBAAA16C;AAAA,AAAA,GAAA,AAAA6G,6BAAA6zC;AAAA,IAAA5zC,yBAAA,AAAAC,sBAAA2zC;AAAA,AAAA,gBAAA,AAAA1zC,qBAAA0zC;gBAAA5zC;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,sBAAA,AAAAG,gBAAAyzC,lCAAQ11C;AAAR,AAAA,AACE,IAAAhF,gCAAiB,iBAAAi7C,YAAA,mFAAA,+DAAwBj2C;AAAxB,AAAA,4GAAAi2C,0CAAAA,9IAAC/1C,mDAAAA,8DAAAA;;AAAlB,AAAA,oBAAAlF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAMi7C,uBAAc,AAAA,wGAAmBj7C;AAAvC,AACE,GAAU,AAACkB,6CAAE+5C,qBAAcv6C;AAA3B;AAAA,AACE,uBAAA,2CAAA,+EAAA,7IAAMV,6HAAmB+E,0FACMrE;AAD/B,AAEE,AAACiR,gDAA0B3R;;;AALnC;;AADF;AAAA,gBAAA,AAAAiH,eAAAwzC;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;AAFF,IAAAzpC,0BAAA,AAAAC,2BAAAN;IAAAO,2BAAA,AAAAC,sDAAA,4GAAAH;IAAAI,gCAAA,AAAApK,gBAAA,AAAAuE,4CAAA,2DAAAyF;IAAAK,+BAAA,AAAA7F,+CAAA0F,yBAAA,AAAA,qGAAAN;IAAAU,oCAAA,AAAAjD,uGAAA,AAAAyB,+CAAAc,2BAAA,wEAAAQ;AAAA,AAAA,GAAA,AAAA5K,cAAA6K;AAAA,AAAA,oBAAA,AAAA,kHAAAT;AAAA;AAAA,AAAA,IAAAW,+BAAA,AAAAC,oDAAAH,6BAAAC;AAAA,AAAA,2CAAA,0DAAAD,6BAAA,2DAAAD,8BAAA,+DAAAG;;;AAAA;UAAA,AAAA,CAAAZ,8DAAAwpC;;;AASA,IAAMp1C,WAAS,AAACiC,gBAAM2c;IAChBnB,YAAU,iBAAA3d,mBAAI,AAAC4d;AAAL,AAAA,oBAAA5d;AAAAA;;AAAA;;;AADhB,AAGE,IAAA9E,qBAAyB,AAACE;AAA1B,AAAA,oBAAAF;AAAA,AAAA,oBAAAA,hBAAW2iB;AAAX,AACE,GAAM,AAACxhB,6CAAE,AAAA,6FAAawhB,eAAe3d;AAArC,AACE,OAACqE,uEAAYsZ,cACAF,UACA,AAACriB;;AAHhB;;;AADF;;;AAbJ;;;AAmBJ,+CAAA,/CAAM+6C,sGAAiBn2C;AAAvB,AACE,oBAAM,AAAC6zC,yEAAa7zC;AAApB,AACE,oBAAU,AAACi1C;AAAX;AAAA,AACE,mDAAA,oGAAA,vJAACC,sIAAuBl1C;;;AAF5B;;AAGA,yDAAA,lDAACo2C,yCAA2Bp2C;;AAE9B,6CAAA,7CAAMq2C,kGAAer2C;AAArB,AACE,oBAAU,AAACi1C;AAAX;;AAAA,AACE,mDAAA,oGAAA,vJAACC,sIAAuBl1C;;AACxB,yDAAA,lDAACo2C,yCAA2Bp2C;;;AAEhC,AAAA,uCAAA,+CAAAvB,tFAAM83C;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA33C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qEAAA,rEAAM23C,gFACFrkB;AADJ,AACO,4EAAA,rEAACskB,mEAAQtkB;;;AADhB,CAAA,qEAAA,rEAAMqkB,gFAEFrkB,EAAEukB;AAFN,AAGG,AAACvgB,mBAAUhE;;AACX,oBACE,AAACvM;AACD,IAAA3qB,qBAAoB,AAAA,6FAAa,AAACE;AAAlC,AAAA,oBAAAF;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,OAACq2C,2CAAcr2C;;AADjB;;;AAFF,oBAKE,AAACinB;AACD,AACE,8CACK,AAACzgB,4CAAI,WAAKkwC,rGAIVC;AAJK,AACE,kDAAA,iBAAI,oBAAA,pBAACh/B,gBAAS++B,jCACV3mC,3CACAsmC;GAJX,AAACv/B;;AAMN,IAAAxX,oBAAKm3C;AAAL,AAAA,oBAAAn3C;AAAsB,OAAC4D;;AAAvB5D;;;AAbJ,AAgBE,IAAMs3C,oBAAkB,8CAAA,9CAAC1C;IACnB2C,YAAU,iBAAA/2C,mBAAI,AAACyC,8CAAMu0C,cAAI,4CAAA,5CAACtwC,4GAAiBowC;AAAjC,AAAA,oBAAA92C;AAAAA;;AAAA;;;AADhB,AAEE,YAAA,RAAOoJ;;AAAP,AACE,GAAI,CAAGA,QAAM2tC;AAAb;;AAEE,IAAME,iGACsB,AAAC/wC,+CAAO,7HACR,AAACA,+CAAOqJ;kBADKkuB;AAAL,AAAQ,OAACphC,6CAAE,AAAA,8FAAcohC,GAAGr0B;;CADpC0tC;AAA5B,AAGE,GAAI,AAACI,uBAAOD;AACV,gBAAO,SAAA,RAAK7tC;;;;AACZ,IAAA+tC,cAAA,AAAAx1C,cAA6Bs1C;IAA7BG,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,IAAAE,cAAA,AAAAH,mDAAAE;IAAAC,kBAAA,AAAAz6C,4BAAAy6C;WAAA,AAAAx6C,4CAAAw6C,gBAAA,nEAAsBpuC;AAAtB,AAAA,AACE,AAACotC,2CAAcptC;;AADjB;AAAA,gBAAAguC;gBAAAC;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAAp8C,qBAAA,AAAAyG,cAAAw1C;AAAA,AAAA,GAAAj8C;AAAA,AAAA,IAAAi8C,kBAAAj8C;AAAA,AAAA,GAAA,AAAA6G,6BAAAo1C;AAAA,IAAAn1C,kBAAA,AAAAC,sBAAAk1C;AAAA,AAAA,gBAAA,AAAAj1C,qBAAAi1C;gBAAAn1C;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,IAAAw1C,cAAA,AAAAr1C,gBAAAg1C;IAAAK,kBAAA,AAAA16C,4BAAA06C;WAAA,AAAAz6C,4CAAAy6C,gBAAA,nEAAsBruC;AAAtB,AAAA,AACE,AAACotC,2CAAcptC;;AADjB;AAAA,gBAAA,AAAA/G,eAAA+0C;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;;;;;;;;;AA9Bf,CAAA,+DAAA,/DAAMV;;AAAN,AAiCA,AAAA,yCAAA,iDAAA93C,1FAAM+4C;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA54C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uEAAA,vEAAM44C,kFACFtlB;AADJ,AACO,8EAAA,vEAACulB,qEAAUvlB;;;AADlB,CAAA,uEAAA,vEAAMslB,kFAEFtlB,EAAEukB;AAFN,AAGG,oBAAMvkB;AAAN,AAAQ,AAACgE,mBAAUhE;;AAAnB;;AACA,oBACE,AAACvM;AACD,IAAA3qB,qBAAoB,AAAA,6FAAa,AAACE;AAAlC,AAAA,oBAAAF;AAAA,AAAA,eAAAA,XAAWgF;AAAX,AACE,OAACm2C,6CAAgBn2C;;AADnB;;;AAFF,oBAKE,AAACinB;AACD,AACE,8CACK,AAACzgB,4CAAI,WAAKkwC,rGAIVC;AAJK,AACE,oDAAA,iBAAI,oBAAA,pBAACh/B,gBAAS++B,jCACV3mC,7CACAomC;GAJX,AAACr/B;;AAMN,IAAAxX,oBAAKm3C;AAAL,AAAA,oBAAAn3C;AAAsB,OAAC4D;;AAAvB5D;;;AAbJ,AAiBE,IAAMs3C,oBACA,8CAAA,2CAAA,8DAAA,vJAAC1C;IACD2C,YAAU,iBAAA/2C,mBAAI,AAACyC,8CAAMu0C,cAAI,4CAAA,5CAACtwC,4GAAiBowC;AAAjC,AAAA,oBAAA92C;AAAAA;;AAAA;;;AAFhB,AAGE,IAAOoJ,QAAM2tC;;AAAb,AACE,GAAI,WAAA,VAAO3tC;AAAX;;AAEE,IAAMwuC,qBAGK,AAAC1xC,+CAAO;kBAAKu3B;AAAL,AAAQ,OAACsW,yEAAa,AAAA,6FAAatW;;CAD3C,AAACv3B,+CAAO;kBAAKu3B;AAAL,AAAQ,OAACphC,6CAAE,AAAA,8FAAcohC,GAAGr0B;;CADpC0tC;AADX,AAIE,GAAI,AAACI,uBAAOU;AACV,gBAAO,SAAA,RAAKxuC;;;;AACZ,IAAAyuC,cAAA,AAAAl2C,cAA6Bi2C;IAA7BE,gBAAA;IAAAC,gBAAA;IAAAC,YAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,YAAAD;AAAA,IAAAE,cAAA,AAAAH,mDAAAE;IAAAC,kBAAA,AAAAn7C,4BAAAm7C;WAAA,AAAAl7C,4CAAAk7C,gBAAA,nEAAsB9uC;AAAtB,AAAA,AACE,AAACktC,6CAAgBltC;;AADnB;AAAA,gBAAA0uC;gBAAAC;gBAAAC;gBAAA,CAAAC,YAAA;;;;;;;AAAA,IAAA98C,qBAAA,AAAAyG,cAAAk2C;AAAA,AAAA,GAAA38C;AAAA,AAAA,IAAA28C,kBAAA38C;AAAA,AAAA,GAAA,AAAA6G,6BAAA81C;AAAA,IAAA71C,kBAAA,AAAAC,sBAAA41C;AAAA,AAAA,gBAAA,AAAA31C,qBAAA21C;gBAAA71C;gBAAA,AAAA9F,gBAAA8F;gBAAA;;;;;;;AAAA,IAAAk2C,cAAA,AAAA/1C,gBAAA01C;IAAAK,kBAAA,AAAAp7C,4BAAAo7C;WAAA,AAAAn7C,4CAAAm7C,gBAAA,nEAAsB/uC;AAAtB,AAAA,AACE,AAACktC,6CAAgBltC;;AADnB;AAAA,gBAAA,AAAA/G,eAAAy1C;gBAAA;gBAAA;gBAAA;;;;;;;;AAAA;;;;;;;;;;;;;;AAjCf,CAAA,iEAAA,jEAAMH;;AAAN,AAoCA,AAAA,6CAAA,qDAAA/4C,lGAAMy5C;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAt5C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAMs5C;AAAN,AAEG,gFAAA,zEAACC;;;AAFJ,CAAA,2EAAA,3EAAMD,sFAGFl4C;AAHJ,AAIG,IAAMqB,SAAO,8CAAA,2CAAA,qEAAA,MAAA,+DAAA,KAAA,xOAAC6yC,ySAEmCl0C;IAC3C4e,YAAU,4CAAA,5CAACpY,2GAAgBnF;AAHjC,AAIE,oEAAA,7DAAC6zC,mDAAsBt2B;;;AAR5B,CAAA,qEAAA,rEAAMs5B;;AAAN,AAUA,AAAA,2CAAA,mDAAAz5C,9FAAM45C;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAz5C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMy5C;AAAN,AAEG,8EAAA,vEAACC;;;AAFJ,CAAA,yEAAA,zEAAMD,oFAGFr4C;AAHJ,AAIG,IAAMqB,SAAO,8CAAA,2CAAA,qEAAA,MAAA,8DAAA,KAAA,vOAAC6yC,wSAEmCl0C;IAC3C4e,YAAU,4CAAA,5CAACpY,2GAAgBnF;AAHjC,AAIE,oEAAA,7DAAC6zC,mDAAsBt2B;;;AAR5B,CAAA,mEAAA,nEAAMy5B;;AAAN,AAUA,4CAAA,5CAAME;AAAN,AACE,IAAMC,sBAAc,AAACxB,uBAAO,8CAAA,2CAAA,qEAAA,MAAA,8DAAA,lOAAC9C;AAA7B,AAEE,GAAIsE;AACF,OAACL;;AACD,OAACG;;;AAEP,kDAAA,lDAAMG;AAAN,AAEE,IAAAtgC,qBAA0B,AAAC/c;AAA3B,AAAA,oBAAA+c;AAAA,uBAAAA,nBAASugC;AAAT,AACE,IAAMr9C,QAAM,AAACC,oBAAgBo9C;IACvBC,mBAAiB,AAACC,uCAA8Bv9C;IAChDgG,SAAO,AAAA+B,uBAAA,wCAAA,xCAAcu1C;AAF3B,AAGE,OAACt5B,wFAA4Che;;AAC/C,iSAAK,8CAAA,2CAAA,8DAAA,vJAAC6yC,lMACD,AAAC1tC,4CAAI,sFAAA,tFAAC8tB,6CAAKukB,2BAAuBtkB,5MAClClV;;;AAET,AAAA,yCAAA,iDAAA5gB,1FAAMs6C;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAn6C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uEAAA,vEAAMm6C;AAAN,AAEG,4EAAA,rEAACC;;;AAFJ,CAAA,uEAAA,vEAAMD,kFAGFE;AAHJ,AAIG,oBAAM,AAACtzB;AAAP,AACE,oBAAIszB;AACF,kDAAK,AAAA,6FAAa,AAAC/9C,xIACdkkB;;AACL,OAACkG;;;AAJL;;;;AAJH,CAAA,iEAAA,jEAAMyzB;;AAAN,AAUA,wEAAA,xEAAMG;AAAN,AAEE,IAAAl+C,qBAAoC,AAACo+C;AAArC,AAAA,oBAAAp+C;AAAA,AAAA,IAAAm+C,cAAAn+C;IAAAm+C,kBAAA,AAAAv8C,4BAAAu8C;YAAA,AAAAt8C,4CAAAs8C,gBAAA,pEAAmB7T;UAAnB,AAAAzoC,4CAAAs8C,gBAAA,lEAAyBp1C;WAAzB,AAAAlH,4CAAAs8C,gBAAA,nEAA6Br6C;AAA7B,AACE,IAAA9D,yBAAiB,iBAAAq+C,YAAA,mFAAA,+DAAsBv6C;AAAtB,AAAA,wGAAAu6C,wCAAAA,xIAAC10C,iDAAAA,4DAAAA;;AAAlB,AAAA,oBAAA3J;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,IAAMq+C,gBAAc,AAAA,kGAAgBr+C;IAC9B6B,SAAO,iBAAAgD,mBAAI,AAAA,iGAAe7E;AAAnB,AAAA,oBAAA6E;AAAAA;;AAAA;;;IACPy5C,iEAA+B,AAACnvB,yCAA2BttB,OAAOw8C,pFACnC,AAACp0C;AAHtC,AAIE,IAAAlK,yBAAiB,AAACi/B;AAAlB,AAAA,oBAAAj/B;AAAA,AAAA,YAAAA,RAAWK;AAAX,AACE,IAAAL,yBAAiC,0DAAA,1DAACY,oDAASP;AAA3C,AAAA,oBAAAL;AAAA,AAAA,4BAAAA,xBAAWw+C;AAAX,AACE,IAAMC,sBAAe,CAAK,mEAAA,nEAAC19C,6CAAKy9C,0BAAwBlU,mDAC9BiU,4BACA,AAACx9C,6CAAKy9C,sBAAsBz1C;AAFtD,AAGE,qFAAA,9EAAC21C,oDAAsCr+C,MAAMo+C;;AAJjD;;;AADF;;;AALJ;;;AADF;;;AAaF,2CAAA,3CAAME,8FACH35C;AADH,AAEE,oBAAMA;AAAN,AACE,OAACmf,oEAAwB,0DAAA,1DAAC1U,qHAAqB,4CAAKzK;;AADtD;;;AAGF,mDAAA,nDAAM45C,8GACH3+C,MAAM4+C;AADT,AAEE,oBAAM,iBAAAv6C,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAWu6C;;AAAXv6C;;;AAAN,AACE,IAAM8kB,QAAM,AAAC01B,qBAAW,CAAA,mDAAY,0DAAA,1DAACrvC,6HAA6B,4CAAKovC;IACjEr6C,UAAQ,4IAAA,5IAACyW,6BAAqB,AAAA,kGAAgBhb,OAAOmpB;AAD3D,AAEE,OAACiE,uEAAY,AAAChoB,kCACD,AAAA,6FAAapF,OACbuE;;AALjB;;;AAOF,sDAAA,tDAAMu6C,oHACH9+C,MAAM4+C;AADT,AAEE,oBAAM,iBAAAv6C,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAWu6C;;AAAXv6C;;;AAAN,AACE,IAAM8kB,QAAM,0DAAA,1DAAC3Z,qHAAqB,4CAAKovC;IACjCG,YAAU,iBAAAC,YAAA,mFAAA,+DAAwBJ;AAAxB,AAAA,4GAAAI,0CAAAA,9IAAC/5C,mDAAAA,8DAAAA;;IACXg6C,sNAAuB,iBAAAp6C,mBAAI,AAAA,kGAAgBk6C,pSAEpB,AAAC/0C,kDAAoC,AAAA,iGAAe+0C,vLACpD,AAAC90C;AAHD,AAAA,oBAAApF;AAAAA;;AAAA;;;IAIvBN,UAAQ,AAACyW,6BAAqB,AAAA,kGAAgBhb,OAAOmpB,MACvB81B;AAPpC,AAQE,OAAC7xB,uEAAY,AAAChoB,kCACD,AAAA,6FAAapF,OACbuE;;AAXjB;;;AAaF,uDAAA,vDAAM26C,sHACHl/C,MAAM4+C;AADT,AAEE,oBAAM,iBAAAv6C,oBAAKrE;AAAL,AAAA,oBAAAqE;AAAWu6C;;AAAXv6C;;;AAAN,AACE,IAAM8kB,QAAM,0DAAA,1DAAC3Z,qHAAqB,4CAAKovC;IACjCr6C,UAAQ,AAACyW,6BAAqB,AAAA,kGAAgBhb,OAAOmpB,MACvB,0DAAA,1DAAC3Z,+HACY,4CAAKovC;AAHtD,AAIE,OAACxxB,uEAAY,AAAChoB,kCACD,AAAA,6FAAapF,OACbuE;;AAPjB;;;AASF;;;;;;yDAAA,zDAAM46C,0HAKHn/C,MAAMyT;AALT,AAME,IAAA5O,mBACC,iBAAAR,oBACC,iBAAAQ,mBAAI,AAAA,mFAAO4O;AAAX,AAAA,oBAAA5O;AAAAA;;AAAmB,OAAA,qGAAgB4O;;;AADpC,AAAA,oBAAApP;AAAA,IAAAA,wBAEC,CAAI,wGAAA,vGAAK,AAAA,8FAAcrE,iBACnB,AAACo/C;AAHN,AAAA,GAAA/6C;AAKC,OAAC2C,gBAAM,AAAA,kGAAgB,iBAAAq4C,YAAW,AAAA,mFAAQr/C;AAAnB,AAAA,4GAAAq/C,0CAAAA,9IAACp6C,mDAAAA,8DAAAA;;;AALzBZ;;;AAAAA;;;AADD,AAAA,oBAAAQ;AAAAA;;AAOC,OAACuP,+BAAgBpU","names":["js/frontend","js/frontend.handler","js/frontend.handler.editor","js/frontend.handler.editor.*asset-uploading?","frontend.handler.editor/*asset-uploading?","cljs.core.atom","js/frontend.handler.editor.*asset-uploading-process","frontend.handler.editor/*asset-uploading-process","js/frontend.handler.editor.*selected-text","frontend.handler.editor/*selected-text","frontend.handler.editor/get-selection-and-format","temp__5720__auto__","block","frontend.state/get-edit-block","edit-id","frontend.state/get-edit-input-id","input","goog.dom/getElement","selection-start","frontend.util/get-selection-start","selection-end","frontend.util/get-selection-end","value","frontend.handler.editor.goog$module$goog$object.get","selection","cljs.core.not_EQ_","cljs.core.subs","cljs.core/count","p1__109719#","cljs.core.take_while","cljs.core._EQ_","p1__109720#","cljs.core/reverse","G__109729","clojure.string/trim","frontend.handler.editor/format-text!","pattern-fn","m","map__109732","cljs.core/--destructure-map","cljs.core.get","format","pattern","pattern-count","pattern-prefix","x__4336__auto__","y__4337__auto__","pattern-suffix","x__4339__auto__","y__4340__auto__","already-wrapped?","prefix","postfix","inner-value","G__109743","p1__109730#","new-value","frontend.state.set_edit_content_BANG_","frontend.util.cursor/set-selection-to","frontend.util.cursor/move-cursor-to","frontend.handler.editor/bold-format!","frontend.config/get-bold","frontend.handler.editor/italics-format!","frontend.config/get-italic","frontend.handler.editor/highlight-format!","frontend.config/get-highlight","frontend.handler.editor/strike-through-format!","frontend.config/get-strike-through","var_args","G__109749","frontend.handler.editor/html-link-format!","js/Error","frontend.handler.editor.html_link_format_BANG_","link","map__109751","vec__109752","cljs.core.nth","cur-pos","frontend.util.cursor/pos","empty-selection?","selection-link?","and__4251__auto__","frontend.util/starts-with?","content","forward-pos","frontend.config/get-empty-link-and-forward-pos","frontend.config/with-label-link","frontend.config/with-default-link","frontend.config/with-default-label","or__4253__auto__","frontend.handler.editor/open-block-in-sidebar!","block-id","G__109756","frontend.db/entity","page?","frontend.state/sidebar-add-block!","frontend.state/get-current-repo","frontend.handler.editor/reset-cursor-range!","node","frontend.state/set-cursor-range!","frontend.util/caret-range","frontend.handler.editor/restore-cursor-pos!","id","markup","cursor-range","frontend.state/get-cursor-range","pos","frontend.state/get-editor-last-pos","frontend.diff/find-position","frontend.state/clear-editor-last-pos!","frontend.handler.editor/highlight-block!","block-uuid","blocks","cljs.core.array_seq","js/document.getElementsByClassName","seq__109758","cljs.core/seq","chunk__109759","count__109760","i__109761","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","dommy.core.add_class_BANG_","frontend.handler.editor/unhighlight-blocks!","G__109763","cljs.core.repeat","cljs.core.apply","cljs.core/concat","seq__109764","chunk__109765","count__109766","i__109767","goog.dom.classes/remove","frontend.handler.editor/get-edit-input-id-with-block-id","first-block","frontend.util/get-first-block-by-id","clojure.string/replace","frontend.handler.editor/clear-selection!","frontend.util/select-unhighlight!","dommy.utils/->Array","js/document","frontend.state/clear-selection!","p__109771","vec__109772","frontend.handler.editor/text-range-by-lst-fst-line","direction","G__109775","cljs.core/Keyword","last-new-line","clojure.string.last_index_of","end","clojure.string/split-lines","G__109777","frontend.handler.editor/edit-block!","p__109778","map__109779","frontend.handler.editor.edit_block_BANG_","custom-content","tail-len","move-cursor?","frontend.config/publishing?","G__109780","frontend.db/pull","edit-input-id","cljs.core/uuid?","content-length","text-range","cljs.core/vector?","frontend.util.property/remove-built-in-properties","frontend.util.drawer/remove-logbook","frontend.state.set_editing_BANG_","frontend.handler.editor/another-block-with-same-id-exists?","current-id","logseq.graph-parser.util/uuid-string?","cljs.core/uuid","G__109781","frontend.handler.editor/attach-page-properties-if-exists!","map__109782","page-properties","str->page","n","frontend.format.block.page_name__GT_map","refs","cljs.core.filter","p__109783","vec__109784","_","v","cljs.core/coll?","cljs.core/vals","cljs.core/set","cljs.core.map","cljs.core.concat","frontend.util/distinct-by","tags","alias","page-tx","retract-attributes","cljs.core.mapv","attribute","cljs.core.remove","cljs.core/nil?","tx","G__109787","cljs.core.assoc","cljs.core.conj","frontend.handler.editor/remove-non-existed-refs!","x","frontend.handler.editor/with-marker-time","new-marker","old-marker","frontend.state/enable-timetracking?","e109788","logbook-exists?","frontend.util.drawer/get-logbook","clojure.string/lower-case","cljs.core/name","new-content","cljs.core/not","frontend.util.clock/clock-in","cljs.core/contains?","frontend.util.clock/clock-out","_e","frontend.handler.editor/with-timetracking","cljs.core/last","logseq.graph-parser.util/safe-re-find","frontend.util.marker/marker-pattern","p__109789","map__109790","frontend.handler.editor/wrap-parse-block","left","page","uuid","level","pre-block?","vec__109791","G__109794","cljs.core.merge","frontend.format.block.parse_title_and_body","properties","real-content","frontend.util.property/with-built-in-properties","frontend.util.drawer/with-logbook","first-block?","ast","frontend.format.mldoc/->edn","logseq.graph_parser.mldoc.default_config","first-elem-type","cljs.core/ffirst","first-elem-meta","cljs.core/second","properties?","markdown-heading?","block-with-title?","frontend.format.mldoc/block-with-title?","clojure.string/triml","frontend.util.format","content'","frontend.config/get-block-pattern","cljs.core/dissoc","frontend.db-schema/retract-attributes","frontend.format.block.parse_block","cljs.core.dissoc","cljs.core.update","new-properties","cljs.core/select-keys","frontend.util.property/built-in-properties","p__109795","map__109796","frontend.handler.editor/save-block-inner!","js/goog.DEBUG","k__44398__auto__","js/console","res__44399__auto__","transact-data__61870__auto__","frontend.modules.outliner.core/*transaction-data*","opts__61871__auto__","*transaction-data*-orig-val__109797","*transaction-data*-temp-val__109798","cljs.core/transient","r__61872__auto__","cljs.core/persistent!","tx__61873__auto__","cljs.core.mapcat","tx-meta__61874__auto__","all-tx__61875__auto__","opts#__61876__auto__","result__61877__auto__","frontend.modules.outliner.datascript/transact!","*transaction-data*-orig-val__109800","*transaction-data*-temp-val__109801","frontend.modules.outliner.core/save-block!","title","cljs.core.get_in","old-page-name","G__109799","G__109802","clojure.string/blank?","frontend.util/page-name-sanity-lc","frontend.state/pub-event!","G__109804","frontend.handler.editor/save-block-if-changed!","p__109805","map__109806","frontend.handler.editor.save_block_if_changed_BANG_","force?","opts","map__109807","repo","frontend.state.get_preferred_format","G__109808","G__109809","cljs.core/map?","frontend.handler.notification.show_BANG_","content-changed?","frontend.handler.editor/compute-fst-snd-block-text","fst-block-text","snd-block-text","p__109810","map__109811","frontend.handler.editor/outliner-insert-block!","config","current-block","new-block","sibling?","keep-uuid?","replace-empty-target?","ref-query-top-block?","has-children?","G__109812","frontend.db/has-children?","cljs.core/boolean?","frontend.util/collapsed?","*transaction-data*-orig-val__109814","*transaction-data*-temp-val__109815","G__109813","G__109816","frontend.handler.editor/save-current-block!","frontend.modules.outliner.core/insert-blocks!","frontend.handler.editor/block-self-alone-when-insert?","current-page","frontend.state/get-current-page","medley.core/uuid","p__109817","map__109818","frontend.handler.editor/insert-new-block-before-block-aux!","_value","ok-handler","new-m","frontend.db/new-block-id","prev-block","left-block","G__109819","p__109820","p__109821","map__109822","map__109823","frontend.handler.editor/insert-new-block-aux!","_opts","vec__109824","block-self?","next-block","frontend.util/set-change-value","frontend.handler.editor/clear-when-saved!","frontend.state/clear-editor-show-state!","frontend.commands/restore-state","frontend.handler.editor/get-state","vec__109827","map__109830","on-hide","block-parent-id","sidebar?","frontend.state/get-editor-args","G__109831","G__109833","frontend.handler.editor/insert-new-block!","state","frontend.handler.editor.insert_new_block_BANG_","_state","block-value","frontend.state/get-editor-op","frontend.state/set-editor-op!","map__109834","vec__109835","G__109838","insert-fn","G__109839","G__109840","G__109841","G__109842","last-block","p__109844","map__109845","frontend.handler.editor/api-insert-new-block!","before?","custom-uuid","edit-block?","G__109846","G__109847","vec__109848","children","frontend.db/sort-by-left","last-block-id","G__109851","frontend.db/get-page-format","frontend.util.property/insert-properties","block-m","first-child?","p1__109843#","cljs.core/=","G__109852","G__109853","G__109854","js/setTimeout","G__109856","frontend.handler.editor/insert-first-page-block-if-not-exists!","page-title","frontend.handler.editor.insert_first_page_block_if_not_exists_BANG_","frontend.handler.editor/properties-block","frontend.format.block/get-page-refs-from-properties","cljs.core/keys","p__109857","map__109858","frontend.handler.editor/update-timestamps-content!","repeated?","marker","scheduled-ast","frontend.handler.block/get-scheduled-ast","deadline-ast","frontend.handler.block/get-deadline-ast","G__109859","frontend.handler.repeated/repeated?","ts","frontend.handler.repeated.timestamp__GT_text","frontend.handler.repeated/next-timestamp-text","cljs.core.reduce","p__109860","vec__109861","old","new","clojure.string/replace-first","G__109864","frontend.util.drawer/insert-drawer","frontend.date/get-date-time-string-3","p__109865","map__109866","frontend.handler.editor/check","input-id","clojure.string/ends-with?","p__109867","map__109868","frontend.handler.editor/uncheck","frontend.state/get-preferred-workflow","frontend.handler.editor/get-selected-blocks","cljs.core.distinct","frontend.state/get-selection-blocks","G__109870","frontend.handler.editor/set-marker","p__109871","map__109872","frontend.handler.editor.set_marker","vec__109873","frontend.util.marker/cycle-marker","frontend.handler.editor/cycle-todos!","ids","p1__109876#","dommy.core/attr","seq__109877","chunk__109878","count__109879","i__109880","G__109883","G__109884","frontend.handler.editor/cycle-todo!","temp__5718__auto__","vec__109885","current-input","frontend.state/get-edit-content","G__109888","new-pos","frontend.commands/compute-pos-delta-when-change-marker","p__109889","map__109890","frontend.handler.editor/set-priority","priority","new-priority","frontend.handler.editor/cycle-priority!","G__109891","frontend.util.priority/cycle-priority-state","frontend.util.priority/add-or-update-priority","p__109892","map__109893","frontend.handler.editor/delete-block-aux!","_block","children?","G__109894","G__109895","G__109896","*transaction-data*-orig-val__109897","*transaction-data*-temp-val__109898","frontend.modules.outliner.core/delete-blocks!","frontend.handler.editor/move-to-prev-block","sibling-block","sibling-block-id","G__109899","G__109900","G__109901","original-content","frontend.util/trim-safe","value'","logseq.graph-parser.utf8/length","logseq.graph-parser.utf8/encode","G__109903","frontend.handler.editor/delete-block!","frontend.handler.editor.delete_block_BANG_","delete-children?","map__109904","page-id","G__109905","page-blocks-count","frontend.db/get-page-blocks-count","G__109906","G__109907","frontend.modules.outliner.tree/-get-left","frontend.modules.outliner.core/block","left-has-children?","G__109908","block-parent","frontend.util/get-prev-block-non-collapsed-non-embed","frontend.handler.editor/delete-blocks!","block-uuids","dom-blocks","uuid->dom-block","cljs.core/zipmap","*transaction-data*-orig-val__109909","*transaction-data*-temp-val__109910","frontend.handler.editor/batch-set-block-property!","col","*transaction-data*-orig-val__109931","*transaction-data*-temp-val__109932","seq__109911","chunk__109912","count__109913","i__109914","vec__109923","vec__109927","seq__109933","chunk__109934","count__109935","i__109936","vec__109945","vec__109949","key","G__109926","G__109930","G__109948","G__109952","frontend.util.property.remove_property","frontend.util.property.insert_property","frontend.util.property/remove-empty-properties","input-pos","frontend.state/get-edit-pos","editing-block","frontend.handler.editor/remove-block-property!","cljs.core.keyword","frontend.handler.editor/set-block-property!","frontend.handler.editor/set-block-query-properties!","all-properties","add?","G__109953","query-properties","frontend.handler.common/safe-read-string","cljs.core/vec","frontend.handler.editor/set-block-timestamp!","G__109954","map__109955","logseq.graph-parser.text/remove-timestamp","logseq.graph-parser.text/add-timestamp","frontend.handler.editor/set-blocks-id!","block-ids","G__109956","G__109959","frontend.handler.editor/copy-block-ref!","p1__109957#","frontend.handler.editor.copy_block_ref_BANG_","tap-clipboard","frontend.util.copy_to_clipboard_BANG_","frontend.handler.editor/select-block!","frontend.state.exit_editing_and_set_selected_blocks_BANG_","frontend.handler.editor/compose-copied-blocks-contents","frontend.db.utils.pull_many","top-level-block-uuids","frontend.modules.outliner.core/get-top-level-blocks","frontend.handler.export/export-blocks-as-markdown","frontend.state/get-export-block-text-indent-style","cljs.core.into","frontend.state/get-export-block-text-remove-options","frontend.handler.editor/copy-selection-blocks","p1__109960#","cljs.core.keep","G__109961","frontend.handler.common/copy-to-clipboard-without-id-property!","frontend.state/set-copied-blocks","frontend.handler.editor/copy-block-refs","selected-blocks","p1__109962#","first-root-level-index","p__109963","vec__109964","cljs.core.map_indexed","cljs.core/vector","root-level","adjusted-blocks","p__109967","map__109968","index","cljs.core/deref","cljs.core/reset!","G__109969","copy-str","G__109970","p__109971","map__109972","pred__109973","expr__109974","clojure.string.join","frontend.handler.editor/copy-block-embeds","p1__109976#","ids-str","G__109977","frontend.handler.editor/get-selected-toplevel-block-uuids","p1__109978#","blocks*","G__109979","frontend.handler.editor/cut-selection-blocks","copy?","p1__109980#","lookup-refs","G__109981","G__109982","G__109983","frontend.db/pull-many","frontend.state/set-copied-full-blocks","frontend.handler.editor/url-regex","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.handler.editor/extract-nearest-link-from-text","seq109986","G__109987","G__109988","self__4851__auto__","text","additional-patterns","vec__109989","page-pattern","block-pattern","tag-pattern","page-matches","frontend.util/re-pos","block-matches","tag-matches","additional-matches","p1__109984#","matches","match","cljs.core.sort_by","p__109992","vec__109993","start-pos","end-pos","cljs.core/>","p1__109985#","cljs.core/some","cljs.core/re-find","clojure.string/starts-with?","frontend.handler.editor/get-nearest-page-or-url","frontend.handler.editor.extract_nearest_link_from_text","frontend.handler.editor/get-nearest-page","frontend.handler.editor/follow-link-under-cursor!","js/window.open","page-name","frontend.db.model.get_redirect_page_name","frontend.state/clear-edit!","frontend.handler.editor/open-link-in-sidebar!","block?","frontend.db/get-page","frontend.handler.editor/zoom-in!","frontend.state/editing?","G__109996","frontend.handler.route.redirect_to_page_BANG_","js/window.history.forward","frontend.handler.editor/zoom-out!","frontend.db/get-block-parent","G__109997","G__109998","js/window.history.back","frontend.handler.editor/cut-block!","G__109999","md-content","frontend.handler.editor/clear-last-selected-block!","frontend.state/drop-last-selection-block!","frontend.handler.editor/highlight-selection-area!","end-block","start-block","frontend.state/get-selection-start-block","frontend.util/get-nodes-between-two-nodes","frontend.util/get-direction-between-two-nodes","frontend.handler.editor/select-block-up-down","frontend.state/get-editing-block-dom-id","frontend.state/selection?","f","frontend.util/get-prev-block-non-collapsed","frontend.util/get-next-block-non-collapsed-skip","element","G__110000","frontend.state/conj-selection-block!","frontend.state/get-selection-direction","first-last","G__110001","G__110002","frontend.handler.editor/on-select-block","_event","frontend.handler.editor/save-block-aux!","G__110004","frontend.handler.editor/save-block!","p__110005","map__110006","block-or-uuid","frontend.db.model/query-block-by-uuid","frontend.handler.editor.save_block_BANG_","G__110007","G__110008","G__110010","p__110011","map__110012","frontend.handler.editor.save_current_block_BANG_","skip-properties?","frontend.state/editor-in-composition?","frontend.commands/*show-commands","frontend.commands/*show-block-commands","frontend.state/get-editor-show-page-search?","frontend.state/get-editor-show-page-search-hashtag?","frontend.state/get-editor-show-block-search?","frontend.state/get-editor-show-date-picker?","frontend.state/get-editor-show-template-search?","frontend.state/get-editor-show-input","e110013","db-block","G__110014","elem","db-content","db-content-without-heading","logseq.graph_parser.util.safe_subs","frontend.db.model/top-block?","frontend.util.thingatpt.properties_at_point","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.editor/clean-content!","logseq.graph_parser.text.remove_level_spaces","frontend.util.property/remove-properties","p__110015","map__110016","frontend.handler.editor/insert-command!","command-output","restore?","option","frontend.commands/insert!","frontend.commands/handle-steps","cljs.core/fn?","s","restore-slash-caret-pos?","cljs.core/seq?","frontend.handler.editor/get-asset-file-link","url","file-name","image?","pdf?","G__110017","frontend.handler.editor/ensure-assets-dir!","repo-dir","frontend.config/get-repo-dir","assets-dir","promesa.core.then","frontend.fs/mkdir-if-not-exists","frontend.handler.editor/get-asset-path","filename","promesa.core.bind","___42626__auto__","p__110018","vec__110019","promesa.protocols/-promise","path","js/module$node_modules$path$path.join","frontend.mobile.util/native-android?","js/encodeURI","js/decodeURI","G__110024","frontend.handler.editor/save-assets!","files","p__110025","vec__110026","frontend.handler.editor.save_assets_BANG_","file-base","js/Date","dir","gen-filename","promesa.core/all","iter__4652__auto__","s__110030","cljs.core/LazySeq","c__4650__auto__","size__4651__auto__","b__110032","cljs.core/chunk-buffer","i__110031","vec__110033","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__110029","vec__110040","cljs.core/cons","cljs.core/rest","file","vec__110036","vec__110043","G__110039","G__110046","frontend.util/node-path","ext","last-dot-index","frontend.util/electron?","from","p1__110022#","js/window.apis.copyFileToAssets","promesa.core/resolved","js/File","frontend.fs/write-file!","js/frontend.handler.editor.*assets-url-cache","frontend.handler.editor/*assets-url-cache","frontend.handler.editor/make-asset-url","frontend.mobile.util/is-native-platform?","frontend.mobile.util/convert-file-src","handle-path","cached-url","handle","frontend.idb/get-item","js/URL.createObjectURL","cljs.core.swap_BANG_","cljs.core/assoc","p__110047","map__110048","frontend.handler.editor/delete-asset-of-block!","href","full-text","local?","delete-local?","frontend.fs/unlink!","frontend.config/get-repo-path","frontend.handler.editor/resolve-relative-path","file-path","current-file","frontend.db.model/get-block-file-path","G__110049","G__110050","G__110051","frontend.config/get-pages-directory","frontend.util/get-relative-path","frontend.handler.editor/upload-asset","uploading?","drop-or-paste?","frontend.config/local-db?","cljs.core.js__GT_clj","res","vec__110052","asset-file-name","full-file-path","frontend.util/ext-of-image?","frontend.state.get_editor_command_trigger","promesa.core.finally$","frontend.image/upload","file-type","frontend.handler.image/request-presigned-url","signed-url","e","process","frontend.handler.editor/autopair-map","frontend.handler.editor/reversed-autopair-map","frontend.handler.editor/autopair-when-selected","frontend.handler.editor/delete-map","frontend.handler.editor/autopair","_format","_option","selected","frontend.util/get-selected-text","vec__110055","_pos","frontend.commands/simple-replace!","prefix-pos","G__110058","frontend.commands/handle-step","frontend.commands/*slash-caret-pos","frontend.util.cursor.get_caret_pos","frontend.handler.editor/surround-by?","before","logseq.graph-parser.text/surround-by?","frontend.handler.editor/wrapped-by?","logseq.graph-parser.text/wrapped-by?","frontend.handler.editor/get-matched-pages","q","editing-page","pages","frontend.search.page_search","p","frontend.handler.editor/get-matched-blocks","block-parents","G__110059","G__110060","G__110061","frontend.db/get-block-parents","cljs.core.comp","cljs.core/str","current-and-parents","clojure.set.union","result","frontend.search/block-search","h","frontend.handler.editor/get-matched-templates","frontend.search.template_search","frontend.handler.editor/get-matched-commands","e110062","edit-content","last-slash-caret-pos","last-command","frontend.util/nth-safe","frontend.commands/*initial-commands","frontend.commands.get_matched_commands","js/console.error","frontend.handler.editor/get-matched-block-commands","e110063","frontend.commands/*angle-bracket-caret-pos","frontend.commands/block-commands-map","_error","frontend.handler.editor/auto-complete?","frontend.handler.editor/get-current-input-char","frontend.handler.editor/move-up-down","up?","event","frontend.util/stop","edit-block-id","move-nodes","*transaction-data*-orig-val__110064","*transaction-data*-temp-val__110065","frontend.modules.outliner.core/move-blocks-up-down!","block-node","G__110066","frontend.state/get-selection-block-ids","G__110067","G__110068","G__110069","frontend.handler.editor/get-selected-ordered-blocks","G__110070","G__110071","G__110072","frontend.handler.editor/on-tab","*transaction-data*-orig-val__110073","*transaction-data*-temp-val__110074","frontend.modules.outliner.core/indent-outdent-blocks!","frontend.handler.editor/get-link","label","G__110075","frontend.handler.editor/get-image-link","G__110076","frontend.util/format","frontend.handler.editor/handle-command-input","command","G__110077","map__110078","map__110079","frontend.state/set-editor-show-input!","saved-cursor","frontend.handler.editor/get-search-q","current-pos","frontend.state/sub","frontend.handler.editor/close-autocomplete-if-outside","between","clojure.string/includes?","frontend.state/set-editor-show-block-search!","frontend.state/set-editor-show-page-search!","frontend.state/set-editor-show-page-search-hashtag!","frontend.handler.editor/resize-image!","metadata","full_text","size","new-meta","image-part","clojure.string.split","new-full-text","cljs.core.pr_str","G__110080","frontend.handler.editor/mark-last-input-time!","frontend.state/set-editor-last-input-time!","frontend.util/time-ms","frontend.db/clear-repo-persistent-job!","js/frontend.handler.editor.*auto-save-timeout","frontend.handler.editor/*auto-save-timeout","frontend.handler.editor/edit-box-on-change!","frontend.util/evalue","js/clearTimeout","frontend.state/input-idle?","frontend.handler.editor/handle-last-input","frontend.state/get-input","last-input-char","frontend.commands/angle-bracket","frontend.handler.editor/block-on-chosen-handler","_input","chosen","_click?","uuid-string","frontend.util/replace-first","frontend.handler.editor/block-non-exist-handler","frontend.util.cursor.move_cursor_forward","frontend.handler.editor/paste-block-cleanup","exclude-properties","content-update-fn","G__110081","frontend.handler.editor/edit-last-block-after-inserted!","last-block'","G__110082","p__110083","map__110084","frontend.handler.editor/paste-blocks","target-block","G__110085","G__110086","G__110087","G__110088","G__110089","*transaction-data*-orig-val__110090","*transaction-data*-temp-val__110091","blocks'","frontend.handler.editor/block-tree->blocks","tree-vec","frontend.modules.outliner.core.tree_vec_flatten","props","content*","frontend.format.block/extract-blocks","fst-block","frontend.handler.editor/insert-block-tree-after-target","target-block-id","frontend.format.block/with-parent-and-left","G__110093","frontend.handler.editor/insert-template!","p__110094","map__110095","element-id","db-id","frontend.handler.editor.insert_template_BANG_","target","cljs.core/integer?","frontend.db.model/get-template-by-name","template-including-parent?","frontend.db/get-block-and-children","root-block","blocks-exclude-root","b","sorted-blocks","frontend.modules.outliner.tree/sort-blocks","cljs.core.drop","frontend.template/resolve-dynamic-template!","G__110096","sibling?'","G__110097","*transaction-data*-orig-val__110098","*transaction-data*-temp-val__110099","frontend.handler.editor/template-on-chosen-handler","p__110100","vec__110101","_template","p__110104","map__110105","map__110106","frontend.handler.editor/parent-is-page?","parent","frontend.modules.outliner.tree/satisfied-inode?","frontend.handler.editor/outdent-on-enter","parent-node","frontend.modules.outliner.tree/-get-parent","*transaction-data*-orig-val__110107","*transaction-data*-temp-val__110108","frontend.modules.outliner.core/move-blocks!","p__110109","map__110110","frontend.handler.editor/last-top-level-child?","current-node","entity","G__110111","G__110112","frontend.modules.outliner.tree/-get-parent-id","frontend.handler.editor/insert","insertion","selected-start","selected-end","s1","s2","frontend.handler.editor/keydown-new-line","frontend.handler.editor/dwim-in-properties","map__110113","property-key","frontend.util.thingatpt.property_key_at_point","org?","move-to-pos","G__110114","frontend.util.cursor/move-cursor-to-line-end","frontend.util.cursor.move_cursor_backward","frontend.util.cursor/move-cursor-to-end","frontend.util.property/property-key-exist?","G__110115","G__110116","G__110117","frontend.handler.editor/delete-and-update","frontend.util.cursor/line-beginning-pos","frontend.util.cursor/line-end-pos","frontend.util.property/goto-properties-end","p__110118","map__110119","frontend.handler.editor/toggle-list-checkbox","old-item-content","new-item-content","frontend.handler.editor/dwim-in-list","map__110120","item","frontend.util.thingatpt.list_item_at_point","map__110121","full-content","indent","bullet","checkbox","ordered","next-bullet","G__110122","G__110123","G__110124","after","cursor-in-item-content?","after-lists-str","lines","after-lists-str'","frontend.util.list/re-order-items","cursor'","frontend.handler.editor/toggle-list!","map__110130","G__110131","new-unordered-bullet","G__110132","map__110133","list-beginning-pos","frontend.util.list.list_beginning_pos","list-end-pos","frontend.util.list.list_end_pos","list","items","splitter-reg","items-without-bullet","p1__110125#","new-list","p1__110126#","p1__110127#","p2__110128#","index-of-current-item","numbers-length","p1__110129#","cljs.core.subvec","pos-diff","prev-item","frontend.util.list.get_prev_item","frontend.util.cursor/move-cursor-down","frontend.util.cursor/move-cursor-to-line-beginning","map__110134","current-bullet","frontend.handler.editor/toggle-page-reference-embed","parent-id","map__110135","page-ref-fn","bounds","backward-pos","frontend.commands/simple-insert!","map__110136","embed-ref","frontend.util.thingatpt.embed_macro_at_point","map__110137","raw-content","start","page-ref","frontend.util.thingatpt.page_ref_at_point","map__110138","frontend.handler.editor/toggle-block-reference-embed","map__110139","block-ref-fn","map__110140","frontend.util.thingatpt.block_ref_at_point","map__110141","frontend.handler.editor/keydown-new-block","map__110142","has-right?","frontend.modules.outliner.tree/-get-right","thing-at-point","frontend.util.thingatpt/get-setting","frontend.util.thingatpt.admonition_AMPERSAND_src_at_point","frontend.util.thingatpt.markup_at_point","frontend.util.cursor/beginning-of-line?","G__110143","right-bound","clojure.string.index_of","G__110144","frontend.state/into-code-editor-mode!","frontend.handler.editor/keydown-new-block-handler","frontend.state/doc-mode-enter-for-new-line?","frontend.handler.editor/keydown-new-line-handler","frontend.handler.editor/select-first-last","G__110145","frontend.util/get-blocks-noncollapse","G__110146","frontend.handler.editor/select-up-down","G__110147","frontend.util/get-next-block-non-collapsed","frontend.handler.editor/move-cross-boundrary-up-down","map__110148","line-pos","frontend.util/get-first-or-last-line-pos","G__110149","G__110150","new-id","new-uuid","G__110151","G__110152","G__110153","frontend.handler.editor/keydown-up-down-handler","down?","frontend.util.cursor/textarea-cursor-first-row?","frontend.util.cursor/textarea-cursor-last-row?","frontend.util.cursor/move-cursor-up","frontend.handler.editor/move-to-block-when-cross-boundrary","map__110154","G__110155","G__110156","G__110157","G__110158","frontend.handler.editor/keydown-arrow-handler","js/document.activeElement","left?","right?","frontend.util.cursor/start?","frontend.util.cursor/end?","frontend.util.safe_set_range_text_BANG_","frontend.handler.editor/delete-concat","right","frontend.modules.outliner.core/get-right-node","current-block-has-children?","G__110159","collapsed?","first-child","frontend.modules.outliner.tree/-get-down","G__110160","frontend.modules.outliner.tree/-get-id","G__110161","frontend.handler.editor/keydown-delete-handler","end?","frontend.handler.editor/keydown-backspace-handler","cut?","deleted","top-block?","root-block?","js/document.execCommand","frontend.commands/delete-pair!","frontend.util/safe-dec-current-pos-from-end","frontend.handler.editor/indent-outdent","indent?","map__110162","G__110163","frontend.state/set-editor-last-pos!","*transaction-data*-orig-val__110164","*transaction-data*-temp-val__110165","frontend.handler.editor/keydown-tab-handler","frontend.handler.editor/keydown-not-matched-handler","_key-code","ctrlKey","metaKey","hashtag?","frontend.util.event_is_composing_QMARK_","clojure.set.difference","frontend.util.keycode/left-square-brackets-keys","frontend.util.keycode/left-paren-keys","sym","frontend.handler.editor/keyup-handler","search-timeout","key-code","k","code","frontend.handler.editor.goog$module$goog$object.getValueByKeys","c","last-key-code","frontend.state/get-last-key-code","blank-selected?","is-processed?","non-enter-processed?","frontend.util.keycode/enter-code","frontend.state/state","orig-pos","square-pos","command-step","matched-commands","frontend.commands/*matched-commands","matched-block-commands","frontend.commands/*matched-block-commands","frontend.state/set-last-key-code!","frontend.handler.editor/editor-on-click!","js/frontend.handler.editor.mobile-toolbar-height","frontend.handler.editor/mobile-toolbar-height","frontend.handler.editor/editor-on-height-change!","box-height","row-height","caret","cursor-bottom","box-top","cursor-y","vw-height","js/window.visualViewport","main-node","scroll-top","frontend.handler.editor/editor-on-change!","timeout","frontend.handler.editor/paste-text-parseable","frontend.handler.editor/paste-segmented-text","paragraphs","updated-paragraphs","frontend.handler.editor/get-all-blocks-by-ids","G__110168","G__110169","frontend.handler.editor/paste-copied-blocks-or-text","copied-blocks","frontend.state/get-copied-blocks","copied-block-ids","copied-graph","*stop-event?","frontend.state/set-copied-full-blocks!","logseq.graph-parser.util/url?","logseq.graph-parser.text/block-ref?","logseq.graph-parser.text/get-block-ref","G__110170","ocr-110171","ocr-110172","ocr-110173","cljs.core/keyword-identical?","cljs.core.match/backtrack","e110197","e__57917__auto__","e110186","e110196","e110187","e110194","e110195","e110193","e110188","e110191","e110192","e110190","e110189","frontend.handler.editor/paste-text-in-one-block-at-point","js/module$frontend$utils.getClipText","clipboard-data","frontend.state/append-current-edit-content!","frontend.handler.editor/editor-on-paste!","frontend.state/set-state!","frontend.util.thingatpt.org_admonition_AMPERSAND_src_at_point","frontend.mobile.util/native-ios?","_handled","frontend.handler.editor/cut-blocks-and-clear-selections!","frontend.handler.editor/shortcut-copy-selection","frontend.handler.editor/shortcut-cut-selection","frontend.handler.editor/shortcut-delete-selection","frontend.handler.editor/copy-current-block-ref","p1__110198#","frontend.handler.editor/shortcut-copy","frontend.handler.editor/shortcut-cut","frontend.handler.editor/delete-selection","frontend.handler.editor/editor-delete","frontend.handler.editor/editor-backspace","frontend.handler.editor/shortcut-up-down","frontend.handler.editor/shortcut-select-up-down","vec__110199","anchor","cursor","G__110202","frontend.util/get-selection-direction","cursor-rect","frontend.util.cursor/textarea-cursor-rect-first-row?","frontend.util.cursor/textarea-cursor-rect-last-row?","frontend.util.cursor/select-up-down","frontend.handler.editor/open-selected-block!","G__110203","frontend.handler.editor/shortcut-left-right","frontend.handler.editor/clear-block-content!","frontend.handler.editor/kill-line-before!","frontend.util/kill-line-before!","frontend.handler.editor/kill-line-after!","frontend.util/kill-line-after!","frontend.handler.editor/beginning-of-block","frontend.handler.editor/end-of-block","frontend.handler.editor/cursor-forward-word","frontend.util.cursor/move-cursor-forward-by-word","frontend.handler.editor/cursor-backward-word","frontend.util.cursor/move-cursor-backward-by-word","frontend.handler.editor/backward-kill-word","frontend.util/backward-kill-word","frontend.handler.editor/forward-kill-word","frontend.util/forward-kill-word","frontend.handler.editor/block-with-title?","semantic?","G__110205","frontend.handler.editor/collapsable?","p__110206","map__110207","frontend.handler.editor.collapsable_QMARK_","frontend.db.model.has_children_QMARK_","frontend.state.get_config","p__110208","map__110209","frontend.handler.editor/all-blocks-with-level","collapse?","expanded?","incremental?","frontend.date/today","G__110210","G__110211","frontend.db/get-page-blocks-no-cache","frontend.modules.outliner.tree.blocks__GT_vec_tree","G__110212","root","find","clojure.walk/postwalk","cljs.core/tree-seq","G__110213","frontend.handler.editor/skip-collapsing-in-db?","frontend.handler.editor/set-blocks-collapsed!","cljs.core/boolean","*transaction-data*-orig-val__110222","*transaction-data*-temp-val__110223","seq__110214","chunk__110215","count__110216","i__110217","seq__110224","chunk__110225","count__110226","i__110227","G__110220","G__110221","G__110230","G__110231","current-value","frontend.handler.editor/collapse-block!","frontend.state/set-collapsed-block!","frontend.handler.editor/expand-block!","G__110233","frontend.handler.editor/expand!","frontend.handler.editor.expand_BANG_","clear-selection?","dom","cljs.core.doall","blocks-with-level","max-level","cljs.core/max","blocks-to-expand","cljs.core/empty?","seq__110234","chunk__110235","count__110236","i__110237","map__110240","map__110241","G__110243","frontend.handler.editor/collapse!","frontend.handler.editor.collapse_BANG_","blocks-to-collapse","seq__110252","chunk__110253","count__110254","i__110255","map__110258","map__110259","G__110261","frontend.handler.editor/collapse-all!","frontend.handler.editor.collapse_all_BANG_","G__110263","frontend.handler.editor/expand-all!","frontend.handler.editor.expand_all_BANG_","frontend.handler.editor/toggle-open!","all-expanded?","frontend.handler.editor/select-all-blocks!","current-input-id","blocks-container","frontend.util/rec-get-blocks-container","goog.dom/getElementByClass","G__110265","frontend.handler.editor/escape-editing","frontend.handler.editor.escape_editing","select?","frontend.handler.editor/replace-block-reference-with-content-at-point","map__110266","frontend.util.thingatpt/block-ref-at-point","G__110267","block-content","block-content-without-prop","current-block-content","block-content*","frontend.state/set-block-content-and-last-pos!","frontend.handler.editor/copy-current-ref","frontend.handler.editor/delete-current-ref!","ref-id","cljs.core/re-pattern","frontend.handler.editor/replace-ref-with-text!","ref-block","G__110268","block-ref-content","frontend.handler.editor/replace-ref-with-embed!","frontend.handler.editor/block-default-collapsed?","frontend.state/get-ref-open-blocks-level","G__110269"],"sourcesContent":["(ns frontend.handler.editor\n  (:require [\"/frontend/utils\" :as utils]\n            [cljs.core.match :refer [match]]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as w]\n            [dommy.core :as dom]\n            [frontend.commands :as commands\n             :refer [*angle-bracket-caret-pos *show-block-commands\n                     *show-commands *slash-caret-pos]]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.model :as db-model]\n            [frontend.db.utils :as db-utils]\n            [frontend.diff :as diff]\n            [frontend.format.block :as block]\n            [frontend.format.mldoc :as mldoc]\n            [frontend.fs :as fs]\n            [frontend.handler.block :as block-handler]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.export :as export]\n            [frontend.handler.image :as image-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.repeated :as repeated]\n            [frontend.handler.route :as route-handler]\n            [frontend.image :as image]\n            [frontend.idb :as idb]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.modules.outliner.transaction :as outliner-tx]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.template :as template]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.utf8 :as utf8]\n            [frontend.util :as util :refer [profile]]\n            [frontend.util.clock :as clock]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.drawer :as drawer]\n            [frontend.util.marker :as marker]\n            [frontend.util.property :as property]\n            [frontend.util.priority :as priority]\n            [frontend.util.thingatpt :as thingatpt]\n            [frontend.util.list :as list]\n            [goog.dom :as gdom]\n            [goog.dom.classes :as gdom-classes]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [medley.core :as medley]\n            [promesa.core :as p]\n            [frontend.util.keycode :as keycode]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [\"path\" :as path]))\n\n;; FIXME: should support multiple images concurrently uploading\n\n(defonce *asset-uploading? (atom false))\n(defonce *asset-uploading-process (atom 0))\n(defonce *selected-text (atom nil))\n\n(defn- get-selection-and-format\n  []\n  (when-let [block (state/get-edit-block)]\n    (when (:block/uuid block)\n      (when-let [edit-id (state/get-edit-input-id)]\n        (when-let [input (gdom/getElement edit-id)]\n          (let [selection-start (util/get-selection-start input)\n                selection-end (util/get-selection-end input)\n                value (gobj/get input \"value\")\n                selection (when (not= selection-start selection-end)\n                            (subs value selection-start selection-end))\n                selection-start (+ selection-start\n                                   (count (take-while #(= \" \" %) selection)))\n                selection-end (- selection-end\n                                 (count (take-while #(= \" \" %) (reverse selection))))]\n            {:selection-start selection-start\n             :selection-end selection-end\n             :selection (some-> selection\n                                string/trim)\n             :format (:block/format block)\n             :value value\n             :block block\n             :edit-id edit-id\n             :input input}))))))\n\n(defn- format-text!\n  [pattern-fn]\n  (when-let [m (get-selection-and-format)]\n    (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n          pattern (pattern-fn format)\n          pattern-count (count pattern)\n          pattern-prefix (subs value (max 0 (- selection-start pattern-count)) selection-start)\n          pattern-suffix (subs value selection-end (min (count value) (+ selection-end pattern-count)))\n          already-wrapped? (= pattern pattern-prefix pattern-suffix)\n          prefix (if already-wrapped?\n                   (subs value 0 (- selection-start pattern-count))\n                   (subs value 0 selection-start))\n          postfix (if already-wrapped?\n                    (subs value (+ selection-end pattern-count))\n                    (subs value selection-end))\n          inner-value (cond-> selection\n                        (not already-wrapped?)\n                        (#(str pattern % pattern)))\n          new-value (str prefix inner-value postfix)]\n      (state/set-edit-content! edit-id new-value)\n      (cond\n        already-wrapped? (cursor/set-selection-to input (- selection-start pattern-count) (- selection-end pattern-count))\n        selection (cursor/move-cursor-to input (+ selection-end pattern-count))\n        :else (cursor/set-selection-to input (+ selection-start pattern-count) (+ selection-end pattern-count))))))\n\n(defn bold-format! []\n  (format-text! config/get-bold))\n\n(defn italics-format! []\n  (format-text! config/get-italic))\n\n(defn highlight-format! []\n  (when-let [block (state/get-edit-block)]\n    (let [format (:block/format block)]\n      (format-text! #(config/get-highlight format)))))\n\n(defn strike-through-format! []\n  (format-text! config/get-strike-through))\n\n(defn html-link-format!\n  ([]\n   (html-link-format! nil))\n  ([link]\n   (when-let [m (get-selection-and-format)]\n     (let [{:keys [selection-start selection-end format selection value edit-id input]} m\n           cur-pos (cursor/pos input)\n           empty-selection? (= selection-start selection-end)\n           selection-link? (and selection (or (util/starts-with? selection \"http://\")\n                                              (util/starts-with? selection \"https://\")))\n           [content forward-pos] (cond\n                                   empty-selection?\n                                   (config/get-empty-link-and-forward-pos format)\n\n                                   link\n                                   (config/with-label-link format selection link)\n\n                                   selection-link?\n                                   (config/with-default-link format selection)\n\n                                   :else\n                                   (config/with-default-label format selection))\n           new-value (str\n                      (subs value 0 selection-start)\n                      content\n                      (subs value selection-end))\n           cur-pos (or selection-start cur-pos)]\n       (state/set-edit-content! edit-id new-value)\n       (cursor/move-cursor-to input (+ cur-pos forward-pos))))))\n\n(defn open-block-in-sidebar!\n  [block-id]\n  (when block-id\n    (when-let [block (db/entity [:block/uuid block-id])]\n      (let [page? (nil? (:block/page block))]\n        (state/sidebar-add-block!\n         (state/get-current-repo)\n         (:db/id block)\n         (if page? :page :block))))))\n\n(defn reset-cursor-range!\n  [node]\n  (when node\n    (state/set-cursor-range! (util/caret-range node))))\n\n(defn restore-cursor-pos!\n  [id markup]\n  (when-let [node (gdom/getElement (str id))]\n    (let [cursor-range (state/get-cursor-range)\n          pos (or (state/get-editor-last-pos)\n                  (and cursor-range\n                       (diff/find-position markup cursor-range)))]\n      (cursor/move-cursor-to node pos)\n      (state/clear-editor-last-pos!))))\n\n(defn highlight-block!\n  [block-uuid]\n  (let [blocks (array-seq (js/document.getElementsByClassName (str block-uuid)))]\n    (doseq [block blocks]\n      (dom/add-class! block \"block-highlight\"))))\n\n(defn unhighlight-blocks!\n  []\n  (let [blocks (some->> (array-seq (js/document.getElementsByClassName \"block-highlight\"))\n                        (repeat 2)\n                        (apply concat))]\n    (doseq [block blocks]\n      (gdom-classes/remove block \"block-highlight\"))))\n\n(defn- get-edit-input-id-with-block-id\n  [block-id]\n  (when-let [first-block (util/get-first-block-by-id block-id)]\n    (string/replace (gobj/get first-block \"id\")\n                    \"ls-block\"\n                    \"edit-block\")))\n\n(defn clear-selection!\n  []\n  (util/select-unhighlight! (dom/by-class \"selected\"))\n  (state/clear-selection!))\n\n(defn- text-range-by-lst-fst-line [content [direction pos]]\n  (case direction\n    :up\n    (let [last-new-line (or (string/last-index-of content \\newline) -1)\n          end (+ last-new-line pos 1)]\n      (subs content 0 end))\n    :down\n    (-> (string/split-lines content)\n        first\n        (or \"\")\n        (subs 0 pos))))\n\n;; id: block dom id, \"ls-block-counter-uuid\"\n(defn edit-block!\n  ([block pos id]\n   (edit-block! block pos id nil))\n  ([block pos id {:keys [custom-content tail-len move-cursor?]\n                  :or {tail-len 0\n                       move-cursor? true}}]\n   (when-not config/publishing?\n     (when-let [block-id (:block/uuid block)]\n       (let [block (or (db/pull [:block/uuid block-id]) block)\n             edit-input-id (if (uuid? id)\n                             (get-edit-input-id-with-block-id id)\n                             (-> (str (subs id 0 (- (count id) 36)) block-id)\n                                 (string/replace \"ls-block\" \"edit-block\")))\n             content (or custom-content (:block/content block) \"\")\n             content-length (count content)\n             text-range (cond\n                          (vector? pos)\n                          (text-range-by-lst-fst-line content pos)\n\n                          (and (> tail-len 0) (>= (count content) tail-len))\n                          (subs content 0 (- (count content) tail-len))\n\n                          (or (= :max pos) (<= content-length pos))\n                          content\n\n                          :else\n                          (subs content 0 pos))\n             content (-> (property/remove-built-in-properties (:block/format block)\n                                                              content)\n                         (drawer/remove-logbook))]\n         (clear-selection!)\n         (state/set-editing! edit-input-id content block text-range move-cursor?))))))\n\n(defn- another-block-with-same-id-exists?\n  [current-id block-id]\n  (and (string? block-id)\n       (gp-util/uuid-string? block-id)\n       (not= current-id (cljs.core/uuid block-id))\n       (db/entity [:block/uuid (cljs.core/uuid block-id)])))\n\n(defn- attach-page-properties-if-exists!\n  [block]\n  (if (and (:block/pre-block? block)\n           (seq (:block/properties block)))\n    (let [page-properties (:block/properties block)\n          str->page (fn [n] (block/page-name->map n true))\n          refs (->> page-properties\n                    (filter (fn [[_ v]] (coll? v)))\n                    (vals)\n                    (apply concat)\n                    (set)\n                    (map str->page)\n                    (concat (:block/refs block))\n                    (util/distinct-by :block/name))\n          {:keys [tags alias]} page-properties\n          page-tx (let [id (:db/id (:block/page block))\n                        retract-attributes (when id\n                                             (mapv (fn [attribute]\n                                                     [:db/retract id attribute])\n                                                   [:block/properties :block/tags :block/alias]))\n                        tags (->> (map str->page tags) (remove nil?))\n                        alias (->> (map str->page alias) (remove nil?))\n                        tx (cond-> {:db/id id\n                                    :block/properties page-properties}\n                             (seq tags)\n                             (assoc :block/tags tags)\n                             (seq alias)\n                             (assoc :block/alias alias))]\n                    (conj retract-attributes tx))]\n      (assoc block\n             :block/refs refs\n             :db/other-tx page-tx))\n    block))\n\n(defn- remove-non-existed-refs!\n  [refs]\n  (remove (fn [x] (or\n                   (and (vector? x)\n                        (= :block/uuid (first x))\n                        (nil? (db/entity x)))\n                   (nil? x))) refs))\n\n(defn- with-marker-time\n  [content block format new-marker old-marker]\n  (if (and (state/enable-timetracking?) new-marker)\n    (try\n      (let [logbook-exists? (and (:block/body block) (drawer/get-logbook (:block/body block)))\n            new-marker (string/trim (string/lower-case (name new-marker)))\n            old-marker (when old-marker (string/trim (string/lower-case (name old-marker))))\n            new-content (cond\n                          (or (and (nil? old-marker) (or (= new-marker \"doing\")\n                                                         (= new-marker \"now\")))\n                              (and (= old-marker \"todo\") (= new-marker \"doing\"))\n                              (and (= old-marker \"later\") (= new-marker \"now\"))\n                              (and (= old-marker new-marker \"now\") (not logbook-exists?))\n                              (and (= old-marker new-marker \"doing\") (not logbook-exists?)))\n                          (clock/clock-in format content)\n\n                          (or\n                           (and (= old-marker \"doing\") (= new-marker \"todo\"))\n                           (and (= old-marker \"now\") (= new-marker \"later\"))\n                           (and (contains? #{\"now\" \"doing\"} old-marker)\n                                (= new-marker \"done\")))\n                          (clock/clock-out format content)\n\n                          :else\n                          content)]\n        new-content)\n      (catch js/Error _e\n        content))\n    content))\n\n(defn- with-timetracking\n  [block value]\n  (if (and (state/enable-timetracking?)\n           (not= (:block/content block) value))\n    (let [format (:block/format block)\n          new-marker (last (gp-util/safe-re-find (marker/marker-pattern format) (or value \"\")))\n          new-value (with-marker-time value block format\n                      new-marker\n                      (:block/marker block))]\n      new-value)\n    value))\n\n(defn wrap-parse-block\n  [{:block/keys [content format left page uuid level pre-block?] :as block}]\n  (let [block (or (and (:db/id block) (db/pull (:db/id block))) block)\n        block (merge block\n                     (block/parse-title-and-body uuid format pre-block? (:block/content block)))\n        properties (:block/properties block)\n        real-content (:block/content block)\n        content (if (and (seq properties) real-content (not= real-content content))\n                  (property/with-built-in-properties properties content format)\n                  content)\n        content (drawer/with-logbook block content)\n        content (with-timetracking block content)\n        first-block? (= left page)\n        ast (mldoc/->edn (string/trim content) (gp-mldoc/default-config format))\n        first-elem-type (first (ffirst ast))\n        first-elem-meta (second (ffirst ast))\n        properties? (contains? #{\"Property_Drawer\" \"Properties\"} first-elem-type)\n        markdown-heading? (and (= format :markdown)\n                               (= \"Heading\" first-elem-type)\n                               (nil? (:size first-elem-meta)))\n        block-with-title? (mldoc/block-with-title? first-elem-type)\n        content (string/triml content)\n        content (string/replace content (util/format \"((%s))\" (str uuid)) \"\")\n        [content content'] (cond\n                             (and first-block? properties?)\n                             [content content]\n\n                             markdown-heading?\n                             [content content]\n\n                             :else\n                             (let [content' (str (config/get-block-pattern format) (if block-with-title? \" \" \"\\n\") content)]\n                               [content content']))\n        block (assoc block\n                     :block/content content'\n                     :block/format format)\n        block (apply dissoc block (remove #{:block/pre-block?} db-schema/retract-attributes))\n        block (block/parse-block block)\n        block (if (and first-block? (:block/pre-block? block))\n                block\n                (dissoc block :block/pre-block?))\n        block (update block :block/refs remove-non-existed-refs!)\n        block (attach-page-properties-if-exists! block)\n        new-properties (merge\n                        (select-keys properties (property/built-in-properties))\n                        (:block/properties block))]\n    (-> block\n        (dissoc :block/top?\n                :block/bottom?)\n        (assoc :block/content content\n               :block/properties new-properties)\n        (merge (if level {:block/level level} {})))))\n\n(defn- save-block-inner!\n  [block value {}]\n  (let [block (assoc block :block/content value)\n        block (apply dissoc block db-schema/retract-attributes)]\n    (profile\n     \"Save block: \"\n     (let [block (wrap-parse-block block)]\n       (outliner-tx/transact!\n         {:outliner-op :save-block}\n         (outliner-core/save-block! block))\n\n       ;; sanitized page name changed\n       (when-let [title (get-in block [:block/properties :title])]\n         (when-let [old-page-name (:block/name (db/entity (:db/id (:block/page block))))]\n           (when (and (:block/pre-block? block)\n                      (not (string/blank? title))\n                      (not= (util/page-name-sanity-lc title) old-page-name))\n             (state/pub-event! [:page/title-property-changed old-page-name title]))))))))\n\n(defn save-block-if-changed!\n  ([block value]\n   (save-block-if-changed! block value nil))\n  ([block value\n    {:keys [force?]\n     :as opts}]\n   (let [{:block/keys [uuid page format repo content properties]} block\n         repo (or repo (state/get-current-repo))\n         format (or format (state/get-preferred-format))\n         page (db/entity repo (:db/id page))\n         block-id (when (map? properties) (get properties :id))\n         content (-> (property/remove-built-in-properties format content)\n                     (drawer/remove-logbook))]\n     (cond\n       (another-block-with-same-id-exists? uuid block-id)\n       (notification/show!\n        [:p.content\n         (util/format \"Block with the id %s already exists!\" block-id)]\n        :error)\n\n       force?\n       (save-block-inner! block value opts)\n\n       :else\n       (let [content-changed? (not= (string/trim content) (string/trim value))]\n         (when (and content-changed? page)\n           (save-block-inner! block value opts)))))))\n\n(defn- compute-fst-snd-block-text\n  [value pos]\n  (when (string? value)\n    (let [fst-block-text (subs value 0 pos)\n          snd-block-text (string/triml (subs value pos))]\n      [fst-block-text snd-block-text])))\n\n(declare save-current-block!)\n(defn outliner-insert-block!\n  [config current-block new-block {:keys [sibling? keep-uuid? replace-empty-target?]}]\n  (let [ref-query-top-block? (and (or (:ref? config)\n                                      (:custom-query? config))\n                                  (not (:ref-query-child? config)))\n        has-children? (db/has-children? (:block/uuid current-block))\n        sibling? (cond\n                   ref-query-top-block?\n                   false\n\n                   (boolean? sibling?)\n                   sibling?\n\n                   (util/collapsed? current-block)\n                   true\n\n                   :else\n                   (not has-children?))]\n    (outliner-tx/transact!\n      {:outliner-op :insert-blocks}\n      (save-current-block! {:current-block current-block})\n      (outliner-core/insert-blocks! [new-block] current-block {:sibling? sibling?\n                                                               :keep-uuid? keep-uuid?\n                                                               :replace-empty-target? replace-empty-target?}))))\n\n(defn- block-self-alone-when-insert?\n  [config uuid]\n  (let [current-page (state/get-current-page)\n        block-id (or\n                  (and (:id config)\n                       (gp-util/uuid-string? (:id config))\n                       (:id config))\n                  (and current-page\n                       (gp-util/uuid-string? current-page)\n                       current-page))]\n    (= uuid (and block-id (medley/uuid block-id)))))\n\n(defn insert-new-block-before-block-aux!\n  [config block _value {:keys [ok-handler]}]\n  (let [new-m {:block/uuid (db/new-block-id)\n               :block/content \"\"}\n        prev-block (-> (merge (select-keys block [:block/parent :block/left :block/format\n                                                  :block/page :block/journal?]) new-m)\n                       (wrap-parse-block))\n        left-block (db/pull (:db/id (:block/left block)))]\n    (profile\n     \"outliner insert block\"\n     (let [sibling? (not= (:db/id left-block) (:db/id (:block/parent block)))]\n       (outliner-insert-block! config left-block prev-block {:sibling? sibling?\n                                                             :keep-uuid? true})))\n    (ok-handler prev-block)))\n\n(defn insert-new-block-aux!\n  [config\n   {:block/keys [uuid]\n    :as block}\n   value\n   {:keys [ok-handler]\n    :as _opts}]\n  (let [block-self? (block-self-alone-when-insert? config uuid)\n        input (gdom/getElement (state/get-edit-input-id))\n        pos (cursor/pos input)\n        [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n        current-block (assoc block :block/content fst-block-text)\n        current-block (apply dissoc current-block db-schema/retract-attributes)\n        current-block (wrap-parse-block current-block)\n        new-m {:block/uuid (db/new-block-id)\n               :block/content snd-block-text}\n        next-block (-> (merge (select-keys block [:block/parent :block/left :block/format\n                                                  :block/page :block/journal?]) new-m)\n                       (wrap-parse-block))\n        sibling? (when block-self? false)]\n    (outliner-insert-block! config current-block next-block {:sibling? sibling?\n                                                             :keep-uuid? true})\n    (util/set-change-value input fst-block-text)\n    (ok-handler next-block)))\n\n(defn clear-when-saved!\n  []\n  (state/clear-editor-show-state!)\n  (commands/restore-state true))\n\n(defn get-state\n  []\n  (let [[{:keys [on-hide block block-id block-parent-id format sidebar?]} id config] (state/get-editor-args)\n        node (gdom/getElement id)]\n    (when node\n      (let [value (gobj/get node \"value\")\n            pos (util/get-selection-start node)]\n        {:config config\n         :on-hide on-hide\n         :sidebar? sidebar?\n         :format format\n         :id id\n         :block (or (db/pull [:block/uuid (:block/uuid block)]) block)\n         :block-id block-id\n         :block-parent-id block-parent-id\n         :node node\n         :value value\n         :pos pos}))))\n\n(defn insert-new-block!\n  \"Won't save previous block content - remember to save!\"\n  ([state]\n   (insert-new-block! state nil))\n  ([_state block-value]\n   (when (and (not config/publishing?)\n              (not= :insert (state/get-editor-op)))\n     (state/set-editor-op! :insert)\n     (when-let [state (get-state)]\n       (let [{:keys [block value id config]} state\n             value (if (string? block-value) block-value value)\n             block-id (:block/uuid block)\n             block (or (db/pull [:block/uuid block-id])\n                       block)\n             block-self? (block-self-alone-when-insert? config block-id)\n             input (gdom/getElement (state/get-edit-input-id))\n             pos (cursor/pos input)\n             [fst-block-text snd-block-text] (compute-fst-snd-block-text value pos)\n             insert-fn (cond\n                         block-self?\n                         insert-new-block-aux!\n\n                         (and (string/blank? fst-block-text) (not (string/blank? snd-block-text)))\n                         insert-new-block-before-block-aux!\n\n                         :else\n                         insert-new-block-aux!)]\n         (insert-fn config block value\n                    {:ok-handler\n                     (fn [last-block]\n                       (clear-when-saved!)\n                       (edit-block! last-block 0 id))}))))\n   (state/set-editor-op! nil)))\n\n(defn api-insert-new-block!\n  [content {:keys [page block-uuid sibling? before? properties\n                   custom-uuid replace-empty-target? edit-block?]\n            :or {sibling? false\n                 before? false\n                 edit-block? true}}]\n  (when (or page block-uuid)\n    (let [before? (if page false before?)\n          sibling? (if before? true (if page false sibling?))\n          block (if page\n                  (db/entity [:block/name (util/page-name-sanity-lc page)])\n                  (db/entity [:block/uuid block-uuid]))]\n      (when block\n        (let [last-block (when (not sibling?)\n                           (let [children (:block/_parent block)\n                                 blocks (db/sort-by-left children block)\n                                 last-block-id (:db/id (last blocks))]\n                             (when last-block-id\n                               (db/pull last-block-id))))\n              format (or\n                      (:block/format block)\n                      (db/get-page-format (:db/id block))\n                      (state/get-preferred-format))\n              content (if (seq properties)\n                        (property/insert-properties format content properties)\n                        content)\n              new-block (-> (select-keys block [:block/page :block/journal?\n                                                :block/journal-day])\n                            (assoc :block/content content\n                                   :block/format format))\n              new-block (assoc new-block :block/page\n                               (if page\n                                 (:db/id block)\n                                 (:db/id (:block/page new-block))))\n              new-block (-> new-block\n                            (wrap-parse-block)\n                            (assoc :block/uuid (or custom-uuid (db/new-block-id))))\n              [block-m sibling?] (cond\n                                   before?\n                                   (let [first-child? (->> [:block/parent :block/left]\n                                                           (map #(:db/id (get block %)))\n                                                           (apply =))\n                                         block (db/pull (:db/id (:block/left block)))\n                                         sibling? (if (or first-child? ;; insert as first child\n                                                          (:block/name block))\n                                                    false sibling?)]\n                                     [block sibling?])\n\n                                   sibling?\n                                   [(db/pull (:db/id block)) sibling?]\n\n                                   last-block\n                                   [last-block true]\n\n                                   block\n                                   [(db/pull (:db/id block)) sibling?]\n\n                                   ;; FIXME: assert\n                                   :else\n                                   nil)]\n          (when block-m\n            (outliner-insert-block! {} block-m new-block {:sibling? sibling?\n                                                          :keep-uuid? true\n                                                          :replace-empty-target? replace-empty-target?})\n            (when edit-block?\n              (if (and replace-empty-target?\n                       (string/blank? (:block/content last-block)))\n                (js/setTimeout #(edit-block! last-block :max (:block/uuid last-block)) 10)\n                (js/setTimeout #(edit-block! new-block :max (:block/uuid new-block)) 10)))\n            new-block))))))\n\n(defn insert-first-page-block-if-not-exists!\n  ([page-title]\n   (insert-first-page-block-if-not-exists! page-title {}))\n  ([page-title opts]\n   (when (and (string? page-title)\n              (not (string/blank? page-title)))\n     (state/pub-event! [:page/create page-title opts]))))\n\n(defn properties-block\n  [properties format page]\n  (let [content (property/insert-properties format \"\" properties)\n        refs (block/get-page-refs-from-properties properties)]\n    {:block/pre-block? true\n     :block/uuid (db/new-block-id)\n     :block/properties properties\n     :block/properties-order (keys properties)\n     :block/refs refs\n     :block/left page\n     :block/format format\n     :block/content content\n     :block/parent page\n     :block/page page}))\n\n(defn update-timestamps-content!\n  [{:block/keys [repeated? marker format] :as block} content]\n  (if repeated?\n    (let [scheduled-ast (block-handler/get-scheduled-ast block)\n          deadline-ast (block-handler/get-deadline-ast block)\n          content (some->> (filter repeated/repeated? [scheduled-ast deadline-ast])\n                           (map (fn [ts]\n                                  [(repeated/timestamp->text ts)\n                                   (repeated/next-timestamp-text ts)]))\n                           (reduce (fn [content [old new]]\n                                     (string/replace content old new))\n                                   content))\n          content (string/replace-first\n                   content marker\n                   (case marker\n                     \"DOING\"\n                     \"TODO\"\n\n                     \"NOW\"\n                     \"LATER\"\n\n                     marker))\n          content (clock/clock-out format content)\n          content (drawer/insert-drawer\n                   format content \"logbook\"\n                   (util/format (str (if (= :org format) \"-\" \"*\")\n                                     \" State \\\"DONE\\\" from \\\"%s\\\" [%s]\")\n                                marker\n                                (date/get-date-time-string-3)))]\n      content)\n    content))\n\n(defn check\n  [{:block/keys [marker content repeated? uuid] :as block}]\n  (let [new-content (string/replace-first content marker \"DONE\")\n        new-content (if repeated?\n                      (update-timestamps-content! block content)\n                      new-content)\n        input-id (state/get-edit-input-id)]\n    (if (and input-id\n             (string/ends-with? input-id (str uuid)))\n      (state/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn uncheck\n  [{:block/keys [content uuid] :as block}]\n  (let [marker (if (= :now (state/get-preferred-workflow))\n                 \"LATER\"\n                 \"TODO\")\n        new-content (string/replace-first content \"DONE\" marker)\n        input-id (state/get-edit-input-id)]\n    (if (and input-id\n             (string/ends-with? input-id (str uuid)))\n      (state/set-edit-content! input-id new-content)\n      (save-block-if-changed! block new-content))))\n\n(defn get-selected-blocks\n  []\n  (distinct (seq (state/get-selection-blocks))))\n\n(defn set-marker\n  \"The set-marker will set a new marker on the selected block.\n  if the `new-marker` is nil, it will generate it automatically.\"\n  ([block]\n   (set-marker block nil))\n  ([{:block/keys [marker content format] :as block} new-marker]\n   (let [[new-content _] (marker/cycle-marker content marker new-marker format (state/get-preferred-workflow))]\n     (save-block-if-changed! block new-content))))\n\n(defn cycle-todos!\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [ids (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))]\n      (doseq [id ids]\n        (let [block (db/pull [:block/uuid id])]\n          (set-marker block))))))\n\n(defn cycle-todo!\n  []\n  #_:clj-kondo/ignore\n  (if-let [blocks (seq (get-selected-blocks))]\n    (cycle-todos!)\n    (when (state/get-edit-block)\n      (let [edit-input-id (state/get-edit-input-id)\n            current-input (gdom/getElement edit-input-id)\n            content (state/get-edit-content)\n            format (or (db/get-page-format (state/get-current-page))\n                       (state/get-preferred-format))\n            [new-content marker] (marker/cycle-marker content nil nil format (state/get-preferred-workflow))\n            new-pos (commands/compute-pos-delta-when-change-marker\n                     content marker (cursor/pos current-input))]\n        (state/set-edit-content! edit-input-id new-content)\n        (cursor/move-cursor-to current-input new-pos)))))\n\n(defn set-priority\n  [{:block/keys [priority content] :as block} new-priority]\n  (let [new-content (string/replace-first content\n                                          (util/format \"[#%s]\" priority)\n                                          (util/format \"[#%s]\" new-priority))]\n    (save-block-if-changed! block new-content)))\n\n(defn cycle-priority!\n  []\n  (when (state/get-edit-block)\n    (let [format (or (db/get-page-format (state/get-current-page))\n                     (state/get-preferred-format))\n          input-id (state/get-edit-input-id)\n          content (state/get-edit-content)\n          new-priority (priority/cycle-priority-state content)\n          new-value (priority/add-or-update-priority content format new-priority)]\n      (state/set-edit-content! input-id new-value))))\n\n(defn delete-block-aux!\n  [{:block/keys [uuid repo] :as _block} children?]\n  (let [repo (or repo (state/get-current-repo))\n        block (db/pull repo '[*] [:block/uuid uuid])]\n    (when block\n      (outliner-tx/transact!\n        {:outliner-op :delete-blocks}\n        (outliner-core/delete-blocks! [block] {:children? children?})))))\n\n(defn- move-to-prev-block\n  [repo sibling-block format id value]\n  (when (and repo sibling-block)\n    (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n      (when-let [block (db/pull repo '[*] [:block/uuid (uuid sibling-block-id)])]\n        (let [original-content (util/trim-safe (:block/content block))\n              value' (-> (property/remove-built-in-properties format original-content)\n                         (drawer/remove-logbook))\n              new-value (str value' value)\n              tail-len (count value)\n              pos (max\n                   (if original-content\n                     (utf8/length (utf8/encode original-content))\n                     0)\n                   0)]\n          (edit-block! block pos id\n                       {:custom-content new-value\n                        :tail-len tail-len\n                        :move-cursor? false}))))))\n\n(defn delete-block!\n  ([repo]\n   (delete-block! repo true))\n  ([repo delete-children?]\n   (state/set-editor-op! :delete)\n   (let [{:keys [id block-id block-parent-id value format]} (get-state)]\n     (when block-id\n       (let [page-id (:db/id (:block/page (db/entity [:block/uuid block-id])))\n             page-blocks-count (and page-id (db/get-page-blocks-count repo page-id))]\n         (when (> page-blocks-count 1)\n           (let [block (db/entity [:block/uuid block-id])\n                 has-children? (seq (:block/_parent block))\n                 block (db/pull (:db/id block))\n                 left (tree/-get-left (outliner-core/block block))\n                 left-has-children? (and left\n                                         (when-let [block-id (:block/uuid (:data left))]\n                                           (let [block (db/entity [:block/uuid block-id])]\n                                             (seq (:block/_parent block)))))]\n             (when-not (and has-children? left-has-children?)\n               (when block-parent-id\n                 (let [block-parent (gdom/getElement block-parent-id)\n                       sibling-block (util/get-prev-block-non-collapsed-non-embed block-parent)]\n                   (delete-block-aux! block delete-children?)\n                   (move-to-prev-block repo sibling-block format id value)))))))))\n   (state/set-editor-op! nil)))\n\n(defn delete-blocks!\n  [repo block-uuids blocks dom-blocks]\n  (when (seq block-uuids)\n    (let [uuid->dom-block (zipmap block-uuids dom-blocks)\n          block (first blocks)\n          block-parent (get uuid->dom-block (:block/uuid block))\n          sibling-block (when block-parent (util/get-prev-block-non-collapsed-non-embed block-parent))]\n      (outliner-tx/transact!\n        {:outliner-op :delete-blocks}\n        (outliner-core/delete-blocks! blocks {}))\n      (when sibling-block\n        (move-to-prev-block repo sibling-block\n                            (:block/format block)\n                            (dom/attr sibling-block \"id\")\n                            \"\")))))\n\n(defn- batch-set-block-property!\n  \"col: a collection of [block-id property-key property-value].\"\n  [col]\n  #_:clj-kondo/ignore\n  (when-let [repo (state/get-current-repo)]\n    (outliner-tx/transact!\n      {:outliner-op :save-block}\n      (doseq [[block-id key value] col]\n        (let [block-id (if (string? block-id) (uuid block-id) block-id)]\n          (when-let [block (db/entity [:block/uuid block-id])]\n            (let [format (:block/format block)\n                  content (:block/content block)\n                  properties (:block/properties block)\n                  properties (if (nil? value)\n                               (dissoc properties key)\n                               (assoc properties key value))\n                  content (if (nil? value)\n                            (property/remove-property format key content)\n                            (property/insert-property format content key value))\n                  content (property/remove-empty-properties content)\n                  block {:block/uuid block-id\n                         :block/properties properties\n                         :block/content content}]\n              (outliner-core/save-block! block))))))\n\n    (let [block-id (ffirst col)\n          block-id (if (string? block-id) (uuid block-id) block-id)\n          input-pos (or (state/get-edit-pos) :max)]\n      ;; update editing input content\n      (when-let [editing-block (state/get-edit-block)]\n        (when (= (:block/uuid editing-block) block-id)\n          (edit-block! editing-block\n                       input-pos\n                       (state/get-edit-input-id)))))))\n\n(defn remove-block-property!\n  [block-id key]\n  (let [key (keyword key)]\n    (batch-set-block-property! [[block-id key nil]])))\n\n(defn set-block-property!\n  [block-id key value]\n  (let [key (keyword key)]\n    (batch-set-block-property! [[block-id key value]])))\n\n(defn set-block-query-properties!\n  [block-id all-properties key add?]\n  (when-let [block (db/entity [:block/uuid block-id])]\n    (let [query-properties (-> (get-in block [:block/properties :query-properties] \"\")\n                               (common-handler/safe-read-string \"Failed to parse query properties\"))\n          query-properties (if (seq query-properties)\n                             query-properties\n                             all-properties)\n          query-properties (if add?\n                             (distinct (conj query-properties key))\n                             (remove #{key} query-properties))\n          query-properties (vec query-properties)]\n      (if (seq query-properties)\n        (set-block-property! block-id :query-properties (str query-properties))\n        (remove-block-property! block-id :query-properties)))))\n\n(defn set-block-timestamp!\n  [block-id key value]\n  (let [key (string/lower-case key)\n        block-id (if (string? block-id) (uuid block-id) block-id)\n        key (string/lower-case (str key))\n        value (str value)]\n    (when-let [block (db/pull [:block/uuid block-id])]\n      (let [{:block/keys [content]} block\n            content (or content (state/get-edit-content))\n            new-content (-> (text/remove-timestamp content key)\n                            (text/add-timestamp key value))]\n        (when (not= content new-content)\n          (let [input-id (state/get-edit-input-id)]\n            (if (and input-id\n                     (string/ends-with? input-id (str block-id)))\n              (state/set-edit-content! input-id new-content)\n              (save-block-if-changed! block new-content))))))))\n\n(defn- set-blocks-id!\n  [block-ids]\n  (let [block-ids (remove nil? block-ids)\n        col (map (fn [block-id]\n                   (let [block (db/entity [:block/uuid block-id])]\n                     (when-not (:block/pre-block? block)\n                       [block-id :id (str block-id)])))\n                 block-ids)]\n    (batch-set-block-property! col)))\n\n(defn copy-block-ref!\n  ([block-id]\n   (copy-block-ref! block-id #(str %)))\n  ([block-id tap-clipboard]\n   (set-blocks-id! [block-id])\n   (util/copy-to-clipboard! (tap-clipboard block-id))))\n\n(defn select-block!\n  [block-uuid]\n  (let [blocks (js/document.getElementsByClassName (str block-uuid))]\n    (when (seq blocks)\n      (state/exit-editing-and-set-selected-blocks! blocks))))\n\n(defn- compose-copied-blocks-contents\n  [repo block-ids]\n  (let [blocks (db-utils/pull-many repo '[*] (mapv (fn [id] [:block/uuid id]) block-ids))\n        top-level-block-uuids (->> (outliner-core/get-top-level-blocks blocks)\n                                   (map :block/uuid))]\n    (export/export-blocks-as-markdown\n     repo top-level-block-uuids\n     (state/get-export-block-text-indent-style)\n     (into [] (state/get-export-block-text-remove-options)))))\n\n(defn copy-selection-blocks\n  []\n  (when-let [blocks (seq (state/get-selection-blocks))]\n    (let [repo (state/get-current-repo)\n          ids (distinct (keep #(when-let [id (dom/attr % \"blockid\")]\n                                 (uuid id)) blocks))\n          content (compose-copied-blocks-contents repo ids)\n          block (db/entity [:block/uuid (first ids)])]\n      (when block\n        (common-handler/copy-to-clipboard-without-id-property! (:block/format block) content)\n        (state/set-copied-blocks content ids)\n        (notification/show! \"Copied!\" :success)))))\n\n(defn copy-block-refs\n  []\n  (when-let [selected-blocks (seq (get-selected-blocks))]\n    (let [blocks (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                        (let [level (dom/attr % \"level\")]\n                                          {:id (uuid id)\n                                           :level (int level)}))\n                                     selected-blocks))\n                      (remove nil?))\n          first-block (first blocks)\n          first-root-level-index (ffirst\n                                  (filter (fn [[_ block]] (= (:level block) 1))\n                                          (map-indexed vector blocks)))\n          root-level (atom (:level first-block))\n          adjusted-blocks (map-indexed\n                           (fn [index {:keys [id level]}]\n                             {:id id\n                              :level (if (< index first-root-level-index)\n                                       (if (< level @root-level)\n                                         (do\n                                           (reset! root-level level)\n                                           1)\n                                         (inc (- level @root-level)))\n                                       level)})\n                           blocks)\n          block (db/pull [:block/uuid (:id first-block)])\n          copy-str (some->> adjusted-blocks\n                            (map (fn [{:keys [id level]}]\n                                   (condp = (:block/format block)\n                                     :org\n                                     (util/format (str (string/join (repeat level \"*\")) \" ((%s))\") id)\n                                     :markdown\n                                     (util/format (str (string/join (repeat (dec level) \"\\t\")) \"- ((%s))\") id))))\n                            (string/join \"\\n\\n\"))]\n      (set-blocks-id! (map :id blocks))\n      (util/copy-to-clipboard! copy-str))))\n\n(defn copy-block-embeds\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [ids (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                     (uuid id)) blocks))\n                   (remove nil?))\n          ids-str (some->> ids\n                           (map (fn [id] (util/format \"{{embed ((%s))}}\" id)))\n                           (string/join \"\\n\\n\"))]\n      (set-blocks-id! ids)\n      (util/copy-to-clipboard! ids-str))))\n\n(defn get-selected-toplevel-block-uuids\n  []\n  (when-let [blocks (seq (get-selected-blocks))]\n    (let [repo (state/get-current-repo)\n          block-ids (->> (distinct (map #(when-let [id (dom/attr % \"blockid\")]\n                                           (uuid id)) blocks))\n                         (remove nil?))\n          blocks (db-utils/pull-many repo '[*] (mapv (fn [id] [:block/uuid id]) block-ids))\n          page-id (:db/id (:block/page (first blocks)))\n          ;; filter out blocks not belong to page with 'page-id'\n          blocks* (remove (fn [block] (some-> (:db/id (:block/page block)) (not= page-id))) blocks)]\n      (->> (outliner-core/get-top-level-blocks blocks*)\n           (map :block/uuid)))))\n\n(defn cut-selection-blocks\n  [copy?]\n  (when copy? (copy-selection-blocks))\n  (when-let [blocks (seq (get-selected-blocks))]\n    ;; remove embeds, references and queries\n    (let [dom-blocks (remove (fn [block]\n                           (or (= \"true\" (dom/attr block \"data-transclude\"))\n                               (= \"true\" (dom/attr block \"data-query\")))) blocks)]\n      (when (seq dom-blocks)\n        (let [repo (state/get-current-repo)\n              block-uuids (distinct (map #(uuid (dom/attr % \"blockid\")) dom-blocks))\n              lookup-refs (map (fn [id] [:block/uuid id]) block-uuids)\n              blocks (db/pull-many repo '[*] lookup-refs)]\n          (state/set-copied-full-blocks nil blocks)\n          (delete-blocks! repo block-uuids blocks dom-blocks))))))\n\n(def url-regex\n  \"Didn't use link/plain-link as it is incorrectly detects words as urls.\"\n  #\"[^\\s\\(\\[]+://[^\\s\\)\\]]+\")\n\n(defn extract-nearest-link-from-text\n  [text pos & additional-patterns]\n  (let [page-pattern #\"\\[\\[([^\\]]+)]]\"\n        block-pattern #\"\\(\\(([^\\)]+)\\)\\)\"\n        tag-pattern #\"#\\S+\"\n        page-matches (util/re-pos page-pattern text)\n        block-matches (util/re-pos block-pattern text)\n        tag-matches (util/re-pos tag-pattern text)\n        additional-matches (mapcat #(util/re-pos % text) additional-patterns)\n        matches (->> (concat page-matches block-matches tag-matches additional-matches)\n                     (remove nil?))\n        [_ match] (first (sort-by\n                          (fn [[start-pos content]]\n                            (let [end-pos (+ start-pos (count content))]\n                              (cond\n                                (< pos start-pos)\n                                (- pos start-pos)\n\n                                (> pos end-pos)\n                                (- end-pos pos)\n\n                                :else\n                                0)))\n                          >\n                          matches))]\n    (when match\n      (cond\n        (some #(re-find % match) additional-patterns)\n        match\n        (string/starts-with? match \"#\")\n        (subs match 1 (count match))\n        :else\n        (subs match 2 (- (count match) 2))))))\n\n(defn- get-nearest-page-or-url\n  \"Return the nearest page-name (not dereferenced, may be an alias), block, tag or url\"\n  []\n  (when-let [block (state/get-edit-block)]\n    (when (:block/uuid block)\n      (when-let [edit-id (state/get-edit-input-id)]\n        (when-let [input (gdom/getElement edit-id)]\n          (when-let [pos (cursor/pos input)]\n            (let [value (gobj/get input \"value\")]\n              (extract-nearest-link-from-text value pos url-regex))))))))\n\n(defn- get-nearest-page\n  \"Return the nearest page-name (not dereferenced, may be an alias), block or tag\"\n  []\n  (when-let [block (state/get-edit-block)]\n    (when (:block/uuid block)\n      (when-let [edit-id (state/get-edit-input-id)]\n        (when-let [input (gdom/getElement edit-id)]\n          (when-let [pos (cursor/pos input)]\n            (let [value (gobj/get input \"value\")]\n              (extract-nearest-link-from-text value pos))))))))\n\n(defn follow-link-under-cursor!\n  []\n  (when-let [page (get-nearest-page-or-url)]\n    (when-not (string/blank? page)\n      (if (re-find url-regex page)\n        (js/window.open page)\n        (let [page-name (db-model/get-redirect-page-name page)]\n          (state/clear-edit!)\n          (insert-first-page-block-if-not-exists! page-name))))))\n\n(defn open-link-in-sidebar!\n  []\n  (when-let [page (get-nearest-page)]\n    (let [page-name (string/lower-case page)\n          block? (gp-util/uuid-string? page-name)]\n      (when-let [page (db/get-page page-name)]\n        (if block?\n          (state/sidebar-add-block!\n           (state/get-current-repo)\n           (:db/id page)\n           :block)\n          (state/sidebar-add-block!\n           (state/get-current-repo)\n           (:db/id page)\n           :page))))))\n\n(defn zoom-in! []\n  (if (state/editing?)\n    (when-let [id (some-> (state/get-edit-block)\n                          :block/uuid\n                          ((fn [id] [:block/uuid id]))\n                          db/entity\n                          :block/uuid)]\n      (let [pos (state/get-edit-pos)]\n        (route-handler/redirect-to-page! id)\n        (js/setTimeout #(edit-block! {:block/uuid id} pos id) 0)))\n    (js/window.history.forward)))\n\n(defn zoom-out!\n  []\n  (if (state/editing?)\n    (let [page (state/get-current-page)\n          block-id (and\n                    (string? page)\n                    (gp-util/uuid-string? page)\n                    (medley/uuid page))]\n      (when block-id\n        (let [block-parent (db/get-block-parent block-id)]\n          (if-let [id (and\n                       (nil? (:block/name block-parent))\n                       (:block/uuid block-parent))]\n            (do\n              (route-handler/redirect-to-page! id)\n              (js/setTimeout #(edit-block! {:block/uuid block-id} :max block-id) 0))\n            (let [page-id (some-> (db/entity [:block/uuid block-id])\n                                  :block/page\n                                  :db/id)]\n\n              (when-let [page-name (:block/name (db/entity page-id))]\n                (route-handler/redirect-to-page! page-name)\n                (js/setTimeout #(edit-block! {:block/uuid block-id} :max block-id) 0)))))))\n    (js/window.history.back)))\n\n(defn cut-block!\n  [block-id]\n  (when-let [block (db/pull [:block/uuid block-id])]\n    (let [repo (state/get-current-repo)\n          ;; TODO: support org mode\n          md-content (compose-copied-blocks-contents repo [block-id])]\n      (state/set-copied-full-blocks md-content [block])\n      (common-handler/copy-to-clipboard-without-id-property! (:block/format block) md-content)\n      (delete-block-aux! block true))))\n\n(defn clear-last-selected-block!\n  []\n  (let [block (state/drop-last-selection-block!)]\n    (util/select-unhighlight! [block])))\n\n(defn highlight-selection-area!\n  [end-block]\n  (when-let [start-block (state/get-selection-start-block)]\n    (let [blocks (util/get-nodes-between-two-nodes start-block end-block \"ls-block\")\n          direction (util/get-direction-between-two-nodes start-block end-block \"ls-block\")\n\n          blocks (if (= :up direction)\n                   (reverse blocks)\n                   blocks)]\n      (state/exit-editing-and-set-selected-blocks! blocks direction))))\n\n(defn- select-block-up-down\n  [direction]\n  (cond\n      ;; when editing, quit editing and select current block\n    (state/editing?)\n    (state/exit-editing-and-set-selected-blocks! [(gdom/getElement (state/get-editing-block-dom-id))])\n\n      ;; when selection and one block selected, select next block\n    (and (state/selection?) (== 1 (count (state/get-selection-blocks))))\n    (let [f (if (= :up direction) util/get-prev-block-non-collapsed util/get-next-block-non-collapsed-skip)\n          element (f (first (state/get-selection-blocks)))]\n      (when element\n        (state/conj-selection-block! element direction)))\n\n      ;; if same direction, keep conj on same direction\n    (and (state/selection?) (= direction (state/get-selection-direction)))\n    (let [f (if (= :up direction) util/get-prev-block-non-collapsed util/get-next-block-non-collapsed-skip)\n          first-last (if (= :up direction) first last)\n          element (f (first-last (state/get-selection-blocks)))]\n      (when element\n        (state/conj-selection-block! element direction)))\n\n      ;; if different direction, keep clear until one left\n    (state/selection?)\n    (clear-last-selected-block!)))\n\n(defn on-select-block\n  [direction]\n  (fn [_event]\n    (select-block-up-down direction)))\n\n(defn save-block-aux!\n  [block value opts]\n  (let [value (string/trim value)]\n    ;; FIXME: somehow frontend.components.editor's will-unmount event will loop forever\n    ;; maybe we shouldn't save the block/file in \"will-unmount\" event?\n    (save-block-if-changed! block value\n                            (merge\n                             {:init-properties (:block/properties block)}\n                             opts))))\n\n(defn save-block!\n  ([repo block-or-uuid content]\n   (let [block (if (or (uuid? block-or-uuid)\n                       (string? block-or-uuid))\n                 (db-model/query-block-by-uuid block-or-uuid) block-or-uuid)\n         format (:block/format block)]\n     (save-block! {:block block :repo repo :format format} content)))\n  ([{:keys [block repo] :as _state} value]\n   (when (:db/id (db/entity repo [:block/uuid (:block/uuid block)]))\n     (save-block-aux! block value {}))))\n\n(defn save-current-block!\n  \"skip-properties? if set true, when editing block is likely be properties, skip saving\"\n  ([]\n   (save-current-block! {}))\n  ([{:keys [force? skip-properties? current-block] :as opts}]\n   ;; non English input method\n   (when-not (state/editor-in-composition?)\n     (when (state/get-current-repo)\n       (when (and (not @commands/*show-commands)\n                  (not @commands/*show-block-commands)\n                  (not (state/get-editor-show-page-search?))\n                  (not (state/get-editor-show-page-search-hashtag?))\n                  (not (state/get-editor-show-block-search?))\n                  (not (state/get-editor-show-date-picker?))\n                  (not (state/get-editor-show-template-search?))\n                  (not (state/get-editor-show-input)))\n         (try\n           (let [input-id (state/get-edit-input-id)\n                 block (state/get-edit-block)\n                 db-block (when-let [block-id (:block/uuid block)]\n                            (db/pull [:block/uuid block-id]))\n                 elem (and input-id (gdom/getElement input-id))\n                 db-content (:block/content db-block)\n                 db-content-without-heading (and db-content\n                                                 (gp-util/safe-subs db-content (:block/level db-block)))\n                 value (or (:block/content current-block)\n                           (and elem (gobj/get elem \"value\")))]\n             (cond\n               force?\n               (save-block-aux! db-block value opts)\n\n               (and skip-properties?\n                    (db-model/top-block? block)\n                    (when elem (thingatpt/properties-at-point elem)))\n               nil\n\n               (and block value db-content-without-heading\n                    (not= (string/trim db-content-without-heading)\n                          (string/trim value)))\n               (save-block-aux! db-block value opts)))\n           (catch js/Error error\n             (log/error :save-block-failed error))))))))\n\n(defn- clean-content!\n  [format content]\n  (->> (text/remove-level-spaces content format (config/get-block-pattern format))\n       (drawer/remove-logbook)\n       (property/remove-properties format)\n       string/trim))\n\n(defn insert-command!\n  [id command-output format {:keys [restore?]\n                             :or {restore? true}\n                             :as option}]\n  (cond\n    ;; replace string\n    (string? command-output)\n    (commands/insert! id command-output option)\n\n    ;; steps\n    (vector? command-output)\n    (commands/handle-steps command-output format)\n\n    (fn? command-output)\n    (let [s (command-output)]\n      (commands/insert! id s option))\n\n    :else\n    nil)\n\n  (when restore?\n    (let [restore-slash-caret-pos? (if (and\n                                        (seq? command-output)\n                                        (= :editor/click-hidden-file-input\n                                           (ffirst command-output)))\n                                     false\n                                     true)]\n      (commands/restore-state restore-slash-caret-pos?))))\n\n(defn get-asset-file-link\n  [format url file-name image?]\n  (let [pdf? (and url (string/ends-with? url \".pdf\"))]\n    (case (keyword format)\n      :markdown (util/format (str (when (or image? pdf?) \"!\") \"[%s](%s)\") file-name url)\n      :org (if image?\n             (util/format \"[[%s]]\" url)\n             (util/format \"[[%s][%s]]\" url file-name))\n      nil)))\n\n(defn ensure-assets-dir!\n  [repo]\n  (let [repo-dir (config/get-repo-dir repo)\n        assets-dir \"assets\"]\n    (p/then\n     (fs/mkdir-if-not-exists (str repo-dir \"/\" assets-dir))\n     (fn [] [repo-dir assets-dir]))))\n\n(defn get-asset-path [filename]\n  (p/let [[repo-dir assets-dir] (ensure-assets-dir! (state/get-current-repo))\n          path (path/join repo-dir assets-dir filename)]\n    (if (mobile-util/native-android?)\n      path\n      (js/encodeURI (js/decodeURI path)))))\n\n(defn save-assets!\n  ([_ repo files]\n   (p/let [[repo-dir assets-dir] (ensure-assets-dir! repo)]\n     (save-assets! repo repo-dir assets-dir files\n                   (fn [index file-base]\n                     ;; TODO: maybe there're other chars we need to handle?\n                     (let [file-base (-> file-base\n                                         (string/replace \" \" \"_\")\n                                         (string/replace \"%\" \"_\")\n                                         (string/replace \"/\" \"_\"))\n                           file-name (str file-base \"_\" (.now js/Date) \"_\" index)]\n                       (string/replace file-name #\"_+\" \"_\"))))))\n  ([repo dir path files gen-filename]\n   (p/all\n    (for [[index ^js file] (map-indexed vector files)]\n      ;; WARN file name maybe fully qualified path when paste file\n      (let [file-name (util/node-path.basename (.-name file))\n            [file-base ext] (if file-name\n                              (let [last-dot-index (string/last-index-of file-name \".\")]\n                                [(subs file-name 0 last-dot-index)\n                                 (subs file-name last-dot-index)])\n                              [\"\" \"\"])\n            filename (str (gen-filename index file-base) ext)\n            filename (str path \"/\" filename)]\n                                        ;(js/console.debug \"Write asset #\" dir filename file)\n        (if (util/electron?)\n          (let [from (.-path file)\n                from (if (string/blank? from) nil from)]\n            (p/then (js/window.apis.copyFileToAssets dir filename from)\n                    #(p/resolved [filename (if (string? %) (js/File. #js[] %) file) (.join util/node-path dir filename)])))\n          (p/then (fs/write-file! repo dir filename (.stream file) nil)\n                  #(p/resolved [filename file]))))))))\n\n(defonce *assets-url-cache (atom {}))\n\n(defn make-asset-url\n  [path] ;; path start with \"/assets\" or compatible for \"../assets\"\n  (let [repo-dir (config/get-repo-dir (state/get-current-repo))\n        path (string/replace path \"../\" \"/\")]\n    (cond\n      (util/electron?)\n      (str \"assets://\" repo-dir path)\n\n      (mobile-util/is-native-platform?)\n      (mobile-util/convert-file-src (str repo-dir path))\n\n      :else\n      (let [handle-path (str \"handle\" repo-dir path)\n            cached-url (get @*assets-url-cache (keyword handle-path))]\n        (if cached-url\n          (p/resolved cached-url)\n          (p/let [handle (idb/get-item handle-path)\n                  file (and handle (.getFile handle))]\n            (when file\n              (p/let [url (js/URL.createObjectURL file)]\n                (swap! *assets-url-cache assoc (keyword handle-path) url)\n                url))))))))\n\n(defn delete-asset-of-block!\n  [{:keys [repo href full-text block-id local? delete-local?] :as _opts}]\n  (let [block (db-model/query-block-by-uuid block-id)\n        _ (or block (throw (str block-id \" not exists\")))\n        text (:block/content block)\n        content (string/replace text full-text \"\")]\n    (save-block! repo block content)\n    (when (and local? delete-local?)\n      ;; FIXME: should be relative to current block page path\n      (when-let [href (if (util/electron?) href (second (re-find #\"\\((.+)\\)$\" full-text)))]\n        (fs/unlink! repo\n                    (config/get-repo-path\n                     repo (-> href\n                              (string/replace #\"^../\" \"/\")\n                              (string/replace #\"^assets://\" \"\"))) nil)))))\n\n;; assets/journals_2021_02_03_1612350230540_0.png\n(defn resolve-relative-path\n  [file-path]\n  (if-let [current-file (or (db-model/get-block-file-path (state/get-edit-block))\n                            ;; fix dummy file path of page\n                            (and (util/electron?)\n                                 (util/node-path.join\n                                  (config/get-repo-dir (state/get-current-repo))\n                                  (config/get-pages-directory) \"_.md\")))]\n    (util/get-relative-path current-file file-path)\n    file-path))\n\n(defn upload-asset\n  [id ^js files format uploading? drop-or-paste?]\n  (let [repo (state/get-current-repo)\n        block (state/get-edit-block)]\n    (if (config/local-db? repo)\n      (-> (save-assets! block repo (js->clj files))\n          (p/then\n           (fn [res]\n             (when-let [[asset-file-name file full-file-path] (and (seq res) (first res))]\n               (let [image? (util/ext-of-image? asset-file-name)]\n                 (insert-command!\n                  id\n                  (get-asset-file-link format (resolve-relative-path (or full-file-path asset-file-name))\n                                       (if file (.-name file) (if image? \"image\" \"asset\"))\n                                       image?)\n                  format\n                  {:last-pattern (if drop-or-paste? \"\" (state/get-editor-command-trigger))\n                   :restore?     true})))))\n          (p/finally\n            (fn []\n              (reset! uploading? false)\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process 0))))\n      (image/upload\n       files\n       (fn [file file-name file-type]\n         (image-handler/request-presigned-url\n          file file-name file-type\n          uploading?\n          (fn [signed-url]\n            (insert-command! id\n                             (get-asset-file-link format signed-url file-name true)\n                             format\n                             {:last-pattern (if drop-or-paste? \"\" (state/get-editor-command-trigger))\n                              :restore?     true})\n\n            (reset! *asset-uploading? false)\n            (reset! *asset-uploading-process 0))\n          (fn [e]\n            (let [process (* (/ (gobj/get e \"loaded\")\n                                (gobj/get e \"total\"))\n                             100)]\n              (reset! *asset-uploading? false)\n              (reset! *asset-uploading-process process)))))))))\n\n;; Editor should track some useful information, like editor modes.\n;; For example:\n;; 1. Which file format is it, markdown or org mode?\n;; 2. Is it in the properties area? Then we can enable the \":\" autopair\n(def autopair-map\n  {\"[\" \"]\"\n   \"{\" \"}\"\n   \"(\" \")\"\n   \"`\" \"`\"\n   \"~\" \"~\"\n   \"*\" \"*\"\n   \"_\" \"_\"\n   \"^\" \"^\"\n   \"=\" \"=\"\n   \"/\" \"/\"\n   \"+\" \"+\"})\n;; \":\" \":\"                              ; TODO: only properties editing and org mode tag\n\n(def reversed-autopair-map\n  (zipmap (vals autopair-map)\n          (keys autopair-map)))\n\n(def autopair-when-selected\n  #{\"*\" \"^\" \"_\" \"=\" \"+\" \"/\"})\n\n(def delete-map\n  (assoc autopair-map\n         \"$\" \"$\"\n         \":\" \":\"))\n\n(defn autopair\n  [input-id prefix _format _option]\n  (let [value (get autopair-map prefix)\n        selected (util/get-selected-text)\n        postfix (str selected value)\n        value (str prefix postfix)\n        input (gdom/getElement input-id)]\n    (when value\n      (when-not (string/blank? selected) (reset! *selected-text selected))\n      (let [[prefix _pos] (commands/simple-replace! input-id value selected\n                                                    {:backward-pos (count postfix)\n                                                     :check-fn (fn [new-value prefix-pos]\n                                                                 (when (>= prefix-pos 0)\n                                                                   [(subs new-value prefix-pos (+ prefix-pos 2))\n                                                                    (+ prefix-pos 2)]))})]\n        (case prefix\n          \"[[\"\n          (do\n            (commands/handle-step [:editor/search-page])\n            (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n          \"((\"\n          (do\n            (commands/handle-step [:editor/search-block :reference])\n            (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n          nil)))))\n\n(defn surround-by?\n  [input before end]\n  (when input\n    (let [value (gobj/get input \"value\")\n          pos (cursor/pos input)]\n      (text/surround-by? value pos before end))))\n\n(defn wrapped-by?\n  [input before end]\n  (when input\n    (let [value (gobj/get input \"value\")\n          pos (dec (cursor/pos input))]\n      (when (>= pos 0)\n        (text/wrapped-by? value pos before end)))))\n\n(defn get-matched-pages\n  \"Return matched page names\"\n  [q]\n  (let [block (state/get-edit-block)\n        editing-page (and block\n                          (when-let [page-id (:db/id (:block/page block))]\n                            (:block/name (db/entity page-id))))\n        pages (search/page-search q 20)]\n    (if editing-page\n      ;; To prevent self references\n      (remove (fn [p] (= (util/page-name-sanity-lc p) editing-page)) pages)\n      pages)))\n\n(defn get-matched-blocks\n  [q block-id]\n  ;; remove current block\n  (let [current-block (state/get-edit-block)\n        block-parents (set (->> (db/get-block-parents (state/get-current-repo)\n                                                      block-id\n                                                      99)\n                                (map (comp str :block/uuid))))\n        current-and-parents (set/union #{(str (:block/uuid current-block))} block-parents)]\n    (p/let [result (search/block-search (state/get-current-repo) q {:limit 20})]\n      (remove\n       (fn [h]\n         (contains? current-and-parents (:block/uuid h)))\n       result))))\n\n(defn get-matched-templates\n  [q]\n  (search/template-search q))\n\n(defn get-matched-commands\n  [input]\n  (try\n    (let [edit-content (or (gobj/get input \"value\") \"\")\n          pos (cursor/pos input)\n          last-slash-caret-pos (:pos @*slash-caret-pos)\n          last-command (and last-slash-caret-pos (subs edit-content last-slash-caret-pos pos))]\n      (when (> pos 0)\n        (or\n         (and (= (state/get-editor-command-trigger) (util/nth-safe edit-content (dec pos)))\n              @commands/*initial-commands)\n         (and last-command\n              (commands/get-matched-commands last-command)))))\n    (catch js/Error e\n      (js/console.error e)\n      nil)))\n\n(defn get-matched-block-commands\n  [input]\n  (try\n    (let [edit-content (gobj/get input \"value\")\n          pos (cursor/pos input)\n          last-command (subs edit-content\n                             (:pos @*angle-bracket-caret-pos)\n                             pos)]\n      (when (> pos 0)\n        (or\n         (and (= \\< (util/nth-safe edit-content (dec pos)))\n              (commands/block-commands-map))\n         (and last-command\n              (commands/get-matched-commands\n               last-command\n               (commands/block-commands-map))))))\n    (catch js/Error _error\n      nil)))\n\n(defn auto-complete?\n  []\n  (or @*show-commands\n      @*show-block-commands\n      @*asset-uploading?\n      (state/get-editor-show-input)\n      (state/get-editor-show-page-search?)\n      (state/get-editor-show-block-search?)\n      (state/get-editor-show-template-search?)\n      (state/get-editor-show-date-picker?)))\n\n(defn get-current-input-char\n  [input]\n  (when-let [pos (cursor/pos input)]\n    (let [value (gobj/get input \"value\")]\n      (when (and (>= (count value) (inc pos))\n                 (>= pos 1))\n        (util/nth-safe value pos)))))\n\n(defn move-up-down\n  [up?]\n  (fn [event]\n    (util/stop event)\n    (let [edit-block-id (:block/uuid (state/get-edit-block))\n          move-nodes (fn [blocks]\n                       (outliner-tx/transact!\n                         {:outliner-op :move-blocks}\n                         (save-current-block!)\n                         (outliner-core/move-blocks-up-down! blocks up?))\n                       (when-let [block-node (util/get-first-block-by-id (:block/uuid (first blocks)))]\n                         (.scrollIntoView block-node #js {:behavior \"smooth\" :block \"nearest\"})))]\n      (if edit-block-id\n        (when-let [block (db/pull [:block/uuid edit-block-id])]\n          (let [blocks [block]]\n            (move-nodes blocks))\n          (when-let [input-id (state/get-edit-input-id)]\n            (when-let [input (gdom/getElement input-id)]\n              (.focus input))))\n        (let [ids (state/get-selection-block-ids)]\n          (when (seq ids)\n            (let [lookup-refs (map (fn [id] [:block/uuid id]) ids)\n                  blocks (db/pull-many (state/get-current-repo) '[*] lookup-refs)]\n              (move-nodes blocks))))))))\n\n(defn get-selected-ordered-blocks\n  []\n  (let [repo (state/get-current-repo)\n        ids (state/get-selection-block-ids)\n        lookup-refs (->> (map (fn [id] [:block/uuid id]) ids)\n                         (remove nil?))]\n    (db/pull-many repo '[*] lookup-refs)))\n\n(defn on-tab\n  \"`direction` = :left | :right.\"\n  [direction]\n  (let [blocks (get-selected-ordered-blocks)]\n    (when (seq blocks)\n      (outliner-tx/transact!\n        {:outliner-op :move-blocks}\n        (outliner-core/indent-outdent-blocks! blocks (= direction :right))))))\n\n(defn- get-link [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util/format \"[%s](%s)\" label link)\n      :org (util/format \"[[%s][%s]]\" link label)\n      nil)))\n\n(defn- get-image-link\n  [format link label]\n  (let [link (or link \"\")\n        label (or label \"\")]\n    (case (keyword format)\n      :markdown (util/format \"![%s](%s)\" label link)\n      :org (util/format \"[[%s]]\"))))\n\n(defn handle-command-input [command id format m]\n  ;; TODO: Add error handling for when user doesn't provide a required field.\n  ;; (The current behavior is to just revert back to the editor.)\n  (case command\n\n    :link (let [{:keys [link label]} m]\n            (when-not (or (string/blank? link) (string/blank? label))\n              (insert-command!\n               id\n               (get-link format link label)\n               format\n               {:last-pattern (str (state/get-editor-command-trigger) \"link\")})))\n\n    :image-link (let [{:keys [link label]} m]\n                  (when (not (string/blank? link))\n                    (insert-command!\n                     id\n                     (get-image-link format link label)\n                     format\n                     {:last-pattern (str (state/get-editor-command-trigger) \"link\")})))\n\n    nil)\n\n  (state/set-editor-show-input! nil)\n\n  (when-let [saved-cursor (state/get-editor-last-pos)]\n    (when-let [input (gdom/getElement id)]\n      (.focus input)\n      (cursor/move-cursor-to input saved-cursor))))\n\n(defn get-search-q\n  []\n  (when-let [id (state/get-edit-input-id)]\n    (when-let [input (gdom/getElement id)]\n      (let [current-pos (cursor/pos input)\n            pos (state/get-editor-last-pos)\n            edit-content (or (state/sub [:editor/content id]) \"\")]\n        (or\n         @*selected-text\n         (gp-util/safe-subs edit-content pos current-pos))))))\n\n(defn close-autocomplete-if-outside\n  [input]\n  (when (and input\n             (or (state/get-editor-show-page-search?)\n                 (state/get-editor-show-page-search-hashtag?)\n                 (state/get-editor-show-block-search?))\n             (not (wrapped-by? input \"[[\" \"]]\")))\n    (when (get-search-q)\n      (let [value (gobj/get input \"value\")\n            pos (state/get-editor-last-pos)\n            current-pos (cursor/pos input)\n            between (gp-util/safe-subs value (min pos current-pos) (max pos current-pos))]\n        (when (and between\n                   (or\n                    (string/includes? between \"[\")\n                    (string/includes? between \"]\")\n                    (string/includes? between \"(\")\n                    (string/includes? between \")\")))\n          (state/set-editor-show-block-search! false)\n          (state/set-editor-show-page-search! false)\n          (state/set-editor-show-page-search-hashtag! false))))))\n\n(defn resize-image!\n  [block-id metadata full_text size]\n  (let [new-meta (merge metadata size)\n        image-part (first (string/split full_text #\"\\{\"))\n        new-full-text (str image-part (pr-str new-meta))\n        block (db/pull [:block/uuid block-id])\n        value (:block/content block)\n        new-value (string/replace value full_text new-full-text)]\n    (save-block-aux! block new-value {})))\n\n(defn- mark-last-input-time!\n  [repo]\n  (when repo\n    (state/set-editor-last-input-time! repo (util/time-ms))\n    (db/clear-repo-persistent-job! repo)))\n\n(defonce *auto-save-timeout (atom nil))\n(defn edit-box-on-change!\n  [e _block id]\n  (let [value (util/evalue e)\n        repo (state/get-current-repo)]\n    (state/set-edit-content! id value false)\n    (when @*auto-save-timeout\n      (js/clearTimeout @*auto-save-timeout))\n    (mark-last-input-time! repo)\n    (reset! *auto-save-timeout\n            (js/setTimeout\n             (fn []\n               (when (state/input-idle? repo)\n                 (state/set-editor-op! :auto-save)\n                 ; don't auto-save for page's properties block\n                 (save-current-block! {:skip-properties? true})\n                 (state/set-editor-op! nil)))\n             500))))\n\n(defn handle-last-input []\n  (let [input           (state/get-input)\n        pos             (cursor/pos input)\n        last-input-char (util/nth-safe (.-value input) (dec pos))]\n\n    ;; TODO: is it cross-browser compatible?\n    ;; (not= (gobj/get native-e \"inputType\") \"insertFromPaste\")\n    (when (= last-input-char (state/get-editor-command-trigger))\n      (when (seq (get-matched-commands input))\n        (reset! commands/*slash-caret-pos (cursor/get-caret-pos input))\n        (reset! commands/*show-commands true)))\n\n    (if (= last-input-char commands/angle-bracket)\n      (when (seq (get-matched-block-commands input))\n        (reset! commands/*angle-bracket-caret-pos (cursor/get-caret-pos input))\n        (reset! commands/*show-block-commands true))\n      nil)))\n\n(defn block-on-chosen-handler\n  [_input id q format]\n  (fn [chosen _click?]\n    (state/set-editor-show-block-search! false)\n    (let [uuid-string (str (:block/uuid chosen))]\n\n      ;; block reference\n      (insert-command! id\n                       (util/format \"((%s))\" uuid-string)\n                       format\n                       {:last-pattern (str \"((\" (if @*selected-text \"\" q))\n                        :end-pattern \"))\"\n                        :postfix-fn   (fn [s] (util/replace-first \"))\" s \"\"))\n                        :forward-pos 3})\n\n      ;; Save it so it'll be parsed correctly in the future\n      (set-block-property! (:block/uuid chosen)\n                           :id\n                           uuid-string)\n\n      (when-let [input (gdom/getElement id)]\n        (.focus input)))))\n\n(defn block-non-exist-handler\n  [input]\n  (fn []\n    (state/set-editor-show-block-search! false)\n    (cursor/move-cursor-forward input 2)))\n\n(defn- paste-block-cleanup\n  [block page exclude-properties format content-update-fn]\n  (let [new-content\n        (if content-update-fn\n          (content-update-fn (:block/content block))\n          (:block/content block))\n        new-content\n        (->> new-content\n             (property/remove-property format \"id\")\n             (property/remove-property format \"custom_id\"))]\n    (merge (dissoc block\n                   :block/pre-block?\n                   :block/meta)\n           {:block/page {:db/id (:db/id page)}\n            :block/format format\n            :block/properties (apply dissoc (:block/properties block)\n                                (concat [:id :custom_id :custom-id]\n                                        exclude-properties))\n            :block/content new-content\n            :block/path-refs (->> (cons (:db/id page) (:block/path-refs block))\n                                  (remove nil?))})))\n\n(defn- edit-last-block-after-inserted!\n  [result]\n  (js/setTimeout\n   (fn []\n     (when-let [last-block (last (:blocks result))]\n       (clear-when-saved!)\n       (let [last-block' (db/pull [:block/uuid (:block/uuid last-block)])]\n         (edit-block! last-block' :max (:block/uuid last-block')))))\n   0))\n\n(defn paste-blocks\n  [blocks {:keys [content-update-fn\n                  exclude-properties\n                  target-block\n                  sibling?]\n           :or {exclude-properties []}}]\n  (let [editing-block (when-let [editing-block (state/get-edit-block)]\n                        (some-> (db/pull (:db/id editing-block))\n                                (assoc :block/content (state/get-edit-content))))\n        target-block (or target-block editing-block)\n        block (db/entity (:db/id target-block))\n        page (if (:block/name block) block\n                 (when target-block (:block/page (db/entity (:db/id target-block)))))\n        target-block (or target-block editing-block)\n        sibling? (cond\n                   (some? sibling?)\n                   sibling?\n\n                   (db/has-children? (:block/uuid target-block))\n                   false\n\n                   :else\n                   true)]\n    (outliner-tx/transact!\n      {:outliner-op :insert-blocks}\n      (when editing-block\n        (outliner-core/save-block! editing-block))\n      (when target-block\n        (let [format (or (:block/format target-block) (state/get-preferred-format))\n              blocks' (map (fn [block]\n                             (paste-block-cleanup block page exclude-properties format content-update-fn))\n                        blocks)\n              result (outliner-core/insert-blocks! blocks' target-block {:sibling? sibling?})]\n          (edit-last-block-after-inserted! result))))))\n\n(defn- block-tree->blocks\n  [tree-vec format]\n  (->> (outliner-core/tree-vec-flatten tree-vec)\n       (map (fn [block]\n              (let [content (:content block)\n                    props (into [] (:properties block))\n                    content* (str (if (= :markdown format) \"- \" \"* \")\n                                  (property/insert-properties format content props))\n                    ast (mldoc/->edn content* (gp-mldoc/default-config format))\n                    blocks (block/extract-blocks ast content* true format)\n                    fst-block (first blocks)]\n                (assert fst-block \"fst-block shouldn't be nil\")\n                (assoc fst-block :block/level (:block/level block)))))))\n\n(defn insert-block-tree-after-target\n  \"`tree-vec`: a vector of blocks.\n   Block element: {:content :properties :children [block-1, block-2, ...]}\"\n  [target-block-id sibling? tree-vec format]\n  (let [blocks (block-tree->blocks tree-vec format)\n        target-block (db/pull target-block-id)\n        page-id (:db/id (:block/page target-block))\n        blocks (block/with-parent-and-left page-id blocks)]\n    (paste-blocks\n     blocks\n     {:target-block target-block\n      :sibling? sibling?})))\n\n(defn insert-template!\n  ([element-id db-id]\n   (insert-template! element-id db-id {}))\n  ([element-id db-id {:keys [target] :as opts}]\n   (when-let [db-id (if (integer? db-id)\n                      db-id\n                      (:db/id (db-model/get-template-by-name (name db-id))))]\n     (let [repo (state/get-current-repo)\n           target (or target (state/get-edit-block))\n           block (db/entity db-id)\n           format (:block/format block)\n           block-uuid (:block/uuid block)\n           template-including-parent? (not (false? (:template-including-parent (:block/properties block))))\n           blocks (db/get-block-and-children repo block-uuid)\n           root-block (db/pull db-id)\n           blocks-exclude-root (remove (fn [b] (= (:db/id b) db-id)) blocks)\n           sorted-blocks (tree/sort-blocks blocks-exclude-root root-block)\n           blocks (if template-including-parent?\n                    sorted-blocks\n                    (drop 1 sorted-blocks))]\n       (when element-id\n         (insert-command! element-id \"\" format {}))\n       (let [exclude-properties [:id :template :template-including-parent]\n             content-update-fn (fn [content]\n                                 (->> content\n                                      (property/remove-property format \"template\")\n                                      (property/remove-property format \"template-including-parent\")\n                                      template/resolve-dynamic-template!))\n             page (if (:block/name block) block\n                      (when target (:block/page (db/entity (:db/id target)))))\n             blocks' (map (fn [block]\n                            (paste-block-cleanup block page exclude-properties format content-update-fn))\n                       blocks)\n             sibling? (:sibling? opts)\n             sibling?' (cond\n                         (some? sibling?)\n                         sibling?\n\n                         (db/has-children? (:block/uuid target))\n                         false\n\n                         :else\n                         true)]\n         (outliner-tx/transact!\n           {:outliner-op :insert-blocks}\n           (save-current-block!)\n           (let [result (outliner-core/insert-blocks! blocks'\n                                                      target\n                                                      (assoc opts :sibling? sibling?'))]\n             (edit-last-block-after-inserted! result))))))))\n\n(defn template-on-chosen-handler\n  [element-id]\n  (fn [[_template db-id] _click?]\n    (insert-template! element-id db-id\n                      {:replace-empty-target? true})))\n\n(defn parent-is-page?\n  [{{:block/keys [parent page]} :data :as node}]\n  {:pre [(tree/satisfied-inode? node)]}\n  (= parent page))\n\n(defn outdent-on-enter\n  [node]\n  (when-not (parent-is-page? node)\n    (let [parent-node (tree/-get-parent node)]\n      (outliner-tx/transact!\n        {:outliner-op :move-blocks}\n        (save-current-block!)\n        (outliner-core/move-blocks! [(:data node)] (:data parent-node) true)))))\n\n(defn- last-top-level-child?\n  [{:keys [id]} current-node]\n  (when id\n    (when-let [entity (if (gp-util/uuid-string? (str id))\n                        (db/entity [:block/uuid (uuid id)])\n                        (db/entity [:block/name (util/page-name-sanity-lc id)]))]\n      (= (:block/uuid entity) (tree/-get-parent-id current-node)))))\n\n(defn- insert\n  [insertion]\n  (when-not (auto-complete?)\n    (let [^js input (state/get-input)\n          selected-start (util/get-selection-start input)\n          selected-end (util/get-selection-end input)\n          value (.-value input)\n          s1 (subs value 0 selected-start)\n          s2 (subs value selected-end)]\n      (state/set-edit-content! (state/get-edit-input-id)\n                               (str s1 insertion s2))\n      (cursor/move-cursor-to input (+ selected-start (count insertion))))))\n\n(defn- keydown-new-line\n  []\n  (insert \"\\n\"))\n\n(declare delete-and-update)\n\n(defn- dwim-in-properties\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state/get-input)\n              content (gobj/get input \"value\")\n              format (:block/format (:block (get-state)))\n              property-key (:raw-content (thingatpt/property-key-at-point input))\n              org? (= format :org)\n              move-to-pos (if org? 2 3)]\n          (if org?\n            (cond\n              (and property-key (not= property-key \"\"))\n              (case property-key\n                ;; When cursor in \"PROPERTIES\", add :|: in a new line and move cursor to |\n                \"PROPERTIES\"\n                (do (cursor/move-cursor-to-line-end input)\n                    (insert \"\\n:: \")\n                    (cursor/move-cursor-backward input move-to-pos))\n                ;; When cursor in \"END\", new block (respect the previous enter behavior)\n                \"END\"\n                (do\n                  (cursor/move-cursor-to-end input)\n                  (save-current-block!)\n                  (insert-new-block! state))\n                ;; cursor in other positions of :ke|y: or ke|y::, move to line end for inserting value.\n                (if (property/property-key-exist? format content property-key)\n                  (notification/show!\n                   [:p.content\n                    (util/format \"Property key \\\"%s\\\" already exists!\" property-key)]\n                   :error)\n                  (cursor/move-cursor-to-line-end input)))\n\n              ;; when cursor in empty property key\n              (and property-key (= property-key \"\"))\n              (do (delete-and-update\n                   input\n                   (cursor/line-beginning-pos input)\n                   (inc (cursor/line-end-pos input)))\n                  (property/goto-properties-end format input)\n                  (cursor/move-cursor-to-line-end input))\n              :else\n              ;;When cursor in other place of PROPERTIES drawer, add :|: in a new line and move cursor to |\n              (do\n                (insert \"\\n:: \")\n                (cursor/move-cursor-backward input move-to-pos)))\n            (insert \"\\n\")))))))\n\n(defn toggle-list-checkbox\n  [{:block/keys [content] :as block} old-item-content new-item-content]\n  (let [new-content (string/replace-first content old-item-content new-item-content)]\n    (save-block-if-changed! block new-content)))\n\n(defn- dwim-in-list\n  []\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state/get-input)]\n          (when-let [item (thingatpt/list-item-at-point input)]\n            (let [{:keys [full-content indent bullet checkbox ordered _]} item\n                  next-bullet (if ordered (str (inc bullet) \".\") bullet)\n                  checkbox (when checkbox \"[ ] \")]\n              (if (and\n                   (= (count full-content)\n                      (+ (if ordered (+ (count (str bullet)) 2) 2) (when checkbox (count checkbox))))\n                   (string/includes? (.-value input) \"\\n\"))\n                (delete-and-update input (cursor/line-beginning-pos input) (cursor/line-end-pos input))\n                (let [start-pos (util/get-selection-start input)\n                      value (.-value input)\n                      before (subs value 0 start-pos)\n                      after (subs value start-pos)\n                      cursor-in-item-content? (and (re-find #\"^(\\d+){1}\\.\" (last (string/split-lines before)))\n                                                   (not (string/blank? (first (string/split-lines after)))))]\n                  (when-not cursor-in-item-content?\n                    (cursor/move-cursor-to-line-end input)\n                    (insert (str \"\\n\" indent next-bullet \" \" checkbox)))\n                  (when ordered\n                    (let [value (.-value input)\n                          start-pos (util/get-selection-start input)\n                          after-lists-str (string/trim (subs value start-pos))\n                          after-lists-str (if cursor-in-item-content?\n                                            (str indent next-bullet \" \" after-lists-str)\n                                            after-lists-str)\n                          lines (string/split-lines after-lists-str)\n                          after-lists-str' (list/re-order-items lines (if cursor-in-item-content? bullet (inc bullet)))\n                          value' (str (subs value 0 start-pos) \"\\n\" after-lists-str')\n                          cursor' (if cursor-in-item-content?\n                                    (inc (count (str (subs value 0 start-pos) indent next-bullet \" \")))\n                                    (+ (:end item) (count next-bullet) 2))]\n                      (state/set-edit-content! (state/get-edit-input-id) value')\n                      (cursor/move-cursor-to input cursor'))))))))))))\n\n(defn toggle-list!\n  []\n  (when-not (auto-complete?)\n    (let [{:keys [block]} (get-state)]\n      (when block\n        (let [input (state/get-input)\n              format (or (db/get-page-format (state/get-current-page)) (state/get-preferred-format))\n              new-unordered-bullet (case format :org \"-\" \"*\")\n              current-pos (cursor/pos input)\n              content (state/get-edit-content)\n              pos (atom current-pos)]\n          (if-let [item (thingatpt/list-item-at-point input)]\n            (let [{:keys [ordered]} item\n                  list-beginning-pos (list/list-beginning-pos input)\n                  list-end-pos (list/list-end-pos input)\n                  list (subs content list-beginning-pos list-end-pos)\n                  items (string/split-lines list)\n                  splitter-reg (if ordered #\"[\\d]*\\.\\s*\" #\"[-\\*]{1}\\s*\")\n                  items-without-bullet (vec (map #(last (string/split % splitter-reg 2)) items))\n                  new-list (string/join \"\\n\"\n                                        (if ordered\n                                          (map #(str new-unordered-bullet \" \" %) items-without-bullet)\n                                          (map-indexed #(str (inc %1) \". \" %2) items-without-bullet)))\n                  index-of-current-item (inc (.indexOf items-without-bullet\n                                                       (last (string/split (:raw-content item) splitter-reg 2))))\n                  numbers-length (->> (map-indexed\n                                       #_:clj-kondo/ignore\n                                       #(str (inc %1) \". \")\n                                       (subvec items-without-bullet 0 index-of-current-item))\n                                      string/join\n                                      count)\n                  pos-diff (- numbers-length (* 2 index-of-current-item))]\n              (delete-and-update input list-beginning-pos list-end-pos)\n              (insert new-list)\n              (reset! pos (if ordered\n                            (- current-pos pos-diff)\n                            (+ current-pos pos-diff))))\n            (let [prev-item (list/get-prev-item input)]\n              (cursor/move-cursor-down input)\n              (cursor/move-cursor-to-line-beginning input)\n              (if prev-item\n                (let [{:keys [bullet ordered]} prev-item\n                      current-bullet (if ordered (str (inc bullet) \".\") bullet)]\n                  (insert (str current-bullet \" \"))\n                  (reset! pos (+ current-pos (count current-bullet) 1)))\n                (do (insert (str new-unordered-bullet \" \"))\n                    (reset! pos (+ current-pos 2))))))\n          (cursor/move-cursor-to input @pos))))))\n\n(defn toggle-page-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state/get-input)\n            new-pos (cursor/get-caret-pos input)\n            page-ref-fn (fn [bounds backward-pos]\n                          (commands/simple-insert!\n                           parent-id bounds\n                           {:backward-pos backward-pos\n                            :check-fn (fn [_ _ _]\n                                        (reset! commands/*slash-caret-pos new-pos)\n                                        (commands/handle-step [:editor/search-page]))}))]\n        (state/set-editor-show-page-search! false)\n        (let [selection (get-selection-and-format)\n              {:keys [selection-start selection-end selection]} selection]\n          (if selection\n            (do (delete-and-update input selection-start selection-end)\n                (insert (util/format \"[[%s]]\" selection)))\n            (if-let [embed-ref (thingatpt/embed-macro-at-point input)]\n              (let [{:keys [raw-content start end]} embed-ref]\n                (delete-and-update input start end)\n                (if (= 5 (count raw-content))\n                  (page-ref-fn \"[[]]\" 2)\n                  (insert raw-content)))\n              (if-let [page-ref (thingatpt/page-ref-at-point input)]\n                (let [{:keys [start end full-content raw-content]} page-ref]\n                  (delete-and-update input start end)\n                  (if (= raw-content \"\")\n                    (page-ref-fn \"{{embed [[]]}}\" 4)\n                    (insert (util/format \"{{embed %s}}\" full-content))))\n                (page-ref-fn \"[[]]\" 2)))))))))\n\n(defn toggle-block-reference-embed\n  [parent-id]\n  (let [{:keys [block]} (get-state)]\n    (when block\n      (let [input (state/get-input)\n            new-pos (cursor/get-caret-pos input)\n            block-ref-fn (fn [bounds backward-pos]\n                           (commands/simple-insert!\n                            parent-id bounds\n                            {:backward-pos backward-pos\n                             :check-fn     (fn [_ _ _]\n                                             (reset! commands/*slash-caret-pos new-pos)\n                                             (commands/handle-step [:editor/search-block]))}))]\n        (state/set-editor-show-block-search! false)\n        (if-let [embed-ref (thingatpt/embed-macro-at-point input)]\n          (let [{:keys [raw-content start end]} embed-ref]\n            (delete-and-update input start end)\n            (if (= 5 (count raw-content))\n              (block-ref-fn \"(())\" 2)\n              (insert raw-content)))\n          (if-let [page-ref (thingatpt/block-ref-at-point input)]\n            (let [{:keys [start end full-content raw-content]} page-ref]\n              (delete-and-update input start end)\n              (if (= raw-content \"\")\n                (block-ref-fn \"{{embed (())}}\" 4)\n                (insert (util/format \"{{embed %s}}\" full-content))))\n            (block-ref-fn \"(())\" 2)))))))\n\n(defn- keydown-new-block\n  [state]\n  (when-not (auto-complete?)\n    (let [{:keys [block config]} (get-state)]\n      (when block\n        (let [input (state/get-input)\n              content (gobj/get input \"value\")\n              pos (cursor/pos input)\n              current-node (outliner-core/block block)\n              has-right? (-> (tree/-get-right current-node)\n                             (tree/satisfied-inode?))\n              thing-at-point ;intern is not supported in cljs, need a more elegant solution\n              (or (when (thingatpt/get-setting :admonition&src?)\n                    (thingatpt/admonition&src-at-point input))\n                  (when (thingatpt/get-setting :markup?)\n                    (thingatpt/markup-at-point input))\n                  (when (thingatpt/get-setting :block-ref?)\n                    (thingatpt/block-ref-at-point input))\n                  (when (thingatpt/get-setting :page-ref?)\n                    (thingatpt/page-ref-at-point input))\n                  (when (thingatpt/get-setting :properties?)\n                    (thingatpt/properties-at-point input))\n                  (when (thingatpt/get-setting :list?)\n                    (and (not (cursor/beginning-of-line? input))\n                         (thingatpt/list-item-at-point input))))]\n          (cond\n            thing-at-point\n            (case (:type thing-at-point)\n              \"markup\" (let [right-bound (:bounds thing-at-point)]\n                         (cursor/move-cursor-to\n                          input\n                          (+ (string/index-of content right-bound pos)\n                             (count right-bound))))\n              \"admonition-block\" (keydown-new-line)\n              \"source-block\" (do\n                               (keydown-new-line)\n                               (case (:action thing-at-point)\n                                 :into-code-editor\n                                 (state/into-code-editor-mode!)\n                                 nil))\n              \"block-ref\" (open-block-in-sidebar! (:link thing-at-point))\n              \"page-ref\" (when-not (string/blank? (:link thing-at-point))\n                           (let [page (:link thing-at-point)\n                                 page-name (db-model/get-redirect-page-name page)]\n                             (insert-first-page-block-if-not-exists! page-name)))\n              \"list-item\" (dwim-in-list)\n              \"properties-drawer\" (dwim-in-properties state))\n\n            (and\n             (string/blank? content)\n             (not has-right?)\n             (not (last-top-level-child? config current-node)))\n            (outdent-on-enter current-node)\n\n            :else\n            (profile\n             \"Insert block\"\n             (do (save-current-block!)\n                 (insert-new-block! state)))))))))\n\n(defn keydown-new-block-handler [state e]\n  (if (state/doc-mode-enter-for-new-line?)\n    (keydown-new-line)\n    (do\n      (.preventDefault e)\n      (keydown-new-block state))))\n\n(defn keydown-new-line-handler [state e]\n  (if (state/doc-mode-enter-for-new-line?)\n    (keydown-new-block state)\n    (do\n      (.preventDefault e)\n      (keydown-new-line))))\n\n(defn- select-first-last\n  \"Select first or last block in viewpoint\"\n  [direction]\n  (let [f (case direction :up last :down first)\n        block (->> (util/get-blocks-noncollapse)\n                   (f))]\n    (when block\n      (.scrollIntoView block #js {:behavior \"smooth\" :block \"center\"})\n      (state/exit-editing-and-set-selected-blocks! [block]))))\n\n(defn- select-up-down [direction]\n  (let [selected (first (state/get-selection-blocks))\n        f (case direction\n            :up util/get-prev-block-non-collapsed\n            :down util/get-next-block-non-collapsed)\n        sibling-block (f selected)]\n    (when (and sibling-block (dom/attr sibling-block \"blockid\"))\n      (.scrollIntoView sibling-block #js {:behavior \"smooth\" :block \"center\"})\n      (state/exit-editing-and-set-selected-blocks! [sibling-block]))))\n\n(defn- move-cross-boundrary-up-down\n  [direction]\n  (let [input (state/get-input)\n        line-pos (util/get-first-or-last-line-pos input)\n        repo (state/get-current-repo)\n        f (case direction\n            :up util/get-prev-block-non-collapsed\n            :down util/get-next-block-non-collapsed)\n        sibling-block (f (gdom/getElement (state/get-editing-block-dom-id)))\n        {:block/keys [uuid content format]} (state/get-edit-block)]\n    (when sibling-block\n      (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n        (let [value (state/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string/trim value))\n            (save-block! repo uuid value)))\n\n        (let [new-id (string/replace (gobj/get sibling-block \"id\") \"ls-block\" \"edit-block\")\n              new-uuid (cljs.core/uuid sibling-block-id)\n              block (db/pull repo '[*] [:block/uuid new-uuid])]\n          (edit-block! block\n                       [direction line-pos]\n                       new-id))))))\n\n(defn keydown-up-down-handler\n  [direction]\n  (let [input (state/get-input)\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)\n        up? (= direction :up)\n        down? (= direction :down)]\n    (cond\n      (not= selected-start selected-end)\n      (if up?\n        (cursor/move-cursor-to input selected-start)\n        (cursor/move-cursor-to input selected-end))\n\n      (or (and up? (cursor/textarea-cursor-first-row? input))\n          (and down? (cursor/textarea-cursor-last-row? input)))\n      (move-cross-boundrary-up-down direction)\n\n      :else\n      (if up?\n        (cursor/move-cursor-up input)\n        (cursor/move-cursor-down input)))))\n\n(defn- move-to-block-when-cross-boundrary\n  [direction]\n  (let [up? (= :left direction)\n        pos (if up? :max 0)\n        {:block/keys [format uuid] :as block} (state/get-edit-block)\n        id (state/get-edit-input-id)\n        repo (state/get-current-repo)\n        f (if up? util/get-prev-block-non-collapsed util/get-next-block-non-collapsed)\n        sibling-block (f (gdom/getElement (state/get-editing-block-dom-id)))]\n    (when sibling-block\n      (when-let [sibling-block-id (dom/attr sibling-block \"blockid\")]\n        (let [content (:block/content block)\n              value (state/get-edit-content)]\n          (when (not= (clean-content! format content)\n                      (string/trim value))\n            (save-block! repo uuid value)))\n        (let [block (db/pull repo '[*] [:block/uuid (cljs.core/uuid sibling-block-id)])]\n          (edit-block! block pos id))))))\n\n(defn keydown-arrow-handler\n  [direction]\n  (let [input (state/get-input)\n        element js/document.activeElement\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)\n        left? (= direction :left)\n        right? (= direction :right)]\n    (when (= input element)\n      (cond\n        (not= selected-start selected-end)\n        (if left?\n          (cursor/move-cursor-to input selected-start)\n          (cursor/move-cursor-to input selected-end))\n\n        (or (and left? (cursor/start? input))\n            (and right? (cursor/end? input)))\n        (move-to-block-when-cross-boundrary direction)\n\n        :else\n        (if left?\n          (cursor/move-cursor-backward input)\n          (cursor/move-cursor-forward input))))))\n\n(defn- delete-and-update [^js input start end]\n  (util/safe-set-range-text! input \"\" start end)\n  (state/set-edit-content! (state/get-edit-input-id) (.-value input)))\n\n(defn- delete-concat [current-block]\n  (let [input-id (state/get-edit-input-id)\n        ^js input (state/get-input)\n        current-pos (cursor/pos input)\n        value (gobj/get input \"value\")\n        right (outliner-core/get-right-node (outliner-core/block current-block))\n        current-block-has-children? (db/has-children? (:block/uuid current-block))\n        collapsed? (util/collapsed? current-block)\n        first-child (:data (tree/-get-down (outliner-core/block current-block)))\n        next-block (if (or collapsed? (not current-block-has-children?))\n                     (:data right)\n                     first-child)]\n    (cond\n      (and collapsed? right (db/has-children? (tree/-get-id right)))\n      nil\n\n      (and (not collapsed?) first-child (db/has-children? (:block/uuid first-child)))\n      nil\n\n      :else\n      (do\n        (delete-block-aux! next-block false)\n        (state/set-edit-content! input-id (str value \"\" (:block/content next-block)))\n        (cursor/move-cursor-to input current-pos)))))\n\n(defn keydown-delete-handler\n  [_e]\n  (let [^js input (state/get-input)\n        current-pos (cursor/pos input)\n        value (gobj/get input \"value\")\n        end? (= current-pos (count value))\n        current-block (state/get-edit-block)\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)]\n    (when current-block\n      (cond\n        (not= selected-start selected-end)\n        (delete-and-update input selected-start selected-end)\n\n        (and end? current-block)\n        (delete-concat current-block)\n\n        :else\n        (delete-and-update input current-pos (inc current-pos))))))\n\n(defn keydown-backspace-handler\n  [cut? e]\n  (let [^js input (state/get-input)\n        id (state/get-edit-input-id)\n        current-pos (cursor/pos input)\n        value (gobj/get input \"value\")\n        deleted (and (> current-pos 0)\n                     (util/nth-safe value (dec current-pos)))\n        selected-start (util/get-selection-start input)\n        selected-end (util/get-selection-end input)\n        block (state/get-edit-block)\n        repo (state/get-current-repo)\n        top-block? (= (:block/left block) (:block/page block))\n        root-block? (= (:block/container block) (str (:block/uuid block)))]\n    (mark-last-input-time! repo)\n    (cond\n      (not= selected-start selected-end)\n      (do\n        (util/stop e)\n        (when cut?\n          (js/document.execCommand \"copy\"))\n        (delete-and-update input selected-start selected-end))\n\n      (zero? current-pos)\n      (do\n        (util/stop e)\n        (when (and (if top-block? (string/blank? value) true)\n                   (not root-block?))\n          (delete-block! repo false)))\n\n      (and (> current-pos 1)\n           (= (util/nth-safe value (dec current-pos)) (state/get-editor-command-trigger)))\n      (do\n        (util/stop e)\n        (reset! *slash-caret-pos nil)\n        (reset! *show-commands false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      (and (> current-pos 1)\n           (= (util/nth-safe value (dec current-pos)) commands/angle-bracket))\n      (do\n        (util/stop e)\n        (reset! *angle-bracket-caret-pos nil)\n        (reset! *show-block-commands false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; pair\n      (and\n       deleted\n       (contains?\n        (set (keys delete-map))\n        deleted)\n       (>= (count value) (inc current-pos))\n       (= (util/nth-safe value current-pos)\n          (get delete-map deleted)))\n\n      (do\n        (util/stop e)\n        (commands/delete-pair! id)\n        (cond\n          (and (= deleted \"[\") (state/get-editor-show-page-search?))\n          (state/set-editor-show-page-search! false)\n\n          (and (= deleted \"(\") (state/get-editor-show-block-search?))\n          (state/set-editor-show-block-search! false)\n\n          :else\n          nil))\n\n      ;; deleting hashtag\n      (and (= deleted \"#\") (state/get-editor-show-page-search-hashtag?))\n      (do\n        (state/set-editor-show-page-search-hashtag! false)\n        (delete-and-update input (dec current-pos) current-pos))\n\n      ;; just delete\n      :else\n      (do\n        (util/stop e)\n        (delete-and-update\n         input (util/safe-dec-current-pos-from-end (.-value input) current-pos) current-pos)))))\n\n(defn indent-outdent\n  [indent?]\n  (state/set-editor-op! :indent-outdent)\n  (let [pos (some-> (state/get-input) cursor/pos)\n        {:keys [block]} (get-state)]\n    (when block\n      (state/set-editor-last-pos! pos)\n      (outliner-tx/transact!\n        {:outliner-op :move-blocks}\n        (save-current-block!)\n        (outliner-core/indent-outdent-blocks! [block] indent?)))\n    (state/set-editor-op! :nil)))\n\n(defn keydown-tab-handler\n  [direction]\n  (fn [e]\n    (cond\n      (state/editing?)\n      (when (and (not (state/get-editor-show-input))\n                 (not (state/get-editor-show-date-picker?))\n                 (not (state/get-editor-show-template-search?)))\n        (util/stop e)\n        (indent-outdent (not (= :left direction))))\n\n      (state/selection?)\n      (do\n        (util/stop e)\n        (on-tab direction)))\n    nil))\n\n(defn keydown-not-matched-handler\n  [format]\n  (fn [e _key-code]\n    (let [input-id (state/get-edit-input-id)\n          input (state/get-input)\n          key (gobj/get e \"key\")\n          value (gobj/get input \"value\")\n          ctrlKey (gobj/get e \"ctrlKey\")\n          metaKey (gobj/get e \"metaKey\")\n          pos (cursor/pos input)\n          hashtag? (or (surround-by? input \"#\" \" \")\n                       (surround-by? input \"#\" :end)\n                       (= key \"#\"))]\n      (cond\n        (and (util/event-is-composing? e true) ;; #3218\n             (not hashtag?) ;; #3283 @Rime\n             (not (state/get-editor-show-page-search-hashtag?))) ;; #3283 @MacOS pinyin\n        nil\n\n        (or ctrlKey metaKey)\n        nil\n\n        ;; FIXME: On mobile, a backspace click to call keydown-backspace-handler\n        ;; does not work sometimes in an empty block, hence the empty block\n        ;; can't be deleted. Need to figure out why and find a better solution.\n        (and (mobile-util/is-native-platform?)\n             (= key \"Backspace\")\n             (= value \"\"))\n        (do\n          (util/stop e)\n          (delete-block! (state/get-current-repo) false))\n\n        (and (= key \"#\")\n             (and\n              (> pos 0)\n              (= \"#\" (util/nth-safe value (dec pos)))))\n        (state/set-editor-show-page-search-hashtag! false)\n\n        (and\n         (contains? (set/difference (set (keys reversed-autopair-map))\n                                    #{\"`\"})\n                    key)\n         (= (get-current-input-char input) key))\n        (do\n          (util/stop e)\n          (cursor/move-cursor-forward input))\n\n        (and (autopair-when-selected key) (string/blank? (util/get-selected-text)))\n        nil\n\n        (and (not (string/blank? (util/get-selected-text)))\n             (contains? keycode/left-square-brackets-keys key))\n        (do\n          (autopair input-id \"[\" format nil)\n          (util/stop e))\n\n        (and (not (string/blank? (util/get-selected-text)))\n             (contains? keycode/left-paren-keys key))\n        (do\n          (util/stop e)\n          (autopair input-id \"(\" format nil))\n\n        (contains? (set (keys autopair-map)) key)\n        (do\n          (util/stop e)\n          (autopair input-id key format nil))\n\n        hashtag?\n        (do\n          (commands/handle-step [:editor/search-page-hashtag])\n          (if (= key \"#\")\n            (state/set-editor-last-pos! (inc (cursor/pos input))) ;; In keydown handler, the `#` is not inserted yet.\n            (state/set-editor-last-pos! (cursor/pos input)))\n          (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n        (let [sym \"$\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands/simple-insert! input-id \"$$\" {:backward-pos 2})\n\n        (let [sym \"^\"]\n          (and (= key sym)\n               (>= (count value) 1)\n               (> pos 0)\n               (= (nth value (dec pos)) sym)\n               (if (> (count value) pos)\n                 (not= (nth value pos) sym)\n                 true)))\n        (commands/simple-insert! input-id \"^^\" {:backward-pos 2})\n\n        :else\n        nil))))\n\n(defn ^:large-vars/cleanup-todo keyup-handler\n  [_state input input-id search-timeout]\n  (fn [e key-code]\n    (when-not (util/event-is-composing? e)\n      (let [k (gobj/get e \"key\")\n            code (gobj/getValueByKeys e \"event_\" \"code\")\n            format (:format (get-state))\n            current-pos (cursor/pos input)\n            value (gobj/get input \"value\")\n            c (util/nth-safe value (dec current-pos))\n            last-key-code (state/get-last-key-code)\n            blank-selected? (string/blank? (util/get-selected-text))\n            is-processed? (util/event-is-composing? e true) ;; #3440\n            non-enter-processed? (and is-processed? ;; #3251\n                                      (not= code keycode/enter-code))] ;; #3459\n        (when-not (or (state/get-editor-show-input) non-enter-processed?)\n          (cond\n            (and (not (contains? #{\"ArrowDown\" \"ArrowLeft\" \"ArrowRight\" \"ArrowUp\"} k))\n                 (not (:editor/show-page-search? @state/state))\n                 (not (:editor/show-page-search-hashtag? @state/state))\n                 (wrapped-by? input \"[[\" \"]]\"))\n            (let [orig-pos (cursor/get-caret-pos input)\n                  value (gobj/get input \"value\")\n                  square-pos (string/last-index-of (subs value 0 (:pos orig-pos)) \"[[\")\n                  pos (+ square-pos 2)\n                  _ (state/set-editor-last-pos! pos)\n                  pos (assoc orig-pos :pos pos)\n                  command-step (if (= \\# (util/nth-safe value (dec square-pos)))\n                                 :editor/search-page-hashtag\n                                 :editor/search-page)]\n              (commands/handle-step [command-step])\n              (reset! commands/*slash-caret-pos pos))\n\n            (and blank-selected?\n                 (contains? keycode/left-square-brackets-keys k)\n                 (= (:key last-key-code) k)\n                 (> current-pos 0)\n                 (not (wrapped-by? input \"[[\" \"]]\")))\n            (do\n              (commands/handle-step [:editor/input \"[[]]\" {:backward-truncate-number 2\n                                                           :backward-pos 2}])\n              (commands/handle-step [:editor/search-page])\n              (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n            (and blank-selected?\n                 (contains? keycode/left-paren-keys k)\n                 (= (:key last-key-code) k)\n                 (> current-pos 0)\n                 (not (wrapped-by? input \"((\" \"))\")))\n            (do\n              (commands/handle-step [:editor/input \"(())\" {:backward-truncate-number 2\n                                                           :backward-pos 2}])\n              (commands/handle-step [:editor/search-block :reference])\n              (reset! commands/*slash-caret-pos (cursor/get-caret-pos input)))\n\n            (and (= \"\u3008\" c)\n                 (= \"\u300a\" (util/nth-safe value (dec (dec current-pos))))\n                 (> current-pos 0))\n            (do\n              (commands/handle-step [:editor/input commands/angle-bracket {:last-pattern \"\u300a\u3008\"\n                                                                           :backward-pos 0}])\n              (reset! commands/*angle-bracket-caret-pos (cursor/get-caret-pos input))\n              (reset! commands/*show-block-commands true))\n\n            (and (= c \" \")\n                 (or (= (util/nth-safe value (dec (dec current-pos))) \"#\")\n                     (not (state/get-editor-show-page-search?))\n                     (and (state/get-editor-show-page-search?)\n                          (not= (util/nth-safe value current-pos) \"]\"))))\n            (state/set-editor-show-page-search-hashtag! false)\n\n            (and @*show-commands (not= k (state/get-editor-command-trigger)))\n            (let [matched-commands (get-matched-commands input)]\n              (if (seq matched-commands)\n                (do\n                  (reset! *show-commands true)\n                  (reset! commands/*matched-commands matched-commands))\n                (reset! *show-commands false)))\n\n            (and @*show-block-commands (not= key-code 188)) ; not <\n            (let [matched-block-commands (get-matched-block-commands input)]\n              (if (seq matched-block-commands)\n                (cond\n                  (= key-code 9)       ;tab\n                  (when @*show-block-commands\n                    (util/stop e)\n                    (insert-command! input-id\n                                     (last (first matched-block-commands))\n                                     format\n                                     {:last-pattern commands/angle-bracket}))\n\n                  :else\n                  (reset! commands/*matched-block-commands matched-block-commands))\n                (reset! *show-block-commands false)))\n\n            (nil? @search-timeout)\n            (close-autocomplete-if-outside input)\n\n            :else\n            nil))\n        (when-not (or (= k \"Shift\") is-processed?)\n          (state/set-last-key-code! {:key-code key-code\n                                     :code code\n                                     :key k\n                                     :shift? (.-shiftKey e)}))))))\n\n(defn editor-on-click!\n  [id]\n  (fn [_e]\n    (let [input (gdom/getElement id)]\n      (close-autocomplete-if-outside input))))\n\n(defonce mobile-toolbar-height 40)\n(defn editor-on-height-change!\n  [id]\n  (fn [box-height ^js row-height]\n    (let [row-height (:rowHeight (js->clj row-height :keywordize-keys true))\n          input (gdom/getElement id)\n          caret (cursor/get-caret-pos input)\n          cursor-bottom (if caret (+ row-height (:top caret)) box-height)\n          box-top (gobj/get (.getBoundingClientRect input) \"top\")\n          cursor-y (+ cursor-bottom box-top)\n          vw-height (.-height js/window.visualViewport)]\n      (when (<  vw-height (+ cursor-y mobile-toolbar-height))\n        (let [main-node (gdom/getElement \"main-content-container\")\n              scroll-top (.-scrollTop main-node)]\n          (set! (.-scrollTop main-node) (+ scroll-top row-height)))))))\n\n(defn editor-on-change!\n  [block id search-timeout]\n  (fn [e]\n    (if (state/sub :editor/show-block-search?)\n      (let [timeout 300]\n        (when @search-timeout\n          (js/clearTimeout @search-timeout))\n        (reset! search-timeout\n                (js/setTimeout\n                 #(edit-box-on-change! e block id)\n                 timeout)))\n      (edit-box-on-change! e block id))))\n\n(defn- paste-text-parseable\n  [format text]\n  (when-let [editing-block (state/get-edit-block)]\n    (let [page-id (:db/id (:block/page editing-block))\n          blocks (block/extract-blocks\n                  (mldoc/->edn text (gp-mldoc/default-config format)) text true format)\n          blocks' (block/with-parent-and-left page-id blocks)]\n      (paste-blocks blocks' {}))))\n\n(defn- paste-segmented-text\n  [format text]\n  (let [paragraphs (string/split text #\"(?:\\r?\\n){2,}\")\n        updated-paragraphs\n        (string/join \"\\n\"\n                     (mapv (fn [p] (->> (string/trim p)\n                                        ((fn [p]\n                                           (if (gp-util/safe-re-find (if (= format :org)\n                                                                    #\"\\s*\\*+\\s+\"\n                                                                    #\"\\s*-\\s+\") p)\n                                             p\n                                             (str (if (= format :org) \"* \" \"- \") p))))))\n                           paragraphs))]\n    (paste-text-parseable format updated-paragraphs)))\n\n(defn- get-all-blocks-by-ids\n  [repo ids]\n  (loop [ids ids\n         result []]\n    (if (seq ids)\n      (let [blocks (db/get-block-and-children repo (first ids))\n            result (vec (concat result blocks))]\n        (recur (remove (set (map :block/uuid result)) (rest ids)) result))\n      result)))\n\n(defn- paste-copied-blocks-or-text\n  [text e]\n  (let [copied-blocks (state/get-copied-blocks)\n        copied-block-ids (:copy/block-ids copied-blocks)\n        copied-graph (:copy/graph copied-blocks)\n        input (state/get-input)\n        *stop-event? (atom true)]\n    (cond\n      ;; Internal blocks by either copy or cut blocks\n      (and\n       (= copied-graph (state/get-current-repo))\n       (or (seq copied-block-ids)\n           (seq (:copy/full-blocks copied-blocks)))\n       text\n       ;; not copied from the external clipboard\n       (= (string/replace (string/trim text) \"\\r\" \"\")\n          (string/replace (string/trim (or (:copy/content copied-blocks) \"\")) \"\\r\" \"\")))\n      (let [blocks (or\n                    (:copy/full-blocks copied-blocks)\n                    (get-all-blocks-by-ids (state/get-current-repo) copied-block-ids))]\n        (when (seq blocks)\n          (state/set-copied-full-blocks! blocks)\n          (paste-blocks blocks {})))\n\n      (and (gp-util/url? text)\n           (not (string/blank? (util/get-selected-text))))\n      (html-link-format! text)\n\n      (and (gp-util/url? text)\n           (or (string/includes? text \"youtube.com\")\n               (string/includes? text \"youtu.be\"))\n           (mobile-util/is-native-platform?))\n      (commands/simple-insert! (state/get-edit-input-id) (util/format \"{{youtube %s}}\" text) nil)\n\n      (and (gp-util/url? text)\n           (string/includes? text \"twitter.com\")\n           (mobile-util/is-native-platform?))\n      (commands/simple-insert! (state/get-edit-input-id) (util/format \"{{twitter %s}}\" text) nil)\n\n      (and (text/block-ref? text)\n           (wrapped-by? input \"((\" \"))\"))\n      (commands/simple-insert! (state/get-edit-input-id) (text/get-block-ref text) nil)\n\n      :else\n      ;; from external\n      (let [format (or (db/get-page-format (state/get-current-page)) :markdown)]\n        (match [format\n                (nil? (gp-util/safe-re-find #\"(?m)^\\s*(?:[-+*]|#+)\\s+\" text))\n                (nil? (gp-util/safe-re-find #\"(?m)^\\s*\\*+\\s+\" text))\n                (nil? (gp-util/safe-re-find #\"(?:\\r?\\n){2,}\" text))]\n          [:markdown false _ _]\n          (paste-text-parseable format text)\n\n          [:org _ false _]\n          (paste-text-parseable format text)\n\n          [:markdown true _ false]\n          (paste-segmented-text format (string/trim text))\n\n          [:markdown true _ true]\n          (reset! *stop-event? false)\n\n          [:org _ true false]\n          (paste-segmented-text format (string/trim text))\n\n          [:org _ true true]\n          (reset! *stop-event? false))))\n    (when @*stop-event?\n      (util/stop e))))\n\n(defn paste-text-in-one-block-at-point\n  []\n  (utils/getClipText\n   (fn [clipboard-data]\n     (when-let [_ (state/get-input)]\n       (state/append-current-edit-content! clipboard-data)))\n   (fn [error]\n     (js/console.error error))))\n\n(defn editor-on-paste!\n  [id]\n  (fn [e]\n    (state/set-state! :editor/on-paste? true)\n    (let [text (.getData (gobj/get e \"clipboardData\") \"text\")\n          input (state/get-input)]\n      (if-not (string/blank? text)\n        (if (thingatpt/org-admonition&src-at-point input)\n          (when-not (mobile-util/native-ios?)\n            (util/stop e)\n            (paste-text-in-one-block-at-point))\n          (paste-copied-blocks-or-text text e))\n        (let [_handled\n              (let [clipboard-data (gobj/get e \"clipboardData\")\n                    files (.-files clipboard-data)]\n                (when-let [file (first files)]\n                  (when-let [block (state/get-edit-block)]\n                    (upload-asset id #js[file] (:block/format block) *asset-uploading? true))))]\n          (util/stop e))))))\n\n(defn- cut-blocks-and-clear-selections!\n  [copy?]\n  (cut-selection-blocks copy?)\n  (clear-selection!))\n\n(defn shortcut-copy-selection\n  [_e]\n  (copy-selection-blocks))\n\n(defn shortcut-cut-selection\n  [e]\n  (util/stop e)\n  (cut-blocks-and-clear-selections! true))\n\n(defn shortcut-delete-selection\n  [e]\n  (util/stop e)\n  (cut-blocks-and-clear-selections! false))\n\n;; credits to @pengx17\n(defn- copy-current-block-ref\n  []\n  (when-let [current-block (state/get-edit-block)]\n    (when-let [block-id (:block/uuid current-block)]\n      (copy-block-ref! block-id #(str \"((\" % \"))\"))\n      (notification/show!\n       [:div\n        [:span.mb-1.5 \"Block ref copied!\"]\n        [:div [:code.whitespace-nowrap (str \"((\" block-id \"))\")]]]\n       :success true\n       ;; use uuid to make sure there is only one toast a time\n       (str \"copied-block-ref:\" block-id)))))\n\n(defn shortcut-copy\n  \"shortcut copy action:\n  * when in selection mode, copy selected blocks\n  * when in edit mode but no text selected, copy current block ref\n  * when in edit mode with text selected, copy selected text as normal\"\n  [e]\n  (when-not (auto-complete?)\n    (cond\n      (state/selection?)\n      (shortcut-copy-selection e)\n\n      (state/editing?)\n      (let [input (state/get-input)\n            selected-start (util/get-selection-start input)\n            selected-end (util/get-selection-end input)]\n        (if (= selected-start selected-end)\n          (copy-current-block-ref)\n          (js/document.execCommand \"copy\")))\n\n      :else\n      (js/document.execCommand \"copy\"))))\n\n(defn shortcut-cut\n  \"shortcut cut action:\n  * when in selection mode, cut selected blocks\n  * when in edit mode with text selected, cut selected text\n  * otherwise same as delete shortcut\"\n  [e]\n  (cond\n    (state/selection?)\n    (shortcut-cut-selection e)\n\n    (state/editing?)\n    (keydown-backspace-handler true e)))\n\n(defn delete-selection\n  [e]\n  (when (state/selection?)\n    (shortcut-delete-selection e)))\n\n(defn editor-delete\n  [_state e]\n  (when (state/editing?)\n    (util/stop e)\n    (keydown-delete-handler e)))\n\n(defn editor-backspace\n  [_state e]\n  (when (state/editing?)\n    (keydown-backspace-handler false e)))\n\n(defn shortcut-up-down [direction]\n  (fn [e]\n    (when-not (auto-complete?)\n      (util/stop e)\n      (cond\n        (state/editing?)\n        (keydown-up-down-handler direction)\n\n        (and (state/selection?) (== 1 (count (state/get-selection-blocks))))\n        (select-up-down direction)\n\n        :else\n        (select-first-last direction)))))\n\n(defn shortcut-select-up-down [direction]\n  (fn [e]\n    (util/stop e)\n    (if (state/editing?)\n      (let [input (state/get-input)\n            selected-start (util/get-selection-start input)\n            selected-end (util/get-selection-end input)\n            [anchor cursor] (case (util/get-selection-direction input)\n                              \"backward\" [selected-end selected-start]\n                              [selected-start selected-end])\n            cursor-rect (cursor/get-caret-pos input cursor)]\n        (if\n          ;; if the move is to cross block boundary, select the whole block\n         (or (and (= direction :up) (cursor/textarea-cursor-rect-first-row? cursor-rect))\n             (and (= direction :down) (cursor/textarea-cursor-rect-last-row? cursor-rect)))\n          (select-block-up-down direction)\n          ;; simulate text selection\n          (cursor/select-up-down input direction anchor cursor-rect)))\n      (select-block-up-down direction))))\n\n(defn open-selected-block!\n  [direction e]\n  (when-let [block-id (some-> (state/get-selection-blocks)\n                              first\n                              (dom/attr \"blockid\")\n                              medley/uuid)]\n    (util/stop e)\n    (let [block    {:block/uuid block-id}\n          block-id (-> (state/get-selection-blocks)\n                       first\n                       (gobj/get \"id\")\n                       (string/replace \"ls-block\" \"edit-block\"))\n          left?    (= direction :left)]\n      (edit-block! block\n                   (if left? 0 :max)\n                   block-id))))\n\n(defn shortcut-left-right [direction]\n  (fn [e]\n    (when-not (auto-complete?)\n      (cond\n        (state/editing?)\n        (do\n          (util/stop e)\n          (keydown-arrow-handler direction))\n\n        (and (state/selection?) (== 1 (count (state/get-selection-blocks))))\n        (do\n          (util/stop e)\n          (open-selected-block! direction e))\n\n        :else\n        nil))))\n\n(defn clear-block-content! []\n  (save-current-block! {:force? true})\n  (state/set-edit-content! (state/get-edit-input-id) \"\"))\n\n(defn kill-line-before! []\n  (save-current-block! {:force? true})\n  (util/kill-line-before! (state/get-input)))\n\n(defn kill-line-after! []\n  (save-current-block! {:force? true})\n  (util/kill-line-after! (state/get-input)))\n\n(defn beginning-of-block []\n  (cursor/move-cursor-to (state/get-input) 0))\n\n(defn end-of-block []\n  (cursor/move-cursor-to-end (state/get-input)))\n\n(defn cursor-forward-word []\n  (cursor/move-cursor-forward-by-word (state/get-input)))\n\n(defn cursor-backward-word []\n  (cursor/move-cursor-backward-by-word (state/get-input)))\n\n(defn backward-kill-word []\n  (let [input (state/get-input)]\n    (save-current-block! {:force? true})\n    (util/backward-kill-word input)\n    (state/set-edit-content! (state/get-edit-input-id) (.-value input))))\n\n(defn forward-kill-word []\n  (let [input (state/get-input)]\n    (save-current-block! {:force? true})\n    (util/forward-kill-word input)\n    (state/set-edit-content! (state/get-edit-input-id) (.-value input))))\n\n(defn block-with-title?\n  [format content semantic?]\n  (and (string/includes? content \"\\n\")\n       (if semantic?\n         (let [ast (mldoc/->edn content (gp-mldoc/default-config format))\n               first-elem-type (first (ffirst ast))]\n           (mldoc/block-with-title? first-elem-type))\n         true)))\n\n(defn collapsable?\n  ([block-id]\n   (collapsable? block-id {}))\n  ([block-id {:keys [semantic?]\n              :or {semantic? false}}]\n   (when block-id\n     (if-let [block (db-model/query-block-by-uuid block-id)]\n       (and\n        (not (util/collapsed? block))\n        (or (db-model/has-children? block-id)\n            (and\n             (:outliner/block-title-collapse-enabled? (state/get-config))\n             (block-with-title? (:block/format block)\n                                (:block/content block)\n                                semantic?))))\n       false))))\n\n(defn all-blocks-with-level\n  \"Return all blocks associated with correct level\n   if :root-block is not nil, only return root block with its children\n   if :expanded? true, return expanded children\n   if :collapse? true, return without any collapsed children\n   if :incremental? true, collapse/expand will be step by step\n   for example:\n   - a\n    - b (collapsed)\n     - c\n     - d\n    - e\n   return:\n    blocks\n    [{:block a :level 1}\n     {:block b :level 2}\n     {:block e :level 2}]\"\n  [{:keys [collapse? expanded? incremental? root-block]\n    :or {collapse? false expanded? false incremental? true root-block nil}}]\n  (when-let [page (or (state/get-current-page)\n                      (date/today))]\n    (let [block? (gp-util/uuid-string? page)\n          block-id (or root-block (and block? (uuid page)))\n          blocks (if block-id\n                   (db/get-block-and-children (state/get-current-repo) block-id)\n                   (db/get-page-blocks-no-cache page))\n          root-block (or block-id root-block)]\n      (if incremental?\n        (let [blocks (tree/blocks->vec-tree blocks (or block-id page))]\n          (->>\n           (cond->> blocks\n             root-block\n             (map (fn find [root]\n                    (if (= root-block (:block/uuid root))\n                      root\n                      (first (filter find (:block/children root []))))))\n\n             collapse?\n             (w/postwalk\n              (fn [b]\n                (if (and (map? b)\n                         (util/collapsed? b)\n                         (not= root-block (:block/uuid b)))\n                  (assoc b :block/children []) b)))\n\n             true\n             (mapcat (fn [x] (tree-seq map? :block/children x)))\n\n             expanded?\n             (filter (fn [b] (collapsable? (:block/uuid b))))\n\n             true\n             (map (fn [x] (dissoc x :block/children))))\n           (remove nil?)))\n\n        (cond->> blocks\n          collapse?\n          (filter util/collapsed?)\n\n          expanded?\n          (filter (fn [b] (collapsable? (:block/uuid b))))\n\n          true\n          (remove nil?))))))\n\n(defn- skip-collapsing-in-db?\n  []\n  (let [config (last (state/get-editor-args))]\n    (:ref? config)))\n\n(defn- set-blocks-collapsed!\n  [block-ids value]\n  (let [block-ids (map (fn [block-id] (if (string? block-id) (uuid block-id) block-id)) block-ids)\n        repo (state/get-current-repo)\n        value (boolean value)]\n    (when repo\n      (outliner-tx/transact!\n        {:outliner-op :collapse-expand-blocks}\n        (doseq [block-id block-ids]\n          (when-let [block (db/entity [:block/uuid block-id])]\n            (let [current-value (:block/collapsed? block)]\n              (when-not (= current-value value)\n                (let [block {:block/uuid block-id\n                             :block/collapsed? value}]\n                  (outliner-core/save-block! block)))))))\n      (let [block-id (first block-ids)\n            input-pos (or (state/get-edit-pos) :max)]\n        ;; update editing input content\n        (when-let [editing-block (state/get-edit-block)]\n          (when (= (:block/uuid editing-block) block-id)\n            (edit-block! editing-block\n                         input-pos\n                         (state/get-edit-input-id))))))))\n\n(defn collapse-block! [block-id]\n  (when (collapsable? block-id)\n    (when-not (skip-collapsing-in-db?)\n      (set-blocks-collapsed! [block-id] true)))\n  (state/set-collapsed-block! block-id true))\n\n(defn expand-block! [block-id]\n  (when-not (skip-collapsing-in-db?)\n    (set-blocks-collapsed! [block-id] false)\n    (state/set-collapsed-block! block-id false)))\n\n(defn expand!\n  ([e] (expand! e false))\n  ([e clear-selection?]\n   (util/stop e)\n   (cond\n     (state/editing?)\n     (when-let [block-id (:block/uuid (state/get-edit-block))]\n       (expand-block! block-id))\n\n     (state/selection?)\n     (do\n       (->> (get-selected-blocks)\n            (map (fn [dom]\n                   (-> (dom/attr dom \"blockid\")\n                       medley/uuid\n                       expand-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n     :else\n     ;; expand one level\n     (let [blocks-with-level (all-blocks-with-level {})\n           max-level (or (apply max (map :block/level blocks-with-level)) 99)]\n       (loop [level 1]\n         (if (> level max-level)\n           nil\n           (let [blocks-to-expand (->> blocks-with-level\n                                       (filter (fn [b] (= (:block/level b) level)))\n                                       (filter util/collapsed?))]\n             (if (empty? blocks-to-expand)\n               (recur (inc level))\n               (doseq [{:block/keys [uuid]} blocks-to-expand]\n                 (expand-block! uuid))))))))))\n\n(defn collapse!\n  ([e] (collapse! e false))\n  ([e clear-selection?]\n   (when e (util/stop e))\n   (cond\n     (state/editing?)\n     (when-let [block-id (:block/uuid (state/get-edit-block))]\n       (collapse-block! block-id))\n\n     (state/selection?)\n     (do\n       (->> (get-selected-blocks)\n            (map (fn [dom]\n                   (-> (dom/attr dom \"blockid\")\n                       medley/uuid\n                       collapse-block!)))\n            doall)\n       (and clear-selection? (clear-selection!)))\n\n     :else\n     ;; collapse by one level from outside\n     (let [blocks-with-level\n           (all-blocks-with-level {:collapse? true})\n           max-level (or (apply max (map :block/level blocks-with-level)) 99)]\n       (loop [level max-level]\n         (if (zero? level)\n           nil\n           (let [blocks-to-collapse\n                 (->> blocks-with-level\n                      (filter (fn [b] (= (:block/level b) level)))\n                      (filter (fn [b] (collapsable? (:block/uuid b)))))]\n             (if (empty? blocks-to-collapse)\n               (recur (dec level))\n               (doseq [{:block/keys [uuid]} blocks-to-collapse]\n                 (collapse-block! uuid))))))))))\n\n(defn collapse-all!\n  ([]\n   (collapse-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :expanded? true\n                                        :root-block block-id})\n         block-ids (map :block/uuid blocks)]\n     (set-blocks-collapsed! block-ids true))))\n\n(defn expand-all!\n  ([]\n   (expand-all! nil))\n  ([block-id]\n   (let [blocks (all-blocks-with-level {:incremental? false\n                                        :collapse? true\n                                        :root-block block-id})\n         block-ids (map :block/uuid blocks)]\n     (set-blocks-collapsed! block-ids false))))\n\n(defn toggle-open! []\n  (let [all-expanded? (empty? (all-blocks-with-level {:incremental? false\n                                                      :collapse? true}))]\n    (if all-expanded?\n      (collapse-all!)\n      (expand-all!))))\n\n(defn select-all-blocks!\n  []\n  (if-let [current-input-id (state/get-edit-input-id)]\n    (let [input (gdom/getElement current-input-id)\n          blocks-container (util/rec-get-blocks-container input)\n          blocks (dom/by-class blocks-container \"ls-block\")]\n      (state/exit-editing-and-set-selected-blocks! blocks))\n    (->> (all-blocks-with-level {:collapse? true})\n         (map (comp gdom/getElementByClass str :block/uuid))\n         state/exit-editing-and-set-selected-blocks!)))\n\n(defn escape-editing\n  ([]\n   (escape-editing true))\n  ([select?]\n   (when (state/editing?)\n     (if select?\n       (->> (:block/uuid (state/get-edit-block))\n            select-block!)\n       (state/clear-edit!)))))\n\n(defn replace-block-reference-with-content-at-point\n  []\n  (when-let [{:keys [start end link]} (thingatpt/block-ref-at-point)]\n    (when-let [block (db/pull [:block/uuid link])]\n      (let [block-content (:block/content block)\n            format (or (:block/format block) :markdown)\n            block-content-without-prop (-> (property/remove-properties format block-content)\n                                           (drawer/remove-logbook))]\n        (when-let [input (state/get-input)]\n          (when-let [current-block-content (gobj/get input \"value\")]\n            (let [block-content* (str (subs current-block-content 0 start)\n                                      block-content-without-prop\n                                      (subs current-block-content end))]\n              (state/set-block-content-and-last-pos! input block-content* 1))))))))\n\n(defn copy-current-ref\n  [block-id]\n  (when block-id\n    (util/copy-to-clipboard! (util/format \"((%s))\" (str block-id)))))\n\n(defn delete-current-ref!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (re-pattern (str \"\\\\s?\" (util/format \"\\\\(\\\\(%s\\\\)\\\\)\" (str ref-id))))\n          content (string/replace-first (:block/content block) match \"\")]\n      (save-block! (state/get-current-repo)\n                   (:block/uuid block)\n                   content))))\n\n(defn replace-ref-with-text!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (util/format \"((%s))\" (str ref-id))\n          ref-block (db/entity [:block/uuid ref-id])\n          block-ref-content (->> (or (:block/content ref-block)\n                                     \"\")\n                                 (property/remove-built-in-properties (:block/format ref-block))\n                                 (drawer/remove-logbook))\n          content (string/replace-first (:block/content block) match\n                                        block-ref-content)]\n      (save-block! (state/get-current-repo)\n                   (:block/uuid block)\n                   content))))\n\n(defn replace-ref-with-embed!\n  [block ref-id]\n  (when (and block ref-id)\n    (let [match (util/format \"((%s))\" (str ref-id))\n          content (string/replace-first (:block/content block) match\n                                        (util/format \"{{embed ((%s))}}\"\n                                                     (str ref-id)))]\n      (save-block! (state/get-current-repo)\n                   (:block/uuid block)\n                   content))))\n\n(defn block-default-collapsed?\n  \"Whether a block should be collapsed by default.\n  Currently, this handles several cases:\n  1. References.\n  2. Custom queries.\"\n  [block config]\n  (or\n   (and\n    (or (:ref? config) (:custom-query? config))\n    (>= (inc (:block/level block))\n        (state/get-ref-open-blocks-level))\n    ;; has children\n    (first (:block/_parent (db/entity (:db/id block)))))\n   (util/collapsed? block)))\n"]}