{
"version":3,
"file":"module$node_modules$$sentry$core$dist$request.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@sentry/core/dist/request.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$core$dist$request\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@sentry/utils\");\nvar api_1 = require(\"./api\");\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api) {\n    if (!api.metadata || !api.metadata.sdk) {\n        return;\n    }\n    var _a = api.metadata.sdk, name = _a.name, version = _a.version;\n    return { name: name, version: version };\n}\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n    if (!sdkInfo) {\n        return event;\n    }\n    event.sdk = event.sdk || {};\n    event.sdk.name = event.sdk.name || sdkInfo.name;\n    event.sdk.version = event.sdk.version || sdkInfo.version;\n    event.sdk.integrations = tslib_1.__spread((event.sdk.integrations || []), (sdkInfo.integrations || []));\n    event.sdk.packages = tslib_1.__spread((event.sdk.packages || []), (sdkInfo.packages || []));\n    return event;\n}\n/** Creates a SentryRequest from a Session. */\nfunction sessionToSentryRequest(session, api) {\n    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n    var envelopeHeaders = tslib_1.__assign(tslib_1.__assign({ sent_at: new Date().toISOString() }, (sdkInfo && { sdk: sdkInfo })), (!!api.tunnel && { dsn: utils_1.dsnToString(api.dsn) }));\n    // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n    var type = 'aggregates' in session ? 'sessions' : 'session';\n    // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n    var envelopeItem = [{ type: type }, session];\n    var envelope = utils_1.createEnvelope(envelopeHeaders, [envelopeItem]);\n    return {\n        body: utils_1.serializeEnvelope(envelope),\n        type: type,\n        url: api_1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n    };\n}\nexports.sessionToSentryRequest = sessionToSentryRequest;\n/** Creates a SentryRequest from an event. */\nfunction eventToSentryRequest(event, api) {\n    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n    var eventType = event.type || 'event';\n    var useEnvelope = eventType === 'transaction' || !!api.tunnel;\n    var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n    var _a = transactionSampling || {}, samplingMethod = _a.method, sampleRate = _a.rate;\n    // TODO: Below is a temporary hack in order to debug a serialization error - see\n    // https://github.com/getsentry/sentry-javascript/issues/2809,\n    // https://github.com/getsentry/sentry-javascript/pull/4425, and\n    // https://github.com/getsentry/sentry-javascript/pull/4574.\n    //\n    // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n    // throw a circular reference error.\n    //\n    // When it's time to remove it:\n    // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n    //    `sdkProcessingMetadata`\n    // 2. Restore the original version of the request body, which is commented out\n    // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n    //    baseClient tests in this package\n    enhanceEventWithSdkInfo(event, api.metadata.sdk);\n    event.tags = event.tags || {};\n    event.extra = event.extra || {};\n    // In theory, all events should be marked as having gone through normalization and so\n    // we should never set this tag/extra data\n    if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n        event.tags.skippedNormalization = true;\n        event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n    }\n    // prevent this data from being sent to sentry\n    // TODO: This is NOT part of the hack - DO NOT DELETE\n    delete event.sdkProcessingMetadata;\n    var body;\n    try {\n        // 99.9% of events should get through just fine - no change in behavior for them\n        body = JSON.stringify(event);\n    }\n    catch (err) {\n        // Record data about the error without replacing original event data, then force renormalization\n        event.tags.JSONStringifyError = true;\n        event.extra.JSONStringifyError = err;\n        try {\n            body = JSON.stringify(utils_1.normalize(event));\n        }\n        catch (newErr) {\n            // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n            // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n            // debug with this hack, we won't ever land here.\n            var innerErr = newErr;\n            body = JSON.stringify({\n                message: 'JSON.stringify error after renormalization',\n                // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n                extra: { message: innerErr.message, stack: innerErr.stack },\n            });\n        }\n    }\n    var req = {\n        // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n        // the mystery\n        // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n        body: body,\n        type: eventType,\n        url: useEnvelope\n            ? api_1.getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n            : api_1.getStoreEndpointWithUrlEncodedAuth(api.dsn),\n    };\n    // https://develop.sentry.dev/sdk/envelopes/\n    // Since we don't need to manipulate envelopes nor store them, there is no\n    // exported concept of an Envelope with operations including serialization and\n    // deserialization. Instead, we only implement a minimal subset of the spec to\n    // serialize events inline here.\n    if (useEnvelope) {\n        var envelopeHeaders = tslib_1.__assign(tslib_1.__assign({ event_id: event.event_id, sent_at: new Date().toISOString() }, (sdkInfo && { sdk: sdkInfo })), (!!api.tunnel && { dsn: utils_1.dsnToString(api.dsn) }));\n        var eventItem = [\n            {\n                type: eventType,\n                sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n            },\n            req.body,\n        ];\n        var envelope = utils_1.createEnvelope(envelopeHeaders, [eventItem]);\n        req.body = utils_1.serializeEnvelope(envelope);\n    }\n    return req;\n}\nexports.eventToSentryRequest = eventToSentryRequest;\n//# sourceMappingURL=request.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getSdkMetadataForEnvelopeHeader","api","metadata","sdk","_a","name","version","Object","defineProperty","value","tslib_1","utils_1","api_1","sessionToSentryRequest","session","sdkInfo","envelopeHeaders","__assign","sent_at","toISOString","Date","tunnel","dsn","dsnToString","type","envelope","createEnvelope","envelopeItem","body","serializeEnvelope","url","getEnvelopeEndpointWithUrlEncodedAuth","eventToSentryRequest","event","eventType","useEnvelope","transactionSampling","sdkProcessingMetadata","samplingMethod","method","sampleRate","rate","integrations","__spread","packages","tags","extra","baseClientNormalized","skippedNormalization","normalizeDepth","JSON","stringify","err","JSONStringifyError","normalize","newErr","innerErr","message","stack","req","getStoreEndpointWithUrlEncodedAuth","event_id","eventItem","sample_rates","id"]
}
