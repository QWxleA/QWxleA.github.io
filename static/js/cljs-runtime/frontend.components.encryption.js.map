{"version":3,"sources":["frontend/components/encryption.cljs"],"mappings":"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","names":["rum.core/lazy-build","rum.core/build-defcs","daiquiri.core/create-element","attrs60955","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","cljs.core/deref","attrs60960","frontend.components.encryption/encryption-dialog-inner","rum.core.local","state","repo-url","close-fn","reveal-secret-phrase?","cljs.core.get","public-key","frontend.encrypt/get-public-key","private-key","frontend.encrypt/get-secret-key","cljs.core/not","cljs.core/reset!","frontend.context.i18n.t","frontend.components.encryption/encryption-dialog","rum.core/mark-sync-update","frontend.components.encryption/input-password-inner","password","password-confirm","frontend.ui/admonition","e","frontend.util/evalue","value","clojure.string/blank?","cljs.core.not_EQ_","frontend.handler.notification.show_BANG_","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","keys","frontend.encrypt/generate-key-pair-and-save!","db-encrypted-secret","frontend.encrypt/encrypt-with-passphrase","frontend.handler.metadata/set-db-encrypted-secret!","frontend.components.encryption/input-password","_close-fn","frontend.components.encryption/encryption-setup-dialog-inner","frontend.state.set_modal_BANG_","frontend.components.encryption/encryption-setup-dialog","close-modal-fn","encrypted?","frontend.components.encryption/encryption-input-secret-inner","_repo-url","secret","loading","repo","frontend.state/get-current-repo","___28350__auto__","frontend.encrypt/decrypt-with-passphrase","promesa.core.then","frontend.encrypt/save-key-pair!","frontend.state/set-state!","promesa.core.catch$","promesa.core.finally$","frontend.ui/loading","frontend.components.encryption/encryption-input-secret-dialog"],"sourcesContent":["(ns frontend.components.encryption\n  (:require [clojure.string :as string]\n            [frontend.context.i18n :refer [t]]\n            [frontend.encrypt :as e]\n            [frontend.handler.metadata :as metadata-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [promesa.core :as p]\n            [rum.core :as rum]))\n\n(rum/defcs encryption-dialog-inner <\n  (rum/local false ::reveal-secret-phrase?)\n  [state repo-url close-fn]\n  (let [reveal-secret-phrase? (get state ::reveal-secret-phrase?)\n        public-key (e/get-public-key repo-url)\n        private-key (e/get-secret-key repo-url)]\n    [:div\n     [:div.sm:flex.sm:items-start\n      [:div.mt-3.text-center.sm:mt-0.sm:text-left\n       [:h3#modal-headline.text-lg.leading-6.font-medium\n        \"This graph is encrypted with \" [:a {:href \"https://age-encryption.org/\" :target \"_blank\" :rel \"noopener\"} \"age-encryption.org/v1\"]]]]\n\n     [:div.mt-1\n      [:div.max-w-2xl.rounded-md.shadow-sm.sm:max-w-xl\n       [:div.cursor-pointer.block.w-full.rounded-sm.p-2\n        {:on-click (fn []\n                     (when (not @reveal-secret-phrase?)\n                       (reset! reveal-secret-phrase? true)))}\n        [:div.font-medium \"Public Key:\"]\n        [:div.font-mono.select-all.break-all public-key]\n        (if @reveal-secret-phrase?\n          [:div\n           [:div.mt-1.font-medium \"Private Key:\"]\n           [:div.font-mono.select-all.break-all private-key]]\n          [:div.underline \"click to view the private key\"])]]]\n\n     [:div.mt-5.sm:mt-4.sm:flex.sm:flex-row-reverse\n      [:span.mt-3.flex.w-full.rounded-md.shadow-sm.sm:mt-0.sm:w-auto\n       [:button.inline-flex.justify-center.w-full.rounded-md.border.border-gray-300.px-4.py-2.bg-white.text-base.leading-6.font-medium.text-gray-700.shadow-sm.hover:text-gray-500.focus:outline-none.focus:border-blue-300.focus:shadow-outline-blue.transition.ease-in-out.duration-150.sm:text-sm.sm:leading-5\n        {:type \"button\"\n         :on-click close-fn}\n        (t :close)]]]]))\n\n(defn encryption-dialog\n  [repo-url]\n  (fn [close-fn]\n    (encryption-dialog-inner repo-url close-fn)))\n\n(rum/defcs input-password-inner <\n  (rum/local \"\" ::password)\n  (rum/local \"\" ::password-confirm)\n  [state repo-url close-fn]\n  (let [password (get state ::password)\n        password-confirm (get state ::password-confirm)]\n    [:div\n     [:div.sm:flex.sm:items-start\n      [:div.mt-3.text-center.sm:mt-0.sm:text-left\n       [:h3#modal-headline.text-lg.leading-6.font-medium.font-bold\n        \"Enter a password\"]]]\n\n     (ui/admonition\n      :warning\n      [:div.opacity-70\n       \"Choose a strong and hard to guess password.\\nIf you lose your password, all the data can't be decrypted!! Please make sure you remember the password you have set, or you can keep a secure backup of the password.\"])\n     [:input.form-input.block.w-full.sm:text-sm.sm:leading-5.my-2\n      {:type \"password\"\n       :placeholder \"Password\"\n       :auto-focus true\n       :on-change (fn [e]\n                    (reset! password (util/evalue e)))}]\n     [:input.form-input.block.w-full.sm:text-sm.sm:leading-5.my-2\n      {:type \"password\"\n       :placeholder \"Re-enter the password\"\n       :on-change (fn [e]\n                    (reset! password-confirm (util/evalue e)))}]\n\n     [:div.mt-5.sm:mt-4.sm:flex.sm:flex-row-reverse\n      [:span.flex.w-full.rounded-md.shadow-sm.sm:ml-3.sm:w-auto\n       [:button.inline-flex.justify-center.w-full.rounded-md.border.border-transparent.px-4.py-2.bg-indigo-600.text-base.leading-6.font-medium.text-white.shadow-sm.hover:bg-indigo-500.focus:outline-none.focus:border-indigo-700.focus:shadow-outline-indigo.transition.ease-in-out.duration-150.sm:text-sm.sm:leading-5\n        {:type \"button\"\n         :on-click (fn []\n                     (let [value @password]\n                       (cond\n                         (string/blank? value)\n                         nil\n\n                         (not= @password @password-confirm)\n                         (notification/show! \"The passwords are not matched.\" :error)\n\n                         :else\n                         (p/let [keys (e/generate-key-pair-and-save! repo-url)\n                                 db-encrypted-secret (e/encrypt-with-passphrase value keys)]\n                           (metadata-handler/set-db-encrypted-secret! db-encrypted-secret)\n                           (close-fn true)))))}\n        \"Submit\"]]]]))\n\n(defn input-password\n  [repo-url close-fn]\n  (fn [_close-fn]\n    (input-password-inner repo-url close-fn)))\n\n(rum/defcs encryption-setup-dialog-inner\n  [state repo-url close-fn]\n  [:div\n   [:div.sm:flex.sm:items-start\n    [:div.mt-3.text-center.sm:mt-0.sm:text-left\n     [:h3#modal-headline.text-lg.leading-6.font-medium\n      \"Do you want to create an encrypted graph?\"]]]\n\n   [:div.mt-5.sm:mt-4.sm:flex.sm:flex-row-reverse\n    [:span.flex.w-full.rounded-md.shadow-sm.sm:ml-3.sm:w-auto\n     [:button.inline-flex.justify-center.w-full.rounded-md.border.border-transparent.px-4.py-2.bg-indigo-600.text-base.leading-6.font-medium.text-white.shadow-sm.hover:bg-indigo-500.focus:outline-none.focus:border-indigo-700.focus:shadow-outline-indigo.transition.ease-in-out.duration-150.sm:text-sm.sm:leading-5\n      {:type \"button\"\n       :on-click (fn []\n                   (state/set-modal! (input-password repo-url close-fn)))}\n      (t :yes)]]\n    [:span.mt-3.flex.w-full.rounded-md.shadow-sm.sm:mt-0.sm:w-auto\n     [:button.inline-flex.justify-center.w-full.rounded-md.border.border-gray-300.px-4.py-2.bg-white.text-base.leading-6.font-medium.text-gray-700.shadow-sm.hover:text-gray-500.focus:outline-none.focus:border-blue-300.focus:shadow-outline-blue.transition.ease-in-out.duration-150.sm:text-sm.sm:leading-5\n      {:type \"button\"\n       :on-click (fn [] (close-fn false))}\n      (t :no)]]]])\n\n(defn encryption-setup-dialog\n  [repo-url close-fn]\n  (fn [close-modal-fn]\n    (let [close-fn (fn [encrypted?]\n                     (close-fn encrypted?)\n                     (close-modal-fn))]\n      (encryption-setup-dialog-inner repo-url close-fn))))\n\n(rum/defcs encryption-input-secret-inner <\n  (rum/local \"\" ::secret)\n  (rum/local false ::loading)\n  [state _repo-url db-encrypted-secret close-fn]\n  (let [secret (::secret state)\n        loading (::loading state)]\n    [:div\n     [:div.sm:flex.sm:items-start\n      [:div.mt-3.text-center.sm:mt-0.sm:text-left\n       [:h3#modal-headline.text-lg.leading-6.font-medium\n        \"Enter your password\"]]]\n\n     [:input.form-input.block.w-full.sm:text-sm.sm:leading-5.my-2\n      {:type \"password\"\n       :auto-focus true\n       :on-change (fn [e]\n                    (reset! secret (util/evalue e)))}]\n\n     [:div.mt-5.sm:mt-4.sm:flex.sm:flex-row-reverse\n      [:span.flex.w-full.rounded-md.shadow-sm.sm:ml-3.sm:w-auto\n       [:button.inline-flex.justify-center.w-full.rounded-md.border.border-transparent.px-4.py-2.bg-indigo-600.text-base.leading-6.font-medium.text-white.shadow-sm.hover:bg-indigo-500.focus:outline-none.focus:border-indigo-700.focus:shadow-outline-indigo.transition.ease-in-out.duration-150.sm:text-sm.sm:leading-5\n        {:type \"button\"\n         :on-click (fn []\n                     (reset! loading true)\n                     (let [value @secret]\n                       (when-not (string/blank? value) ; TODO: length or other checks\n                         (let [repo (state/get-current-repo)]\n                           (p/do!\n                            (-> (e/decrypt-with-passphrase value db-encrypted-secret)\n                                (p/then (fn [keys]\n                                          (e/save-key-pair! repo keys)\n                                          (close-fn true)\n                                          (state/set-state! :encryption/graph-parsing? false)))\n                                (p/catch #(notification/show! \"The password is not matched.\" :warning true))\n                                (p/finally #(reset! loading false))))))))}\n        (if @loading (ui/loading \"Decrypting\") \"Decrypt\")]]]]))\n\n(defn encryption-input-secret-dialog\n  [repo-url db-encrypted-secret close-fn]\n  (fn [close-modal-fn]\n    (let [close-fn (fn [encrypted?]\n                     (close-fn encrypted?)\n                     (close-modal-fn))]\n      (encryption-input-secret-inner repo-url db-encrypted-secret close-fn))))\n"]}