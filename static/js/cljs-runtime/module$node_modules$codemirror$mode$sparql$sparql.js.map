{
"version":3,
"file":"module$node_modules$codemirror$mode$sparql$sparql.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/codemirror/mode/sparql/sparql.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$sparql$sparql\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"sparql\", function(config) {\n  var indentUnit = config.indentUnit;\n  var curPunc;\n\n  function wordRegexp(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  }\n  var ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                        \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                        \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                        \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                        \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                        \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                        \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                        \"isblank\", \"isliteral\", \"a\", \"bind\"]);\n  var keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                             \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                             \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                             \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                             \"true\", \"false\", \"with\",\n                             \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\"]);\n  var operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    curPunc = null;\n    if (ch == \"$\" || ch == \"?\") {\n      if(ch == \"?\" && stream.match(/\\s/, false)){\n        return \"operator\";\n      }\n      stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n      return \"variable-2\";\n    }\n    else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n      stream.match(/^[^\\s\\u00a0>]*>?/);\n      return \"atom\";\n    }\n    else if (ch == \"\\\"\" || ch == \"'\") {\n      state.tokenize = tokenLiteral(ch);\n      return state.tokenize(stream, state);\n    }\n    else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n      curPunc = ch;\n      return \"bracket\";\n    }\n    else if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (operatorChars.test(ch)) {\n      stream.eatWhile(operatorChars);\n      return \"operator\";\n    }\n    else if (ch == \":\") {\n      stream.eatWhile(/[\\w\\d\\._\\-]/);\n      return \"atom\";\n    }\n    else if (ch == \"@\") {\n      stream.eatWhile(/[a-z\\d\\-]/i);\n      return \"meta\";\n    }\n    else {\n      stream.eatWhile(/[_\\w\\d]/);\n      if (stream.eat(\":\")) {\n        stream.eatWhile(/[\\w\\d_\\-]/);\n        return \"atom\";\n      }\n      var word = stream.current();\n      if (ops.test(word))\n        return \"builtin\";\n      else if (keywords.test(word))\n        return \"keyword\";\n      else\n        return \"variable\";\n    }\n  }\n\n  function tokenLiteral(quote) {\n    return function(stream, state) {\n      var escaped = false, ch;\n      while ((ch = stream.next()) != null) {\n        if (ch == quote && !escaped) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        escaped = !escaped && ch == \"\\\\\";\n      }\n      return \"string\";\n    };\n  }\n\n  function pushContext(state, type, col) {\n    state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n  }\n  function popContext(state) {\n    state.indent = state.context.indent;\n    state.context = state.context.prev;\n  }\n\n  return {\n    startState: function() {\n      return {tokenize: tokenBase,\n              context: null,\n              indent: 0,\n              col: 0};\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (state.context && state.context.align == null) state.context.align = false;\n        state.indent = stream.indentation();\n      }\n      if (stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n\n      if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n        state.context.align = true;\n      }\n\n      if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n      else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n      else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n      else if (/[\\]\\}\\)]/.test(curPunc)) {\n        while (state.context && state.context.type == \"pattern\") popContext(state);\n        if (state.context && curPunc == state.context.type) {\n          popContext(state);\n          if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n            popContext(state);\n        }\n      }\n      else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n      else if (/atom|string|variable/.test(style) && state.context) {\n        if (/[\\}\\]]/.test(state.context.type))\n          pushContext(state, \"pattern\", stream.column());\n        else if (state.context.type == \"pattern\" && !state.context.align) {\n          state.context.align = true;\n          state.context.col = stream.column();\n        }\n      }\n\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      var firstChar = textAfter && textAfter.charAt(0);\n      var context = state.context;\n      if (/[\\]\\}]/.test(firstChar))\n        while (context && context.type == \"pattern\") context = context.prev;\n\n      var closing = context && firstChar == context.type;\n      if (!context)\n        return 0;\n      else if (context.type == \"pattern\")\n        return context.col;\n      else if (context.align)\n        return context.col + (closing ? 0 : 1);\n      else\n        return context.indent + (closing ? 0 : indentUnit);\n    },\n\n    lineComment: \"#\"\n  };\n});\n\nCodeMirror.defineMIME(\"application/sparql-query\", \"sparql\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","config","tokenBase","stream","state","ch","next","curPunc","match","tokenize","tokenLiteral","test","skipToEnd","operatorChars","eatWhile","eat","word","current","ops","keywords","quote","escaped","pushContext","type","col","context","prev","indent","popContext","indentUnit","RegExp","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","lineComment","defineMIME"]
}
