{
"version":3,
"file":"module$node_modules$codemirror$mode$handlebars$handlebars.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/codemirror/mode/handlebars/handlebars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$handlebars$handlebars\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"), require(\"../../addon/mode/multiplex\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [\n      { regex: /\\{\\{\\{/, push: \"handlebars_raw\", token: \"tag\" },\n      { regex: /\\{\\{!--/, push: \"dash_comment\", token: \"comment\" },\n      { regex: /\\{\\{!/,   push: \"comment\", token: \"comment\" },\n      { regex: /\\{\\{/,    push: \"handlebars\", token: \"tag\" }\n    ],\n    handlebars_raw: [\n      { regex: /\\}\\}\\}/, pop: true, token: \"tag\" },\n    ],\n    handlebars: [\n      { regex: /\\}\\}/, pop: true, token: \"tag\" },\n\n      // Double and single quotes\n      { regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/, token: \"string\" },\n      { regex: /'(?:[^\\\\']|\\\\.)*'?/, token: \"string\" },\n\n      // Handlebars keywords\n      { regex: />|[#\\/]([A-Za-z_]\\w*)/, token: \"keyword\" },\n      { regex: /(?:else|this)\\b/, token: \"keyword\" },\n\n      // Numeral\n      { regex: /\\d+/i, token: \"number\" },\n\n      // Atoms like = and .\n      { regex: /=|~|@|true|false/, token: \"atom\" },\n\n      // Paths\n      { regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/, token: \"variable-2\" }\n    ],\n    dash_comment: [\n      { regex: /--\\}\\}/, pop: true, token: \"comment\" },\n\n      // Commented code\n      { regex: /./, token: \"comment\"}\n    ],\n    comment: [\n      { regex: /\\}\\}/, pop: true, token: \"comment\" },\n      { regex: /./, token: \"comment\" }\n    ],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n\n  CodeMirror.defineMode(\"handlebars\", function(config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base),\n      {open: \"{{\", close: /\\}\\}\\}?/, mode: handlebars, parseDelimiters: true}\n    );\n  });\n\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineSimpleMode","start","regex","push","token","handlebars_raw","pop","handlebars","dash_comment","comment","meta","blockCommentStart","blockCommentEnd","defineMode","config","parserConfig","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"]
}
