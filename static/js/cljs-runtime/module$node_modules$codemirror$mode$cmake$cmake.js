shadow$provide.module$node_modules$codemirror$mode$cmake$cmake=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("cmake",function(){function tokenString(stream,state){for(var current,prev,found_var=!1;!stream.eol()&&(current=stream.next())!=state.pending;){if("$"===
current&&"\\"!=prev&&'"'==state.pending){found_var=!0;break}prev=current}found_var&&stream.backUp(1);state.continueString=current==state.pending?!1:!0;return"string"}function tokenize(stream,state){var ch=stream.next();if("$"===ch)return stream.match(variable_regex)?"variable-2":"variable";if(state.continueString)return stream.backUp(1),tokenString(stream,state);if(stream.match(/(\s+)?\w+\(/)||stream.match(/(\s+)?\w+ \(/))return stream.backUp(1),"def";if("#"==ch)return stream.skipToEnd(),"comment";
if("'"==ch||'"'==ch)return state.pending=ch,tokenString(stream,state);if("("==ch||")"==ch)return"bracket";if(ch.match(/[0-9]/))return"number";stream.eatWhile(/[\w-]/);return null}var variable_regex=/({)?[a-zA-Z0-9_]+(})?/;return{startState:function(){return{inDefinition:!1,inInclude:!1,continueString:!1,pending:!1}},token:function(stream,state){return stream.eatSpace()?null:tokenize(stream,state)}}});CodeMirror.defineMIME("text/x-cmake","cmake")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$cmake$cmake.js.map
