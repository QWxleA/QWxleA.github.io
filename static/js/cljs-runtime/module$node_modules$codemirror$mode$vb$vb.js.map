{
"version":3,
"file":"module$node_modules$codemirror$mode$vb$vb.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/codemirror/mode/vb/vb.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$vb$vb\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"vb\", function(conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\n    var doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\n    var identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\n    var middleKeywords = ['else','elseif','case', 'catch', 'finally'];\n    var endKeywords = ['next','loop'];\n\n    var operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\n    var wordOperators = wordRegexp(operatorKeywords);\n\n    var commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\n    var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\n    var keywords = wordRegexp(commonKeywords);\n    var types = wordRegexp(commontypes);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n\n    var indentInfo = null;\n\n    CodeMirror.registerHelper(\"hintWords\", \"vb\", openingKeywords.concat(middleKeywords).concat(endKeywords)\n                                .concat(operatorKeywords).concat(commonKeywords).concat(commontypes));\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            dedent(stream,state);\n            return 'keyword';\n        }\n\n        if (stream.match(types)) {\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n                if (parserConf.singleLineStringErrors) {\n                    return ERRORCLASS;\n                } else {\n                    state.tokenize = tokenBase;\n                }\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n            if (style === 'variable') {\n                return 'variable';\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n\n        var delimiter_index = '[({'.indexOf(current);\n        if (delimiter_index !== -1) {\n            indent(stream, state );\n        }\n        if (indentInfo === 'dedent') {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n        delimiter_index = '])}'.indexOf(current);\n        if (delimiter_index !== -1) {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    var external = {\n        electricChars:\"dDpPtTfFeE \",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n\n\n            return style;\n        },\n\n        indent: function(state, textAfter) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * conf.indentUnit;\n        },\n\n        lineComment: \"'\"\n    };\n    return external;\n});\n\nCodeMirror.defineMIME(\"text/x-vb\", \"vb\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","conf","parserConf","wordRegexp","words","RegExp","join","tokenBase","stream","state","eatSpace","peek","ch","skipToEnd","match","floatLiteral","eat","intLiteral","stringPrefixes","tokenize","tokenStringFactory","current","tripleDelimiters","doubleDelimiters","doubleOperators","singleOperators","wordOperators","singleDelimiters","doOpening","currentIndent","doInCurrentLine","opening","middle","doubleClosing","closing","types","keywords","identifiers","next","ERRORCLASS","delimiter","singleline","length","eol","eatWhile","OUTCLASS","singleLineStringErrors","openingKeywords","middleKeywords","endKeywords","operatorKeywords","commonKeywords","commontypes","registerHelper","concat","external","electricChars","startState","lastToken","nextLineIndent","token","sol","style","delimiter_index","indexOf","content","indent","textAfter","trueText","replace","indentUnit","lineComment","defineMIME"]
}
