{"version":3,"sources":["frontend/extensions/calc.cljc"],"mappings":"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","names":["instaparse.core/parser","frontend.extensions.calc/parse","frontend.extensions.calc/exception?","e","js/Error","frontend.extensions.calc/failure?","v","instaparse.core/failure?","frontend.extensions.calc/new-env","cljs.core.atom","frontend.extensions.calc/eval*","env","ast","G__63647","G__63648","instaparse.core/transform","p1__63646#","cljs.core.comp","js/module$node_modules$bignumber_DOT_js$bignumber.BigNumber","clojure.string/replace","a","clojure.edn/read-string","cljs.core/identity","b","js/Math.log10","js/Math.log","js/Math.sin","js/Math.cos","js/Math.tan","js/Math.atan","js/Math.asin","js/Math.acos","var","val","cljs.core.swap_BANG_","cljs.core/assoc","clojure.string/trim","or__5043__auto__","cljs.core/deref","cljs.core.get","cljs.core.ex_info","frontend.util.format","var_args","G__63650","frontend.extensions.calc/eval","frontend.extensions.calc.eval","e63651","cljs.core/first","frontend.extensions.calc/eval-lines","s","cljs.core.mapv","line","clojure.string/blank?","clojure.string/split-lines","rum.core/lazy-build","rum.core/build-defc","daiquiri.interpreter/interpret","frontend.extensions.calc/results","rum.core/reactive","calc-atom","temp__5720__auto__","output-lines","rum.core/react","iter__5520__auto__","s__63663","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__63665","cljs.core/chunk-buffer","i__63664","vec__63666","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63662","cljs.core/chunk-rest","vec__63669","cljs.core/cons","cljs.core/rest","i","cljs.core.map_indexed","cljs.core/vector","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.extensions.calc\n  (:refer-clojure :exclude [eval])\n  (:require [clojure.edn :as edn]\n            [clojure.string :as str]\n            [frontend.util :as util]\n\n            [bignumber.js :as bn]\n\n            #?(:clj [clojure.java.io :as io])\n            #?(:cljs [shadow.resource :as rc])\n            #?(:cljs [rum.core :as rum])\n            #?(:clj [instaparse.core :as insta]\n               :cljs [instaparse.core :as insta :refer-macros [defparser]])))\n\n;; ======================================================================\n;; Interpreter\n\n#?(:clj (def parse (insta/parser (io/resource \"grammar/calc.bnf\")))\n   :cljs (defparser parse (rc/inline \"grammar/calc.bnf\")))\n\n(defn exception? [e]\n  #?(:clj (instance? Exception e)\n     :cljs (instance? js/Error e)))\n\n(defn failure? [v]\n  (or (insta/failure? v) (exception? v)))\n\n(defn new-env [] (atom {}))\n\n;; TODO: Set DECIMAL_PLACES https://mikemcl.github.io/bignumber.js/#decimal-places\n\n(defn eval* [env ast]\n  (insta/transform\n   {:number     (comp bn/BigNumber #(str/replace % \",\" \"\"))\n    :percent    (fn percent [a] (-> a (.dividedBy 100.00)))\n    :scientific (comp bn/BigNumber edn/read-string)\n    :negterm    (fn neg [a] (-> a (.negated)))\n    :expr       identity\n    :add        (fn add [a b] (-> a (.plus b)))\n    :sub        (fn sub [a b] (-> a (.minus b)))\n    :mul        (fn mul [a b] (-> a (.multipliedBy b)))\n    :div        (fn div [a b] (-> a (.dividedBy b)))\n    :pow        (fn pow [a b] (-> a (.exponentiatedBy b)))\n    :log        (fn log [a]\n                  #?(:clj (java.lang.Math/log10 a) :cljs (bn/BigNumber (js/Math.log10 a))))\n    :ln         (fn ln [a]\n                  #?(:clj (java.lang.Math/log a) :cljs (bn/BigNumber (js/Math.log a))))\n    :sin        (fn sin [a]\n                  #?(:clj (java.lang.Math/sin a) :cljs (bn/BigNumber(js/Math.sin a))))\n    :cos        (fn cos [a]\n                  #?(:clj (java.lang.Math/cos a) :cljs (bn/BigNumber(js/Math.cos a))))\n    :tan        (fn tan [a]\n                  #?(:clj (java.lang.Math/tan a) :cljs (bn/BigNumber(js/Math.tan a))))\n    :atan       (fn atan [a]\n                  #?(:clj (java.lang.Math/atan a) :cljs (bn/BigNumber(js/Math.atan a))))\n    :asin       (fn asin [a]\n                  #?(:clj (java.lang.Math/asin a) :cljs (bn/BigNumber(js/Math.asin a))))\n    :acos       (fn acos [a]\n                  #?(:clj (java.lang.Math/acos a) :cljs (bn/BigNumber(js/Math.acos a))))\n    :assignment (fn assign! [var val]\n                  (swap! env assoc var val)\n                  val)\n    :toassign   str/trim\n    :variable   (fn resolve [var]\n                  (let [var (str/trim var)]\n                    (or (get @env var)\n                        (throw\n                         (ex-info (util/format \"Can't find variable %s\" var)\n                                  {:var var})))))}\n   ast))\n\n(defn eval\n  ([ast] (eval (new-env) ast))\n  ([env ast]\n   (try\n     (if (failure? ast)\n       ast\n       (first (eval* env ast)))\n     (catch #?(:clj Exception :cljs js/Error) e\n       e))))\n\n(defn eval-lines [s]\n  {:pre [(string? s)]}\n  (let [env (new-env)]\n    (mapv (fn [line]\n            (when-not (str/blank? line)\n              (eval env (parse line))))\n          (str/split-lines s))))\n\n;; ======================================================================\n;; UI\n\n#?(:cljs\n   (rum/defc results < rum/reactive\n     [calc-atom]\n     (when-let [output-lines (rum/react calc-atom)]\n       ;; the editor's parent will go into edit mode if any elements are clicked\n       ;; if we stop click propagation on this element, we allow the user to\n       ;; copy and paste the calc results\n       [:div.extensions__code-calc.pr-2 {:on-mouse-down (fn [e]\n                                                          (.stopPropagation e))}\n        ;; TODO: add react keys\n        (for [[i line] (map-indexed vector output-lines)]\n          [:div.extensions__code-calc-output-line.CodeMirror-line {:key i}\n           [:span (cond\n                    (nil? line)           \"\"\n                    (failure? line) \"?\"\n                    :else                 (str line))]])])))\n"]}