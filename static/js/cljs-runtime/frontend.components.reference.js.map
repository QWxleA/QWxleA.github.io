{"version":3,"sources":["frontend/components/reference.cljs"],"mappings":"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","names":["rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","attrs60882","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","cljs.core.into_array","iter__5520__auto__","s__60886","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__60888","cljs.core/chunk-buffer","i__60887","cljs.core/-nth","cljs.core/chunk-append","daiquiri.util/join-classes","cljs.core/chunk-cons","cljs.core/chunk","iter__60885","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","frontend.components.reference/filter-dialog-inner","rum.core/reactive","filters-atom","_close-fn","references","page-name","frontend.ui.icon","filters","rum.core/react","reference","lc-reference","clojure.string/lower-case","filtered","cljs.core.get","color","pred__60889","expr__60890","pred__60892","expr__60893","cljs.core/=","e","p1__60881#","cljs.core.swap_BANG_","cljs.core.assoc","cljs.core/not","cljs.core.dissoc","cljs.core/deref","frontend.handler.page/save-filter!","frontend.components.reference/filter-dialog","close-fn","frontend.components.reference/block-linked-references","frontend.db-mixins/query","block-id","refed-blocks-ids","frontend.db.model/get-referenced-blocks-ids","ref-blocks","frontend.db/get-block-referenced-blocks","ref-hiccup","frontend.components.block/->hiccup","frontend.components.editor/box","frontend.components.content/content","rum.core/build-defcs","attrs60897","frontend.components.reference/references*","rum.core.local","state","cljs.core.atom","frontend.handler.page/get-filters","repo","frontend.state/get-current-repo","threshold","frontend.state/get-linked-references-collapsed-threshold","*n-ref","n-ref","or__5043__auto__","default-collapsed?","filter-state","cljs.core/parse-uuid","journal?","frontend.date/valid-journal-title?","clojure.string/capitalize","scheduled-or-deadlines","and__5041__auto__","frontend.state/scheduled-deadlines-disabled?","cljs.core._EQ_","frontend.date.journal_name","G__60896","frontend.db/get-date-scheduled-or-deadlines","frontend.ui/foldable","frontend.util/stop-propagation","frontend.db/get-page-referenced-blocks","ref-pages","cljs.core.map","cljs.core.comp","frontend.db/get-page-linked-refs-refed-pages","cljs.core.concat","cljs.core.remove","cljs.core/nil?","cljs.core.distinct","frontend.state.set_modal_BANG_","cljs.core/empty?","cljs.core/every?","cljs.core/true?","cljs.core/vals","cljs.core/false?","cljs.core/group-by","cljs.core/second","p1__60895#","cljs.core/update-vals","filtered-ref-blocks","frontend.handler.block/filter-blocks","cljs.core.apply","cljs.core/+","s__60909","b__60911","i__60910","vec__60912","cljs.core.nth","iter__60908","vec__60915","s__60929","b__60931","i__60930","vec__60932","iter__60928","vec__60935","_","rfs","cljs.core/reset!","frontend.components.reference/references","frontend.ui/catch-error","frontend.ui/component-error","frontend.ui/lazy-visible","attrs60938","frontend.components.reference/unlinked-references-aux","render-fn","s__60940","b__60942","i__60941","vec__60943","iter__60939","vec__60946","G__60949","frontend.db/get-page-unlinked-references","_n-ref","frontend.components.reference/unlinked-references","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.components.reference\n  (:require [clojure.string :as string]\n            [frontend.components.block :as block]\n            [frontend.components.content :as content]\n            [frontend.components.editor :as editor]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db.model :as model-db]\n            [frontend.db-mixins :as db-mixins]\n            [frontend.handler.block :as block-handler]\n            [frontend.handler.page :as page-handler]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [rum.core :as rum]))\n\n(rum/defc filter-dialog-inner < rum/reactive\n  [filters-atom _close-fn references page-name]\n  [:div.filters\n   [:div.sm:flex.sm:items-start\n    [:div.mx-auto.flex-shrink-0.flex.items-center.justify-center.h-12.w-12.rounded-full.bg-gray-200.text-gray-500.sm:mx-0.sm:h-10.sm:w-10\n     (ui/icon \"filter\" {:style {:fontSize 20}})]\n    [:div.mt-3.text-center.sm:mt-0.sm:ml-4.sm:text-left\n     [:h3#modal-headline.text-lg.leading-6.font-medium \"Filter\"]\n     [:span.text-xs\n      \"Click to include and shift-click to exclude. Click again to remove.\"]]]\n   (when (seq references)\n     (let [filters (rum/react filters-atom)]\n       [:div.mt-5.sm:mt-4.sm:flex.sm.gap-1.flex-wrap\n        (for [reference references]\n          (let [lc-reference (string/lower-case reference)\n                filtered (get filters lc-reference)\n                color (condp = filtered\n                        true \"text-green-400\"\n                        false \"text-red-400\"\n                        nil)]\n            [:button.border.rounded.px-1.mb-1.mr-1 {:key reference :class color :style {:border-color \"currentColor\"}\n                                                    :on-click (fn [e]\n                                                                (swap! filters-atom #(if (nil? (get filters lc-reference))\n                                                                                       (assoc % lc-reference (not (.-shiftKey e)))\n                                                                                       (dissoc % lc-reference)))\n                                                                (page-handler/save-filter! page-name @filters-atom))}\n             reference]))]))])\n\n(defn filter-dialog\n  [filters-atom references page-name]\n  (fn [close-fn]\n    (filter-dialog-inner filters-atom close-fn references page-name)))\n\n(rum/defc block-linked-references < rum/reactive db-mixins/query\n  [block-id]\n  (let [refed-blocks-ids (model-db/get-referenced-blocks-ids (str block-id))]\n    (when (seq refed-blocks-ids)\n      (let [ref-blocks (db/get-block-referenced-blocks block-id)\n            ref-hiccup (block/->hiccup ref-blocks\n                                       {:id (str block-id)\n                                        :ref? true\n                                        :breadcrumb-show? true\n                                        :group-by-page? true\n                                        :editor-box editor/box}\n                                       {})]\n        [:div.references-blocks\n         (content/content block-id\n                          {:hiccup ref-hiccup})]))))\n\n(rum/defcs references* < rum/reactive db-mixins/query\n  (rum/local nil ::n-ref)\n  {:init (fn [state]\n           (let [page-name (first (:rum/args state))\n                 filters (when page-name\n                           (atom (page-handler/get-filters (string/lower-case page-name))))]\n             (assoc state ::filters filters)))}\n  [state page-name]\n  (when page-name\n    (let [page-name (string/lower-case page-name)\n          repo (state/get-current-repo)\n          threshold (state/get-linked-references-collapsed-threshold)\n          refed-blocks-ids (model-db/get-referenced-blocks-ids page-name)\n          *n-ref (::n-ref state)\n          n-ref (or (rum/react *n-ref) (count refed-blocks-ids))\n          default-collapsed? (>= (count refed-blocks-ids) threshold)\n          filters-atom (get state ::filters)\n          filter-state (rum/react filters-atom)\n          block-id (parse-uuid page-name)\n          page-name (string/lower-case page-name)\n          journal? (date/valid-journal-title? (string/capitalize page-name))\n          scheduled-or-deadlines (when (and journal?\n                                            (not (true? (state/scheduled-deadlines-disabled?)))\n                                            (= page-name (string/lower-case (date/journal-name))))\n                                   (db/get-date-scheduled-or-deadlines (string/capitalize page-name)))]\n      (when (or (seq refed-blocks-ids)\n                (seq scheduled-or-deadlines)\n                (seq filter-state))\n        [:div.references.flex-1.flex-row\n         [:div.content.pt-6\n          (when (seq scheduled-or-deadlines)\n            (ui/foldable\n             [:h2.font-bold.opacity-50 \"SCHEDULED AND DEADLINE\"]\n             [:div.references-blocks.mb-6\n              (let [ref-hiccup (block/->hiccup scheduled-or-deadlines\n                                               {:id (str page-name \"-agenda\")\n                                                :ref? true\n                                                :group-by-page? true\n                                                :editor-box editor/box}\n                                               {})]\n                (content/content page-name {:hiccup ref-hiccup}))]\n             {:title-trigger? true}))\n\n          (when (seq refed-blocks-ids)\n            (ui/foldable\n             [:div.flex.flex-row.flex-1.justify-between.items-center\n              [:h2.font-bold.opacity-50 (str n-ref \" Linked Reference\"\n                                             (when (> n-ref 1) \"s\"))]\n              [:a.filter.fade-link\n               {:title \"Filter\"\n                :on-mouse-down (fn [e] (util/stop-propagation e))\n                :on-click (fn []\n                            (let [ref-blocks (if block-id\n                                               (db/get-block-referenced-blocks block-id)\n                                               (db/get-page-referenced-blocks page-name))\n                                  ref-pages (map (comp :block/original-name first) ref-blocks)\n                                  references (db/get-page-linked-refs-refed-pages repo page-name)\n                                  references (->> (concat ref-pages references)\n                                                  (remove nil?)\n                                                  (distinct))]\n                              (state/set-modal! (filter-dialog filters-atom references page-name))))}\n               (ui/icon \"filter\" {:class (cond\n                                           (empty? filter-state)\n                                           \"\"\n                                           (every? true? (vals filter-state))\n                                           \"text-green-400\"\n                                           (every? false? (vals filter-state))\n                                           \"text-red-400\"\n                                           :else\n                                           \"text-yellow-400\")\n                                  :style {:fontSize 24}})]]\n\n             (fn []\n               (let [ref-blocks (if block-id\n                                  (db/get-block-referenced-blocks block-id)\n                                  (db/get-page-referenced-blocks page-name))\n                     filters (when (seq filter-state)\n                               (-> (group-by second filter-state)\n                                   (update-vals #(map first %))))\n                     filtered-ref-blocks (block-handler/filter-blocks repo ref-blocks filters true)\n                     n-ref (apply +\n                             (for [[_ rfs] filtered-ref-blocks]\n                               (count rfs)))]\n                 (reset! *n-ref n-ref)\n                 [:div.references-blocks\n                  (let [ref-hiccup (block/->hiccup filtered-ref-blocks\n                                                   {:id page-name\n                                                    :ref? true\n                                                    :breadcrumb-show? true\n                                                    :group-by-page? true\n                                                    :editor-box editor/box\n                                                    :filters filters}\n                                                   {})]\n                    (content/content page-name\n                                     {:hiccup ref-hiccup}))]))\n\n             {:default-collapsed? default-collapsed?\n              :title-trigger? true}))]]))))\n\n(rum/defc references\n  [page-name]\n  (ui/catch-error\n   (ui/component-error \"Linked References: Unexpected error\")\n   (ui/lazy-visible\n    (fn []\n      (references* page-name))\n    nil\n    {})))\n\n(rum/defcs unlinked-references-aux\n  < rum/reactive db-mixins/query\n  {:wrap-render\n   (fn [render-fn]\n     (fn [state]\n       (reset! (second (:rum/args state))\n               (apply +\n                 (for [[_ rfs]\n                       (db/get-page-unlinked-references\n                        (first (:rum/args state)))]\n                   (count rfs))))\n       (render-fn state)))}\n  [state page-name _n-ref]\n  (let [ref-blocks (db/get-page-unlinked-references page-name)]\n    [:div.references-blocks\n     (let [ref-hiccup (block/->hiccup ref-blocks\n                                      {:id (str page-name \"-unlinked-\")\n                                       :ref? true\n                                       :group-by-page? true\n                                       :editor-box editor/box}\n                                      {})]\n       (content/content page-name\n                        {:hiccup ref-hiccup}))]))\n\n(rum/defcs unlinked-references < rum/reactive\n  (rum/local nil ::n-ref)\n  [state page-name]\n  (let [n-ref (get state ::n-ref)]\n    (when page-name\n      (let [page-name (string/lower-case page-name)]\n        [:div.references.mt-6.flex-1.flex-row\n         [:div.content.flex-1\n          (ui/foldable\n           [:h2.font-bold {:style {:opacity \"0.3\"}}\n            (if @n-ref\n              (str @n-ref \" Unlinked Reference\" (when (> @n-ref 1)\n                                                  \"s\"))\n              \"Unlinked References\")]\n           (fn [] (unlinked-references-aux page-name n-ref))\n           {:default-collapsed? true\n            :title-trigger? true})]]))))\n"]}