shadow$provide.module$node_modules$fs_extra$lib$util$stat=function(global,require,module,exports){function getStats(src,dest){return Promise.all([stat(src),stat(dest).catch(err=>{if("ENOENT"===err.code)return null;throw err;})]).then(([srcStat,destStat])=>({srcStat,destStat}))}function checkParentPaths(src,srcStat,dest,funcName,cb){var srcParent=path.resolve(path.dirname(src));const destParent=path.resolve(path.dirname(dest));if(destParent===srcParent||destParent===path.parse(destParent).root)return cb();
srcParent=(err,destStat)=>err?"ENOENT"===err.code?cb():cb(err):areIdentical(srcStat,destStat)?cb(Error(errMsg(src,dest,funcName))):checkParentPaths(src,srcStat,destParent,funcName,cb);nodeSupportsBigInt?fs.stat(destParent,{bigint:!0},srcParent):fs.stat(destParent,srcParent)}function checkParentPathsSync(src,srcStat,dest,funcName){const srcParent=path.resolve(path.dirname(src)),destParent=path.resolve(path.dirname(dest));if(destParent!==srcParent&&destParent!==path.parse(destParent).root){try{var destStat=
statSync(destParent)}catch(err){if("ENOENT"===err.code)return;throw err;}if(areIdentical(srcStat,destStat))throw Error(errMsg(src,dest,funcName));return checkParentPathsSync(src,srcStat,destParent,funcName)}}function areIdentical(srcStat,destStat){return destStat.ino&&destStat.dev&&destStat.ino===srcStat.ino&&destStat.dev===srcStat.dev&&(nodeSupportsBigInt||destStat.ino<Number.MAX_SAFE_INTEGER||destStat.size===srcStat.size&&destStat.mode===srcStat.mode&&destStat.nlink===srcStat.nlink&&destStat.atimeMs===
srcStat.atimeMs&&destStat.mtimeMs===srcStat.mtimeMs&&destStat.ctimeMs===srcStat.ctimeMs&&destStat.birthtimeMs===srcStat.birthtimeMs)?!0:!1}function isSrcSubdir(src,dest){src=path.resolve(src).split(path.sep).filter(i=>i);const destArr=path.resolve(dest).split(path.sep).filter(i=>i);return src.reduce((acc,cur,i)=>acc&&destArr[i]===cur,!0)}function errMsg(src,dest,funcName){return`Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`}const fs=require("module$node_modules$fs_extra$lib$fs$index"),
path=require("module$node_modules$path_browserify$index"),util=require("module$node_modules$util$util"),nodeSupportsBigInt=require("module$node_modules$at_least_node$index")("10.5.0"),stat=file=>nodeSupportsBigInt?fs.stat(file,{bigint:!0}):fs.stat(file),statSync=file=>nodeSupportsBigInt?fs.statSync(file,{bigint:!0}):fs.statSync(file);module.exports={checkPaths:function(src,dest,funcName,cb){util.callbackify(getStats)(src,dest,(err,stats)=>{if(err)return cb(err);const {srcStat,destStat}=stats;return destStat&&
areIdentical(srcStat,destStat)?cb(Error("Source and destination must not be the same.")):srcStat.isDirectory()&&isSrcSubdir(src,dest)?cb(Error(errMsg(src,dest,funcName))):cb(null,{srcStat,destStat})})},checkPathsSync:function(src,dest,funcName){a:{const srcStat=statSync(src);try{var JSCompiler_inline_result=statSync(dest)}catch(err){if("ENOENT"===err.code){JSCompiler_inline_result={srcStat,destStat:null};break a}throw err;}JSCompiler_inline_result={srcStat,destStat:JSCompiler_inline_result}}const {srcStat:srcStat$jscomp$0,
destStat}=JSCompiler_inline_result;if(destStat&&areIdentical(srcStat$jscomp$0,destStat))throw Error("Source and destination must not be the same.");if(srcStat$jscomp$0.isDirectory()&&isSrcSubdir(src,dest))throw Error(errMsg(src,dest,funcName));return{srcStat:srcStat$jscomp$0,destStat}},checkParentPaths,checkParentPathsSync,isSrcSubdir}}
//# sourceMappingURL=module$node_modules$fs_extra$lib$util$stat.js.map
