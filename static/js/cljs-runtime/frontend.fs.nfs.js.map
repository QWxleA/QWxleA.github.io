{"version":3,"sources":["frontend/fs/nfs.cljs"],"mappings":";;;;AAiBA,GAAA,QAAAA,qCAAAC,wCAAAC,4CAAAC;AAAA;AAAA,AAAA,AAASC,yCAAuB,6CAAA,7CAACC;;AAEjC,sCAAA,tCAAMC,oFACHC;AADH,AAEE,mDAAA,AAAAC,5CAACC,4DAAKL,wCAAuBG;;AAE/B,4CAAA,5CAAMG,gGACHH,YAAYI;AADf,AAEE,OAACC,mDAAMR,uCAAuBS,gBAAMN,YAAYI;;AAElD,+CAAA,/CAAMG,sGACHP;AADH,AAEE,OAACK,mDAAMR,uCAAuBW,iBAAOR;;AAEvC,oCAAA,pCAAMS,gFACHC,KAAKC,KAAKC;AADb,AAEE,IAAAC,qBAAyB,iDAAA,jDAACE,4CAASH;AAAnC,AAAA,oBAAAC;AAAA,AAAA,oBAAAA,hBAAWC;AAAX,AAEE,IAAMH,WAAK,EAAI,6CAAA,7CAACK,iDAAK,AAACC,gBAAMN,QACf,kDAAA,lDAACO,6CAAKP,UACNA;AAFb,AAIE,QAACQ,4EAAAA,yGAAAA,/BAA8BT,qFAAAA,hFAAKC,qFAAAA,5EAAKG,qFAAAA;;AAN7C;;;AAQF,oCAAA,pCAAMM,gFACHV,KAAKN,OAAOiB;AADf,AAEE,IAAMX,WAAK,iBAAAY,mBAAIZ;AAAJ,AAAA,oBAAAY;AAAAA;;AAAS,OAACC;;;AAArB,AACE,OAACC,gDACA,AAACC,uCAAuBrB,OAAOiB,mBAC/B;AAAA,AACE,+BAAA,mFAAA,8FAAA,hNAACK,+LAAqChB;;AADxC;;;AAIL,mDAAA,nDAAMiB,8GACHjB;AADH,AAEE,GAAM,AAACkB,gCAAiBlB;AAAxB,AACE,OAAAmB,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,8IAAA,WAAQzB,zGAAO,AAAC4B,sBAAa,CAAA,sDAAetB;AAA5C,AAAA,OAAAqB,2BAAA,AACE,0BAAA,oDAAA,5DAAM3B,QACJ,8CAAA,9CAACgB,kCAAkBV,KAAKN;;;;AAH9B;;;AAKF,0CAAA,1CAAO6B,4FACJC,aAAaC;AADhB,AAEE,GAAM,EAAK,OAASD,+BAAc,OAASC;AAA3C,AACE,oBAAI,AAACC,qCAAsB,AAACb;AAC1B,OAAAM,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,qHAAA,WAAQQ,hFAAkB,AAACC,uDAAgBJ;AAA3C,AAAA,OAAAH,2BAAA,AACE,AAACf,6CAAE,AAACuB,oBAAYF,mBAAmB,AAACE,oBAAYJ;;;;AAClD,OAACK,sBAAW,AAACxB,6CAAE,AAACuB,oBAAYL,cAAc,AAACK,oBAAYJ;;;AAJ3D;;;AAMF,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,kEAAA,WAAAM,mBAAAC,hGAAqC8D;;AAArC,AAAA,IAAA/D,yBAAA;AAAA,AAAA,OAAAA,8DAAAC,gBAAA;;;AAAA,CAAA,AAAA,kEAAA,WAAAC,mBAAAC,OAAAC,vGAAqC2D;;AAArC,AAAA,IAAA7D,yBAAA;AAAA,AAAA,IAAAG,WAAAF;AAAA,AAAA,QAAAE;;AAAA,OAAA5C,4CAAA6C,gBAAAH,OAAAC;;;;;AAAA,CAAA,AAAA,uEAAA,WAAAG,mBAAAC,gBAAAC,rHAAqCsD;;AAArC,AAAA,IAAAxD,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,0BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,8EAAA,WAAAU,mBAAAC,qBAAAC,jIAAqC4C;;AAArC,AAAA,IAAA9C,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,wBAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,iCAAAjB;;;AAAA,CAAA,AAAA,sEAAA,WAAAkB,jFAAqCuC;;AAArC,AAAA,IAAAvC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,iCAAA,kBAAAlB,iBAAA,AAAAoB,oBAAApB,iBAAA,AAAAqB;;;AAAA,CAAA,AAAA,8DAAA,WAAAC,zEAAqCmC;;AAArC,AAAA,IAAAnC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,oEAAA,WAAAC,/EAAqCiC;;AAArC,AAAA,IAAAjC,yBAAA;AAAA,AAAA,gCAAAD,cAAAvB,gBAAAyB,lDAAqCgC;;;AAArC,CAAA,AAAA,kEAAA,WAAA/B,7EAAqC+B;;AAArC,AAAA,IAAA/B,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA3B;;;AAAA,CAAA,AAAA,8DAAA,WAAA4B,zEAAqC6B;;AAArC,AAAA,IAAA7B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,aAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,gEAAA,WAAAG,UAAAC,rFAAqCwB;;AAArC,AAAA,IAAAzB,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,AAAAhE,6CAAA,AAAA+D,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,+DAAA,WAAAC,mBAAAC,7FAAqCsB;;AAArC,AAAA,IAAAvB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,kCAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAX,eAAAY;;AAAA,gCAAAZ,cAAA,AAAAiB,oBAAA,AAAAH,+CAAArC,gBAAAmC,kBAAA,vIAAqCsB;;;;AAArC,CAAA,AAAA,oFAAA,WAAAhB,mBAAA5C,lHAAqC4D;;AAArC,AAAA,IAAAhB,yBAAA;AAAA,AAAA,OAAAL,0BAAApC,gBAAAH;;;AAAA,CAAA,AAAA,sEAAA,WAAA6C,mBAAAC,gBAAAzB,pHAAqCuC;;AAArC,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,gCAAApB,cAAA,AAAAwB,8CAAA/C,gBAAA2C,gBAAAzB,UAAA,1HAAqCuC;;;AAArC,CAAA,AAAA,gEAAA,WAAAT,3EAAqCS;;AAArC,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAhC,+CAAA,iCAAAjB;;;AAAA,CAAA,AAAA,uEAAA,WAAAkD,mBAAAhC,rGAAqCuC;;AAArC,AAAA,IAAAP,yBAAA;AAAA,AAAA,gCAAAhC,SAAAlB,gBAAAyB,7CAAqCgC;;;AAArC,CAAA,AAAA,oEAAA,WAAAN,mBAAAC,lGAAqCK;;AAArC,AAAA,IAAAN,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,kEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAAhD,+CAAAmD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAA,yDAAAI,zDAAqCC;;AAArC,CAAA,AAAA,4EAAA,5EAAqCA,uFAE1BW,MAAMC;;AAFjB,AAAA,gBAAA,ZAEWD;AAFX,AAGI,IAAME,mFAAW,uDAAA,vDAACC,mDAAaF,9HACd,AAACG,+CAAOC;IACnBC,6DAAU,AAACC,kBAAQL,xEACT,kDAAA,lDAACM;IACXC,UAAQ,AAACC,eAAKR;IACdS,cAAY,CAAA,UAAeL;AALjC,yDAOG,AAAA5F,gDAAA,KAAA,WAAAC,zHAUA,OAACqG;AAVD,AAAA,OAAAtG,mFAAA,WAAQzB,9CAAO,AAAC4B,sBAAa8F;AAA7B,AAAA,OAAAjG,oIAAA,WACQkG,/FAAE,0BAAA,oDAAA,5DAAM3H,QAAO,kCAAA,YAAA,9CAACgB,uCAAsBhB;AAD9C,AAAA,OAAA2B,2BAAA,AAEE,kBAAM,iBAAAiG,oBAAK5H;AAAL,AAAA,oBAAA4H;AAAA,IAAAA,wBAAYJ;AAAZ,AAAA,oBAAAI;AACK,UAAK,AAACR,4BAAcI;;AADzBI;;;AAAAA;;MAAN,AAEE,AAAAnG,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sGAAA,WAAQzB,jEAAO,kCAAA,YAAA,9CAAyBA,0BAAOwH;AAA/C,AAAA,OAAA/F,gIAAA,WAEQ7B,3FAAY,aAAA,ZAAK8H,4DAAgBF;AAFzC,AAAA,OAAA/F,oGAAA,WAGQkG,/DAAE,AAACE,4BAAcjI,YAAYI;AAHrC,AAAA,OAAA2B,2BAAA;AAIE,AAAC5B,0CAAqBH,YAAYI;;AAClC,gHAAA,zGAAC8H,2HAA0B,aAAA,ZAAKJ,4DAAgBF;;;;;;IAPpD;;;IAQO,WAAKQ;AAAL,AACE,cAAA,sBAAA,pCAACC,8BAAiCD,gBAAgBhB;;AAClD,MAAOgB;;;;AAtBzB,CAAA,AAAA,6EAAA,7EAAqC5B,wFAgCzBsC,MAAKpI,KAAKC,KAAKoI;;AAhC3B,AAAA,gBAAA,ZAgCYD;AAhCZ,AAiCI,IAAAE,aAAqB,AAACE,mCAA0BvI;UAAhD,AAAA6C,4CAAAwF,WAAA,IAAA,jEAAO5B;eAAP,AAAA5D,4CAAAwF,WAAA,IAAA,tEAAWC;IACLjJ,cAAY,CAAA,qDAAcW;AADhC,yDAGG,AAAAkB,gDAAA,KAAA,WAAAC,zHAkBA,OAACqG;AAlBD,AAAA,OAAAtG,8UAAA,WAAQsH,zSAAY,CAAA,gDAASzI,kDAAK,0DAAA,1DAAC0I,qHAAqBC,yBAAgBC;AAAxE,AAAA,OAAAzH,wHAAA,WACQkG,nFAAE,AAAiBe,2DAAKK;AADhC,AAAA,OAAAtH,mFAAA,WAEQzB,9CAAO,AAAC4B,sBAAahC;AAF7B,AAAA,OAAA6B,iEAAA,WAGQjB,5BAAK,AAAUR;AAHvB,AAAA,OAAAyB,4DAAA,WAIQ0H,vBAAQ,AAAO3I;AAJvB,AAAA,OAAAiB,4IAAA,WAKQzB,vGAAO,AAAC4B,sBAAa,CAAA,qDAAcoF;AAL3C,AAAA,OAAAvF,4FAAA,WAMQkG,vDAAE,AAACyB,+BAAiBxJ;AAN5B,AAAA,OAAA6B,sNAAA,WAOQ4H,nIAAc,iGAAA,jGAACZ,uBAAelI,KAAK,CAAA,sDAAA,NAASD,pGAC9B,4HAAA,IAAA,hIAACmI,vBACD,4JAAA,KAAA,jKAACA;AATvB,AAAA,OAAAhH,+KAAA,WAUQ6H,1IAAS,0DAAA,bAAKP,6DAAgBM;AAVtC,AAAA,OAAA5H,gJAAA,WAWQkG,3GAAE,qEAAA,qBAAA,1FAAsBe,gEAAKpI,SAELgJ,SACAH;AAdhC,AAAA,OAAAxH,2BAAA;AAeE,oBAAM3B;AAAN,AACE,AAAkBA,uBAAO6I;;AAD3B;;AAEA,OAAC1I,6CAAwBP;;;;;;;;;;;;;IAClB,WAAKoI;AAAL,AACE,OAAAuB,qDAAA,kBAAA,uDAAA,AAAAC,mBAAA,2CAAA,iEAAA,2CAAA,0DAAA,qEAAA,oDAAA,aAAA,3IAA+BjJ,4DACCyH;;;;AAxDlD,CAAA,AAAA,0EAAA,1EAAqC5B,qFA2KvBW,MAAM8E,eAAeF;;AA3KnC,AAAA,gBAAA,ZA2Kc5E;AA3Kd,AA4KI,qDAAA,9CAAC+E,+BAAeD,oBAAoBF;;;AA5KxC,CAAA,AAAA,6EAAA,7EAAqCvF,wFAmJzBsC,MAAKpI,KAAK8K,SAAS9B;;AAnJ/B,AAAA,gBAAA,ZAmJYZ;AAnJZ,AAoJI,OAAAjH,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,6LAAA,WAAQwF,7EAAW,4DAAA,5DAACC,mDAAaoC,9HACd,AAACnC,+CAAOC;AAD3B,AAAA,OAAA3F,mIAAA,WAEQuF,9FAAI,CAAA,gDAAS,AAACnG,gBAAMoG;AAF5B,AAAA,OAAAxF,6HAAA,WAGQ6H,lCAAc,AAAC+B,eAAKpE,rEACN,kDAAA,lDAACM;AAJvB,AAAA,OAAA9F,iJAAA,WAKQzB,5GAAO,AAAC4B,sBAAa,CAAA,qDAAcwJ;AAL3C,AAAA,OAAA3J,iEAAA,WAMQjB,5BAAK,AAAUR;AANvB,AAAA,OAAAyB,4DAAA,WAOQ0H,vBAAQ,AAAO3I;AAPvB,AAAA,OAAAiB,oJAAA,WAQQkG,/GAAE,8FAAA,9FAAsBe,gEAAKpI,KAAK0G,IAAIsC,aAASH;AARvD,AAAA,OAAAxH,2BAAA,AASE,0EAAA,1EAAkB+G,4DAAKpI,KAAK8K;;;;;;;;;;;AA7JlC,CAAA,AAAA,wEAAA,xEAAqChF,mFAwBzBW,MAAMC;;AAxBlB,AAAA,gBAAA,ZAwBYD;AAxBZ,AAyBI,IAAMmB,SAAO,CAAA,sDAAelB;IACtBmB,eAAa,eAAA,AAAAtI,fAACuI,+BAAM3I;AAD1B,AAEE,OAAC2C,sBAEK,AAACoG,4CAAI,WAAKjI;AAAL,AACE,0CAAA,nCAACkI,uBAAelI,KAAK2H;GAF5B,+CAAA,WAAAG,1DAACC;AAAD,AAAS,yCAAAD,lCAACE,mDAAsB,QAAA,PAAKL;GAAaC;;;AA5B9D,CAAA,AAAA,qEAAA,rEAAqC/B,gFA8J5BW,MAAMC,IAAIzG;;AA9JnB,AAAA,gBAAA,ZA8JSwG;AA9JT,AA+JI,IAAAuE,qBAAc,AAAC3L,oCAAoB,CAAA,UACK,iCAAA,IAAA,rCAAC4L,6BAAqBvE,wDACtBzG;AAFxC,AAAA,oBAAA+K;AAAA,WAAAA,PAAS9K;AAAT,AAGE,OAAAiB,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,+DAAA,WAAQjB,1BAAK,AAAUA;AAAvB,AAAA,OAAAmB,2BAAA,AACE,4BAAA,WAAA6J,tBAAMC;AAAN,AAAgB,4DAAAD,rDAAC7K,4CAASH;;AAA1B,AAAA,kDAAA,4GAAA,6EAAA,tGAC0B,SAAA,TAACiL,qFACb,SAAA,TAACA,6EACD,SAAA,TAACA;;;;;AACjB,6BAAA,tBAACC;;;;AAvKP,CAAA,AAAA,gFAAA,hFAAqCtF,2FA+KtBW,MAAM0C;;AA/KrB,AAAA,gBAAA,ZA+Ke1C;AA/Kf,AAAA;;;AAAA,CAAA,AAAA,4EAAA,5EAAqCX,uFA0D1BW,MAAM0C;;AA1DjB,AAAA,gBAAA,ZA0DW1C;AA1DX,AAAA;;;AAAA,CAAA,AAAA,iFAAA,jFAAqCX,4FAoErBW,MAAMzG,KAAK0G,IAAIzG,KAAK4I,QAAQS;;AApE5C,AAAA,gBAAA,ZAoEgB7C;AApEhB,AAqEI,IAAME,QAAM,wDAAA,xDAACC,mDAAa3G;IACpBsI,WAAS,AAACpB,eAAKR;IACf4C,2IAAa,AAACvC,kBAAQL,7FACT,AAACE,+CAAOC,rGACR,kDAAA,lDAACG;IACduC,sBAAoB,CAAA,UACK,iDAAA,jDAAChJ,6CAAKkG,SACN,2BAAA,uBAAA,hCAAM6C,SACJ,CAAA,IAASA;IACpCjK,cAAY,EAAI,6CAAA,7CAACgB,iDAAM,AAAC6G,eAAKqC,uBACf,iEAAA,jEAAChJ,6CAAKgJ,wBAAsB,kCAAA,jCAAK,EAAOA,qCACxCA;IACdlK,kBAAY,mCAAA,KAAA,xCAAC6I,uBAAe7I;IAC5BmK,uBAAqB,iBAAA,hBAAKnK,gEAAgBiJ;AAbhD,AAcE,OAAApH,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,4FAAA,WAAQuI,vDAAY,AAACpI,sBAAamI;AAAlC,AAAA,OAAApI,2BAAA,AAEE,AAAAF,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,gDAAsB,+BAAA,bAAMuI,aACJ,AAACjC,kDAAQ,AAAAtG,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sEAAA,WAAQkG,jCAAE,AAAUqC;AAApB,AAAA,OAAArI,2BAAA,AAAA;;IACA,WAAKuI;AAAL,AACE,AAACC,YAAeD;;AAChB,GAAM,6CAAA,7CAACtJ,6DAAkB,AAAQsJ;AAAjC,AACE,AAACd,+BAAiBW;;AAClB,AAAC5J,6CAAwB4J;;AAF3B;;AAFF;UAFjC,WAAQE,jBAAc;AAAtB,AAAA,OAAAxI,mGAAA,WAQQuI,9DAAY,6CAAA,3BAAIC,eAAcD;AARtC,AAAA,OAAArI,2BAAA;AAUE,oBAAMqI;AAAN,AACE,AAACjK,0CAAqBgK,qBAAqBC;;AAD7C;;AAEA,oBAAIA;yDACE,AAAAvI,gDAAA,KAAA,WAAAC,zHAyBA,OAACqG;AAzBD,AAAA,OAAAtG,0EAAA,WAAQkI,rCAAW,AAAUK;AAA7B,AAAA,OAAAvI,kEAAA,WACQ2I,7BAAc,AAAOT;AAD7B,AAAA,OAAAlI,uFAAA,WAEQ4I,lDAAe,AAACC;AAFxB,AAAA,OAAA7I,4GAAA,WAGQ8I,vEAAI,AAACC,0BAAkB,AAACC,2BAAkBlK;AAHlD,AAAA,OAAAkB,iNAAA,WAIQM,5KAAW,CAAC2I,qDAAAA,gEAAAA,bAAYpK,4CAAAA,vCAAKC,4CAAAA;AAJrC,AAAA,OAAAkB,gDAK0B,AAACI,wCAAkBuI,cAAc,iBAAAlJ,mBAAIa;AAAJ,AAAA,oBAAAb;AAAAA;;AAAA;;MAL3D,WAKQyJ;AALR,AAAA,OAAAhJ,2BAAA,AAME,iCAAA,fAAMyI,eACJ,EAAI,oDAAA,+HAAA,8CAAA,mLAAA,lZACC,GAAK,AAAChD,4BAAcrF,qBACpB,AAAC6I,cAAI,AAAA,mGAAgBhB,cACrB,AAACgB,cAAID,gCACL,GAAK,0BAAA,iFAAA,kBAAA,WAAA,xIAAC5F,kKAAsCwF,cAC5C,GAAK,oCAAA,pCAACM,+BAAiBtK,0BACvB,oBAAA,nBAAO8J,mCACV,AAAA5I,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sHAAA,WAAQ2I,jFAAc,AAAClI,uDAAgBkI;AAAvC,AAAA,OAAAzI,2BAAA,AACE,+BAAA,mFAAA,lHAACmJ,gNAA8CvK,KAAK6J,kBAAcjB;;IACpE,AAAA1H,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,6GAAA,WAAQkG,xEAAE,uDAAA,vDAAC3G,kCAAkBV,KAAK0J;AAAlC,AAAA,OAAAvI,yGAAA,WACQkG,pEAAE,AAACoD,gCAAgBf,gBAAYb;AADvC,AAAA,OAAA1H,0EAAA,WAEQjB,rCAAK,AAAUwJ;AAFvB,AAAA,OAAArI,2BAAA,AAGE,wBAAA,NAAMnB;AACJ,AAAAiB,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,oNAAA,WAAQ0H,/KAAQ,kBAAI,AAACnH,qCAAsB,AAACb,oCAC1B,AAACe,uDAAgBiH,SACjBA;AAFlB,AAAA,OAAAxH,2BAAA,AAGE,CAACqJ,mEAAAA,0FAAAA,zBAAqB1K,sEAAAA,jEAAKC,sEAAAA,jEAAK4I,sEAAAA;;;;AAClC,OAAC9I,kCAAkBC,KAAKC,KAAKC;;CAL/B;;;;KAbN;;;;;;;IAmBO,WAAK0J;AAAL,AACE,OAACe,cAAiBf;;;yDAGhC,AAAAzI,gDAAA,KAAA,WAAAC,zHAgBA,OAACqG;AAhBD,AAAA,OAAAtG,uFAAA,WAAQzB,lDAAO,AAAC4B,sBAAahC;AAA7B,AAAA,OAAA+B,2BAAA,AACE,kBAAI3B,QACF,AAAAyB,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,oGAAA,WAAQkG,/DAAE,8CAAA,9CAAC3G,kCAAkBV,KAAKN;AAAlC,AAAA,OAAAyB,kGAAA,WACQuI,7DAAY,8BAAA,YAAA,1CAAoBhK,qBAAO6I;AAD/C,AAAA,OAAApH,0EAAA,WAGQjB,rCAAK,AAAUwJ;AAHvB,AAAA,OAAAvI,4DAAA,WAIQyJ,vBAAK,AAAO1K;AAJpB,AAAA,OAAAmB,2BAAA,AAKE,EAAI,AAACyF,4BAAc8D,OACjB,AAAAzJ,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,kHAAA,WAAQkG,7EAAE,AAACE,4BAAckC,qBAAqBC;AAA9C,AAAA,OAAAvI,yGAAA,WACQkG,pEAAE,AAACoD,gCAAgBf,gBAAYb;AADvC,AAAA,OAAA1H,0EAAA,WAEQjB,rCAAK,AAAUwJ;AAFvB,AAAA,OAAArI,2BAAA,AAGE,4BAAA,sDAAA,hEAAMnB,UACJ,AAACH,kCAAkBC,KAAKC,KAAKC;;;;IACjC,uOAAA,vOAAC2K,uEAAmB,CAAA,8DAAA,NAAiB5K;;;;;IAEzC,yGAAA,zGAACuH,gJAA+ClI;;IAC3C,WAAKoI;AAAL,AACE,yGAAA,4BAAA,2CAAA,hLAACF,qOAA2CvH;;AAC5C,OAAC0K,cAAiBjD;;;;;;;;;;;;AAjJ1C,CAAA,AAAA,yEAAA,zEAAqC5B,oFAwKxBW,MAAM4E;;AAxKnB,AAAA,gBAAA,ZAwKa5E;AAxKb,AAyKI,2CAAA,eAAA,nDAAC6E,0DACoBD;;;AA1KzB,CAAA,AAAA,0EAAA,1EAAqCvF,qFA8DvBW,MAAMC,IAAIzG,KAAKmJ;;AA9D7B,AAAA,gBAAA,ZA8Dc3C;AA9Dd,AA+DI,IAAMnH,cAAY,CAAA,0DAAA,LAAcoH,qDAAQzG;AAAxC,AACE,OAAAkB,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,mFAAA,WAAQzB,9CAAO,AAAC4B,sBAAahC;AAA7B,AAAA,OAAA6B,gDACmB,iBAAAmG,oBAAK5H;AAAL,AAAA,oBAAA4H;AAAY,OAAU5H;;AAAtB4H;;KADnB,WACQ+B;AADR,AAAA,OAAAhI,2BAAA,AAEE,iBAAAiG,oBAAK+B;AAAL,AAAA,oBAAA/B;AAAgB,OAAO+B;;AAAvB/B;;;;;;;;AAlER,CAAA,AAAAxB,+BAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,qCAAA;;AAAA,CAAA,AAAAA,0CAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,sBAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,6CAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;2BAAA,3BAAqCM;AAArC,AAAA,YAAAT,oBAAA,KAAA,KAAA;;;AAAA;;;8BAAA,sCAAAK,pEAAqCK;AAArC,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA3B,+CAAAyB;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAvB,6CAAA,mCAAAyB;;AAAAA;;;AAAA,AAAA,YAAAP,oBAAA,KAAA,AAAAjB,oBAAAuB,sBAAA;;;AAAAN","names":["js/frontend","js/frontend.fs","js/frontend.fs.nfs","js/frontend.fs.nfs.nfs-file-handles-cache","frontend.fs.nfs/nfs-file-handles-cache","cljs.core.atom","frontend.fs.nfs/get-nfs-file-handle","handle-path","cljs.core/deref","cljs.core.get","frontend.fs.nfs/add-nfs-file-handle!","handle","cljs.core.swap_BANG_","cljs.core/assoc","frontend.fs.nfs/remove-nfs-file-handle!","cljs.core/dissoc","frontend.fs.nfs/nfs-saved-handler","repo","path","file","temp__5720__auto__","last-modified","frontend.fs.nfs.goog$module$goog$object.get","cljs.core._EQ_","cljs.core/first","cljs.core.subs","frontend.db/set-file-last-modified-at!","frontend.fs.nfs/verify-permission","read-write?","or__4253__auto__","frontend.state/get-current-repo","promesa.core.then","js/module$frontend$utils.verifyPermission","frontend.state/set-state!","frontend.fs.nfs/check-directory-permission!","frontend.config/local-db?","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","frontend.idb/get-item","frontend.fs.nfs/contents-matched?","disk-content","db-content","frontend.encrypt/encrypted-db?","decrypted-content","frontend.encrypt.decrypt","clojure.string/trim","promesa.core/resolved","this__4502__auto__","k__4503__auto__","this__4504__auto__","k93937","else__4505__auto__","G__93943","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__93944","vec__93945","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__93936","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this93938","other93939","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","this__4510__auto__","k__4511__auto__","pred__93950","cljs.core/keyword-identical?","expr__93951","cljs.core.assoc","this__4515__auto__","cljs.core/seq","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","cljs.core/PROTOCOL_SENTINEL","frontend.fs.nfs/Nfs","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__93940","extmap__4542__auto__","G__94067","cljs.core/record?","frontend.fs.nfs/->Nfs","frontend.fs.nfs/map->Nfs","_this","dir","parts","clojure.string.split","cljs.core.remove","clojure.string/blank?","root","cljs.core/butlast","clojure.string.join","new-dir","cljs.core/last","root-handle","_","and__4251__auto__","frontend.idb/set-item!","cljs.core.println","promesa.core.catch$","error","js/console.debug","prefix","cached-files","cljs.core/keys","p1__93927#","cljs.core.filter","clojure.string/starts-with?","cljs.core.map","clojure.string/replace","this","_opts","vec__93975","basename","frontend.util/get-dir-and-basename","recycle-dir","frontend.util.format","frontend.config/app-name","frontend.config/recycle-dir","content","frontend.idb/remove-item!","file-name","new-path","lambdaisland.glogi.log","cljs.core/identity","_dir","_options","local-file","opts","sub-dir","sub-dir-handle-path","basename-handle-path","file-handle","test-get-file","e","js/console.dir","local-content","pending-writes","frontend.state/get-write-chan-length","ext","clojure.string/lower-case","frontend.util/get-file-ext","frontend.db/get-file","contents-matched?","cljs.core/not","clojure.string/includes?","frontend.state/pub-event!","js/module$frontend$utils.writeFile","frontend.db/set-file-content!","js/console.error","text","frontend.handler.notification.show_BANG_","old-path","cljs.core/rest","temp__5718__auto__","clojure.string/replace-first","p1__93934#","get-attr","promesa.core/rejected","ok-handler","js/module$frontend$utils.openDirectory","path-or-handle","js/module$frontend$utils.getFiles"],"sourcesContent":["(ns frontend.fs.nfs\n  (:require [frontend.fs.protocol :as protocol]\n            [frontend.util :as util]\n            [clojure.string :as string]\n            [frontend.idb :as idb]\n            [promesa.core :as p]\n            [lambdaisland.glogi :as log]\n            [goog.object :as gobj]\n            [frontend.db :as db]\n            [frontend.config :as config]\n            [frontend.state :as state]\n            [frontend.handler.notification :as notification]\n            [\"/frontend/utils\" :as utils]\n            [frontend.encrypt :as encrypt]))\n\n;; We need to cache the file handles in the memory so that\n;; the browser will not keep asking permissions.\n(defonce nfs-file-handles-cache (atom {}))\n\n(defn get-nfs-file-handle\n  [handle-path]\n  (get @nfs-file-handles-cache handle-path))\n\n(defn add-nfs-file-handle!\n  [handle-path handle]\n  (swap! nfs-file-handles-cache assoc handle-path handle))\n\n(defn remove-nfs-file-handle!\n  [handle-path]\n  (swap! nfs-file-handles-cache dissoc handle-path))\n\n(defn nfs-saved-handler\n  [repo path file]\n  (when-let [last-modified (gobj/get file \"lastModified\")]\n    ;; TODO: extract\n    (let [path (if (= \\/ (first path))\n                 (subs path 1)\n                 path)]\n      ;; Bad code\n      (db/set-file-last-modified-at! repo path last-modified))))\n\n(defn verify-permission\n  [repo handle read-write?]\n  (let [repo (or repo (state/get-current-repo))]\n    (p/then\n     (utils/verifyPermission handle read-write?)\n     (fn []\n       (state/set-state! [:nfs/user-granted? repo] true)\n       true))))\n\n(defn check-directory-permission!\n  [repo]\n  (when (config/local-db? repo)\n    (p/let [handle (idb/get-item (str \"handle/\" repo))]\n      (when handle\n        (verify-permission repo handle true)))))\n\n(defn- contents-matched?\n  [disk-content db-content]\n  (when (and (string? disk-content) (string? db-content))\n    (if (encrypt/encrypted-db? (state/get-current-repo))\n      (p/let [decrypted-content (encrypt/decrypt disk-content)]\n        (= (string/trim decrypted-content) (string/trim db-content)))\n      (p/resolved (= (string/trim disk-content) (string/trim db-content))))))\n\n(defrecord ^:large-vars/cleanup-todo Nfs []\n  protocol/Fs\n  (mkdir! [_this dir]\n    (let [parts (->> (string/split dir \"/\")\n                     (remove string/blank?))\n          root (->> (butlast parts)\n                    (string/join \"/\"))\n          new-dir (last parts)\n          root-handle (str \"handle/\" root)]\n      (->\n       (p/let [handle (idb/get-item root-handle)\n               _ (when handle (verify-permission nil handle true))]\n         (when (and handle new-dir\n                    (not (string/blank? new-dir)))\n           (p/let [handle (.getDirectoryHandle ^js handle new-dir\n                                               #js {:create true})\n                   handle-path (str root-handle \"/\" new-dir)\n                   _ (idb/set-item! handle-path handle)]\n             (add-nfs-file-handle! handle-path handle)\n             (println \"Stored handle: \" (str root-handle \"/\" new-dir)))))\n       (p/catch (fn [error]\n                  (js/console.debug \"mkdir error: \" error \", dir: \" dir)\n                  (throw error))))))\n\n  (readdir [_this dir]\n    (let [prefix (str \"handle/\" dir)\n          cached-files (keys @nfs-file-handles-cache)]\n      (p/resolved\n       (->> (filter #(string/starts-with? % (str prefix \"/\")) cached-files)\n            (map (fn [path]\n                   (string/replace path prefix \"\")))))))\n\n  (unlink! [this repo path _opts]\n    (let [[dir basename] (util/get-dir-and-basename path)\n          handle-path (str \"handle\" path)]\n      (->\n       (p/let [recycle-dir (str \"/\" repo (util/format \"/%s/%s\" config/app-name config/recycle-dir))\n               _ (protocol/mkdir! this recycle-dir)\n               handle (idb/get-item handle-path)\n               file (.getFile handle)\n               content (.text file)\n               handle (idb/get-item (str \"handle\" dir))\n               _ (idb/remove-item! handle-path)\n               file-name (-> (string/replace path (str \"/\" repo \"/\") \"\")\n                             (string/replace \"/\" \"_\")\n                             (string/replace \"\\\\\" \"_\"))\n               new-path (str recycle-dir \"/\" file-name)\n               _ (protocol/write-file! this repo\n                                       \"/\"\n                                       new-path\n                                       content nil)]\n         (when handle\n           (.removeEntry ^js handle basename))\n         (remove-nfs-file-handle! handle-path))\n       (p/catch (fn [error]\n                  (log/error :unlink/path {:path path\n                                           :error error}))))))\n\n  (rmdir! [_this _dir]\n    ;; TOO dangerious, we should never implement this\n    nil)\n\n  (read-file [_this dir path _options]\n    (let [handle-path (str \"handle\" dir \"/\" path)]\n      (p/let [handle (idb/get-item handle-path)\n              local-file (and handle (.getFile handle))]\n        (and local-file (.text local-file)))))\n\n  (write-file! [_this repo dir path content opts]\n    (let [parts (string/split path \"/\")\n          basename (last parts)\n          sub-dir (->> (butlast parts)\n                       (remove string/blank?)\n                       (string/join \"/\"))\n          sub-dir-handle-path (str \"handle/\"\n                                   (subs dir 1)\n                                   (when sub-dir\n                                     (str \"/\" sub-dir)))\n          handle-path (if (= \"/\" (last sub-dir-handle-path))\n                        (subs sub-dir-handle-path 0 (dec (count sub-dir-handle-path)))\n                        sub-dir-handle-path)\n          handle-path (string/replace handle-path \"//\" \"/\")\n          basename-handle-path (str handle-path \"/\" basename)]\n      (p/let [file-handle (idb/get-item basename-handle-path)]\n        ;; check file-handle available, remove it when got 'NotFoundError'\n        (p/let [test-get-file (when file-handle\n                                (p/catch (p/let [_ (.getFile file-handle)] true)\n                                         (fn [e]\n                                           (js/console.dir e)\n                                           (when (= \"NotFoundError\" (.-name e))\n                                             (idb/remove-item! basename-handle-path)\n                                             (remove-nfs-file-handle! basename-handle-path))\n                                           false)))\n                file-handle (if test-get-file file-handle nil)]\n\n          (when file-handle\n            (add-nfs-file-handle! basename-handle-path file-handle))\n          (if file-handle\n            (-> (p/let [local-file (.getFile file-handle)\n                        local-content (.text local-file)\n                        pending-writes (state/get-write-chan-length)\n                        ext (string/lower-case (util/get-file-ext path))\n                        db-content (db/get-file repo path)\n                        contents-matched? (contents-matched? local-content (or db-content \"\"))]\n                  (when local-content\n                    (if (and\n                         (not (string/blank? db-content))\n                         (not (:skip-compare? opts))\n                         (not contents-matched?)\n                         (not (contains? #{\"excalidraw\" \"edn\" \"css\"} ext))\n                         (not (string/includes? path \"/.recycle/\"))\n                         (zero? pending-writes))\n                      (p/let [local-content (encrypt/decrypt local-content)]\n                        (state/pub-event! [:file/not-matched-from-disk path local-content content]))\n                      (p/let [_ (verify-permission repo file-handle true)\n                              _ (utils/writeFile file-handle content)\n                              file (.getFile file-handle)]\n                        (when file\n                          (p/let [content (if (encrypt/encrypted-db? (state/get-current-repo))\n                                            (encrypt/decrypt content)\n                                            content)]\n                            (db/set-file-content! repo path content))\n                          (nfs-saved-handler repo path file))))))\n                (p/catch (fn [e]\n                           (js/console.error e))))\n            ;; create file handle\n            (->\n             (p/let [handle (idb/get-item handle-path)]\n               (if handle\n                 (p/let [_ (verify-permission repo handle true)\n                         file-handle (.getFileHandle ^js handle basename #js {:create true})\n                         ;; File exists if the file-handle has some content in it.\n                         file (.getFile file-handle)\n                         text (.text file)]\n                   (if (string/blank? text)\n                     (p/let [_ (idb/set-item! basename-handle-path file-handle)\n                             _ (utils/writeFile file-handle content)\n                             file (.getFile file-handle)]\n                       (when file\n                         (nfs-saved-handler repo path file)))\n                     (notification/show! (str \"The file \" path \" already exists, please save your changes and click the refresh button to reload it.\")\n                                         :warning)))\n                 (println \"Error: directory handle not exists: \" handle-path)))\n             (p/catch (fn [error]\n                        (println \"Write local file failed: \" {:path path})\n                        (js/console.error error)))))))))\n\n  (rename! [this repo old-path new-path]\n    (p/let [parts (->> (string/split new-path \"/\")\n                       (remove string/blank?))\n            dir (str \"/\" (first parts))\n            new-path (->> (rest parts)\n                          (string/join \"/\"))\n            handle (idb/get-item (str \"handle\" old-path))\n            file (.getFile handle)\n            content (.text file)\n            _ (protocol/write-file! this repo dir new-path content nil)]\n      (protocol/unlink! this repo old-path nil)))\n  (stat [_this dir path]\n    (if-let [file (get-nfs-file-handle (str \"handle/\"\n                                            (string/replace-first dir \"/\" \"\")\n                                            path))]\n      (p/let [file (.getFile file)]\n        (let [get-attr #(gobj/get file %)]\n          {:file/last-modified-at (get-attr \"lastModified\")\n           :file/size (get-attr \"size\")\n           :file/type (get-attr \"type\")}))\n      (p/rejected \"File not exists\")))\n  (open-dir [_this ok-handler]\n    (utils/openDirectory #js {:recursive true}\n                         ok-handler))\n  (get-files [_this path-or-handle ok-handler]\n    (utils/getFiles path-or-handle true ok-handler))\n\n  ;; TODO:\n  (watch-dir! [_this _dir]\n    nil))\n"]}