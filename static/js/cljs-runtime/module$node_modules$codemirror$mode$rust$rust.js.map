{
"version":3,
"file":"module$node_modules$codemirror$mode$rust$rust.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/rust/rust.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$rust$rust\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineSimpleMode(\"rust\",{\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string-2\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string-2\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"variable-3\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  meta: {\n    dontIndentStates: [\"comment\"],\n    electricInput: /^\\s*\\}$/,\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\",\n    lineComment: \"//\",\n    fold: \"brace\"\n  }\n});\n\n\nCodeMirror.defineMIME(\"text/x-rustsrc\", \"rust\");\nCodeMirror.defineMIME(\"text/rust\", \"rust\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","indent","dedent","string","string_raw","string_raw_hash","comment","meta","dontIndentStates","electricInput","blockCommentStart","blockCommentEnd","lineComment","fold","defineMIME"]
}
