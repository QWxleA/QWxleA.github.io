{"version":3,"sources":["frontend/extensions/zotero/setting.cljs"],"mappings":";AAMA,sDAAA,wCAAA,kEAAA,4EAAA,uFAAA,2HAAA,qFAAA,qDAAA,6EAAA,iFAAA,2EAAA,yEAAA,0FAAA,GAAA,MAAA,GAAA,GAAA,KAAA,qDAAA,YAAA,IAAA,KAAA,KAAA,vjCAAKA;AAaL,uDAAA,vDAAMC;AAAN,AAEE,OAAA,4GAAqB,AAACC,4CAAI,AAACC,4BAAkB,AAACC;;AAEhD,kDAAA,lDAAMC;AAAN,AACE,IAAMC,WAAS,cAAA,eAAI,AAACL,fAAmBM,dAAKC;eAA5C,iFAAA,5FACMC;AADN,AAEE,GAAI,AAACC,uBAAOJ;AAAUG;;AAAQH;;;AAElC,6CAAA,7CAAMK;AAAN,AACE,IAAMC,UAAQ,qBAAA,rBAACC;AAAf,AACE,oBAAI,iBAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AAAa,OAACC,0BAAU,AAACV,kDAAcO;;AAAvCE;;;AACFF;;AACA,OAACI,gBAAM,AAACX;;;AAEd,6CAAA,7CAAMY;AAAN,AACE,OAACf,4CAAI,qBAAA,rBAACW,kGAAgC,AAACF;;AAEzC,iDAAA,jDAAMO,0GAAaC;AAAnB,AACE,IAAMP,UAAQ,AAACD;IACTS,cAAY,qBAAA,rBAACP;AADnB,AAEE,4BAAA,rBAACQ,iGAA+B,AAACC,8CAAMF,YAAYR,QAAQO;;AAE/D,iDAAA,jDAAMI,0GAAaX;AAAnB,AACE,IAAMY,WAAS,6GAAA,7GAACF,8CAAM,AAACrB,uDAAmBW;AAA1C,AACE,gDAAA,zCAACa,uHAA+CD;;AAEpD,iDAAA,jDAAME,0GAAad;AAAnB,AACE,qBAAA,rBAACS,2GAAoCT;;AACrC,GAAU,AAACG,0BAAU,AAACV,kDAAcO;AAApC;;AAAA,AACE,OAACW,+CAAYI;;;AAEjB,oDAAA,pDAAMC,gHAAgBhB;AAAtB,AACE,IAAMY,WAAS,AAACK,+CAAO,AAAC5B,uDAAmBW;AAA3C,AACE,gDAAA,zCAACa,uHAA+CD;;AAEpD,uDAAA,vDAAMM,sHAAcC,EAAEC;AAAtB,AACE,IAAMpB,UAAQ,AAACD;IACTsB,eAAa,8GAAA,WAAAC,zHAACC,+CAAO,AAAClC,uDACDW;AADR,AAES,qDAAAsB,9CAACZ,+DAAQS,EAAEC;;AAHvC,AAIE,gDAAA,zCAACP,uHAA+CQ;;AAEpD,6CAAA,7CAAMG,kGAASL;AAAf,AACE,IAAMnB,UAAQ,AAACD;AAAf,+FACM,AAACV,5CACD,AAACC,mGAAIU,tJACL,OAACV,wJAAI6B,EAAE,AAAC7B,4CAAIF,oDAAiB+B;;AAErC,kDAAA,lDAAMM;AAAN,AACE,SACC,GAAK,AAACC,4BAAW,AAACrB,qDAClB,GAAK,AAACqB,4BAAW,2CAAA,3CAACF","names":["frontend.extensions.zotero.setting/default-settings","frontend.extensions.zotero.setting/sub-zotero-config","cljs.core.get","frontend.state/sub-config","frontend.state/get-current-repo","frontend.extensions.zotero.setting/all-profiles","profiles","cljs.core/keys","cljs.core/set","default","cljs.core/empty?","frontend.extensions.zotero.setting/profile","profile","frontend.storage/get","and__4251__auto__","cljs.core/contains?","cljs.core/first","frontend.extensions.zotero.setting/api-key","frontend.extensions.zotero.setting/set-api-key","key","api-key-map","frontend.storage/set","cljs.core.assoc","frontend.extensions.zotero.setting/add-profile","settings","frontend.handler.config/set-config!","frontend.extensions.zotero.setting/set-profile","cljs.core/name","frontend.extensions.zotero.setting/remove-profile","cljs.core.dissoc","frontend.extensions.zotero.setting/set-setting!","k","v","new-settings","p1__66478#","cljs.core.update","frontend.extensions.zotero.setting/setting","frontend.extensions.zotero.setting/valid?","clojure.string/blank?"],"sourcesContent":["(ns frontend.extensions.zotero.setting\n  (:require [clojure.string :as str]\n            [frontend.handler.config :as config-handler]\n            [frontend.state :as state]\n            [frontend.storage :as storage]))\n\n(def default-settings\n  {:type                                    :user\n   :prefer-citekey?                         true\n   :include-attachments?                    true\n   :attachments-block-text                  \"[[Attachments]]\"\n   :include-notes?                          true\n   :overwrite-mode?                         false\n   :notes-block-text                        \"[[Notes]]\"\n   :zotero-data-directory                   \"\"\n   :zotero-linked-attachment-base-directory \"\"\n   :extra-tags                              \"\"\n   :page-insert-prefix                      \"@\"})\n\n(defn sub-zotero-config\n  []\n  (:zotero/settings-v2 (get (state/sub-config) (state/get-current-repo))))\n\n(defn all-profiles []\n  (let [profiles (-> (sub-zotero-config) keys set)\n        default #{\"default\"}]\n    (if (empty? profiles) default profiles)))\n\n(defn profile []\n  (let [profile (storage/get :zotero/setting-profile)]\n    (if (and profile (contains? (all-profiles) profile))\n      profile\n      (first (all-profiles)))))\n\n(defn api-key []\n  (get (storage/get :zotero/api-key-v2) (profile)))\n\n(defn set-api-key [key]\n  (let [profile (profile)\n        api-key-map (storage/get :zotero/api-key-v2)]\n    (storage/set :zotero/api-key-v2 (assoc api-key-map profile key))))\n\n(defn add-profile [profile]\n  (let [settings (assoc (sub-zotero-config) profile {})]\n    (config-handler/set-config! :zotero/settings-v2 settings)))\n\n(defn set-profile [profile]\n  (storage/set :zotero/setting-profile profile)\n  (when-not (contains? (all-profiles) profile)\n    (add-profile name)))\n\n(defn remove-profile [profile]\n  (let [settings (dissoc (sub-zotero-config) profile)]\n    (config-handler/set-config! :zotero/settings-v2 settings)))\n\n(defn set-setting! [k v]\n  (let [profile (profile)\n        new-settings (update (sub-zotero-config)\n                             profile\n                             #(assoc % k v))]\n    (config-handler/set-config! :zotero/settings-v2 new-settings)))\n\n(defn setting [k]\n  (let [profile (profile)]\n    (-> (sub-zotero-config)\n        (get profile)\n        (get k (get default-settings k)))))\n\n(defn valid? []\n  (and\n   (not (str/blank? (api-key)))\n   (not (str/blank? (setting :type-id)))))\n"]}