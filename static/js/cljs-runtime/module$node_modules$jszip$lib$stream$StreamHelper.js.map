{
"version":3,
"file":"module$node_modules$jszip$lib$stream$StreamHelper.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/jszip/lib/stream/StreamHelper.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$stream$StreamHelper\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\nvar utils = require('../utils');\nvar ConvertWorker = require('./ConvertWorker');\nvar GenericWorker = require('./GenericWorker');\nvar base64 = require('../base64');\nvar support = require(\"../support\");\nvar external = require(\"../external\");\n\nvar NodejsStreamOutputAdapter = null;\nif (support.nodestream) {\n    try {\n        NodejsStreamOutputAdapter = require('../nodejs/NodejsStreamOutputAdapter');\n    } catch(e) {}\n}\n\n/**\n * Apply the final transformation of the data. If the user wants a Blob for\n * example, it's easier to work with an U8intArray and finally do the\n * ArrayBuffer/Blob conversion.\n * @param {String} type the name of the final type\n * @param {String|Uint8Array|Buffer} content the content to transform\n * @param {String} mimeType the mime type of the content, if applicable.\n * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.\n */\nfunction transformZipOutput(type, content, mimeType) {\n    switch(type) {\n        case \"blob\" :\n            return utils.newBlob(utils.transformTo(\"arraybuffer\", content), mimeType);\n        case \"base64\" :\n            return base64.encode(content);\n        default :\n            return utils.transformTo(type, content);\n    }\n}\n\n/**\n * Concatenate an array of data of the given type.\n * @param {String} type the type of the data in the given array.\n * @param {Array} dataArray the array containing the data chunks to concatenate\n * @return {String|Uint8Array|Buffer} the concatenated data\n * @throws Error if the asked type is unsupported\n */\nfunction concat (type, dataArray) {\n    var i, index = 0, res = null, totalLength = 0;\n    for(i = 0; i < dataArray.length; i++) {\n        totalLength += dataArray[i].length;\n    }\n    switch(type) {\n        case \"string\":\n            return dataArray.join(\"\");\n          case \"array\":\n            return Array.prototype.concat.apply([], dataArray);\n        case \"uint8array\":\n            res = new Uint8Array(totalLength);\n            for(i = 0; i < dataArray.length; i++) {\n                res.set(dataArray[i], index);\n                index += dataArray[i].length;\n            }\n            return res;\n        case \"nodebuffer\":\n            return Buffer.concat(dataArray);\n        default:\n            throw new Error(\"concat : unsupported type '\"  + type + \"'\");\n    }\n}\n\n/**\n * Listen a StreamHelper, accumulate its content and concatenate it into a\n * complete block.\n * @param {StreamHelper} helper the helper to use.\n * @param {Function} updateCallback a callback called on each update. Called\n * with one arg :\n * - the metadata linked to the update received.\n * @return Promise the promise for the accumulation.\n */\nfunction accumulate(helper, updateCallback) {\n    return new external.Promise(function (resolve, reject){\n        var dataArray = [];\n        var chunkType = helper._internalType,\n            resultType = helper._outputType,\n            mimeType = helper._mimeType;\n        helper\n        .on('data', function (data, meta) {\n            dataArray.push(data);\n            if(updateCallback) {\n                updateCallback(meta);\n            }\n        })\n        .on('error', function(err) {\n            dataArray = [];\n            reject(err);\n        })\n        .on('end', function (){\n            try {\n                var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);\n                resolve(result);\n            } catch (e) {\n                reject(e);\n            }\n            dataArray = [];\n        })\n        .resume();\n    });\n}\n\n/**\n * An helper to easily use workers outside of JSZip.\n * @constructor\n * @param {Worker} worker the worker to wrap\n * @param {String} outputType the type of data expected by the use\n * @param {String} mimeType the mime type of the content, if applicable.\n */\nfunction StreamHelper(worker, outputType, mimeType) {\n    var internalType = outputType;\n    switch(outputType) {\n        case \"blob\":\n        case \"arraybuffer\":\n            internalType = \"uint8array\";\n        break;\n        case \"base64\":\n            internalType = \"string\";\n        break;\n    }\n\n    try {\n        // the type used internally\n        this._internalType = internalType;\n        // the type used to output results\n        this._outputType = outputType;\n        // the mime type\n        this._mimeType = mimeType;\n        utils.checkSupport(internalType);\n        this._worker = worker.pipe(new ConvertWorker(internalType));\n        // the last workers can be rewired without issues but we need to\n        // prevent any updates on previous workers.\n        worker.lock();\n    } catch(e) {\n        this._worker = new GenericWorker(\"error\");\n        this._worker.error(e);\n    }\n}\n\nStreamHelper.prototype = {\n    /**\n     * Listen a StreamHelper, accumulate its content and concatenate it into a\n     * complete block.\n     * @param {Function} updateCb the update callback.\n     * @return Promise the promise for the accumulation.\n     */\n    accumulate : function (updateCb) {\n        return accumulate(this, updateCb);\n    },\n    /**\n     * Add a listener on an event triggered on a stream.\n     * @param {String} evt the name of the event\n     * @param {Function} fn the listener\n     * @return {StreamHelper} the current helper.\n     */\n    on : function (evt, fn) {\n        var self = this;\n\n        if(evt === \"data\") {\n            this._worker.on(evt, function (chunk) {\n                fn.call(self, chunk.data, chunk.meta);\n            });\n        } else {\n            this._worker.on(evt, function () {\n                utils.delay(fn, arguments, self);\n            });\n        }\n        return this;\n    },\n    /**\n     * Resume the flow of chunks.\n     * @return {StreamHelper} the current helper.\n     */\n    resume : function () {\n        utils.delay(this._worker.resume, [], this._worker);\n        return this;\n    },\n    /**\n     * Pause the flow of chunks.\n     * @return {StreamHelper} the current helper.\n     */\n    pause : function () {\n        this._worker.pause();\n        return this;\n    },\n    /**\n     * Return a nodejs stream for this helper.\n     * @param {Function} updateCb the update callback.\n     * @return {NodejsStreamOutputAdapter} the nodejs stream.\n     */\n    toNodejsStream : function (updateCb) {\n        utils.checkSupport(\"nodestream\");\n        if (this._outputType !== \"nodebuffer\") {\n            // an object stream containing blob/arraybuffer/uint8array/string\n            // is strange and I don't know if it would be useful.\n            // I you find this comment and have a good usecase, please open a\n            // bug report !\n            throw new Error(this._outputType + \" is not supported by this method\");\n        }\n\n        return new NodejsStreamOutputAdapter(this, {\n            objectMode : this._outputType !== \"nodebuffer\"\n        }, updateCb);\n    }\n};\n\n\nmodule.exports = StreamHelper;\n\n};"],
"names":["shadow$provide","global","require","module","exports","concat","type","dataArray","i","index","totalLength","length","join","Array","prototype","apply","res","Uint8Array","set","Buffer","Error","accumulate","helper","updateCallback","external","Promise","resolve","reject","chunkType","_internalType","resultType","_outputType","mimeType","_mimeType","on","data","meta","push","err","utils","newBlob","transformTo","content","base64","encode","result","e","resume","StreamHelper","worker","outputType","internalType","checkSupport","_worker","pipe","ConvertWorker","lock","GenericWorker","error","support","NodejsStreamOutputAdapter","nodestream","updateCb","evt","fn","self","chunk","call","delay","arguments","pause","toNodejsStream","objectMode"]
}
