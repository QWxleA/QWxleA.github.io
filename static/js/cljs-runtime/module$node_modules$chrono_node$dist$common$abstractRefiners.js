shadow$provide.module$node_modules$chrono_node$dist$common$abstractRefiners=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.MergingRefiner=exports.Filter=void 0;class Filter{refine(context,results){return results.filter(r=>this.isValid(context,r))}}exports.Filter=Filter;class MergingRefiner{refine(context,results){if(2>results.length)return results;const mergedResults=[];let curResult=results[0],nextResult=null;for(let i=1;i<results.length;i++){nextResult=
results[i];const textBetween=context.text.substring(curResult.index+curResult.text.length,nextResult.index);if(this.shouldMergeResults(textBetween,curResult,nextResult,context)){const left=curResult,right=nextResult,mergedResult=this.mergeResults(textBetween,left,right,context);context.debug(()=>{console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`)});curResult=mergedResult}else mergedResults.push(curResult),curResult=nextResult}null!=curResult&&mergedResults.push(curResult);
return mergedResults}}exports.MergingRefiner=MergingRefiner}
//# sourceMappingURL=module$node_modules$chrono_node$dist$common$abstractRefiners.js.map
