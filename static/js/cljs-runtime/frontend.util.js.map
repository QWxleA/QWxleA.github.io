{"version":3,"sources":["frontend/util.cljc"],"mappings":"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","names":["js/goog.define","frontend.util/NODETEST","js/frontend","js/frontend.util","js/frontend.util.node-test?","frontend.util/node-test?","cljs.core/PROTOCOL_SENTINEL","js/Symbol","sym","writer","_","cljs.core/-write","js/frontend.util.node-path","frontend.util/node-path","js/module$frontend$utils.nodePath","frontend.util/app-scroll-container-node","goog.dom/getElement","frontend.util/safe-re-find","pattern","s","js/console.trace","cljs.core/re-find","frontend.util/uuid-pattern","js/frontend.util.exactly-uuid-pattern","frontend.util/exactly-uuid-pattern","cljs.core/re-pattern","frontend.util/uuid-string?","frontend.util/ios?","js/module$frontend$utils.ios","frontend.util/safari?","ua","clojure.string/lower-case","js/navigator.userAgent","clojure.string/includes?","frontend.util/mobile?","frontend.util/electron?","and__4251__auto__","js/window","frontend.util.goog$module$goog$object.get","frontend.util/mocked-open-dir-path","frontend.util/nfs?","cljs.core/not","frontend.mobile.util/is-native-platform?","frontend.util/file-protocol?","clojure.string/starts-with?","js/window.location.href","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.util/format","seq44733","G__44740","cljs.core/first","cljs.core/next","self__4851__auto__","fmt","args","cljs.core.apply","goog.string/format","frontend.util/evalue","event","frontend.util.goog$module$goog$object.getValueByKeys","frontend.util/ekey","frontend.util/echecked?","frontend.util/set-change-value","node","value","js/module$frontend$utils.triggerInputChange","G__44753","frontend.util/p-handle","js/Error","p","ok-handler","frontend.util.p_handle","error","js/console.error","error-handler","promesa.core.then","result","promesa.core.catch$","frontend.util/get-width","frontend.util/set-theme-light","promesa.core.bind","___42616__auto__","promesa.protocols/-promise","js/module$node_modules$$capacitor$status_bar$dist$plugin_cjs.StatusBar","cljs.core/clj->js","js/module$node_modules$$capacitor$status_bar$dist$plugin_cjs.Style","frontend.util/set-theme-dark","frontend.util/find-first","pred","coll","cljs.core.filter","frontend.util/remove-nils-non-nested","nm","cljs.core.into","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/second","frontend.util/ext-of-image?","p1__44764#","cljs.core/some","clojure.string/ends-with?","frontend.util/hiccup->class","class","G__44769","clojure.string.split","clojure.string.join","clojure.string/trim","G__44789","frontend.util/fetch","url","on-ok","on-failed","frontend.util.fetch","opts","js/fetch","cljs-bean.core/->js","resp","cljs-bean.core/->clj","p1__44781#","frontend.util/upload","file","on-progress","xhr","js/XMLHttpRequest","frontend.util.goog$module$goog$object.set","frontend.util/post","body","js/JSON.stringify","frontend.util/zero-pad","n","frontend.util/parse-int","x","js/parseInt","frontend.util/safe-parse-int","js/isNaN","frontend.util/parse-float","js/parseFloat","frontend.util/safe-parse-float","G__44807","frontend.util/debounce","threshold","f","frontend.util.debounce","cljs.core/constantly","prep-fn","t","cljs.core.atom","cljs.core/deref","js/clearTimeout","cljs.core/reset!","js/setTimeout","frontend.util/nth-safe","c","i","cljs.core/count","cljs.core.nth","js/NodeList","array","cljs.core.array_seq","frontend.util/caret-range","temp__5720__auto__","doc","or__4253__auto__","win","selection","range-count","range","pre-caret-range","contents","html","G__44808","br-ended?","cljs.core.not_EQ_","text-range","pre-caret-text-range","frontend.util/get-selection-start","input","frontend.util/get-selection-end","frontend.util/get-selection-direction","frontend.util/get-first-or-last-line-pos","pos","last-newline-pos","clojure.string.last_index_of","frontend.util/stop","e","G__44818","frontend.util/stop-propagation","frontend.util/cur-doc-top","js/document","frontend.util/element-top","elem","top","client-top","offset-top","G__44820","G__44821","frontend.util/scroll-to-element","elem-id","G__44832","frontend.util/scroll-to","frontend.util.scroll_to","animate?","G__44837","frontend.util/scroll-top","frontend.util.scroll_top","G__44843","frontend.util/scroll-to-top","frontend.util/link?","cljs.core/contains?","frontend.util/time?","frontend.util/audio?","frontend.util/video?","frontend.util/sup?","frontend.util/input?","frontend.util/select?","cljs.core._EQ_","frontend.util/details-or-summary?","frontend.util/starts-with?","substr","frontend.util/distinct-by","col","cljs.core.reduce","acc","p1__44874#","cljs.core/vec","cljs.core.conj","frontend.util/distinct-by-last-wins","p1__44880#","cljs.core.mapv","v","frontend.util/get-git-owner-and-repo","repo-url","cljs.core/take-last","frontend.util/safe-lower-case","frontend.util/trim-safe","frontend.util/trimr-without-newlines","frontend.util/triml-without-newlines","frontend.util/concat-without-spaces","left","right","not-space?","clojure.string/blank?","cljs.core/last","frontend.util/replace-first","new-value","temp__5718__auto__","first-index","clojure.string.index_of","cljs.core.subs","G__44909","frontend.util/replace-last","frontend.util.replace_last","space?","last-index","prefix","js/frontend.util.default-escape-chars","frontend.util/default-escape-chars","frontend.util/replace-ignore-case","p__44931","vec__44932","seq44922","G__44925","G__44926","G__44927","old-value","escape-chars","escape-char","clojure.string/replace","frontend.util/re-pos","re","js/RegExp","res","m","G__44976","frontend.util/safe-set-range-text!","text","start","end","e44989","_e","select-mode","e44990","frontend.util/safe-dec-current-pos-from-end","current-pos","len","x__4336__auto__","y__4337__auto__","e44997","splitter","js/module$node_modules$grapheme_splitter$index","frontend.util/safe-inc-current-pos-from-start","e45004","frontend.util/kill-line-before!","val","n-pos","frontend.util.safe_set_range_text_BANG_","frontend.util/kill-line-after!","frontend.util/insert-at-current-position!","frontend.util/deref-or-value","val-or-atom","cljs.core/native-satisfies?","cljs.core/IDeref","frontend.util/now->utc","local-date-time","js/goog.date.DateTime","js/goog.date.UtcDateTime","frontend.util/safe-subvec","xs","cljs.core.subvec","frontend.util/get-nodes-between-two-nodes","id1","id2","nodes","js/document.getElementsByClassName","node-1","node-2","idx-1","idx-2","x__4339__auto__","y__4340__auto__","frontend.util/get-direction-between-two-nodes","frontend.util/rec-get-blocks-container","dommy.core/has-class?","G__45023","frontend.util/rec-get-blocks-content-section","G__45026","frontend.util/get-blocks-noncollapse","dommy.utils/->Array","b","frontend.util/remove-embeded-blocks","blocks","dommy.core/attr","frontend.util/get-selected-text","js/module$frontend$utils.getSelectionText","frontend.util/clear-selection!","js/module$frontend$selection.clearSelection","G__45037","frontend.util/copy-to-clipboard!","js/module$frontend$utils.writeClipboard","html?","frontend.util/drop-nth","p1__45039#","p2__45040#","cljs.core.keep_indexed","frontend.util/react","ref","rum.core/*reactions*","rum.core/react","frontend.util/time-ms","cljs-time.coerce/to-long","cljs-time.core/now","frontend.util/today-at-local-ms","hours","mins","secs","millisecs","js/Date","frontend.util/d","k","cljs.core.println","start__4754__auto__","cljs.core/system-time","ret__4755__auto__","cljs.core.prn","cljs.core.doall","frontend.util/concat-without-nil","seq45050","self__4852__auto__","cljs.core/seq","cols","cljs.core/concat","frontend.util/set-title!","title","frontend.util/get-block-container","block-element","section","G__45062","dommy.core/parent","frontend.util/get-prev-block-non-collapsed","block","index","idx","frontend.util/get-prev-block-non-collapsed-non-embed","frontend.util/get-next-block-non-collapsed","frontend.util/get-next-block-non-collapsed-skip","nested?","goog.dom/getElementsByClass","dom","frontend.util/rand-str","js/Math.random","frontend.util/unique-id","frontend.util/pp-str","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__45091","cljs.core/*print-newline*","*print-fn*-orig-val__45092","cljs.core/*print-fn*","*print-newline*-temp-val__45093","*print-fn*-temp-val__45094","x__4796__auto__","cljs.pprint.pprint","frontend.util/hiccup-keywordize","hiccup","clojure.walk/postwalk","cljs.core/vector?","cljs.core.update","cljs.core/keyword","frontend.util/chrome?","user-agent","vendor","js/navigator.vendor","frontend.util/indexeddb-check?","test-db","db","js/window.indexedDB","js/window.indexedDB.open","js/window.indexedDB.deleteDatabase","js/frontend.util.mac?","frontend.util/mac?","goog.userAgent/MAC","js/frontend.util.win32?","frontend.util/win32?","goog.userAgent/WINDOWS","frontend.util/absolute-path?","path","e45134","js/window.apis.isAbsolutePath","js/module$frontend$utils.win32","frontend.util/default-content-with-title","text-format","G__45138","cljs.core/name","frontend.util/get-first-block-by-id","block-id","frontend.util/url-encode","string","G__45151","js/encodeURIComponent","frontend.util/url-decode","G__45167","js/decodeURIComponent","frontend.util/windows-reserved-chars","frontend.util/include-windows-reserved-chars?","frontend.util/create-title-property?","frontend.util/search-normalize","js/module$node_modules$remove_accents$index","frontend.util/file-name-sanity","page-name","G__45207","logseq.graph_parser.util.page_name_sanity","frontend.util/page-name-sanity-lc","logseq.graph-parser.util/page-name-sanity-lc","frontend.util/safe-page-name-sanity-lc","frontend.util/get-page-original-name","page","frontend.util/add-style!","style","parent-node","js/document.head","id","old-link-element","dommy.core/selector","dommy.core.remove_BANG_","link","dommy.core.create_element","dommy.core.set_attr_BANG_","dommy.core.append_BANG_","frontend.util/->platform-shortcut","keyboard-shortcut","frontend.util/remove-common-preceding","col1","col2","cljs.core/rest","frontend.util/get-file-ext","G__45255","frontend.util/get-dir-and-basename","parts","basename","dir","cljs.core/butlast","frontend.util/get-relative-path","current-file-path","another-file-path","p1__45258#","vec__45259","directories-f","parts-1","parts-2","another-file-name","cljs.core.concat","cljs.core.repeat","frontend.util/escape-html","frontend.util/unescape-html","frontend.util/system-locales","navigator","cljs.core.js__GT_clj","frontend.util/zh-CN-supported?","system-locales","cljs.core/set","frontend.util/select-highlight!","seq__45268","chunk__45269","count__45270","i__45271","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","dommy.core.add_class_BANG_","frontend.util/select-unhighlight!","seq__45283","chunk__45284","count__45285","i__45286","dommy.core.remove_class_BANG_","frontend.util/keyname","key","cljs.core/namespace","frontend.util/batch","in","max-time","handler","buf-atom","c__41861__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41862__auto__","switch__41838__auto__","state_45362","state_val_45365","inst_45335","statearr-45369","statearr-45370","inst_45306","inst_45309","inst_45311","inst_45312","statearr-45372","statearr-45373","inst_45328","inst_45324","inst_45325","inst_45326","statearr-45374","statearr-45375","statearr-45376","inst_45354","statearr-45377","inst_45333","statearr-45378","inst_45358","cljs.core.async.impl.ioc-helpers/return-chan","statearr-45383","inst_45320","cljs.core/PersistentVector","inst_45321","inst_45322","cljs.core.async/ioc-alts!","inst_45349","tmp45380","tmp45381","statearr-45385","statearr-45387","statearr-45389","statearr-45392","inst_45356","statearr-45393","inst_45337","inst_45338","inst_45339","inst_45341","inst_45342","tmp45391","statearr-45397","statearr-45398","statearr-45401","state-machine__41839__auto__","ret-value__41840__auto__","result__41841__auto__","cljs.core/keyword-identical?","ex__41842__auto__","e45402","statearr-45403","statearr-45404","state__41863__auto__","statearr-45406","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","cljs.core.swap_BANG_","cljs.core/conj","frontend.util/trace!","frontend.util/remove-first","cljs.core/LazySeq","vec__45407","seq__45408","first__45409","cljs.core/cons","inner","frontend.util/pprint","cljs.pprint/pprint","frontend.util/backward-kill-word","current","prev","cljs.core/max","G__45417","fexpr__45416","frontend.util/forward-kill-word","G__45423","fexpr__45422","cljs.core/min","frontend.util/fix-open-external-with-shift!","frontend.util/classnames","p1__45429#","cljs.core.mapcat","cljs.core/map?","iter__4652__auto__","s__45445","c__4650__auto__","size__4651__auto__","b__45447","cljs.core/chunk-buffer","i__45446","vec__45459","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45444","vec__45465","frontend.util/get-dom-top","frontend.util/sort-by-height","elements","cljs.core.sort","y","frontend.util/calc-delta-rect-offset","target","container","target-rect","viewport-rect","frontend.util/regex-char-esc-smap","esc-chars","cljs.core/zipmap","p1__45483#","cljs.core.map","frontend.util/regex-escape","cljs.core.replace","frontend.util/meta-key-name","frontend.util/right-click?","which","button","frontend.util/make-el-into-center-viewport","el","frontend.util/make-el-cursor-position-into-center-viewport","main-node","cursor-top","G__45488","goog.dom/getChildren","box-caret","box-top","box-bottom","vw-height","js/window.visualViewport","js/document.documentElement","scroll-top","cursor-y","scroll","G__45497","frontend.util/make-el-center-if-near-top","frontend.util.make_el_center_if_near_top","offset","target-top","frontend.util/sm-breakpoint?","G__45500","frontend.util/event-is-composing?","frontend.util.event_is_composing_QMARK_","include-process?","event-composing?","frontend.util/onchange-event-is-composing?","frontend.util/open-url","route?","js/location.href","js/location.hash","js/window.apis.openExternal","js/window.location","frontend.util/collapsed?","frontend.util/atom?","cljs.core/Atom","frontend.util/time-ago","time","units","js/Number.MAX_SAFE_INTEGER","diff","cljs-time.core/in-seconds","cljs-time.core/interval","unit","p1__45509#","cljs.core.drop_while","Math/floor","p1__45510#"],"sourcesContent":["(ns frontend.util\n  #?(:clj (:refer-clojure :exclude [format]))\n  #?(:cljs (:require-macros [frontend.util]))\n  #?(:cljs (:require\n            [\"/frontend/selection\" :as selection]\n            [\"/frontend/utils\" :as utils]\n            [\"@capacitor/status-bar\" :refer [^js StatusBar Style]]\n            [\"grapheme-splitter\" :as GraphemeSplitter]\n            [\"remove-accents\" :as removeAccents]\n            [cljs-bean.core :as bean]\n            [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [dommy.core :as d]\n            [frontend.mobile.util :refer [is-native-platform?]]\n            [logseq.graph-parser.util :as gp-util]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [goog.string :as gstring]\n            [goog.userAgent]\n            [promesa.core :as p]\n            [rum.core :as rum]))\n  (:require\n   [clojure.core.async :as async]\n   [clojure.pprint]\n   [clojure.string :as string]\n   [clojure.walk :as walk]))\n\n#?(:cljs (goog-define NODETEST false)\n   :clj (def NODETEST false))\n(defonce node-test? NODETEST)\n\n#?(:cljs\n   (extend-protocol IPrintWithWriter\n     js/Symbol\n     (-pr-writer [sym writer _]\n       (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))\n\n#?(:cljs (defonce ^js node-path utils/nodePath))\n#?(:cljs (defn app-scroll-container-node []\n           (gdom/getElement \"main-content-container\")))\n\n#?(:cljs\n   (defn safe-re-find\n     [pattern s]\n     (when-not (string? s)\n       ;; TODO: sentry\n       (js/console.trace))\n     (when (string? s)\n       (re-find pattern s))))\n\n#?(:cljs\n  (do\n    (def uuid-pattern \"[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}\")\n    (defonce exactly-uuid-pattern (re-pattern (str \"(?i)^\" uuid-pattern \"$\")))\n    (defn uuid-string?\n      [s]\n      (safe-re-find exactly-uuid-pattern s))))\n\n#?(:cljs\n   (defn ios?\n     []\n     (utils/ios)))\n\n#?(:cljs\n   (defn safari?\n     []\n     (let [ua (string/lower-case js/navigator.userAgent)]\n       (and (string/includes? ua \"webkit\")\n            (not (string/includes? ua \"chrome\"))))))\n\n#?(:cljs\n   (defn mobile?\n     []\n     (when-not node-test?\n       (safe-re-find #\"Mobi\" js/navigator.userAgent))))\n\n#?(:cljs\n   (defn electron?\n     []\n     (when (and js/window (gobj/get js/window \"navigator\"))\n       (let [ua (string/lower-case js/navigator.userAgent)]\n         (string/includes? ua \" electron\")))))\n\n#?(:cljs\n   (defn mocked-open-dir-path\n     \"Mocked open DIR path for by-passing open dir in electron during testing. Nil if not given\"\n     []\n     (when (electron?) (. js/window -__MOCKED_OPEN_DIR_PATH__))))\n\n#?(:cljs\n   (def nfs? (and (not (electron?))\n                  (not (is-native-platform?)))))\n\n#?(:cljs\n   (defn file-protocol?\n     []\n     (string/starts-with? js/window.location.href \"file://\")))\n\n(defn format\n  [fmt & args]\n  #?(:cljs (apply gstring/format fmt args)\n     :clj (apply clojure.core/format fmt args)))\n\n#?(:cljs\n   (defn evalue\n     [event]\n     (gobj/getValueByKeys event \"target\" \"value\")))\n\n#?(:cljs\n   (defn ekey [event]\n     (gobj/getValueByKeys event \"key\")))\n\n#?(:cljs\n   (defn echecked? [event]\n     (gobj/getValueByKeys event \"target\" \"checked\")))\n\n#?(:cljs\n   (defn set-change-value\n     \"compatible change event for React\"\n     [node value]\n     (utils/triggerInputChange node value)))\n\n#?(:cljs\n   (defn p-handle\n     ([p ok-handler]\n      (p-handle p ok-handler (fn [error]\n                               (js/console.error error))))\n     ([p ok-handler error-handler]\n      (-> p\n          (p/then (fn [result]\n                    (ok-handler result)))\n          (p/catch (fn [error]\n                     (error-handler error)))))))\n\n#?(:cljs\n   (defn get-width\n     []\n     (gobj/get js/window \"innerWidth\")))\n\n#?(:cljs\n   (defn set-theme-light\n     []\n     (p/do!\n      (.setStyle StatusBar (clj->js {:style (.-Light Style)})))))\n\n#?(:cljs\n   (defn set-theme-dark\n     []\n     (p/do!\n      (.setStyle StatusBar (clj->js {:style (.-Dark Style)})))))\n\n(defn find-first\n  [pred coll]\n  (first (filter pred coll)))\n\n;; (defn format\n;;   [fmt & args]\n;;   (apply gstring/format fmt args))\n\n(defn remove-nils-non-nested\n  [nm]\n  (into {} (remove (comp nil? second)) nm))\n\n(defn ext-of-image? [s]\n  (some #(-> (string/lower-case s)\n             (string/ends-with? %))\n        [\".png\" \".jpg\" \".jpeg\" \".bmp\" \".gif\" \".webp\" \".svg\"]))\n\n;; \".lg:absolute.lg:inset-y-0.lg:right-0.lg:w-1/2\"\n(defn hiccup->class\n  [class]\n  (some->> (string/split class #\"\\.\")\n           (string/join \" \")\n           (string/trim)))\n\n#?(:cljs\n   (defn fetch\n     ([url on-ok on-failed]\n      (fetch url {} on-ok on-failed))\n     ([url opts on-ok on-failed]\n      (-> (js/fetch url (bean/->js opts))\n          (.then (fn [resp]\n                   (if (>= (.-status resp) 400)\n                     (on-failed resp)\n                     (if (.-ok resp)\n                       (-> (.json resp)\n                           (.then bean/->clj)\n                           (.then #(on-ok %)))\n                       (on-failed resp)))))))))\n\n#?(:cljs\n   (defn upload\n     [url file on-ok on-failed on-progress]\n     (let [xhr (js/XMLHttpRequest.)]\n       (.open xhr \"put\" url)\n       (gobj/set xhr \"onload\" on-ok)\n       (gobj/set xhr \"onerror\" on-failed)\n       (when (and (gobj/get xhr \"upload\")\n                  on-progress)\n         (gobj/set (gobj/get xhr \"upload\")\n                   \"onprogress\"\n                   on-progress))\n       (.send xhr file))))\n\n#?(:cljs\n   (defn post\n     [url body on-ok on-failed]\n     (fetch url {:method \"post\"\n                 :headers {:Content-Type \"application/json\"}\n                 :body (js/JSON.stringify (clj->js body))}\n            on-ok\n            on-failed)))\n\n(defn zero-pad\n  [n]\n  (if (< n 10)\n    (str \"0\" n)\n    (str n)))\n\n(defn parse-int\n  [x]\n  #?(:cljs (if (string? x)\n             (js/parseInt x)\n             x)\n     :clj (if (string? x)\n            (Integer/parseInt x)\n            x)))\n\n(defn safe-parse-int\n  [x]\n  #?(:cljs (let [result (parse-int x)]\n             (if (js/isNaN result)\n               nil\n               result))\n     :clj ((try\n             (parse-int x)\n             (catch Exception _\n               nil)))))\n#?(:cljs\n   (defn parse-float\n     [x]\n     (if (string? x)\n       (js/parseFloat x)\n       x)))\n\n#?(:cljs\n   (defn safe-parse-float\n     [x]\n     (let [result (parse-float x)]\n       (if (js/isNaN result)\n         nil\n         result))))\n\n#?(:cljs\n   (defn debounce\n     \"Returns a function that will call f only after threshold has passed without new calls\n      to the function. Calls prep-fn on the args in a sync way, which can be used for things like\n      calling .persist on the event object to be able to access the event attributes in f\"\n     ([threshold f] (debounce threshold f (constantly nil)))\n     ([threshold f prep-fn]\n      (let [t (atom nil)]\n        (fn [& args]\n          (when @t (js/clearTimeout @t))\n          (apply prep-fn args)\n          (reset! t (js/setTimeout #(do\n                                      (reset! t nil)\n                                      (apply f args))\n                                   threshold)))))))\n\n(defn nth-safe [c i]\n  (if (or (< i 0) (>= i (count c)))\n    nil\n    (nth c i)))\n\n#?(:cljs\n   (when-not node-test?\n     (extend-type js/NodeList\n       ISeqable\n       (-seq [array] (array-seq array 0)))))\n\n;; Caret\n#?(:cljs\n   (defn caret-range [node]\n     (when-let [doc (or (gobj/get node \"ownerDocument\")\n                        (gobj/get node \"document\"))]\n       (let [win (or (gobj/get doc \"defaultView\")\n                     (gobj/get doc \"parentWindow\"))\n             selection (.getSelection win)]\n         (if selection\n           (let [range-count (gobj/get selection \"rangeCount\")]\n             (when (> range-count 0)\n               (let [range (-> (.getSelection win)\n                               (.getRangeAt 0))\n                     pre-caret-range (.cloneRange range)]\n                 (.selectNodeContents pre-caret-range node)\n                 (.setEnd pre-caret-range\n                          (gobj/get range \"endContainer\")\n                          (gobj/get range \"endOffset\"))\n                 (let [contents (.cloneContents pre-caret-range)\n                       html (some-> (first (.-childNodes contents))\n                                    (gobj/get \"innerHTML\")\n                                    str)\n                       ;; FIXME: this depends on the dom structure,\n                       ;; need a converter from html to text includes newlines\n                       br-ended? (and html\n                                      (or\n                                       ;; first line with a new line\n                                       (string/ends-with? html \"<div class=\\\"is-paragraph\\\"></div></div></span></div></div></div>\")\n                                       ;; multiple lines with a new line\n                                       (string/ends-with? html \"<br></div></div></span></div></div></div>\")))\n                       value (.toString pre-caret-range)]\n                   (if br-ended?\n                     (str value \"\\n\")\n                     value)))))\n           (when-let [selection (gobj/get doc \"selection\")]\n             (when (not= \"Control\" (gobj/get selection \"type\"))\n               (let [text-range (.createRange selection)\n                     pre-caret-text-range (.createTextRange (gobj/get doc \"body\"))]\n                 (.moveToElementText pre-caret-text-range node)\n                 (.setEndPoint pre-caret-text-range \"EndToEnd\" text-range)\n                 (gobj/get pre-caret-text-range \"text\")))))))))\n\n(defn get-selection-start\n  [input]\n  (when input\n    (.-selectionStart input)))\n\n(defn get-selection-end\n  [input]\n  (when input\n    (.-selectionEnd input)))\n\n(defn get-selection-direction\n  [input]\n  (when input\n    (.-selectionDirection input)))\n\n(defn get-first-or-last-line-pos\n  [input]\n  (let [pos (get-selection-start input)\n        value (.-value input)\n        last-newline-pos (or (string/last-index-of value \\newline (dec pos)) -1)]\n    (- pos last-newline-pos 1)))\n\n#?(:cljs\n   (defn stop [e]\n     (when e (doto e (.preventDefault) (.stopPropagation)))))\n\n#?(:cljs\n   (defn stop-propagation [e]\n     (when e (.stopPropagation e))))\n\n#?(:cljs\n   (defn cur-doc-top []\n     (.. js/document -documentElement -scrollTop)))\n\n#?(:cljs\n   (defn element-top [elem top]\n     (when elem\n       (if (.-offsetParent elem)\n         (let [client-top (or (.-clientTop elem) 0)\n               offset-top (.-offsetTop elem)]\n           (+ top client-top offset-top (element-top (.-offsetParent elem) top)))\n         top))))\n\n#?(:cljs\n   (defn scroll-to-element\n     [elem-id]\n     (when-not (safe-re-find #\"^/\\d+$\" elem-id)\n       (when elem-id\n         (when-let [elem (gdom/getElement elem-id)]\n           (.scroll (app-scroll-container-node)\n                    #js {:top (let [top (element-top elem 0)]\n                                (if (< top 256)\n                                  0\n                                  (- top 80)))\n                         :behavior \"smooth\"}))))))\n\n#?(:cljs\n   (defn scroll-to\n     ([pos]\n      (scroll-to (app-scroll-container-node) pos))\n     ([node pos]\n      (scroll-to node pos true))\n     ([node pos animate?]\n      (when node\n        (.scroll node\n                 #js {:top      pos\n                      :behavior (if animate? \"smooth\" \"auto\")})))))\n\n#?(:cljs\n   (defn scroll-top\n     \"Returns the scroll top position of the `node`. If `node` is not specified,\n     returns the scroll top position of the `app-scroll-container-node`.\"\n     ([]\n      (scroll-top (app-scroll-container-node)))\n     ([node]\n      (when node (.-scrollTop node)))))\n\n#?(:cljs\n   (defn scroll-to-top\n     ([]\n      (scroll-to (app-scroll-container-node) 0 false))\n     ([animate?]\n      (scroll-to (app-scroll-container-node) 0 animate?))))\n\n#?(:cljs\n   (defn link?\n     [node]\n     (contains?\n      #{\"A\" \"BUTTON\"}\n      (gobj/get node \"tagName\"))))\n\n#?(:cljs\n   (defn time?\n     [node]\n     (contains?\n      #{\"TIME\"}\n      (gobj/get node \"tagName\"))))\n\n#?(:cljs\n   (defn audio?\n     [node]\n     (contains?\n      #{\"AUDIO\"}\n      (gobj/get node \"tagName\"))))\n\n#?(:cljs\n   (defn video?\n     [node]\n     (contains?\n      #{\"VIDEO\"}\n      (gobj/get node \"tagName\"))))\n\n#?(:cljs\n   (defn sup?\n     [node]\n     (contains?\n      #{\"SUP\"}\n      (gobj/get node \"tagName\"))))\n\n#?(:cljs\n   (defn input?\n     [node]\n     (when node\n       (contains?\n        #{\"INPUT\" \"TEXTAREA\"}\n        (gobj/get node \"tagName\")))))\n\n#?(:cljs\n   (defn select?\n     [node]\n     (when node\n       (= \"SELECT\" (gobj/get node \"tagName\")))))\n\n#?(:cljs\n   (defn details-or-summary?\n     [node]\n     (when node\n       (contains?\n        #{\"DETAILS\" \"SUMMARY\"}\n        (gobj/get node \"tagName\")))))\n\n;; Debug\n(defn starts-with?\n  [s substr]\n  (string/starts-with? s substr))\n\n(defn distinct-by\n  [f col]\n  (reduce\n   (fn [acc x]\n     (if (some #(= (f x) (f %)) acc)\n       acc\n       (vec (conj acc x))))\n   []\n   col))\n\n(defn distinct-by-last-wins\n  [f col]\n  (reduce\n   (fn [acc x]\n     (if (some #(= (f x) (f %)) acc)\n       (mapv\n        (fn [v]\n          (if (= (f x) (f v))\n            x\n            v))\n        acc)\n       (vec (conj acc x))))\n   []\n   col))\n\n(defn get-git-owner-and-repo\n  [repo-url]\n  (take-last 2 (string/split repo-url #\"/\")))\n\n(defn safe-lower-case\n  [s]\n  (if (string? s)\n    (string/lower-case s) s))\n\n(defn trim-safe\n  [s]\n  (when s\n    (string/trim s)))\n\n(defn trimr-without-newlines\n  [s]\n  (.replace s #\"[ \\t\\r]+$\" \"\"))\n\n(defn triml-without-newlines\n  [s]\n  (.replace s #\"^[ \\t\\r]+\" \"\"))\n\n(defn concat-without-spaces\n  [left right]\n  (when (and (string? left)\n             (string? right))\n    (let [left (trimr-without-newlines left)\n          not-space? (or\n                      (string/blank? left)\n                      (= \"\\n\" (last left)))]\n      (str left\n           (when-not not-space? \" \")\n           (triml-without-newlines right)))))\n\n;; Add documentation\n(defn replace-first [pattern s new-value]\n  (if-let [first-index (string/index-of s pattern)]\n    (str new-value (subs s (+ first-index (count pattern))))\n    s))\n\n(defn replace-last\n  ([pattern s new-value]\n   (replace-last pattern s new-value true))\n  ([pattern s new-value space?]\n   (if-let [last-index (string/last-index-of s pattern)]\n     (let [prefix (subs s 0 last-index)]\n       (if space?\n         (concat-without-spaces prefix new-value)\n         (str prefix new-value)))\n     s)))\n\n(defonce default-escape-chars \"[]{}().+*?|\")\n\n(defn replace-ignore-case\n  [s old-value new-value & [escape-chars]]\n  (let [escape-chars (or escape-chars default-escape-chars)\n        old-value (if (string? escape-chars)\n                    (reduce (fn [acc escape-char]\n                              (string/replace acc escape-char (str \"\\\\\" escape-char)))\n                            old-value escape-chars)\n                    old-value)]\n    (string/replace s (re-pattern (str \"(?i)\" old-value)) new-value)))\n\n;; copy from https://stackoverflow.com/questions/18735665/how-can-i-get-the-positions-of-regex-matches-in-clojurescript\n#?(:cljs\n   (defn re-pos [re s]\n     (let [re (js/RegExp. (.-source re) \"g\")]\n       (loop [res []]\n         (if-let [m (.exec re s)]\n           (recur (conj res [(.-index m) (first m)]))\n           res)))))\n\n#?(:cljs\n   (defn safe-set-range-text!\n     ([input text start end]\n      (try\n        (.setRangeText input text start end)\n        (catch js/Error _e\n          nil)))\n     ([input text start end select-mode]\n      (try\n        (.setRangeText input text start end select-mode)\n        (catch js/Error _e\n          nil)))))\n\n#?(:cljs\n   ;; for widen char\n   (defn safe-dec-current-pos-from-end\n     [input current-pos]\n     (if-let [len (and (string? input) (.-length input))]\n       (when-let [input (and (>= len 2) (<= current-pos len)\n                             (.substring input (max (- current-pos 20) 0) current-pos))]\n         (try\n           (let [^js splitter (GraphemeSplitter.)\n                 ^js input (.splitGraphemes splitter input)]\n             (- current-pos (.-length (.pop input))))\n           (catch js/Error e\n             (js/console.error e)\n             (dec current-pos))))\n       (dec current-pos))))\n\n#?(:cljs\n   ;; for widen char\n   (defn safe-inc-current-pos-from-start\n     [input current-pos]\n     (if-let [len (and (string? input) (.-length input))]\n       (when-let [input (and (>= len 2) (<= current-pos len)\n                             (.substr input current-pos 20))]\n         (try\n           (let [^js splitter (GraphemeSplitter.)\n                 ^js input (.splitGraphemes splitter input)]\n             (+ current-pos (.-length (.shift input))))\n           (catch js/Error e\n             (js/console.error e)\n             (inc current-pos))))\n       (inc current-pos))))\n\n#?(:cljs\n   (defn kill-line-before!\n     [input]\n     (let [val (.-value input)\n           end (get-selection-start input)\n           n-pos (string/last-index-of val \\newline (dec end))\n           start (if n-pos (inc n-pos) 0)]\n       (safe-set-range-text! input \"\" start end))))\n\n#?(:cljs\n   (defn kill-line-after!\n     [input]\n     (let [val   (.-value input)\n           start (get-selection-start input)\n           end   (or (string/index-of val \\newline start)\n                     (count val))]\n       (safe-set-range-text! input \"\" start end))))\n\n#?(:cljs\n   (defn insert-at-current-position!\n     [input text]\n     (let [start (get-selection-start input)\n           end   (get-selection-end input)]\n       (safe-set-range-text! input text start end \"end\"))))\n\n;; copied from re_com\n#?(:cljs\n   (defn deref-or-value\n     \"Takes a value or an atom\n      If it's a value, returns it\n      If it's a Reagent object that supports IDeref, returns the value inside it by derefing\n      \"\n     [val-or-atom]\n     (if (satisfies? IDeref val-or-atom)\n       @val-or-atom\n       val-or-atom)))\n\n;; copied from re_com\n#?(:cljs\n   (defn now->utc\n     \"Return a goog.date.UtcDateTime based on local date/time.\"\n     []\n     (let [local-date-time (js/goog.date.DateTime.)]\n       (js/goog.date.UtcDateTime.\n        (.getYear local-date-time)\n        (.getMonth local-date-time)\n        (.getDate local-date-time)\n        0 0 0 0))))\n\n(defn safe-subvec [xs start end]\n  (if (or (neg? start)\n          (> end (count xs)))\n    []\n    (subvec xs start end)))\n\n#?(:cljs\n   (defn get-nodes-between-two-nodes\n     [id1 id2 class]\n     (when-let [nodes (array-seq (js/document.getElementsByClassName class))]\n       (let [node-1 (gdom/getElement id1)\n             node-2 (gdom/getElement id2)\n             idx-1 (.indexOf nodes node-1)\n             idx-2 (.indexOf nodes node-2)\n             start (min idx-1 idx-2)\n             end (inc (max idx-1 idx-2))]\n         (safe-subvec (vec nodes) start end)))))\n\n#?(:cljs\n   (defn get-direction-between-two-nodes\n     [id1 id2 class]\n     (when-let [nodes (array-seq (js/document.getElementsByClassName class))]\n       (let [node-1 (gdom/getElement id1)\n             node-2 (gdom/getElement id2)\n             idx-1 (.indexOf nodes node-1)\n             idx-2 (.indexOf nodes node-2)]\n         (if (>= idx-1 idx-2)\n           :up\n           :down)))))\n\n#?(:cljs\n   (defn rec-get-blocks-container\n     [node]\n     (if (and node (d/has-class? node \"blocks-container\"))\n       node\n       (and node\n            (rec-get-blocks-container (gobj/get node \"parentNode\"))))))\n\n#?(:cljs\n   (defn rec-get-blocks-content-section\n     [node]\n     (if (and node (d/has-class? node \"content\"))\n       node\n       (and node\n            (rec-get-blocks-content-section (gobj/get node \"parentNode\"))))))\n\n#?(:cljs\n   (defn get-blocks-noncollapse []\n     (->> (d/by-class \"ls-block\")\n          (filter (fn [b] (some? (gobj/get b \"offsetParent\")))))))\n\n#?(:cljs\n   (defn remove-embeded-blocks [blocks]\n     (->> blocks\n          (remove (fn [b] (= \"true\" (d/attr b \"data-embed\")))))))\n\n#?(:cljs\n   (defn get-selected-text\n     []\n     (utils/getSelectionText)))\n\n#?(:cljs (def clear-selection! selection/clearSelection))\n\n#?(:cljs\n   (defn copy-to-clipboard!\n     ([s]\n      (utils/writeClipboard s false))\n     ([s html?]\n      (utils/writeClipboard s html?))))\n\n(defn drop-nth [n coll]\n  (keep-indexed #(when (not= %1 n) %2) coll))\n\n#?(:cljs\n   (defn react\n     [ref]\n     (if rum.core/*reactions*\n       (rum/react ref)\n       @ref)))\n\n(defn time-ms\n  []\n  #?(:cljs (tc/to-long (cljs-time.core/now))))\n\n;; Returns the milliseconds representation of the provided time, in the local timezone.\n;; For example, if you run this function at 10pm EDT in the EDT timezone on May 31st,\n;; it will return 1622433600000, which is equivalent to Mon May 31 2021 00 :00:00.\n#?(:cljs\n   (defn today-at-local-ms [hours mins secs millisecs]\n     (.setHours (js/Date. (.now js/Date)) hours mins secs millisecs)))\n\n(defn d\n  [k f]\n  (let [result (atom nil)]\n    (println (str \"Debug \" k))\n    (time (reset! result (doall (f))))\n    @result))\n\n(defn concat-without-nil\n  [& cols]\n  (->> (apply concat cols)\n       (remove nil?)))\n\n#?(:cljs\n   (defn set-title!\n     [title]\n     (set! (.-title js/document) title)))\n\n#?(:cljs\n   (defn get-block-container\n     [block-element]\n     (when block-element\n       (when-let [section (some-> (rec-get-blocks-content-section block-element)\n                                  (d/parent))]\n         (when section\n           (gdom/getElement section \"id\"))))))\n\n#?(:cljs\n   (defn get-prev-block-non-collapsed\n     [block]\n     (when-let [blocks (get-blocks-noncollapse)]\n       (when-let [index (.indexOf blocks block)]\n         (let [idx (dec index)]\n           (when (>= idx 0)\n             (nth-safe blocks idx)))))))\n\n#?(:cljs\n   (defn get-prev-block-non-collapsed-non-embed\n     [block]\n     (when-let [blocks (->> (get-blocks-noncollapse)\n                            remove-embeded-blocks)]\n       (when-let [index (.indexOf blocks block)]\n         (let [idx (dec index)]\n           (when (>= idx 0)\n             (nth-safe blocks idx)))))))\n\n#?(:cljs\n   (defn get-next-block-non-collapsed\n     [block]\n     (when-let [blocks (get-blocks-noncollapse)]\n       (when-let [index (.indexOf blocks block)]\n         (let [idx (inc index)]\n           (when (>= (count blocks) idx)\n             (nth-safe blocks idx)))))))\n\n#?(:cljs\n   (defn get-next-block-non-collapsed-skip\n     [block]\n     (when-let [blocks (get-blocks-noncollapse)]\n       (when-let [index (.indexOf blocks block)]\n         (loop [idx (inc index)]\n           (when (>= (count blocks) idx)\n             (let [block (nth-safe blocks idx)\n                   nested? (->> (array-seq (gdom/getElementsByClass \"selected\"))\n                                (some (fn [dom] (.contains dom block))))]\n               (if nested?\n                 (recur (inc idx))\n                 block))))))))\n\n(defn rand-str\n  [n]\n  #?(:cljs (-> (.toString (js/Math.random) 36)\n               (.substr 2 n))\n     :clj (->> (repeatedly #(Integer/toString (rand 36) 36))\n               (take n)\n               (apply str))))\n\n(defn unique-id\n  []\n  (str (rand-str 6) (rand-str 3)))\n\n(defn pp-str [x]\n  #_:clj-kondo/ignore\n  (with-out-str (clojure.pprint/pprint x)))\n\n(defn hiccup-keywordize\n  [hiccup]\n  (walk/postwalk\n   (fn [f]\n     (if (and (vector? f) (string? (first f)))\n       (update f 0 keyword)\n       f))\n   hiccup))\n\n#?(:cljs\n   (defn chrome?\n     []\n     (let [user-agent js/navigator.userAgent\n           vendor js/navigator.vendor]\n       (and (safe-re-find #\"Chrome\" user-agent)\n            (safe-re-find #\"Google Inc\" vendor)))))\n\n#?(:cljs\n   (defn indexeddb-check?\n     [error-handler]\n     (let [test-db \"logseq-test-db-foo-bar-baz\"\n           db (and js/window.indexedDB\n                   (js/window.indexedDB.open test-db))]\n       (when (and db (not (chrome?)))\n         (gobj/set db \"onerror\" error-handler)\n         (gobj/set db \"onsuccess\"\n                   (fn []\n                     (js/window.indexedDB.deleteDatabase test-db)))))))\n\n(defonce mac? #?(:cljs goog.userAgent/MAC\n                 :clj nil))\n\n(defonce win32? #?(:cljs goog.userAgent/WINDOWS\n                   :clj nil))\n\n#?(:cljs\n   (defn absolute-path?\n     [path]\n     (try\n       (js/window.apis.isAbsolutePath path)\n       (catch js/Error _\n         (utils/win32 path)))))\n\n(defn default-content-with-title\n  [text-format]\n  (case (name text-format)\n    \"org\"\n    \"* \"\n\n    \"- \"))\n\n#?(:cljs\n   (defn get-first-block-by-id\n     [block-id]\n     (when block-id\n       (let [block-id (str block-id)]\n         (when (uuid-string? block-id)\n           (first (array-seq (js/document.getElementsByClassName block-id))))))))\n\n#?(:cljs\n   (defn url-encode\n     [string]\n     (some-> string str (js/encodeURIComponent) (.replace \"+\" \"%20\"))))\n\n#?(:cljs\n   (defn url-decode\n     [string]\n     (some-> string str (js/decodeURIComponent))))\n\n(def windows-reserved-chars #\"[:\\\\*\\\\?\\\"<>|]+\")\n\n#?(:cljs\n   (do\n     (defn include-windows-reserved-chars?\n      [s]\n       (safe-re-find windows-reserved-chars s))\n\n     (defn create-title-property?\n       [s]\n       (and (string? s)\n            (or (include-windows-reserved-chars? s)\n                (string/includes? s \"_\")\n                (string/includes? s \"/\")\n                (string/includes? s \".\")\n                (string/includes? s \"%\")\n                (string/includes? s \"#\"))))))\n\n#?(:cljs\n   (defn search-normalize\n     \"Normalize string for searching (loose)\"\n     [s]\n     (removeAccents (.normalize (string/lower-case s) \"NFKC\"))))\n\n#?(:cljs\n   (defn file-name-sanity\n     \"Sanitize page-name for file name (strict), for file writing.\"\n     [page-name]\n     (some-> page-name\n             gp-util/page-name-sanity\n             ;; for android filesystem compatiblity\n             (string/replace #\"[\\\\#|%]+\" url-encode)\n             ;; Windows reserved path characters\n             (string/replace windows-reserved-chars url-encode)\n             (string/replace #\"/\" url-encode)\n             (string/replace \"*\" \"%2A\"))))\n\n#?(:cljs\n   (def page-name-sanity-lc\n     \"Delegate to gp-util to loosely couple app usages to graph-parser\"\n     gp-util/page-name-sanity-lc))\n\n#?(:cljs\n (defn safe-page-name-sanity-lc\n   [s]\n   (if (string? s)\n     (page-name-sanity-lc s) s)))\n\n(defn get-page-original-name\n  [page]\n  (or (:block/original-name page)\n      (:block/name page)))\n\n#?(:cljs\n   (defn add-style!\n     [style]\n     (when (some? style)\n       (let [parent-node (d/sel1 :head)\n             id \"logseq-custom-theme-id\"\n             old-link-element (d/sel1 (str \"#\" id))\n             style (if (string/starts-with? style \"http\")\n                     style\n                     (str \"data:text/css;charset=utf-8,\" (js/encodeURIComponent style)))]\n         (when old-link-element\n           (d/remove! old-link-element))\n         (let [link (->\n                     (d/create-element :link)\n                     (d/set-attr! :id id)\n                     (d/set-attr! :rel \"stylesheet\")\n                     (d/set-attr! :type \"text/css\")\n                     (d/set-attr! :href style)\n                     (d/set-attr! :media \"all\"))]\n           (d/append! parent-node link))))))\n\n(defn ->platform-shortcut\n  [keyboard-shortcut]\n  (let [result (or keyboard-shortcut \"\")\n        result (string/replace result \"left\" \"\u2190\")\n        result (string/replace result \"right\" \"\u2192\")]\n    (if mac?\n      (-> result\n          (string/replace \"Ctrl\" \"Cmd\")\n          (string/replace \"Alt\" \"Opt\"))\n      result)))\n\n(defn remove-common-preceding\n  [col1 col2]\n  (if (and (= (first col1) (first col2))\n           (seq col1))\n    (recur (rest col1) (rest col2))\n    [col1 col2]))\n\n;; fs\n(defn get-file-ext\n  [file]\n  (and\n   (string? file)\n   (string/includes? file \".\")\n   (some-> (last (string/split file #\"\\.\")) string/lower-case)))\n\n(defn get-dir-and-basename\n  [path]\n  (let [parts (string/split path \"/\")\n        basename (last parts)\n        dir (->> (butlast parts)\n                 (string/join \"/\"))]\n    [dir basename]))\n\n(defn get-relative-path\n  [current-file-path another-file-path]\n  (let [directories-f #(butlast (string/split % \"/\"))\n        parts-1 (directories-f current-file-path)\n        parts-2 (directories-f another-file-path)\n        [parts-1 parts-2] (remove-common-preceding parts-1 parts-2)\n        another-file-name (last (string/split another-file-path \"/\"))]\n    (->> (concat\n          (if (seq parts-1)\n            (repeat (count parts-1) \"..\")\n            [\".\"])\n          parts-2\n          [another-file-name])\n         (string/join \"/\"))))\n\n;; Copied from https://github.com/tonsky/datascript-todo\n#?(:clj\n   (defmacro profile\n     [k & body]\n     `(if goog.DEBUG\n        (let [k# ~k]\n          (.time js/console k#)\n          (let [res# (do ~@body)]\n            (.timeEnd js/console k#)\n            res#))\n        (do ~@body))))\n\n;; TODO: profile and profileEnd\n\n;; Copy from hiccup\n(defn escape-html\n  \"Change special characters into HTML character entities.\"\n  [text]\n  (-> text\n      (string/replace \"&\"  \"&amp;\")\n      (string/replace \"<\"  \"&lt;\")\n      (string/replace \">\"  \"&gt;\")\n      (string/replace \"\\\"\" \"&quot;\")\n      (string/replace \"'\" \"&apos;\")))\n\n(defn unescape-html\n  [text]\n  (-> text\n      (string/replace \"&amp;\" \"&\")\n      (string/replace \"&lt;\" \"<\")\n      (string/replace \"&gt;\" \">\")\n      (string/replace \"&quot;\" \"\\\"\")\n      (string/replace \"&apos;\" \"'\")))\n\n#?(:cljs\n   (defn system-locales\n     []\n     (when-not node-test?\n       (when-let [navigator (and js/window (.-navigator js/window))]\n         ;; https://zzz.buzz/2016/01/13/detect-browser-language-in-javascript/\n         (when navigator\n           (let [v (js->clj\n                    (or\n                     (.-languages navigator)\n                     (.-language navigator)\n                     (.-userLanguage navigator)\n                     (.-browserLanguage navigator)\n                     (.-systemLanguage navigator)))]\n             (if (string? v) [v] v)))))))\n\n#?(:cljs\n   (defn zh-CN-supported?\n     []\n     (let [system-locales (set (system-locales))]\n       (or (contains? system-locales \"zh-CN\")\n           (contains? system-locales \"zh-Hans-CN\")))))\n\n(comment\n  (= (get-relative-path \"journals/2020_11_18.org\" \"pages/grant_ideas.org\")\n     \"../pages/grant_ideas.org\")\n\n  (= (get-relative-path \"journals/2020_11_18.org\" \"journals/2020_11_19.org\")\n     \"./2020_11_19.org\")\n\n  (= (get-relative-path \"a/b/c/d/g.org\" \"a/b/c/e/f.org\")\n     \"../e/f.org\"))\n\n#?(:cljs\n   (defn select-highlight!\n     [blocks]\n     (doseq [block blocks]\n       (d/add-class! block \"selected noselect\"))))\n\n#?(:cljs\n   (defn select-unhighlight!\n     [blocks]\n     (doseq [block blocks]\n       (d/remove-class! block \"selected\" \"noselect\"))))\n\n(defn keyname [key] (str (namespace key) \"/\" (name key)))\n\n(defn batch [in max-time handler buf-atom]\n  (async/go-loop [buf buf-atom t (async/timeout max-time)]\n    (let [[v p] (async/alts! [in t])]\n      (cond\n        (or (= p t) (nil? v))\n        (let [timeout (async/timeout max-time)]\n          (handler @buf)\n          (reset! buf [])\n          (recur buf timeout))\n\n        :else\n        (do (swap! buf conj v)\n            (recur buf t))))))\n\n#?(:cljs\n   (defn trace!\n     []\n     (js/console.trace)))\n\n(defn remove-first [pred coll]\n  ((fn inner [coll]\n     (lazy-seq\n      (when-let [[x & xs] (seq coll)]\n        (if (pred x)\n          xs\n          (cons x (inner xs))))))\n   coll))\n\n(def pprint clojure.pprint/pprint)\n\n#?(:cljs\n   (defn backward-kill-word\n     [input]\n     (let [val     (.-value input)\n           current (get-selection-start input)\n           prev    (or\n                    (->> [(string/last-index-of val \\space (dec current))\n                          (string/last-index-of val \\newline (dec current))]\n                         (remove nil?)\n                         (apply max))\n                    0)\n           idx     (if (zero? prev)\n                     0\n                     (->\n                      (loop [idx prev]\n                        (if (#{\\space \\newline} (nth-safe val idx))\n                          (recur (dec idx))\n                          idx))\n                      inc))]\n       (safe-set-range-text! input \"\" idx current))))\n\n#?(:cljs\n   (defn forward-kill-word\n     [input]\n     (let [val   (.-value input)\n           current (get-selection-start input)\n           current (loop [idx current]\n                     (if (#{\\space \\newline} (nth-safe val idx))\n                       (recur (inc idx))\n                       idx))\n           idx (or (->> [(string/index-of val \\space current)\n                         (string/index-of val \\newline current)]\n                        (remove nil?)\n                        (apply min))\n                   (count val))]\n       (safe-set-range-text! input \"\" current (inc idx)))))\n\n#?(:cljs\n   (defn fix-open-external-with-shift!\n     [^js/MouseEvent e]\n     (when (and (.-shiftKey e) win32? (electron?)\n                (= (string/lower-case (.. e -target -nodeName)) \"a\")\n                (string/starts-with? (.. e -target -href) \"file:\"))\n       (.preventDefault e))))\n\n(defn classnames\n  \"Like react classnames utility:\n\n     ```\n      [:div {:class (classnames [:a :b {:c true}])}\n     ```\n  \"\n  [args]\n  (into #{} (mapcat\n             #(if (map? %)\n                (for [[k v] %]\n                  (when v (name k)))\n                [(name %)])\n             args)))\n\n#?(:cljs\n   (defn- get-dom-top\n     [node]\n     (gobj/get (.getBoundingClientRect node) \"top\")))\n\n#?(:cljs\n   (defn sort-by-height\n     [elements]\n     (sort (fn [x y]\n             (< (get-dom-top x) (get-dom-top y)))\n           elements)))\n\n#?(:cljs\n   (defn calc-delta-rect-offset\n     [^js/HTMLElement target ^js/HTMLElement container]\n     (let [target-rect (bean/->clj (.toJSON (.getBoundingClientRect target)))\n           viewport-rect {:width  (.-clientWidth container)\n                          :height (.-clientHeight container)}]\n\n       {:y (- (:height viewport-rect) (:bottom target-rect))\n        :x (- (:width viewport-rect) (:right target-rect))})))\n\n(def regex-char-esc-smap\n  (let [esc-chars \"{}[]()&^%$#!?*.+|\\\\\"]\n    (zipmap esc-chars\n            (map #(str \"\\\\\" %) esc-chars))))\n\n(defn regex-escape\n  \"Escape all regex meta chars in text.\"\n  [text]\n  (string/join (replace regex-char-esc-smap text)))\n\n(comment\n  (re-matches (re-pattern (regex-escape \"$u^8(d)+w.*[dw]d?\")) \"$u^8(d)+w.*[dw]d?\"))\n\n#?(:cljs\n   (defn meta-key-name []\n     (if mac? \"Cmd\" \"Ctrl\")))\n\n#?(:cljs\n   (defn right-click?\n     [e]\n     (let [which (gobj/get e \"which\")\n           button (gobj/get e \"button\")]\n       (or (= which 3)\n           (= button 2)))))\n\n#?(:cljs\n   (defn make-el-into-center-viewport\n     [^js/HTMLElement el]\n     (when el\n       (.scrollIntoView el #js {:block \"center\" :behavior \"smooth\"}))))\n\n#?(:cljs\n   (defn make-el-cursor-position-into-center-viewport\n     [^js/HTMLElement el]\n     (when el\n       (let [main-node (gdom/getElement \"main-content-container\")\n             pos (get-selection-start el)\n             cursor-top (some-> (gdom/getElement \"mock-text\")\n                                gdom/getChildren\n                                array-seq\n                                (nth-safe pos)\n                                .-offsetTop)\n             box-caret (.getBoundingClientRect el)\n             box-top (.-top box-caret)\n             box-bottom (.-bottom box-caret)\n             vw-height (or (.-height js/window.visualViewport)\n                           (.-clientHeight js/document.documentElement))\n             scroll-top (.-scrollTop main-node)\n             cursor-y (if cursor-top (+ cursor-top box-top) box-bottom)\n             scroll (- cursor-y (/ vw-height 2))]\n         (when (> scroll 0)\n           (set! (.-scrollTop main-node) (+ scroll-top scroll)))))))\n\n#?(:cljs\n   (defn make-el-center-if-near-top\n     ([^js/HTMLElement el]\n      (make-el-center-if-near-top el 80))\n     ([^js/HTMLElement el offset]\n      (let [target-top (.-top (.getBoundingClientRect el))]\n        (when (<= target-top (or (safe-parse-int offset) 0))\n          (make-el-into-center-viewport el))))))\n\n#?(:cljs\n   (defn sm-breakpoint?\n     []\n     (< (.-offsetWidth js/document.documentElement) 640)))\n\n#?(:cljs\n   (defn event-is-composing?\n     \"Check if keydown event is a composing (IME) event.\n      Ignore the IME process by default.\"\n     ([e]\n      (event-is-composing? e false))\n     ([e include-process?]\n      (let [event-composing? (gobj/getValueByKeys e \"event_\" \"isComposing\")]\n        (if include-process?\n          (or event-composing?\n              (= (gobj/get e \"keyCode\") 229)\n              (= (gobj/get e \"key\") \"Process\"))\n          event-composing?)))))\n\n#?(:cljs\n   (defn onchange-event-is-composing?\n     \"Check if onchange event of Input is a composing (IME) event.\n       Always ignore the IME process.\"\n     [e]\n     (gobj/getValueByKeys e \"nativeEvent\" \"isComposing\"))) ;; No keycode available\n\n#?(:cljs\n   (defn open-url\n     [url]\n     (let [route? (or (string/starts-with? url\n                                           (string/replace js/location.href js/location.hash \"\"))\n                      (string/starts-with? url \"#\"))]\n       (if (and (not route?) (electron?))\n         (js/window.apis.openExternal url)\n         (set! (.-href js/window.location) url)))))\n\n(defn collapsed?\n  [block]\n  (:block/collapsed? block))\n\n#?(:cljs\n   (defn atom? [v]\n     (instance? Atom v)))\n\n;; https://stackoverflow.com/questions/32511405/how-would-time-ago-function-implementation-look-like-in-clojure\n#?(:cljs\n   (defn time-ago [time]\n     (let [units [{:name \"second\" :limit 60 :in-second 1}\n                  {:name \"minute\" :limit 3600 :in-second 60}\n                  {:name \"hour\" :limit 86400 :in-second 3600}\n                  {:name \"day\" :limit 604800 :in-second 86400}\n                  {:name \"week\" :limit 2629743 :in-second 604800}\n                  {:name \"month\" :limit 31556926 :in-second 2629743}\n                  {:name \"year\" :limit js/Number.MAX_SAFE_INTEGER :in-second 31556926}]\n           diff (t/in-seconds (t/interval time (t/now)))]\n       (if (< diff 5)\n         \"just now\"\n         (let [unit (first (drop-while #(or (>= diff (:limit %))\n                                            (not (:limit %)))\n                                       units))]\n           (-> (/ diff (:in-second unit))\n               Math/floor\n               int\n               (#(str % \" \" (:name unit) (when (> % 1) \"s\") \" ago\"))))))))\n"]}