{
"version":3,
"file":"module$node_modules$$pixi$graphics_smooth$dist$pixi_graphics_smooth.js",
"lineCount":97,
"mappings":"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",
"sources":["node_modules/@pixi/graphics-smooth/dist/pixi-graphics-smooth.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$graphics_smooth$dist$pixi_graphics_smooth\"] = function(global,require,module,exports) {\n/* eslint-disable */\n \n/*!\n * @pixi/graphics-smooth - v0.0.13\n * Compiled Wed, 07 Jul 2021 12:07:12 UTC\n *\n * @pixi/graphics-smooth is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n * \n * Copyright 2019-2020, Ivan Popelyshev, All Rights Reserved\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar math = require('@pixi/math');\nvar core = require('@pixi/core');\nvar constants = require('@pixi/constants');\nvar graphics = require('@pixi/graphics');\nvar utils = require('@pixi/utils');\nvar display = require('@pixi/display');\n\nfunction matrixEquals(th, matrix, eps = 1e-3)\n{\n    return this === matrix || Math.abs(th.a - matrix.a) < eps\n        && Math.abs(th.b - matrix.b) < eps\n        && Math.abs(th.c - matrix.c) < eps\n        && Math.abs(th.d - matrix.d) < eps\n        && Math.abs(th.tx - matrix.tx) < eps\n        && Math.abs(th.ty - matrix.ty) < eps;\n}\n\nclass BatchStyleArray\n{\n    \n    \n    \n    \n\n    constructor()\n    {\n        this.textureIds = [];\n        this.matrices = [];\n        this.lines = [];\n        this.count = 0;\n        // TODO: mapCoord for atlas cases\n        // TODO: gradients?\n    }\n\n    clear()\n    {\n        for (let i = 0; i < this.count; i++)\n        {\n            this.textureIds[i] = null;\n            this.matrices[i] = null;\n        }\n        this.count = 0;\n    }\n\n    add(textureId, matrix,\n        lineWidth, lineAlignment,\n        settings)\n    {\n        const { textureIds, matrices, lines, count } = this;\n\n        for (let i = 0; i < count; i++)\n        {\n            if (lines[i * 2] === lineWidth && lines[i * 2 + 1] === lineAlignment\n                && textureIds[i] === textureId && (matrixEquals(matrices[i], matrix)))\n            {\n                return i;\n            }\n        }\n        if (count >= settings.maxStyles)\n        {\n            return -1;\n        }\n        textureIds[count] = textureId;\n        matrices[count] = matrix;\n        lines[count * 2] = lineWidth;\n        lines[count * 2 + 1] = lineAlignment;\n        this.count++;\n\n        return count;\n    }\n}\n\nclass BatchDrawCall\n{\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n    constructor()\n    {\n        this.texArray = new core.BatchTextureArray();\n        this.styleArray = new BatchStyleArray();\n        this.shader = null;\n        this.blend = constants.BLEND_MODES.NORMAL;\n\n        this.start = 0;\n        this.size = 0;\n        this.TICK = 0; // for filling textures\n        this.settings = null;\n        /**\n         * data for uniforms or custom webgl state\n         * @member {object}\n         */\n        this.data = null;\n    }\n\n    clear()\n    {\n        this.texArray.clear();\n        this.styleArray.clear();\n        this.settings = null;\n        this.data = null;\n        this.shader = null;\n    }\n\n    begin(settings, shader)\n    {\n        this.TICK = ++core.BaseTexture._globalBatch;\n        this.settings = settings;\n        this.shader = shader;\n        // start and size calculated outside\n        this.start = 0;\n        this.size = 0;\n        this.data = null;\n        if (shader && (shader ).settings)\n        {\n            this.settings = (shader ).settings;\n        }\n    }\n\n    check(shader)\n    {\n        if (this.size === 0)\n        {\n            this.shader = shader;\n\n            return true;\n        }\n\n        return (this.shader === shader);\n    }\n\n    add(texture, matrix, lineWidth, lineAlignment)\n    {\n        const { texArray, TICK, styleArray, settings } = this;\n        const { baseTexture } = texture;\n        // check tex\n\n        if (baseTexture._batchEnabled !== TICK && texArray.count === settings.maxTextures)\n        {\n            return -1;\n        }\n        const loc = baseTexture._batchEnabled !== TICK ? texArray.count : baseTexture._batchLocation;\n        // check and add style\n        // add1 -> add2 only works in chain, not when there are several adds inside\n        const res = styleArray.add(loc, matrix || math.Matrix.IDENTITY, lineWidth, lineAlignment, settings);\n\n        if (res >= 0)\n        {\n            // SUCCESS here\n            // add tex\n            if (baseTexture._batchEnabled !== TICK)\n            {\n                baseTexture._batchEnabled = TICK;\n                baseTexture._batchLocation = texArray.count;\n                texArray.elements[texArray.count++] = baseTexture;\n            }\n        }\n\n        return res;\n    }\n}\n\nclass BatchPart\r\n{\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    constructor()\r\n    {\r\n        this.reset();\r\n    }\r\n\r\n     begin(style, startIndex, attribStart)\r\n    {\r\n        this.reset();\r\n        this.style = style;\r\n        this.start = startIndex;\r\n        this.attribStart = attribStart;\r\n        this.jointEnd = 0;\r\n    }\r\n\r\n     end(endIndex, endAttrib)\r\n    {\r\n        this.attribSize = endAttrib - this.attribStart;\r\n        this.size = endIndex - this.start;\r\n    }\r\n\r\n     reset()\r\n    {\r\n        this.style = null;\r\n        this.size = 0;\r\n        this.start = 0;\r\n        this.attribStart = 0;\r\n        this.attribSize = 0;\r\n        this.styleId = -1;\r\n        this.rgba = 0;\r\n        this.jointEnd = 0;\r\n    }\r\n}\n\nclass FillStyle\n{\n    constructor()\n    {\n        this.reset();\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n\n    toJSON()\n    {\n        return this.copyTo({});\n    }\n\n    clone()\n    {\n        return this.copyTo(new FillStyle());\n    }\n\n    copyTo(obj)\n    {\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.shader = this.shader;\n        obj.visible = this.visible;\n        obj.smooth = this.smooth;\n        obj.matrixTex = null;\n\n        return obj;\n    }\n\n    /**\n     * returns width multiplied by scaleMode\n     */\n    packLineWidth()\n    {\n        return 0;\n    }\n\n    reset()\n    {\n        this.color = 0xFFFFFF;\n\n        this.alpha = 1;\n\n        this.texture = core.Texture.WHITE;\n\n        this.matrix = null;\n\n        this.shader = null;\n\n        this.visible = false;\n\n        this.smooth = false;\n\n        this.matrixTex = null;\n    }\n\n    destroy()\n    {\n        this.texture = null;\n        this.matrix = null;\n        this.matrixTex = null;\n    }\n\n    getTextureMatrix()\n    {\n        const tex = this.texture;\n\n        if (!this.matrix)\n        {\n            return null;\n        }\n\n        if (tex.frame.width === tex.baseTexture.width\n            && tex.frame.height === tex.baseTexture.height)\n        {\n            return this.matrix;\n        }\n\n        if (!this.matrixTex)\n        {\n            this.matrixTex = this.matrix.clone();\n        }\n        else\n        {\n            this.matrixTex.copyFrom(this.matrix);\n        }\n        this.matrixTex.translate(Number(tex.frame.x), Number(tex.frame.y));\n\n        return this.matrixTex;\n    }\n}\n\nexports.LINE_SCALE_MODE = void 0; (function (LINE_SCALE_MODE) {\n    const NONE = 'none'; LINE_SCALE_MODE[\"NONE\"] = NONE;\n    const NORMAL = 'normal'; LINE_SCALE_MODE[\"NORMAL\"] = NORMAL;\n})(exports.LINE_SCALE_MODE || (exports.LINE_SCALE_MODE = {}));\n\nclass LineStyle extends FillStyle\n{\n    \n    \n\n    \n    \n    \n    \n\n    clone()\n    {\n        return this.copyTo(new LineStyle());\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    copyTo(obj)\n    {\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.shader = this.shader;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.cap = this.cap;\n        obj.join = this.join;\n        obj.miterLimit = this.miterLimit;\n        obj.scaleMode = this.scaleMode;\n\n        return obj;\n    }\n\n    /**\n     * returns width multiplied by scaleMode\n     */\n    packLineWidth()\n    {\n        return this.scaleMode === exports.LINE_SCALE_MODE.NORMAL ? this.width : -this.width;\n    }\n\n    reset()\n    {\n        super.reset();\n\n        this.smooth = true;\n\n        this.color = 0x0;\n\n        this.width = 0;\n\n        this.alignment = 0.5;\n\n        this.cap = graphics.LINE_CAP.BUTT;\n        this.join = graphics.LINE_JOIN.MITER;\n        this.miterLimit = 10;\n        this.scaleMode = exports.LINE_SCALE_MODE.NORMAL;\n    }\n}\n\nclass BuildData\r\n{constructor() { BuildData.prototype.__init.call(this);BuildData.prototype.__init2.call(this);BuildData.prototype.__init3.call(this);BuildData.prototype.__init4.call(this);BuildData.prototype.__init5.call(this); }\r\n    __init() {this.verts = [];}\r\n    __init2() {this.joints = [];}\r\n    __init3() {this.vertexSize = 0;}\r\n    __init4() {this.indexSize = 0;}\r\n    __init5() {this.closePointEps = 1e-4;}\r\n\r\n    clear()\r\n    {\r\n        this.verts.length = 0;\r\n        this.joints.length = 0;\r\n        this.vertexSize = 0;\r\n        this.indexSize = 0;\r\n    }\r\n\r\n    destroy()\r\n    {\r\n        this.verts.length = 0;\r\n        this.joints.length = 0;\r\n    }\r\n}\n\nexports.JOINT_TYPE = void 0; (function (JOINT_TYPE) {\r\n    const NONE = 0; JOINT_TYPE[JOINT_TYPE[\"NONE\"] = NONE] = \"NONE\";\r\n    const FILL = 1; JOINT_TYPE[JOINT_TYPE[\"FILL\"] = FILL] = \"FILL\";\r\n    const JOINT_BEVEL = 4; JOINT_TYPE[JOINT_TYPE[\"JOINT_BEVEL\"] = JOINT_BEVEL] = \"JOINT_BEVEL\";\r\n    const JOINT_MITER = 8; JOINT_TYPE[JOINT_TYPE[\"JOINT_MITER\"] = JOINT_MITER] = \"JOINT_MITER\";\r\n    const JOINT_ROUND = 12; JOINT_TYPE[JOINT_TYPE[\"JOINT_ROUND\"] = JOINT_ROUND] = \"JOINT_ROUND\";\r\n    const JOINT_CAP_BUTT = 16; JOINT_TYPE[JOINT_TYPE[\"JOINT_CAP_BUTT\"] = JOINT_CAP_BUTT] = \"JOINT_CAP_BUTT\";\r\n    const JOINT_CAP_SQUARE = 18; JOINT_TYPE[JOINT_TYPE[\"JOINT_CAP_SQUARE\"] = JOINT_CAP_SQUARE] = \"JOINT_CAP_SQUARE\";\r\n    const JOINT_CAP_ROUND = 20; JOINT_TYPE[JOINT_TYPE[\"JOINT_CAP_ROUND\"] = JOINT_CAP_ROUND] = \"JOINT_CAP_ROUND\";\r\n    const FILL_EXPAND = 24; JOINT_TYPE[JOINT_TYPE[\"FILL_EXPAND\"] = FILL_EXPAND] = \"FILL_EXPAND\";\r\n    const CAP_BUTT = 1 << 5; JOINT_TYPE[JOINT_TYPE[\"CAP_BUTT\"] = CAP_BUTT] = \"CAP_BUTT\";\r\n    const CAP_SQUARE = 2 << 5; JOINT_TYPE[JOINT_TYPE[\"CAP_SQUARE\"] = CAP_SQUARE] = \"CAP_SQUARE\";\r\n    const CAP_ROUND = 3 << 5; JOINT_TYPE[JOINT_TYPE[\"CAP_ROUND\"] = CAP_ROUND] = \"CAP_ROUND\";\r\n    const CAP_BUTT2 = 4 << 5; JOINT_TYPE[JOINT_TYPE[\"CAP_BUTT2\"] = CAP_BUTT2] = \"CAP_BUTT2\";\r\n})(exports.JOINT_TYPE || (exports.JOINT_TYPE = {}));\n\nclass SegmentPacker\n{constructor() { SegmentPacker.prototype.__init.call(this);SegmentPacker.prototype.__init2.call(this);SegmentPacker.prototype.__init3.call(this); }\n    static __initStatic() {this.vertsByJoint = [];}\n\n    __init() {this.strideFloats = 12;}\n\n    updateBufferSize(jointStart, jointLen, triangles, target)\n    {\n        const { joints } = target;\n        let foundTriangle = false;\n\n        let vertexSize = 0;\n        let indexSize = 0;\n\n        for (let i = jointStart; i < jointStart + jointLen; i++)\n        {\n            const prevCap = joints[i] & ~31;\n            const joint = joints[i] & 31;\n\n            if (joint === exports.JOINT_TYPE.FILL)\n            {\n                foundTriangle = true;\n                vertexSize++;\n                continue;\n            }\n\n            if (joint >= exports.JOINT_TYPE.FILL_EXPAND)\n            {\n                vertexSize += 3;\n                indexSize += 3;\n                continue;\n            }\n\n            const vs = SegmentPacker.vertsByJoint[joint] + SegmentPacker.vertsByJoint[prevCap];\n\n            if (vs >= 4)\n            {\n                vertexSize += vs;\n                indexSize += 6 + (3 * Math.max(vs - 6, 0));\n            }\n        }\n        if (foundTriangle)\n        {\n            indexSize += triangles;\n        }\n\n        target.vertexSize += vertexSize;\n        target.indexSize += indexSize;\n    }\n\n    __init2() {this.bufferPos = 0;}\n    __init3() {this.indexPos = 0;}\n    \n    \n    \n    \n\n    beginPack(buildData, bufFloat, bufUint, indices, bufferPos = 0, indexPos = 0)\n    {\n        this.buildData = buildData;\n        this.bufFloat = bufFloat;\n        this.bufUint = bufUint;\n        this.indices = indices;\n        this.bufferPos = bufferPos;\n        this.indexPos = indexPos;\n    }\n\n    endPack()\n    {\n        this.buildData = null;\n        this.bufFloat = null;\n        this.bufUint = null;\n        this.indices = null;\n    }\n\n    packInterleavedGeometry(jointStart, jointLen, triangles,\n        lineStyle, color)\n    {\n        const { bufFloat, bufUint, indices, buildData, strideFloats } = this;\n        const { joints, verts } = buildData;\n\n        let bufPos = this.bufferPos;\n        let indPos = this.indexPos;\n        let index = this.bufferPos / this.strideFloats;\n\n        // eslint-disable-next-line max-len\n        let x1; let y1; let x2; let y2; let prevX; let prevY; let nextX; let\n            nextY;\n        // let type: number;\n        let hasTriangle = false;\n\n        let travel = 0;\n\n        for (let j = jointStart; j < jointStart + jointLen; j++)\n        {\n            const fullJoint = joints[j];\n            const prevCap = joints[j] & ~31;\n            const joint = joints[j] & 31;\n\n            if (joint === exports.JOINT_TYPE.FILL)\n            {\n                // just one vertex\n                hasTriangle = true;\n                x1 = verts[(j * 2)];\n                y1 = verts[(j * 2) + 1];\n                bufFloat[bufPos] = x1;\n                bufFloat[bufPos + 1] = y1;\n                bufFloat[bufPos + 2] = x1;\n                bufFloat[bufPos + 3] = y1;\n                bufFloat[bufPos + 4] = x1;\n                bufFloat[bufPos + 5] = y1;\n                bufFloat[bufPos + 6] = x1;\n                bufFloat[bufPos + 7] = y1;\n                bufFloat[bufPos + 8] = travel;\n                bufFloat[bufPos + 9] = 16 * joint;\n                bufFloat[bufPos + 10] = lineStyle;\n                bufUint[bufPos + 11] = color;\n                bufPos += strideFloats;\n                continue;\n            }\n\n            if (joint >= exports.JOINT_TYPE.FILL_EXPAND)\n            {\n                prevX = verts[j * 2];\n                prevY = verts[(j * 2) + 1];\n                x1 = verts[(j * 2) + 2];\n                y1 = verts[(j * 2) + 3];\n                x2 = verts[(j * 2) + 4];\n                y2 = verts[(j * 2) + 5];\n\n                const bis = j + 3;\n\n                for (let i = 0; i < 3; i++)\n                {\n                    bufFloat[bufPos] = prevX;\n                    bufFloat[bufPos + 1] = prevY;\n                    bufFloat[bufPos + 2] = x1;\n                    bufFloat[bufPos + 3] = y1;\n                    bufFloat[bufPos + 4] = x2;\n                    bufFloat[bufPos + 5] = y2;\n                    bufFloat[bufPos + 6] = verts[(bis + i) * 2];\n                    bufFloat[bufPos + 7] = verts[((bis + i) * 2) + 1];\n\n                    bufFloat[bufPos + 8] = travel;\n                    bufFloat[bufPos + 9] = (16 * fullJoint) + i;\n                    bufFloat[bufPos + 10] = lineStyle;\n                    bufUint[bufPos + 11] = color;\n                    bufPos += strideFloats;\n                }\n\n                indices[indPos] = index;\n                indices[indPos + 1] = index + 1;\n                indices[indPos + 2] = index + 2;\n                indPos += 3;\n                index += 3;\n                continue;\n            }\n\n            const vs = SegmentPacker.vertsByJoint[joint] + SegmentPacker.vertsByJoint[prevCap];\n\n            if (vs === 0)\n            {\n                continue;\n            }\n            x1 = verts[j * 2];\n            y1 = verts[(j * 2) + 1];\n            x2 = verts[(j * 2) + 2];\n            y2 = verts[(j * 2) + 3];\n            // TODO: caps here\n            prevX = verts[(j * 2) - 2];\n            prevY = verts[(j * 2) - 1];\n\n            const dist = Math.sqrt(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\n\n            if (SegmentPacker.vertsByJoint[joint] === 0)\n            {\n                travel -= dist;\n            }\n\n            if ((joint & ~2) !== exports.JOINT_TYPE.JOINT_CAP_BUTT)\n            {\n                nextX = verts[(j * 2) + 4];\n                nextY = verts[(j * 2) + 5];\n            }\n            else\n            {\n                nextX = x1;\n                nextY = y1;\n            }\n            // type = joint;\n\n            for (let i = 0; i < vs; i++)\n            {\n                bufFloat[bufPos] = prevX;\n                bufFloat[bufPos + 1] = prevY;\n                bufFloat[bufPos + 2] = x1;\n                bufFloat[bufPos + 3] = y1;\n                bufFloat[bufPos + 4] = x2;\n                bufFloat[bufPos + 5] = y2;\n                bufFloat[bufPos + 6] = nextX;\n                bufFloat[bufPos + 7] = nextY;\n                bufFloat[bufPos + 8] = travel;\n                bufFloat[bufPos + 9] = (16 * fullJoint) + i;\n                bufFloat[bufPos + 10] = lineStyle;\n                bufUint[bufPos + 11] = color;\n                bufPos += strideFloats;\n            }\n\n            travel += dist;\n\n            indices[indPos] = index;\n            indices[indPos + 1] = index + 1;\n            indices[indPos + 2] = index + 2;\n            indices[indPos + 3] = index;\n            indices[indPos + 4] = index + 2;\n            indices[indPos + 5] = index + 3;\n            indPos += 6;\n            for (let j = 5; j + 1 < vs; j++)\n            {\n                indices[indPos] = index + 4;\n                indices[indPos + 1] = index + j;\n                indices[indPos + 2] = index + j + 1;\n                indPos += 3;\n            }\n            index += vs;\n        }\n\n        if (hasTriangle)\n        {\n            for (let i = 0; i < triangles.length; i++)\n            {\n                indices[indPos + i] = triangles[i] + index;\n            }\n            indPos += triangles.length;\n        }\n\n        this.bufferPos = bufPos;\n        this.indexPos = indPos;\n    }\n} SegmentPacker.__initStatic();\n\nconst verts = SegmentPacker.vertsByJoint;\n\nfor (let i = 0; i < 256; i++)\n{ verts.push(0); }\n// simple fill\nverts[exports.JOINT_TYPE.FILL] = 1;\n\nfor (let i = 0; i < 8; i++)\n{\n    verts[exports.JOINT_TYPE.FILL_EXPAND + i] = 3;\n}\n\n// no caps for now\nverts[exports.JOINT_TYPE.JOINT_BEVEL] = 4 + 3;\nverts[exports.JOINT_TYPE.JOINT_BEVEL + 1] = 4 + 3;\nverts[exports.JOINT_TYPE.JOINT_BEVEL + 2] = 4 + 3;\nverts[exports.JOINT_TYPE.JOINT_BEVEL + 3] = 4 + 3;\nverts[exports.JOINT_TYPE.JOINT_ROUND] = 4 + 5;\nverts[exports.JOINT_TYPE.JOINT_ROUND + 1] = 4 + 5;\nverts[exports.JOINT_TYPE.JOINT_ROUND + 2] = 4 + 5;\nverts[exports.JOINT_TYPE.JOINT_ROUND + 3] = 4 + 5;\nverts[exports.JOINT_TYPE.JOINT_MITER] = 4 + 4;\nverts[exports.JOINT_TYPE.JOINT_MITER + 1] = 4 + 4;\nverts[exports.JOINT_TYPE.JOINT_MITER + 2] = 4;\nverts[exports.JOINT_TYPE.JOINT_MITER + 3] = 4;\nverts[exports.JOINT_TYPE.JOINT_CAP_BUTT] = 4;\nverts[exports.JOINT_TYPE.JOINT_CAP_BUTT + 1] = 4;\nverts[exports.JOINT_TYPE.JOINT_CAP_SQUARE] = 4;\nverts[exports.JOINT_TYPE.JOINT_CAP_SQUARE + 1] = 4;\nverts[exports.JOINT_TYPE.JOINT_CAP_ROUND] = 4 + 4;\nverts[exports.JOINT_TYPE.JOINT_CAP_ROUND + 1] = 4 + 4;\n\nverts[exports.JOINT_TYPE.CAP_ROUND] = 4;\n\n/**\r\n * A class to contain data useful for Graphics objects\r\n *\r\n * @class\r\n * @memberof PIXI\r\n */\r\nclass SmoothGraphicsData\r\n{\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    // result of simplification\r\n    \r\n    \r\n    \r\n    // indices in build\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n    constructor(shape, fillStyle = null, lineStyle = null, matrix = null)\r\n    {\r\n        this.shape = shape;\r\n\r\n        this.lineStyle = lineStyle;\r\n\r\n        this.fillStyle = fillStyle;\r\n\r\n        this.matrix = matrix;\r\n\r\n        this.type = shape.type;\r\n\r\n        this.points = [];\r\n\r\n        this.holes = [];\r\n\r\n        this.triangles = [];\r\n\r\n        this.closeStroke = false;\r\n\r\n        this.clearBuild();\r\n    }\r\n\r\n     clearPath()\r\n    {\r\n        this.points.length = 0;\r\n        this.closeStroke = true;\r\n    }\r\n\r\n     clearBuild()\r\n    {\r\n        this.triangles.length = 0;\r\n        this.fillStart = 0;\r\n        this.fillLen = 0;\r\n        this.strokeStart = 0;\r\n        this.strokeLen = 0;\r\n        this.fillAA = false;\r\n    }\r\n\r\n     clone()\r\n    {\r\n        return new SmoothGraphicsData(\r\n            this.shape,\r\n            this.fillStyle,\r\n            this.lineStyle,\r\n            this.matrix\r\n        );\r\n    }\r\n\r\n     capType()\r\n    {\r\n        let cap;\r\n\r\n        switch (this.lineStyle.cap)\r\n        {\r\n            case graphics.LINE_CAP.SQUARE:\r\n                cap = exports.JOINT_TYPE.CAP_SQUARE;\r\n                break;\r\n            case graphics.LINE_CAP.ROUND:\r\n                cap = exports.JOINT_TYPE.CAP_ROUND;\r\n                break;\r\n            default:\r\n                cap = exports.JOINT_TYPE.CAP_BUTT;\r\n                break;\r\n        }\r\n\r\n        return cap;\r\n    }\r\n\r\n     goodJointType() {\r\n        let joint;\r\n\r\n        switch (this.lineStyle.join)\r\n        {\r\n            case graphics.LINE_JOIN.BEVEL:\r\n                joint = exports.JOINT_TYPE.JOINT_BEVEL;\r\n                break;\r\n            case graphics.LINE_JOIN.ROUND:\r\n                joint = exports.JOINT_TYPE.JOINT_ROUND;\r\n                break;\r\n            default:\r\n                joint = exports.JOINT_TYPE.JOINT_MITER + 3;\r\n                break;\r\n        }\r\n\r\n        return joint;\r\n    }\r\n\r\n     jointType()\r\n    {\r\n        let joint;\r\n\r\n        switch (this.lineStyle.join)\r\n        {\r\n            case graphics.LINE_JOIN.BEVEL:\r\n                joint = exports.JOINT_TYPE.JOINT_BEVEL;\r\n                break;\r\n            case graphics.LINE_JOIN.ROUND:\r\n                joint = exports.JOINT_TYPE.JOINT_ROUND;\r\n                break;\r\n            default:\r\n                joint = exports.JOINT_TYPE.JOINT_MITER;\r\n                break;\r\n        }\r\n\r\n        return joint;\r\n    }\r\n\r\n     destroy()\r\n    {\r\n        this.shape = null;\r\n        this.holes.length = 0;\r\n        this.holes = null;\r\n        this.points.length = 0;\r\n        this.points = null;\r\n        this.lineStyle = null;\r\n        this.fillStyle = null;\r\n        this.triangles = null;\r\n    }\r\n}\n\n// for type only\n\nclass CircleBuilder \n{\n    path(graphicsData, _target)\n    {\n        // need to convert points to a nice regular data\n        const circleData = graphicsData.shape ;\n        const points = graphicsData.points;\n        const x = circleData.x;\n        const y = circleData.y;\n        let width;\n        let height;\n        // TODO - bit hacky??\n\n        if (graphicsData.type === math.SHAPES.CIRC)\n        {\n            width = circleData.radius;\n            height = circleData.radius;\n        }\n        else\n        {\n            const ellipseData = graphicsData.shape ;\n\n            width = ellipseData.width;\n            height = ellipseData.height;\n        }\n\n        if (width <= 0 || height <= 0)\n        {\n            return;\n        }\n\n        points.push(x, y);\n\n        let totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n            || Math.floor(15 * Math.sqrt(width + height));\n\n        totalSegs /= 2.3;\n        if (totalSegs < 3)\n        {\n            totalSegs = 3;\n        }\n\n        const seg = (Math.PI * 2) / totalSegs;\n\n        for (let i = 0; i < totalSegs - 0.5; i++)\n        {\n            points.push(\n                x + (Math.sin(-seg * i) * width),\n                y + (Math.cos(-seg * i) * height)\n            );\n        }\n    }\n\n    fill(graphicsData, target)\n    {\n        const { verts, joints } = target;\n        const { points, triangles } = graphicsData;\n\n        let vertPos = 1;\n        const center = 0;\n\n        if (!graphicsData.fillAA)\n        {\n            for (let i = 0; i < points.length; i += 2)\n            {\n                verts.push(points[i], points[i + 1]);\n                joints.push(exports.JOINT_TYPE.FILL);\n                if (i > 2)\n                {\n                    triangles.push(vertPos++, center, vertPos);\n                }\n            }\n            triangles.push(vertPos, center, 1);\n\n            return;\n        }\n\n        const cx = points[0]; const\n            cy = points[1];\n        const rad = (graphicsData.shape ).radius;\n\n        for (let i = 2; i < points.length; i += 2)\n        {\n            // const prev = i;\n            const cur = i;\n            const next = i + 2 < points.length ? i + 2 : 2;\n\n            verts.push(cx);\n            verts.push(cy);\n            verts.push(points[cur]);\n            verts.push(points[cur + 1]);\n            verts.push(points[next]);\n            verts.push(points[next + 1]);\n\n            verts.push(0);\n            verts.push(0);\n            verts.push((points[cur] - cx) / rad);\n            verts.push((points[cur + 1] - cy) / rad);\n            verts.push((points[next] - cx) / rad);\n            verts.push((points[next + 1] - cy) / rad);\n\n            joints.push(exports.JOINT_TYPE.FILL_EXPAND + 2);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n        }\n    }\n\n    line(graphicsData, target)\n    {\n        const { verts, joints } = target;\n        const { points } = graphicsData;\n        const joint = graphicsData.goodJointType();\n        const len = points.length;\n\n        verts.push(points[len - 2], points[len - 1]);\n        joints.push(exports.JOINT_TYPE.NONE);\n        for (let i = 2; i < len; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n            joints.push(joint);\n        }\n        verts.push(points[2], points[3]);\n        joints.push(exports.JOINT_TYPE.NONE);\n        verts.push(points[4], points[5]);\n        joints.push(exports.JOINT_TYPE.NONE);\n    }\n}\n\nclass RectangleBuilder \r\n{\r\n    path(graphicsData, _target)\r\n    {\r\n        // --- //\r\n        // need to convert points to a nice regular data\r\n        //\r\n        const rectData = graphicsData.shape ;\r\n        const x = rectData.x;\r\n        const y = rectData.y;\r\n        const width = rectData.width;\r\n        const height = rectData.height;\r\n        const points = graphicsData.points;\r\n\r\n        points.length = 0;\r\n\r\n        points.push(x, y,\r\n            x + width, y,\r\n            x + width, y + height,\r\n            x, y + height);\r\n    }\r\n\r\n    line(graphicsData, target)\r\n    {\r\n        const { verts, joints } = target;\r\n        const { points } = graphicsData;\r\n\r\n        const joint = graphicsData.goodJointType();\r\n        const len = points.length;\r\n\r\n        verts.push(points[len - 2], points[len - 1]);\r\n        joints.push(exports.JOINT_TYPE.NONE);\r\n        for (let i = 0; i < len; i += 2)\r\n        {\r\n            verts.push(points[i], points[i + 1]);\r\n            joints.push(joint);\r\n        }\r\n        verts.push(points[0], points[1]);\r\n        joints.push(exports.JOINT_TYPE.NONE);\r\n        verts.push(points[2], points[3]);\r\n        joints.push(exports.JOINT_TYPE.NONE);\r\n    }\r\n\r\n    fill(graphicsData, target)\r\n    {\r\n        const { verts, joints } = target;\r\n        const { points, triangles } = graphicsData;\r\n\r\n        triangles.length = 0;\r\n\r\n        verts.push(points[0], points[1],\r\n            points[2], points[3],\r\n            points[4], points[5],\r\n            points[6], points[7]);\r\n\r\n        joints.push(exports.JOINT_TYPE.FILL, exports.JOINT_TYPE.FILL, exports.JOINT_TYPE.FILL, exports.JOINT_TYPE.FILL);\r\n        triangles.push(0, 1, 2, 0, 2, 3);\r\n    }\r\n}\n\nfunction getPt(n1, n2, perc)\r\n{\r\n    const diff = n2 - n1;\r\n\r\n    return n1 + (diff * perc);\r\n}\r\n\r\nfunction quadraticBezierCurve(\r\n    fromX, fromY,\r\n    cpX, cpY,\r\n    toX, toY,\r\n    out = [])\r\n{\r\n    const n = 20;\r\n    const points = out;\r\n\r\n    let xa = 0;\r\n    let ya = 0;\r\n    let xb = 0;\r\n    let yb = 0;\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    for (let i = 0, j = 0; i <= n; ++i)\r\n    {\r\n        j = i / n;\r\n\r\n        // The Green Line\r\n        xa = getPt(fromX, cpX, j);\r\n        ya = getPt(fromY, cpY, j);\r\n        xb = getPt(cpX, toX, j);\r\n        yb = getPt(cpY, toY, j);\r\n\r\n        // The Black Dot\r\n        x = getPt(xa, xb, j);\r\n        y = getPt(ya, yb, j);\r\n\r\n        points.push(x, y);\r\n    }\r\n\r\n    return points;\r\n}\r\n\r\nclass RoundedRectangleBuilder \r\n{\r\n    path(graphicsData, _target)\r\n    {\r\n        const rrectData = graphicsData.shape ;\r\n        const { points } = graphicsData;\r\n        const x = rrectData.x;\r\n        const y = rrectData.y;\r\n        const width = rrectData.width;\r\n        const height = rrectData.height;\r\n\r\n        // Don't allow negative radius or greater than half the smallest width\r\n        const radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\r\n\r\n        points.length = 0;\r\n\r\n        // No radius, do a simple rectangle\r\n        if (!radius)\r\n        {\r\n            points.push(x, y,\r\n                x + width, y,\r\n                x + width, y + height,\r\n                x, y + height);\r\n        }\r\n        else\r\n        {\r\n            quadraticBezierCurve(x, y + radius,\r\n                x, y,\r\n                x + radius, y,\r\n                points);\r\n            quadraticBezierCurve(x + width - radius,\r\n                y, x + width, y,\r\n                x + width, y + radius,\r\n                points);\r\n            quadraticBezierCurve(x + width, y + height - radius,\r\n                x + width, y + height,\r\n                x + width - radius, y + height,\r\n                points);\r\n            quadraticBezierCurve(x + radius, y + height,\r\n                x, y + height,\r\n                x, y + height - radius,\r\n                points);\r\n        }\r\n    }\r\n\r\n    line(graphicsData, target)\r\n    {\r\n        const { verts, joints } = target;\r\n        const { points } = graphicsData;\r\n\r\n\r\n        const joint = points.length === 8 // we dont need joints for arcs\r\n            ? graphicsData.goodJointType() : exports.JOINT_TYPE.JOINT_MITER + 3;\r\n        const len = points.length;\r\n\r\n        verts.push(points[len - 2], points[len - 1]);\r\n        joints.push(exports.JOINT_TYPE.NONE);\r\n        for (let i = 0; i < len; i += 2)\r\n        {\r\n            verts.push(points[i], points[i + 1]);\r\n            joints.push(joint);\r\n        }\r\n        verts.push(points[0], points[1]);\r\n        joints.push(exports.JOINT_TYPE.NONE);\r\n        verts.push(points[2], points[3]);\r\n        joints.push(exports.JOINT_TYPE.NONE);\r\n    }\r\n\r\n    fill(graphicsData, target)\r\n    {\r\n        const { verts, joints } = target;\r\n        const { points } = graphicsData;\r\n\r\n        graphicsData.triangles = utils.earcut(points, null, 2);\r\n\r\n        for (let i = 0, j = points.length; i < j; i++)\r\n        {\r\n            verts.push(points[i], points[++i]);\r\n            joints.push(exports.JOINT_TYPE.FILL);\r\n        }\r\n    }\r\n}\n\nconst tempArr = [];\n\nclass PolyBuilder \n{\n    path(graphicsData, buildData)\n    {\n        const shape = graphicsData.shape ;\n        const points = graphicsData.points = shape.points.slice();\n        const eps = buildData.closePointEps;\n        const eps2 = eps * eps;\n\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        const firstPoint = new math.Point(points[0], points[1]);\n        const lastPoint = new math.Point(points[points.length - 2], points[points.length - 1]);\n        const closedShape = graphicsData.closeStroke = shape.closeStroke;\n\n        let len = points.length;\n        let newLen = 2;\n\n        // 1. remove equal points\n        for (let i = 2; i < len; i += 2)\n        {\n            const x1 = points[i - 2]; const y1 = points[i - 1]; const x2 = points[i]; const\n                y2 = points[i + 1];\n            let flag = true;\n\n            if (Math.abs(x1 - x2) < eps\n                && Math.abs(y1 - y2) < eps)\n            {\n                flag = false;\n            }\n\n            if (flag)\n            {\n                points[newLen] = points[i];\n                points[newLen + 1] = points[i + 1];\n                newLen += 2;\n            }\n        }\n        points.length = len = newLen;\n\n        newLen = 2;\n        // 2. remove middle points\n        for (let i = 2; i + 2 < len; i += 2)\n        {\n            let x1 = points[i - 2]; let y1 = points[i - 1]; const x2 = points[i]; const y2 = points[i + 1];\n            let x3 = points[i + 2]; let\n                y3 = points[i + 3];\n\n            x1 -= x2;\n            y1 -= y2;\n            x3 -= x2;\n            y3 -= y2;\n            let flag = true;\n\n            if (Math.abs(x3 * y1 - y3 * x1) < eps2)\n            {\n                if (x1 * x3 + y1 * y3 < -eps2)\n                {\n                    flag = false;\n                }\n            }\n\n            if (flag)\n            {\n                points[newLen] = points[i];\n                points[newLen + 1] = points[i + 1];\n                newLen += 2;\n            }\n        }\n        points[newLen] = points[len - 2];\n        points[newLen + 1] = points[len - 1];\n        newLen += 2;\n\n        points.length = len = newLen;\n\n        if (len <= 2)\n        {\n            // suddenly, nothing\n            return;\n        }\n\n        if (closedShape)\n        {\n            // first point should be last point in closed line!\n            const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n                && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n            if (closedPath)\n            {\n                points.pop();\n                points.pop();\n            }\n        }\n    }\n\n    line(graphicsData, buildData)\n    {\n        const { closeStroke, points } = graphicsData;\n        const eps = buildData.closePointEps;\n        // const eps2 = eps * eps;\n        const len = points.length;\n        // const style = graphicsData.lineStyle;\n\n        if (len <= 2)\n        {\n            return;\n        }\n        const { verts, joints } = buildData;\n\n        // TODO: alignment\n\n        const joint = graphicsData.jointType();\n        const cap = graphicsData.capType();\n        let prevCap = 0;\n\n        let prevX; let\n            prevY;\n\n        if (closeStroke)\n        {\n            prevX = points[len - 2];\n            prevY = points[len - 1];\n            joints.push(exports.JOINT_TYPE.NONE);\n        }\n        else\n        {\n            prevX = points[2];\n            prevY = points[3];\n            if (cap === exports.JOINT_TYPE.CAP_ROUND)\n            {\n                verts.push(points[0], points[1]);\n                joints.push(exports.JOINT_TYPE.NONE);\n                joints.push(exports.JOINT_TYPE.CAP_ROUND);\n                prevCap = 0;\n            }\n            else\n            {\n                prevCap = cap;\n                joints.push(exports.JOINT_TYPE.NONE);\n            }\n        }\n        verts.push(prevX, prevY);\n\n        /* Line segments of interest where (x1,y1) forms the corner. */\n        for (let i = 0; i < len; i += 2)\n        {\n            const x1 = points[i]; const\n                y1 = points[i + 1];\n\n            let x2; let\n                y2;\n\n            if (i + 2 < len)\n            {\n                x2 = points[i + 2];\n                y2 = points[i + 3];\n            }\n            else\n            {\n                x2 = points[0];\n                y2 = points[1];\n            }\n\n            const dx = x2 - x1;\n            const dy = y2 - y1;\n            let nextX; let\n                nextY;\n\n            let endJoint = joint;\n\n            if (i + 2 >= len)\n            {\n                nextX = points[2];\n                nextY = points[3];\n                if (!closeStroke)\n                {\n                    endJoint = exports.JOINT_TYPE.NONE;\n                }\n            }\n            else if (i + 4 >= len)\n            {\n                nextX = points[0];\n                nextY = points[1];\n                if (!closeStroke)\n                {\n                    if (cap === exports.JOINT_TYPE.CAP_ROUND)\n                    {\n                        endJoint = exports.JOINT_TYPE.JOINT_CAP_ROUND;\n                    }\n                    if (cap === exports.JOINT_TYPE.CAP_BUTT)\n                    {\n                        endJoint = exports.JOINT_TYPE.JOINT_CAP_BUTT;\n                    }\n                    if (cap === exports.JOINT_TYPE.CAP_SQUARE)\n                    {\n                        endJoint = exports.JOINT_TYPE.JOINT_CAP_SQUARE;\n                    }\n                }\n            }\n            else\n            {\n                nextX = points[i + 4];\n                nextY = points[i + 5];\n            }\n\n            const dx3 = x1 - prevX;\n            const dy3 = y1 - prevY;\n\n            if (joint >= exports.JOINT_TYPE.JOINT_BEVEL && joint <= exports.JOINT_TYPE.JOINT_MITER)\n            {\n                const dx2 = nextX - x2;\n                const dy2 = nextY - y2;\n\n                if (endJoint >= exports.JOINT_TYPE.JOINT_BEVEL\n                    && endJoint <= exports.JOINT_TYPE.JOINT_MITER + 3)\n                {\n                    const D = dx2 * dy - dy2 * dx;\n\n                    if (Math.abs(D) < eps)\n                    {\n                        switch (joint & ~3)\n                        {\n                            case exports.JOINT_TYPE.JOINT_ROUND:\n                                endJoint = exports.JOINT_TYPE.JOINT_CAP_ROUND;\n                                break;\n                            default:\n                                endJoint = exports.JOINT_TYPE.JOINT_CAP_BUTT;\n                                break;\n                        }\n                    }\n                }\n\n                if (joint === exports.JOINT_TYPE.JOINT_MITER)\n                {\n                    let jointAdd = 0;\n\n                    if (dx3 * dx + dy3 * dy > -eps)\n                    {\n                        jointAdd++;\n                    }\n                    if (endJoint === exports.JOINT_TYPE.JOINT_MITER && dx2 * dx + dy2 * dy > -eps)\n                    {\n                        jointAdd += 2;\n                    }\n                    endJoint += jointAdd;\n                }\n            }\n            if (prevCap === 0)\n            {\n                if (Math.abs(dx3 * dy - dy3 * dx) < eps)\n                {\n                    prevCap = exports.JOINT_TYPE.CAP_BUTT2;\n                }\n            }\n            endJoint += prevCap;\n            prevCap = 0;\n\n            verts.push(x1, y1);\n            joints.push(endJoint);\n\n            prevX = x1;\n            prevY = y1;\n        }\n\n        if (closeStroke)\n        {\n            verts.push(points[0], points[1]);\n            joints.push(exports.JOINT_TYPE.NONE);\n            verts.push(points[2], points[3]);\n            joints.push(exports.JOINT_TYPE.NONE);\n        }\n        else\n        {\n            verts.push(points[len - 4], points[len - 3]);\n            joints.push(exports.JOINT_TYPE.NONE);\n        }\n    }\n\n    fill(graphicsData, buildData)\n    {\n        let points = graphicsData.points;\n        // TODO: simplify holes too!\n        const holes = graphicsData.holes;\n        const eps = buildData.closePointEps;\n\n        const { verts, joints } = buildData;\n\n        if (points.length < 6)\n        {\n            return;\n        }\n        const holeArray = [];\n        let len = points.length;\n        // Process holes..\n\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n\n            holeArray.push(points.length / 2);\n            points = points.concat(hole.points);\n        }\n\n        // TODO: reduce size later?\n        const pn = tempArr;\n\n        if (pn.length < points.length)\n        {\n            pn.length = points.length;\n        }\n        const start = 0;\n\n        for (let i = 0; i <= holeArray.length; i++)\n        {\n            let finish = len / 2;\n\n            if (i > 0)\n            {\n                if (i < holeArray.length)\n                {\n                    finish = holeArray[i];\n                }\n                else\n                {\n                    finish = (points.length >> 1);\n                }\n            }\n            pn[start * 2] = finish - 1;\n            pn[(finish - 1) * 2 + 1] = 0;\n            for (let j = start; j + 1 < finish; j++)\n            {\n                pn[j * 2 + 1] = j + 1;\n                pn[j * 2 + 2] = j;\n            }\n        }\n\n        // sort color\n        graphicsData.triangles = utils.earcut(points, holeArray, 2);\n\n        if (!graphicsData.triangles)\n        {\n            return;\n        }\n\n        if (!graphicsData.fillAA)\n        {\n            for (let i = 0; i < points.length; i += 2)\n            {\n                verts.push(points[i], points[i + 1]);\n                joints.push(exports.JOINT_TYPE.FILL);\n            }\n\n            return;\n        }\n\n        const { triangles } = graphicsData;\n\n        len = points.length;\n\n        for (let i = 0; i < triangles.length; i += 3)\n        {\n            // TODO: holes prev/next!!!\n            let flag = 0;\n\n            for (let j = 0; j < 3; j++)\n            {\n                const ind1 = triangles[i + j];\n                const ind2 = triangles[i + (j + 1) % 3];\n\n                if (pn[ind1 * 2] === ind2 || pn[ind1 * 2 + 1] === ind2)\n                {\n                    flag |= (1 << j);\n                }\n            }\n            joints.push(exports.JOINT_TYPE.FILL_EXPAND + flag);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n            joints.push(exports.JOINT_TYPE.NONE);\n        }\n\n        // bisect, re-using pn\n        for (let ind = 0; ind < len / 2; ind++)\n        {\n            const prev = pn[ind * 2];\n            const next = pn[ind * 2 + 1];\n            let nx1 = (points[next * 2 + 1] - points[ind * 2 + 1]); let\n                ny1 = -(points[next * 2] - points[ind * 2]);\n            let nx2 = (points[ind * 2 + 1] - points[prev * 2 + 1]); let\n                ny2 = -(points[ind * 2] - points[prev * 2]);\n            const D1 = Math.sqrt(nx1 * nx1 + ny1 * ny1);\n\n            nx1 /= D1;\n            ny1 /= D1;\n            const D2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\n            nx2 /= D2;\n            ny2 /= D2;\n\n            let bx = (nx1 + nx2);\n            let by = (ny1 + ny2);\n            const D = bx * nx1 + by * ny1;\n\n            if (Math.abs(D) < eps)\n            {\n                bx = nx1;\n                by = ny1;\n            }\n            else\n            {\n                bx /= D;\n                by /= D;\n            }\n            pn[ind * 2] = bx;\n            pn[ind * 2 + 1] = by;\n        }\n\n        for (let i = 0; i < triangles.length; i += 3)\n        {\n            const prev = triangles[i];\n            const ind = triangles[i + 1];\n            const next = triangles[i + 2];\n            const nx1 = (points[next * 2 + 1] - points[ind * 2 + 1]); const\n                ny1 = -(points[next * 2] - points[ind * 2]);\n            const nx2 = (points[ind * 2 + 1] - points[prev * 2 + 1]); const\n                ny2 = -(points[ind * 2] - points[prev * 2]);\n\n            let j1 = 1;\n\n            if (nx1 * ny2 - nx2 * ny1 > 0.0)\n            {\n                j1 = 2;\n            }\n\n            for (let j = 0; j < 3; j++)\n            {\n                const ind = triangles[i + (j * j1) % 3];\n\n                verts.push(points[ind * 2], points[ind * 2 + 1]);\n            }\n            for (let j = 0; j < 3; j++)\n            {\n                const ind = triangles[i + (j * j1) % 3];\n\n                verts.push(pn[ind * 2], pn[ind * 2 + 1]);\n            }\n        }\n    }\n}\n\nconst FILL_COMMANDS = {\r\n    [math.SHAPES.POLY]: new PolyBuilder(),\r\n    [math.SHAPES.CIRC]: new CircleBuilder(),\r\n    [math.SHAPES.ELIP]: new CircleBuilder(),\r\n    [math.SHAPES.RECT]: new RectangleBuilder(),\r\n    [math.SHAPES.RREC]: new RoundedRectangleBuilder()\r\n};\n\n/*\n * Complex shape type\n * @todo Move to Math shapes\n */\n\n\nconst BATCH_POOL = [];\nconst DRAW_CALL_POOL = [];\n\nconst tmpPoint = new math.Point();\nconst tmpBounds = new display.Bounds();\n\nclass SmoothGraphicsGeometry extends core.Geometry\n{\n     static __initStatic() {this.BATCHABLE_SIZE = 100;}\n\n    \n\n    __init() {this.indicesUint16 = null;}\n    \n\n    \n\n    get points()\n    {\n        return this.buildData.verts;\n    }\n\n    get closePointEps()\n    {\n        return this.buildData.closePointEps;\n    }\n\n    \n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n\n    initAttributes(_static)\n    {\n        this._buffer = new core.Buffer(null, _static, false);\n        this._bufferFloats = new Float32Array();\n        this._bufferUint = new Uint32Array();\n\n        this._indexBuffer = new core.Buffer(null, _static, true);\n        this.addAttribute('aPrev', this._buffer, 2, false, constants.TYPES.FLOAT)\n            .addAttribute('aPoint1', this._buffer, 2, false, constants.TYPES.FLOAT)\n            .addAttribute('aPoint2', this._buffer, 2, false, constants.TYPES.FLOAT)\n            .addAttribute('aNext', this._buffer, 2, false, constants.TYPES.FLOAT)\n            .addAttribute('aTravel', this._buffer, 1, false, constants.TYPES.FLOAT)\n            // number of vertex\n            .addAttribute('aVertexJoint', this._buffer, 1, false, constants.TYPES.FLOAT)\n            // line width, alignment\n            .addAttribute('aStyleId', this._buffer, 1, false, constants.TYPES.FLOAT)\n            // the usual\n            .addAttribute('aColor', this._buffer, 4, true, constants.TYPES.UNSIGNED_BYTE)\n            .addIndex(this._indexBuffer);\n\n        this.strideFloats = 12;\n    }\n\n    constructor()\n    {\n        super();SmoothGraphicsGeometry.prototype.__init.call(this);\n        this.initAttributes(false);\n\n        this.buildData = new BuildData();\n\n        this.graphicsData = [];\n\n        this.dirty = 0;\n\n        this.batchDirty = -1;\n\n        this.cacheDirty = -1;\n\n        this.clearDirty = 0;\n\n        this.drawCalls = [];\n\n        this.batches = [];\n\n        this.shapeBuildIndex = 0;\n\n        this.shapeBatchIndex = 0;\n\n        this._bounds = new display.Bounds();\n\n        this.boundsDirty = -1;\n\n        this.boundsPadding = 0;\n\n        this.batchable = false;\n\n        this.indicesUint16 = null;\n\n        this.packer = null;\n        this.packSize = 0;\n        this.pack32index = null;\n    }\n\n     checkInstancing(instanced, allow32Indices)\n    {\n        if (this.packer)\n        {\n            return;\n        }\n        this.packer = new SegmentPacker();\n        this.pack32index = allow32Indices;\n    }\n\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * @member {PIXI.Bounds}\n     * @readonly\n     */\n     get bounds()\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.calculateBounds();\n        }\n\n        return this._bounds;\n    }\n\n    /**\n     * Call if you changed graphicsData manually.\n     * Empties all batch buffers.\n     */\n     invalidate()\n    {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeBuildIndex = 0;\n        this.shapeBatchIndex = 0;\n        this.packSize = 0;\n\n        this.buildData.clear();\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batchPart = this.batches[i];\n\n            batchPart.reset();\n            BATCH_POOL.push(batchPart);\n        }\n\n        this.batches.length = 0;\n    }\n\n     clear()\n    {\n        if (this.graphicsData.length > 0)\n        {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        return this;\n    }\n\n     drawShape(\n        shape,\n        fillStyle = null,\n        lineStyle = null,\n        matrix = null)\n    {\n        const data = new SmoothGraphicsData(shape, fillStyle, lineStyle, matrix);\n\n        this.graphicsData.push(data);\n        this.dirty++;\n\n        return this;\n    }\n\n     drawHole(shape, matrix = null)\n    {\n        if (!this.graphicsData.length)\n        {\n            return null;\n        }\n\n        const data = new SmoothGraphicsData(shape, null, null, matrix);\n\n        const lastShape = this.graphicsData[this.graphicsData.length - 1];\n\n        data.lineStyle = lastShape.lineStyle;\n\n        lastShape.holes.push(data);\n\n        this.dirty++;\n\n        return this;\n    }\n\n     destroy()\n    {\n        super.destroy();\n\n        // destroy each of the SmoothGraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        this.buildData.destroy();\n        this.buildData = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     *\n     * @param {PIXI.IPointData} point - Point to check if it's contained.\n     * @return {Boolean} `true` if the point is contained within geometry.\n     */\n     containsPoint(point)\n    {\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fillStyle.visible)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.matrix)\n                {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y))\n                {\n                    let hitHole = false;\n\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y))\n                            {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!hitHole)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    updatePoints()\n    {\n        // do nothing\n    }\n\n    updateBufferSize()\n    {\n        this._buffer.update(new Float32Array());\n    }\n\n    updateBuild()\n    {\n        const { graphicsData, buildData } = this;\n        const len = graphicsData.length;\n\n        for (let i = this.shapeBuildIndex; i < len; i++)\n        {\n            const data = graphicsData[i];\n\n            data.strokeStart = 0;\n            data.strokeLen = 0;\n            data.fillStart = 0;\n            data.fillLen = 0;\n            const { fillStyle, lineStyle, holes } = data;\n\n            if (!fillStyle.visible && !lineStyle.visible)\n            {\n                continue;\n            }\n\n            const command = FILL_COMMANDS[data.type];\n\n            data.clearPath();\n\n            command.path(data, buildData);\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n\n            data.clearBuild();\n            if (data.points.length <= 2)\n            {\n                continue;\n            }\n            if (fillStyle.visible)\n            {\n                if (holes.length)\n                {\n                    this.processHoles(holes);\n                }\n                data.fillAA = (data.fillStyle ).smooth\n                    && !(data.lineStyle.visible\n                    && data.lineStyle.alpha >= 0.99\n                    && data.lineStyle.width >= 0.99);\n\n                data.fillStart = buildData.joints.length;\n                command.fill(data, buildData);\n                data.fillLen = buildData.joints.length - data.fillStart;\n            }\n            if (lineStyle.visible)\n            {\n                data.strokeStart = buildData.joints.length;\n                command.line(data, buildData);\n                data.strokeLen = buildData.joints.length - data.strokeStart;\n            }\n        }\n        this.shapeBuildIndex = len;\n    }\n\n    updateBatches(shaderSettings)\n    {\n        if (!this.graphicsData.length)\n        {\n            this.batchable = true;\n\n            return;\n        }\n        this.updateBuild();\n\n        if (!this.validateBatching())\n        {\n            return;\n        }\n\n        const { buildData, graphicsData } = this;\n        const len = graphicsData.length;\n\n        this.cacheDirty = this.dirty;\n\n        let batchPart = null;\n\n        let currentStyle = null;\n\n        if (this.batches.length > 0)\n        {\n            batchPart = this.batches[this.batches.length - 1];\n            currentStyle = batchPart.style;\n        }\n\n        for (let i = this.shapeBatchIndex; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n            if (!fillStyle.visible && !lineStyle.visible)\n            {\n                continue;\n            }\n            for (let j = 0; j < 2; j++)\n            {\n                const style = (j === 0) ? fillStyle : lineStyle;\n\n                if (!style.visible) continue;\n\n                const nextTexture = style.texture.baseTexture;\n                const attribOld = buildData.vertexSize;\n                const indexOld = buildData.indexSize;\n\n                nextTexture.wrapMode = constants.WRAP_MODES.REPEAT;\n                if (j === 0)\n                {\n                    this.packer.updateBufferSize(data.fillStart, data.fillLen, data.triangles.length, buildData);\n                }\n                else\n                {\n                    this.packer.updateBufferSize(data.strokeStart, data.strokeLen, data.triangles.length, buildData);\n                }\n\n                const attribSize = buildData.vertexSize;\n\n                if (attribSize === attribOld) continue;\n                // close batch if style is different\n                if (batchPart && !this._compareStyles(currentStyle, style))\n                {\n                    batchPart.end(indexOld, attribOld);\n                    batchPart = null;\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart)\n                {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    batchPart.begin(style, indexOld, attribOld);\n                    this.batches.push(batchPart);\n                    currentStyle = style;\n                }\n\n                if (j === 0)\n                {\n                    batchPart.jointEnd = data.fillStart + data.fillLen;\n                }\n                else\n                {\n                    batchPart.jointEnd = data.strokeStart + data.strokeLen;\n                }\n            }\n        }\n        this.shapeBatchIndex = len;\n\n        if (batchPart)\n        {\n            batchPart.end(buildData.indexSize, buildData.vertexSize);\n        }\n\n        if (this.batches.length === 0)\n        {\n            // there are no visible styles in SmoothGraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n\n            return;\n        }\n\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n\n        if (this.batchable)\n        {\n            this.packBatches();\n        }\n        else\n        {\n            this.buildDrawCalls(shaderSettings);\n            this.updatePack();\n        }\n    }\n\n    updatePack()\n    {\n        const { vertexSize, indexSize } = this.buildData;\n\n        if (this.packSize === vertexSize)\n        {\n            return;\n        }\n\n        const { strideFloats, packer, buildData, batches } = this;\n        const buffer = this._buffer;\n        const index = this._indexBuffer;\n        const floatsSize = vertexSize * strideFloats;\n\n        if (buffer.data.length !== floatsSize)\n        {\n            const arrBuf = new ArrayBuffer(floatsSize * 4);\n\n            this._bufferFloats = new Float32Array(arrBuf);\n            this._bufferUint = new Uint32Array(arrBuf);\n            buffer.data = this._bufferFloats;\n        }\n        if (index.data.length !== indexSize)\n        {\n            if (vertexSize > 0xffff && this.pack32index)\n            {\n                index.data = new Uint32Array(indexSize);\n            }\n            else\n            {\n                index.data = new Uint16Array(indexSize);\n            }\n        }\n\n        packer.beginPack(buildData, this._bufferFloats, this._bufferUint, index.data );\n\n        let j = 0;\n\n        for (let i = 0; i < this.graphicsData.length; i++)\n        {\n            const data = this.graphicsData[i];\n\n            if (data.fillLen)\n            {\n                while (batches[j].jointEnd <= data.fillStart)\n                {\n                    j++;\n                }\n                packer.packInterleavedGeometry(data.fillStart, data.fillLen, data.triangles,\n                    batches[j].styleId, batches[j].rgba);\n            }\n            if (data.strokeLen)\n            {\n                while (batches[j].jointEnd <= data.strokeStart)\n                {\n                    j++;\n                }\n                packer.packInterleavedGeometry(data.strokeStart, data.strokeLen, data.triangles,\n                    batches[j].styleId, batches[j].rgba);\n            }\n        }\n\n        buffer.update();\n        index.update();\n        this.packSize = vertexSize;\n    }\n\n    /**\n     * Affinity check\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n     */\n     _compareStyles(styleA, styleB)\n    {\n        if (!styleA || !styleB)\n        {\n            return false;\n        }\n\n        if (styleA.texture.baseTexture !== styleB.texture.baseTexture)\n        {\n            return false;\n        }\n\n        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha)\n        {\n            return false;\n        }\n\n        if (styleA.packLineWidth() !== styleB.packLineWidth())\n        {\n            return false;\n        }\n\n        // TODO: propagate width for FillStyle\n        if ((styleA ).alignment !== (styleB ).alignment)\n        {\n            return false;\n        }\n\n        const mat1 = styleA.matrix || math.Matrix.IDENTITY;\n        const mat2 = styleB.matrix || math.Matrix.IDENTITY;\n\n        return matrixEquals(mat1, mat2);\n    }\n\n    /**\n     * Test geometry for batching process.\n     *\n     * @protected\n     */\n     validateBatching()\n    {\n        if (this.dirty === this.cacheDirty || !this.graphicsData.length)\n        {\n            return false;\n        }\n\n        for (let i = 0, l = this.graphicsData.length; i < l; i++)\n        {\n            const data = this.graphicsData[i];\n            const fill = data.fillStyle;\n            const line = data.lineStyle;\n\n            if (fill && !fill.texture.baseTexture.valid) return false;\n            if (line && !line.texture.baseTexture.valid) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Offset the indices so that it works with the batcher.\n     *\n     * @protected\n     */\n     packBatches()\n    {\n        this.batchDirty++;\n        const batches = this.batches;\n\n        for (let i = 0, l = batches.length; i < l; i++)\n        {\n            const batch = batches[i];\n\n            for (let j = 0; j < batch.size; j++)\n            {\n                const index = batch.start + j;\n\n                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n            }\n        }\n    }\n\n     isBatchable()\n    {\n        return false;\n\n        // prevent heavy mesh batching\n        // if (this.points.length > 0xffff * 2) {\n        //     return false;\n        // }\n        //\n        // const batches = this.batches;\n        //\n        // for (let i = 0; i < batches.length; i++) {\n        //     if ((batches[i].style as LineStyle).native) {\n        //         return false;\n        //     }\n        // }\n        //\n        // return (this.points.length < SmoothGraphicsGeometry.BATCHABLE_SIZE * 2);\n    }\n\n    /**\n     * Converts intermediate batches data to drawCalls.\n     *\n     * @protected\n     */\n     buildDrawCalls(shaderSettings)\n    {\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        let currentGroup = DRAW_CALL_POOL.pop() || new BatchDrawCall();\n\n        currentGroup.begin(shaderSettings, null);\n\n        let index = 0;\n\n        this.drawCalls.push(currentGroup);\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batchData = this.batches[i];\n            const style = batchData.style ;\n\n            if (batchData.attribSize === 0)\n            {\n                // I don't know how why do we have size=0 sometimes\n                continue;\n            }\n\n            let styleId = -1;\n            const mat = style.getTextureMatrix();\n\n            if (currentGroup.check(style.shader))\n            {\n                styleId = currentGroup.add(style.texture, mat, style.packLineWidth(), style.alignment || 0);\n            }\n            if (styleId < 0)\n            {\n                currentGroup = DRAW_CALL_POOL.pop() || new BatchDrawCall();\n                this.drawCalls.push(currentGroup);\n                currentGroup.begin(shaderSettings, style.shader);\n                currentGroup.start = index;\n                styleId = currentGroup.add(style.texture, mat, style.packLineWidth(), style.alignment || 0);\n            }\n            currentGroup.size += batchData.size;\n            index += batchData.size;\n\n            const { color, alpha } = style;\n            const rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n\n            batchData.rgba = utils.premultiplyTint(rgb, alpha);\n            batchData.styleId = styleId;\n        }\n    }\n\n     processHoles(holes)\n    {\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n            const command = FILL_COMMANDS[hole.type];\n\n            command.path(hole, this.buildData);\n\n            if (hole.matrix)\n            {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    }\n\n    /**\n     * Update the local bounds of the object. Expensive to use performance-wise.\n     *\n     * @protected\n     */\n     calculateBounds()\n    {\n        const bounds = this._bounds;\n        const sequenceBounds = tmpBounds;\n        let curMatrix = math.Matrix.IDENTITY;\n\n        this._bounds.clear();\n        sequenceBounds.clear();\n\n        for (let i = 0; i < this.graphicsData.length; i++)\n        {\n            const data = this.graphicsData[i];\n            const shape = data.shape;\n            const type = data.type;\n            const lineStyle = data.lineStyle;\n            const nextMatrix = data.matrix || math.Matrix.IDENTITY;\n            let lineWidth = 0.0;\n\n            if (lineStyle && lineStyle.visible)\n            {\n                const alignment = lineStyle.alignment;\n\n                lineWidth = lineStyle.width;\n\n                if (type === math.SHAPES.POLY)\n                {\n                    lineWidth = lineWidth * (0.5 + Math.abs(0.5 - alignment));\n                }\n                else\n                {\n                    lineWidth = lineWidth * Math.max(0, alignment);\n                }\n            }\n\n            if (curMatrix !== nextMatrix)\n            {\n                if (!sequenceBounds.isEmpty())\n                {\n                    bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n                    sequenceBounds.clear();\n                }\n                curMatrix = nextMatrix;\n            }\n\n            if (type === math.SHAPES.RECT || type === math.SHAPES.RREC)\n            {\n                const rect = shape ;\n\n                sequenceBounds.addFramePad(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height,\n                    lineWidth, lineWidth);\n            }\n            else if (type === math.SHAPES.CIRC)\n            {\n                const circle = shape ;\n\n                sequenceBounds.addFramePad(circle.x, circle.y, circle.x, circle.y,\n                    circle.radius + lineWidth, circle.radius + lineWidth);\n            }\n            else if (type === math.SHAPES.ELIP)\n            {\n                const ellipse = shape ;\n\n                sequenceBounds.addFramePad(ellipse.x, ellipse.y, ellipse.x, ellipse.y,\n                    ellipse.width + lineWidth, ellipse.height + lineWidth);\n            }\n            else\n            {\n                const poly = shape ;\n                // adding directly to the bounds\n\n                bounds.addVerticesMatrix(curMatrix, (poly.points ), 0, poly.points.length, lineWidth, lineWidth);\n            }\n        }\n\n        if (!sequenceBounds.isEmpty())\n        {\n            bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n        }\n\n        bounds.pad(this.boundsPadding, this.boundsPadding);\n    }\n\n    /**\n     * Transform points using matrix.\n     *\n     * @protected\n     * @param {number[]} points - Points to transform\n     * @param {PIXI.Matrix} matrix - Transform matrix\n     */\n     transformPoints(points, matrix)\n    {\n        for (let i = 0; i < points.length / 2; i++)\n        {\n            const x = points[(i * 2)];\n            const y = points[(i * 2) + 1];\n\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    }\n} SmoothGraphicsGeometry.__initStatic();\n\nconst smoothVert = `precision highp float;\nconst float FILL = 1.0;\nconst float BEVEL = 4.0;\nconst float MITER = 8.0;\nconst float ROUND = 12.0;\nconst float JOINT_CAP_BUTT = 16.0;\nconst float JOINT_CAP_SQUARE = 18.0;\nconst float JOINT_CAP_ROUND = 20.0;\n\nconst float FILL_EXPAND = 24.0;\n\nconst float CAP_BUTT = 1.0;\nconst float CAP_SQUARE = 2.0;\nconst float CAP_ROUND = 3.0;\nconst float CAP_BUTT2 = 4.0;\n\nconst float MITER_LIMIT = 10.0;\n\n// === geom ===\nattribute vec2 aPrev;\nattribute vec2 aPoint1;\nattribute vec2 aPoint2;\nattribute vec2 aNext;\nattribute float aVertexJoint;\nattribute float aTravel;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec4 tint;\n\nvarying vec4 vSignedCoord;\nvarying vec4 vDistance;\nvarying float vType;\n\nuniform float resolution;\nuniform float expand;\n\n// === style ===\nattribute float aStyleId;\nattribute vec4 aColor;\n\nvarying float vTextureId;\nvarying vec4 vColor;\nvarying vec2 vTextureCoord;\nvarying float vTravel;\n\nuniform vec2 styleLine[%MAX_STYLES%];\nuniform vec3 styleMatrix[2 * %MAX_STYLES%];\nuniform float styleTextureId[%MAX_STYLES%];\nuniform vec2 samplerSize[%MAX_TEXTURES%];\n\nvec2 doBisect(vec2 norm, float len, vec2 norm2, float len2,\n    float dy, float inner) {\n    vec2 bisect = (norm + norm2) / 2.0;\n    bisect /= dot(norm, bisect);\n    vec2 shift = dy * bisect;\n    if (inner > 0.5) {\n        if (len < len2) {\n            if (abs(dy * (bisect.x * norm.y - bisect.y * norm.x)) > len) {\n                return dy * norm;\n            }\n        } else {\n            if (abs(dy * (bisect.x * norm2.y - bisect.y * norm2.x)) > len2) {\n                return dy * norm;\n            }\n        }\n    }\n    return dy * bisect;\n}\n\nvoid main(void){\n    vec2 pointA = (translationMatrix * vec3(aPoint1, 1.0)).xy;\n    vec2 pointB = (translationMatrix * vec3(aPoint2, 1.0)).xy;\n\n    vec2 xBasis = pointB - pointA;\n    float len = length(xBasis);\n    vec2 forward = xBasis / len;\n    vec2 norm = vec2(forward.y, -forward.x);\n\n    float type = floor(aVertexJoint / 16.0);\n    float vertexNum = aVertexJoint - type * 16.0;\n    float dx = 0.0, dy = 1.0;\n\n\n    vec2 avgDiag = (translationMatrix * vec3(1.0, 1.0, 0.0)).xy;\n    float avgScale = sqrt(dot(avgDiag, avgDiag) * 0.5);\n\n    float capType = floor(type / 32.0);\n    type -= capType * 32.0;\n\n    int styleId = int(aStyleId + 0.5);\n    float lineWidth = styleLine[styleId].x;\n    if (lineWidth < 0.0) {\n        lineWidth = -lineWidth;\n    } else {\n        lineWidth = lineWidth * avgScale;\n    }\n    lineWidth *= 0.5;\n    float lineAlignment = 2.0 * styleLine[styleId].y - 1.0;\n    vTextureId = styleTextureId[styleId];\n    vTextureCoord = vec2(0.0);\n\n    vec2 pos;\n\n    if (capType == CAP_ROUND) {\n        vertexNum += 4.0;\n        type = JOINT_CAP_ROUND;\n        capType = 0.0;\n    }\n\n    if (type == FILL) {\n        pos = pointA;\n        vDistance = vec4(0.0, -0.5, -0.5, 1.0);\n        vType = 0.0;\n\n        vec2 vTexturePixel;\n        vTexturePixel.x = dot(vec3(aPoint1, 1.0), styleMatrix[styleId * 2]);\n        vTexturePixel.y = dot(vec3(aPoint1, 1.0), styleMatrix[styleId * 2 + 1]);\n        vTextureCoord = vTexturePixel / samplerSize[int(vTextureId)];\n    } else if (type >= FILL_EXPAND && type < FILL_EXPAND + 7.5) {\n        // expand vertices\n        float flags = type - FILL_EXPAND;\n        float flag3 = floor(flags / 4.0);\n        float flag2 = floor((flags - flag3 * 4.0) / 2.0);\n        float flag1 = flags - flag3 * 4.0 - flag2 * 2.0;\n\n        vec2 prev = (translationMatrix * vec3(aPrev, 1.0)).xy;\n\n        if (vertexNum < 0.5) {\n            pos = prev;\n        } else if (vertexNum < 1.5) {\n            pos = pointA;\n        } else {\n            pos = pointB;\n        }\n        float len2 = length(aNext);\n        vec2 bisect = (translationMatrix * vec3(aNext, 0.0)).xy;\n        if (len2 > 0.01) {\n            bisect = normalize(bisect) * len2;\n        }\n\n        vec2 n1 = normalize(vec2(pointA.y - prev.y, -(pointA.x - prev.x)));\n        vec2 n2 = normalize(vec2(pointB.y - pointA.y, -(pointB.x - pointA.x)));\n        vec2 n3 = normalize(vec2(prev.y - pointB.y, -(prev.x - pointB.x)));\n\n        if (n1.x * n2.y - n1.y * n2.x < 0.0) {\n            n1 = -n1;\n            n2 = -n2;\n            n3 = -n3;\n        }\n\n        vDistance.w = 1.0;\n        pos += bisect * expand;\n\n        vDistance = vec4(16.0, 16.0, 16.0, -1.0);\n        if (flag1 > 0.5) {\n            vDistance.x = -dot(pos - prev, n1);\n        }\n        if (flag2 > 0.5) {\n            vDistance.y = -dot(pos - pointA, n2);\n        }\n        if (flag3 > 0.5) {\n            vDistance.z = -dot(pos - pointB, n3);\n        }\n        vDistance.xyz *= resolution;\n        vType = 2.0;\n    } else if (type >= BEVEL) {\n        float dy = lineWidth + expand;\n        float inner = 0.0;\n        if (vertexNum >= 1.5) {\n            dy = -dy;\n            inner = 1.0;\n        }\n\n        vec2 base, next, xBasis2, bisect;\n        float flag = 0.0;\n        float sign2 = 1.0;\n        if (vertexNum < 0.5 || vertexNum > 2.5 && vertexNum < 3.5) {\n            next = (translationMatrix * vec3(aPrev, 1.0)).xy;\n            base = pointA;\n            flag = type - floor(type / 2.0) * 2.0;\n            sign2 = -1.0;\n        } else {\n            next = (translationMatrix * vec3(aNext, 1.0)).xy;\n            base = pointB;\n            if (type >= MITER && type < MITER + 3.5) {\n                flag = step(MITER + 1.5, type);\n                // check miter limit here?\n            }\n        }\n        xBasis2 = next - base;\n        float len2 = length(xBasis2);\n        vec2 norm2 = vec2(xBasis2.y, -xBasis2.x) / len2;\n        float D = norm.x * norm2.y - norm.y * norm2.x;\n        if (D < 0.0) {\n            inner = 1.0 - inner;\n        }\n\n        norm2 *= sign2;\n\n        if (abs(lineAlignment) > 0.01) {\n            float shift = lineWidth * lineAlignment;\n            pointA += norm * shift;\n            pointB += norm * shift;\n            if (abs(D) < 0.01) {\n                base += norm * shift;\n            } else {\n                base += doBisect(norm, len, norm2, len2, shift, 0.0);\n            }\n        }\n\n        float collinear = step(0.0, dot(norm, norm2));\n\n        vType = 0.0;\n        float dy2 = -1000.0;\n        float dy3 = -1000.0;\n\n        if (abs(D) < 0.01 && collinear < 0.5) {\n            if (type >= ROUND && type < ROUND + 1.5) {\n                type = JOINT_CAP_ROUND;\n            }\n            //TODO: BUTT here too\n        }\n\n        if (vertexNum < 3.5) {\n            if (abs(D) < 0.01) {\n                pos = dy * norm;\n            } else {\n                if (flag < 0.5 && inner < 0.5) {\n                    pos = dy * norm;\n                } else {\n                    pos = doBisect(norm, len, norm2, len2, dy, inner);\n                }\n            }\n            if (capType >= CAP_BUTT && capType < CAP_ROUND) {\n                float extra = step(CAP_SQUARE, capType) * lineWidth;\n                vec2 back = -forward;\n                if (vertexNum < 0.5 || vertexNum > 2.5) {\n                    pos += back * (expand + extra);\n                    dy2 = expand;\n                } else {\n                    dy2 = dot(pos + base - pointA, back) - extra;\n                }\n            }\n            if (type >= JOINT_CAP_BUTT && type < JOINT_CAP_SQUARE + 0.5) {\n                float extra = step(JOINT_CAP_SQUARE, type) * lineWidth;\n                if (vertexNum < 0.5 || vertexNum > 2.5) {\n                    dy3 = dot(pos + base - pointB, forward) - extra;\n                } else {\n                    pos += forward * (expand + extra);\n                    dy3 = expand;\n                    if (capType >= CAP_BUTT) {\n                        dy2 -= expand + extra;\n                    }\n                }\n            }\n        } else if (type >= JOINT_CAP_ROUND && type < JOINT_CAP_ROUND + 1.5) {\n            if (inner > 0.5) {\n                dy = -dy;\n                inner = 0.0;\n            }\n            vec2 d2 = abs(dy) * vec2(-norm.y, norm.x);\n            if (vertexNum < 4.5) {\n                dy = -dy;\n                pos = dy * norm;\n            } else if (vertexNum < 5.5) {\n                pos = dy * norm;\n            } else if (vertexNum < 6.5) {\n                pos = dy * norm + d2;\n            } else {\n                dy = -dy;\n                pos = dy * norm + d2;\n            }\n            dy = -0.5;\n            dy2 = pos.x;\n            dy3 = pos.y;\n            vType = 3.0;\n        } else if (abs(D) < 0.01) {\n            pos = dy * norm;\n        } else {\n            if (type >= ROUND && type < ROUND + 1.5) {\n                if (inner > 0.5) {\n                    dy = -dy;\n                    inner = 0.0;\n                }\n                if (vertexNum < 4.5) {\n                    pos = doBisect(norm, len, norm2, len2, -dy, 1.0);\n                } else if (vertexNum < 5.5) {\n                    pos = dy * norm;\n                } else if (vertexNum > 7.5) {\n                    pos = dy * norm2;\n                } else {\n                    pos = doBisect(norm, len, norm2, len2, dy, 0.0);\n                    float d2 = abs(dy);\n                    if (length(pos) > abs(dy) * 1.5) {\n                        if (vertexNum < 6.5) {\n                            pos.x = dy * norm.x - d2 * norm.y;\n                            pos.y = dy * norm.y + d2 * norm.x;\n                        } else {\n                            pos.x = dy * norm2.x + d2 * norm2.y;\n                            pos.y = dy * norm2.y - d2 * norm2.x;\n                        }\n                    }\n                }\n                vec2 norm3 = normalize(norm - norm2);\n                dy = pos.x * norm3.y - pos.y * norm3.x - 3.0;\n                dy2 = pos.x;\n                dy3 = pos.y;\n                vType = 3.0;\n            } else {\n                if (type >= MITER && type < MITER + 3.5) {\n                    if (inner > 0.5) {\n                        dy = -dy;\n                        inner = 0.0;\n                    }\n                    float sign = step(0.0, dy) * 2.0 - 1.0;\n                    pos = doBisect(norm, len, norm2, len2, dy, 0.0);\n                    if (length(pos) > abs(dy) * MITER_LIMIT) {\n                        type = BEVEL;\n                    } else {\n                        if (vertexNum < 4.5) {\n                            dy = -dy;\n                            pos = doBisect(norm, len, norm2, len2, dy, 1.0);\n                        } else if (vertexNum < 5.5) {\n                            pos = dy * norm;\n                        } else if (vertexNum > 6.5) {\n                            pos = dy * norm2;\n                            // dy = ...\n                        }\n                    }\n                    vType = 1.0;\n                    dy = -sign * dot(pos, norm);\n                    dy2 = -sign * dot(pos, norm2);\n                }\n                if (type >= BEVEL && type < BEVEL + 1.5) {\n                    if (inner < 0.5) {\n                        dy = -dy;\n                        inner = 1.0;\n                    }\n                    vec2 norm3 = normalize((norm + norm2) / 2.0);\n                    if (vertexNum < 4.5) {\n                        pos = doBisect(norm, len, norm2, len2, dy, 1.0);\n                        dy2 = -abs(dot(pos + dy * norm, norm3));\n                    } else {\n                        dy2 = 0.0;\n                        dy = -dy;\n                        if (vertexNum < 5.5) {\n                            pos = dy * norm;\n                        } else {\n                            pos = dy * norm2;\n                        }\n                    }\n                }\n            }\n        }\n\n        pos += base;\n        vDistance = vec4(dy, dy2, dy3, lineWidth) * resolution;\n        vTravel = aTravel * avgScale + dot(pos - pointA, vec2(-norm.y, norm.x));\n    }\n\n    gl_Position = vec4((projectionMatrix * vec3(pos, 1.0)).xy, 0.0, 1.0);\n\n    vColor = aColor * tint;\n}`;\n\nconst smoothFrag = `\nvarying vec4 vColor;\nvarying vec4 vDistance;\nvarying float vType;\nvarying float vTextureId;\nvarying vec2 vTextureCoord;\nvarying float vTravel;\nuniform sampler2D uSamplers[%MAX_TEXTURES%];\n\nvoid main(void){\n    float alpha = 1.0;\n    float lineWidth = vDistance.w;\n    if (vType < 0.5) {\n        float left = max(vDistance.x - 0.5, -vDistance.w);\n        float right = min(vDistance.x + 0.5, vDistance.w);\n        float near = vDistance.y - 0.5;\n        float far = min(vDistance.y + 0.5, 0.0);\n        float top = vDistance.z - 0.5;\n        float bottom = min(vDistance.z + 0.5, 0.0);\n        alpha = max(right - left, 0.0) * max(bottom - top, 0.0) * max(far - near, 0.0);\n    } else if (vType < 1.5) {\n        float a1 = clamp(vDistance.x + 0.5 - lineWidth, 0.0, 1.0);\n        float a2 = clamp(vDistance.x + 0.5 + lineWidth, 0.0, 1.0);\n        float b1 = clamp(vDistance.y + 0.5 - lineWidth, 0.0, 1.0);\n        float b2 = clamp(vDistance.y + 0.5 + lineWidth, 0.0, 1.0);\n        alpha = a2 * b2 - a1 * b1;\n    } else if (vType < 2.5) {\n        alpha *= max(min(vDistance.x + 0.5, 1.0), 0.0);\n        alpha *= max(min(vDistance.y + 0.5, 1.0), 0.0);\n        alpha *= max(min(vDistance.z + 0.5, 1.0), 0.0);\n    } else {\n        float dist2 = sqrt(dot(vDistance.yz, vDistance.yz));\n        float rad = vDistance.w;\n        float left = max(dist2 - 0.5, -rad);\n        float right = min(dist2 + 0.5, rad);\n        // TODO: something has to be done about artifact at vDistance.x far side\n        alpha = 1.0 - step(vDistance.x, 0.0) * (1.0 - max(right - left, 0.0));\n    }\n\n    vec4 texColor;\n    float textureId = floor(vTextureId+0.5);\n    %FOR_LOOP%\n\n    gl_FragColor = vColor * texColor * alpha;\n}\n`;\n\nclass SmoothGraphicsProgram extends core.Program\n{\n    \n\n    constructor(settings,\n        vert = smoothVert,\n        frag = smoothFrag,\n        _uniforms = {})\n    {\n        const { maxStyles, maxTextures } = settings;\n\n        vert = vert.replace(/%MAX_TEXTURES%/gi, `${maxTextures}`)\n            .replace(/%MAX_STYLES%/gi, `${maxStyles}`);\n        frag = frag.replace(/%MAX_TEXTURES%/gi, `${maxTextures}`)\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            .replace(/%FOR_LOOP%/gi, SmoothGraphicsShader.generateSampleSrc(maxTextures));\n\n        super(vert, frag);\n        this.settings = settings;\n    }\n}\n\nclass SmoothGraphicsShader extends core.Shader\n{\n    \n\n    constructor(settings, prog = new SmoothGraphicsProgram(settings), uniforms = {})\n    {\n        const { maxStyles, maxTextures } = settings;\n        const sampleValues = new Int32Array(maxTextures);\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            sampleValues[i] = i;\n        }\n        super(prog, (Object ).assign(uniforms, {\n            styleMatrix: new Float32Array(6 * maxStyles),\n            styleTextureId: new Float32Array(maxStyles),\n            styleLine: new Float32Array(2 * maxStyles),\n            samplerSize: new Float32Array(2 * maxTextures),\n            uSamplers: sampleValues,\n            tint: new Float32Array([1, 1, 1, 1]),\n            resolution: 1,\n            expand: 1,\n        }));\n        this.settings = settings;\n    }\n\n    static generateSampleSrc(maxTextures)\n    {\n        let src = '';\n\n        src += '\\n';\n        src += '\\n';\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i > 0)\n            {\n                src += '\\nelse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if(textureId < ${i}.5)`;\n            }\n\n            src += '\\n{';\n            src += `\\n\\ttexColor = texture2D(uSamplers[${i}], vTextureCoord);`;\n            src += '\\n}';\n        }\n\n        src += '\\n';\n        src += '\\n';\n\n        return src;\n    }\n}\n\nconst settings = {\n    LINE_SCALE_MODE: exports.LINE_SCALE_MODE.NORMAL,\n    SHADER_MAX_STYLES: 24,\n    SHADER_MAX_TEXTURES: 4,\n};\n\nconst { BezierUtils, QuadraticUtils, ArcUtils } = graphics.graphicsUtils;\n\nconst temp = new Float32Array(3);\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS = {};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass SmoothGraphics extends display.Container\n{\n    static __initStatic() {this._TEMP_POINT = new math.Point();}\n\n    \n    \n    \n    \n\n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n\n    \n    \n\n     get geometry()\n    {\n        return this._geometry;\n    }\n\n    constructor(geometry = null)\n    {\n        super();\n\n        this._geometry = geometry || new SmoothGraphicsGeometry();\n        this._geometry.refCount++;\n\n        this.shader = null;\n\n        this.shaderSettings = {\n            maxStyles: settings.SHADER_MAX_STYLES,\n            maxTextures: settings.SHADER_MAX_TEXTURES,\n        };\n\n        this.state = core.State.for2d();\n\n        this._fillStyle = new FillStyle();\n\n        this._lineStyle = new LineStyle();\n\n        this._matrix = null;\n\n        this._holeMode = false;\n\n        this.currentPath = null;\n\n        this.batches = [];\n\n        this.batchTint = -1;\n\n        this.batchDirty = -1;\n\n        this.vertexData = null;\n\n        this.pluginName = 'smooth';\n\n        this._transformID = -1;\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = constants.BLEND_MODES.NORMAL;\n    }\n\n     clone()\n    {\n        this.finishPoly();\n\n        return new SmoothGraphics(this._geometry);\n    }\n\n     set blendMode(value)\n    {\n        this.state.blendMode = value;\n    }\n\n     get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n     get tint()\n    {\n        return this._tint;\n    }\n\n     set tint(value)\n    {\n        this._tint = value;\n    }\n\n     get fill()\n    {\n        return this._fillStyle;\n    }\n\n     get line()\n    {\n        return this._lineStyle;\n    }\n\n    \n\n\n\n     lineStyle(options = null,\n        color = 0x0, alpha = 1, alignment = 0.5, scaleMode = settings.LINE_SCALE_MODE)\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            if (typeof scaleMode === 'boolean')\n            {\n                scaleMode = scaleMode ? exports.LINE_SCALE_MODE.NONE : exports.LINE_SCALE_MODE.NORMAL;\n            }\n            options = { width: options, color, alpha, alignment, scaleMode } ;\n        }\n        else\n        {\n            const native = (options ).native;\n\n            if (native !== undefined)\n            {\n                options.scaleMode = native ? exports.LINE_SCALE_MODE.NONE : exports.LINE_SCALE_MODE.NORMAL;\n            }\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n     lineTextureStyle(options)\n    {\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: core.Texture.WHITE,\n            color: (options && options.texture) ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: graphics.LINE_CAP.BUTT,\n            join: graphics.LINE_JOIN.MITER,\n            miterLimit: 10,\n            shader: null,\n            scaleMode: settings.LINE_SCALE_MODE,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n     startPoly()\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new math.Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new math.Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    finishPoly()\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n     moveTo(x, y)\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n     lineTo(x, y)\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n     _initCurve(x = 0, y = 0)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n     quadraticCurveTo(cpX, cpY, toX, toY)\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n     bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n     arcTo(x1, y1, x2, y2, radius)\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n     arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false)\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += math.PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += math.PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this._geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            ;\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n     beginFill(color = 0, alpha = 1, smooth = false)\n    {\n        return this.beginTextureFill({ texture: core.Texture.WHITE, color, alpha, smooth });\n    }\n\n    beginTextureFill(options)\n    {\n        // Apply defaults\n        options = Object.assign({\n            texture: core.Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n            smooth: false,\n        }, options) ;\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n     endFill()\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n     drawRect(x, y, width, height)\n    {\n        return this.drawShape(new math.Rectangle(x, y, width, height));\n    }\n\n     drawRoundedRect(x, y, width, height, radius)\n    {\n        return this.drawShape(new math.RoundedRectangle(x, y, width, height, radius));\n    }\n\n     drawCircle(x, y, radius)\n    {\n        return this.drawShape(new math.Circle(x, y, radius));\n    }\n\n     drawEllipse(x, y, width, height)\n    {\n        return this.drawShape(new math.Ellipse(x, y, width, height));\n    }\n\n    \n\n\n     drawPolygon(...path)\n    {\n        let points;\n        let closeStroke = true;// !!this._fillStyle;\n\n        const poly = path[0] ;\n\n        // check if data has points..\n        if (poly.points)\n        {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else if (Array.isArray(path[0]))\n        {\n            points = path[0];\n        }\n        else\n        {\n            points = path;\n        }\n\n        const shape = new math.Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n     drawShape(shape)\n    {\n        if (!this._holeMode)\n        {\n            this._geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n     clear()\n    {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n     isFastRect()\n    {\n        const data = this._geometry.graphicsData;\n\n        return data.length === 1\n            && data[0].shape.type === math.SHAPES.RECT\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n\n     _renderCanvas(renderer)\n    {\n        (graphics.Graphics.prototype )._renderCanvas.call(this, renderer);\n    }\n\n     _render(renderer)\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n        const hasuint32 = renderer.context.supports.uint32Indices;\n        // batch part..\n        // batch it!\n\n        geometry.checkInstancing(renderer.geometry.hasInstance, hasuint32);\n\n        geometry.updateBatches(this.shaderSettings);\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n     _populateBatches()\n    {\n        const geometry = this._geometry;\n        const blendMode = this.blendMode;\n        const len = geometry.batches.length;\n\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0; i < len; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            // const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n            //     gI.attribStart * 4 * 2,\n            //     gI.attribSize * 2);\n\n            // const indices = new Uint16Array(geometry.indicesUint16.buffer,\n            //     gI.start * 2,\n            //     gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                // indices,\n                // uvs,\n                _batchRGB: utils.hex2rgb(color) ,\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1\n            };\n\n            this.batches[i] = batch;\n        }\n    }\n\n     _renderBatched(renderer)\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n     _renderDirect(renderer)\n    {\n        const directShader = this._resolveDirectShader(renderer);\n        let shader = directShader;\n\n        const geometry = this._geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        uniforms.resolution = renderer.renderTexture.current\n            ? renderer.renderTexture.current.resolution : renderer.resolution;\n\n        const projTrans = renderer.projection.transform;\n\n        if (projTrans)\n        {\n            // only uniform scale is supported!\n            const scale = Math.sqrt(projTrans.a * projTrans.a + projTrans.b * projTrans.b);\n\n            uniforms.resolution *= scale;\n        }\n\n        uniforms.expand = (renderer.options.antialias ? 2 : 1) / uniforms.resolution;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        shader = null;\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            // TODO: refactor it to another class, that fills uniforms of this shader\n            const drawCall = geometry.drawCalls[i];\n\n            const shaderChange = shader !== drawCall.shader;\n\n            if (shaderChange)\n            {\n                shader = drawCall.shader;\n                if (shader)\n                {\n                    shader.uniforms.translationMatrix = this.transform.worldTransform;\n                    if (shader.uniforms.tint)\n                    {\n                        shader.uniforms.tint[0] = uniforms.tint[0];\n                        shader.uniforms.tint[1] = uniforms.tint[1];\n                        shader.uniforms.tint[2] = uniforms.tint[2];\n                        shader.uniforms.tint[3] = uniforms.tint[3];\n                    }\n                }\n            }\n\n            const { texArray, styleArray, size, start } = drawCall;\n            const groupTextureCount = texArray.count;\n            const shaderHere = shader || directShader;\n\n            const texs = shaderHere.uniforms.styleTextureId;\n            const mats = shaderHere.uniforms.styleMatrix;\n            const lines = shaderHere.uniforms.styleLine;\n\n            for (let i = 0; i < styleArray.count; i++)\n            {\n                texs[i] = styleArray.textureIds[i];\n                lines[i * 2] = styleArray.lines[i * 2];\n                lines[(i * 2) + 1] = styleArray.lines[(i * 2) + 1];\n                const m = styleArray.matrices[i];\n\n                mats[i * 6] = m.a;\n                mats[(i * 6) + 1] = m.c;\n                mats[(i * 6) + 2] = m.tx;\n                mats[(i * 6) + 3] = m.b;\n                mats[(i * 6) + 4] = m.d;\n                mats[(i * 6) + 5] = m.ty;\n            }\n            const sizes = shaderHere.uniforms.samplerSize;\n\n            for (let i = 0; i < groupTextureCount; i++)\n            {\n                sizes[i * 2] = texArray.elements[i].width;\n                sizes[(i * 2) + 1] = texArray.elements[i].height;\n            }\n\n            renderer.shader.bind(shaderHere);\n            if (shaderChange)\n            {\n                renderer.geometry.bind(geometry);\n            }\n\n            // TODO: bind styles!\n            for (let j = 0; j < groupTextureCount; j++)\n            {\n                renderer.texture.bind(texArray.elements[j], j);\n            }\n\n            // bind the geometry...\n            renderer.geometry.draw(constants.DRAW_MODES.TRIANGLES, size, start);\n        }\n    }\n\n     _resolveDirectShader(_renderer)\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                DEFAULT_SHADERS[pluginName] = new SmoothGraphicsShader(this.shaderSettings);\n            }\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n     _calculateBounds()\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n     containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, SmoothGraphics._TEMP_POINT);\n\n        return this._geometry.containsPoint(SmoothGraphics._TEMP_POINT);\n    }\n\n     calculateTints()\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = utils.hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                    + (color & 0xff00)\n                    + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n     calculateVertices()\n    {\n        const wtID = this.transform._worldID;\n\n        if (this._transformID === wtID)\n        {\n            return;\n        }\n\n        this._transformID = wtID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this._geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n     closePath()\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n        }\n\n        return this;\n    }\n\n     setMatrix(matrix)\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n     beginHole()\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n     endHole()\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n     destroy(options)\n    {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0)\n        {\n            this._geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n\n    drawStar(x, y,\n        points, radius, innerRadius, rotation = 0)\n    {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.drawPolygon(new Star(x, y, points, radius, innerRadius, rotation) );\n    }\n} SmoothGraphics.__initStatic();\n\nclass Star extends math.Polygon\n{\n    constructor(x, y, points, radius, innerRadius, rotation = 0)\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = math.PI_2 / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        super(polygon);\n    }\n}\n\nconst dashFrag = `\nvarying vec4 vColor;\nvarying vec4 vDistance;\nvarying float vType;\nvarying float vTextureId;\nvarying vec2 vTextureCoord;\nvarying float vTravel;\nuniform sampler2D uSamplers[%MAX_TEXTURES%];\nuniform float dash;\nuniform float gap;\n\nvoid main(void){\n    float alpha = 1.0;\n    float lineWidth = vDistance.w;\n    if (vType < 0.5) {\n        float left = max(vDistance.x - 0.5, -vDistance.w);\n        float right = min(vDistance.x + 0.5, vDistance.w);\n        float near = vDistance.y - 0.5;\n        float far = min(vDistance.y + 0.5, 0.0);\n        float top = vDistance.z - 0.5;\n        float bottom = min(vDistance.z + 0.5, 0.0);\n        alpha = max(right - left, 0.0) * max(bottom - top, 0.0) * max(far - near, 0.0);\n    } else if (vType < 1.5) {\n        float a1 = clamp(vDistance.x + 0.5 - lineWidth, 0.0, 1.0);\n        float a2 = clamp(vDistance.x + 0.5 + lineWidth, 0.0, 1.0);\n        float b1 = clamp(vDistance.y + 0.5 - lineWidth, 0.0, 1.0);\n        float b2 = clamp(vDistance.y + 0.5 + lineWidth, 0.0, 1.0);\n        alpha = a2 * b2 - a1 * b1;\n    } else if (vType < 2.5) {\n        alpha *= max(min(vDistance.x + 0.5, 1.0), 0.0);\n        alpha *= max(min(vDistance.y + 0.5, 1.0), 0.0);\n        alpha *= max(min(vDistance.z + 0.5, 1.0), 0.0);\n    } else {\n        float dist2 = sqrt(dot(vDistance.yz, vDistance.yz));\n        float rad = vDistance.w;\n        float left = max(dist2 - 0.5, -rad);\n        float right = min(dist2 + 0.5, rad);\n        // TODO: something has to be done about artifact at vDistance.x far side\n        alpha = 1.0 - step(vDistance.x, 0.0) * (1.0 - max(right - left, 0.0));\n    }\n\n    if (dash + gap > 1.0)\n    {\n        float travel = mod(vTravel + gap * 0.5, dash + gap) - (gap * 0.5);\n        float left = max(travel - 0.5, -0.5);\n        float right = min(travel + 0.5, gap + 0.5);\n        alpha *= max(0.0, right - left);\n    }\n\n    vec4 texColor;\n    float textureId = floor(vTextureId+0.5);\n    %FOR_LOOP%\n\n    gl_FragColor = vColor * texColor * alpha;\n}\n`;\n\n\n\n\n\n\nclass DashLineShader extends SmoothGraphicsShader\n{\n    constructor(dashParams)\n    {\n        const settings = { maxStyles: 16, maxTextures: 1 };\n\n        super(settings, new SmoothGraphicsProgram(settings, undefined, dashFrag),\n            dashParams || {\n                dash: 5.0,\n                gap: 8.0\n            });\n    }\n}\n\nexports.BATCH_POOL = BATCH_POOL;\nexports.BatchDrawCall = BatchDrawCall;\nexports.BatchPart = BatchPart;\nexports.BatchStyleArray = BatchStyleArray;\nexports.BuildData = BuildData;\nexports.CircleBuilder = CircleBuilder;\nexports.DRAW_CALL_POOL = DRAW_CALL_POOL;\nexports.DashLineShader = DashLineShader;\nexports.FILL_COMMANDS = FILL_COMMANDS;\nexports.FillStyle = FillStyle;\nexports.LineStyle = LineStyle;\nexports.PolyBuilder = PolyBuilder;\nexports.RectangleBuilder = RectangleBuilder;\nexports.RoundedRectangleBuilder = RoundedRectangleBuilder;\nexports.SegmentPacker = SegmentPacker;\nexports.SmoothGraphics = SmoothGraphics;\nexports.SmoothGraphicsData = SmoothGraphicsData;\nexports.SmoothGraphicsGeometry = SmoothGraphicsGeometry;\nexports.SmoothGraphicsProgram = SmoothGraphicsProgram;\nexports.SmoothGraphicsShader = SmoothGraphicsShader;\nexports.Star = Star;\nexports.matrixEquals = matrixEquals;\nexports.settings = settings;\n//# sourceMappingURL=pixi-graphics-smooth.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","matrixEquals","th","matrix","eps","Math","abs","a","b","c","d","tx","ty","quadraticBezierCurve","fromX","fromY","cpX","cpY","toX","toY","out","xb","yb","i","j","n","xa","ya","push","x","y","Object","defineProperty","value","math","core","constants","graphics","utils","display","BatchStyleArray","constructor","textureIds","matrices","lines","count","clear","add","textureId","lineWidth","lineAlignment","settings","maxStyles","BatchDrawCall","texArray","BatchTextureArray","styleArray","shader","blend","BLEND_MODES","NORMAL","TICK","size","start","data","begin","BaseTexture","_globalBatch","check","texture","baseTexture","_batchEnabled","maxTextures","res","loc","_batchLocation","Matrix","IDENTITY","elements","BatchPart","reset","style","startIndex","attribStart","jointEnd","end","endIndex","endAttrib","attribSize","styleId","rgba","FillStyle","toJSON","copyTo","clone","obj","color","alpha","visible","smooth","matrixTex","packLineWidth","Texture","WHITE","destroy","getTextureMatrix","tex","frame","width","height","copyFrom","translate","Number","LINE_SCALE_MODE","NONE","LineStyle","alignment","cap","join","miterLimit","scaleMode","LINE_CAP","BUTT","LINE_JOIN","MITER","BuildData","prototype","__init","call","__init2","__init3","__init4","__init5","verts","joints","vertexSize","indexSize","closePointEps","length","JOINT_TYPE","FILL","JOINT_BEVEL","JOINT_MITER","JOINT_ROUND","JOINT_CAP_BUTT","JOINT_CAP_SQUARE","JOINT_CAP_ROUND","FILL_EXPAND","CAP_BUTT","CAP_SQUARE","CAP_ROUND","CAP_BUTT2","SegmentPacker","__initStatic","vertsByJoint","strideFloats","updateBufferSize","jointStart","jointLen","triangles","target","foundTriangle","prevCap","joint","vs","max","bufferPos","indexPos","beginPack","buildData","bufFloat","bufUint","indices","endPack","packInterleavedGeometry","lineStyle","bufPos","indPos","index","y1","x2","y2","prevX","prevY","nextY","hasTriangle","travel","fullJoint","x1","bis","dist","sqrt","nextX","SmoothGraphicsData","shape","fillStyle","type","points","holes","closeStroke","clearBuild","clearPath","strokeLen","strokeStart","fillLen","fillStart","fillAA","capType","SQUARE","ROUND","goodJointType","BEVEL","jointType","CircleBuilder","path","graphicsData","_target","circleData","SHAPES","CIRC","radius","ellipseData","totalSegs","floor","seg","PI","sin","cos","fill","vertPos","cx","cy","rad","cur","next","center","line","len","RectangleBuilder","rectData","RoundedRectangleBuilder","rrectData","min","earcut","tempArr","PolyBuilder","slice","eps2","firstPoint","Point","lastPoint","closedShape","newLen","flag","x3","y3","pop","dx","dy","endJoint","dx3","dy3","dx2","dy2","jointAdd","holeArray","hole","concat","finish","ind1","ind2","ind","prev","nx1","ny1","nx2","ny2","D1","D2","bx","by","D","j1","FILL_COMMANDS","POLY","ELIP","RECT","RREC","BATCH_POOL","DRAW_CALL_POOL","tmpPoint","tmpBounds","Bounds","SmoothGraphicsGeometry","Geometry","BATCHABLE_SIZE","indicesUint16","initAttributes","_static","_buffer","Buffer","_bufferFloats","Float32Array","_bufferUint","Uint32Array","_indexBuffer","addAttribute","TYPES","FLOAT","UNSIGNED_BYTE","addIndex","dirty","cacheDirty","batchDirty","clearDirty","drawCalls","batches","shapeBatchIndex","shapeBuildIndex","_bounds","boundsDirty","boundsPadding","batchable","packer","packSize","pack32index","checkInstancing","instanced","allow32Indices","calculateBounds","invalidate","batchPart","drawShape","drawHole","lastShape","indexBuffer","containsPoint","point","applyInverse","contains","hitHole","updatePoints","update","updateBuild","command","transformPoints","processHoles","updateBatches","shaderSettings","validateBatching","currentStyle","attribOld","indexOld","wrapMode","WRAP_MODES","REPEAT","_compareStyles","isBatchable","packBatches","buildDrawCalls","updatePack","buffer","floatsSize","arrBuf","ArrayBuffer","Uint16Array","styleA","styleB","l","valid","batch","currentGroup","batchData","mat","premultiplyTint","bounds","curMatrix","nextMatrix","isEmpty","addBoundsMatrix","addFramePad","rect","circle","ellipse","addVerticesMatrix","poly","pad","SmoothGraphicsProgram","Program","vert","smoothVert","frag","smoothFrag","_uniforms","replace","SmoothGraphicsShader","generateSampleSrc","Shader","prog","uniforms","sampleValues","Int32Array","assign","styleMatrix","styleTextureId","styleLine","samplerSize","uSamplers","tint","resolution","expand","src","SHADER_MAX_STYLES","SHADER_MAX_TEXTURES","BezierUtils","QuadraticUtils","ArcUtils","graphicsUtils","temp","DEFAULT_SHADERS","SmoothGraphics","Container","_TEMP_POINT","_geometry","geometry","refCount","state","State","for2d","_fillStyle","_lineStyle","_matrix","_holeMode","currentPath","batchTint","vertexData","pluginName","_transformID","blendMode","finishPoly","_tint","options","native","undefined","lineTextureStyle","startPoly","invert","Polygon","moveTo","lineTo","_initCurve","quadraticCurveTo","curveTo","bezierCurveTo","cpX2","cpY2","arcTo","result","startAngle","endAngle","anticlockwise","arc","PI_2","startX","startY","yDiff","xDiff","beginFill","beginTextureFill","endFill","drawRect","Rectangle","drawRoundedRect","RoundedRectangle","drawCircle","Circle","drawEllipse","Ellipse","drawPolygon","Array","isArray","_boundsID","isFastRect","_renderCanvas","renderer","Graphics","_render","hasInstance","context","supports","uint32Indices","_populateBatches","_renderBatched","flush","_renderDirect","gI","_batchRGB","hex2rgb","_tintRGB","_texture","worldAlpha","setObjectRenderer","plugins","calculateVertices","calculateTints","render","directShader","_resolveDirectShader","translationMatrix","transform","worldTransform","renderTexture","current","projTrans","projection","scale","antialias","bind","set","drawCall","shaderChange","groupTextureCount","shaderHere","texs","mats","m","sizes","draw","DRAW_MODES","TRIANGLES","_renderer","_calculateBounds","minX","minY","maxX","maxY","addFrame","tintRGB","wtID","_worldID","wt","closePath","setMatrix","beginHole","endHole","dispose","drawStar","innerRadius","rotation","Star","delta","polygon","r","angle","DashLineShader","dashParams","dashFrag","dash","gap"]
}
