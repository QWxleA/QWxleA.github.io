{"version":3,"sources":["frontend/db/query_custom.cljs"],"mappings":";AAWA,+DAAA,/DAAOA,sIACJC;AADH,AAEE,OAACC,sBACA,WAAKC;AAAL,AACE,GAAI,gCAAA,gIAAA,9JAAK,AAACK,sBAAML,UACL,6CAAA,AAAA,7CAACM,qGAAQ,AAACC,gBAAMP,WAChB,6CAAA,AAAA,7CAACM,kGAAM,AAACE,iBAAOR,SACf,6CAAA,AAAA,7CAACM,0LAAO,8CAAA,9CAACG,4CAAIT;AAHxB,OAAAC,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,wDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,mCAAA,KAAA,IAAA,vCAIiBM;;AACfV;;GACJF;;AAEH;;;8CAAA,sDAAAa,pGAAOI;AAAP,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;cAAAA,VAEsBK;YAFtB,AAAAH,4CAAAF,eAAA,nEAEWI;AAFX,AAGE,IAAAE,aAAyB,AAACG,wCAA4BL;IAAtDE,iBAAA,AAAAL,4BAAAK;YAAA,AAAAJ,4CAAAI,eAAA,nEAAcC;UAAd,AAAAL,4CAAAI,eAAA,jEAAoBE;IACdE,cAAY,AAACC,0CAAiCJ,MAAM,cAAA,eAAIK,fAAsBC,dAAKC;AADzF,AAEE,GAAI,AAACxB,cAAIoB;AACP,GAAI,6CAAA,AAAA,7CAAChB,gGAAK,AAACqB,eAAKP;AAEd,8DAAA,vDAACQ,+CAAOX,gEAEA,WAAKY;AAAL,AACE,OAACC,8CAAM,AAACC,cAAIF,QAEL,2BAAA,1BAAK,AAACG,gBAAMH,eACZ,cAAA,qHAAK,AAACI,6CAAKT,kCAAsBF,nJAC5B,AAACY,6CAAK,AAACP,eAAKE,7GAEZM,dACAJ;;;oGAElBd,/CACA,uDAAA,vDAACW,+GACO,WAAKQ,/KAIb,OAACN;AAJO,AACE,GAAI,2CAAA,3CAACO,0BAAU,AAACX,cAAIU;AAClB,2DAAA,kDAAA,mFAAA,AAAA,zLAACE,kDAAyCF;;AAC1C,sDAAA,mFAAA,kDAAA,AAAA,oDAAA,AAAA,xOAACF,6CAAKE;;IAClB,uDAAc,AAACH,6CAAKT,kCAAsBF;;;AAChDL;;;AAEN,AAAA;;;;wCAAA,gDAAAsB,xFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAMD,iFAGFzB;AAHJ,AAIG,iFAAA,1EAAC2B,oEAAa3B;;;AAJjB,CAAA,sEAAA,tEAAMyB,iFAKFzB,MAAM4B;AALV,AAMG,OAACD,oEAAa,AAACE,kCAAwB7B,MAAM4B;;;AANhD,CAAA,sEAAA,tEAAMH,iFAOFK,KAAK9B,MAAM4B;AAPf,AAQG,IAAMG,qBAAO,AAAClD,6DAA+BmB;AAA7C,AACE,GAAI,EAAI,AAACX,sBAAM,AAAA,sFAAQ0C,0BACf,gDAAA,hDAACC,oGAAW,AAACzC,gBAAM,AAAA,sFAAQwC;AACjC,OAACE,mCAAuBH,KAAKC,mBAAOH;;AACpC,OAACM,oCAAwBJ,KAAK,AAAC/B,4CAAmBgC,oBAAQH;;;;AAZjE,CAAA,gEAAA,hEAAMH;;AAAN","names":["frontend.db.query-custom/replace-star-with-block-attrs!","l","clojure.walk/postwalk","f","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/list?","cljs.core._EQ_","cljs.core/first","cljs.core/second","cljs.core.nth","frontend.db.model/block-attrs","p__43183","map__43184","cljs.core/--destructure-map","cljs.core.get","frontend.db.query-custom/add-rules-to-query","query","query-m","map__43185","where","in","frontend.util.datalog/query-vec->map","rules-found","frontend.util.datalog/find-rules-in-where","frontend.db.rules/query-dsl-rules","cljs.core/keys","cljs.core/set","cljs.core/last","cljs.core.update","inputs","cljs.core.assoc","cljs.core/vec","cljs.core/count","cljs.core.mapv","cljs.core.into","cljs.core.distinct","q","cljs.core/contains?","frontend.util.datalog/add-to-end-of-query-section","var_args","G__43187","frontend.db.query-custom/custom-query","js/Error","frontend.db.query_custom.custom_query","query-opts","frontend.state/get-current-repo","repo","query'","cljs.core.not_EQ_","frontend.db.query-dsl/custom-query","frontend.db.query-react/react-query"],"sourcesContent":["(ns frontend.db.query-custom\n  \"Handles executing custom queries a.k.a. advanced queries\"\n  (:require [frontend.state :as state]\n            [frontend.db.query-react :as query-react]\n            [frontend.db.query-dsl :as query-dsl]\n            [frontend.db.model :as model]\n            [frontend.db.rules :as rules]\n            [frontend.util.datalog :as datalog-util]\n            [clojure.walk :as walk]))\n\n;; FIXME: what if users want to query other attributes than block-attrs?\n(defn- replace-star-with-block-attrs!\n  [l]\n  (walk/postwalk\n   (fn [f]\n     (if (and (list? f)\n                (= 'pull (first f))\n                (= '?b (second f))\n                (= '[*] (nth f 2)))\n       `(~'pull ~'?b ~model/block-attrs)\n       f))\n   l))\n\n(defn- add-rules-to-query\n  \"Searches query's :where for rules and adds them to query if used\"\n  [{:keys [query] :as query-m}]\n  (let [{:keys [where in]} (datalog-util/query-vec->map query)\n        rules-found (datalog-util/find-rules-in-where where (-> rules/query-dsl-rules keys set))]\n    (if (seq rules-found)\n      (if (= '% (last in))\n        ;; Add to existing :inputs rules\n        (update query-m\n                :inputs\n                (fn [inputs]\n                  (assoc (vec inputs)\n                         ;; last position is rules\n                         (dec (count inputs))\n                         (->> (mapv rules/query-dsl-rules rules-found)\n                              (into (last inputs))\n                              ;; user could give rules that we already have\n                              distinct\n                              vec))))\n        ;; Add new rules\n        (-> query-m\n            (update :query\n                    (fn [q]\n                      (if (contains? (set q) :in)\n                        (datalog-util/add-to-end-of-query-section q :in ['%])\n                        (into q [:in '$ '%]))))\n            (assoc :rules (mapv rules/query-dsl-rules rules-found))))\n      query-m)))\n\n(defn custom-query\n  \"Executes a datalog query through query-react, given either a regular datalog\n  query or a simple query\"\n  ([query]\n   (custom-query query {}))\n  ([query query-opts]\n   (custom-query (state/get-current-repo) query query-opts))\n  ([repo query query-opts]\n   (let [query' (replace-star-with-block-attrs! query)]\n     (if (or (list? (:query query'))\n             (not= :find (first (:query query')))) ; dsl query\n       (query-dsl/custom-query repo query' query-opts)\n       (query-react/react-query repo (add-rules-to-query query') query-opts)))))\n"]}