{"version":3,"sources":["frontend/fs/watcher_handler.cljs"],"mappings":"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","names":["frontend.fs.watcher-handler/set-missing-block-ids!","content","seq__63963","cljs.core/seq","chunk__63964","count__63965","i__63966","temp__5720__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","block-id","frontend.handler.extract/extract-all-block-refs","block","e63996","e64000","frontend.db.model/get-block-by-uuid","js/Error","_e","id-property","cljs.core._EQ_","frontend.handler.editor/set-block-property!","frontend.fs.watcher-handler/handle-add-and-change!","repo","path","db-content","mtime","backup?","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","_","electron.ipc.ipc","frontend.config/get-local-dir","frontend.handler.file/alter-file","frontend.db/set-file-last-modified-at!","p__64020","map__64021","cljs.core/--destructure-map","cljs.core.get","frontend.fs.watcher-handler/handle-changed!","type","dir","stat","payload","map__64022","logseq.graph-parser.util/path-normalize","frontend.config/get-local-repo","pages-metadata-path","frontend.config.get_pages_metadata_path","or__4253__auto__","frontend.db/get-file","and__4251__auto__","cljs.core/not","frontend.encrypt/content-encrypted?","cljs.core/deref","frontend.state/state","cljs.core.not_EQ_","clojure.string/trim","clojure.string/blank?","frontend.db/file-exists?","js/console.error","clojure.string/includes?","frontend.config/get-journals-directory","frontend.state/get-default-journal-template","page-name","frontend.db/get-file-page","cljs.core.println","frontend.handler.page.delete_BANG_","cljs.core/contains?","clojure.string/ends-with?","frontend.handler.ui/add-style-if-exists!","___42616__auto__","frontend.handler.repo/update-pages-metadata!","lambdaisland.glogi.log","cljs.core/identity"],"sourcesContent":["(ns frontend.fs.watcher-handler\n  (:require [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.db.model :as model]\n            [frontend.handler.editor :as editor]\n            [frontend.handler.extract :as extract]\n            [frontend.handler.file :as file-handler]\n            [frontend.handler.page :as page-handler]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.handler.ui :as ui-handler]\n            [logseq.graph-parser.util :as gp-util]\n            [lambdaisland.glogi :as log]\n            [electron.ipc :as ipc]\n            [promesa.core :as p]\n            [frontend.state :as state]\n            [frontend.encrypt :as encrypt]))\n\n;; all IPC paths must be normalized! (via gp-util/path-normalize)\n\n(defn- set-missing-block-ids!\n  [content]\n  (when (string? content)\n    (doseq [block-id (extract/extract-all-block-refs content)]\n      (when-let [block (try\n                         (model/get-block-by-uuid block-id)\n                         (catch js/Error _e\n                           nil))]\n        (let [id-property (:id (:block/properties block))]\n          (when-not (= (str id-property) (str block-id))\n            (editor/set-block-property! block-id \"id\" block-id)))))))\n\n(defn- handle-add-and-change!\n  [repo path content db-content mtime backup?]\n  (p/let [\n          ;; save the previous content in a versioned bak file to avoid data overwritten.\n          _ (when backup? (ipc/ipc \"backupDbFile\" (config/get-local-dir repo) path db-content content))\n          _ (file-handler/alter-file repo path content {:re-render-root? true\n                                                        :from-disk? true})]\n    (set-missing-block-ids! content)\n    (db/set-file-last-modified-at! repo path mtime)))\n\n(defn handle-changed!\n  [type {:keys [dir path content stat] :as payload}]\n  (when dir\n    (let [path (gp-util/path-normalize path)\n          repo (config/get-local-repo dir)\n          pages-metadata-path (config/get-pages-metadata-path)\n          {:keys [mtime]} stat\n          db-content (or (db/get-file repo path) \"\")]\n      (when (and (or content (= type \"unlink\"))\n                 (not (encrypt/content-encrypted? content))\n                 (not (:encryption/graph-parsing? @state/state)))\n        (cond\n          (and (= \"add\" type)\n               (not= (string/trim content) (string/trim db-content))\n               (not= path pages-metadata-path))\n          (let [backup? (not (string/blank? db-content))]\n            (handle-add-and-change! repo path content db-content mtime backup?))\n\n          (and (= \"change\" type)\n               (not (db/file-exists? repo path)))\n          (js/console.error \"Can't get file in the db: \" path)\n\n          (and (= \"change\" type)\n               (not= (string/trim content) (string/trim db-content))\n               (not= path pages-metadata-path))\n          (when-not (and\n                     (string/includes? path (str \"/\" (config/get-journals-directory) \"/\"))\n                     (or\n                      (= (string/trim content)\n                         (string/trim (or (state/get-default-journal-template) \"\")))\n                      (= (string/trim content) \"-\")\n                      (= (string/trim content) \"*\")))\n            (handle-add-and-change! repo path content db-content mtime true))\n\n          (and (= \"unlink\" type)\n               (db/file-exists? repo path))\n          (when-let [page-name (db/get-file-page path)]\n            (println \"Delete page: \" page-name \", file path: \" path \".\")\n            (page-handler/delete! page-name #() :delete-file? false))\n\n          (and (contains? #{\"add\" \"change\" \"unlink\"} type)\n               (string/ends-with? path \"logseq/custom.css\"))\n          (do\n            (println \"reloading custom.css\")\n            (ui-handler/add-style-if-exists!))\n\n          ;; When metadata is added to watcher, update timestamps in db accordingly\n          ;; This event is not triggered on re-index\n          ;; Persistent metadata is gold standard when db is offline, so it's forced\n          (and (contains? #{\"add\"} type)\n               (= path pages-metadata-path))\n          (p/do! (repo-handler/update-pages-metadata! repo content true))\n\n          ;; Change is triggered by external changes, so update to the db\n          ;; Don't forced update when db is online, but resolving conflicts\n          (and (contains? #{\"change\"} type)\n               (= path pages-metadata-path))\n          (p/do! (repo-handler/update-pages-metadata! repo content false))\n\n          (contains? #{\"add\" \"change\" \"unlink\"} type)\n          nil\n\n          :else\n          (log/error :fs/watcher-no-handler {:type type\n                                             :payload payload})))\n\n      ;; return nil, otherwise the entire db will be transfered by ipc\n      nil)))\n"]}