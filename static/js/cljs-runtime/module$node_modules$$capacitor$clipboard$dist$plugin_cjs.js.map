{
"version":3,
"file":"module$node_modules$$capacitor$clipboard$dist$plugin_cjs.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@capacitor/clipboard/dist/plugin.cjs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$capacitor$clipboard$dist$plugin_cjs\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar core = require('@capacitor/core');\n\nclass ClipboardWeb extends core.WebPlugin {\n    async write(options) {\n        if (typeof navigator === 'undefined' || !navigator.clipboard) {\n            throw this.unavailable('Clipboard API not available in this browser');\n        }\n        if (options.string !== undefined) {\n            await this.writeText(options.string);\n        }\n        else if (options.url) {\n            await this.writeText(options.url);\n        }\n        else if (options.image) {\n            if (typeof ClipboardItem !== 'undefined') {\n                try {\n                    const blob = await (await fetch(options.image)).blob();\n                    const clipboardItemInput = new ClipboardItem({ [blob.type]: blob });\n                    await navigator.clipboard.write([clipboardItemInput]);\n                }\n                catch (err) {\n                    throw new Error('Failed to write image');\n                }\n            }\n            else {\n                throw this.unavailable('Writing images to the clipboard is not supported in this browser');\n            }\n        }\n        else {\n            throw new Error('Nothing to write');\n        }\n    }\n    async read() {\n        if (typeof navigator === 'undefined' || !navigator.clipboard) {\n            throw this.unavailable('Clipboard API not available in this browser');\n        }\n        if (typeof ClipboardItem !== 'undefined') {\n            try {\n                const clipboardItems = await navigator.clipboard.read();\n                const type = clipboardItems[0].types[0];\n                const clipboardBlob = await clipboardItems[0].getType(type);\n                const data = await this._getBlobData(clipboardBlob, type);\n                return { value: data, type };\n            }\n            catch (err) {\n                return this.readText();\n            }\n        }\n        else {\n            return this.readText();\n        }\n    }\n    async readText() {\n        if (typeof navigator === 'undefined' ||\n            !navigator.clipboard ||\n            !navigator.clipboard.readText) {\n            throw this.unavailable('Reading from clipboard not supported in this browser');\n        }\n        const text = await navigator.clipboard.readText();\n        return { value: text, type: 'text/plain' };\n    }\n    async writeText(text) {\n        if (typeof navigator === 'undefined' ||\n            !navigator.clipboard ||\n            !navigator.clipboard.writeText) {\n            throw this.unavailable('Writting to clipboard not supported in this browser');\n        }\n        await navigator.clipboard.writeText(text);\n    }\n    _getBlobData(clipboardBlob, type) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            if (type.includes('image')) {\n                reader.readAsDataURL(clipboardBlob);\n            }\n            else {\n                reader.readAsText(clipboardBlob);\n            }\n            reader.onloadend = () => {\n                const r = reader.result;\n                resolve(r);\n            };\n            reader.onerror = e => {\n                reject(e);\n            };\n        });\n    }\n}\n\nconst Clipboard = core.registerPlugin('Clipboard', {\n    web: () => new ClipboardWeb(),\n});\n\nexports.Clipboard = Clipboard;\n//# sourceMappingURL=plugin.cjs.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","core","ClipboardWeb","WebPlugin","write","options","navigator","clipboard","unavailable","undefined","string","writeText","url","image","ClipboardItem","blob","fetch","clipboardItemInput","type","err","Error","read","clipboardItems","types","clipboardBlob","getType","data","_getBlobData","readText","text","Promise","resolve","reject","reader","FileReader","includes","readAsDataURL","readAsText","onloadend","reader.onloadend","result","onerror","e","reader.onerror","Clipboard","registerPlugin","web"]
}
