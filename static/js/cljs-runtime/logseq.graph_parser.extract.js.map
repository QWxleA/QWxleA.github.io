{"version":3,"sources":["logseq/graph_parser/extract.cljc"],"mappings":"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","names":["logseq.graph-parser.extract/get-page-name","file","ast","page-name-order","cljs.core.map","cljs.core/first","clojure.string/includes?","first-block","cljs.core/last","cljs.core.filter","logseq.graph-parser.block/heading-block?","property-name","cljs.core/contains?","cljs.core/ffirst","clojure.string/blank?","first-block-name","title","and__5041__auto__","file-name","temp__5720__auto__","clojure.string.split","result","logseq.graph-parser.util/split-last","logseq.graph-parser.config/mldoc-support?","clojure.string/lower-case","logseq.graph-parser.util/get-file-ext","js/decodeURIComponent","clojure.string/replace","or__5043__auto__","cljs.core._EQ_","p__48709","map__48711","cljs.core/--destructure-map","cljs.core.get","logseq.graph-parser.extract/extract-pages-and-blocks","format","properties","content","date-formatter","db","options","e48713","vec__48714","cljs.core.nth","page","_original-page-name","page-name","_journal-day","logseq.graph-parser.block/convert-page-if-journal","blocks","logseq.graph-parser.block/extract-blocks","cljs.core.dissoc","logseq.graph-parser.block/with-parent-and-left","ref-pages","cljs.core.atom","ref-tags","block","block-ref-pages","cljs.core/seq","page-lookup-ref","block-path-ref-pages","cljs.core/cons","cljs.core.remove","cljs.core/nil?","cljs.core.swap_BANG_","clojure.set/union","cljs.core/set","cljs.core.assoc","page-entity","alias","aliases","p1__48708#","logseq.graph-parser.util/page-name-sanity-lc","cljs.core.distinct","cljs.core.conj","G__48723","logseq.graph-parser.util/remove-nils","logseq.graph-parser.block/page-name->map","logseq.graph-parser.util/path-normalize","tags","tag","namespace-pages","logseq.graph-parser.text/namespace-page?","logseq.graph-parser.util/split-namespace-pages","pages","cljs.core/deref","cljs.core.concat","cljs.core/vector?","logseq.graph-parser.util/distinct-by","datascript.core.squuid","b","e","lambdaisland.glogi.log","cljs.core/identity","p__48736","map__48737","logseq.graph-parser.extract/extract-blocks-pages","user-config","logseq.graph-parser.util/get-format","_","cljs.core.println","logseq.graph-parser.mldoc/->edn","logseq.graph_parser.mldoc.default_config","logseq.graph-parser.property/properties-ast?","p__48743","vec__48744","x","y","logseq.graph_parser.text.parse_property","cljs.core.into","clojure.walk/keywordize-keys","cljs.core.update","v","logseq.graph-parser.extract/with-block-uuid","logseq.graph-parser.extract/with-ref-pages","cljs.core.mapcat","cljs.core/group-by","cljs.core/vals","cljs.core.partial","cljs.core/apply","cljs.core/merge","logseq.graph-parser.extract/extract-all-block-refs","cljs.core/second","cljs.core/re-seq"],"sourcesContent":["(ns ^:nbb-compatible logseq.graph-parser.extract\n  ;; Disable clj linters since we don't support clj\n  #?(:clj {:clj-kondo/config {:linters {:unresolved-namespace {:level :off}\n                                        :unresolved-symbol {:level :off}}}})\n  (:require [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [datascript.core :as d]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.block :as gp-block]\n            [logseq.graph-parser.property :as gp-property]\n            [logseq.graph-parser.config :as gp-config]\n            #?(:org.babashka/nbb [logseq.graph-parser.log :as log]\n               :default [lambdaisland.glogi :as log])))\n\n(defn- get-page-name\n  [file ast page-name-order]\n  ;; headline\n  (let [ast (map first ast)]\n    (if (string/includes? file \"pages/contents.\")\n      \"Contents\"\n      (let [first-block (last (first (filter gp-block/heading-block? ast)))\n            property-name (when (and (contains? #{\"Properties\" \"Property_Drawer\"} (ffirst ast))\n                                     (not (string/blank? (:title (last (first ast))))))\n                            (:title (last (first ast))))\n            first-block-name (let [title (last (first (:title first-block)))]\n                               (and first-block\n                                    (string? title)\n                                    title))\n            file-name (when-let [file-name (last (string/split file #\"/\"))]\n                        (let [result (first (gp-util/split-last \".\" file-name))]\n                          (if (gp-config/mldoc-support? (string/lower-case (gp-util/get-file-ext file)))\n                            (js/decodeURIComponent (string/replace result \".\" \"/\"))\n                            result)))]\n        (or property-name\n            (if (= page-name-order \"heading\")\n              (or first-block-name file-name)\n              (or file-name first-block-name)))))))\n\n\n;; TODO: performance improvement\n(defn- extract-pages-and-blocks\n  [format ast properties file content {:keys [date-formatter page-name-order db] :as options}]\n  (try\n    #_:clj-kondo/ignore ;;clj-kondo bug\n    (let [page (get-page-name file ast page-name-order)\n          [_original-page-name page-name _journal-day] (gp-block/convert-page-if-journal page date-formatter)\n          blocks (->> (gp-block/extract-blocks ast content false format (dissoc options :page-name-order))\n                      (gp-block/with-parent-and-left {:block/name page-name}))\n          ref-pages (atom #{})\n          ref-tags (atom #{})\n          blocks (map (fn [block]\n                        (let [block-ref-pages (seq (:block/refs block))\n                              page-lookup-ref [:block/name page-name]\n                              block-path-ref-pages (->> (cons page-lookup-ref (seq (:block/path-refs block)))\n                                                        (remove nil?))]\n                          (when block-ref-pages\n                            (swap! ref-pages set/union (set block-ref-pages)))\n                          (-> block\n                              (dissoc :ref-pages)\n                              (assoc :block/format format\n                                     :block/page [:block/name page-name]\n                                     :block/refs block-ref-pages\n                                     :block/path-refs block-path-ref-pages))))\n                      blocks)\n          page-entity (let [alias (:alias properties)\n                            alias (if (string? alias) [alias] alias)\n                            aliases (and alias\n                                         (seq (remove #(or (= page-name (gp-util/page-name-sanity-lc %))\n                                                           (string/blank? %)) ;; disable blank alias\n                                                      alias)))\n                            aliases (->>\n                                     (map\n                                      (fn [alias]\n                                        (let [page-name (gp-util/page-name-sanity-lc alias)\n                                              aliases (distinct\n                                                       (conj\n                                                        (remove #{alias} aliases)\n                                                        page))\n                                              aliases (when (seq aliases)\n                                                        (map\n                                                         (fn [alias]\n                                                           {:block/name (gp-util/page-name-sanity-lc alias)})\n                                                         aliases))]\n                                          (if (seq aliases)\n                                            {:block/name page-name\n                                             :block/alias aliases}\n                                            {:block/name page-name})))\n                                      aliases)\n                                     (remove nil?))]\n                        (cond->\n                         (gp-util/remove-nils\n                          (assoc\n                           (gp-block/page-name->map page false db true date-formatter)\n                           :block/file {:file/path (gp-util/path-normalize file)}))\n                         (seq properties)\n                         (assoc :block/properties properties)\n\n                         (seq aliases)\n                         (assoc :block/alias aliases)\n\n                         (:tags properties)\n                         (assoc :block/tags (let [tags (:tags properties)\n                                                  tags (if (string? tags) [tags] tags)\n                                                  tags (remove string/blank? tags)]\n                                              (swap! ref-tags set/union (set tags))\n                                              (map (fn [tag] {:block/name (gp-util/page-name-sanity-lc tag)\n                                                              :block/original-name tag})\n                                                   tags)))))\n          namespace-pages (let [page (:block/original-name page-entity)]\n                            (when (text/namespace-page? page)\n                              (->> (gp-util/split-namespace-pages page)\n                                   (map (fn [page]\n                                          (-> (gp-block/page-name->map page true db true date-formatter)\n                                              (assoc :block/format format)))))))\n          pages (->> (concat\n                      [page-entity]\n                      @ref-pages\n                      (map\n                       (fn [page]\n                         {:block/original-name page\n                          :block/name (gp-util/page-name-sanity-lc page)})\n                       @ref-tags)\n                      namespace-pages)\n                     ;; remove block references\n                     (remove vector?)\n                     (remove nil?))\n          pages (gp-util/distinct-by :block/name pages)\n          pages (remove nil? pages)\n          pages (map (fn [page] (assoc page :block/uuid (d/squuid))) pages)\n          blocks (->> (remove nil? blocks)\n                      (map (fn [b] (dissoc b :block/title :block/body :block/level :block/children :block/meta :block/anchor))))]\n      [pages blocks])\n    (catch :default e\n      (log/error :exception e))))\n\n(defn extract-blocks-pages\n  [file content {:keys [user-config] :as options}]\n  (if (string/blank? content)\n    []\n    (let [format (gp-util/get-format file)\n          _ (println \"Parsing start: \" file)\n          ast (gp-mldoc/->edn content (gp-mldoc/default-config format\n                                                         ;; {:parse_outline_only? true}\n                                                         )\n                           user-config)]\n      (println \"Parsing finished : \" file)\n      (let [first-block (ffirst ast)\n            properties (let [properties (and (gp-property/properties-ast? first-block)\n                                             (->> (last first-block)\n                                                  (map (fn [[x y]]\n                                                         [x (if (string? y)\n                                                              (text/parse-property format x y user-config)\n                                                              y)]))\n                                                  (into {})\n                                                  (walk/keywordize-keys)))]\n                         (when (and properties (seq properties))\n                           (if (:filters properties)\n                             (update properties :filters\n                                     (fn [v]\n                                       (string/replace (or v \"\") \"\\\\\" \"\")))\n                             properties)))]\n        (extract-pages-and-blocks\n         format ast properties\n         file content options)))))\n\n(defn- with-block-uuid\n  [pages]\n  (->> (gp-util/distinct-by :block/name pages)\n       (map (fn [page]\n              (if (:block/uuid page)\n                page\n                (assoc page :block/uuid (d/squuid)))))))\n\n(defn with-ref-pages\n  [pages blocks]\n  (let [ref-pages (->> (mapcat :block/refs blocks)\n                       (filter :block/name))]\n    (->> (concat pages ref-pages)\n         (group-by :block/name)\n         vals\n         (map (partial apply merge))\n         (with-block-uuid))))\n\n(defn extract-all-block-refs\n  [content]\n  (map second (re-seq #\"\\(\\(([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\\)\\)\" content)))\n"]}