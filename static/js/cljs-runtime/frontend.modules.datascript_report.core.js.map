{"version":3,"sources":["frontend/modules/datascript_report/core.cljs"],"mappings":";AAIA,iEAAA,jEAAKA;AAEL,oDAAA,pDAAMC,gHACHC,GAAGC,SAASC;AADf,AAEE,IAAA,AACE,QAACE,qDAAAA,sEAAAA,nBAAOJ,kDAAAA,/CAAGC,kDAAAA,zCAASC,kDAAAA;gBADtB,GAAA,CAAAC,kBAESE;AAFT,QAAAF,JAEkBG;AAFlB,AAGI,AAACC,cAAiBD;;AAHtB;;AAAA,AAAA,MAAAH;;;;AAMF,6EAAA,7EAAMK,kKACHC,UAAUC,SAASC;AADtB,AAEE,IAAMC,IAAE,2DAAA,AAAA,3DAACb,kDAAUW,sJAAcC;AAAjC,AACE,GAAI,AAACE,6CAAEf,+DAAuB,AAACgB,gBAAMF;AAEnC,mEAAA,AAAA,5DAACb,kDAAUU,uJAAeE;;AAC1BC;;;AAEN,+DAAA,uEAAAG,tIAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAA,AAAAE,4CAAAF,eAAA,vEACWP;eADX,AAAAS,4CAAAF,eAAA,tEACqBN;cADrB,AAAAQ,4CAAAF,eAAA,rEAC8BI;cAD9B,AAAAF,4CAAAF,eAAA,rEACsCK;AADtC,AAEE,IAAMC,+BAAmB,AAACC,6CAAKC,gBAAMJ,3EAAS,AAACK;IACzCC,SAAO,AAACC,+CACA,WAAKC,IAAIC;AAAT,AACE,IAAMC,eACA,AAACtB,2EAAmCC,UAAUC,SAASmB;IACvDE,cACA,iBAAAC,qBAAmB,AAAA,mFAAA,AAAA,2FAAIF;AAAvB,AAAA,oBAAAE;AAAA,AAAA,cAAAA,VAAWC;AAAX,AACE,OAACzB,2EAAmCC,UAAUC,SAASuB;;AADzD;;;AAHN,AAKE,IAAAC,WAAQN;IAARM,eAAA,6KAAAA,3KACE,GAAA,iBAAA,hBAAOJ,yBACP,+CAAAI,SAAA,xDAACC,iHAAeC,eAAKN;AAFvB,AAAA,GAIE,GAAA,gBAAA,fAAOC;AACP,sDAAAG,aAAA,5DAACC,mHAAcC,eAAKL;;AALtBG;;GAPL,2CAAA,yDAAA,kCAAA,uDAAA,0CAeCZ;IACRe,8BAEmB,4CAAA,WAAAG,vDAACC,dACD,AAAChB;AADD,AAAM,qGAAAe,9FAAChC,2EAAmCC,UAAUC;0JAFnD,AAAA,2FAAYW,SAAS,AAAA,iGAAcA,5VACpC,oEAAA,pEAACiB,+CAAOC;AAlBjC,AAqBE,GAAI,AAACG,cAAIL;AACP,6DAAA,tDAACF,+CAAOT,8DAAciB,kBAAUN;;AAChCX;;;AAEN,qDAAA,6DAAAkB,lHAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA5B,4BAAA4B;iBAAAA,bAC2CE;gBAD3C,AAAA7B,4CAAA2B,eAAA,vEACWpC;eADX,AAAAS,4CAAA2B,eAAA,tEACqBnC;cADrB,AAAAQ,4CAAA2B,eAAA,rEAC8BzB;AAD9B,AAEE,IAAME,+BAAmB,AAACC,6CAAKC,gBAAMJ,3EAAS,AAACK;AAA/C,AACE,OAACE,+CACC,WAAKC,IAAIC;AAAT,AACE,IAAMC,eACA,AAACtB,2EAAmCC,UAAUC,SAASmB;AAD7D,AAEE,IAAAmB,WAAQpB;AAAR,AAAA,GACE,GAAA,iBAAA,hBAAOE;AACP,oDAAAkB,7CAACC,sDAAKnB;;AAFRkB;;GAJN,iCAQE1B","names":["frontend.modules.datascript-report.core/keys-of-deleted-entity","frontend.modules.datascript-report.core/safe-pull","db","selector","eid","e96749","datascript.core/pull","js/Error","e","js/console.error","frontend.modules.datascript-report.core/get-entity-from-db-after-or-before","db-before","db-after","db-id","r","cljs.core._EQ_","cljs.core/count","p__96758","map__96759","cljs.core/--destructure-map","cljs.core.get","frontend.modules.datascript-report.core/get-blocks-and-pages","tx-data","tx-meta","updated-db-ids","cljs.core.mapv","cljs.core/first","cljs.core/set","result","cljs.core.reduce","acc","x","block-entity","page-entity","temp__5720__auto__","page-id","G__96760","cljs.core.update","cljs.core/conj","tx-meta-pages","cljs.core.remove","cljs.core/nil?","p1__96757#","cljs.core.map","cljs.core/seq","clojure.set/union","p__96761","map__96762","frontend.modules.datascript-report.core/get-blocks","_tx-report","G__96763","cljs.core.conj"],"sourcesContent":["(ns frontend.modules.datascript-report.core\n  (:require [clojure.set :as set]\n            [datascript.core :as d]))\n\n(def keys-of-deleted-entity 1)\n\n(defn safe-pull\n  [db selector eid]\n  (try\n    (d/pull db selector eid)\n    (catch js/Error e\n      (js/console.error e)\n      nil)))\n\n(defn get-entity-from-db-after-or-before\n  [db-before db-after db-id]\n  (let [r (safe-pull db-after '[*] db-id)]\n    (if (= keys-of-deleted-entity (count r))\n      ;; block has been deleted\n      (safe-pull db-before '[*] db-id)\n      r)))\n\n(defn get-blocks-and-pages\n  [{:keys [db-before db-after tx-data tx-meta]}]\n  (let [updated-db-ids (-> (mapv first tx-data) (set))\n        result (reduce\n                (fn [acc x]\n                  (let [block-entity\n                        (get-entity-from-db-after-or-before db-before db-after x)\n                        page-entity\n                        (when-let [page-id (-> block-entity :block/page :db/id)]\n                          (get-entity-from-db-after-or-before db-before db-after page-id))]\n                    (cond-> acc\n                      (some? block-entity)\n                      (update :blocks conj block-entity)\n\n                      (some? page-entity)\n                      (update :pages conj page-entity))))\n                {:blocks #{}\n                 :pages #{}}\n                updated-db-ids)\n        tx-meta-pages (->> [(:from-page tx-meta) (:target-page tx-meta)]\n                           (remove nil?)\n                           (map #(get-entity-from-db-after-or-before db-before db-after %))\n                           (set))]\n    (if (seq tx-meta-pages)\n      (update result :pages set/union tx-meta-pages)\n      result)))\n\n(defn get-blocks\n  [{:keys [db-before db-after tx-data] :as _tx-report}]\n  (let [updated-db-ids (-> (mapv first tx-data) (set))]\n    (reduce\n      (fn [acc x]\n        (let [block-entity\n              (get-entity-from-db-after-or-before db-before db-after x)]\n          (cond-> acc\n            (some? block-entity)\n            (conj block-entity))))\n      []\n      updated-db-ids)))\n"]}