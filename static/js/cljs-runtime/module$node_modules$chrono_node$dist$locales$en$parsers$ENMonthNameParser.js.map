{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$en$parsers$ENMonthNameParser.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEtIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,YAAcN,OAAA,CAAQ,2DAAR,CAApB,CACMO,QAAUP,OAAA,CAAQ,wDAAR,CACVQ,OAAAA,CAAYR,OAAA,CAAQ,oDAAR,CAClB,OAAMS,YAAcT,OAAA,CAAQ,2DAAR,CACdU;OAAAA,CAAmCV,OAAA,CAAQ,oFAAR,CACzC,OAAMW,QAAU,IAAIC,MAAJ,CAAY,eAAZ,CACX,IAAGJ,MAAUK,CAAAA,eAAV,CAA0BP,WAAYQ,CAAAA,gBAAtC,CAAH,GADW,CAEX,SAFW,CAIX,aAAYL,WAAYM,CAAAA,YAAxB,IAJW,CAKZ,uCALY,CAMwB,GANxB,CAUhB,MAAMC,kBAAN,QAAgCN,QAAiCO,CAAAA,sCAAjE,CACIC,YAAY,EAAG,CACX,MAAOP,QADI,CAGfQ,YAAY,CAACC,OAAD,CAAUC,KAAV,CAAiB,CACzB,IAAMC,UAAYD,KAAA,CAPDE,CAOC,CAAwBC,CAAAA,WAAxB,EAClB,IAAuB,CAAvB,EAAIH,KAAA,CAAM,CAAN,CAASI,CAAAA,MAAb,EAA4B,CAACnB,WAAYoB,CAAAA,0BAAZ,CAAuCJ,SAAvC,CAA7B,CACI,MAAO,KAEX;MAAMK,OAASP,OAAQQ,CAAAA,mBAAR,CAA4BP,KAAMQ,CAAAA,KAAlC,CAAsEJ,CAA3BJ,KAAA,CAZ7CS,CAY6C,CAA2BL,EAAJ,EAAIA,EAAAA,MAAtE,CAA8EJ,KAAMQ,CAAAA,KAApF,CAA4FR,KAAA,CAAM,CAAN,CAASI,CAAAA,MAArG,CACfE,OAAOI,CAAAA,KAAMC,CAAAA,KAAb,CAAmB,KAAnB,CAA0B,CAA1B,CACMC,UAAAA,CAAQ3B,WAAYQ,CAAAA,gBAAZ,CAA6BQ,SAA7B,CACdK,OAAOI,CAAAA,KAAMG,CAAAA,MAAb,CAAoB,OAApB,CAA6BD,SAA7B,CACIZ,MAAA,CAdOc,CAcP,CAAJ,EACUC,OACN,CADa3B,WAAY4B,CAAAA,SAAZ,CAAsBhB,KAAA,CAf5Bc,CAe4B,CAAtB,CACb,CAAAR,MAAOI,CAAAA,KAAMG,CAAAA,MAAb,CAAoB,MAApB,CAA4BE,OAA5B,CAFJ,GAKUA,OACN,CADa7B,OAAQ+B,CAAAA,oBAAR,CAA6BlB,OAAQmB,CAAAA,OAArC,CAA8C,CAA9C,CAAiDN,SAAjD,CACb,CAAAN,MAAOI,CAAAA,KAAMC,CAAAA,KAAb,CAAmB,MAAnB,CAA2BI,OAA3B,CANJ,CAQA,OAAOT,OAjBkB,CAJjC,CAwBAzB,OAAQsC,CAAAA,OAAR,CAAkBxB,iBA1CoH;",
"sources":["node_modules/chrono-node/dist/locales/en/parsers/ENMonthNameParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$en$parsers$ENMonthNameParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst years_1 = require(\"../../../calculation/years\");\nconst pattern_1 = require(\"../../../utils/pattern\");\nconst constants_2 = require(\"../constants\");\nconst AbstractParserWithWordBoundary_1 = require(\"../../../common/parsers/AbstractParserWithWordBoundary\");\nconst PATTERN = new RegExp(`((?:in)\\\\s*)?` +\n    `(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})` +\n    `\\\\s*` +\n    `(?:` +\n    `[,-]?\\\\s*(${constants_2.YEAR_PATTERN})?` +\n    \")?\" +\n    \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\", \"i\");\nconst PREFIX_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst YEAR_GROUP = 3;\nclass ENMonthNameParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const monthName = match[MONTH_NAME_GROUP].toLowerCase();\n        if (match[0].length <= 3 && !constants_1.FULL_MONTH_NAME_DICTIONARY[monthName]) {\n            return null;\n        }\n        const result = context.createParsingResult(match.index + (match[PREFIX_GROUP] || \"\").length, match.index + match[0].length);\n        result.start.imply(\"day\", 1);\n        const month = constants_1.MONTH_DICTIONARY[monthName];\n        result.start.assign(\"month\", month);\n        if (match[YEAR_GROUP]) {\n            const year = constants_2.parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        }\n        else {\n            const year = years_1.findYearClosestToRef(context.refDate, 1, month);\n            result.start.imply(\"year\", year);\n        }\n        return result;\n    }\n}\nexports.default = ENMonthNameParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","constants_1","years_1","pattern_1","constants_2","AbstractParserWithWordBoundary_1","PATTERN","RegExp","matchAnyPattern","MONTH_DICTIONARY","YEAR_PATTERN","ENMonthNameParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","monthName","MONTH_NAME_GROUP","toLowerCase","length","FULL_MONTH_NAME_DICTIONARY","result","createParsingResult","index","PREFIX_GROUP","start","imply","month","assign","YEAR_GROUP","year","parseYear","findYearClosestToRef","refDate","default"]
}
