{"version":3,"sources":["frontend/storage.cljs"],"mappings":";AASA,uBAAA,vBAAMA,sDACHC;AADH,AAEE,GAAUC;AAAV;;AAAA,AACE,OAACC,sDAAmB,AAAcC,qBAAgB,AAACC,eAAKJ;;;AAE5D,uBAAA,vBAAMK,sDACHL,IAAIM;AADP,AAGE,oBAAAC;AAAA,oBAAA,AAAAC,gBAAA,kFAAA,AAAA,iHAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,0DAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,8EAAA,AAAA,mFAAA,AAAA,uBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,KAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,6CAAA,AAAA,AAAAA,2DAAA;AAAA,AAAAC,6BAAA,iHAAA,gDAEW,AAACC,gDAAQX,KAAKM;;AAFzB,gDAEW,AAACK,gDAAQX,KAAKM;;;AAFzB,gDAEW,AAACK,gDAAQX,KAAKM;;;AACzB,GAAUL;AAAV;;AAAA,AACE,OAAcE,qBAAgB,AAACC,eAAKJ,KAAK,AAACY,wGAAON;;;AAErD,+BAAA,/BAAMO,sEACHb;AADH,AAEE,GAAUC;AAAV;;AAAA,AACE,OAACa,oCAAoB,AAAcX,qBAAgB,AAACC,eAAKJ;;;AAE7D,0BAAA,1BAAMe,4DACHf;AADH,AAEE,GAAUC;AAAV;;AAAA,AACE,OAAiBE,wBAAgB,AAACC,eAAKJ;;;AAE3C,yBAAA,zBAAMgB;AAAN,AAEE,GAAUf;AAAV;;AAAA,AACE,OAAYE","names":["frontend.storage/get","key","frontend.util/node-test?","cljs.reader.read_string","js/localStorage","cljs.core/name","frontend.storage/set","value","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","cljs.core.keyword","cljs.core.pr_str","frontend.storage/get-transit","datascript.transit/read-transit-str","frontend.storage/remove","frontend.storage/clear"],"sourcesContent":["(ns frontend.storage\n  (:refer-clojure :exclude [get set remove])\n  (:require [cljs.reader :as reader]\n            [datascript.transit :as dt]\n            [frontend.spec.storage :as storage-spec]\n            [cljs.spec.alpha :as s]\n            [frontend.util :as util]))\n\n;; TODO: refactor: separate side effects\n(defn get\n  [key]\n  (when-not util/node-test?\n    (reader/read-string ^js (.getItem js/localStorage (name key)))))\n\n(defn set\n  [key value]\n  ;; Prevent invalid data from being saved into storage\n  (s/assert ::storage-spec/local-storage\n            ;; Translate key to keyword for spec as not all keys are keywords\n            {(keyword key) value})\n  (when-not util/node-test?\n    (.setItem ^js js/localStorage (name key) (pr-str value))))\n\n(defn get-transit\n  [key]\n  (when-not util/node-test?\n    (dt/read-transit-str ^js (.getItem js/localStorage (name key)))))\n\n(defn remove\n  [key]\n  (when-not util/node-test?\n    (.removeItem ^js js/localStorage (name key))))\n\n(defn clear\n  []\n  (when-not util/node-test?\n    (.clear ^js js/localStorage)))\n"]}