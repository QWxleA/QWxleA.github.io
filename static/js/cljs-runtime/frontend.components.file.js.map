{"version":3,"sources":["frontend/components/file.cljs"],"mappings":";;;;AAoBA,oCAAA,pCAAOA,gFACJC;AADH,AAEE,IAAMC,cAAY,AAACC,gBAAM,AAAA,wFAAWF;AAApC,AACE,kEAAA,mFAAA,kEAAA,qDAAA,rQAACG,+CAAOF;;AAEZ,iCAAA,AAAAG,oBAAAC,oBAAA,zEAAUO;AAAV,AAAA,AAAA,OAAAN,6BAAA,MAAA,aAAA,0BAAA,CAAA,iBAAAC,aAII,+GAAA,/GAACO;AAJL,AAAA,OAAAR,6BAAA,KAAA,EAAA,AAAAE,qBAAAD,aAAA,AAAAE,wCAAA,AAAAC,2HAAA,2CAAA,wDAAA,mFAAA,wBAAAH,kBAAA,aAAA,UAAA,EAAA,AAAAC,qBAAAD,aAAA,KAAA,CAAA,AAAAI,+BAAAJ;KAAA,AAAAI,+BAKG,iBAAAI,qBAAwB,mBAAA,nBAACE;AAAzB,AAAA,oBAAAF;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,IAAME,QAAM,CAACC,sDAAAA,oEAAAA,hBAAaH,gDAAAA;IACpBI,gBAAQ,AAACC;AADf,AAAA,0FAAA,6EAAA,mFAAA,uDAAA,mFAAA,kDAAA,mFAAA,2yBAAA,mFAAA,70BAKU,+GAAA,/GAACP,yLACN,iCAAA,KAAA,AAAA,mFAAA,vGAAUM,wJACH,+GAAA,/GAACN,iNACR,iCAAA,KAAA,AAAA,mFAAA,iDAAA,xJAAUM,6TAGX,iBAAAE,qBAAA,+CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAR,yBAAA,AAAAU,cAAAF;AAAA,AAAA,GAAAR;AAAA,AAAA,IAAAQ,eAAAR;AAAA,AAAA,GAAA,AAAAW,6BAAAH;AAAA,IAAAI,kBAi6E0C,AAAAmE,sBAAAvE;IAj6E1CK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;WAAA,AAAAG,4CAAAF,WAAA,IAAA,lEAAOW;kBAAP,AAAAT,4CAAAF,WAAA,IAAA,zEAAYY;AAAZ,AAAA,AAAA,AAAAT,uBAAAN,SACE,iBAAMgB,UAAQF;AAAd,AAAA,0FAAA,kDAAA,2CAAA,oEAAA,mFAAA,nGACaE,oJAET,iBAAMC,OAAK,EAAI,AAACC,uCAAgBJ,OACnB,wDAAA,qDAAA,KAAA,2CAAA,7JAACK,mNAA0B,6FAAA,7FAACC,uBAAeN,KAAK,mDAAA,lDAAKO,6EACrD,wDAAA,sDAAA,2CAAA,zJAACF,8MAAsBH;AAFpC,AAAA,0FAAA,gDAAA,2CAAA,qDAGaC,aACVH;aACJ,iCAAA,KAAA,AAAA,mFAAA,iDAAA,mFAAA,3OAAUxB,2UAEF,EAAI,iBAAA,hBAAOyB,sBACT,+GAAA,/GAAC/B,wLACD,AAACsC,iEACA,AAACC,oCAAuB,AAACC,8BAAgBT,iCAEpD,iCAAA,KAAA,AAAA,mFAAA,iDAAA,mFAAA,+DAAA,2CAAA,rVAAUzB,kZAES;kBAAKmC;AAAL,AACE,OAACC,6CAA8BZ;;SAHpD,mFAAA,qDAIe,+GAAA,/GAAC9B;;;AApBrB,eAAA,CAAAkB,WAAA;;;;AAAA;;;;;AAAA,OAAAK,qBAAA,AAAAC,gBAAAR,UAAA,AAAAS,qCAAA,AAAAC,qBAAAjB;;AAAA,OAAAc,qBAAA,AAAAC,gBAAAR,UAAA;;;AAAA,IAAAW,aAAA,AAAAvC,gBAAAqB;WAAA,AAAAY,4CAAAM,WAAA,IAAA,lEAAOG;kBAAP,AAAAT,4CAAAM,WAAA,IAAA,zEAAYI;AAAZ,AAAA,OAAAH,eACE,iBAAMI,UAAQF;AAAd,AAAA,0FAAA,kDAAA,2CAAA,oEAAA,mFAAA,nGACaE,oJAET,iBAAMC,OAAK,EAAI,AAACC,uCAAgBJ,OACnB,wDAAA,qDAAA,KAAA,2CAAA,7JAACK,mNAA0B,6FAAA,7FAACC,uBAAeN,KAAK,mDAAA,lDAAKO,6EACrD,wDAAA,sDAAA,2CAAA,zJAACF,8MAAsBH;AAFpC,AAAA,0FAAA,gDAAA,2CAAA,qDAGaC,aACVH;aACJ,iCAAA,KAAA,AAAA,mFAAA,iDAAA,mFAAA,3OAAUxB,2UAEF,EAAI,iBAAA,hBAAOyB,sBACT,+GAAA,/GAAC/B,wLACD,AAACsC,iEACA,AAACC,oCAAuB,AAACC,8BAAgBT,iCAEpD,iCAAA,KAAA,AAAA,mFAAA,iDAAA,mFAAA,+DAAA,2CAAA,rVAAUzB,kZAES;kBAAKmC;AAAL,AACE,OAACC,6CAA8BZ;;SAHpD,mFAAA,qDAIe,+GAAA,/GAAC9B;KApBrB,AAAAyB,qCAAA,AAAAI,eAAApB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAyBJ;;;AAZ/B;;;GALH,6GAAA,1BAAkBL;AAuClB,gCAAA,AAAAT,oBAAAqD,qBAAA,zEAAWG,oFAOR5D;AAPH,AAAA,AAAA,IAQQ+D,OAAK,AAAChE,kCAASC;IACfgE,SAAO,AAACC,oCAAmBF;IAC3BG,gBAAc,CAACC,0DAAAA,gEAAAA,RAAiBJ,4CAAAA;IAChCK,YAAU,4CAAK,AAACC;AAXxB,AAAA,OAAA/D,6BAAA,MAAA,4DAAA,QAAA,CAAA,AAAAA,6BAAA,KAAA,aAAA,SAAA,CAAA,AAAAA,6BAAA,MAAA,KAAA,qBAAA,iCAAA,AAAA,AAAAA,6BAAA,MAAA,aAAA,qBAAA,CAAA,SAAA,AAAAA,6BAAA,IAAA,SAAA,gBAAA,/VAYoB,CAAA,qBAA0B8D,2IAElC,AAACE,UAAaP,4BACfG,oKAG2B,wDAAA,oDAAA,2CAAA,vJAACjB,4MAAsBiB,iCACnB,WAAKK;AAAL,AACE,oBAAM,uDAAA,vDAACC,qDAASD;AAAhB,AACE,IAAAxD,2BAAgB,iBAAA2D,WAAA,mFAAA,8DAAwB,CAACE,kEAAAA,iFAAAA,jBAAyBV,6DAAAA;AAAlD,AAAA,4GAAAQ,yCAAAA,7IAACC,mDAAAA,6DAAAA;;AAAjB,AAAA,oBAAA5D;AAAA,AAAA,iBAAAA,bAAW0D;AAAX,AACE,wKAAA,xKAACI,uCACA,AAACC,kCACD,AAAA,mFAAQL;;AAHX;;AAKA,OAACM,mBAAUR;;AANb;;eApB5C,sBAAA,CAAA,AAAA5D,kDAAA,MAAA,zBA2BSuD,2CAEE,iBAAAc,oBAAKd;AAAL,AAAA,oBAAAc;AAAmB,UAAK,gDAAA,hDAACC,kCAAoBf;;AAA7Cc;;MA7BX,AAAA,iBAAAtB,aA+BQ,8DAAA,2CAAA,uDAAA,2CAAA,uDAAA,MAAA,0DAAA,lUAACwB;AA/BT,AAAA,OAAA5E,6BAAA,IAAA,EAAA,AAAAE,qBAAAkD,aAAA,AAAAjD,wCAAA,AAAAC,2HAAA,2CAAA,wDAAA,mFAAA,UAAA,OAAA,uBAAAgD,kBAAA,aAAA,sBAAA,EAAA,AAAAlD,qBAAAkD,aAAA,CAAA,AAAApD,6BAAA,OAAA,aAAA,QAAA,CAAA,8EAAA,CAAA,AAAAK,+BAAA+C,YAAA,AAAApD,6BAAA,OAAA,aAAA,QAAA,CAAA;KAAA,MAAA,kBAqCO,iBAAA0E,oBAAKhB;AAAL,AAAA,oBAAAgB;AAAY,OAACG,0BAAU,AAACC,8BAAoBpB;;AAA5CgB;;MArCP,AAAA1E,6BAAA,MAAA,aAAA,IAAA,VAsCmByD,4BAEZ,iBAAAiB,oBAAKhB;AAAL,AAAA,oBAAAgB;AAAY,OAACG,0BAAU,AAACE,+BAAqBrB;;AAA7CgB;;MAxCP,AAAArE,+BAyCO,iBAAAI,qBAAwB,CAACwE,qDAAAA,2DAAAA,RAAYxB,uCAAAA;AAArC,AAAA,oBAAAhD;AAAA,AAAA,mBAAAA,fAAWuE;AAAX,AACE,IAAME,UAAQ,AAACC,oBAAYH;IACrBI,OAAK,AAACC,2BAAkB5B;AAD9B,AAEE,8CAAA,2CAAA,uDAAA,KAAA,+GAAA,2CAAA,mFAAA,3XAAC6B,8MAC+B7B,aACZ,CAAA,aAAkBK,6HACNsB,aACZF;;AAPxB;;MAzCP,AAAA,iBAAA7B,aAoDa,+GAAA,/GAAC7C,2MAA6B,AAAC+E,eAAK7B;AApDjD,AAAA,OAAA1D,6BAAA,MAAA,EAAA,AAAAE,qBAAAmD,aAAA,AAAAlD,wCAAAkD,YAAA,MAAA,EAAA,AAAAnD,qBAAAmD,aAAA,KAAA,CAAA,AAAAhD,+BAAAgD;;;GAAA,qGAAA,2CAAA,7DAAkB9C,2HACJ,WAAKb;AAAL,AACE,AAAC6D,wCAA0B,AAAA,+GAAsB7D;;AACjDA;GAHhB,qEAIiB,WAAKA;AAAL,AACE,AAAC8D;;AACD9D;mBANnB","names":["frontend.components.file/get-path","state","route-match","cljs.core/first","cljs.core.get_in","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","attrs55639","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","frontend.components.file/files","rum.core/reactive","frontend.context.i18n.t","temp__5720__auto__","current-repo","frontend.state/sub","files","frontend.db/get-files","mobile?","frontend.util/mobile?","iter__5520__auto__","s__55678","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__55680","cljs.core/chunk-buffer","i__55679","vec__55694","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55677","cljs.core/chunk-rest","vec__55718","cljs.core/cons","cljs.core/rest","file","modified-at","file-id","href","logseq.graph-parser.config/draw?","reitit.frontend.easy.href","clojure.string/replace","logseq.graph-parser.config/default-draw-directory","frontend.date.get_date_time_string","cljs-time.core/to-default-time-zone","cljs-time.coerce/to-date-time","_e","frontend.handler.export/download-file!","rum.core/build-defcs","attrs55728","attrs55742","frontend.components.file/file","frontend.state/set-file-component!","frontend.state/clear-file-component!","path","format","logseq.graph-parser.util/get-format","original-name","frontend.db/get-file-page","random-id","datascript.core.squuid","js/decodeURI","e","frontend.components.file.goog$module$goog$object.get","page","G__55743","frontend.db/entity","frontend.util/page-name-sanity-lc","frontend.state/sidebar-add-block!","frontend.state/get-current-repo","frontend.util/stop","and__5041__auto__","clojure.string/starts-with?","frontend.components.svg.warning","cljs.core/contains?","frontend.config/img-formats","frontend.config/text-formats","file-content","frontend.db/get-file","content","clojure.string/trim","mode","frontend.util/get-file-ext","frontend.components.lazy-editor/editor","cljs.core/name","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.components.file\n  (:require [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [clojure.string :as string]\n            [datascript.core :as d]\n            [frontend.components.lazy-editor :as lazy-editor]\n            [frontend.components.svg :as svg]\n            [frontend.config :as config]\n            [frontend.context.i18n :refer [t]]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.handler.export :as export-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.config :as gp-config]\n            [logseq.graph-parser.util :as gp-util]\n            [goog.object :as gobj]\n            [reitit.frontend.easy :as rfe]\n            [rum.core :as rum]))\n\n(defn- get-path\n  [state]\n  (let [route-match (first (:rum/args state))]\n    (get-in route-match [:parameters :path :path])))\n\n(rum/defc files < rum/reactive\n  []\n  [:div.flex-1.overflow-hidden\n   [:h1.title\n    (t :all-files)]\n   (when-let [current-repo (state/sub :git/current-repo)]\n     (let [files (db/get-files current-repo)\n           mobile? (util/mobile?)]\n       [:table.table-auto\n        [:thead\n         [:tr\n          [:th (t :file/name)]\n          (when-not mobile?\n            [:th (t :file/last-modified-at)])\n          (when-not mobile?\n            [:th \"\"])]]\n        [:tbody\n         (for [[file modified-at] files]\n           (let [file-id file]\n             [:tr {:key file-id}\n              [:td\n               (let [href (if (gp-config/draw? file)\n                            (rfe/href :draw nil {:file (string/replace file (str gp-config/default-draw-directory \"/\") \"\")})\n                            (rfe/href :file {:path file-id}))]\n                 [:a {:href href}\n                  file])]\n              (when-not mobile?\n                [:td [:span.text-gray-500.text-sm\n                      (if (zero? modified-at)\n                        (t :file/no-data)\n                        (date/get-date-time-string\n                         (t/to-default-time-zone (tc/to-date-time modified-at))))]])\n\n              (when-not mobile?\n                [:td [:a.text-sm\n                      {:on-click (fn [_e]\n                                   (export-handler/download-file! file))}\n                      [:span (t :download)]]])]))]]))])\n\n(rum/defcs file < rum/reactive\n  {:did-mount (fn [state]\n                (state/set-file-component! (:rum/react-component state))\n                state)\n   :will-unmount (fn [state]\n                   (state/clear-file-component!)\n                   state)}\n  [state]\n  (let [path (get-path state)\n        format (gp-util/get-format path)\n        original-name (db/get-file-page path)\n        random-id (str (d/squuid))]\n    [:div.file {:id (str \"file-edit-wrapper-\" random-id)}\n     [:h1.title\n      [:bdi (js/decodeURI path)]]\n     (when original-name\n       [:div.text-sm.mb-4.ml-1 \"Page: \"\n        [:a.bg-base-2.p-1.ml-1 {:style {:border-radius 4}\n                                :href (rfe/href :page {:name original-name})\n                                :on-click (fn [e]\n                                            (when (gobj/get e \"shiftKey\")\n                                              (when-let [page (db/entity [:block/name (util/page-name-sanity-lc original-name)])]\n                                                (state/sidebar-add-block!\n                                                 (state/get-current-repo)\n                                                 (:db/id page)\n                                                 :page))\n                                              (util/stop e)))}\n         original-name]])\n\n     (when (and original-name (not (string/starts-with? original-name \"logseq/\")))\n       [:p.text-sm.ml-1.mb-4\n        (svg/warning {:style {:width \"1em\"\n                              :display \"inline-block\"}})\n        [:span.ml-1 \"Please don't remove the page's title property (you can still modify it).\"]])\n\n     (cond\n       ;; image type\n       (and format (contains? (config/img-formats) format))\n       [:img {:src path}]\n\n       (and format (contains? (config/text-formats) format))\n       (when-let [file-content (db/get-file path)]\n         (let [content (string/trim file-content)\n               mode (util/get-file-ext path)]\n           (lazy-editor/editor {:file? true\n                                :file-path path}\n                               (str \"file-edit-\" random-id)\n                               {:data-lang mode}\n                               content\n                               {})))\n\n       :else\n       [:div (t :file/format-not-supported (name format))])]))\n"]}