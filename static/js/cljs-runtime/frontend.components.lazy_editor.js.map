{"version":3,"sources":["frontend/components/lazy_editor.cljs"],"mappings":";AASA,AAAKA,8CAAY,KAAAC,qBAAA,mFAAA,sBAAA;AAAA,AAAA;;AAEjB,GAAA,QAAAC,qCAAAC,gDAAAC,4DAAAC;AAAA;AAAA,AAAA,AAASC,gDAAQ,6CAAA,7CAACC;;AAElB,yCAAA,AAAAC,oBAAAC,oBAAA,jFAAUE,4FAMPK,OAAOC,GAAGC,KAAKC,KAAKC;AANvB,AAAA,AAAA,IAOQC,gBAAQ,AAACC,eAAUhB;IACnBiB,QAAM,mBAAA,nBAACC;IACPL,WAAK,iBAAAM,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;;IACLN,WAAK,sCAAA,MAAA,5CAACO,6BAAqBP;AAVnC,AAAA,oBAWQE;AAXR,OAAAX,+BAYM,iBAAAiB,eAAA,AAAAC,gBAAE5B;AAAF,AAAA,QAAA2B,6CAAAA,oFAAAA,zCAAcX,gEAAAA,zDAAOC,gEAAAA,7DAAGC,gEAAAA,3DAAKC,gEAAAA,vDAAKI,gEAAAA,1DAAMH,gEAAAA;;;AAZ9C,OAAAV,+BAaM,oBAAA,pBAACmB;;GAbP,qGAAA,2CAAA,7DAAmBjB,8HACJ,WAAKC;AAAL,AACE,AAACC,+CAAUd,4CACA;AAAA,AACE,2EAAA,pEAACe,sBAAOT;;;AACrBO;mBALjB","names":["frontend.components.lazy-editor/lazy-editor","shadow.lazy/Loadable","js/frontend","js/frontend.components","js/frontend.components.lazy-editor","js/frontend.components.lazy-editor.loaded?","frontend.components.lazy-editor/loaded?","cljs.core.atom","rum.core/lazy-build","rum.core/build-defc","daiquiri.interpreter/interpret","frontend.components.lazy-editor/editor","rum.core/reactive","state","shadow.lazy.load","cljs.core/reset!","config","id","attr","code","options","loaded?","rum.core/react","theme","frontend.state/sub","or__5043__auto__","clojure.string/replace-first","fexpr__56753","cljs.core/deref","frontend.ui/loading"],"sourcesContent":["(ns frontend.components.lazy-editor\n  (:require [clojure.string :as string]\n            [rum.core :as rum]\n            [shadow.lazy :as lazy]\n            [frontend.ui :as ui]\n            [frontend.state :as state]))\n\n;; TODO: Why does shadow fail when code is required\n#_:clj-kondo/ignore\n(def lazy-editor (lazy/loadable frontend.extensions.code/editor))\n\n(defonce loaded? (atom false))\n\n(rum/defc editor < rum/reactive\n  {:will-mount (fn [state]\n                 (lazy/load lazy-editor\n                            (fn []\n                              (reset! loaded? true)))\n                 state)}\n  [config id attr code options]\n  (let [loaded? (rum/react loaded?)\n        theme (state/sub :ui/theme)\n        code (or code \"\")\n        code (string/replace-first code #\"\\n$\" \"\")] ;; See-also: #3410\n    (if loaded?\n      (@lazy-editor config id attr code theme options)\n      (ui/loading \"CodeMirror\"))))\n"]}