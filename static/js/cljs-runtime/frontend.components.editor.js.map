{"version":3,"sources":["frontend/components/editor.cljs"],"mappings":"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","names":["rum.core/lazy-build","rum.core/build-defc","frontend.components.editor/commands","rum.core/reactive","id","format","matched","frontend.util/react","frontend.commands/*matched-commands","frontend.commands/*show-commands","frontend.ui/auto-complete","item","cljs.core.get","frontend.commands/*first-command-group","cljs.core/first","command-name","command-doc","doc","frontend.state/show-command-doc?","cljs.core/vector?","frontend.ui/tippy","frontend.components.svg.help_circle","chosen-item","command","cljs.core/reset!","frontend.commands/*current-command","command-steps","cljs.core.into","restore-slash?","cljs.core/contains?","cljs.core/fn?","cljs.core/set","cljs.core.map","frontend.handler.editor/insert-command!","frontend.state/pub-event!","frontend.components.editor/block-commands","frontend.commands/*show-block-commands","frontend.commands/*matched-block-commands","chosen","frontend.commands/angle-bracket","frontend.components.editor/in-sidebar?","el","cljs.core/not","js/document","frontend.components.editor/page-search","state","frontend.handler.editor/*selected-text","frontend.state/sub","pos","frontend.state/get-editor-last-pos","input","goog.dom/getElement","current-pos","frontend.util.cursor/pos","edit-content","or__4253__auto__","sidebar?","q","cljs.core/deref","logseq.graph_parser.util.safe_subs","cljs.core/count","matched-pages","clojure.string/blank?","frontend.handler.editor/get-matched-pages","frontend.util/page-name-sanity-lc","G__70697","clojure.string/trim","cljs.core/empty?","cljs.core/cons","cljs.core.remove","cljs.core/nil?","cljs.core.sort_by","m","goog.string/caseInsensitiveStartsWith","cljs.core/rest","frontend.handler.page/on-chosen-handler","frontend.handler.page/page-not-exists-handler","page-name","chosen?","frontend.components.block/page-preview-trigger","frontend.components.search/highlight-exact-query","rum.core/build-defcs","frontend.components.editor/block-search-auto-complete","cljs.core.assoc","cljs.core.atom","vec__70702","cljs.core.nth","result","edit-block","_","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","matched-blocks","frontend.handler.editor/get-matched-blocks","_edit-block","rum.core/react","chosen-handler","frontend.handler.editor/block-on-chosen-handler","non-exist-block-handler","frontend.handler.editor/block-non-exist-handler","p__70700","map__70701","cljs.core/--destructure-map","page","uuid","repo","frontend.db/get-page-format","block","frontend.db.model/query-block-by-uuid","content","frontend.components.search/block-search-result-item","vec__70705","frontend.components.editor/block-search","frontend.state/clear-search-result!","_format","frontend.state/get-edit-block","cljs.core.subs","frontend.components.editor/template-search","matched-templates","frontend.handler.editor/get-matched-templates","non-exist-handler","_state","frontend.state/set-editor-show-template-search!","frontend.handler.editor/template-on-chosen-handler","p__70712","vec__70713","template","_block-db-id","daiquiri.core/create-element","daiquiri.interpreter/interpret","frontend.components.editor/mobile-bar-indent-outdent","indent?","icon","e","frontend.util/stop","frontend.handler.editor/indent-outdent","frontend.ui.icon","frontend.ui/icon-size","frontend.components.editor/mobile-bar-icons-keywords","frontend.components.editor/mobile-bar-commands-stats","cljs.core.mapv","name","frontend.components.editor/set-command-stats","key","cljs.core.keyword","counts","cljs.core.get_in","cljs.core.swap_BANG_","cljs.core/assoc-in","frontend.handler.config/set-config!","p__70717","vec__70718","frontend.components.editor/mobile-bar-command","command-handler","count?","event?","frontend.components.editor/mobile-bar-commands","_parent-state","parent-id","viewport-fn","temp__5720__auto__","frontend.util/make-el-cursor-position-into-center-viewport","cljs.core/zipmap","frontend.handler.editor/cycle-todo!","frontend.handler.editor/toggle-page-reference-embed","frontend.handler.editor/toggle-block-reference-embed","frontend.commands/simple-insert!","frontend.handler.editor/cycle-priority!","frontend.handler.editor/toggle-list!","frontend.mobile.camera/embed-photo","frontend.commands/insert-youtube-timestamp","frontend.handler.editor/html-link-format!","frontend.handler.history/undo!","frontend.handler.history/redo!","frontend.handler.editor/bold-format!","frontend.handler.editor/italics-format!","frontend.handler.editor/strike-through-format!","frontend.handler.editor/highlight-format!","cljs.core.into_array","iter__4652__auto__","s__70730","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__70732","cljs.core/chunk-buffer","i__70731","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__70729","cljs.core/chunk-rest","frontend.components.editor/mobile-bar","parent-state","config-toolbar-stats","frontend.state.get_config","commands","sorted-commands","cljs.core.comp","cljs.core/second","cljs.core/>","frontend.handler.editor/move-up-down","frontend.handler.editor.insert_new_block_BANG_","fexpr__70734","fexpr__70736","frontend.state/clear-edit!","frontend.components.editor/input","rum.core.local","frontend.mixins.event_mixin","frontend.mixins.on_key_down","input-value","input-option","frontend.state/state","vec__70765","map__70768","_id","on-submit","frontend.commands/*slash-caret-pos","G__70769","G__70770","G__70771","map__70752","s__70755","b__70757","i__70756","map__70758","iter__70754","map__70760","placeholder","type","autoFocus","input-item","cljs.core.merge","G__70759","G__70761","cljs.core/name","cljs.core/assoc","frontend.util/evalue","frontend.util/chrome?","cljs.core.dissoc","frontend.ui.button","G__70762","G__70763","G__70764","p__70772","map__70773","daiquiri.interpreter/element-attributes","daiquiri.util/join-classes","frontend.components.editor/absolute-modal","rum.core/static","cp","set-default-width?","top","left","rect","max-height","max-width","offset-top","vw-height","js/window.innerHeight","vw-width","js/window.innerWidth","to-max-height","delta-height","x__4336__auto__","y__4337__auto__","right-sidebar?","editing-key","cljs.core/keys","*el","rum.core/use-ref","rum.core.use_effect_BANG_","cnt","and__4251__auto__","js/document.querySelector","rum.core/deref","ofx","x-overflow-vw?","delta-width","pos-rect","frontend.util.cursor.get_caret_pos","frontend.state/get-input","y-diff","cljs.core/int?","editor","cljs.core._EQ_","frontend.components.editor/transition-cp","G__70777","G__70778","frontend.ui/css-transition","rum.core/mark-sync-update","frontend.components.editor/image-uploader","files","frontend.handler.editor/upload-asset","frontend.handler.editor/*asset-uploading?","uploading?","processing","frontend.handler.editor/*asset-uploading-process","frontend.ui/loading","frontend.util.format","frontend.components.editor/set-up-key-down!","frontend.handler.editor/keydown-not-matched-handler","frontend.components.editor/set-up-key-up!","input-id","search-timeout","frontend.mixins/on-key-up","frontend.handler.editor/keyup-handler","frontend.components.editor/search-timeout","frontend.components.editor/setup-key-listener!","map__70779","frontend.handler.editor/get-state","frontend.components.editor/starts-with?","clojure.string/starts-with?","frontend.components.editor/get-editor-style-class","clojure.string/includes?","G__70784","cljs.core/Keyword","frontend.components.editor/editor-row-height-unchanged?","last-key","frontend.state/get-last-key-code","cljs.core.not_EQ_","frontend.util.keycode/enter","frontend.util.keycode/enter-code","s__70787","b__70789","i__70788","vec__70790","iter__70786","vec__70795","frontend.components.editor/mock-textarea","e70798","frontend.handler.editor/handle-last-input","js/Error","_e","frontend.state/set-state!","idx","c","cljs.core.map_indexed","cljs.core/vector","clojure.string.split","frontend.components.editor/mock-textarea-wrapper","frontend.state/sub-edit-content","frontend.components.editor/animated-modal","component","*pos","G__70799","G__70800","frontend.components.editor/modals","G__70802","frontend.ui/transition-group","frontend.commands/*angle-bracket-caret-pos","frontend.components.datetime/date-picker","_pos","frontend.handler.editor/handle-command-input","frontend.extensions.zotero/zotero-search","p__70803","map__70804","frontend.components.editor/box","cljs.core/random-uuid","frontend.state/set-editor-args!","frontend.modules.shortcut.core/mixin","frontend.handler.editor.lifecycle/lifecycle","config","heading-class","frontend.mobile.footer/audio-record-cp","frontend.mobile.util/is-native-platform?","frontend.config/mobile?","frontend.ui/ls-textarea","frontend.state/enable-grammarly?","frontend.handler.editor/editor-on-click!","frontend.handler.editor/editor-on-change!","frontend.handler.editor/editor-on-paste!","frontend.handler.editor/editor-on-height-change!","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.components.editor\n  (:require [clojure.string :as string]\n            [goog.string :as gstring]\n            [frontend.commands :as commands\n             :refer [*angle-bracket-caret-pos *first-command-group *matched-block-commands *matched-commands *show-block-commands *show-commands *slash-caret-pos]]\n            [frontend.components.block :as block]\n            [frontend.components.datetime :as datetime-comp]\n            [frontend.components.search :as search]\n            [frontend.components.svg :as svg]\n            [frontend.mobile.camera :as mobile-camera]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.db.model :as db-model]\n            [frontend.extensions.zotero :as zotero]\n            [frontend.handler.editor :as editor-handler :refer [get-state]]\n            [frontend.handler.editor.lifecycle :as lifecycle]\n            [frontend.handler.page :as page-handler]\n            [frontend.mixins :as mixins]\n            [frontend.modules.shortcut.core :as shortcut]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.keycode :as keycode]\n            [logseq.graph-parser.util :as gp-util]\n            [goog.dom :as gdom]\n            [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.handler.history :as history]\n            [frontend.mobile.footer :as footer]\n            [frontend.handler.config :as config-handler]))\n\n(rum/defc commands < rum/reactive\n  [id format]\n  (let [matched (util/react *matched-commands)]\n    (when (util/react *show-commands)\n      (ui/auto-complete\n       matched\n       {:get-group-name\n        (fn [item]\n          (get *first-command-group (first item)))\n\n        :item-render\n        (fn [item]\n          (let [command-name (first item)\n                command-doc (get item 2)\n                doc (when (state/show-command-doc?) command-doc)]\n            (cond\n              (string? doc)\n              [:div {:title doc}\n               command-name]\n\n              (vector? doc)\n              [:div.has-help\n               command-name\n               (ui/tippy\n                {:html doc\n                 :interactive true\n                 :fixed-position? true\n                 :position \"right\"}\n\n                [:small (svg/help-circle)])]\n\n              :else\n              [:div command-name])))\n\n        :on-chosen\n        (fn [chosen-item]\n          (let [command (first chosen-item)]\n            (reset! commands/*current-command command)\n            (let [command-steps (get (into {} matched) command)\n                  restore-slash? (or\n                                  (contains? #{\"Today\" \"Yesterday\" \"Tomorrow\" \"Current time\"} command)\n                                  (and\n                                   (not (fn? command-steps))\n                                   (not (contains? (set (map first command-steps)) :editor/input))\n                                   (not (contains? #{\"Date picker\" \"Template\" \"Deadline\" \"Scheduled\" \"Upload an image\"} command))))]\n              (editor-handler/insert-command! id command-steps\n                                              format\n                                              {:restore? restore-slash?})\n              (state/pub-event! [:instrument {:type :editor/command-triggered\n                                              :payload {:command command}}]))))\n        :class\n        \"black\"}))))\n\n(rum/defc block-commands < rum/reactive\n  [id format]\n  (when (util/react *show-block-commands)\n    (let [matched (util/react *matched-block-commands)]\n      (ui/auto-complete\n       (map first matched)\n       {:on-chosen (fn [chosen]\n                     (editor-handler/insert-command! id (get (into {} matched) chosen)\n                                                     format\n                                                     {:last-pattern commands/angle-bracket}))\n        :class     \"black\"}))))\n\n(defn- in-sidebar? [el]\n  (not (.contains (.getElementById js/document \"left-container\") el)))\n\n(rum/defc page-search < rum/reactive\n  {:will-unmount (fn [state] (reset! editor-handler/*selected-text nil) state)}\n  \"Embedded page searching popup\"\n  [id format]\n  (when (state/sub :editor/show-page-search?)\n    (let [pos (state/get-editor-last-pos)\n          input (gdom/getElement id)]\n      (when input\n        (let [current-pos (cursor/pos input)\n              edit-content (or (state/sub [:editor/content id]) \"\")\n              sidebar? (in-sidebar? input)\n              q (or\n                 @editor-handler/*selected-text\n                 (when (state/sub :editor/show-page-search-hashtag?)\n                   (gp-util/safe-subs edit-content pos current-pos))\n                 (when (> (count edit-content) current-pos)\n                   (gp-util/safe-subs edit-content pos current-pos))\n                 \"\")\n              matched-pages (when-not (string/blank? q)\n                              (editor-handler/get-matched-pages q))\n              matched-pages (cond\n                              (contains? (set (map util/page-name-sanity-lc matched-pages)) (util/page-name-sanity-lc (string/trim q)))  ;; if there's a page name fully matched\n                              matched-pages\n\n                              (string/blank? q)\n                              nil\n\n                              (empty? matched-pages)\n                              (cons (str \"New page: \" q) matched-pages)\n\n                              ;; reorder, shortest and starts-with first.\n                              :else\n                              (let [matched-pages (remove nil? matched-pages)\n                                    matched-pages (sort-by\n                                                   (fn [m]\n                                                     [(not (gstring/caseInsensitiveStartsWith m q)) (count m)])\n                                                   matched-pages)]\n                                (if (gstring/caseInsensitiveStartsWith (first matched-pages) q)\n                                  (cons (first matched-pages)\n                                        (cons  (str \"New page: \" q) (rest matched-pages)))\n                                  (cons (str \"New page: \" q) matched-pages))))]\n          (ui/auto-complete\n           matched-pages\n           {:on-chosen   (page-handler/on-chosen-handler input id q pos format)\n            :on-enter    #(page-handler/page-not-exists-handler input id q current-pos)\n            :item-render (fn [page-name chosen?]\n                           [:div.preview-trigger-wrapper\n                            (block/page-preview-trigger\n                             {:children        [:div (search/highlight-exact-query page-name q)]\n                              :open?           chosen?\n                              :manual?         true\n                              :fixed-position? true\n                              :tippy-distance  24\n                              :tippy-position  (if sidebar? \"left\" \"right\")}\n                             page-name)])\n            :empty-placeholder [:div.text-gray-500.text-sm.px-4.py-2 \"Search for a page\"]\n            :class       \"black\"}))))))\n\n(rum/defcs block-search-auto-complete < rum/reactive\n  {:init (fn [state]\n           (assoc state ::result (atom nil)))\n   :did-update (fn [state]\n                 (let [result (::result state)\n                       [edit-block _ _ q] (:rum/args state)]\n                   (p/let [matched-blocks (when-not (string/blank? q)\n                                            (editor-handler/get-matched-blocks q (:block/uuid edit-block)))]\n                     (reset! result matched-blocks)))\n                 state)}\n  [state _edit-block input id q format]\n  (let [result (rum/react (get state ::result))\n        chosen-handler (editor-handler/block-on-chosen-handler input id q format)\n        non-exist-block-handler (editor-handler/block-non-exist-handler input)]\n    (when result\n      (ui/auto-complete\n       result\n       {:on-chosen   chosen-handler\n        :on-enter    non-exist-block-handler\n        :empty-placeholder   [:div.text-gray-500.pl-4.pr-4 \"Search for a block\"]\n        :item-render (fn [{:block/keys [page uuid]}]  ;; content returned from search engine is normalized\n                       (let [page (or (:block/original-name page)\n                                      (:block/name page))\n                             repo (state/sub :git/current-repo)\n                             format (db/get-page-format page)\n                             block (db-model/query-block-by-uuid uuid)\n                             content (:block/content block)]\n                         [:.py-2 (search/block-search-result-item repo uuid format content q :block)]))\n        :class       \"black\"}))))\n\n(rum/defcs block-search < rum/reactive\n  {:will-unmount (fn [state]\n                   (reset! editor-handler/*selected-text nil)\n                   (state/clear-search-result!)\n                   state)}\n  [state id _format]\n  (when (state/sub :editor/show-block-search?)\n    (let [pos (state/get-editor-last-pos)\n          input (gdom/getElement id)\n          [id format] (:rum/args state)\n          current-pos (cursor/pos input)\n          edit-content (state/sub [:editor/content id])\n          edit-block (state/get-edit-block)\n          q (or\n             @editor-handler/*selected-text\n             (when (> (count edit-content) current-pos)\n               (subs edit-content pos current-pos)))]\n      (when input\n        (block-search-auto-complete edit-block input id q format)))))\n\n(rum/defc template-search < rum/reactive\n  {:will-unmount (fn [state] (reset! editor-handler/*selected-text nil) state)}\n  [id _format]\n  (when (state/sub :editor/show-template-search?)\n    (let [pos (state/get-editor-last-pos)\n          input (gdom/getElement id)]\n      (when input\n        (let [current-pos (cursor/pos input)\n              edit-content (state/sub [:editor/content id])\n              q (or\n                 (when (>= (count edit-content) current-pos)\n                   (subs edit-content pos current-pos))\n                 \"\")\n              matched-templates (editor-handler/get-matched-templates q)\n              non-exist-handler (fn [_state]\n                                  (state/set-editor-show-template-search! false))]\n          (ui/auto-complete\n           matched-templates\n           {:on-chosen   (editor-handler/template-on-chosen-handler id)\n            :on-enter    non-exist-handler\n            :empty-placeholder [:div.text-gray-500.px-4.py-2.text-sm \"Search for a template\"]\n            :item-render (fn [[template _block-db-id]]\n                           template)\n            :class       \"black\"}))))))\n\n(rum/defc mobile-bar-indent-outdent [indent? icon]\n  [:div\n   [:button.bottom-action\n    {:on-mouse-down (fn [e]\n                      (util/stop e)\n                      (editor-handler/indent-outdent indent?))}\n    (ui/icon icon {:style {:fontSize ui/icon-size}})]])\n\n(def ^:private mobile-bar-icons-keywords\n  [:checkbox :brackets :parentheses :command :tag :a-b :list :camera\n   :brand-youtube :link :rotate :rotate-clockwise :code :bold :italic :strikethrough :paint])\n\n(def ^:private mobile-bar-commands-stats\n  (atom (into {}\n              (mapv (fn [name] [name {:counts 0}])\n                    mobile-bar-icons-keywords))))\n\n(defn set-command-stats [icon]\n  (let [key (keyword icon)\n        counts (get-in @mobile-bar-commands-stats [key :counts])]\n    (swap! mobile-bar-commands-stats\n           assoc-in [key :counts] (inc counts))\n    (config-handler/set-config!\n     :mobile/toolbar-stats @mobile-bar-commands-stats)))\n\n(rum/defc mobile-bar-command\n  [command-handler icon & [count? event?]]\n  [:div\n   [:button.bottom-action\n    {:on-mouse-down (fn [e]\n                      (util/stop e)\n                      (when count?\n                        (set-command-stats icon))\n                      (if event?\n                        (command-handler e)\n                        (command-handler)))}\n    (ui/icon icon {:style {:fontSize ui/icon-size}})]])\n\n(defn mobile-bar-commands\n  [_parent-state parent-id]\n  (let [viewport-fn (fn [] (when-let [input (gdom/getElement parent-id)]\n                             (util/make-el-cursor-position-into-center-viewport input)\n                             (.focus input)))]\n    (zipmap mobile-bar-icons-keywords\n     [(mobile-bar-command editor-handler/cycle-todo! \"checkbox\" true)\n      (mobile-bar-command #(editor-handler/toggle-page-reference-embed parent-id) \"brackets\" true)\n      (mobile-bar-command #(editor-handler/toggle-block-reference-embed parent-id) \"parentheses\" true)\n      (mobile-bar-command #(do (viewport-fn) (commands/simple-insert! parent-id \"/\" {})) \"command\" true)\n      (mobile-bar-command #(do (viewport-fn) (commands/simple-insert! parent-id \"#\" {})) \"tag\" true)\n      (mobile-bar-command editor-handler/cycle-priority! \"a-b\" true)\n      (mobile-bar-command editor-handler/toggle-list! \"list\" true)\n      (mobile-bar-command #(mobile-camera/embed-photo parent-id) \"camera\" true)\n      (mobile-bar-command commands/insert-youtube-timestamp \"brand-youtube\" true)\n      (mobile-bar-command editor-handler/html-link-format! \"link\" true)\n      (mobile-bar-command history/undo! \"rotate\" true true)\n      (mobile-bar-command history/redo! \"rotate-clockwise\" true true)\n      (mobile-bar-command #(do (viewport-fn) (commands/simple-insert! parent-id \"<\" {})) \"code\" true)\n      (mobile-bar-command editor-handler/bold-format! \"bold\" true)\n      (mobile-bar-command editor-handler/italics-format! \"italic\" true)\n      (mobile-bar-command editor-handler/strike-through-format! \"strikethrough\" true)\n      (mobile-bar-command editor-handler/highlight-format! \"paint\" true)])))\n\n(rum/defc mobile-bar < rum/reactive\n  [parent-state parent-id]\n  (when-let [config-toolbar-stats (:mobile/toolbar-stats (state/get-config))]\n   (reset! mobile-bar-commands-stats config-toolbar-stats))\n  (let [commands (mobile-bar-commands parent-state parent-id)\n        sorted-commands (sort-by (comp :counts second) > @mobile-bar-commands-stats)]\n    [:div#mobile-editor-toolbar.bg-base-2\n     [:div.toolbar-commands\n      (mobile-bar-indent-outdent false \"arrow-bar-left\")\n      (mobile-bar-indent-outdent true \"arrow-bar-right\")\n      (mobile-bar-command (editor-handler/move-up-down true) \"arrow-bar-to-up\")\n      (mobile-bar-command (editor-handler/move-up-down false) \"arrow-bar-to-down\")\n      (mobile-bar-command #(if (state/sub :document/mode?)\n                             (editor-handler/insert-new-block! nil)\n                             (commands/simple-insert! parent-id \"\\n\" {})) \"arrow-back\")\n      (for [command sorted-commands]\n        ((first command) commands))]\n     [:div.toolbar-hide-keyboard\n      (mobile-bar-command #(state/clear-edit!) \"keyboard-show\")]]))\n\n(rum/defcs input < rum/reactive\n  (rum/local {} ::input-value)\n  (mixins/event-mixin\n   (fn [state]\n     (mixins/on-key-down\n      state\n      {;; enter\n       13 (fn [state e]\n            (let [input-value (get state ::input-value)\n                  input-option (get @state/state :editor/show-input)]\n              (when (seq @input-value)\n                ;; no new line input\n                (util/stop e)\n                (let [[_id on-submit] (:rum/args state)\n                      {:keys [pos]} @*slash-caret-pos\n                      command (:command (first input-option))]\n                  (on-submit command @input-value pos))\n                (reset! input-value nil))))})))\n  [state _id on-submit]\n  (when-let [input-option (state/sub :editor/show-input)]\n    (let [{:keys [pos]} (util/react *slash-caret-pos)\n          input-value (get state ::input-value)]\n      (when (seq input-option)\n        (let [command (:command (first input-option))]\n          [:div.p-2.rounded-md.shadow-lg\n           (for [{:keys [id placeholder type autoFocus] :as input-item} input-option]\n             [:div.my-3 {:key id}\n              [:input.form-input.block.w-full.pl-2.sm:text-sm.sm:leading-5\n               (merge\n                (cond->\n                 {:key           (str \"modal-input-\" (name id))\n                  :id            (str \"modal-input-\" (name id))\n                  :type          (or type \"text\")\n                  :on-change     (fn [e]\n                                   (swap! input-value assoc id (util/evalue e)))\n                  :auto-complete (if (util/chrome?) \"chrome-off\" \"off\")}\n                  placeholder\n                  (assoc :placeholder placeholder)\n                  autoFocus\n                  (assoc :auto-focus true))\n                (dissoc input-item :id))]])\n           (ui/button\n            \"Submit\"\n            :on-click\n            (fn [e]\n              (util/stop e)\n              (on-submit command @input-value pos)))])))))\n\n(rum/defc absolute-modal < rum/static\n  [cp set-default-width? {:keys [top left rect]}]\n  (let [max-height 370\n        max-width 300\n        offset-top 24\n        vw-height js/window.innerHeight\n        vw-width js/window.innerWidth\n        to-max-height (if (and (seq rect) (> vw-height max-height))\n                        (let [delta-height (- vw-height (+ (:top rect) top offset-top))]\n                          (if (< delta-height max-height)\n                            (- (max (* 2 offset-top) delta-height) 16)\n                            max-height))\n                        max-height)\n        right-sidebar? (:ui/sidebar-open? @state/state)\n        editing-key    (first (keys (:editor/editing? @state/state)))\n        *el (rum/use-ref nil)\n        _ (rum/use-effect! (fn []\n                             (when-let [^js/HTMLElement cnt\n                                        (and right-sidebar? editing-key\n                                             (js/document.querySelector \"#main-content-container\"))]\n                               (when (.contains cnt (js/document.querySelector (str \"#\" editing-key)))\n                                 (let [el  (rum/deref *el)\n                                       ofx (- (.-scrollWidth cnt) (.-clientWidth cnt))]\n                                   (when (> ofx 0)\n                                     (set! (.-transform (.-style el)) (str \"translateX(-\" (+ ofx 20) \"px)\")))))))\n                           [right-sidebar? editing-key])\n        x-overflow-vw? (when (and (seq rect) (> vw-width max-width))\n                         (let [delta-width (- vw-width (+ (:left rect) left))]\n                           (< delta-width (* max-width 0.5))))\n        pos-rect (when (and (seq rect) editing-key)\n                   (:rect (cursor/get-caret-pos (state/get-input))))\n        y-diff (when pos-rect (- (:height pos-rect) (:height rect)))]\n    [:div.absolute.rounded-md.shadow-lg.absolute-modal\n     {:ref *el\n      :class (if x-overflow-vw? \"is-overflow-vw-x\" \"\")\n      :on-mouse-down (fn [e]\n                       (.stopPropagation e))\n      :style (merge\n              {:top        (+ top offset-top (if (int? y-diff) y-diff 0))\n               :max-height to-max-height\n               :max-width 700\n               ;; TODO: auto responsive fixed size\n               :width \"fit-content\"\n               :z-index    11}\n              (when set-default-width?\n                {:width max-width})\n              (let [^js/HTMLElement editor\n                    (js/document.querySelector \".editor-wrapper\")]\n                (if (<= (.-clientWidth editor) (+ left (if set-default-width? max-width 500)))\n                  {:right 0}\n                  {:left (if (and y-diff (= y-diff 0)) left 0)})))}\n     cp]))\n\n(rum/defc transition-cp < rum/reactive\n  [cp set-default-width? pos]\n  (when pos\n    (when-let [pos (rum/react pos)]\n      (ui/css-transition\n       {:class-names \"fade\"\n        :timeout     {:enter 500\n                      :exit  300}}\n       (absolute-modal cp set-default-width? pos)))))\n\n(rum/defc image-uploader < rum/reactive\n  [id format]\n  [:div.image-uploader\n   [:input\n    {:id        \"upload-file\"\n     :type      \"file\"\n     :on-change (fn [e]\n                  (let [files (.-files (.-target e))]\n                    (editor-handler/upload-asset id files format editor-handler/*asset-uploading? false)))\n     :hidden    true}]\n   #_:clj-kondo/ignore\n   (when-let [uploading? (util/react editor-handler/*asset-uploading?)]\n     (let [processing (util/react editor-handler/*asset-uploading-process)]\n       (transition-cp\n        [:div.flex.flex-row.align-center.rounded-md.shadow-sm.bg-base-2.px-1.py-1\n         (ui/loading\n          (util/format \"Uploading %s%\" (util/format \"%2d\" processing)))]\n        false\n        *slash-caret-pos)))])\n\n(defn- set-up-key-down!\n  [state format]\n  (mixins/on-key-down\n   state\n   {}\n   {:not-matched-handler (editor-handler/keydown-not-matched-handler format)}))\n\n(defn- set-up-key-up!\n  [state input input-id search-timeout]\n  (mixins/on-key-up\n   state\n   {}\n   (editor-handler/keyup-handler state input input-id search-timeout)))\n\n(def search-timeout (atom nil))\n\n(defn- setup-key-listener!\n  [state]\n  (let [{:keys [id format]} (get-state)\n        input-id id\n        input (gdom/getElement input-id)]\n    (set-up-key-down! state format)\n    (set-up-key-up! state input input-id search-timeout)))\n\n(def starts-with? clojure.string/starts-with?)\n\n(defn get-editor-style-class\n  \"Get textarea css class according to it's content\"\n  [content format]\n  (let [content (if content (str content) \"\")]\n    ;; as the function is binding to the editor content, optimization is welcome\n    (str\n     (if (or (> (.-length content) 1000)\n             (string/includes? content \"\\n\"))\n       \"multiline-block\"\n       \"uniline-block\")\n     \" \"\n     (case format\n       :markdown\n       (cond\n         (starts-with? content \"# \") \"h1\"\n         (starts-with? content \"## \") \"h2\"\n         (starts-with? content \"### \") \"h3\"\n         (starts-with? content \"#### \") \"h4\"\n         (starts-with? content \"##### \") \"h5\"\n         (starts-with? content \"###### \") \"h6\"\n         (and (starts-with? content \"---\\n\") (.endsWith content \"\\n---\")) \"page-properties\"\n         :else \"normal-block\")\n       ;; other formats\n       (cond\n         (and (starts-with? content \"---\\n\") (.endsWith content \"\\n---\")) \"page-properties\"\n         :else \"normal-block\")))))\n\n(defn editor-row-height-unchanged?\n  \"Check if the row height of editor textarea is changed, which happens when font-size changed\"\n  []\n  ;; FIXME: assuming enter key is the only trigger of the height changing (under markdown editing of headlines)\n  ;; FIXME: looking for an elegant & robust way to track the change of font-size, or wait for our own WYSIWYG text area\n  (let [last-key (state/get-last-key-code)]\n    (and (not= keycode/enter (:key-code last-key))\n         (not= keycode/enter-code (:code last-key)))))\n\n(rum/defc mock-textarea <\n  rum/static\n  {:did-update\n   (fn [state]\n     (when-not (:editor/on-paste? @state/state)\n       (try (editor-handler/handle-last-input)\n            (catch js/Error _e\n              nil)))\n     (state/set-state! :editor/on-paste? false)\n     state)}\n  [content]\n  [:div#mock-text\n   {:style {:width \"100%\"\n            :height \"100%\"\n            :position \"absolute\"\n            :visibility \"hidden\"\n            :top 0\n            :left 0}}\n   (let [content (str content \"0\")]\n     (for [[idx c] (map-indexed\n                    vector\n                    (string/split content \"\"))]\n       (if (= c \"\\n\")\n         [:span {:id (str \"mock-text_\" idx)\n                 :key idx} \"0\" [:br]]\n         [:span {:id (str \"mock-text_\" idx)\n                 :key idx} c])))])\n\n(rum/defc mock-textarea-wrapper < rum/reactive\n  []\n  (let [content (state/sub-edit-content)]\n    (mock-textarea content)))\n\n(defn animated-modal\n  [key component set-default-width? *pos]\n  (when *pos\n    (ui/css-transition\n     {:key key\n      :class-names {:enter \"origin-top-left opacity-0 transform scale-95\"\n                    :enter-done \"origin-top-left transition opacity-100 transform scale-100\"\n                    :exit \"origin-top-left transition opacity-0 transform scale-95\"}\n      :timeout {:enter 0\n                :exit 150}}\n     (fn [_]\n       (absolute-modal\n        component\n        set-default-width?\n        *pos)))))\n\n(rum/defc modals < rum/reactive\n  \"React to atom changes, find and render the correct modal\"\n  [id format]\n  (ui/transition-group\n   (cond\n     (and (util/react *show-commands)\n          (not (state/sub :editor/show-page-search?))\n          (not (state/sub :editor/show-block-search?))\n          (not (state/sub :editor/show-template-search?))\n          (not (state/sub :editor/show-input))\n          (not (state/sub :editor/show-zotero))\n          (not (state/sub :editor/show-date-picker?)))\n     (animated-modal \"commands\" (commands id format) true (util/react *slash-caret-pos))\n\n     (and (util/react *show-block-commands) @*angle-bracket-caret-pos)\n     (animated-modal \"block-commands\" (block-commands id format) true (util/react *angle-bracket-caret-pos))\n\n     (state/sub :editor/show-page-search?)\n     (animated-modal \"page-search\" (page-search id format) true (util/react *slash-caret-pos))\n\n     (state/sub :editor/show-block-search?)\n     (animated-modal \"block-search\" (block-search id format) false (util/react *slash-caret-pos))\n\n     (state/sub :editor/show-template-search?)\n     (animated-modal \"template-search\" (template-search id format) true (util/react *slash-caret-pos))\n\n     (state/sub :editor/show-date-picker?)\n     (animated-modal \"date-picker\" (datetime-comp/date-picker id format nil) false (util/react *slash-caret-pos))\n\n     (state/sub :editor/show-input)\n     (animated-modal \"input\" (input id\n                                    (fn [command m _pos]\n                                      (editor-handler/handle-command-input command id format m)))\n                     true (util/react *slash-caret-pos))\n\n     (state/sub :editor/show-zotero)\n     (animated-modal \"zotero-search\" (zotero/zotero-search id) false (util/react *slash-caret-pos))\n\n     :else\n     nil)))\n\n(rum/defcs box < rum/reactive\n  {:init (fn [state]\n           (assoc state ::heading-level (:heading-level (first (:rum/args state)))\n                  ::id (str (random-uuid))))\n   :did-mount (fn [state]\n                (state/set-editor-args! (:rum/args state))\n                state)}\n  (mixins/event-mixin setup-key-listener!)\n  (shortcut/mixin :shortcut.handler/block-editing-only)\n  lifecycle/lifecycle\n  [state {:keys [format block]} id config]\n  (let [content (state/sub-edit-content)\n        heading-class (get-editor-style-class content format)]\n    [:div.editor-inner {:class (if block \"block-editor\" \"non-block-editor\")}\n\n     (when (= (state/sub :editor/record-status) \"RECORDING\")\n       [:div#audio-record-toolbar\n        (footer/audio-record-cp)])\n\n     (when (and (or (mobile-util/is-native-platform?)\n                    config/mobile?)\n                (not (:review-cards? config)))\n       (mobile-bar state id))\n\n     (ui/ls-textarea\n      {:id                id\n       :cacheMeasurements (editor-row-height-unchanged?) ;; check when content updated (as the content variable is binded)\n       :default-value     (or content \"\")\n       :minRows           (if (state/enable-grammarly?) 2 1)\n       :on-click          (editor-handler/editor-on-click! id)\n       :on-change         (editor-handler/editor-on-change! block id search-timeout)\n       :on-paste          (editor-handler/editor-on-paste! id)\n       :on-height-change  (editor-handler/editor-on-height-change! id)\n       :auto-focus        false\n       :class             heading-class})\n\n     (mock-textarea-wrapper)\n     (modals id format)\n\n     (when format\n       (image-uploader id format))]))\n"]}