{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$de$parsers$DEMonthNameLittleEndianParser.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,qFAAA,CAA0G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,QAAUN,OAAA,CAAQ,wDAAR,CAAhB,CACMO,YAAcP,OAAA,CAAQ,2DAAR,CADpB,CAEMQ,YAAcR,OAAA,CAAQ,2DAAR,CACdS,OAAAA,CAAYT,OAAA,CAAQ,oDAAR,CACZU;OAAAA,CAAmCV,OAAA,CAAQ,oFAAR,CACzC,OAAMW,QAAU,IAAIC,MAAJ,CAAW,iHAAX,CAIZ,IAAIH,MAAUI,CAAAA,eAAV,CAA0BN,WAAYO,CAAAA,gBAAtC,CAAJ,GAJY,CAKZ,qBAAqBN,WAAYO,CAAAA,YAAjC,kBALY,CAMX,cANW,CAMC,GAND,CAWhB,MAAMC,8BAAN,QAA4CN,QAAiCO,CAAAA,sCAA7E,CACIC,YAAY,EAAG,CACX,MAAOP,QADI,CAGfQ,YAAY,CAACC,OAAD;AAAUC,KAAV,CAAiB,CACzB,MAAMC,OAASF,OAAQG,CAAAA,mBAAR,CAA4BF,KAAMG,CAAAA,KAAlC,CAAyCH,KAAA,CAAM,CAAN,CAAzC,CAAf,CACMI,MAAQlB,WAAYO,CAAAA,gBAAZ,CAA6BO,KAAA,CAR1BK,CAQ0B,CAAwBC,CAAAA,WAAxB,EAA7B,CADd,CAEMC,IAAMC,QAAA,CAASR,KAAA,CAXVS,CAWU,CAAT,CACZ,IAAU,EAAV,CAAIF,GAAJ,CAEI,MADAP,MAAMG,CAAAA,KACC,EADqBH,KAAA,CAbrBS,CAaqB,CAAkBC,CAAAA,MACvC,CAAA,IAEXT,OAAOU,CAAAA,KAAMC,CAAAA,MAAb,CAAoB,OAApB,CAA6BR,KAA7B,CACAH,OAAOU,CAAAA,KAAMC,CAAAA,MAAb,CAAoB,KAApB,CAA2BL,GAA3B,CACIP,MAAA,CAfOa,CAeP,CAAJ,EACUC,OACN,CADmB3B,WAAY4B,CAAAA,SAAZ,CAAsBf,KAAA,CAhBlCa,CAgBkC,CAAtB,CACnB,CAAAZ,MAAOU,CAAAA,KAAMC,CAAAA,MAAb,CAAoB,MAApB,CAA4BE,OAA5B,CAFJ,GAKUE,OACN,CADa/B,OAAQgC,CAAAA,oBAAR,CAA6BlB,OAAQmB,CAAAA,OAArC,CAA8CX,GAA9C,CAAmDH,KAAnD,CACb,CAAAH,MAAOU,CAAAA,KAAMQ,CAAAA,KAAb,CAAmB,MAAnB,CAA2BH,OAA3B,CANJ,CAQIhB,MAAA,CAzBUoB,CAyBV,CAAJ,GACUC,KAEN,CAFgBb,QAAA,CAASR,KAAA,CA1BfoB,CA0Be,CAAT,CAEhB,CADAnB,MAAOqB,CAAAA,GACP;AADarB,MAAOU,CAAAA,KAAMY,CAAAA,KAAb,EACb,CAAAtB,MAAOqB,CAAAA,GAAIV,CAAAA,MAAX,CAAkB,KAAlB,CAAyBS,KAAzB,CAHJ,CAKA,OAAOpB,OAvBkB,CAJjC,CA8BApB,OAAQ2C,CAAAA,OAAR,CAAkB7B,6BAjDgI;",
"sources":["node_modules/chrono-node/dist/locales/de/parsers/DEMonthNameLittleEndianParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$de$parsers$DEMonthNameLittleEndianParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst years_1 = require(\"../../../calculation/years\");\nconst constants_1 = require(\"../constants\");\nconst constants_2 = require(\"../constants\");\nconst pattern_1 = require(\"../../../utils/pattern\");\nconst AbstractParserWithWordBoundary_1 = require(\"../../../common/parsers/AbstractParserWithWordBoundary\");\nconst PATTERN = new RegExp(\"(?:am\\\\s*?)?\" +\n    \"(?:den\\\\s*?)?\" +\n    `([0-9]{1,2})\\\\.` +\n    `(?:\\\\s*(?:bis(?:\\\\s*(?:am|zum))?|\\\\-|\\\\\u2013|\\\\s)\\\\s*([0-9]{1,2})\\\\.?)?\\\\s*` +\n    `(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})` +\n    `(?:(?:-|/|,?\\\\s*)(${constants_2.YEAR_PATTERN}(?![^\\\\s]\\\\d)))?` +\n    `(?=\\\\W|$)`, \"i\");\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\nclass DEMonthNameLittleEndianParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const result = context.createParsingResult(match.index, match[0]);\n        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseInt(match[DATE_GROUP]);\n        if (day > 31) {\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n        if (match[YEAR_GROUP]) {\n            const yearNumber = constants_2.parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        }\n        else {\n            const year = years_1.findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseInt(match[DATE_TO_GROUP]);\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n        return result;\n    }\n}\nexports.default = DEMonthNameLittleEndianParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","years_1","constants_1","constants_2","pattern_1","AbstractParserWithWordBoundary_1","PATTERN","RegExp","matchAnyPattern","MONTH_DICTIONARY","YEAR_PATTERN","DEMonthNameLittleEndianParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","result","createParsingResult","index","month","MONTH_NAME_GROUP","toLowerCase","day","parseInt","DATE_GROUP","length","start","assign","YEAR_GROUP","yearNumber","parseYear","year","findYearClosestToRef","refDate","imply","DATE_TO_GROUP","endDate","end","clone","default"]
}
