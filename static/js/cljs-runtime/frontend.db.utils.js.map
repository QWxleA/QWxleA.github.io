{"version":3,"sources":["frontend/db/utils.cljs"],"mappings":"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","names":["frontend.db.utils/db->string","db","datascript.transit/write-transit-str","frontend.db.utils/db->json","js/JSON.stringify","cljs.core.into_array","iter__5520__auto__","s__32950","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__32952","cljs.core/chunk-buffer","i__32951","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32949","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","d","datascript.core.datoms","cljs.core/name","frontend.db.utils/db->edn-str","cljs.core.pr_str","frontend.db.utils/string->db","s","datascript.transit/read-transit-str","frontend.db.utils/seq-flatten","col","cljs.core/flatten","frontend.db.utils/group-by-page","blocks","G__32953","cljs.core/group-by","frontend.db.utils/get-tx-id","tx-report","cljs.core.get_in","frontend.db.utils/get-max-tx-id","frontend.db.utils/date->int","date","cljs.core/parse-long","clojure.string/replace","frontend.date.ymd","var_args","G__32955","frontend.db.utils/entity","js/Error","id-or-lookup-ref","frontend.db.utils.entity","frontend.state/get-current-repo","repo","frontend.db.conn.get_db","datascript.core/entity","G__32957","frontend.db.utils/pull","eid","frontend.db.utils.pull","selector","e32958","datascript.core/pull","_e","G__32960","frontend.db.utils/pull-many","eids","frontend.db.utils.pull_many","e32961","datascript.core/pull-many","e","js/console.error","G__32963","frontend.db.utils/transact!","tx-data","frontend.db.utils.transact_BANG_","repo-url","tx-meta","frontend.config/publishing?","logseq.graph-parser.util/remove-nils","cljs.core.remove","cljs.core/nil?","conn","datascript.core.transact_BANG_","cljs.core/vec","G__32965","frontend.db.utils/get-key-value","key","frontend.db.utils.get_key_value","G__32966","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.db.utils/q","seq32967","G__32968","cljs.core/next","self__5751__auto__","query","inputs","cljs.core.apply","datascript.core/q","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.db.utils\n  \"Some utils are required by other namespace in frontend.db package.\"\n  (:require [datascript.core :as d]\n            [frontend.state :as state]\n            [clojure.string :as string]\n            [datascript.transit :as dt]\n            [frontend.date :as date]\n            [frontend.db.conn :as conn]\n            [frontend.config :as config]\n            [logseq.graph-parser.util :as gp-util]))\n\n;; transit serialization\n\n(defn db->string [db]\n  (dt/write-transit-str db))\n\n(defn db->json [db]\n  (js/JSON.stringify\n   (into-array\n    (for [d (d/datoms db :eavt)]\n      #js [(:e d) (name (:a d)) (:v d)]))))\n\n(defn db->edn-str [db]\n  (pr-str db))\n\n(defn string->db [s]\n  (dt/read-transit-str s))\n\n(defn seq-flatten [col]\n  (flatten (seq col)))\n\n(defn group-by-page\n  [blocks]\n  (if (:block/page (first blocks))\n    (some->> blocks\n             (group-by :block/page))\n    blocks))\n\n(defn get-tx-id [tx-report]\n  (get-in tx-report [:tempids :db/current-tx]))\n\n(defn get-max-tx-id\n  [db]\n  (:max-tx db))\n\n(defn date->int\n  [date]\n  (parse-long\n   (string/replace (date/ymd date) \"/\" \"\")))\n\n(defn entity\n  ([id-or-lookup-ref]\n   (entity (state/get-current-repo) id-or-lookup-ref))\n  ([repo id-or-lookup-ref]\n   (when-let [db (conn/get-db repo)]\n     (d/entity db id-or-lookup-ref))))\n\n(defn pull\n  ([eid]\n   (pull (state/get-current-repo) '[*] eid))\n  ([selector eid]\n   (pull (state/get-current-repo) selector eid))\n  ([repo selector eid]\n   (when-let [db (conn/get-db repo)]\n     (try\n       (d/pull db\n               selector\n               eid)\n       (catch js/Error _e\n         nil)))))\n\n(defn pull-many\n  ([eids]\n   (pull-many '[*] eids))\n  ([selector eids]\n   (pull-many (state/get-current-repo) selector eids))\n  ([repo selector eids]\n   (when-let [db (conn/get-db repo)]\n     (try\n       (d/pull-many db selector eids)\n       (catch js/Error e\n         (js/console.error e))))))\n\n(defn transact!\n  ([tx-data]\n   (transact! (state/get-current-repo) tx-data))\n  ([repo-url tx-data]\n   (transact! repo-url tx-data nil))\n  ([repo-url tx-data tx-meta]\n   (when-not config/publishing?\n     (let [tx-data (->> (gp-util/remove-nils tx-data)\n                        (remove nil?))]\n       (when (seq tx-data)\n         (when-let [conn (conn/get-db repo-url false)]\n           (if tx-meta\n             (d/transact! conn (vec tx-data) tx-meta)\n             (d/transact! conn (vec tx-data)))))))))\n\n(defn get-key-value\n  ([key]\n   (get-key-value (state/get-current-repo) key))\n  ([repo-url key]\n   (when-let [db (conn/get-db repo-url)]\n     (some-> (d/entity db key)\n             key))))\n\n(defn q\n  [query & inputs]\n  (when-let [repo (state/get-current-repo)]\n    (apply d/q query (conn/get-db repo) inputs)))\n"]}