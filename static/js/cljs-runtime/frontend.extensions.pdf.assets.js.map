{"version":3,"sources":["frontend/extensions/pdf/assets.cljs"],"mappings":"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","names":["frontend.extensions.pdf.assets/hls-file?","filename","and__5041__auto__","clojure.string/starts-with?","frontend.extensions.pdf.assets/inflate-asset","full-path","frontend.util/node-path","web-link?","ext-name","frontend.util/get-file-ext","url","frontend.util/absolute-path?","clojure.string/replace","logseq.graph-parser.config/local-assets-dir","G__48215","G__48216","frontend.config/get-repo-dir","frontend.state/get-current-repo","temp__5720__auto__","key","cljs.core/hash","cljs.core._EQ_","cljs.core.subs","cljs.core/count","p__48218","map__48220","cljs.core/--destructure-map","cljs.core.get","frontend.extensions.pdf.assets/load-hls-data$","hls-file","repo-cur","repo-dir","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","_","frontend.fs.create_if_not_exists","res","frontend.fs.read_file","data","cljs.reader.read_string","p__48223","map__48224","frontend.extensions.pdf.assets/persist-hls-data$","highlights","cljs.core.pr_str","frontend.fs/write-file!","frontend.extensions.pdf.assets/resolve-hls-data-by-key$","target-key","frontend.extensions.pdf.assets/area-highlight?","hl","cljs.core.get_in","p__48226","map__48227","frontend.extensions.pdf.assets/persist-hl-area-image$","viewer","current","new-hl","old-hl","top","left","width","height","canvas","doc","canvas'","dpr","js/window.devicePixelRatio","dw","dh","ctx","callback","png","promesa.core.catch$","p__48230","map__48231","js/console.time","fstamp","old-fstamp","fname","fdir","frontend.fs/mkdir-if-not-exists","new-fpath","old-fpath","cljs.core.apply","frontend.fs/rename!","p1__48225#","cljs.core.map","js/console.timeEnd","err","js/console.error","frontend.extensions.pdf.assets/update-hl-area-block!","highlight","block","frontend.db.model/get-block-by-uuid","frontend.handler.editor/set-block-property!","frontend.extensions.pdf.assets/unlink-hl-area-image$","_viewer","fkey","fpath","G__48243","G__48244","frontend.fs/unlink!","frontend.extensions.pdf.assets/resolve-ref-page","pdf-current","page-name","page","frontend.db.model/get-page","format","frontend.state.get_preferred_format","cljs.core/not","asset-dir","clojure.string/includes?","cljs.core/last","clojure.string.split","label","frontend.handler.page.create_BANG_","G__48245","cljs.core/Keyword","frontend.util.format","p__48255","map__48256","frontend.extensions.pdf.assets/create-ref-block!","id","content","cljs.core/deref","frontend.state/state","ref-page","temp__5718__auto__","ref-block","js/console.debug","p1__48254#","text","wrap-props","stamp","cljs.core.assoc","frontend.handler.editor/api-insert-new-block!","p__48258","map__48259","frontend.extensions.pdf.assets/del-ref-block!","repo","frontend.handler.editor/delete-block-aux!","frontend.extensions.pdf.assets/copy-hl-ref!","frontend.util.copy_to_clipboard_BANG_","frontend.extensions.pdf.assets/open-block-ref!","frontend.db.utils.pull","file-path","hls","matched","p1__48261#","medley.core.find_first","frontend.state/set-state!","p__48268","map__48269","frontend.extensions.pdf.assets/goto-block-ref!","reitit.frontend.easy.push_state","var_args","G__48272","frontend.extensions.pdf.assets/goto-annotations-page!","js/Error","frontend.extensions.pdf.assets.goto_annotations_page_BANG_","name","cljs.core/+","rum.core/lazy-build","rum.core/build-defc","daiquiri.interpreter/interpret","frontend.extensions.pdf.assets/area-display","props","group-key","clojure.string/replace-first","hl-page","asset-path","frontend.handler.editor/make-asset-url","frontend.extensions.pdf.assets/fix-local-asset-filename","clojure.string/blank?","local-asset?","cljs.core/re-find","daiquiri.core/create-element","frontend.extensions.pdf.assets/human-hls-filename-display","title"],"sourcesContent":["(ns frontend.extensions.pdf.assets\n  (:require [cljs.reader :as reader]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.db.model :as db-model]\n            [frontend.db.utils :as db-utils]\n            [frontend.fs :as fs]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.page :as page-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.config :as gp-config]\n            [medley.core :as medley]\n            [promesa.core :as p]\n            [reitit.frontend.easy :as rfe]\n            [rum.core :as rum]))\n\n(defn hls-file?\n  [filename]\n  (and filename (string? filename) (string/starts-with? filename \"hls__\")))\n\n(defn inflate-asset\n  [full-path]\n  (let [filename (util/node-path.basename full-path)\n        web-link? (string/starts-with? full-path \"http\")\n        ext-name (util/get-file-ext filename)\n        url (cond\n              web-link?\n              full-path\n\n              (util/absolute-path? full-path)\n              (str \"file://\" full-path)\n\n              (string/starts-with? full-path \"file:/\")\n              full-path\n\n              :else\n              (let [full-path (string/replace full-path #\"^[.\\/\\\\]+\" \"\")\n                    full-path (if-not (string/starts-with? full-path gp-config/local-assets-dir)\n                                (util/node-path.join gp-config/local-assets-dir full-path)\n                                full-path)]\n                (str \"file://\"  ;; TODO: bfs\n                     (util/node-path.join\n                       (config/get-repo-dir (state/get-current-repo))\n                       full-path))))]\n    (when-let [key\n               (if web-link?\n                 (str (hash url))\n                 (and\n                   (= ext-name \"pdf\")\n                   (subs filename 0 (- (count filename) 4))))]\n      {:key      key\n       :identity (subs key (- (count key) 15))\n       :filename filename\n       :url      url\n       :hls-file (str \"assets/\" key \".edn\")})))\n\n(defn load-hls-data$\n  [{:keys [hls-file]}]\n  (when hls-file\n    (let [repo-cur (state/get-current-repo)\n          repo-dir (config/get-repo-dir repo-cur)]\n      (p/let [_ (fs/create-if-not-exists repo-cur repo-dir hls-file \"{:highlights []}\")\n              res (fs/read-file repo-dir hls-file)\n              data (if res (reader/read-string res) {})]\n        data))))\n\n(defn persist-hls-data$\n  [{:keys [hls-file]} highlights]\n  (when hls-file\n    (let [repo-cur (state/get-current-repo)\n          repo-dir (config/get-repo-dir repo-cur)\n          data (pr-str {:highlights highlights})]\n      (fs/write-file! repo-cur repo-dir hls-file data {:skip-compare? true}))))\n\n(defn resolve-hls-data-by-key$\n  [target-key]\n  ;; TODO: fuzzy match\n  (when-let [hls-file (and target-key (str gp-config/local-assets-dir \"/\" target-key \".edn\"))]\n    (load-hls-data$ {:hls-file hls-file})))\n\n(defn area-highlight?\n  [hl]\n  (and hl (not (nil? (get-in hl [:content :image])))))\n\n(defn persist-hl-area-image$\n  [^js viewer current new-hl old-hl {:keys [top left width height]}]\n  (when-let [^js canvas (and (:key current) (.-canvas (.getPageView viewer (dec (:page new-hl)))))]\n    (let [^js doc (.-ownerDocument canvas)\n          ^js canvas' (.createElement doc \"canvas\")\n          dpr js/window.devicePixelRatio\n          repo-cur (state/get-current-repo)\n          repo-dir (config/get-repo-dir repo-cur)\n          dw (* dpr width)\n          dh (* dpr height)]\n\n      (set! (. canvas' -width) dw)\n      (set! (. canvas' -height) dh)\n\n      (when-let [^js ctx (.getContext canvas' \"2d\" #js{:alpha false})]\n        (set! (. ctx -imageSmoothingEnabled) false)\n        (.drawImage\n          ctx canvas\n          (* left dpr) (* top dpr) (* width dpr) (* height dpr)\n          0 0 dw dh)\n\n        (let [callback (fn [^js png]\n                         ;; write image file\n                         (p/catch\n                           (p/let [_ (js/console.time :write-area-image)\n                                   ^js png (.arrayBuffer png)\n                                   {:keys [key]} current\n                                   ;; dir\n                                   fstamp (get-in new-hl [:content :image])\n                                   old-fstamp (and old-hl (get-in old-hl [:content :image]))\n                                   fname (str (:page new-hl) \"_\" (:id new-hl))\n                                   fdir (str gp-config/local-assets-dir \"/\" key)\n                                   _ (fs/mkdir-if-not-exists (str repo-dir \"/\" fdir))\n                                   new-fpath (str fdir \"/\" fname \"_\" fstamp \".png\")\n                                   old-fpath (and old-fstamp (str fdir \"/\" fname \"_\" old-fstamp \".png\"))\n                                   _ (and old-fpath (apply fs/rename! repo-cur (map #(util/node-path.join repo-dir %) [old-fpath new-fpath])))\n                                   _ (fs/write-file! repo-cur repo-dir new-fpath png {:skip-compare? true})]\n\n                             (js/console.timeEnd :write-area-image))\n\n                           (fn [err]\n                             (js/console.error \"[write area image Error]\" err))))]\n\n          (.toBlob canvas' callback))\n        ))))\n\n(defn update-hl-area-block!\n  [highlight]\n  (when-let [block (and (area-highlight? highlight)\n                        (db-model/get-block-by-uuid (:id highlight)))]\n    (editor-handler/set-block-property!\n      (:block/uuid block) :hl-stamp (get-in highlight [:content :image]))))\n\n(defn unlink-hl-area-image$\n  [^js _viewer current hl]\n  (when-let [fkey (and (area-highlight? hl) (:key current))]\n    (let [repo-cur (state/get-current-repo)\n          repo-dir (config/get-repo-dir repo-cur)\n          fstamp (get-in hl [:content :image])\n          fname (str (:page hl) \"_\" (:id hl))\n          fdir (str gp-config/local-assets-dir \"/\" fkey)\n          fpath (util/node-path.join repo-dir (str fdir \"/\" fname \"_\" fstamp \".png\"))]\n\n      (fs/unlink! repo-cur fpath {}))))\n\n(defn resolve-ref-page\n  [pdf-current]\n  (let [page-name (:key pdf-current)\n        page-name (str \"hls__\" page-name)\n        page (db-model/get-page page-name)\n        url (:url pdf-current)\n        format (state/get-preferred-format)]\n    (if-not page\n      (let [repo-dir (config/get-repo-dir (state/get-current-repo))\n            asset-dir (util/node-path.join repo-dir gp-config/local-assets-dir)\n            url (if (string/includes? url asset-dir)\n                  (str \"..\" (last (string/split url repo-dir)))\n                  url)\n            label (:filename pdf-current)]\n        (page-handler/create! page-name {:redirect?        false :create-first-block? false\n                                         :split-namespace? false\n                                         :format           format\n                                         :properties       {:file      (case format\n                                                                         :markdown\n                                                                         (util/format \"[%s](%s)\" label url)\n\n                                                                         :org\n                                                                         (util/format \"[[%s][%s]]\" url label)\n\n                                                                         url)\n                                                            :file-path url}})\n        (db-model/get-page page-name))\n      page)))\n\n(defn create-ref-block!\n  [{:keys [id content page]}]\n  (when-let [pdf-current (:pdf/current @state/state)]\n    (when-let [ref-page (resolve-ref-page pdf-current)]\n      (if-let [ref-block (db-model/get-block-by-uuid id)]\n        (do\n          (js/console.debug \"[existed ref block]\" ref-block)\n          ref-block)\n        (let [text (:text content)\n              wrap-props #(if-let [stamp (:image content)]\n                            (assoc % :hl-type \"area\" :hl-stamp stamp) %)]\n\n          (editor-handler/api-insert-new-block!\n            text {:page        (:block/name ref-page)\n                  :custom-uuid id\n                  :properties  (wrap-props\n                                 {:ls-type \"annotation\"\n                                  :hl-page page\n                                  ;; force custom uuid\n                                  :id      (str id)})}))))))\n\n(defn del-ref-block!\n  [{:keys [id]}]\n  #_:clj-kondo/ignore\n  (when-let [repo (state/get-current-repo)]\n    (when-let [block (db-model/get-block-by-uuid id)]\n      (editor-handler/delete-block-aux! block true))))\n\n(defn copy-hl-ref!\n  [highlight]\n  (when-let [ref-block (create-ref-block! highlight)]\n    (util/copy-to-clipboard! (str \"((\" (:block/uuid ref-block) \"))\"))))\n\n(defn open-block-ref!\n  [block]\n  (let [id (:block/uuid block)\n        page (db-utils/pull (:db/id (:block/page block)))\n        page-name (:block/original-name page)\n        file-path (:file-path (:block/properties page))]\n    (when-let [target-key (and page-name (subs page-name 5))]\n      (p/let [hls (resolve-hls-data-by-key$ target-key)\n              hls (and hls (:highlights hls))]\n        (let [file-path (if file-path file-path (str target-key \".pdf\"))]\n          (if-let [matched (and hls (medley/find-first #(= id (:id %)) hls))]\n            (do\n              (state/set-state! :pdf/ref-highlight matched)\n              ;; open pdf viewer\n              (state/set-state! :pdf/current (inflate-asset file-path)))\n            (js/console.debug \"[Unmatched highlight ref]\" block)))))))\n\n(defn goto-block-ref!\n  [{:keys [id]}]\n  (when id\n    (rfe/push-state :page {:name (str id)})))\n\n(defn goto-annotations-page!\n  ([current] (goto-annotations-page! current nil))\n  ([current id]\n   (when-let [name (:key current)]\n     (rfe/push-state :page {:name (str \"hls__\" name)} (if id {:anchor (str \"block-content-\" + id)} nil)))))\n\n(rum/defc area-display\n  [block stamp]\n  (let [id (:block/uuid block)\n        props (:block/properties block)]\n    (when-let [page (db-utils/pull (:db/id (:block/page block)))]\n      (when-let [group-key (string/replace-first (:block/original-name page) #\"^hls__\" \"\")]\n        (when-let [hl-page (:hl-page props)]\n          (let [asset-path (editor-handler/make-asset-url\n                             (str \"/\" gp-config/local-assets-dir \"/\" group-key \"/\" (str hl-page \"_\" id \"_\" stamp \".png\")))]\n            [:span.hl-area\n             [:img {:src asset-path}]]))))))\n\n(defn fix-local-asset-filename\n  [filename]\n  (when-not (string/blank? filename)\n    (let [local-asset? (re-find #\"[0-9]{13}_\\d$\" filename)]\n      (-> filename\n          (subs 0 (- (count filename) (if local-asset? 15 0)))\n          (string/replace #\"^hls__\" \"\")\n          (string/replace \"_\" \" \")))))\n\n(rum/defc human-hls-filename-display\n  [title]\n  (when (string/starts-with? title \"hls__\")\n    [:a.asset-ref\n     (fix-local-asset-filename title)]))\n"]}