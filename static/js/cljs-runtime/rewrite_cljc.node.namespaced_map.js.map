{"version":3,"sources":["rewrite_cljc/node/namespaced_map.cljc"],"mappings":";AASA,kEAAA,lEAAOA,4IACJC;AADH,AAEE,wDAAA,xDAACC,+CAAwBD;;AACzB,IAAME,aAAW,AAACC,+CAAwBH;AAA1C,AAEE,GAAQ,6CAAA,7CAACK,qGAAS,AAACC,gCAAS,AAACC,gBAAML;AAAnC;AAAA,AAAA,MAAA,KAAAE,MAAA,CAAA,mMAAA,KAAA,tLACQ,CAAA,wGAAiE,AAACE,gCAAS,AAACC,gBAAML;;;AAC1F,GAAQ,6CAAA,7CAACG,gGAAO,AAACC,gCAAS,AAACE,iBAAON;AAAlC;;AAAA,AAAA,MAAA,KAAAE,MAAA,CAAA,kBAAA,iDAAA,KAAA;;;AAKJ;;;;;qDAAA,rDAAOK;AAAP,AAMWC;;AAEX,qDAAA,rDAAOC,kHAAkBC;AAAzB,AACE,IAAMC,SAAO,4CAAKD;IACZE,UAAQ,EAAI,6CAAA,7CAACT,kDAAOQ,SACV,4CAAK,AAACE,kBAAQC,2BACd,kBAAI,kBAAA,lBAAaH,yBACf,iBAAAI,WAAQ,iBAAAC,mBAAI,AAACT;AAAL,AAAA,oBAAAS;AAAAA;;AACI,MACC,iPAAA,jPAACC,gDAAQ,CAAA,kIAAA,hBAA2EP;;;IAFjGK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAIQ,4CAAAA,5CAACG,qDAAI,AAACC,+CAAO,oDAAA,pDAACC,6CAAKT;IAJ3BI,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAKQ,kBAAAA,lBAACF;AALT,AAAA,GAAA,CAAAE,gBAAA;AAAA;;AAAA,mDAAAA;;KAOA,oDAAA,pDAACK,6CAAKT;AAXxB,AAYE,oBAAQC;AAAR;AAAA,AAAA,MAAA,KAAAV,MAAA,CAAA,wIAAA,KAAA,3HAAgB,CAAA,2FAAoDQ;;;AACpEE;;AAEJ,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,wEAAA,xEAAW4E;;AAAX,AAAA,YAAA,RA8BaW;AA9Bb,AA8BkBiC;AAAYjC;;;AA9B9B,CAAA,AAAA,iGAAA,WAAA9E,mBAAAC,/HAAWkE;;AAAX,AAAA,IAAAnE,yBAAA;AAAA,AAAA,OAAAA,8DAAAC,gBAAA;;;AAAA,CAAA,AAAA,iGAAA,WAAAC,mBAAAC,OAAAC,tIAAW+D;;AAAX,AAAA,IAAAjE,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA5B;;;;AAAA,OAAAoB,4CAAAU,gBAAAJ,OAAAC;;;;;AAAA,CAAA,AAAA,sGAAA,WAAAI,mBAAAC,gBAAAC,pJAAWyD;;AAAX,AAAA,IAAA3D,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,0BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,6GAAA,WAAAU,mBAAAC,qBAAAC,hKAAW+C;;AAAX,AAAA,IAAAjD,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,uDAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,6DAAAhD,iBAAA,eAAA8B;;;AAAA,CAAA,AAAA,qGAAA,WAAAmB,hHAAWyC;;AAAX,AAAA,IAAAzC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,qEAAA,kBAAAnB,iBAAA,AAAAqB,oBAAArB,iBAAA,AAAAsB;;;AAAA,CAAA,AAAA,6FAAA,WAAAC,xGAAWqC;;AAAX,AAAA,IAAArC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,mGAAA,WAAAC,9GAAWmC;;AAAX,AAAA,IAAAnC,yBAAA;AAAA,AAAA,+DAAAvD,gBAAAsD,cAAAxB,gBAAA0B,jGAAWkC;;;AAAX,CAAA,AAAA,iGAAA,WAAAjC,5GAAWiC;;AAAX,AAAA,IAAAjC,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA5B;;;AAAA,CAAA,AAAA,6FAAA,WAAA6B,xGAAW+B;;AAAX,AAAA,IAAA/B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,cAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,+FAAA,WAAAG,UAAAC,pHAAW0B;;AAAX,AAAA,IAAA3B,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAA3D,6CAAA,AAAA0D,uBAAA,AAAAC,0BAAA,AAAA3D,6CAAA,AAAA0D,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,iGAAAC,jGAAWyB;;AAAX,CAAA,AAAA,4GAAA,5GAAWA,uHAEHW;;AAFR,AAAA,gBAAA,ZAEQA;AAFR,AAAA;;;AAAA,CAAA,AAAA,8HAAA,9HAAWX,yIAISY;;AAJpB,AAAA,YAAA,RAIoBA;AAJpB,AAAA;;;AAAA,CAAA,AAAA,8GAAA,9GAAWZ,yHAKDW;;AALV,AAAA,gBAAA,ZAKUA;AALV,AAMI,IAAAE,aAAyB,AAACE,mCAAYzG;qBAAtC,AAAAuC,4CAAAgE,WAAA,IAAA,5EAAO3F;QAAP,AAAA2B,4CAAAgE,WAAA,IAAA,/DAAsBC;AAAtB,uFACO,iBAAAE,qBAAA,uDAAAC,pLAMA,oDAAA,7CAACpC;AAND,AAAA,YAAAqC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAA3B,cAAAyB;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAu5EwC,AAAA0B,sBAAA9B;IAv5ExCK,qBAAA,AAAAtD,gBAAAqD;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,IAAAI,aAAA,AAAA5B,eAAAuB,gBAAAI;QAAA,AAAA5E,4CAAA6E,WAAA,IAAA,/DAAOS;QAAP,AAAAtF,4CAAA6E,WAAA,IAAA,/DAASU;AAAT,AAAA,IACYC,iBAAG,2CAAA,+IAAA,4CAAA,pOAAM,GAAK,cAAAlG,bAAUgG,mCAAQA,IACvB,oEAAA,pEAACxH,6CAAE,AAAC2H,oBAAUH,SAAS,AAACI,gDAAQ,AAACC,eAAKL,sBACtC,AAACG,oBAAUH,IAAYA,EACjB,AAACI,gDAAQ,AAACtH,mDAAkBC,gBAAgB,AAACsH,eAAKL;;AAJ7E,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFAKGc,eAAGD;;AALN,eAAA,CAAAX,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,6CAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,IAAAS,aAAA,AAAAnH,gBAAAoG;QAAA,AAAApE,4CAAAmF,WAAA,IAAA,/DAAOG;QAAP,AAAAtF,4CAAAmF,WAAA,IAAA,/DAASI;AAAT,AAAA,IACYC,iBAAG,2CAAA,+IAAA,4CAAA,pOAAM,GAAK,cAAAlG,bAAUgG,mCAAQA,IACvB,oEAAA,pEAACxH,6CAAE,AAAC2H,oBAAUH,SAAS,AAACI,gDAAQ,AAACC,eAAKL,sBACtC,AAACG,oBAAUH,IAAYA,EACjB,AAACI,gDAAQ,AAACtH,mDAAkBC,gBAAgB,AAACsH,eAAKL;;AAJ7E,AAAA,OAAAF,eAAA,4GAAA,AAAAH,6CAAA,AAAAI,eAAAjB,rFAKGoB,eAAGD;;;AALN;;;;GAAA,KAAA;;AAAA,AAAA,OAAApB,mBAAYF;;;;AAPvB,CAAA,AAAA,+GAAA,/GAAWd,0HAcAY;;AAdX,AAAA,YAAA,RAcWA;AAdX,AAeI,QAAA,MAAK,AAAC6B,wCAAiBnI;;;AAf3B,CAAA,AAAA,+GAAA,/GAAW0F,0HAgBAW;;AAhBX,AAAA,gBAAA,ZAgBWA;AAhBX,AAiBI,QAAA,gDAAS,AAAC+B,2CAAoBpI;;;AAjBlC,CAAA,AAAA,8FAAA,WAAAkE,mBAAAC,5HAAWuB;;AAAX,AAAA,IAAAxB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,iFAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAZ,eAAAa;;AAAA,+DAAAnE,gBAAAsD,cAAA,AAAAkB,oBAAA,AAAAH,+CAAAvC,gBAAAqC,kBAAA,tLAAWuB;;;;AAAX,CAAA,AAAA,sGAAAzB,tGAAWyB;;AAAX,CAAA,AAAA,0HAAA,1HAAWA,qIAoBAY;;AApBX,AAAA,YAAA,RAoBWA;AApBX,AAAA;;;AAAA,CAAA,AAAA,sHAAA,tHAAWZ,iIAqBEY;;AArBb,AAAA,YAAA,RAqBaA;AArBb,AAsBItG;;;AAtBJ,CAAA,AAAA,8HAAA,9HAAW0F,yIAuBUW,MAAKgC;;AAvB1B,AAAA,gBAAA,ZAuBqBhC;AAvBrB,AAwBI,AAACtG,gEAA+BsI;;AAChC,+DAAA,xDAACrD,8CAAMqB,uEAAegC;;;AAzB1B,CAAA,AAAA,2HAAA,3HAAW3C,sIA0BOY;;AA1BlB,AAAA,YAAA,RA0BkBA;AA1BlB,AAAA;;;AAAA,CAAA,AAAA,mHAAA,WAAA7B,mBAAA/C,jJAAWgE;;AAAX,AAAA,IAAAjB,yBAAA;AAAA,AAAA,IAAAC,WAAAhD;IAAAgD,eAAA,EAAA,CAAAA,oBAAA7C,oBAAA,AAAA6C,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;;AAAA,OAAAN,0BAAAtC,gBAAAJ;;;;;AAAA,CAAA,AAAA,qGAAA,WAAAiD,mBAAAC,gBAAA3B,nJAAWyC;;AAAX,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,6DAAAE,eAAAF,sBAAA,6DAAAE;AAAA,+DAAA9B,SAAAK,cAAAxB,gBAAA,1FAAW4D;;AAAX,+DAAA1F,gBAAAsD,cAAA,AAAA0B,8CAAAlD,gBAAA8C,gBAAA3B,UAAA,zKAAWyC;;;;AAAX,CAAA,AAAA,+FAAA,WAAAT,1GAAWS;;AAAX,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAnC,+CAAA,mFAAA,KAAAoC,mBAAA,6DAAAnF,gBAAA,eAAA8B;;;AAAA,CAAA,AAAA,sGAAA,WAAAsD,mBAAAnC,pIAAWyC;;AAAX,AAAA,IAAAN,yBAAA;AAAA,AAAA,+DAAApF,gBAAAiD,SAAAnB,gBAAA0B,5FAAWkC;;;AAAX,CAAA,AAAA,mGAAA,WAAAL,mBAAAC,jIAAWI;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,kEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAApD,+CAAAuD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAAI,8DAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,oEAAA;;AAAA,CAAA,AAAAA,yEAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,qDAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,4EAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;0DAAA,1DAAWM,4HAAmBnG;AAA9B,AAAA,YAAA0F,4DAAA,KAAA,KAAA,nBAA8B1F;;;AAA9B;;;6DAAA,qEAAA+F,lIAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA5B,+CAAA0B,SAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAxB,6CAAA,mCAAA0B;;AAAAA;;;AAAA,AAAA,YAAAP,mDAAA,AAAA,2FAAAK,UAAA,KAAA,AAAAvB,oBAAAwB,sBAAA;;;AAAAN,AAgCA,AAAC6C,iDAAqB7C;AAItB;;;;;;;;;;;;;;;;;;;uDAAA,vDAAM8C,sHAkBHxI;AAlBH,AAmBE,AAACD,gEAA+BC;;AAChC,OAACmG,wDAAoBnG","names":["rewrite-cljc.node.namespaced-map/assert-namespaced-map-children","children","rewrite-cljc.node.protocols/assert-sexpr-count","printables","rewrite-cljc.node.protocols/without-whitespace","js/Error","cljs.core._EQ_","rewrite-cljc.node.protocols/tag","cljs.core/first","cljs.core/second","rewrite-cljc.node.namespaced-map/namespace-aliases","cljs.tools.reader/*alias-map*","rewrite-cljc.node.namespaced-map/resolve-namespace","nspace-keyword","nspace","rnspace","cljs.core/ns-name","cljs.core/*ns*","G__78334","or__5043__auto__","cljs.core.ex_info","cljs.core.get","cljs.core.symbol","cljs.core.subs","this__5340__auto__","k__5341__auto__","this__5342__auto__","k78336","else__5343__auto__","G__78357","cljs.core/Keyword","__extmap","this__5360__auto__","f__5361__auto__","init__5362__auto__","cljs.core.reduce","ret__5363__auto__","p__78359","vec__78363","k__5364__auto__","cljs.core.nth","v__5365__auto__","this__5355__auto__","writer__5356__auto__","opts__5357__auto__","pr-pair__5358__auto__","keyval__5359__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__78335","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5338__auto__","__meta","this__5335__auto__","__hash","this__5344__auto__","cljs.core/count","this__5336__auto__","h__5152__auto__","coll__5337__auto__","cljs.core/hash-unordered-coll","this78337","other78338","cljs.core/PROTOCOL_SENTINEL","this__5350__auto__","k__5351__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5347__auto__","G__78400","this__5348__auto__","k__5349__auto__","pred__78402","cljs.core/keyword-identical?","expr__78403","cljs.core.assoc","this__5353__auto__","cljs.core/seq","cljs.core/MapEntry","this__5339__auto__","this__5345__auto__","entry__5346__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-cljc.node.namespaced-map/NamespacedMapNode","this__5386__auto__","cljs.core/List","writer__5387__auto__","cljs.core/-write","G__78339","extmap__5382__auto__","G__78417","cljs.core/record?","rewrite-cljc.node.namespaced-map/->NamespacedMapNode","rewrite-cljc.node.namespaced-map/map->NamespacedMapNode","this","_","vec__78372","m","rewrite-cljc.node.protocols/sexprs","iter__5520__auto__","s__78377","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__78379","cljs.core/chunk-buffer","i__78378","vec__78383","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__78376","cljs.core/chunk-rest","vec__78386","cljs.core/cons","cljs.core/rest","k","v","k'","cljs.core/namespace","cljs.core.keyword","cljs.core/name","rewrite-cljc.node.protocols/sum-lengths","rewrite-cljc.node.protocols/concat-strings","children'","rewrite-cljc.node.protocols/string","rewrite-cljc.node.protocols/make-printable!","rewrite-cljc.node.namespaced-map/namespaced-map-node","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.namespaced-map\n  (:require\n   [clojure.tools.reader :refer [*alias-map*]]\n   [rewrite-cljc.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defn- assert-namespaced-map-children\n  [children]\n  (node/assert-sexpr-count children 2)\n  (let [printables (node/without-whitespace children)]\n    ;; TODO: check for keyword\n    (assert (= :token (node/tag (first printables)))\n            (str \"first form in namespaced map needs to be a token keyword.\" (node/tag (first printables))))\n    (assert (= :map (node/tag (second printables)))\n            \"second form in namespaced map needs to be map.\")))\n\n;; TODO: consider using own *alias-map* instead of reusing reader's version\n;; TODO: consider allow *alias-map* to also be a function\n(defn- namespace-aliases\n  \"We take inspiration from clojure tools reader by looking at bound *alias-map* to support\n  ClojureScript. Clojure tools reader also allows this in clojure to override ns-aliases so\n  we do that too.\"\n  []\n  #?(:clj (or *alias-map* (ns-aliases *ns*))\n     :cljs *alias-map*))\n\n(defn- resolve-namespace[nspace-keyword]\n  (let [nspace (str nspace-keyword)\n        rnspace (if (= \"::\" nspace)\n                  (str (ns-name *ns*))\n                  (if (.startsWith nspace \"::\")\n                    (some-> (or (namespace-aliases)\n                                (throw\n                                 (ex-info (str \":namespaced-map could not resolve namespace alias for auto resolve \" nspace-keyword\n                                               #?(:cljs \" - for ClojureScript you must bind an *alias-map*\")) {})))\n                            (get (symbol (subs nspace 2)))\n                            (ns-name)\n                            str)\n                    (subs nspace 1)))]\n    (assert rnspace (str \":namespaced-map could not resolve namespace \" nspace-keyword))\n    rnspace))\n\n(defrecord NamespacedMapNode [children]\n  node/Node\n  (tag [this]\n    :namespaced-map)\n  (printable-only? [_] false)\n  (sexpr [this]\n    (let [[nspace-keyword m] (node/sexprs children)]\n      (->> (for [[k v] m\n                 :let [k' (cond (not (keyword? k))     k\n                                (= (namespace k) \"_\")  (keyword (name k))\n                                (namespace k)          k\n                                :else (keyword (resolve-namespace nspace-keyword) (name k)))]]\n             [k' v])\n           (into {}))))\n  (length [_]\n    (+ 1 (node/sum-lengths children)))\n  (string [this]\n    (str \"#\" (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_] true)\n  (children [_]\n    children)\n  (replace-children [this children']\n    (assert-namespaced-map-children children')\n    (assoc this :children children'))\n  (leader-length [_]\n    1)\n\n  Object\n  (toString [this]node/string this))\n\n(node/make-printable! NamespacedMapNode)\n\n;; ## Constructors\n\n(defn namespaced-map-node\n  \"Create a node representing a namespaced map. There are 3 types of namespaced maps:\n\n   1. prefix namespaced map\n   The prefix is a keyword which specifies to a namespace.\n   Example: `#:my.name.space{:a 1}`\n\n   2. auto-resolve alias namespaced map\n   The prefix is an auto-resolve keyword specifies a namespace alias.\n   Example: `#::ns-alias{:b 3}`\n\n   3. auto-resolve namespaced map\n   The prefix is `::` which specifies the current namespace.\n   Example: `#::{:c 4}`\n\n  First child is the prefix, followed by optional whitespace then map node.\n  TODO: this still seems hacky to me.\n  Prefix must be a token-node with a keyword value. Use (keyword ':') for auto-resolve.\"\n  [children]\n  (assert-namespaced-map-children children)\n  (->NamespacedMapNode children))\n"]}