shadow$provide.module$node_modules$codemirror$mode$http$http=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("http",function(){function failFirstLine(stream,state){stream.skipToEnd();state.cur=header;return"error"}function start(stream,state){return stream.match(/^HTTP\/\d\.\d/)?
(state.cur=responseStatusCode,"keyword"):stream.match(/^[A-Z]+/)&&/[ \t]/.test(stream.peek())?(state.cur=requestPath,"keyword"):failFirstLine(stream,state)}function responseStatusCode(stream,state){var code=stream.match(/^\d+/);if(!code)return failFirstLine(stream,state);state.cur=responseStatusText;stream=Number(code[0]);return 100<=stream&&200>stream?"positive informational":200<=stream&&300>stream?"positive success":300<=stream&&400>stream?"positive redirect":400<=stream&&500>stream?"negative client-error":
500<=stream&&600>stream?"negative server-error":"error"}function responseStatusText(stream,state){stream.skipToEnd();state.cur=header;return null}function requestPath(stream,state){stream.eatWhile(/\S/);state.cur=requestProtocol;return"string-2"}function requestProtocol(stream,state){return stream.match(/^HTTP\/\d\.\d$/)?(state.cur=header,"keyword"):failFirstLine(stream,state)}function header(stream){if(stream.sol()&&!stream.eat(/[ \t]/)){if(stream.match(/^.*?:/))return"atom";stream.skipToEnd();return"error"}stream.skipToEnd();
return"string"}function body(stream){stream.skipToEnd();return null}return{token:function(stream,state){var cur=state.cur;return cur!=header&&cur!=body&&stream.eatSpace()?null:cur(stream,state)},blankLine:function(state){state.cur=body},startState:function(){return{cur:start}}}});CodeMirror.defineMIME("message/http","http")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$http$http.js.map
