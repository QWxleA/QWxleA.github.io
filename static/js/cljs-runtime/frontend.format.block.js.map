{"version":3,"sources":["frontend/format/block.cljs"],"mappings":"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","names":["frontend.format.block/extract-blocks","blocks","content","with-id?","format","logseq.graph-parser.block/extract-blocks","frontend.state.get_config","frontend.config/get-block-pattern","frontend.config/supported-formats","G__49393","frontend.db/get-db","frontend.state/get-current-repo","frontend.state/get-date-formatter","var_args","G__49397","frontend.format.block/page-name->map","js/Error","original-page-name","frontend.format.block.page_name__GT_map","with-timestamp?","logseq.graph-parser.block/page-name->map","G__49402","G__49412","frontend.format.block/parse-block","p__49414","p__49415","map__49416","cljs.core/--destructure-map","cljs.core.get","map__49417","block","frontend.format.block.parse_block","uuid","page","clojure.string/blank?","map__49422","cljs.core.dissoc","ast","frontend.format.to_edn","new-block","cljs.core/first","parent-refs","G__49423","G__49424","frontend.db/get-block-parent","cljs.core.map","refs","ref-pages","cljs.core.filter","path-ref-pages","cljs.core.concat","cljs.core.remove","cljs.core/nil?","G__49425","cljs.core.merge","cljs.core/count","cljs.core.assoc","G__49430","frontend.format.block/parse-title-and-body","cljs.core/map?","frontend.format.block.parse_title_and_body","block-uuid","pre-block?","clojure.string/triml","temp__5718__auto__","result","frontend.state/get-block-ast","logseq.graph_parser.mldoc.default_config","title","logseq.graph-parser.block/heading-block?","cljs.core/second","body","cljs.core/vec","cljs.core/rest","cljs.core.drop_while","logseq.graph-parser.property/properties-ast?","G__49451","cljs.core/seq","frontend.state/add-block-ast-cache!","frontend.format.block/macro-subs","macro-content","arguments","s","args","n","clojure.string/replace","p__49466","vec__49467","cljs.core.nth","frontend.format.block/break-line-paragraph?","typ","break-lines","cljs.core._EQ_","p1__49464#","cljs.core/every?","frontend.format.block/trim-paragraph-special-break-lines","vec__49472","paras","indexed-paras","cljs.core.map_indexed","cljs.core/vector","p1__49470#","vec__49475","index","value","cljs.core/contains?","p1__49471#","cljs.core/last","frontend.format.block/trim-break-lines!"],"sourcesContent":["(ns frontend.format.block\n  \"Block code needed by app but not graph-parser\"\n  (:require [clojure.string :as string]\n            [logseq.graph-parser.block :as gp-block]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.format :as format]\n            [frontend.state :as state]\n            [logseq.graph-parser.property :as gp-property]\n            [logseq.graph-parser.mldoc :as gp-mldoc]))\n\n(defn extract-blocks\n  \"Wrapper around logseq.graph-parser.block/extract-blocks that adds in system state\"\n  [blocks content with-id? format]\n  (gp-block/extract-blocks blocks content with-id? format\n                           {:user-config (state/get-config)\n                            :block-pattern (config/get-block-pattern format)\n                            :supported-formats (config/supported-formats)\n                            :db (db/get-db (state/get-current-repo))\n                            :date-formatter (state/get-date-formatter)}))\n\n(defn page-name->map\n  \"Wrapper around logseq.graph-parser.block/page-name->map that adds in db\"\n  ([original-page-name with-id?]\n   (page-name->map original-page-name with-id? true))\n  ([original-page-name with-id? with-timestamp?]\n   (gp-block/page-name->map original-page-name with-id? (db/get-db (state/get-current-repo)) with-timestamp? (state/get-date-formatter))))\n\n(defn parse-block\n  ([block]\n   (parse-block block nil))\n  ([{:block/keys [uuid content page format] :as block} {:keys [with-id?]\n                                                        :or {with-id? true}}]\n   (when-not (string/blank? content)\n     (let [block (dissoc block :block/pre-block?)\n           ast (format/to-edn content format nil)\n           blocks (extract-blocks ast content with-id? format)\n           new-block (first blocks)\n           parent-refs (->> (db/get-block-parent (state/get-current-repo) uuid)\n                            :block/path-refs\n                            (map :db/id))\n           {:block/keys [refs]} new-block\n           ref-pages (filter :block/name refs)\n           path-ref-pages (->> (concat ref-pages parent-refs [(:db/id page)])\n                               (remove nil?))\n           block (cond->\n                   (merge\n                    block\n                    new-block\n                    {:block/path-refs path-ref-pages})\n                   (> (count blocks) 1)\n                   (assoc :block/warning :multiple-blocks))\n           block (dissoc block :block/title :block/body :block/level)]\n       (if uuid (assoc block :block/uuid uuid) block)))))\n\n(defn parse-title-and-body\n  ([block]\n   (when (map? block)\n     (merge block\n            (parse-title-and-body (:block/uuid block)\n                                  (:block/format block)\n                                  (:block/pre-block? block)\n                                  (:block/content block)))))\n  ([block-uuid format pre-block? content]\n   (when-not (string/blank? content)\n     (let [content (if pre-block? content\n                       (str (config/get-block-pattern format) \" \" (string/triml content)))]\n       (if-let [result (state/get-block-ast block-uuid content)]\n         result\n         (let [ast (->> (format/to-edn content format (gp-mldoc/default-config format))\n                        (map first))\n               title (when (gp-block/heading-block? (first ast))\n                       (:title (second (first ast))))\n               body (vec (if title (rest ast) ast))\n               body (drop-while gp-property/properties-ast? body)\n               result (cond->\n                        (if (seq body) {:block/body body} {})\n                        title\n                        (assoc :block/title title))]\n           (state/add-block-ast-cache! block-uuid content result)\n           result))))))\n\n(defn macro-subs\n  [macro-content arguments]\n  (loop [s macro-content\n         args arguments\n         n 1]\n    (if (seq args)\n      (recur\n       (string/replace s (str \"$\" n) (first args))\n       (rest args)\n       (inc n))\n      s)))\n\n(defn break-line-paragraph?\n  [[typ break-lines]]\n  (and (= typ \"Paragraph\")\n       (every? #(= % [\"Break_Line\"]) break-lines)))\n\n(defn trim-paragraph-special-break-lines\n  [ast]\n  (let [[typ paras] ast]\n    (if (= typ \"Paragraph\")\n      (let [indexed-paras (map-indexed vector paras)]\n        [typ (->> (filter\n                            #(let [[index value] %]\n                               (not (and (> index 0)\n                                         (= value [\"Break_Line\"])\n                                         (contains? #{\"Timestamp\" \"Macro\"}\n                                                    (first (nth paras (dec index)))))))\n                            indexed-paras)\n                           (map #(last %)))])\n      ast)))\n\n(defn trim-break-lines!\n  [ast]\n  (drop-while break-line-paragraph?\n              (map trim-paragraph-special-break-lines ast)))\n"]}