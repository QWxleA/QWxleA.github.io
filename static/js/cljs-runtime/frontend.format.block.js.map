{"version":3,"sources":["frontend/format/block.cljs"],"mappings":"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","names":["frontend.format.block/heading-block?","block","cljs.core/vector?","cljs.core._EQ_","cljs.core/first","frontend.format.block/get-tag","temp__5720__auto__","tag-value","and__4251__auto__","cljs.core/second","cljs.core.map","e","cljs.core/count","e_0__94136","cljs.core.nth","cljs.core.match/backtrack","e94152","js/Error","e__57917__auto__","e94153","e94154","e94139","s","t","map__94157","cljs.core/--destructure-map","cljs.core.get","full_text","map__94155","content","clojure.string.join","frontend.format.block/get-page-reference","page","typ","value","or__4253__auto__","cljs.core/not","logseq.graph-parser.config/local-asset?","logseq.graph-parser.config/draw?","logseq.graph-parser.text/page-ref?","logseq.graph-parser.text/page-ref-un-brackets!","cljs.core/contains?","ext","G__94158","frontend.util/get-file-ext","cljs.core.keyword","frontend.util/starts-with?","frontend.config/supported-formats","cljs.core/last","cljs.core.subs","map__94160","name","arguments","argument","text","logseq.graph-parser.text/block-ref-un-brackets!","frontend.format.block/get-block-reference","block-id","cljs.core/map?","map__94163","clojure.string/starts-with?","clojure.string/ends-with?","id","logseq.graph-parser.util/uuid-string?","frontend.format.block/paragraph-block?","frontend.format.block/timestamp-block?","frontend.format.block/extract-properties","format","properties","cljs.core/seq","page-refs","cljs.core.remove","p__94165","vec__94166","k","_","v","logseq.graph-parser.mldoc/link?","clojure.string/trim","result","logseq.graph_parser.text.split_page_refs_without_brackets","cljs.core/coll?","cljs.core.apply","cljs.core/concat","clojure.string/blank?","p__94169","vec__94170","clojure.string/lower-case","cljs.core/name","clojure.string/replace","logseq.graph_parser.text.parse_property","frontend.state.get_config","cljs.core/set","p1__94164#","cljs.core.into","frontend.format.block/paragraph-timestamp-block?","frontend.format.block/extract-timestamps","G__94175","cljs.core.filter","frontend.format.block/timestamps->scheduled-and-deadline","timestamps","medley.core/map-keys","cljs.core.comp","cljs.core/keyword","m","G__94176","cljs.core/select-keys","p__94177","vec__94178","map__94181","map__94182","date","repetition","year","month","day","js/parseInt","frontend.util/zero-pad","G__94183","G__94184","cljs.core/Keyword","cljs.core.assoc","cljs.core/merge","frontend.format.block/convert-page-if-journal","original-page-name","page-name","frontend.util/page-name-sanity-lc","frontend.date/journal-title->int","frontend.date/int->journal-title","var_args","G__94186","frontend.format.block/page-name->map","with-id?","frontend.format.block.page_name__GT_map","with-timestamp?","vec__94187","frontend.util/remove-boundary-slashes","journal-day","namespace?","cljs.core/boolean","logseq.graph-parser.text/get-nested-page-name","logseq.graph-parser.text/namespace-page?","page-entity","G__94190","frontend.db/entity","cljs.core.merge","frontend.db/new-block-id","namespace","logseq.graph-parser.util/split-last","current-ms","frontend.util/time-ms","p__94193","map__94194","frontend.format.block/with-page-refs","title","body","tags","refs","marker","priority","cljs.core.concat","cljs.core.distinct","cljs.core.atom","clojure.walk/prewalk","form","cljs.core.swap_BANG_","cljs.core/conj","tag","logseq.graph-parser.util/tag-valid?","cljs.core/deref","children-pages","cljs.core.mapcat","p","frontend.util/split-namespace-pages","cljs.core/nil?","ref","p__94199","map__94200","frontend.format.block/with-block-refs","ref-blocks","clojure.walk/postwalk","medley.core/uuid","frontend.format.block/block-keywordize","cljs.core/namespace","frontend.format.block/sanity-blocks-data","blocks","logseq.graph-parser.util/remove-nils","frontend.format.block/with-path-refs","acc","parents","cljs.core/empty?","vec__94214","cur-level","level-diff","path-refs","cljs.core.drop_last","cljs.core.conj","cljs.core/vec","cljs.core/butlast","cljs.core.take_while","path-ref-pages","cljs.core/rest","p__94217","map__94218","frontend.format.block/block-tags->pages","frontend.format.block/get-block-content","utf8-content","meta","temp__5718__auto__","end-pos","logseq.graph_parser.utf8.substring","logseq.graph_parser.text.remove_level_spaces","frontend.config/get-block-pattern","logseq.graph-parser.mldoc/remove-indentation-spaces","frontend.util.property/->new-properties","frontend.format.block/get-custom-id-or-new-id","custom-id","cljs.core.get_in","cljs.core/uuid","frontend.format.block/get-page-refs-from-properties","cljs.core/vals","frontend.format.block/with-page-block-refs","G__94219","cljs.core.update","col","frontend.format.block/with-pre-block-if-exists","pre-block-properties","encoded-content","first-block","first-block-start-pos","cljs.core/cons","map__94220","properties-order","property-refs","frontend.format.block/construct-block","pos-meta","map__94221","ref-pages-in-properties","unordered?","markdown-heading?","G__94222","created-at","updated-at","G__94223","cljs.core/integer?","cljs.core.dissoc","frontend.format.block/extract-blocks","cljs.core/boolean?","e94225","vec__94226","logseq.graph-parser.utf8/encode","headings","cljs.core/reverse","vec__94232","timestamps'","frontend.util.property/properties-ast?","p1__94224#","js/console.error","lambdaisland.glogi.log","cljs.core/identity","frontend.format.block/with-parent-and-left","page-id","p1__94235#","vec__94249","seq__94250","first__94251","cljs.core/next","map__94252","vec__94253","others","level-spaces","uuid","level","parent","last-parent","parent-spaces","parents'","result'","G__94256","p1__94236#","cljs.core/some","left","vec__94257","f","r","cljs.core/split-with","parent-id","G__94260","G__94262","frontend.format.block/parse-block","p__94263","p__94264","map__94265","map__94266","frontend.format.block.parse_block","map__94267","ast","frontend.format.to_edn","new-block","parent-refs","G__94268","G__94269","frontend.db/get-block-parent","frontend.state/get-current-repo","ref-pages","G__94270","G__94272","frontend.format.block/parse-title-and-body","frontend.format.block.parse_title_and_body","block-uuid","pre-block?","clojure.string/triml","frontend.state/get-block-ast","logseq.graph_parser.mldoc.default_config","cljs.core.drop_while","G__94273","frontend.state/add-block-ast-cache!","frontend.format.block/macro-subs","macro-content","args","n","p__94275","vec__94276","frontend.format.block/break-line-paragraph?","break-lines","p1__94274#","cljs.core/every?","frontend.format.block/trim-paragraph-special-break-lines","vec__94281","paras","indexed-paras","cljs.core.map_indexed","cljs.core/vector","p1__94279#","vec__94284","index","p1__94280#","frontend.format.block/trim-break-lines!"],"sourcesContent":["(ns frontend.format.block\n  (:require [clojure.string :as string]\n            [clojure.walk :as walk]\n            [cljs.core.match :as match]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.format :as format]\n            [frontend.state :as state]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.utf8 :as utf8]\n            [frontend.util :as util]\n            [frontend.util.property :as property]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [lambdaisland.glogi :as log]\n            [medley.core :as medley]))\n\n(defn heading-block?\n  [block]\n  (and\n   (vector? block)\n   (= \"Heading\" (first block))))\n\n(defn get-tag\n  [block]\n  (when-let [tag-value (and (vector? block)\n                            (= \"Tag\" (first block))\n                            (second block))]\n    (->\n     (map (fn [e]\n            (match/match e\n              [\"Plain\" s]\n              s\n              [\"Link\" t]\n              (let [{full_text :full_text} t]\n                full_text)\n              [\"Nested_link\" t]\n              (let [ {content :content} t]\n                content)\n              :else\n              \"\"\n              )) tag-value)\n     (string/join))))\n\n(defn get-page-reference\n  [block]\n  (let [page (cond\n               (and (vector? block) (= \"Link\" (first block)))\n               (let [typ (first (:url (second block)))\n                     value (second (:url (second block)))]\n                 ;; {:url [\"File\" \"file:../pages/hello_world.org\"], :label [[\"Plain\" \"hello world\"]], :title nil}\n                 (or\n                  (and\n                   (= typ \"Page_ref\")\n                   (and (string? value)\n                        (not (or (gp-config/local-asset? value)\n                                 (gp-config/draw? value))))\n                   value)\n\n                  (and\n                   (= typ \"Search\")\n                   (text/page-ref? value)\n                   (text/page-ref-un-brackets! value))\n\n                  (and\n                   (= typ \"Search\")\n                   (not (contains? #{\\# \\* \\/ \\[} (first value)))\n                   (let [ext (some-> (util/get-file-ext value) keyword)]\n                     (when (and (not (util/starts-with? value \"http:\"))\n                                (not (util/starts-with? value \"https:\"))\n                                (not (util/starts-with? value \"file:\"))\n                                (not (gp-config/local-asset? value))\n                                (or (= ext :excalidraw)\n                                    (not (contains? (config/supported-formats) ext))))\n                       value)))\n\n                  (and\n                   (= typ \"Complex\")\n                   (= (:protocol value) \"file\")\n                   (:link value))\n\n                  (and\n                   (= typ \"File\")\n                   (second (first (:label (second block)))))))\n\n               (and (vector? block) (= \"Nested_link\" (first block)))\n               (let [content (:content (last block))]\n                 (subs content 2 (- (count content) 2)))\n\n               (and (vector? block)\n                    (= \"Macro\" (first block)))\n               (let [{:keys [name arguments]} (second block)\n                     argument (string/join \", \" arguments)]\n                   (when (= name \"embed\")\n                     (text/page-ref-un-brackets! argument)))\n\n               (and (vector? block)\n                    (= \"Tag\" (first block)))\n               (let [text (get-tag block)]\n                 (text/page-ref-un-brackets! text))\n\n               :else\n               nil)]\n    (text/block-ref-un-brackets! page)))\n\n(defn get-block-reference\n  [block]\n  (when-let [block-id (cond\n                        (and (vector? block)\n                             (= \"Block_reference\" (first block)))\n                        (last block)\n\n                        (and (vector? block)\n                             (= \"Link\" (first block))\n                             (map? (second block))\n                             (= \"Block_ref\" (first (:url (second block)))))\n                        (second (:url (second block)))\n\n                        (and (vector? block)\n                             (= \"Macro\" (first block)))\n                        (let [{:keys [name arguments]} (second block)]\n                          (when (and (= name \"embed\")\n                                     (string? (first arguments))\n                                     (string/starts-with? (first arguments) \"((\")\n                                     (string/ends-with? (first arguments) \"))\"))\n                            (subs (first arguments) 2 (- (count (first arguments)) 2))))\n\n                        (and (vector? block)\n                             (= \"Link\" (first block))\n                             (map? (second block)))\n                        (if (= \"id\" (:protocol (second (:url (second block)))))\n                          (:link (second (:url (second block))))\n                          (let [id (second (:url (second block)))]\n                            (text/block-ref-un-brackets! id)))\n\n                        :else\n                        nil)]\n    (when (and block-id\n               (gp-util/uuid-string? block-id))\n      block-id)))\n\n(defn paragraph-block?\n  [block]\n  (and\n   (vector? block)\n   (= \"Paragraph\" (first block))))\n\n(defn timestamp-block?\n  [block]\n  (and\n   (vector? block)\n   (= \"Timestamp\" (first block))))\n\n;; TODO: we should move this to mldoc\n(defn extract-properties\n  [format properties]\n  (when (seq properties)\n    (let [properties (seq properties)\n          page-refs (->>\n                     properties\n                     (remove (fn [[k _]]\n                               (contains? #{:background-color :background_color} (keyword k))))\n                     (map last)\n                     (map (fn [v]\n                            (when (and (string? v)\n                                       (not (gp-mldoc/link? format v)))\n                              (let [v (string/trim v)\n                                    result (text/split-page-refs-without-brackets v {:un-brackets? false})]\n                                (if (coll? result)\n                                  (map text/page-ref-un-brackets! result)\n                                  [])))))\n                     (apply concat)\n                     (remove string/blank?))\n          properties (->> properties\n                          (map (fn [[k v]]\n                                 (let [k (-> (string/lower-case (name k))\n                                             (string/replace \" \" \"-\")\n                                             (string/replace \"_\" \"-\"))\n                                       k (if (contains? #{\"custom_id\" \"custom-id\"} k)\n                                           \"id\"\n                                           k)\n                                       v (if (coll? v)\n                                           (remove string/blank? v)\n                                           (if (string/blank? v)\n                                             nil\n                                             (text/parse-property format k v (state/get-config))))\n                                       k (keyword k)\n                                       v (if (and\n                                              (string? v)\n                                              (contains? #{:alias :aliases :tags} k))\n                                           (set [v])\n                                           v)\n                                       v (if (coll? v) (set v) v)]\n                                   [k v])))\n                          (remove #(nil? (second %))))]\n      {:properties (into {} properties)\n       :properties-order (map first properties)\n       :page-refs page-refs})))\n\n(defn- paragraph-timestamp-block?\n  [block]\n  (and (paragraph-block? block)\n       (or (timestamp-block? (first (second block)))\n           (timestamp-block? (second (second block))))))\n\n(defn extract-timestamps\n  [block]\n  (some->>\n   (second block)\n   (filter timestamp-block?)\n   (map last)\n   (into {})))\n\n;; {\"Deadline\" {:date {:year 2020, :month 10, :day 20}, :wday \"Tue\", :time {:hour 8, :min 0}, :repetition [[\"DoublePlus\"] [\"Day\"] 1], :active true}}\n(defn timestamps->scheduled-and-deadline\n  [timestamps]\n  (let [timestamps (medley/map-keys (comp keyword string/lower-case) timestamps)\n        m (some->> (select-keys timestamps [:scheduled :deadline])\n                   (map (fn [[k v]]\n                          (let [{:keys [date repetition]} v\n                                {:keys [year month day]} date\n                                day (js/parseInt (str year (util/zero-pad month) (util/zero-pad day)))]\n                            (cond->\n                             (case k\n                               :scheduled\n                               {:scheduled day}\n                               :deadline\n                               {:deadline day})\n                              repetition\n                              (assoc :repeated? true))))))]\n    (apply merge m)))\n\n(defn convert-page-if-journal\n  \"Convert journal file name to user' custom date format\"\n  [original-page-name]\n  (when original-page-name\n    (let [page-name (util/page-name-sanity-lc original-page-name)\n          day (date/journal-title->int page-name)]\n     (if day\n       (let [original-page-name (date/int->journal-title day)]\n         [original-page-name (util/page-name-sanity-lc original-page-name) day])\n       [original-page-name page-name day]))))\n\n(defn page-name->map\n  \"Create a page's map structure given a original page name (string).\n   map as input is supported for legacy compatibility.\n   with-timestamp?: assign timestampes to the map structure.\n    Useful when creating new pages from references or namespaces,\n    as there's no chance to introduce timestamps via editing in page\"\n  ([original-page-name with-id?]\n   (page-name->map original-page-name with-id? true))\n  ([original-page-name with-id? with-timestamp?]\n   (cond\n     (and original-page-name (string? original-page-name))\n     (let [original-page-name (util/remove-boundary-slashes original-page-name)\n           [original-page-name page-name journal-day] (convert-page-if-journal original-page-name)\n           namespace? (and (not (boolean (text/get-nested-page-name original-page-name)))\n                           (text/namespace-page? original-page-name))\n           page-entity (db/entity [:block/name page-name])\n           original-page-name (or (:block/original-name page-entity) original-page-name)]\n       (merge\n        {:block/name page-name\n         :block/original-name original-page-name}\n        (when with-id?\n          (if page-entity\n            {:block/uuid (:block/uuid page-entity)}\n            {:block/uuid (db/new-block-id)}))\n        (when namespace?\n          (let [namespace (first (gp-util/split-last \"/\" original-page-name))]\n            (when-not (string/blank? namespace)\n              {:block/namespace {:block/name (util/page-name-sanity-lc namespace)}})))\n        (when (and with-timestamp? (not page-entity)) ;; Only assign timestamp on creating new entity\n          (let [current-ms (util/time-ms)]\n            {:block/created-at current-ms\n             :block/updated-at current-ms}))\n        (if journal-day\n          {:block/journal? true\n           :block/journal-day journal-day}\n          {:block/journal? false})))\n\n     (and (map? original-page-name) (:block/uuid original-page-name))\n     original-page-name\n\n     (and (map? original-page-name) with-id?)\n     (assoc original-page-name :block/uuid (db/new-block-id))\n\n     :else\n     nil)))\n\n(defn with-page-refs\n  [{:keys [title body tags refs marker priority] :as block} with-id?]\n  (let [refs (->> (concat tags refs [marker priority])\n                  (remove string/blank?)\n                  (distinct))\n        refs (atom refs)]\n    (walk/prewalk\n     (fn [form]\n       ;; skip custom queries\n       (when-not (and (vector? form)\n                      (= (first form) \"Custom\")\n                      (= (second form) \"query\"))\n         (when-let [page (get-page-reference form)]\n           (swap! refs conj page))\n         (when-let [tag (get-tag form)]\n           (let [tag (text/page-ref-un-brackets! tag)]\n             (when (gp-util/tag-valid? tag)\n               (swap! refs conj tag))))\n         form))\n     (concat title body))\n    (let [refs (remove string/blank? @refs)\n          children-pages (->> (mapcat (fn [p]\n                                        (let [p (if (map? p)\n                                                  (:block/original-name p)\n                                                  p)]\n                                          (when (string? p)\n                                            (let [p (or (text/get-nested-page-name p) p)]\n                                              (when (text/namespace-page? p)\n                                                (util/split-namespace-pages p))))))\n                                      refs)\n                              (remove string/blank?)\n                              (distinct))\n          refs (->> (distinct (concat refs children-pages))\n                    (remove nil?))\n          refs (map (fn [ref] (page-name->map ref with-id?)) refs)]\n      (assoc block :refs refs))))\n\n(defn with-block-refs\n  [{:keys [title body] :as block}]\n  (let [ref-blocks (atom nil)]\n    (walk/postwalk\n     (fn [form]\n       (when-let [block (get-block-reference form)]\n         (swap! ref-blocks conj block))\n       form)\n     (concat title body))\n    (let [ref-blocks (->> @ref-blocks\n                          (filter gp-util/uuid-string?))\n          ref-blocks (map\n                       (fn [id]\n                         [:block/uuid (medley/uuid id)])\n                       ref-blocks)\n          refs (distinct (concat (:refs block) ref-blocks))]\n      (assoc block :refs refs))))\n\n(defn- block-keywordize\n  [block]\n  (medley/map-keys\n   (fn [k]\n     (if (namespace k)\n       k\n       (keyword \"block\" k)))\n   block))\n\n(defn- sanity-blocks-data\n  [blocks]\n  (map (fn [block]\n         (if (map? block)\n           (block-keywordize (gp-util/remove-nils block))\n           block))\n       blocks))\n\n(defn with-path-refs\n  [blocks]\n  (loop [blocks blocks\n         acc []\n         parents []]\n    (if (empty? blocks)\n      acc\n      (let [block (first blocks)\n            cur-level (:block/level block)\n            level-diff (- cur-level\n                          (get (last parents) :block/level 0))\n            [path-refs parents]\n            (cond\n              (zero? level-diff)            ; sibling\n              (let [path-refs (mapcat :block/refs (drop-last parents))\n                    parents (conj (vec (butlast parents)) block)]\n                [path-refs parents])\n\n              (> level-diff 0)              ; child\n              (let [path-refs (mapcat :block/refs parents)]\n                [path-refs (conj parents block)])\n\n              (< level-diff 0)              ; new parent\n              (let [parents (vec (take-while (fn [p] (< (:block/level p) cur-level)) parents))\n                    path-refs (mapcat :block/refs parents)]\n                [path-refs (conj parents block)]))\n            path-ref-pages (->> path-refs\n                                (concat (:block/refs block))\n                                (map (fn [ref]\n                                       (cond\n                                         (map? ref)\n                                         (:block/name ref)\n\n                                         :else\n                                         ref)))\n                                (remove string/blank?)\n                                (map (fn [ref]\n                                       (if (string? ref)\n                                         {:block/name (util/page-name-sanity-lc ref)}\n                                         ref)))\n                                (remove vector?)\n                                (remove nil?)\n                                (distinct))]\n        (recur (rest blocks)\n               (conj acc (assoc block :block/path-refs path-ref-pages))\n               parents)))))\n\n(defn block-tags->pages\n  [{:keys [tags] :as block}]\n  (if (seq tags)\n    (assoc block :tags (map (fn [tag]\n                              (let [tag (text/page-ref-un-brackets! tag)]\n                                [:block/name (util/page-name-sanity-lc tag)])) tags))\n    block))\n\n(defn- get-block-content\n  [utf8-content block format meta]\n  (let [content (if-let [end-pos (:end_pos meta)]\n                  (utf8/substring utf8-content\n                                  (:start_pos meta)\n                                  end-pos)\n                  (utf8/substring utf8-content\n                                  (:start_pos meta)))\n        content (when content\n                  (let [content (text/remove-level-spaces content format (config/get-block-pattern format))]\n                    (if (or (:pre-block? block)\n                            (= (:format block) :org))\n                      content\n                      (gp-mldoc/remove-indentation-spaces content (inc (:level block)) false))))]\n    (if (= format :org)\n      content\n      (property/->new-properties content))))\n\n(defn get-custom-id-or-new-id\n  [properties]\n  (or (when-let [custom-id (or (get-in properties [:properties :custom-id])\n                               (get-in properties [:properties :custom_id])\n                               (get-in properties [:properties :id]))]\n        (let [custom-id (and (string? custom-id) (string/trim custom-id))]\n          (when (and custom-id (gp-util/uuid-string? custom-id))\n            (uuid custom-id))))\n      (db/new-block-id)))\n\n(defn get-page-refs-from-properties\n  [properties]\n  (let [page-refs (mapcat (fn [v] (cond\n                                   (coll? v)\n                                   v\n\n                                   (text/page-ref? v)\n                                   [(text/page-ref-un-brackets! v)]\n\n                                   :else\n                                   nil)) (vals properties))\n        page-refs (remove string/blank? page-refs)]\n    (map (fn [page] (page-name->map page true)) page-refs)))\n\n(defn with-page-block-refs\n  [block with-id?]\n  (some-> block\n          (with-page-refs with-id?)\n          with-block-refs\n          block-tags->pages\n          (update :refs (fn [col] (remove nil? col)))))\n\n(defn with-pre-block-if-exists\n  [blocks body pre-block-properties encoded-content]\n  (let [first-block (first blocks)\n        first-block-start-pos (get-in first-block [:block/meta :start_pos])\n\n        ;; Add pre-block\n        blocks (if (or (> first-block-start-pos 0)\n                       (empty? blocks))\n                 (cons\n                  (merge\n                   (let [content (utf8/substring encoded-content 0 first-block-start-pos)\n                         {:keys [properties properties-order]} pre-block-properties\n                         id (get-custom-id-or-new-id {:properties properties})\n                         property-refs (->> (get-page-refs-from-properties properties)\n                                            (map :block/original-name))\n                         block {:uuid id\n                                :content content\n                                :level 1\n                                :properties properties\n                                :properties-order properties-order\n                                :refs property-refs\n                                :pre-block? true\n                                :unordered true\n                                :body body}\n                         block (with-page-block-refs block false)]\n                     (block-keywordize block))\n                   (select-keys first-block [:block/format :block/page]))\n                  blocks)\n                 blocks)]\n    (with-path-refs blocks)))\n\n(defn- construct-block\n  [block properties timestamps body encoded-content format pos-meta with-id?]\n  (let [id (get-custom-id-or-new-id properties)\n        ref-pages-in-properties (->> (:page-refs properties)\n                                     (remove string/blank?))\n        block (second block)\n        unordered? (:unordered block)\n        markdown-heading? (and (:size block) (= :markdown format))\n        block (if markdown-heading?\n                (assoc block\n                       :type :heading\n                       :level (if unordered? (:level block) 1)\n                       :heading-level (or (:size block) 6))\n                block)\n        block (cond->\n                (assoc block\n                       :uuid id\n                       :refs ref-pages-in-properties\n                       :format format\n                       :meta pos-meta)\n                (seq (:properties properties))\n                (assoc :properties (:properties properties))\n\n                (seq (:properties-order properties))\n                (assoc :properties-order (:properties-order properties)))\n        block (if (get-in block [:properties :collapsed])\n                (assoc block :collapsed? true)\n                block)\n        block (assoc block\n                     :content (get-block-content encoded-content block format pos-meta))\n        block (if (seq timestamps)\n                (merge block (timestamps->scheduled-and-deadline timestamps))\n                block)\n        block (assoc block :body body)\n        block (with-page-block-refs block with-id?)\n        {:keys [created-at updated-at]} (:properties properties)\n        block (cond-> block\n                (and created-at (integer? created-at))\n                (assoc :block/created-at created-at)\n\n                (and updated-at (integer? updated-at))\n                (assoc :block/updated-at updated-at))]\n    (dissoc block :title :body :anchor)))\n\n(defn extract-blocks\n  \"Extract headings from mldoc ast.\n  Args:\n    `blocks`: mldoc ast.\n    `content`: markdown or org-mode text.\n    `with-id?`: If `with-id?` equals to true, all the referenced pages will have new db ids.\n    `format`: content's format, it could be either :markdown or :org-mode.\"\n  [blocks content with-id? format]\n  {:pre [(seq blocks) (string? content) (boolean? with-id?) (contains? #{:markdown :org} format)]}\n  (try\n    (let [encoded-content (utf8/encode content)\n          [blocks body pre-block-properties]\n          (loop [headings []\n                 blocks (reverse blocks)\n                 timestamps {}\n                 properties {}\n                 body []]\n            (if (seq blocks)\n              (let [[block pos-meta] (first blocks)\n                    ;; fix start_pos\n                    pos-meta (assoc pos-meta :end_pos\n                                    (if (seq headings)\n                                      (get-in (last headings) [:meta :start_pos])\n                                      nil))]\n                (cond\n                  (paragraph-timestamp-block? block)\n                  (let [timestamps (extract-timestamps block)\n                        timestamps' (merge timestamps timestamps)]\n                    (recur headings (rest blocks) timestamps' properties body))\n\n                  (property/properties-ast? block)\n                  (let [properties (extract-properties format (second block))]\n                    (recur headings (rest blocks) timestamps properties body))\n\n                  (heading-block? block)\n                  (let [block (construct-block block properties timestamps body encoded-content format pos-meta with-id?)]\n                    (recur (conj headings block) (rest blocks) {} {} []))\n\n                  :else\n                  (recur headings (rest blocks) timestamps properties (conj body block))))\n              [(-> (reverse headings)\n                   sanity-blocks-data)\n               body\n               properties]))\n          result (with-pre-block-if-exists blocks body pre-block-properties encoded-content)]\n      (map #(dissoc % :block/meta) result))\n    (catch js/Error e\n      (js/console.error \"extract-blocks-failed\")\n      (log/error :exception e))))\n\n(defn with-parent-and-left\n  [page-id blocks]\n  (loop [blocks (map (fn [block] (assoc block :block/level-spaces (:block/level block))) blocks)\n         parents [{:page/id page-id     ; db id or a map {:block/name \"xxx\"}\n                   :block/level 0\n                   :block/level-spaces 0}]\n         result []]\n    (if (empty? blocks)\n      (map #(dissoc % :block/level-spaces) result)\n      (let [[block & others] blocks\n            level-spaces (:block/level-spaces block)\n            {:block/keys [uuid level parent] :as last-parent} (last parents)\n            parent-spaces (:block/level-spaces last-parent)\n            [blocks parents result]\n            (cond\n              (= level-spaces parent-spaces)        ; sibling\n              (let [block (assoc block\n                                 :block/parent parent\n                                 :block/left [:block/uuid uuid]\n                                 :block/level level)\n                    parents' (conj (vec (butlast parents)) block)\n                    result' (conj result block)]\n                [others parents' result'])\n\n              (> level-spaces parent-spaces)         ; child\n              (let [parent (if uuid [:block/uuid uuid] (:page/id last-parent))\n                    block (cond->\n                            (assoc block\n                                  :block/parent parent\n                                  :block/left parent)\n                            ;; fix block levels with wrong order\n                            ;; For example:\n                            ;;   - a\n                            ;; - b\n                            ;; What if the input indentation is two spaces instead of 4 spaces\n                            (>= (- level-spaces parent-spaces) 1)\n                            (assoc :block/level (inc level)))\n                    parents' (conj parents block)\n                    result' (conj result block)]\n                [others parents' result'])\n\n              (< level-spaces parent-spaces)\n              (cond\n                (some #(= (:block/level-spaces %) (:block/level-spaces block)) parents) ; outdent\n                (let [parents' (vec (filter (fn [p] (<= (:block/level-spaces p) level-spaces)) parents))\n                      left (last parents')\n                      blocks (cons (assoc (first blocks)\n                                          :block/level (dec level)\n                                          :block/left [:block/uuid (:block/uuid left)])\n                                   (rest blocks))]\n                  [blocks parents' result])\n\n                :else\n                (let [[f r] (split-with (fn [p] (<= (:block/level-spaces p) level-spaces)) parents)\n                      left (first r)\n                      parent-id (if-let [block-id (:block/uuid (last f))]\n                                  [:block/uuid block-id]\n                                  page-id)\n                      block (cond->\n                              (assoc block\n                                     :block/parent parent-id\n                                     :block/left [:block/uuid (:block/uuid left)]\n                                     :block/level (:block/level left)\n                                     :block/level-spaces (:block/level-spaces left)))\n\n                      parents' (->> (concat f [block]) vec)\n                      result' (conj result block)]\n                  [others parents' result'])))]\n        (recur blocks parents result)))))\n\n(defn parse-block\n  ([block]\n   (parse-block block nil))\n  ([{:block/keys [uuid content page format] :as block} {:keys [with-id?]\n                                                        :or {with-id? true}}]\n   (when-not (string/blank? content)\n     (let [block (dissoc block :block/pre-block?)\n           ast (format/to-edn content format nil)\n           blocks (extract-blocks ast content with-id? format)\n           new-block (first blocks)\n           parent-refs (->> (db/get-block-parent (state/get-current-repo) uuid)\n                            :block/path-refs\n                            (map :db/id))\n           {:block/keys [refs]} new-block\n           ref-pages (filter :block/name refs)\n           path-ref-pages (->> (concat ref-pages parent-refs [(:db/id page)])\n                               (remove nil?))\n           block (cond->\n                   (merge\n                    block\n                    new-block\n                    {:block/path-refs path-ref-pages})\n                   (> (count blocks) 1)\n                   (assoc :block/warning :multiple-blocks))\n           block (dissoc block :block/title :block/body :block/level)]\n       (if uuid (assoc block :block/uuid uuid) block)))))\n\n(defn parse-title-and-body\n  ([block]\n   (when (map? block)\n     (merge block\n            (parse-title-and-body (:block/uuid block)\n                                  (:block/format block)\n                                  (:block/pre-block? block)\n                                  (:block/content block)))))\n  ([block-uuid format pre-block? content]\n   (when-not (string/blank? content)\n     (let [content (if pre-block? content\n                       (str (config/get-block-pattern format) \" \" (string/triml content)))]\n       (if-let [result (state/get-block-ast block-uuid content)]\n         result\n         (let [ast (->> (format/to-edn content format (gp-mldoc/default-config format))\n                        (map first))\n               title (when (heading-block? (first ast))\n                       (:title (second (first ast))))\n               body (vec (if title (rest ast) ast))\n               body (drop-while property/properties-ast? body)\n               result (cond->\n                        (if (seq body) {:block/body body} {})\n                        title\n                        (assoc :block/title title))]\n           (state/add-block-ast-cache! block-uuid content result)\n           result))))))\n\n(defn macro-subs\n  [macro-content arguments]\n  (loop [s macro-content\n         args arguments\n         n 1]\n    (if (seq args)\n      (recur\n       (string/replace s (str \"$\" n) (first args))\n       (rest args)\n       (inc n))\n      s)))\n\n(defn break-line-paragraph?\n  [[typ break-lines]]\n  (and (= typ \"Paragraph\")\n       (every? #(= % [\"Break_Line\"]) break-lines)))\n\n(defn trim-paragraph-special-break-lines\n  [ast]\n  (let [[typ paras] ast]\n    (if (= typ \"Paragraph\")\n      (let [indexed-paras (map-indexed vector paras)]\n        [typ (->> (filter\n                            #(let [[index value] %]\n                               (not (and (> index 0)\n                                         (= value [\"Break_Line\"])\n                                         (contains? #{\"Timestamp\" \"Macro\"}\n                                                    (first (nth paras (dec index)))))))\n                            indexed-paras)\n                           (map #(last %)))])\n      ast)))\n\n(defn trim-break-lines!\n  [ast]\n  (drop-while break-line-paragraph?\n              (map trim-paragraph-special-break-lines ast)))\n"]}