shadow$provide.module$node_modules$chrono_node$dist$locales$pt$parsers$PTCasualDateParser=function(global,require,module,exports){var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k);Object.defineProperty(o,k2,{enumerable:!0,get:function(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k);o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,
v){o["default"]=v});global=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.prototype.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};Object.defineProperty(exports,"__esModule",{value:!0});module=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const references=global(require("module$node_modules$chrono_node$dist$common$casualReferences"));
class PTCasualDateParser extends module.AbstractParserWithWordBoundaryChecking{innerPattern(context){return/(agora|hoje|amanha|amanhã|ontem)(?=\W|$)/i}innerExtract(context,match){match=match[0].toLowerCase();const component=context.createParsingComponents();switch(match){case "agora":return references.now(context.refDate);case "hoje":return references.today(context.refDate);case "amanha":case "amanhã":return references.tomorrow(context.refDate);case "ontem":return references.yesterday(context.refDate)}return component}}
exports.default=PTCasualDateParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$pt$parsers$PTCasualDateParser.js.map
