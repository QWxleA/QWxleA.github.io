{"version":3,"sources":["rewrite_cljc/zip/removez.cljc"],"mappings":";AASA;;;iDAAA,jDAAOA,0GAEJC,KAAKC;AAFR,AAGE,OAACC,oDAAqBF,KAAKC;;AAE7B;;;kDAAA,lDAAOE,4GAEJH,KAAKC;AAFR,AAGE,OAACG,mDAAoBJ,KAAKC;;AAE5B,oCAAA,pCAAOI,gFACJL,KAAKC;AADR,sHAEO,sFAAI,EAAI,EAAI,AAACK,uCAAaN,WACd,AAACO,sCAAYP,SACnB,AAACG,gDAAuBH,KAAKC,UAC7BD,nNACF,AAACD,yNAAsBE,hQACvBO,tHACJ,OAACC,0EAAmBC;;AAE3B;;;;;;;;;;;;;;;;;;;kCAAA,lCAAMG,4EAkBHb;AAlBH,AAAA,oBAmBSA;AAnBT;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AAAA,IAAAC,YAqBE,AAACP,kCAASL,KAAKc;AArBjB,AAAA,oBAoBUF;AApBV;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AAAAC;;AAuBA;;;mDAAA,nDAAMG,8GAEHf;AAFH,AAAA,oBAGSA;AAHT;AAAA,AAAA,MAAA,KAAAW,MAAA;;;AAAA,IAAAC,YAKE,uCAAA,WAAAI,lDAACX,kCAASL;AAAV,AAAgB,IAAAiB,oBAAK,8CAAAD,9CAACF;AAAN,AAAA,oBAAAG;AAAwB,OAACC,cAAI,6CAAAF,7CAACG;;AAA9BF;;;AALlB,AAAA,oBAIUL;AAJV;AAAA,AAAA,MAAA,KAAAD,MAAA;;;AAAAC","names":["rewrite-cljc.zip.removez/remove-trailing-while","zloc","p?","rewrite-cljc.custom-zipper.utils/remove-right-while","rewrite-cljc.zip.removez/remove-preceding-while","rewrite-cljc.custom-zipper.utils/remove-left-while","rewrite-cljc.zip.removez/remove-p","rewrite-cljc.zip.move/rightmost?","rewrite-cljc.zip.move/leftmost?","rewrite-cljc.custom-zipper.core/remove","rewrite_cljc.zip.whitespace.skip_whitespace","rewrite-cljc.custom-zipper.core/prev","js/Error","%","rewrite-cljc.zip.removez/remove","rewrite-cljc.zip.whitespace/whitespace?","rewrite-cljc.zip.removez/remove-preserve-newline","p1__92960#","and__4251__auto__","cljs.core/not","rewrite-cljc.zip.whitespace/linebreak?"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-cljc.custom-zipper.core :as z]\n            [rewrite-cljc.custom-zipper.utils :as u]\n            [rewrite-cljc.zip.move :as m]\n            [rewrite-cljc.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- remove-trailing-while\n  \"Remove all whitespace following a given node.\"\n  [zloc p?]\n  (u/remove-right-while zloc p?))\n\n(defn- remove-preceding-while\n  \"Remove all whitespace preceding a given node.\"\n  [zloc p?]\n  (u/remove-left-while zloc p?))\n\n(defn- remove-p\n  [zloc p?]\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-while zloc p?)\n             zloc)\n           (remove-trailing-while p?)\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n(defn remove\n  \"Return zipper with current node in `zloc` removed. Returned zipper location\n   is moved to the first non-whitespace node preceding removed node in a depth-first walk.\n   Removes whitespace appropriately.\n\n  - `[1 |2  3]    => [|1 3]`\n  - `[1 |2]       => [|1]`\n  - `[|1 2]       => |[2]`\n  - `[|1]         => |[]`\n  - `[  |1  ]     => |[]`\n  - `[1 [2 3] |4] => [1 [2 |3]]`\n  - `[|1 [2 3] 4] => |[[2 3] 4]`\n\n   If the removed node is at the rightmost location, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are removed. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (remove-p zloc ws/whitespace?))\n\n(defn remove-preserve-newline\n  \"Same as [[remove]] but preserves newlines.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (remove-p zloc #(and (ws/whitespace? %) (not (ws/linebreak? %)))))\n"]}