{"version":3,"sources":["frontend/handler/extract.cljs"],"mappings":"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","names":["frontend.handler.extract/get-page-name","file","ast","cljs.core.map","cljs.core/first","clojure.string/includes?","first-block","cljs.core/last","cljs.core.filter","frontend.format.block/heading-block?","property-name","cljs.core/contains?","cljs.core/ffirst","clojure.string/blank?","first-block-name","title","and__4251__auto__","file-name","temp__5720__auto__","clojure.string.split","result","logseq.graph-parser.util/split-last","frontend.config/mldoc-support?","clojure.string/lower-case","frontend.util/get-file-ext","frontend.util/url-decode","clojure.string/replace","or__4253__auto__","cljs.core._EQ_","frontend.state/page-name-order","frontend.handler.extract/extract-pages-and-blocks","repo-url","format","properties","content","e94288","vec__94289","cljs.core.nth","page","_original-page-name","page-name","_journal-day","frontend.format.block/convert-page-if-journal","blocks","frontend.format.block/extract-blocks","frontend.format.block/with-parent-and-left","ref-pages","cljs.core.atom","ref-tags","block","block-ref-pages","cljs.core/seq","page-lookup-ref","block-path-ref-pages","cljs.core/cons","cljs.core.remove","cljs.core/nil?","cljs.core.swap_BANG_","clojure.set/union","cljs.core/set","cljs.core.dissoc","cljs.core.assoc","page-entity","alias","aliases","p1__94287#","frontend.util/page-name-sanity-lc","cljs.core.distinct","cljs.core.conj","G__94292","logseq.graph-parser.util/remove-nils","frontend.format.block.page_name__GT_map","logseq.graph-parser.util/path-normalize","tags","tag","namespace-pages","logseq.graph-parser.text/namespace-page?","frontend.util/split-namespace-pages","pages","cljs.core/deref","cljs.core.concat","cljs.core/vector?","frontend.util/distinct-by","frontend.db/new-block-id","b","js/Error","e","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.extract/extract-blocks-pages","frontend.format/get-format","_","cljs.core.println","frontend.format.mldoc/->edn","logseq.graph_parser.mldoc.default_config","frontend.util.property/properties-ast?","p__94293","vec__94294","x","y","logseq.graph_parser.text.parse_property","frontend.state.get_config","cljs.core.into","clojure.walk/keywordize-keys","cljs.core.update","v","frontend.handler.extract/with-block-uuid","frontend.handler.extract/with-ref-pages","cljs.core.mapcat","cljs.core/group-by","cljs.core/vals","cljs.core.partial","cljs.core/apply","cljs.core/merge","frontend.handler.extract/extract-all-block-refs","cljs.core/second","cljs.core/re-seq"],"sourcesContent":["(ns frontend.handler.extract\n  \"Extract helper.\"\n  (:require [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.format :as format]\n            [frontend.format.block :as block]\n            [frontend.format.mldoc :as mldoc]\n            [frontend.state :as state]\n            [logseq.graph-parser.text :as text]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [frontend.util.property :as property]\n            [lambdaisland.glogi :as log]))\n\n(defn get-page-name\n  [file ast]\n  ;; headline\n  (let [ast (map first ast)]\n    (if (string/includes? file \"pages/contents.\")\n      \"Contents\"\n      (let [first-block (last (first (filter block/heading-block? ast)))\n            property-name (when (and (contains? #{\"Properties\" \"Property_Drawer\"} (ffirst ast))\n                                     (not (string/blank? (:title (last (first ast))))))\n                            (:title (last (first ast))))\n            first-block-name (let [title (last (first (:title first-block)))]\n                               (and first-block\n                                    (string? title)\n                                    title))\n            file-name (when-let [file-name (last (string/split file #\"/\"))]\n                        (let [result (first (gp-util/split-last \".\" file-name))]\n                          (if (config/mldoc-support? (string/lower-case (util/get-file-ext file)))\n                            (util/url-decode (string/replace result \".\" \"/\"))\n                            result)))]\n        (or property-name\n            (if (= (state/page-name-order) \"heading\")\n              (or first-block-name file-name)\n              (or file-name first-block-name)))))))\n\n\n;; TODO: performance improvement\n(defn- extract-pages-and-blocks\n  #_:clj-kondo/ignore\n  [repo-url format ast properties file content]\n  (try\n    (let [page (get-page-name file ast)\n          [_original-page-name page-name _journal-day] (block/convert-page-if-journal page)\n          blocks (->> (block/extract-blocks ast content false format)\n                      (block/with-parent-and-left {:block/name page-name}))\n          ref-pages (atom #{})\n          ref-tags (atom #{})\n          blocks (map (fn [block]\n                        (let [block-ref-pages (seq (:block/refs block))\n                              page-lookup-ref [:block/name page-name]\n                              block-path-ref-pages (->> (cons page-lookup-ref (seq (:block/path-refs block)))\n                                                        (remove nil?))]\n                          (when block-ref-pages\n                            (swap! ref-pages set/union (set block-ref-pages)))\n                          (-> block\n                              (dissoc :ref-pages)\n                              (assoc :block/format format\n                                     :block/page [:block/name page-name]\n                                     :block/refs block-ref-pages\n                                     :block/path-refs block-path-ref-pages))))\n                   blocks)\n          page-entity (let [alias (:alias properties)\n                            alias (if (string? alias) [alias] alias)\n                            aliases (and alias\n                                         (seq (remove #(or (= page-name (util/page-name-sanity-lc %))\n                                                           (string/blank? %)) ;; disable blank alias\n                                                      alias)))\n                            aliases (->>\n                                     (map\n                                       (fn [alias]\n                                         (let [page-name (util/page-name-sanity-lc alias)\n                                               aliases (distinct\n                                                        (conj\n                                                         (remove #{alias} aliases)\n                                                         page))\n                                               aliases (when (seq aliases)\n                                                         (map\n                                                           (fn [alias]\n                                                             {:block/name (util/page-name-sanity-lc alias)})\n                                                           aliases))]\n                                           (if (seq aliases)\n                                             {:block/name page-name\n                                              :block/alias aliases}\n                                             {:block/name page-name})))\n                                       aliases)\n                                     (remove nil?))]\n                        (cond->\n                          (gp-util/remove-nils\n                           (assoc\n                            (block/page-name->map page false)\n                            :block/file {:file/path (gp-util/path-normalize file)}))\n                          (seq properties)\n                          (assoc :block/properties properties)\n\n                          (seq aliases)\n                          (assoc :block/alias aliases)\n\n                          (:tags properties)\n                          (assoc :block/tags (let [tags (:tags properties)\n                                                   tags (if (string? tags) [tags] tags)\n                                                   tags (remove string/blank? tags)]\n                                               (swap! ref-tags set/union (set tags))\n                                               (map (fn [tag] {:block/name (util/page-name-sanity-lc tag)\n                                                               :block/original-name tag})\n                                                 tags)))))\n          namespace-pages (let [page (:block/original-name page-entity)]\n                            (when (text/namespace-page? page)\n                              (->> (util/split-namespace-pages page)\n                                   (map (fn [page]\n                                          (-> (block/page-name->map page true)\n                                              (assoc :block/format format)))))))\n          pages (->> (concat\n                      [page-entity]\n                      @ref-pages\n                      (map\n                        (fn [page]\n                          {:block/original-name page\n                           :block/name (util/page-name-sanity-lc page)})\n                        @ref-tags)\n                      namespace-pages)\n                     ;; remove block references\n                     (remove vector?)\n                     (remove nil?))\n          pages (util/distinct-by :block/name pages)\n          pages (remove nil? pages)\n          pages (map (fn [page] (assoc page :block/uuid (db/new-block-id))) pages)\n          blocks (->> (remove nil? blocks)\n                      (map (fn [b] (dissoc b :block/title :block/body :block/level :block/children :block/meta :block/anchor))))]\n      [pages blocks])\n    (catch js/Error e\n      (log/error :exception e))))\n\n(defn extract-blocks-pages\n  [repo-url file content]\n  (if (string/blank? content)\n    []\n    (let [format (format/get-format file)\n          _ (println \"Parsing start: \" file)\n          ast (mldoc/->edn content (gp-mldoc/default-config format\n                                                         ;; {:parse_outline_only? true}\n                                                         ))]\n      (println \"Parsing finished : \" file)\n      (let [first-block (ffirst ast)\n            properties (let [properties (and (property/properties-ast? first-block)\n                                             (->> (last first-block)\n                                                  (map (fn [[x y]]\n                                                         [x (if (string? y)\n                                                              (text/parse-property format x y (state/get-config))\n                                                              y)]))\n                                                  (into {})\n                                                  (walk/keywordize-keys)))]\n                         (when (and properties (seq properties))\n                           (if (:filters properties)\n                             (update properties :filters\n                                     (fn [v]\n                                       (string/replace (or v \"\") \"\\\\\" \"\")))\n                             properties)))]\n        (extract-pages-and-blocks\n         repo-url\n         format ast properties\n         file content)))))\n\n(defn with-block-uuid\n  [pages]\n  (->> (util/distinct-by :block/name pages)\n       (map (fn [page]\n              (if (:block/uuid page)\n                page\n                (assoc page :block/uuid (db/new-block-id)))))))\n\n(defn with-ref-pages\n  [pages blocks]\n  (let [ref-pages (->> (mapcat :block/refs blocks)\n                       (filter :block/name))]\n    (->> (concat pages ref-pages)\n         (group-by :block/name)\n         vals\n         (map (partial apply merge))\n         (with-block-uuid))))\n\n(defn extract-all-block-refs\n  [content]\n  (map second (re-seq #\"\\(\\(([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})\\)\\)\" content)))\n"]}