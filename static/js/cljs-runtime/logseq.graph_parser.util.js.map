{"version":3,"sources":["logseq/graph_parser/util.cljs"],"mappings":"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","names":["logseq.graph-parser.util/uuid-pattern","js/logseq","js/logseq.graph-parser","js/logseq.graph-parser.util","js/logseq.graph-parser.util.exactly-uuid-pattern","logseq.graph-parser.util/exactly-uuid-pattern","cljs.core/re-pattern","logseq.graph-parser.util/safe-re-find","pattern","s","js/console.trace","cljs.core/re-find","logseq.graph-parser.util/uuid-string?","logseq.graph-parser.util/path-normalize","logseq.graph-parser.util/remove-nils","nm","clojure.walk/postwalk","el","cljs.core/map?","cljs.core.into","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/second","logseq.graph-parser.util/split-first","temp__5720__auto__","first-index","clojure.string.index_of","cljs.core.subs","cljs.core/count","logseq.graph-parser.util/split-last","last-index","clojure.string.last_index_of","logseq.graph-parser.util/tag-valid?","tag-name","cljs.core/not","var_args","G__44282","logseq.graph-parser.util/safe-subs","js/Error","start","c","logseq.graph_parser.util.safe_subs","end","x__4339__auto__","y__4340__auto__","logseq.graph-parser.util/unquote-string","v","clojure.string/trim","logseq.graph-parser.util/wrapped-by-quotes?","cljs.core._EQ_","cljs.core/first","cljs.core/last","logseq.graph-parser.util/parse-int","x","js/parseInt","logseq.graph-parser.util/safe-parse-int","result","js/isNaN","logseq.graph-parser.util/url?","and__4251__auto__","e44318","js/URL","_e","logseq.graph-parser.util/json->clj","json-string","js/JSON.parse","cljs.core.js__GT_clj","logseq.graph-parser.util/map-keys","f","m","cljs.core/reduce-kv","m_","k","cljs.core.assoc","logseq.graph-parser.util/zero-pad","n","logseq.graph-parser.util/get-file-ext","file","clojure.string/includes?","G__44334","clojure.string.split","clojure.string/lower-case","logseq.graph-parser.util/remove-boundary-slashes","logseq.graph-parser.util/split-namespace-pages","title","parts","others","cljs.core/rest","cljs.core/seq","prev","cljs.core.conj","G__44366","logseq.graph-parser.util/page-name-sanity","page-name","logseq.graph_parser.util.page_name_sanity","replace-slash?","page","G__44369","clojure.string/replace","logseq.graph-parser.util/page-name-sanity-lc","logseq.graph-parser.util/capitalize-all","G__44370","cljs.core.map","clojure.string/capitalize","clojure.string.join","logseq.graph-parser.util/distinct-by","col","cljs.core.reduce","acc","p1__44371#","cljs.core/some","cljs.core/vec","logseq.graph-parser.util/normalize-format","format","G__44379","cljs.core/Keyword","cljs.core.keyword","logseq.graph-parser.util/get-format"],"sourcesContent":["(ns ^:nbb-compatible logseq.graph-parser.util\n  \"Util fns shared between graph-parser and rest of app. Util fns only rely on\n  clojure standard libraries.\"\n  (:require [clojure.walk :as walk]\n            [clojure.string :as string]))\n\n(def uuid-pattern \"[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}\")\n(defonce exactly-uuid-pattern (re-pattern (str \"(?i)^\" uuid-pattern \"$\")))\n\n(defn safe-re-find\n  \"Copy of frontend.util/safe-re-find. Too basic to couple to main app\"\n  [pattern s]\n  (when-not (string? s)\n    ;; TODO: sentry\n    (js/console.trace))\n  (when (string? s)\n    (re-find pattern s)))\n\n(defn uuid-string?\n  \"Copy of frontend.util/uuid-string?. Too basic to couple to main app\"\n  [s]\n  (safe-re-find exactly-uuid-pattern s))\n\n(defn path-normalize\n  \"Normalize file path (for reading paths from FS, not required by writting)\"\n  [s]\n  (.normalize s \"NFC\"))\n\n(defn remove-nils\n  \"remove pairs of key-value that has nil value from a (possibly nested) map.\"\n  [nm]\n  (walk/postwalk\n   (fn [el]\n     (if (map? el)\n       (into {} (remove (comp nil? second)) el)\n       el))\n   nm))\n\n(defn split-first [pattern s]\n  (when-let [first-index (string/index-of s pattern)]\n    [(subs s 0 first-index)\n     (subs s (+ first-index (count pattern)) (count s))]))\n\n(defn split-last [pattern s]\n  (when-let [last-index (string/last-index-of s pattern)]\n    [(subs s 0 last-index)\n     (subs s (+ last-index (count pattern)) (count s))]))\n\n(defn tag-valid?\n  [tag-name]\n  (when (string? tag-name)\n    (not (safe-re-find #\"[# \\t\\r\\n]+\" tag-name))))\n\n(defn safe-subs\n  ([s start]\n   (let [c (count s)]\n     (safe-subs s start c)))\n  ([s start end]\n   (let [c (count s)]\n     (subs s (min c start) (min c end)))))\n\n(defn unquote-string\n  [v]\n  (string/trim (subs v 1 (dec (count v)))))\n\n(defn wrapped-by-quotes?\n  [v]\n  (and (string? v) (>= (count v) 2) (= \"\\\"\" (first v) (last v))))\n\n(defn parse-int\n  \"Copy of frontend.util/parse-int. Too basic to couple to main app\"\n  [x]\n  (if (string? x)\n    (js/parseInt x)\n    x))\n\n(defn safe-parse-int\n  \"Copy of frontend.util/safe-parse-int. Too basic to couple to main app\"\n  [x]\n  (let [result (parse-int x)]\n    (if (js/isNaN result)\n      nil\n      result)))\n\n(defn url?\n  [s]\n  (and (string? s)\n       (try\n         (js/URL. s)\n         true\n         (catch js/Error _e\n           false))))\n\n(defn json->clj\n  [json-string]\n  (-> json-string\n      (js/JSON.parse)\n      (js->clj :keywordize-keys true)))\n\n;; TODO: Use update-keys once its available in cljs and nbb\n(defn map-keys\n  \"Maps function `f` over the keys of map `m` to produce a new map.\"\n  [f m]\n  (reduce-kv\n   (fn [m_ k v]\n     (assoc m_ (f k) v)) {} m))\n\n(defn zero-pad\n  \"Copy of frontend.util/zero-pad. Too basic to couple to main app\"\n  [n]\n  (if (< n 10)\n    (str \"0\" n)\n    (str n)))\n\n(defn get-file-ext\n  \"Copy of frontend.util/get-file-ext. Too basic to couple to main app\"\n  [file]\n  (and\n   (string? file)\n   (string/includes? file \".\")\n   (some-> (last (string/split file #\"\\.\")) string/lower-case)))\n\n(defn remove-boundary-slashes\n  [s]\n  (when (string? s)\n    (let [s (if (= \\/ (first s))\n              (subs s 1)\n              s)]\n      (if (= \\/ (last s))\n        (subs s 0 (dec (count s)))\n        s))))\n\n(defn split-namespace-pages\n  [title]\n  (let [parts (string/split title \"/\")]\n    (loop [others (rest parts)\n           result [(first parts)]]\n      (if (seq others)\n        (let [prev (last result)]\n          (recur (rest others)\n                 (conj result (str prev \"/\" (first others)))))\n        result))))\n\n(defn page-name-sanity\n  \"Sanitize the page-name.\"\n  ([page-name]\n   (page-name-sanity page-name false))\n  ([page-name replace-slash?]\n   (let [page (some-> page-name\n                      (remove-boundary-slashes)\n                      (path-normalize))]\n     (if replace-slash?\n       (string/replace page #\"/\" \"%2A\")\n       page))))\n\n(defn page-name-sanity-lc\n  \"Sanitize the query string for a page name (mandate for :block/name)\"\n  [s]\n  (page-name-sanity (string/lower-case s)))\n\n(defn capitalize-all\n  [s]\n  (some->> (string/split s #\" \")\n           (map string/capitalize)\n           (string/join \" \")))\n\n(defn distinct-by\n  \"Copy of frontend.util/distinct-by. Too basic to couple to main app\"\n  [f col]\n  (reduce\n   (fn [acc x]\n     (if (some #(= (f x) (f %)) acc)\n       acc\n       (vec (conj acc x))))\n   []\n   col))\n\n(defn normalize-format\n  [format]\n  (case (keyword format)\n    :md :markdown\n    :asciidoc :adoc\n    ;; default\n    (keyword format)))\n\n(defn get-format\n  [file]\n  (when file\n    (normalize-format (keyword (string/lower-case (last (string/split file #\"\\.\")))))))\n"]}