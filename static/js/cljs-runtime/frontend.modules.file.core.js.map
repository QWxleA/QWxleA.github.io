{"version":3,"sources":["frontend/modules/file/core.cljs"],"mappings":"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","names":["frontend.modules.file.core/indented-block-content","content","spaces-tabs","lines","clojure.string/split-lines","clojure.string.join","frontend.modules.file.core/content-with-collapsed-state","format","collapsed?","properties","frontend.util.property.insert_property","and__5041__auto__","frontend.util.property.remove_property","p__49481","p__49482","map__49483","cljs.core/--destructure-map","cljs.core.get","map__49484","frontend.modules.file.core/transform-content","pre-block?","unordered","heading-level","left","page","parent","level","heading-to-list?","or__5043__auto__","cljs.core._EQ_","clojure.string/includes?","cljs.core/first","markdown?","clojure.string/trim","vec__49485","cljs.core.nth","markdown-top-heading?","cljs.core/not","prefix","cljs.core.repeat","cljs.core.apply","cljs.core/str","frontend.state/get-export-bullet-indentation","clojure.string/replace","new-content","sep","clojure.string/blank?","p__49488","map__49489","frontend.modules.file.core/tree->file-content-aux","tree","init-level","opts","block-contents","cljs.core/transient","G__49493","vec__49494","seq__49495","cljs.core/seq","first__49496","cljs.core/next","vec__49502","seq__49503","first__49504","f","r","cljs.core/persistent!","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","page?","temp__5718__auto__","children","cljs.core/cons","G__49505","G__49506","cljs.core.conj_BANG_","frontend.modules.file.core/tree->file-content","frontend.modules.file.core/init-level","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.modules.file.core/push-to-write-chan","seq49507","G__49508","self__5751__auto__","files","repo","frontend.state/get-current-repo","chan","frontend.state/get-file-write-chan","js/Error","chan-callback","cljs.core.async.put_BANG_","frontend.modules.file.core/transact-file-tx-if-not-exists!","ok-handler","temp__5720__auto__","cljs.core/name","frontend.state.get_preferred_format","title","clojure.string/capitalize","journal-page?","frontend.date/valid-journal-title?","path","frontend.config/get-journals-directory","frontend.config/get-pages-directory","frontend.date/date->file-name","frontend.util/file-name-sanity","file-path","frontend.config/get-file-path","file","tx","frontend.db/transact!","frontend.modules.file.core/save-tree-aux!","page-block","G__49509","frontend.db/pull","file-db-id","frontend.db.utils.entity","_","frontend.modules.file.core/save-tree","cljs.core/map?"],"sourcesContent":["(ns frontend.modules.file.core\n  (:require [cljs.core.async :as async]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db.utils :as db-utils]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.property :as property]))\n\n(defn- indented-block-content\n  [content spaces-tabs]\n  (let [lines (string/split-lines content)]\n    (string/join (str \"\\n\" spaces-tabs) lines)))\n\n(defn- content-with-collapsed-state\n  \"Only accept nake content (without any indentation)\"\n  [format content collapsed? properties]\n  (cond\n    collapsed?\n    (property/insert-property format content :collapsed true)\n\n    (and (:collapsed properties) (false? collapsed?))\n    (property/remove-property format :collapsed content)\n\n    :else\n    content))\n\n(defn transform-content\n  [{:block/keys [collapsed? format pre-block? unordered content heading-level left page parent properties]} level {:keys [heading-to-list?]}]\n  (let [content (or content \"\")\n        pre-block? (or pre-block?\n                       (and (= page parent left) ; first block\n                            (= :markdown format)\n                            (string/includes? (first (string/split-lines content)) \":: \")))\n        markdown? (= format :markdown)\n        content (cond\n                  pre-block?\n                  (let [content (string/trim content)]\n                    (str content \"\\n\"))\n\n                  :else\n                  (let [markdown-top-heading? (and markdown?\n                                                   (= parent page)\n                                                   (not unordered)\n                                                   heading-level)\n                        [prefix spaces-tabs]\n                        (cond\n                          (= format :org)\n                          [(->>\n                            (repeat level \"*\")\n                            (apply str)) \"\"]\n\n                          markdown-top-heading?\n                          [\"\" \"\"]\n\n                          :else\n                          (let [level (if (and heading-to-list? heading-level)\n                                        (if (> heading-level 1)\n                                          (dec heading-level)\n                                          heading-level)\n                                        level)\n                                spaces-tabs (->>\n                                             (repeat (dec level) (state/get-export-bullet-indentation))\n                                             (apply str))]\n                            [(str spaces-tabs \"-\") (str spaces-tabs \"  \")]))\n                        content (if heading-to-list?\n                                  (-> (string/replace content #\"^\\s?#+\\s+\" \"\")\n                                      (string/replace #\"^\\s?#+\\s?$\" \"\"))\n                                  content)\n                        content (content-with-collapsed-state format content collapsed? properties)\n                        new-content (indented-block-content (string/trim content) spaces-tabs)\n                        sep (if (or markdown-top-heading?\n                                    (string/blank? new-content))\n                              \"\"\n                              \" \")]\n                    (str prefix sep new-content)))]\n    content))\n\n\n(defn- tree->file-content-aux\n  [tree {:keys [init-level] :as opts}]\n  (let [block-contents (transient [])]\n    (loop [[f & r] tree level init-level]\n      (if (nil? f)\n        (->> block-contents persistent! flatten (remove nil?))\n        (let [page? (nil? (:block/page f))\n              content (if page? nil (transform-content f level opts))\n              new-content\n              (if-let [children (seq (:block/children f))]\n                     (cons content (tree->file-content-aux children {:init-level (inc level)}))\n                     [content])]\n          (conj! block-contents new-content)\n          (recur r level))))))\n\n(defn tree->file-content\n  [tree opts]\n  (->> (tree->file-content-aux tree opts) (string/join \"\\n\")))\n\n\n(def init-level 1)\n\n(defn push-to-write-chan\n  [files & opts]\n  (let [repo (state/get-current-repo)\n        chan (state/get-file-write-chan)]\n    (assert (some? chan) \"File write chan shouldn't be nil\")\n    (let [chan-callback (:chan-callback opts)]\n      (async/put! chan [repo files opts])\n      (when chan-callback\n        (chan-callback)))))\n\n(defn- transact-file-tx-if-not-exists!\n  [page ok-handler]\n  (when-let [repo (state/get-current-repo)]\n    (when (:block/name page)\n      (let [format (name (get page :block/format\n                              (state/get-preferred-format)))\n            title (string/capitalize (:block/name page))\n            journal-page? (date/valid-journal-title? title)\n            path (str\n                  (if journal-page?\n                    (config/get-journals-directory)\n                    (config/get-pages-directory))\n                  \"/\"\n                  (if journal-page?\n                    (date/date->file-name journal-page?)\n                    (-> (or (:block/original-name page) (:block/name page))\n                        (util/file-name-sanity))) \".\"\n                  (if (= format \"markdown\") \"md\" format))\n            file-path (config/get-file-path repo path)\n            file {:file/path file-path}\n            tx [{:file/path file-path}\n                {:block/name (:block/name page)\n                 :block/file file}]]\n        (db/transact! tx)\n        (when ok-handler (ok-handler))))))\n\n(defn save-tree-aux!\n  [page-block tree]\n  (let [page-block (db/pull (:db/id page-block))\n        new-content (tree->file-content tree {:init-level init-level})\n        file-db-id (-> page-block :block/file :db/id)\n        file-path (-> (db-utils/entity file-db-id) :file/path)\n        _ (assert (string? file-path) \"File path should satisfy string?\")\n        ;; FIXME: name conflicts between multiple graphs\n        files [[file-path new-content]]]\n    (push-to-write-chan files)))\n\n(defn save-tree\n  [page-block tree]\n  {:pre [(map? page-block)]}\n  (let [ok-handler #(save-tree-aux! page-block tree)\n        file (or (:block/file page-block)\n                 (when-let [page (:db/id (:block/page page-block))]\n                   (:block/file (db-utils/entity page))))]\n    (if file\n      (ok-handler)\n      (transact-file-tx-if-not-exists! page-block ok-handler))))\n"]}