shadow$provide.module$node_modules$codemirror$mode$scheme$scheme=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("scheme",function(){function makeKeywords(str){var obj={};str=str.split(" ");for(var i=0;i<str.length;++i)obj[str[i]]=!0;return obj}function stateStack(indent,
type,prev){this.indent=indent;this.type=type;this.prev=prev}function isBinaryNumber(stream){return stream.match(binaryMatcher)}function isOctalNumber(stream){return stream.match(octalMatcher)}function isDecimalNumber(stream,backup){!0===backup&&stream.backUp(1);return stream.match(decimalMatcher)}function isHexNumber(stream){return stream.match(hexMatcher)}var keywords=makeKeywords("Î» case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char-\x3einteger char-alphabetic? char-ci\x3c\x3d? char-ci\x3c? char-ci\x3d? char-ci\x3e\x3d? char-ci\x3e? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char\x3c\x3d? char\x3c? char\x3d? char\x3e\x3d? char\x3e? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact-\x3einexact exact? exp expt #f floor force gcd imag-part inexact-\x3eexact inexact? input-port? integer-\x3echar integer? interaction-environment lcm length list list-\x3estring list-\x3evector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number-\x3estring number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string-\x3elist string-\x3enumber string-\x3esymbol string-append string-ci\x3c\x3d? string-ci\x3c? string-ci\x3d? string-ci\x3e\x3d? string-ci\x3e? string-copy string-fill! string-length string-ref string-set! string\x3c\x3d? string\x3c? string\x3d? string\x3e\x3d? string\x3e? string? substring symbol-\x3estring symbol? #t tan transcript-off transcript-on truncate values vector vector-\x3elist vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),
indentKeys=makeKeywords("define let letrec let* lambda"),binaryMatcher=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i),octalMatcher=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i),
hexMatcher=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i),decimalMatcher=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);
return{startState:function(){return{indentStack:null,indentation:0,mode:!1,sExprComment:!1,sExprQuote:!1}},token:function(stream,state){null==state.indentStack&&stream.sol()&&(state.indentation=stream.indentation());if(stream.eatSpace())return null;var returnType=null;switch(state.mode){case "string":var next;for(returnType=!1;null!=(next=stream.next());){if('"'==next&&!returnType){state.mode=!1;break}returnType=!returnType&&"\\"==next}returnType="string";break;case "comment":for(returnType=!1;null!=
(next=stream.next());){if("#"==next&&returnType){state.mode=!1;break}returnType="|"==next}returnType="comment";break;case "s-expr-comment":if(state.mode=!1,"("==stream.peek()||"["==stream.peek())state.sExprComment=0;else{stream.eatWhile(/[^\s\(\)\[\]]/);returnType="comment";break}default:if(next=stream.next(),'"'==next)returnType=state.mode="string";else if("'"==next)"("==stream.peek()||"["==stream.peek()?"number"!=typeof state.sExprQuote&&(state.sExprQuote=0):stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),
returnType="atom";else if("#"==next)if(stream.eat("|"))returnType=state.mode="comment";else if(stream.eat(/[tf]/i))returnType="atom";else if(stream.eat(";"))state.mode="s-expr-comment",returnType="comment";else{next=null;var hasExactness=!1,hasRadix=!0;stream.eat(/[ei]/i)?hasExactness=!0:stream.backUp(1);stream.match(/^#b/i)?next=isBinaryNumber:stream.match(/^#o/i)?next=isOctalNumber:stream.match(/^#x/i)?next=isHexNumber:stream.match(/^#d/i)?next=isDecimalNumber:stream.match(/^[-+0-9.]/,!1)?(hasRadix=
!1,next=isDecimalNumber):hasExactness||stream.eat("#");null!=next&&(hasRadix&&!hasExactness&&stream.match(/^#[ei]/i),next(stream)&&(returnType="number"))}else if(/^[-+0-9.]/.test(next)&&isDecimalNumber(stream,!0))returnType="number";else if(";"==next)stream.skipToEnd(),returnType="comment";else if("("==next||"["==next){returnType="";for(hasExactness=stream.column();null!=(hasRadix=stream.eat(/[^\s\(\[;\)\]]/));)returnType+=hasRadix;0<returnType.length&&indentKeys.propertyIsEnumerable(returnType)?
state.indentStack=new stateStack(hasExactness+2,next,state.indentStack):(stream.eatSpace(),stream.eol()||";"==stream.peek()?state.indentStack=new stateStack(hasExactness+1,next,state.indentStack):(returnType=hasExactness+stream.current().length,state.indentStack=new stateStack(returnType,next,state.indentStack)));stream.backUp(stream.current().length-1);"number"==typeof state.sExprComment&&state.sExprComment++;"number"==typeof state.sExprQuote&&state.sExprQuote++;returnType="bracket"}else")"==next||
"]"==next?(returnType="bracket",null!=state.indentStack&&state.indentStack.type==(")"==next?"(":"[")&&(state.indentStack=state.indentStack.prev,"number"==typeof state.sExprComment&&0==--state.sExprComment&&(returnType="comment",state.sExprComment=!1),"number"==typeof state.sExprQuote&&0==--state.sExprQuote&&(returnType="atom",state.sExprQuote=!1))):(stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),returnType=keywords&&keywords.propertyIsEnumerable(stream.current())?"builtin":"variable")}return"number"==
typeof state.sExprComment?"comment":"number"==typeof state.sExprQuote?"atom":returnType},indent:function(state){return null==state.indentStack?state.indentation:state.indentStack.indent},closeBrackets:{pairs:'()[]{}""'},lineComment:";;"}});CodeMirror.defineMIME("text/x-scheme","scheme")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$scheme$scheme.js.map
