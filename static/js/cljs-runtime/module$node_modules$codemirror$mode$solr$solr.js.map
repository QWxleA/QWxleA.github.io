{
"version":3,
"file":"module$node_modules$codemirror$mode$solr$solr.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/codemirror/mode/solr/solr.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$solr$solr\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"solr\", function() {\n  \"use strict\";\n\n  var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\n  var isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\n  var isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\n  function isNumber(word) {\n    return parseFloat(word).toString() === word;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n\n      if (!escaped) state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function tokenOperator(operator) {\n    return function(stream, state) {\n      var style = \"operator\";\n      if (operator == \"+\")\n        style += \" positive\";\n      else if (operator == \"-\")\n        style += \" negative\";\n      else if (operator == \"|\")\n        stream.eat(/\\|/);\n      else if (operator == \"&\")\n        stream.eat(/\\&/);\n      else if (operator == \"^\")\n        style += \" boost\";\n\n      state.tokenize = tokenBase;\n      return style;\n    };\n  }\n\n  function tokenWord(ch) {\n    return function(stream, state) {\n      var word = ch;\n      while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n        word += stream.next();\n      }\n\n      state.tokenize = tokenBase;\n      if (isOperatorString.test(word))\n        return \"operator\";\n      else if (isNumber(word))\n        return \"number\";\n      else if (stream.peek() == \":\")\n        return \"field\";\n      else\n        return \"string\";\n    };\n  }\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"')\n      state.tokenize = tokenString(ch);\n    else if (isOperatorChar.test(ch))\n      state.tokenize = tokenOperator(ch);\n    else if (isStringChar.test(ch))\n      state.tokenize = tokenWord(ch);\n\n    return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n  }\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-solr\", \"solr\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","tokenString","quote","stream","state","escaped","next","tokenize","tokenBase","tokenOperator","operator","style","eat","tokenWord","ch","word","peek","match","isStringChar","isOperatorString","test","parseFloat","toString","isOperatorChar","startState","token","eatSpace","defineMIME"]
}
