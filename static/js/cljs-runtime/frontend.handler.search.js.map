{"version":3,"sources":["frontend/handler/search.cljs"],"mappings":";AAaA,qDAAA,rDAAMA,kHACHC,KAAKC;AADR,AAEE,GAAU,AAACC,4BAAcD;AAAzB;;AAAA,AACE,IAAME,QAAM,iBAAAC,mBAAI,wHAAA,+GAAA,tOAACC,0DAAAA,mIAAAA,3EAAiBL,+GAAAA;AAAtB,AAAA,oBAAAI;AAAAA;;AAAA,AAAA;;;IAENE,YAAU,6CAAA,7CAACC,kDAAQ,AAACC,iDAAS,AAACC,eAAKR,EAAEE;AAF3C,AAGE,+HAAA,yHAAA,hPAACO,0DAAAA,6IAAAA,rFAAiBV,yHAAAA,jDAAoBM,yHAAAA;;;AAE5C;;;gDAAA,hDAAMK,wGAEHC,OAAOC;AAFV,oGAGO,AAACC,2EAAyBD,QAAQD,OAAO,AAACG,kCAAyBH,hKACnE,AAACI,hEACD,OAACC,kDAAoCL;;AAE5C,AAAA,iCAAA,yCAAAM,1EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAMD,0EACFpB,KAAKC;AADT,AAEG,2EAAA,2CAAA,wDAAA,vKAACyB,6DAAO1B,KAAKC;;;AAFhB,CAAA,+DAAA,kBAAAqB,jFAAMF,0EAGFpB,KAAKC;AAHT,AAAA,IAAAsB,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAMgBO;iBANhB,AAAAL,4CAAAF,eAAA,iEAAA,zIAGmBI;YAHnB,AAAAF,4CAAAF,eAAA,wDAAA,3HAG8BK;kBAH9B,AAAAH,4CAAAF,eAAA,zEAGoCM;AAHpC,AAOG,GAAU,AAAC3B,4BAAcD;AAAzB;;AAAA,AACE,IAAM0B,iBAAW,EAAI,OAASA,yBACX,AAAA,mFAAQ,iBAAAI,WAAW/B;IAAXgC,WAAA,mFAAA,8DAA6B,CAACE,kEAAAA,8EAAAA,dAAyBP,0DAAAA;AAAvD,AAAA,4GAAAI,SAAAC,yCAAAD,SAAAC,/JAACC,mDAAAA,sEAAAA;MACTN;IACbG,WAAK,kBAAIH,gBAAW,mDAAA,nDAACQ,8CAAML,yDAAW,4CAAKH,iBAAaG;AAH9D,AAIE,OAAAM,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,8FAAA,WAAQG,zDAAO,AAACC,6BAAoBxC,KAAKC,EAAE6B;AAA3C,AAAA,OAAAQ,2BAAA,AACE,iBAAMG,SAAO,uGAAA,2CAAA,gEAAA,lNAACC,2MACSH,uEACG,AAACI,6CAAEf,MAAM,AAACgB,gBAAML,iBAC5B,kCAAA,KAAA,AAAA,2CAAA,oHAAA,pLAAUZ,uHACA,AAACkB,0DAAmB5C,0DACpB,AAAC6C,0DAAmB7C;IACtC8C,aAAW,+BAAA,8EAAA,3FAAIlB;AANrB,AAOE,OAACmB,mDAAMC,qBAAYC,gBAAMH,WAAWN;;;;;;;AApB/C,CAAA,yDAAA,zDAAMrB;;AAAN,AAsBA,AAAA,6CAAA,qDAAAF,lGAAMkC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAAM+B;AAAN,AAEG,gFAAA,zEAACC;;;AAFJ,CAAA,2EAAA,3EAAMD,sFAGFE;AAHJ,AAIG,cAAA,2CAAA,mEAAA,KAAA,0DAAA,vLAAMC;AAAN,AAEE,AAACP,mDAAMC,qBAAYO,gBAAMD;;AAC3B,oBAAM,iBAAAE,oBAAKH;AAAL,AAAA,oBAAAG;AAAwB,wFAAA,jFAACC,gDAAK,AAACC;;AAA/BF;;;AAAN,AACE,4CAAA,rCAACG;;AADH;;;;AAPH,CAAA,qEAAA,rEAAMR;;AAAN,AAUA,AAAA,gDAAA,wDAAAlC,xGAAM4C;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,4EAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8EAAA,9EAAMyC;AAAN,AAEG,mFAAA,5EAACC;;;AAFJ,CAAA,8EAAA,9EAAMD,yFAGFE;AAHJ,AAIG,yGAAA,zGAACC;;AACD,OAAA7B,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sHAAA,WAAQ8B,jFAAE,AAACC;AAAX,AAAA,OAAA7B,2BAAA,AACE,iCAAA,0KAAA,zLAAM0B,eACJ,uEAAA,uCAAA,9GAACI;;;;;AAPR,CAAA,wEAAA,xEAAMN;;AAAN,AAWA,AAAA,2DAAA,mEAAA5C,9HAAMoD;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,uFAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjD,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yFAAA,zFAAMiD;AAAN,AAEG,OAACC,uFAA4B,AAACC;;;AAFjC,CAAA,yFAAA,zFAAMF,oGAGFtE;AAHJ,AAIG,OAAAoC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,yFAAA,WAAQqC,pDAAa,AAACC,mCAAoB1E;AAA1C,AAAA,OAAAsC,2BAAA,AACE,sCAAA,pBAAMmC;AACJ,YAAA,ZAACE,4BAA+B3E;;AAChC,OAAAoC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,0HAAA,WAAQ8B,rFAAE,AAACC,oEAAwBnE;AAAnC,AAAA,OAAAsC,2BAAA,AACE,uEAAA,oEAAA,3IAAC8B;;;;CAHL;;;;;AALL,CAAA,mFAAA,nFAAME;;AAAN","names":["frontend.handler.search/add-search-to-recent!","repo","q","clojure.string/blank?","items","or__5043__auto__","frontend.db/get-key-value","new-items","cljs.core.take","cljs.core.distinct","cljs.core/cons","frontend.db/set-key-value","frontend.handler.search/sanity-search-content","format","content","logseq.graph_parser.text.remove_level_spaces","frontend.config/get-block-pattern","frontend.util.drawer/remove-logbook","frontend.util.property/remove-built-in-properties","var_args","G__44489","frontend.handler.search/search","js/Error","p__44490","map__44491","cljs.core/--destructure-map","cljs.core.get","frontend.handler.search.search","page-db-id","limit","more?","opts","G__44494","G__44495","frontend.db/entity","frontend.util/page-name-sanity-lc","cljs.core.assoc","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","blocks","frontend.search/block-search","result","cljs.core.merge","cljs.core._EQ_","cljs.core/count","frontend.search.page_search","frontend.search.file_search","search-key","cljs.core.swap_BANG_","frontend.state/state","cljs.core/assoc","G__44500","frontend.handler.search/clear-search!","frontend.handler.search.clear_search_BANG_","clear-search-mode?","m","cljs.core/merge","and__5041__auto__","cljs.core.not_EQ_","frontend.state/get-search-mode","frontend.state/set-search-mode!","G__44503","frontend.handler.search/rebuild-indices!","frontend.handler.search.rebuild_indices_BANG_","notice?","cljs.core.println","_","frontend.search.rebuild_indices_BANG_","frontend.handler.notification.show_BANG_","G__44510","frontend.handler.search/rebuild-indices-when-stale!","frontend.handler.search.rebuild_indices_when_stale_BANG_","frontend.state/get-current-repo","cache-stale?","frontend.search/cache-stale?","js/console.log"],"sourcesContent":["(ns frontend.handler.search\n  (:require [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.handler.notification :as notification-handler]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [promesa.core :as p]\n            [logseq.graph-parser.text :as text]\n            [frontend.util.drawer :as drawer]\n            [frontend.util.property :as property]))\n\n(defn add-search-to-recent!\n  [repo q]\n  (when-not (string/blank? q)\n    (let [items (or (db/get-key-value repo :recent/search)\n                    '())\n          new-items (take 10 (distinct (cons q items)))]\n      (db/set-key-value repo :recent/search new-items))))\n\n(defn sanity-search-content\n  \"Convert a block to the display contents for searching\"\n  [format content]\n  (->> (text/remove-level-spaces content format (config/get-block-pattern format))\n       (drawer/remove-logbook)\n       (property/remove-built-in-properties format)))\n\n(defn search\n  ([repo q]\n   (search repo q {:limit 20}))\n  ([repo q {:keys [page-db-id limit more?]\n            :or {page-db-id nil\n                 limit 20}\n            :as opts}]\n   (when-not (string/blank? q)\n     (let [page-db-id (if (string? page-db-id)\n                        (:db/id (db/entity repo [:block/name (util/page-name-sanity-lc page-db-id)]))\n                        page-db-id)\n           opts (if page-db-id (assoc opts :page (str page-db-id)) opts)]\n       (p/let [blocks (search/block-search repo q opts)]\n         (let [result (merge\n                       {:blocks blocks\n                        :has-more? (= limit (count blocks))}\n                       (when-not page-db-id\n                         {:pages (search/page-search q)\n                          :files (search/file-search q)}))\n               search-key (if more? :search/more-result :search/result)]\n           (swap! state/state assoc search-key result)))))))\n\n(defn clear-search!\n  ([]\n   (clear-search! true))\n  ([clear-search-mode?]\n   (let [m {:search/result nil\n            :search/q \"\"}]\n     (swap! state/state merge m))\n   (when (and clear-search-mode? (not= (state/get-search-mode) :graph))\n     (state/set-search-mode! :global))))\n\n(defn rebuild-indices!\n  ([]\n   (rebuild-indices! false))\n  ([notice?]\n   (println \"Starting to rebuild search indices!\")\n   (p/let [_ (search/rebuild-indices!)]\n     (when notice?\n       (notification-handler/show!\n        \"Search indices rebuilt successfully!\"\n        :success)))))\n\n(defn rebuild-indices-when-stale!\n  ([]\n   (rebuild-indices-when-stale! (state/get-current-repo)))\n  ([repo]\n   (p/let [cache-stale? (search/cache-stale? repo)]\n     (when cache-stale?\n       (js/console.log \"cache stale: \" repo)\n       (p/let [_ (search/rebuild-indices! repo)]\n         (notification-handler/show!\n          \"Stale search cache detected. Search indices rebuilt successfully!\"\n          :success))))))\n"]}