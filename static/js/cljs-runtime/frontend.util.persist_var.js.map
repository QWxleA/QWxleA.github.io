{"version":3,"sources":["frontend/util/persist_var.cljs"],"mappings":"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","names":["frontend.util.persist-var/load-path","location","frontend.config/get-file-path","frontend.state/get-current-repo","frontend.config/app-name","frontend$util$persist-var$ILoad$_load$dyn","x__4550__auto__","m__4551__auto__","frontend.util.persist-var/-load","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","frontend$util$persist-var$ILoad$_loaded_QMARK_$dyn","frontend.util.persist-var/-loaded?","frontend.util.persist-var/ILoad","this","frontend$util$persist-var$ISave$_save$dyn","frontend.util.persist-var/-save","frontend.util.persist-var/ISave","frontend$util$persist-var$IResetValue$_reset_value_BANG_$dyn","frontend.util.persist-var/-reset-value!","frontend.util.persist-var/IResetValue","new","graph","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","frontend.util.persist-var/PersistVar","frontend.util.persist-var/->PersistVar","*value","_","cljs.core/reset!","cljs.core/deref","cljs.core/assoc-in","frontend.config.demo_graph_QMARK_","repo","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","content","promesa.core.catch$","frontend.fs.read_file","frontend.config/get-repo-dir","cljs.core/constantly","temp__5720__auto__","and__4251__auto__","e95686","cljs.reader.read_string","js/Error","e","cljs.core.println","frontend.util.format","js/console.dir","cljs.core.swap_BANG_","o","cljs.core.get_in","path","dir","frontend.fs/write-file!","_this","new-value","w","_opts","cljs.core.write_all","frontend.util.persist-var/*all-persist-vars","cljs.core.atom","frontend.util.persist-var/load-vars","promesa.core/all","cljs.core.mapv","frontend.util.persist-var/persist-var","init-value","var","cljs.core/conj","frontend.util.persist-var/persist-save","v","cljs.core/native-satisfies?"],"sourcesContent":["(ns frontend.util.persist-var\n  (:require [frontend.config :as config]\n            [frontend.state :as state]\n            [frontend.fs :as fs]\n            [frontend.util :as util]\n            [cljs.reader :as reader]\n            [promesa.core :as p]))\n\n\n(defn- load-path [location]\n  (config/get-file-path (state/get-current-repo) (str config/app-name \"/\" location \".edn\")))\n\n(defprotocol ILoad\n  (-load [this])\n  (-loaded? [this]))\n\n(defprotocol ISave\n  (-save [this]))\n\n(defprotocol IResetValue\n  (-reset-value! [this new graph]))\n\n(deftype PersistVar [*value location]\n  IResetValue\n  (-reset-value! [_ new graph]\n    (reset! *value (assoc-in @*value [graph :value] new)))\n\n  ILoad\n  (-load [_]\n    (when-not (config/demo-graph?)\n      (let [repo (state/get-current-repo)]\n        (p/let [content (p/catch\n                         (fs/read-file\n                          (config/get-repo-dir (state/get-current-repo))\n                          (load-path location))\n                         (constantly nil))]\n          (when-let [content (and (some? content)\n                                  (try (cljs.reader/read-string content)\n                                       (catch js/Error e\n                                         (println (util/format \"load persist-var failed: %s\"  (load-path location)))\n                                         (js/console.dir e))))]\n            (swap! *value (fn [o]\n                            (-> o\n                                (assoc-in [repo :loaded?] true)\n                                (assoc-in [repo :value] content)))))))))\n  (-loaded? [_]\n    (get-in @*value [(state/get-current-repo) :loaded?]))\n\n  ISave\n  (-save [_]\n    (when-not (config/demo-graph?)\n      (let [path (load-path location)\n            repo (state/get-current-repo)\n            content (str (get-in @*value [repo :value]))\n            dir (config/get-repo-dir repo)]\n        (fs/write-file! repo dir path content nil))))\n\n  IDeref\n  (-deref [_this]\n    (get-in @*value [(state/get-current-repo) :value]))\n\n  IReset\n  (-reset!\n    ;; \"Deprecated - use (.reset-value! o) instead.\"\n    [_ new-value]\n    (swap! *value (fn [_] (assoc-in @*value [(state/get-current-repo) :value] new-value))))\n\n  IPrintWithWriter\n  (-pr-writer [_ w _opts]\n    (write-all w (str \"#PersistVar[\" @*value \", loc: \" location \"]\"))))\n\n\n(def *all-persist-vars (atom []))\n\n(defn load-vars []\n  (p/all (mapv -load @*all-persist-vars)))\n\n(defn persist-var\n  \"This var is stored at logseq/LOCATION.edn\"\n  [init-value location]\n  (let [var (->PersistVar (atom {(state/get-current-repo)\n                                 {:value init-value\n                                  :loaded? false}})\n                          location)]\n    (swap! *all-persist-vars conj var)\n    var))\n\n(defn persist-save [v]\n  {:pre [(satisfies? ISave v)]}\n  (-save v))\n\n(comment\n  (do\n    (def bbb (persist-var 1 \"aaa\"))\n    (-save bbb)\n\n    ))\n"]}