{"version":3,"sources":["frontend/util/list.cljs"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.util.list/get-prev-item","p__50816","vec__50818","cljs.core.nth","seq50811","self__5752__auto__","cljs.core/seq","input","frontend.util.cursor/textarea-cursor-first-row?","temp__5718__auto__","item","frontend.util.thingatpt.list_item_at_point","map__50822","cljs.core/--destructure-map","cljs.core.get","bullet","ordered","and__5041__auto__","cljs.core._EQ_","frontend.util.cursor/move-cursor-up","frontend.util.list/get-next-item","p__50829","vec__50830","seq50827","temp__5720__auto__","map__50834","_bullet","_ordered","frontend.util.cursor/textarea-cursor-last-row?","frontend.util.cursor/move-cursor-down","frontend.util.list/list-beginning-pos","p__50841","vec__50842","seq50838","cljs.core/deref","current-pos","frontend.util.cursor/pos","item-start","beginning-pos","cljs.core.atom","prev-item","frontend.util.list.get_prev_item","cljs.core/reset!","frontend.util.cursor/move-cursor-to","frontend.util.list/list-end-pos","p__50868","vec__50870","seq50852","item-end","end-pos","next-item","frontend.util.list.get_next_item","frontend.util.list/newline?","line","frontend.util.list/re-order-items","lines","start-idx","idx","result","double-newlines?","vec__50936","seq__50937","first__50938","cljs.core/first","cljs.core/next","others","cljs.core/empty?","cljs.core.map","clojure.string.join","vec__50945","vec__50952","_","num-str","cljs.core/re-find","num","cljs.core/parse-long","double-newlines?'","idx'","result'","line'","clojure.string/replace-first","cljs.core.conj"],"sourcesContent":["(ns frontend.util.list\n  (:require [frontend.util.thingatpt :as thingatpt]\n            [frontend.util.cursor :as cursor]\n            [clojure.string :as string]))\n\n(defn get-prev-item [& [input]]\n  (when-not (cursor/textarea-cursor-first-row? input)\n    (if-let [item (thingatpt/list-item-at-point input)]\n      (let [{:keys [bullet ordered]} item]\n        (when-not (and ordered (= bullet \"1\"))\n          (cursor/move-cursor-up input)))\n      (cursor/move-cursor-up input))\n    (thingatpt/list-item-at-point input)))\n\n(defn get-next-item [& [input]]\n  (when-let [item (thingatpt/list-item-at-point input)]\n    (let [{:keys [_bullet _ordered]} item]\n      (when-not (cursor/textarea-cursor-last-row? input)\n        (cursor/move-cursor-down input)\n        (thingatpt/list-item-at-point input)))))\n\n(defn list-beginning-pos [& [input]]\n  (when-let [item (thingatpt/list-item-at-point input)]\n    (let [current-pos (cursor/pos input)\n          item-start (:start item)\n          beginning-pos (atom item-start)]\n      (while (when-let [prev-item (get-prev-item input)]\n               (reset! beginning-pos (:start prev-item))))\n      (cursor/move-cursor-to input current-pos)\n      @beginning-pos)))\n\n(defn list-end-pos [& [input]]\n  (when-let [item (thingatpt/list-item-at-point input)]\n    (let [current-pos (cursor/pos input)\n          item-end (:end item)\n          end-pos (atom item-end)]\n      (while (when-let [next-item (get-next-item input)]\n               (reset! end-pos (:end next-item))))\n      (cursor/move-cursor-to input current-pos)\n      @end-pos)))\n\n(defn- newline?\n  [line]\n  (or (= line \"\\n\") (= line \"\\r\\n\")))\n\n(defn re-order-items\n  [lines start-idx]\n  (loop [lines lines\n         idx start-idx\n         result []\n         double-newlines? false]\n    (let [[line & others] lines]\n      (if (empty? lines)\n        (->> result\n             (map (fn [line] (if (newline? line) \"\" line)))\n             (string/join \"\\n\"))\n        (let [[_ num-str] (re-find #\"^(\\d+){1}\\.\" line)\n              num (if num-str (parse-long num-str) nil)\n              double-newlines?' (or double-newlines?\n                                     (and (newline? line) (seq others) (newline? (first others))))\n              [idx' result'] (if (and (not double-newlines?') num)\n                               (let [idx' (inc idx)\n                                     line' (string/replace-first line (str num \".\") (str idx' \".\"))]\n                                 [idx' (conj result line')])\n                               [idx (conj result line)])]\n          (recur others idx' result' double-newlines?'))))))\n"]}