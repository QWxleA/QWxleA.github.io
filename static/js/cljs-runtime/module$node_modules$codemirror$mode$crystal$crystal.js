shadow$provide.module$node_modules$codemirror$mode$crystal$crystal=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("crystal",function(config){function wordRegExp(words,end){return new RegExp((end?"":"^")+"(?:"+words.join("|")+")"+(end?"$":"\\b"))}
function chain(tokenize,stream,state){state.tokenize.push(tokenize);return tokenize(stream,state)}function tokenBase(stream,state){if(stream.eatSpace())return null;if("\\"!=state.lastToken&&stream.match("{%",!1))return chain(tokenMacro("%","%"),stream,state);if("\\"!=state.lastToken&&stream.match("{{",!1))return chain(tokenMacro("{","}"),stream,state);if("#"==stream.peek())return stream.skipToEnd(),"comment";if(stream.match(idents)){stream.eat(/[?!]/);var matched=stream.current();return stream.eat(":")?
"atom":"."==state.lastToken?"property":keywords.test(matched)?(indentKeywords.test(matched)?"fun"==matched&&0<=state.blocks.indexOf("lib")||"def"==matched&&"abstract"==state.lastToken||(state.blocks.push(matched),state.currentIndent+=1):"operator"!=state.lastStyle&&state.lastStyle||!indentExpressionKeywords.test(matched)?"end"==matched&&(state.blocks.pop(),--state.currentIndent):(state.blocks.push(matched),state.currentIndent+=1),nextTokenizer.hasOwnProperty(matched)&&state.tokenize.push(nextTokenizer[matched]),
"keyword"):atomWords.test(matched)?"atom":"variable"}if(stream.eat("@")){if("["==stream.peek())return chain(tokenNest("[","]","meta"),stream,state);stream.eat("@");stream.match(idents)||stream.match(types);return"variable-2"}if(stream.match(types))return"tag";if(stream.eat(":")){if(stream.eat('"'))return chain(tokenQuote('"',"atom",!1),stream,state);if(stream.match(idents)||stream.match(types)||stream.match(operators)||stream.match(conditionalOperators)||stream.match(indexingOperators))return"atom";
stream.eat(":");return"operator"}if(stream.eat('"'))return chain(tokenQuote('"',"string",!0),stream,state);if("%"==stream.peek()){matched="string";var embed=!0;if(stream.match("%r")){matched="string-2";var delim=stream.next()}else if(stream.match("%w"))embed=!1,delim=stream.next();else if(stream.match("%q"))embed=!1,delim=stream.next();else if(delim=stream.match(/^%([^\w\s=])/))delim=delim[1];else return stream.match(/^%[a-zA-Z0-9_\u009F-\uFFFF]*/)?"meta":"operator";matching.hasOwnProperty(delim)&&
(delim=matching[delim]);return chain(tokenQuote(delim,matched,embed),stream,state)}if(matched=stream.match(/^<<-('?)([A-Z]\w*)\1/))return chain(tokenHereDoc(matched[2],!matched[1]),stream,state);if(stream.eat("'"))return stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/),stream.eat("'"),"atom";if(stream.eat("0"))return stream.eat("x")?stream.match(/^[0-9a-fA-F]+/):stream.eat("o")?stream.match(/^[0-7]+/):stream.eat("b")&&stream.match(/^[01]+/),"number";if(stream.eat(/^\d/))return stream.match(/^\d*(?:\.\d+)?(?:[eE][+-]?\d+)?/),
"number";if(stream.match(operators))return stream.eat("\x3d"),"operator";if(stream.match(conditionalOperators)||stream.match(anotherOperators))return"operator";if(matched=stream.match(/[({[]/,!1))return matched=matched[0],chain(tokenNest(matched,matching[matched],null),stream,state);if(stream.eat("\\"))return stream.next(),"meta";stream.next();return null}function tokenNest(begin,end,style,started){return function(stream,state){if(!started&&stream.match(begin))return state.tokenize[state.tokenize.length-
1]=tokenNest(begin,end,style,!0),state.currentIndent+=1,style;var nextStyle=tokenBase(stream,state);stream.current()===end&&(state.tokenize.pop(),--state.currentIndent,nextStyle=style);return nextStyle}}function tokenMacro(begin,end,started){return function(stream,state){return!started&&stream.match("{"+begin)?(state.currentIndent+=1,state.tokenize[state.tokenize.length-1]=tokenMacro(begin,end,!0),"meta"):stream.match(end+"}")?(--state.currentIndent,state.tokenize.pop(),"meta"):tokenBase(stream,state)}}
function tokenFollowIdent(stream,state){if(stream.eatSpace())return null;stream.match(idents)?stream.eat(/[!?]/):stream.match(operators)||stream.match(conditionalOperators)||stream.match(indexingOperators);state.tokenize.pop();return"def"}function tokenFollowType(stream,state){if(stream.eatSpace())return null;stream.match(types);state.tokenize.pop();return"def"}function tokenQuote(end,style,embed){return function(stream,state){for(var escaped=!1;stream.peek();)if(escaped)stream.next(),escaped=!1;
else{if(stream.match("{%",!1)){state.tokenize.push(tokenMacro("%","%"));break}if(stream.match("{{",!1)){state.tokenize.push(tokenMacro("{","}"));break}if(embed&&stream.match("#{",!1)){state.tokenize.push(tokenNest("#{","}","meta"));break}escaped=stream.next();if(escaped==end){state.tokenize.pop();break}escaped=embed&&"\\"==escaped}return style}}function tokenHereDoc(phrase,embed){return function(stream,state){if(stream.sol()&&(stream.eatSpace(),stream.match(phrase)))return state.tokenize.pop(),"string";
for(var escaped=!1;stream.peek();)if(escaped)stream.next(),escaped=!1;else{if(stream.match("{%",!1)){state.tokenize.push(tokenMacro("%","%"));break}if(stream.match("{{",!1)){state.tokenize.push(tokenMacro("{","}"));break}if(embed&&stream.match("#{",!1)){state.tokenize.push(tokenNest("#{","}","meta"));break}escaped=embed&&"\\"==stream.next()}return"string"}}var operators=/^(?:[-+/%|&^]|\*\*?|[<>]{2})/,conditionalOperators=/^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/,indexingOperators=/^(?:\[\][?=]?)/,anotherOperators=
/^(?:\.(?:\.{2})?|->|[?:])/,idents=/^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/,types=/^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/,keywords=wordRegExp("abstract alias as asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof lib macro module next of out pointerof private protected rescue return require select sizeof struct super then type typeof uninitialized union unless until when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__".split(" ")),
atomWords=wordRegExp(["true","false","nil","self"]),indentKeywords=wordRegExp("def fun macro class module struct lib enum union do for".split(" ")),indentExpressionKeywords=wordRegExp("if unless case while until begin then".split(" ")),dedentKeywordsArray=["end","else","elsif","rescue","ensure"],dedentKeywords=wordRegExp(dedentKeywordsArray),dedentPunctualsArray=["\\)","\\}","\\]"],dedentPunctuals=new RegExp("^(?:"+dedentPunctualsArray.join("|")+")$"),nextTokenizer={def:tokenFollowIdent,fun:tokenFollowIdent,
macro:function(stream,state){if(stream.eatSpace())return null;var matched;if(matched=stream.match(idents)){if("def"==matched)return"keyword";stream.eat(/[?!]/)}state.tokenize.pop();return"def"},"class":tokenFollowType,module:tokenFollowType,struct:tokenFollowType,lib:tokenFollowType,"enum":tokenFollowType,union:tokenFollowType},matching={"[":"]","{":"}","(":")","\x3c":"\x3e"};return{startState:function(){return{tokenize:[tokenBase],currentIndent:0,lastToken:null,lastStyle:null,blocks:[]}},token:function(stream,
state){var style=state.tokenize[state.tokenize.length-1](stream,state);stream=stream.current();style&&"comment"!=style&&(state.lastToken=stream,state.lastStyle=style);return style},indent:function(state,textAfter){textAfter=textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g,"");return dedentKeywords.test(textAfter)||dedentPunctuals.test(textAfter)?config.indentUnit*(state.currentIndent-1):config.indentUnit*state.currentIndent},fold:"indent",electricInput:wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray),
!0),lineComment:"#"}});CodeMirror.defineMIME("text/x-crystal","crystal")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$crystal$crystal.js.map
