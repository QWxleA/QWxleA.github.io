{
"version":3,
"file":"module$node_modules$jszip$lib$zipObject.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/jszip/lib/zipObject.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$zipObject\"] = function(global,require,module,exports) {\n'use strict';\n\nvar StreamHelper = require('./stream/StreamHelper');\nvar DataWorker = require('./stream/DataWorker');\nvar utf8 = require('./utf8');\nvar CompressedObject = require('./compressedObject');\nvar GenericWorker = require('./stream/GenericWorker');\n\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nvar ZipObject = function(name, data, options) {\n    this.name = name;\n    this.dir = options.dir;\n    this.date = options.date;\n    this.comment = options.comment;\n    this.unixPermissions = options.unixPermissions;\n    this.dosPermissions = options.dosPermissions;\n\n    this._data = data;\n    this._dataBinary = options.binary;\n    // keep only the compression\n    this.options = {\n        compression : options.compression,\n        compressionOptions : options.compressionOptions\n    };\n};\n\nZipObject.prototype = {\n    /**\n     * Create an internal stream for the content of this object.\n     * @param {String} type the type of each chunk.\n     * @return StreamHelper the stream.\n     */\n    internalStream: function (type) {\n        var result = null, outputType = \"string\";\n        try {\n            if (!type) {\n                throw new Error(\"No output type specified.\");\n            }\n            outputType = type.toLowerCase();\n            var askUnicodeString = outputType === \"string\" || outputType === \"text\";\n            if (outputType === \"binarystring\" || outputType === \"text\") {\n                outputType = \"string\";\n            }\n            result = this._decompressWorker();\n\n            var isUnicodeString = !this._dataBinary;\n\n            if (isUnicodeString && !askUnicodeString) {\n                result = result.pipe(new utf8.Utf8EncodeWorker());\n            }\n            if (!isUnicodeString && askUnicodeString) {\n                result = result.pipe(new utf8.Utf8DecodeWorker());\n            }\n        } catch (e) {\n            result = new GenericWorker(\"error\");\n            result.error(e);\n        }\n\n        return new StreamHelper(result, outputType, \"\");\n    },\n\n    /**\n     * Prepare the content in the asked type.\n     * @param {String} type the type of the result.\n     * @param {Function} onUpdate a function to call on each internal update.\n     * @return Promise the promise of the result.\n     */\n    async: function (type, onUpdate) {\n        return this.internalStream(type).accumulate(onUpdate);\n    },\n\n    /**\n     * Prepare the content as a nodejs stream.\n     * @param {String} type the type of each chunk.\n     * @param {Function} onUpdate a function to call on each internal update.\n     * @return Stream the stream.\n     */\n    nodeStream: function (type, onUpdate) {\n        return this.internalStream(type || \"nodebuffer\").toNodejsStream(onUpdate);\n    },\n\n    /**\n     * Return a worker for the compressed content.\n     * @private\n     * @param {Object} compression the compression object to use.\n     * @param {Object} compressionOptions the options to use when compressing.\n     * @return Worker the worker.\n     */\n    _compressWorker: function (compression, compressionOptions) {\n        if (\n            this._data instanceof CompressedObject &&\n            this._data.compression.magic === compression.magic\n        ) {\n            return this._data.getCompressedWorker();\n        } else {\n            var result = this._decompressWorker();\n            if(!this._dataBinary) {\n                result = result.pipe(new utf8.Utf8EncodeWorker());\n            }\n            return CompressedObject.createWorkerFrom(result, compression, compressionOptions);\n        }\n    },\n    /**\n     * Return a worker for the decompressed content.\n     * @private\n     * @return Worker the worker.\n     */\n    _decompressWorker : function () {\n        if (this._data instanceof CompressedObject) {\n            return this._data.getContentWorker();\n        } else if (this._data instanceof GenericWorker) {\n            return this._data;\n        } else {\n            return new DataWorker(this._data);\n        }\n    }\n};\n\nvar removedMethods = [\"asText\", \"asBinary\", \"asNodeBuffer\", \"asUint8Array\", \"asArrayBuffer\"];\nvar removedFn = function () {\n    throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\");\n};\n\nfor(var i = 0; i < removedMethods.length; i++) {\n    ZipObject.prototype[removedMethods[i]] = removedFn;\n}\nmodule.exports = ZipObject;\n\n};"],
"names":["shadow$provide","global","require","module","exports","StreamHelper","DataWorker","utf8","CompressedObject","GenericWorker","ZipObject","name","data","options","dir","date","comment","unixPermissions","dosPermissions","_data","_dataBinary","binary","compression","compressionOptions","prototype","internalStream","type","result","outputType","Error","toLowerCase","askUnicodeString","_decompressWorker","isUnicodeString","pipe","Utf8EncodeWorker","Utf8DecodeWorker","e","error","async","onUpdate","accumulate","nodeStream","toNodejsStream","_compressWorker","magic","getCompressedWorker","createWorkerFrom","getContentWorker","removedMethods","removedFn","i","length"]
}
