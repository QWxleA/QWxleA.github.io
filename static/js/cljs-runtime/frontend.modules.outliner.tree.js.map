{"version":3,"sources":["frontend/modules/outliner/tree.cljs"],"mappings":"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","names":["frontend$modules$outliner$tree$INode$_get_id$dyn","x__4550__auto__","m__4551__auto__","frontend.modules.outliner.tree/-get-id","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","frontend$modules$outliner$tree$INode$_get_parent_id$dyn","frontend.modules.outliner.tree/-get-parent-id","frontend$modules$outliner$tree$INode$_set_parent_id$dyn","frontend.modules.outliner.tree/-set-parent-id","frontend$modules$outliner$tree$INode$_get_left_id$dyn","frontend.modules.outliner.tree/-get-left-id","frontend$modules$outliner$tree$INode$_set_left_id$dyn","frontend.modules.outliner.tree/-set-left-id","frontend$modules$outliner$tree$INode$_get_parent$dyn","frontend.modules.outliner.tree/-get-parent","frontend$modules$outliner$tree$INode$_get_left$dyn","frontend.modules.outliner.tree/-get-left","frontend$modules$outliner$tree$INode$_get_right$dyn","frontend.modules.outliner.tree/-get-right","frontend$modules$outliner$tree$INode$_get_down$dyn","frontend.modules.outliner.tree/-get-down","frontend$modules$outliner$tree$INode$_save$dyn","frontend.modules.outliner.tree/-save","frontend$modules$outliner$tree$INode$_del$dyn","frontend.modules.outliner.tree/-del","frontend$modules$outliner$tree$INode$_get_children$dyn","frontend.modules.outliner.tree/-get-children","frontend.modules.outliner.tree/INode","this","parent-id","left-id","db","children?","frontend.modules.outliner.tree/satisfied-inode?","node","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","frontend.modules.outliner.tree/blocks->vec-tree-aux","blocks","root","id-map","m","parent-blocks","cljs.core/group-by","sort-fn","parent","G__62977","G__62978","frontend.db/sort-by-left","cljs.core.get","block-children","level","cljs.core.map","children","G__62979","G__62980","cljs.core.assoc","frontend.modules.outliner.tree/get-root-and-page","repo","root-id","frontend.util/uuid-string?","G__62983","G__62984","frontend.db/entity","cljs.core/uuid","G__62985","G__62986","clojure.string/lower-case","var_args","G__62991","frontend.modules.outliner.tree/blocks->vec-tree","js/Error","frontend.modules.outliner.tree.blocks__GT_vec_tree","frontend.state/get-current-repo","vec__62993","cljs.core.nth","page?","cljs.core/not","result","root-block","p1__62988#","cljs.core/some","cljs.core._EQ_","frontend.modules.outliner.tree/sort-blocks-aux","parents","parent-groups","cljs.core.mapv","G__62998","G__62999","cljs.core/deref","_","p1__62997#","cljs.core.swap_BANG_","cljs.core.dissoc","sorted-nested-children","cljs.core/not-empty","frontend.modules.outliner.tree/sort-blocks","blocks-exclude-root","cljs.core.atom","cljs.core/flatten","cljs.core.concat","cljs.core/vals"],"sourcesContent":["(ns frontend.modules.outliner.tree\n  (:require [frontend.db :as db]\n            [frontend.util :as util]\n            [clojure.string :as string]\n            [frontend.state :as state]))\n\n(defprotocol INode\n  (-get-id [this])\n  (-get-parent-id [this])\n  (-set-parent-id [this parent-id])\n  (-get-left-id [this])\n  (-set-left-id [this left-id])\n\n  (-get-parent [this])\n  (-get-left [this])\n  (-get-right [this])\n  (-get-down [this])\n\n  (-save [this db])\n  (-del [this db children?])\n  (-get-children [this]))\n\n(defn satisfied-inode?\n  [node]\n  (satisfies? INode node))\n\n(defn- blocks->vec-tree-aux\n  [blocks root]\n  (let [id-map (fn [m] {:db/id (:db/id m)})\n        root (id-map root)\n        parent-blocks (group-by :block/parent blocks)\n        sort-fn (fn [parent]\n                  (db/sort-by-left (get parent-blocks parent) parent))\n        block-children (fn block-children [parent level]\n                         (map (fn [m]\n                                (let [parent (id-map m)\n                                      children (-> (block-children parent (inc level))\n                                                   (db/sort-by-left parent))]\n                                  (assoc m\n                                         :block/level level\n                                         :block/children children)))\n                           (sort-fn parent)))]\n    (block-children root 1)))\n\n(defn- get-root-and-page\n  [repo root-id]\n  (if (string? root-id)\n    (if (util/uuid-string? root-id)\n      [false (db/entity repo [:block/uuid (uuid root-id)])]\n      [true (db/entity repo [:block/name (string/lower-case root-id)])])\n    [false root-id]))\n\n(defn blocks->vec-tree\n  ([blocks root-id]\n   (blocks->vec-tree (state/get-current-repo) blocks root-id))\n  ([repo blocks root-id]\n   (let [[page? root] (get-root-and-page repo (str root-id))]\n     (if-not root ; custom query\n       blocks\n       (let [result (blocks->vec-tree-aux blocks root)]\n         (if page?\n           result\n           ;; include root block\n           (let [root-block (some #(when (= (:db/id %) (:db/id root)) %) blocks)\n                 root-block (assoc root-block :block/children result)]\n             [root-block])))))))\n\n(defn- sort-blocks-aux\n  [parents parent-groups]\n  (mapv (fn [parent]\n          (let [parent-id {:db/id (:db/id parent)}\n                children (db/sort-by-left (get @parent-groups parent-id) parent)\n                _ (swap! parent-groups #(dissoc % parent-id))\n                sorted-nested-children (when (not-empty children) (sort-blocks-aux children parent-groups))]\n                    (if sorted-nested-children [parent sorted-nested-children] [parent])))\n        parents))\n\n(defn sort-blocks\n  \"sort blocks by parent & left\"\n  [blocks-exclude-root root]\n  (let [parent-groups (atom (group-by :block/parent blocks-exclude-root))]\n    (flatten (concat (sort-blocks-aux [root] parent-groups) (vals @parent-groups)))))\n"]}