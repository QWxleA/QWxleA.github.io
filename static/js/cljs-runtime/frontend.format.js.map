{"version":3,"sources":["frontend/format.cljs"],"mappings":"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","names":["logseq.graph-parser.mldoc/parse-property","logseq.graph-parser.text/parse-property","js/frontend","js/frontend.format","js/frontend.format.mldoc-record","frontend.format/mldoc-record","frontend.format.mldoc/->MldocMode","js/frontend.format.adoc-record","frontend.format/adoc-record","frontend.format.adoc/->AdocMode","frontend.format/normalize","format","G__73415","cljs.core/Keyword","cljs.core.keyword","frontend.format/get-format","file","clojure.string/lower-case","cljs.core/last","clojure.string.split","frontend.format/get-format-record","G__73416","var_args","G__73418","frontend.format/get-default-config","js/Error","logseq.graph_parser.mldoc.default_config","options","G__73422","frontend.format/to-html","content","frontend.format.to_html","frontend.format.get_default_config","config","clojure.string/blank?","temp__5718__auto__","record","frontend.format.protocol/toHtml","logseq.graph-parser.mldoc/default-references","G__73424","frontend.format/to-edn","frontend.format.to_edn","or__4253__auto__","frontend.format.protocol/toEdn","frontend.format/loaded?","temp__5720__auto__","frontend.format.protocol/loaded?"],"sourcesContent":["(ns frontend.format\n  (:require [frontend.format.mldoc :refer [->MldocMode] :as mldoc]\n            [frontend.format.adoc :refer [->AdocMode]]\n            [frontend.format.protocol :as protocol]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.text :as text]\n            [clojure.string :as string]))\n\n;; TODO: Properly fix this circular dependency:\n;; mldoc/->edn > text/parse-property > mldoc/link? ->mldoc/inline->edn + mldoc/default-config\n(set! gp-mldoc/parse-property text/parse-property)\n\n(defonce mldoc-record (->MldocMode))\n(defonce adoc-record (->AdocMode))\n\n(defn normalize\n  [format]\n  (case (keyword format)\n    :md :markdown\n    :asciidoc :adoc\n    ;; default\n    (keyword format)))\n\n(defn get-format\n  [file]\n  (when file\n    (normalize (keyword (string/lower-case (last (string/split file #\"\\.\")))))))\n\n(defn get-format-record\n  [format]\n  (case (normalize format)\n    :org\n    mldoc-record\n    :markdown\n    mldoc-record\n    :adoc\n    adoc-record\n    nil))\n\n;; html\n(defn get-default-config\n  ([format]\n   (gp-mldoc/default-config format))\n  ([format options]\n   (gp-mldoc/default-config format options)))\n\n(defn to-html\n  ([content format]\n   (to-html content format (get-default-config format)))\n  ([content format config]\n   (let [config (if config config (get-default-config format))]\n     (if (string/blank? content)\n       \"\"\n       (if-let [record (get-format-record format)]\n         (protocol/toHtml record content config gp-mldoc/default-references)\n         content)))))\n\n(defn to-edn\n  ([content format]\n   (to-edn content format (get-default-config format)))\n  ([content format config]\n   (let [config (or config (get-default-config format))]\n     (if-let [record (get-format-record format)]\n       (protocol/toEdn record content config)\n       nil))))\n\n(defn loaded?\n  [format]\n  (when-let [record (get-format-record format)]\n    (protocol/loaded? record)))\n"]}