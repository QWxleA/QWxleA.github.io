shadow$provide.module$node_modules$chrono_node$dist$common$parsers$ISOFormatParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const PATTERN=RegExp("([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})(?:T([0-9]{1,2}):([0-9]{1,2})(?::([0-9]{1,2})(?:\\.(\\d{1,4}))?)?(?:Z|([+-]\\d{2}):?(\\d{2})?)?)?(?\x3d\\W|$)","i");class ISOFormatParser extends global.AbstractParserWithWordBoundaryChecking{innerPattern(){return PATTERN}innerExtract(context,
match){context={};context.year=parseInt(match[1]);context.month=parseInt(match[2]);context.day=parseInt(match[3]);if(null!=match[4])if(context.hour=parseInt(match[4]),context.minute=parseInt(match[5]),null!=match[6]&&(context.second=parseInt(match[6])),null!=match[7]&&(context.millisecond=parseInt(match[7])),null==match[8])context.timezoneOffset=0;else{const hourOffset=parseInt(match[8]);let minuteOffset=0;null!=match[9]&&(minuteOffset=parseInt(match[9]));match=60*hourOffset;context.timezoneOffset=
0>match?match-minuteOffset:match+minuteOffset}return context}}exports.default=ISOFormatParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$common$parsers$ISOFormatParser.js.map
