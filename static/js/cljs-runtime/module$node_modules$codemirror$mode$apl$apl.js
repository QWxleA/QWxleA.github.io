shadow$provide.module$node_modules$codemirror$mode$apl$apl=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("apl",function(){var builtInOps={".":"innerProduct","\\":"scan","/":"reduce","⌿":"reduce1Axis","⍀":"scan1Axis","¨":"each","⍣":"power"},builtInFuncs=
{"+":["conjugate","add"],"−":["negate","subtract"],"×":["signOf","multiply"],"÷":["reciprocal","divide"],"⌈":["ceiling","greaterOf"],"⌊":["floor","lesserOf"],"∣":["absolute","residue"],"⍳":["indexGenerate","indexOf"],"?":["roll","deal"],"⋆":["exponentiate","toThePowerOf"],"⍟":["naturalLog","logToTheBase"],"○":["piTimes","circularFuncs"],"!":["factorial","binomial"],"⌹":["matrixInverse","matrixDivide"],"\x3c":[null,"lessThan"],"≤":[null,"lessThanOrEqual"],"\x3d":[null,"equals"],"\x3e":[null,"greaterThan"],
"≥":[null,"greaterThanOrEqual"],"≠":[null,"notEqual"],"≡":["depth","match"],"≢":[null,"notMatch"],"∈":["enlist","membership"],"⍷":[null,"find"],"∪":["unique","union"],"∩":[null,"intersection"],"∼":["not","without"],"∨":[null,"or"],"∧":[null,"and"],"⍱":[null,"nor"],"⍲":[null,"nand"],"⍴":["shapeOf","reshape"],",":["ravel","catenate"],"⍪":[null,"firstAxisCatenate"],"⌽":["reverse","rotate"],"⊖":["axis1Reverse","axis1Rotate"],"⍉":["transpose",null],"↑":["first","take"],"↓":[null,"drop"],"⊂":["enclose",
"partitionWithAxis"],"⊃":["diclose","pick"],"⌷":[null,"index"],"⍋":["gradeUp",null],"⍒":["gradeDown",null],"⊤":["encode",null],"⊥":["decode",null],"⍕":["format","formatByExample"],"⍎":["execute",null],"⊣":["stop","left"],"⊢":["pass","right"]},isOperator=/[\.\/⌿⍀¨⍣]/,isNiladic=/⍬/,isFunction=/[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/,isArrow=/←/,isComment=/[⍝#].*$/,stringEater=function(type){var prev=!1;return function(c){prev=c;return c===type?"\\"===prev:!0}};return{startState:function(){return{prev:!1,
func:!1,op:!1,string:!1,escape:!1}},token:function(stream,state){if(stream.eatSpace())return null;var ch=stream.next();if('"'===ch||"'"===ch)return stream.eatWhile(stringEater(ch)),stream.next(),state.prev=!0,"string";if(/[\[{\(]/.test(ch))return state.prev=!1,null;if(/[\]}\)]/.test(ch))return state.prev=!0,null;if(isNiladic.test(ch))return state.prev=!1,"niladic";if(/[¯\d]/.test(ch))return state.func?(state.func=!1,state.prev=!1):state.prev=!0,stream.eatWhile(/[\w\.]/),"number";if(isOperator.test(ch))return"operator apl-"+
builtInOps[ch];if(isArrow.test(ch))return"apl-arrow";if(isFunction.test(ch))return stream="apl-",null!=builtInFuncs[ch]&&(stream=state.prev?stream+builtInFuncs[ch][1]:stream+builtInFuncs[ch][0]),state.func=!0,state.prev=!1,"function "+stream;if(isComment.test(ch))return stream.skipToEnd(),"comment";if("∘"===ch&&"."===stream.peek())return stream.next(),"function jot-dot";stream.eatWhile(/[\w\$_]/);state.prev=!0;return"keyword"}}});CodeMirror.defineMIME("text/apl","apl")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$apl$apl.js.map
