{"version":3,"sources":["frontend/mobile/util.cljs"],"mappings":"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","names":["frontend.mobile.util/platform","js/module$node_modules$$capacitor$core$dist$index_cjs.Capacitor","frontend.mobile.util/native-platform?","frontend.mobile.util/native-ios?","and__5041__auto__","cljs.core._EQ_","frontend.mobile.util/native-android?","frontend.mobile.util/convert-file-src","path-str","js/frontend","js/frontend.mobile","js/frontend.mobile.util","js/frontend.mobile.util.folder-picker","frontend.mobile.util/folder-picker","js/module$node_modules$$capacitor$core$dist$index_cjs.registerPlugin","js/frontend.mobile.util.download-icloud-files","frontend.mobile.util/download-icloud-files","js/frontend.mobile.util.ios-utils","frontend.mobile.util/ios-utils","js/frontend.mobile.util.ios-file-container","frontend.mobile.util/ios-file-container","js/frontend.mobile.util.file-sync","frontend.mobile.util/file-sync","js/frontend.mobile.util.fs-watcher","frontend.mobile.util/fs-watcher","frontend.mobile.util/sync-icloud-repo","repo-dir","repo-name","clojure.string.split","cljs.core/last","clojure.string/trim","js/decodeURI","cljs.core/clj->js","frontend.mobile.util/hide-splash","js/module$node_modules$$capacitor$splash_screen$dist$plugin_cjs.SplashScreen","frontend.mobile.util/get-idevice-model","vec__51827","cljs.core.nth","width","js/screen","height","landscape?","G__51832","frontend.mobile.util/native-iphone-without-notch?","temp__5720__auto__","model","clojure.string/starts-with?","cljs.core/first","frontend.mobile.util/native-iphone?","frontend.mobile.util/native-ipad?","frontend.mobile.util/check-ios-zoomed-display","promesa.core.bind","___36606__auto__","promesa.protocols/-promise","is-zoomed?","p1__51833#","promesa.core.chain","cljs.core.js__GT_clj","cl","js/document.documentElement"],"sourcesContent":["(ns frontend.mobile.util\n  (:require [\"@capacitor/core\" :refer [Capacitor registerPlugin]]\n            [\"@capacitor/splash-screen\" :refer [SplashScreen]]\n            [clojure.string :as string]\n            [promesa.core :as p]))\n\n(defn platform []\n  (.getPlatform Capacitor))\n\n(defn native-platform? []\n  (.isNativePlatform Capacitor))\n\n(defn native-ios? []\n  (and (native-platform?)\n       (= (platform) \"ios\")))\n\n(defn native-android? []\n  (and (native-platform?)\n       (= (platform) \"android\")))\n\n(defn convert-file-src [path-str]\n  (.convertFileSrc Capacitor path-str))\n\n(defonce folder-picker (registerPlugin \"FolderPicker\"))\n(when (native-ios?)\n  (defonce download-icloud-files (registerPlugin \"DownloadiCloudFiles\"))\n  (defonce ios-utils (registerPlugin \"Utils\"))\n  (defonce ios-file-container (registerPlugin \"FileContainer\"))\n  (defonce file-sync (registerPlugin \"FileSync\")))\n\n;; NOTE: both iOS and android share the same FsWatcher API\n(when (native-platform?)\n  (defonce fs-watcher (registerPlugin \"FsWatcher\")))\n\n(defn sync-icloud-repo [repo-dir]\n  (let [repo-name (-> (string/split repo-dir \"Documents/\")\n                      last\n                      string/trim\n                      js/decodeURI)]\n    (.syncGraph download-icloud-files\n                (clj->js {:graph repo-name}))))\n\n(defn hide-splash []\n  (.hide SplashScreen))\n\n(defn get-idevice-model\n  []\n  (when (native-ios?)\n    (let [width (.-width js/screen)\n          height (.-height js/screen)\n          landscape? (> width height)\n          [width height] (if landscape? [height width] [width height])]\n      [(case [width height]\n         [320 568] \"iPhoneSE4\"\n         [375 667] \"iPhone8\"\n         [375 812] \"iPhoneX\"\n         [390 844] \"iPhone12\"\n         [414 736] \"iPhone8Plus\"\n         [414 896] \"iPhone11\"\n         [428 926] \"iPhone13ProMax\"\n         [476 847] \"iPhone7Plus\"\n         [744 1133] \"iPadmini8.3\"\n         [768 1024] \"iPad9.7\"\n         [810 1080] \"iPad10.2\"\n         [820 1180] \"iPad10.9\"\n         [834 1112] \"iPadAir10.5\"\n         [834 1194] \"iPadPro11\"\n         [1024 1366] \"iPadPro12.9\"\n         \"Not a known Apple device!\")\n       landscape?])))\n\n(defn native-iphone-without-notch?\n  []\n  (when-let [model (get-idevice-model)]\n    (string/starts-with? (first model) \"iPhone8\")))\n\n(defn native-iphone?\n  []\n  (when-let [model (get-idevice-model)]\n    (and (string/starts-with? (first model) \"iPhone\")\n         (not (string/starts-with? (first model) \"iPhone8\")))))\n\n(defn native-ipad?\n  []\n  (when-let [model (get-idevice-model)]\n    (string/starts-with? (first model) \"iPad\")))\n\n(defn check-ios-zoomed-display\n  \"Detect whether iOS device is in Zoom Display\"\n  []\n  (p/let [is-zoomed? (p/chain (.isZoomed ios-utils)\n                              #(js->clj % :keywordize-keys true))]\n    (when (:isZoomed is-zoomed?)\n      (let [^js cl (.-classList js/document.documentElement)]\n        (.add cl \"is-zoomed-native-ios\")))))"]}