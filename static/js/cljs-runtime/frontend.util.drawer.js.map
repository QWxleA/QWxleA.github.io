{"version":3,"sources":["frontend/util/drawer.cljs"],"mappings":"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","names":["frontend.util.drawer/drawer-start","typ","frontend.util.format","clojure.string/upper-case","js/frontend","js/frontend.util","js/frontend.util.drawer","js/frontend.util.drawer.drawer-end","frontend.util.drawer/drawer-end","js/frontend.util.drawer.logbook-start","frontend.util.drawer/logbook-start","var_args","G__33264","frontend.util.drawer/build-drawer-str","js/Error","frontend.util.drawer.build_drawer_str","value","clojure.string.join","frontend.util.drawer/get-drawer-ast","format","content","ast","frontend.format.mldoc/->edn","logseq.graph_parser.mldoc.default_config","typ-drawer","cljs.core/ffirst","cljs.core.filter","x","frontend.format.mldoc/typ-drawer?","frontend.util.drawer/insert-drawer","e33271","has-properties?","cljs.core/some","frontend.format.mldoc/properties?","has-typ-drawer?","lines","clojure.string/split-lines","title","cljs.core/first","body","cljs.core/rest","scheduled","p1__33265#","clojure.string/starts-with?","deadline","p1__33266#","body-without-timestamps","cljs.core/vec","p1__33267#","start-idx","end-idx","vec__33274","cljs.core.nth","before","after","cljs.core/split-at","cljs.core/count","result","cljs.core/not","drawer","cljs.core._EQ_","prop-start-idx","logseq.graph-parser.property/properties-start","prop-end-idx","logseq.graph-parser.property/properties-end","properties","cljs.core.subvec","cljs.core.concat","properties-count","cljs.core/second","and__5041__auto__","middle","cljs.core.conj","clojure.string/trimr","e","js/console.error","frontend.util.drawer/contains-logbook?","frontend.util/safe-re-find","cljs.core/re-pattern","frontend.util.drawer/remove-logbook","vec__33297","title-lines","cljs.core/split-with","l","clojure.string/triml","cljs.core.drop_while","l'","clojure.string/lower-case","clojure.string/trim","clojure.string/blank?","cljs.core/seq","line","clojure.string/replace","cljs.core/cons","frontend.util.drawer/get-logbook","v","cljs.core/vector?","frontend.util.drawer/with-logbook","block","new-clocks","cljs.core/last","logbook","clocks","cljs.core.distinct","cljs.core.map","cljs.core.remove"],"sourcesContent":["(ns frontend.util.drawer\n  (:require [clojure.string :as string]\n            [frontend.util :as util]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.property :as gp-property]\n            [frontend.format.mldoc :as mldoc]))\n\n(defn drawer-start\n  [typ]\n  (util/format \":%s:\" (string/upper-case typ)))\n\n(defonce drawer-end \":END:\")\n\n(defonce logbook-start \":LOGBOOK:\")\n\n(defn build-drawer-str\n  ([typ]\n   (build-drawer-str typ nil))\n  ([typ value]\n   (if value\n     (string/join \"\\n\" [(drawer-start typ) value drawer-end])\n     (string/join \"\\n\" [(drawer-start typ) drawer-end]))))\n\n(defn get-drawer-ast\n  [format content typ]\n  (let [ast (mldoc/->edn content (gp-mldoc/default-config format))\n        typ-drawer (ffirst (filter (fn [x]\n                                     (mldoc/typ-drawer? x typ)) ast))]\n    typ-drawer))\n\n(defn insert-drawer\n  [format content typ value]\n  (when (string? content)\n    (try\n      (let [ast (mldoc/->edn content (gp-mldoc/default-config format))\n            has-properties? (some (fn [x] (mldoc/properties? x)) ast)\n            has-typ-drawer? (some (fn [x] (mldoc/typ-drawer? x typ)) ast)\n            lines (string/split-lines content)\n            title (first lines)\n            body (rest lines)\n            scheduled (filter #(string/starts-with? % \"SCHEDULED\") lines)\n            deadline (filter #(string/starts-with? % \"DEADLINE\") lines)\n            body-without-timestamps (vec\n                                     (filter\n                                      #(not (or (string/starts-with? % \"SCHEDULED\")\n                                                (string/starts-with? % \"DEADLINE\")))\n                                      body))\n            start-idx (.indexOf body-without-timestamps (drawer-start typ))\n            end-idx (let [[before after] (split-at start-idx body-without-timestamps)]\n                      (+ (count before) (.indexOf after drawer-end)))\n            result  (cond\n                      (not has-typ-drawer?)\n                      (let [drawer (build-drawer-str typ value)]\n                        (if has-properties?\n                          (cond\n                            (= :org format)\n                            (let [prop-start-idx (.indexOf body-without-timestamps gp-property/properties-start)\n                                  prop-end-idx (.indexOf body-without-timestamps gp-property/properties-end)\n                                  properties (subvec body-without-timestamps prop-start-idx (inc prop-end-idx))\n                                  after (subvec body-without-timestamps (inc prop-end-idx))]\n                              (string/join \"\\n\" (concat [title] scheduled deadline properties [drawer] after)))\n\n                            :else\n                            (let [properties-count (count (second (first (second ast))))\n                                  properties (subvec body-without-timestamps 0 properties-count)\n                                  after (subvec body-without-timestamps properties-count)]\n                              (string/join \"\\n\" (concat [title] scheduled deadline properties [drawer] after))))\n                          (string/join \"\\n\" (concat [title] scheduled deadline [drawer] body-without-timestamps))))\n\n                      (and has-typ-drawer?\n                           (>= start-idx 0) (> end-idx 0) (> end-idx start-idx))\n                      (let [before (subvec body-without-timestamps 0 start-idx)\n                            middle (conj\n                                    (subvec body-without-timestamps (inc start-idx) end-idx)\n                                    value)\n                            after (subvec body-without-timestamps (inc end-idx))\n                            lines (concat [title] scheduled deadline before\n                                          [(drawer-start typ)] middle [drawer-end] after)]\n                        (string/join \"\\n\" lines))\n\n                      :else\n                      content)]\n        (string/trimr result))\n      (catch js/Error e\n        (js/console.error e)\n        content))))\n\n(defn contains-logbook?\n  [content]\n  (and (util/safe-re-find (re-pattern (str \"(?i)\" logbook-start)) content)\n       (util/safe-re-find (re-pattern (str \"(?i)\" drawer-end)) content)))\n\n;; TODO: DRY\n(defn remove-logbook\n  [content]\n  (when content\n    (if (contains-logbook? content)\n      (let [lines (string/split-lines content)\n            [title-lines body] (split-with (fn [l]\n                                             (not (string/starts-with? (string/upper-case (string/triml l)) \":LOGBOOK:\")))\n                                           lines)\n            body (drop-while (fn [l]\n                               (let [l' (string/lower-case (string/trim l))]\n                                 (or\n                                  (not (string/starts-with? l' \":end:\"))\n                                  (string/blank? l))))\n                             body)\n            body (if (and (seq body)\n                          (string/starts-with? (string/lower-case (string/triml (first body))) \":end:\"))\n                   (let [line (string/replace (first body) #\"(?i):end:\\s?\" \"\")]\n                     (if (string/blank? line)\n                       (rest body)\n                       (cons line (rest body))))\n                   body)]\n        (->> (concat title-lines body)\n             (string/join \"\\n\")))\n      content)))\n\n(defn get-logbook\n  [body]\n  (-> (filter (fn [v] (and (vector? v)\n                          (= (first v) \"Drawer\")\n                          (= (second v) \"logbook\"))) body)\n      first))\n\n(defn with-logbook\n  [block content]\n  (let [new-clocks (last (get-drawer-ast (:block/format block) content \"logbook\"))\n        logbook (get-logbook (:block/body block))]\n    (if logbook\n      (let [content (remove-logbook content)\n            clocks (->> (concat new-clocks (when-not new-clocks (last logbook)))\n                        (distinct))\n            clocks (->> (map string/trim clocks)\n                        (remove string/blank?)\n                        (string/join \"\\n\"))]\n        (if (:block/title block)\n          (insert-drawer (:block/format block) content \"LOGBOOK\" clocks)\n          content))\n      content)))\n"]}