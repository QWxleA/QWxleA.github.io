{"version":3,"sources":["frontend/handler/command_palette.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/keyword?","cljs.core/string?","cljs.core/fn?","cljs.core/vector?","cljs.spec.alpha/map-spec-impl","G__60662","cljs.core/map?","cljs.core/contains?","frontend.handler.command-palette/global-shortcut-commands","cljs.core.mapcat","frontend.modules.shortcut.data-helper/shortcuts->commands","frontend.handler.command-palette/get-commands","cljs.core/deref","cljs.core.get","frontend.state/state","cljs.core.sort_by","frontend.handler.command-palette/get-commands-unique","p1__60673#","p2__60674#","cljs.core.reduce","cljs.core.assoc","var_args","G__60677","frontend.handler.command-palette/history","js/Error","or__5043__auto__","frontend.storage/get","vals","frontend.storage/set","frontend.handler.command-palette/assoc-invokes","cmds","invokes","frontend.handler.command_palette.history","cljs.core.map","cljs.core/frequencies","cljs.core.mapv","p__60678","map__60679","cljs.core/--destructure-map","id","cmd","p__60680","map__60681","frontend.handler.command-palette/add-history","cljs.core.conj","js/Date","p__60682","map__60683","frontend.handler.command-palette/invoke-command","action","frontend.state/set-state!","frontend.state/close-modal!","frontend.handler.command-palette/top-commands","limit","cljs.core/reverse","cljs.core.take","p__60684","map__60685","frontend.handler.command-palette/register","command","frontend.spec/validate","cljs.core/some","existing-cmd","cljs.core._EQ_","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.command-palette/unregister","cljs.core.keyword","cljs.core/vals","cljs.core.dissoc","p1__60686#","cljs.core.filter","cljs.core.not_EQ_","frontend.handler.command-palette/register-global-shortcut-commands","seq__60688","cljs.core/seq","chunk__60689","count__60690","i__60691","temp__5720__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next"],"sourcesContent":["(ns frontend.handler.command-palette\n  (:require [cljs.spec.alpha :as s]\n            [frontend.modules.shortcut.data-helper :as shortcut-helper]\n            [frontend.spec :as spec]\n            [frontend.state :as state]\n            [lambdaisland.glogi :as log]\n            [frontend.storage :as storage]))\n\n(s/def :command/id keyword?)\n(s/def :command/desc string?)\n(s/def :command/action fn?)\n(s/def :command/shortcut string?)\n(s/def :command/tag vector?)\n\n(s/def :command/command\n  (s/keys :req-un [:command/id :command/action]\n          ;; :command/desc is optional for internal commands since view\n          ;; checks translation ns first\n          :opt-un [:command/desc :command/shortcut :command/tag]))\n\n(defn global-shortcut-commands []\n  (->> [:shortcut.handler/editor-global\n        :shortcut.handler/global-prevent-default\n        :shortcut.handler/global-non-editing-only]\n       (mapcat shortcut-helper/shortcuts->commands)))\n\n(defn get-commands []\n  (->> (get @state/state :command-palette/commands)\n       (sort-by :id)))\n\n(defn get-commands-unique []\n  (reduce #(assoc %1 (:id %2) %2) {}\n          (get @state/state :command-palette/commands)))\n\n(defn history\n  ([] (or (storage/get \"commands-history\") []))\n  ([vals] (storage/set \"commands-history\" vals)))\n\n(defn- assoc-invokes [cmds]\n  (let [invokes (->> (history)\n                     (map :id)\n                     (frequencies))]\n    (mapv (fn [{:keys [id] :as cmd}]\n            (if (contains? invokes id)\n              (assoc cmd :invokes-count (get invokes id))\n              cmd))\n          cmds)))\n\n(defn add-history [{:keys [id]}]\n  (storage/set \"commands-history\" (conj (history) {:id id :timestamp (.getTime (js/Date.))})))\n\n(defn invoke-command [{:keys [action] :as cmd}]\n  (add-history cmd)\n  (state/set-state! :ui/command-palette-open? false)\n  (state/close-modal!)\n  (action))\n\n(defn top-commands [limit]\n  (->> (get-commands)\n       (assoc-invokes)\n       (sort-by :invokes-count)\n       (reverse)\n       (take limit)))\n\n(defn register\n  \"Register a global command searchable by command palette.\n  `id` is defined as a global unique namespaced key :scope/command-name\n  `action` must be a zero arity function\n\n  Example:\n  ```clojure\n  (register\n   {:id :document/open-logseq-doc\n    :desc \\\"Document: open Logseq documents\\\"\n    :action (fn [] (js/window.open \\\"https://docs.logseq.com/\\\"))})\n  ```\n\n  To add i18n support, prefix `id` with command and put that item in dict.\n  Example: {:zh-CN {:command.document/open-logseq-doc \\\"\u6253\u5f00\u6587\u6863\\\"}}\"\n  [{:keys [id] :as command}]\n  (spec/validate :command/command command)\n  (let [cmds (get-commands)]\n    (if (some (fn [existing-cmd] (= (:id existing-cmd) id)) cmds)\n      (log/error :command/register {:msg \"Failed to register command. Command with same id already exist\"\n                                    :id  id})\n      (state/set-state! :command-palette/commands (conj cmds command)))))\n\n(defn unregister\n  [id]\n  (let [id (keyword id)\n        cmds (get-commands-unique)]\n    (when (contains? cmds id)\n      (state/set-state! :command-palette/commands (vals (dissoc cmds id)))\n      ;; clear history\n      (history (filter #(not= (:id %) id) (history))))))\n\n(defn register-global-shortcut-commands []\n  (let [cmds (global-shortcut-commands)]\n    (doseq [cmd cmds] (register cmd))))\n\n(comment\n  ;; register custom command example\n  (register\n   {:id :document/open-logseq-doc\n    :desc \"Document: open Logseq documents\"\n    :action (fn [] (js/window.open \"https://docs.logseq.com/\"))}))\n"]}