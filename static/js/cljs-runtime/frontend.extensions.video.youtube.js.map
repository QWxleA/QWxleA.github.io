{"version":3,"sources":["frontend/extensions/video/youtube.cljs"],"mappings":"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","names":["frontend.extensions.video.youtube/load-yt-script","js/console.log","tag","js/document.createElement","first-script-tag","cljs.core/first","js/document.getElementsByTagName","parent-node","frontend.extensions.video.youtube/load-youtube-api","c","cljs.core.async.chan","js/window.YT","cljs.core.async/close!","js/window.onYouTubeIframeAPIReady","frontend.extensions.video.youtube/register-player","state","e48910","id","node","rum.core/dom-node","player","js/window.YT.Player","cljs.core/clj->js","_e","frontend.state/update-state!","players","cljs.core.assoc","rum.core/lazy-build","rum.core/build-defcs","daiquiri.core/create-element","frontend.extensions.video.youtube/youtube-video","rum.core/reactive","rum.core.local","c__27595__auto__","cljs.core.async.impl.dispatch/run","f__27596__auto__","switch__27572__auto__","state_48916","state_val_48917","inst_48911","cljs.core.async.impl.ioc-helpers/take!","inst_48913","inst_48914","statearr-48918","cljs.core.async.impl.ioc-helpers/return-chan","statearr-48919","state-machine__27573__auto__","ret-value__27574__auto__","result__27575__auto__","cljs.core/keyword-identical?","ex__27576__auto__","e48920","statearr-48921","cljs.core/seq","statearr-48922","state__27597__auto__","statearr-48923","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","width","x__5131__auto__","y__5132__auto__","frontend.util/get-width","height","frontend.extensions.video.youtube/seconds->display","seconds","hours","cljs.core/quot","minutes","cljs.core/mod","cljs.core.map","v","cljs.core.keep_indexed","idx","cljs.core.not_EQ_","clojure.string.join","frontend.extensions.video.youtube/dom-after-video-node?","video-node","target","js/Node.DOCUMENT_POSITION_FOLLOWING","frontend.extensions.video.youtube/get-player","temp__5720__auto__","iframe","cljs.core.filter","src","frontend.extensions.video.youtube.goog$module$goog$object.get","clojure.string/includes?","p1__48927#","cljs.core/last","clojure.string/replace-first","cljs.core.get","cljs.core/deref","frontend.state/state","rum.core/build-defc","daiquiri.interpreter/interpret","frontend.extensions.video.youtube/timestamp","e","frontend.util/stop","frontend.components.svg/clock","frontend.extensions.video.youtube/gen-youtube-ts-macro","temp__5718__auto__","frontend.state/get-input","frontend.util.format","Math/floor","frontend.mobile.util/native-platform?","frontend.handler.notification.show_BANG_","frontend.extensions.video.youtube/parse-timestamp","timestamp","vec__48936","cljs.core.nth","vec__48939","reg","reg-number","total-seconds","cljs.core/re-matches","frontend.util/safe-parse-int","_","and__5041__auto__"],"sourcesContent":["(ns frontend.extensions.video.youtube\n  (:require [rum.core :as rum]\n            [cljs.core.async :refer [<! chan go] :as a]\n            [frontend.components.svg :as svg]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [clojure.string :as str]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.handler.notification :as notification]))\n\n(defn- load-yt-script []\n  (js/console.log \"load yt script\")\n  (let [tag              (js/document.createElement \"script\")\n        first-script-tag (first (js/document.getElementsByTagName \"script\"))\n        parent-node      (.-parentNode first-script-tag)]\n    (set! (.-src tag) \"https://www.youtube.com/iframe_api\")\n    (.insertBefore parent-node tag first-script-tag)))\n\n(defn load-youtube-api []\n  (let [c (chan)]\n    (if js/window.YT\n      (a/close! c)\n      (do\n        (set! js/window.onYouTubeIframeAPIReady #(a/close! c))\n        (load-yt-script)))\n    c))\n\n(defn register-player [state]\n  (try\n    (let [id (first (:rum/args state))\n         node (rum/dom-node state)]\n     (when node\n       (let [player (js/window.YT.Player.\n                     node\n                     (clj->js\n                      {:events\n                       {\"onReady\" (fn [_e] (js/console.log id \" ready\"))}}))]\n         (state/update-state! [:youtube/players]\n                              (fn [players]\n                                (assoc players id player))))))\n    (catch :default _e\n      nil)))\n\n(rum/defcs youtube-video <\n  rum/reactive\n  (rum/local nil ::player)\n  {:did-mount\n   (fn [state]\n     (go\n       (<! (load-youtube-api))\n       (register-player state))\n     state)}\n  [state id]\n  (let [width  (min (- (util/get-width) 96)\n                    560)\n        height (int (* width (/ 315 560)))]\n    [:iframe\n     {:id                (str \"youtube-player-\" id)\n      :allow-full-screen \"allowfullscreen\"\n      :allow \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope\"\n      :frame-border      \"0\"\n      :src               (str \"https://www.youtube.com/embed/\" id \"?enablejsapi=1\")\n      :height            height\n      :width             width}]))\n\n(defn seconds->display [seconds]\n  (let [seconds (int seconds)\n        hours   (quot seconds 3600)\n        minutes (mod (quot seconds 60) 60)\n        seconds (mod seconds 60)]\n    (->> [hours minutes seconds]\n         (map (fn [v] (if (< v 10) (str \"0\" v) (str v))))\n         (keep-indexed (fn [idx v]\n                         (when (or (> idx 0)\n                                   (not= v \"00\"))\n                           v)))\n         (str/join \":\"))))\n\n(defn dom-after-video-node? [video-node target]\n  (not (zero?\n        (bit-and\n         (.compareDocumentPosition video-node target)\n         js/Node.DOCUMENT_POSITION_FOLLOWING))))\n\n(defn get-player [target]\n  (when-let [iframe (->> (js/document.getElementsByTagName \"iframe\")\n                         (filter\n                          (fn [node]\n                            (let [src (gobj/get node \"src\" \"\")]\n                              (str/includes? src \"youtube.com\"))))\n                         (filter #(dom-after-video-node? % target))\n                         last)]\n    (let [id (gobj/get iframe \"id\" \"\")\n          id (str/replace-first id #\"youtube-player-\" \"\")]\n      (get (get @state/state :youtube/players) id))))\n\n\n(rum/defc timestamp\n  [seconds]\n  [:a.svg-small.youtube-timestamp\n   {:on-click (fn [e]\n                (util/stop e)\n                (when-let [player (get-player (.-target e))]\n                  (.seekTo ^js player seconds true)))}\n   svg/clock\n   (seconds->display seconds)])\n\n(defn gen-youtube-ts-macro []\n  (if-let [player (get-player (state/get-input))]\n    (util/format \"{{youtube-timestamp %s}}\" (Math/floor (.getCurrentTime ^js player)))\n    (when (mobile-util/native-platform?)\n      (notification/show!\n       \"Please embed a YouTube video at first, then use this icon.\nRemember: You can paste a raw YouTube url as embedded video on mobile.\"\n       :warning\n       false)\n      nil)))\n\n\n(defn parse-timestamp [timestamp]\n  (let [reg #\"^(?:(\\d+):)?([0-5]\\d):([0-5]\\d)$\"\n        reg-number #\"^\\d+$\"\n        timestamp (str timestamp)\n        total-seconds (-> (re-matches reg-number timestamp)\n                          util/safe-parse-int)\n        [_ hours minutes seconds] (re-matches reg timestamp)\n        [hours minutes seconds] (map util/safe-parse-int [hours minutes seconds])]\n    (cond\n      total-seconds\n      total-seconds\n\n      (and minutes seconds)\n      (+ (* 3600 hours) (* 60 minutes) seconds)\n\n      :else\n      nil)))\n\n(comment\n  ;; hh:mm:ss\n  (re-matches #\"^(?:(\\d+):)?([0-5]\\d):([0-5]\\d)$\" \"123:22:23\") ;; => [\"123:22:23\" \"123\" \"22\" \"23\"]\n  (re-matches #\"^(?:(\\d+):)?([0-5]\\d):([0-5]\\d)$\" \"30:23\") ;; => [\"30:23\" nil \"30\" \"23\"]\n\n  (parse-timestamp \"01:23\") ;; => 83\n\n  (parse-timestamp \"01:01:23\") ;; => 3683\n\n  ;; seconds->display\n  ;; https://stackoverflow.com/questions/1322732/convert-seconds-to-hh-mm-ss-with-javascript\n  (seconds->display 129600) ;; => \"36:00:00\"\n  (seconds->display 13545) ;; => \"03:45:45\"\n  (seconds->display 18) ;; => \"00:18\"\n  )\n"]}