{"version":3,"sources":["frontend/handler/notification.cljs"],"mappings":";AAIA,4CAAA,5CAAMA,gGACHC;AADH,AAEE,IAAMC,WAAS,AAACC;AAAhB,AACE,sCAAA,/BAACC,oHAAwC,AAACC,+CAAOH,SAASD;;AAE9D,AAAA,2CAAA,mDAAAK,9FAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMD,oFACFE,QAAQC;AADZ,AAEG,6FAAA,KAAA,KAAA,hGAACC,uEAAMF,QAAQC;;;AAFlB,CAAA,yEAAA,zEAAMH,oFAGFE,QAAQC,OAAOE;AAHnB,AAIG,0GAAA,KAAA,xGAACD,uEAAMF,QAAQC,OAAOE;;;AAJzB,CAAA,yEAAA,zEAAML,oFAKFE,QAAQC,OAAOE,aAAOZ;AAL1B,AAMG,8GAAA,vGAACW,uEAAMF,QAAQC,OAAOE,aAAOZ;;;AANhC,CAAA,yEAAA,zEAAMO,oFAOFE,QAAQC,OAAOE,aAAOZ,IAAIa;AAP9B,AAQG,IAAMZ,WAAS,AAACC;IACVF,UAAI,iBAAAc,mBAAId;AAAJ,AAAA,oBAAAc;AAAAA;;AAAQ,OAACC,gDAAQ,AAACC;;;AAD5B,AAEE,+BAAA,/BAACb,oHAAwC,+DAAA,2CAAA,iEAAA,3KAACc,8CAAMhB,SACAD,4GAAcS,kEACDC;;AAE7D,oBAAM,iBAAAQ,oBAAKN;AAAL,AAAA,oBAAAM;AAAY,8DAAA,vDAACC,gDAAKT;;AAAlBQ;;;AAAN,AACE,WAAA,XAACE;AAAD,AAAgB,OAACrB,0CAAOC;GAAK,iBAAAc,mBAAID;AAAJ,AAAA,oBAAAC;AAAAA;;AAAA;;;;AAD/B;;AAGAd;;;AAjBL,CAAA,mEAAA,nEAAMO;;AAAN","names":["frontend.handler.notification/clear!","uid","contents","frontend.state/get-notification-contents","frontend.state/set-state!","cljs.core.dissoc","var_args","G__88172","frontend.handler.notification/show!","js/Error","content","status","frontend.handler.notification.show_BANG_","clear?","timeout","or__4253__auto__","cljs.core.keyword","frontend.util/unique-id","cljs.core.assoc","and__4251__auto__","cljs.core.not_EQ_","js/setTimeout"],"sourcesContent":["(ns frontend.handler.notification\n  (:require [frontend.state :as state]\n            [frontend.util :as util]))\n\n(defn clear!\n  [uid]\n  (let [contents (state/get-notification-contents)]\n    (state/set-state! :notification/contents (dissoc contents uid))))\n\n(defn show!\n  ([content status]\n   (show! content status true nil 1500))\n  ([content status clear?]\n   (show! content status clear? nil 1500))\n  ([content status clear? uid]\n   (show! content status clear? uid 1500))\n  ([content status clear? uid timeout]\n   (let [contents (state/get-notification-contents)\n         uid (or uid (keyword (util/unique-id)))]\n     (state/set-state! :notification/contents (assoc contents\n                                                     uid {:content content\n                                                          :status status}))\n\n     (when (and clear? (not= status :error))\n       (js/setTimeout #(clear! uid) (or timeout 1500)))\n\n     uid)))\n"]}