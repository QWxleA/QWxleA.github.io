{"version":3,"sources":["frontend/util/priority.cljs"],"mappings":";AAKA,8CAAA,9CAAMA,oGACHC;AADH,AAEE,mBAAA,fAAMC;IACAC,WAAS,AAACC,eAAK,AAACC,2BAAkBH,aAAaD;IAC/CK,gBAAc,iBAAAC,WAAMJ;AAAN,AAAA,QAAAI;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA;;;;AAFpB,AAUE,IAAAC,oBAAKF;AAAL,AAAA,oBAAAE;AAAmB,iEAAA,1DAACC,oHAAoBH;;AAAxCE;;;AAEJ,gDAAA,hDAAME,wGACHT,QAAQU,OAAOR;AADlB,AAEE,uBAAA,nBAAMW;IAANF,aAEM,wGAAA,mFAAA,QAAA,kBAAA,mFAAA,OAAA,7SAAI,6CAAA,7CAACK,6FAAON;iBAFlB,AAAAE,4CAAAD,WAAA,IAAA,xEACOG;0BADP,AAAAF,4CAAAD,WAAA,IAAA,jFACkBI;IAIZE,gBACA,iBAAAC,qBAAiB,AAACE,cAAI,AAACC,qBAAYN,oBAAoBf;AAAvD,AAAA,GAAAkB;AAAA,cAAAA,VAASC;AAAT,AACE,IAAAG,aAA0B,AAACnB,eAAKgB;gBAAhC,AAAAP,4CAAAU,WAAA,IAAA,vEAAOC;kBAAP,AAAAX,4CAAAU,WAAA,IAAA,zEAAiBtB;AAAjB,AACE,QAAGuB,YAAU,AAACC,gBAAMxB;;AACtB,OAACwB,gBAAM,AAACpB,2BAAkBU,WAAWd;;;IACvCyB,kBACA,iBAAAP,qBAAiB,AAACE,cAAI,AAACC,qBAAYK,yCAA2B,AAACC,6CAAK3B,QAAQiB;AAA5E,AAAA,GAAAC;AAAA,cAAAA,VAASC;AAAT,AACE,IAAAS,aAA0B,AAACzB,eAAKgB;gBAAhC,AAAAP,4CAAAgB,WAAA,IAAA,vEAAOL;kBAAP,AAAAX,4CAAAgB,WAAA,IAAA,zEAAiB5B;AAAjB,AACE,QAAGuB,YAAU,AAACC,gBAAMxB;;AAFxB;;;IAIA6B,MAAI,CAAGZ,gBAAcQ;IACrBK,cACA,CAAK,qDAAA,rDAACH,6CAAK3B,YAAU6B,KAChB,AAACE,6BAAqB,AAACJ,6CAAK3B,QAAQ6B,KACdhB,iBACA,uDAAA,VAAKX;AApBtC,AAqBE4B","names":["frontend.util.priority/cycle-priority-state","content","priority-reg","priority","cljs.core/last","frontend.util/safe-re-find","next-priority","G__49163","and__5041__auto__","frontend.util.format","frontend.util.priority/add-or-update-priority","format","vec__49167","cljs.core.nth","priority-pattern","re-pattern","new-line-re-pattern","cljs.core._EQ_","skip-hash-pos","temp__5718__auto__","matches","cljs.core/seq","frontend.util/re-pos","vec__49170","start-pos","cljs.core/count","skip-marker-pos","frontend.util.marker/bare-marker-pattern","cljs.core.subs","vec__49174","pos","new-content","clojure.string/replace-first"],"sourcesContent":["(ns frontend.util.priority\n  (:require [clojure.string :as string]\n            [frontend.util :as util]\n            [frontend.util.marker :as marker]))\n\n(defn cycle-priority-state\n  [content]\n  (let [priority-reg #\"\\[#([ABC]{1})\\]\\s{1}\"\n        priority (last (util/safe-re-find priority-reg content))\n        next-priority (case priority\n                        \"A\" \"B\"\n\n                        \"B\" \"C\"\n\n                        \"C\" nil\n\n                        \"A\")]\n    (and next-priority (util/format \"[#%s]\" next-priority))))\n\n(defn add-or-update-priority\n  [content format priority]\n  (let [priority-pattern  #\"(\\[#[ABC]\\])?\\s?\"\n        [re-pattern new-line-re-pattern]\n        (if (= :org format)\n          [#\"\\*+\\s\" #\"\\n\\*+\\s\"]\n          [#\"#+\\s\" #\"\\n#+\\s\"])\n        skip-hash-pos\n        (if-let [matches (seq (util/re-pos new-line-re-pattern content))]\n          (let [[start-pos content] (last matches)]\n            (+ start-pos (count content)))\n          (count (util/safe-re-find re-pattern content)))\n        skip-marker-pos\n        (if-let [matches (seq (util/re-pos marker/bare-marker-pattern (subs content skip-hash-pos)))]\n          (let [[start-pos content] (last matches)]\n            (+ start-pos (count content)))\n          0)\n        pos (+ skip-hash-pos skip-marker-pos)\n        new-content\n        (str (subs content 0 pos)\n             (string/replace-first (subs content pos)\n                                   priority-pattern\n                                   (str priority \" \")))]\n    new-content))\n"]}