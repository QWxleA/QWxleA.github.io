{
"version":3,
"file":"module$node_modules$batch_processor$src$batch_processor.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/batch-processor/src/batch-processor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$batch_processor$src$batch_processor\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar utils = require(\"./utils\");\n\nmodule.exports = function batchProcessorMaker(options) {\n    options             = options || {};\n    var reporter        = options.reporter;\n    var asyncProcess    = utils.getOption(options, \"async\", true);\n    var autoProcess     = utils.getOption(options, \"auto\", true);\n\n    if(autoProcess && !asyncProcess) {\n        reporter && reporter.warn(\"Invalid options combination. auto=true and async=false is invalid. Setting async=true.\");\n        asyncProcess = true;\n    }\n\n    var batch = Batch();\n    var asyncFrameHandler;\n    var isProcessing = false;\n\n    function addFunction(level, fn) {\n        if(!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {\n            // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.\n            // This needs to be done before, since we're checking the size of the batch to be 0.\n            processBatchAsync();\n        }\n\n        batch.add(level, fn);\n    }\n\n    function processBatch() {\n        // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.\n        // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).\n        isProcessing = true;\n        while (batch.size()) {\n            var processingBatch = batch;\n            batch = Batch();\n            processingBatch.process();\n        }\n        isProcessing = false;\n    }\n\n    function forceProcessBatch(localAsyncProcess) {\n        if (isProcessing) {\n            return;\n        }\n\n        if(localAsyncProcess === undefined) {\n            localAsyncProcess = asyncProcess;\n        }\n\n        if(asyncFrameHandler) {\n            cancelFrame(asyncFrameHandler);\n            asyncFrameHandler = null;\n        }\n\n        if(localAsyncProcess) {\n            processBatchAsync();\n        } else {\n            processBatch();\n        }\n    }\n\n    function processBatchAsync() {\n        asyncFrameHandler = requestFrame(processBatch);\n    }\n\n    function clearBatch() {\n        batch           = {};\n        batchSize       = 0;\n        topLevel        = 0;\n        bottomLevel     = 0;\n    }\n\n    function cancelFrame(listener) {\n        // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n        var cancel = clearTimeout;\n        return cancel(listener);\n    }\n\n    function requestFrame(callback) {\n        // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };\n        var raf = function(fn) { return setTimeout(fn, 0); };\n        return raf(callback);\n    }\n\n    return {\n        add: addFunction,\n        force: forceProcessBatch\n    };\n};\n\nfunction Batch() {\n    var batch       = {};\n    var size        = 0;\n    var topLevel    = 0;\n    var bottomLevel = 0;\n\n    function add(level, fn) {\n        if(!fn) {\n            fn = level;\n            level = 0;\n        }\n\n        if(level > topLevel) {\n            topLevel = level;\n        } else if(level < bottomLevel) {\n            bottomLevel = level;\n        }\n\n        if(!batch[level]) {\n            batch[level] = [];\n        }\n\n        batch[level].push(fn);\n        size++;\n    }\n\n    function process() {\n        for(var level = bottomLevel; level <= topLevel; level++) {\n            var fns = batch[level];\n\n            for(var i = 0; i < fns.length; i++) {\n                var fn = fns[i];\n                fn();\n            }\n        }\n    }\n\n    function getSize() {\n        return size;\n    }\n\n    return {\n        add: add,\n        process: process,\n        size: getSize\n    };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Batch","batch","size","topLevel","bottomLevel","add","level","fn","push","process","fns","i","length","getSize","utils","module.exports","options","processBatch","isProcessing","processingBatch","reporter","asyncProcess","getOption","autoProcess","warn","asyncFrameHandler","addFunction","setTimeout","force","forceProcessBatch","localAsyncProcess","undefined","clearTimeout"]
}
