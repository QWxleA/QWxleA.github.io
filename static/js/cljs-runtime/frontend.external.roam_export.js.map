{"version":3,"sources":["frontend/external/roam_export.cljs"],"mappings":";AAQA,kDAAA,lDAAKA;AAGL,kDAAA,lDAAKC;AAEL,gDAAA,hDAAKC;AAEL,6CAAA,7CAAOC;AAAP,AACE,OAACC,mBAASF;;AAEZ,wCAAA,xCAAMG;AAAN,yDACO,mDAAA,nDAACC,uDAAaH,hHACd,OAACI;;AAER,iDAAA,jDAAMC;AAAN,AACE,IAAMC,KAAG,iBAAAC,WAAW,AAACE;AAAZ,AAAA,4GAAAF,yCAAAA,7IAACC,mDAAAA,6DAAAA;;AAAV,uFAQG,AAACK,4CAAI,WAAKI,9IACV,oDAAA,7CAACC;AADI,AAAA,0FAAYD,KAAK,AAACf;6NANvB,iBAAAQ,WAAKJ,rMAIL,AAACO,4CAAI,6CAAA,7CAACC,4GAAiBC,zMACvB,AAACC;IALDL,WAAA,AAAA;AAAA,AAAA,0GAAAD,SAAAC,wCAAAD,SAAAC,5JAACC,kDAAAA,qEAAAA;;;AASN,+CAAA,/CAAMO,sGAAgBC,QAAQC;AAA9B,AACE,IAAMC,QAAM,AAACC,eAAKF;AAAlB,AACE,OAACG,+CACA,WAAKC,IAAIR;AAAT,AACE,GAAI,AAACS,+BAAcD,IAAI,4CAAKR;AAC1B,OAACU,uBAAYF,IAAI,4CAAKR,MAAM,AAACW,4CAAIP,iBAAcJ;;AAC/CQ;;GACJL,QACAE;;AAEL,2CAAA,mDAAAO,9FAAMG,uGACYX;AADlB,AAAA,IAAAS,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;QAAAA,JAAkDG;WAAlD,AAAAL,4CAAAE,eAAA,lEAAgCb;cAAhC,AAAAW,4CAAAE,eAAA,rEAAqCV;AAArC,AAEE,IAAAc,WAAQD;IAARC,eAAA,4OAAAA,1OACE,AAACC,0BAAUd,iBAAcJ,OACzB,8CAAAiB,SAAA,vDAACE,oHAAiB,AAACR,4CAAIP,iBAAcJ;AAFvC,AAAA,oBAIE,AAACoB,eAAK,WAAKC;AAAL,AAAS,OAACZ,+BAAc,4CAAKN,SAAS,4CAAKkB;GAAM,AAACf,eAAKF;AAC7D,sDAAAa,aAAA,oEAAA,WAAAK,3IAACC;AAAD,AAAwB,oDAAAD,7CAACpB,8DAAiBE;;;AAL5Ca;;;AAOF,4CAAA,oDAAAO,hGAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;YAAAA,RAA8CE;cAA9C,AAAAhB,4CAAAc,eAAA,rEAAiCtB;AAAjC,AACE,oBAAIA;AACF,4DAAA,rDAACoB,+CAAOI,0EACA,WAAKC;AAAL,gGACMA,vBACA,yEAAA,zEAAClB,yBAAY9B,hDACb,gKAAA,hKAAC8B,gHAAY7B,vIACb,uMAAA,WAAA,lNAAC6B,3BACD,OAACmB;;;AACfF;;;AAEJ,yCAAA,zCAAMG,0FACHC,OAAOC;AADV,AAEE,IAAM5B,mBAAc,AAAChB;AAArB,AACE,OAAC6C,sBACA,WAAKC;AAAL,AACE,GACE,EAAK,AAACC,qBAAKD,QAAG,4BAAA,5BAAChB,0BAAUgB;wIACrBA,zCAEA,AAACnB,2CAAWX,rFAEZ,AAACsB,xBAED,gIAAA,2CAAA,iFAAA,6DAAA,oEAAA,7XAACU,7BAGD,OAACC,+dAAYN;;AAXnB,AAcEG;;;GACJF","names":["frontend.external.roam-export/todo-marker-regex","frontend.external.roam-export/done-marker-regex","frontend.external.roam-export/nano-char-range","frontend.external.roam-export/nano-id-char","cljs.core/rand-nth","frontend.external.roam-export/nano-id","cljs.core.repeatedly","clojure.string.join","frontend.external.roam-export/uuid->uid-map","db","G__62604","frontend.db/get-db","frontend.state/get-current-repo","G__62605","G__62606","datascript.core/q","cljs.core.map","cljs.core.comp","cljs.core/first","cljs.core.distinct","uuid","cljs.core.into","frontend.external.roam-export/update-content","content","uuid->uid-map","uuids","cljs.core/keys","cljs.core.reduce","acc","clojure.string/includes?","clojure.string/replace","cljs.core.get","p__62614","map__62615","cljs.core/--destructure-map","frontend.external.roam-export/update-uid","b","G__62617","cljs.core/contains?","cljs.core.assoc","cljs.core/some","id","p1__62612#","cljs.core.update","p__62623","map__62624","frontend.external.roam-export/update-todo","block","c","clojure.string/trim","frontend.external.roam-export/traverse","keyseq","vec-tree","clojure.walk/postwalk","x","cljs.core/map?","clojure.set/rename-keys","cljs.core/select-keys"],"sourcesContent":["(ns frontend.external.roam-export\n  (:require [clojure.set :as s]\n            [clojure.string :as str]\n            [clojure.walk :as walk]\n            [datascript.core :as d]\n            [frontend.db :as db]\n            [frontend.state :as state]))\n\n(def todo-marker-regex\n  #\"^(NOW|LATER|TODO|DOING|WAITING|WAIT|CANCELED|CANCELLED|STARTED|IN-PROGRESS)\")\n\n(def done-marker-regex #\"^DONE\")\n\n(def nano-char-range \"_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\n(defn- nano-id-char []\n  (rand-nth nano-char-range))\n\n(defn nano-id []\n  (->> (repeatedly 9 nano-id-char)\n       (str/join)))\n\n(defn uuid->uid-map []\n  (let [db (db/get-db (state/get-current-repo))]\n    (->>\n     (d/q db '[:find (pull ?r [:block/uuid])\n               :in $\n               :where\n               [?b :block/refs ?r]])\n     (map (comp :block/uuid first))\n     (distinct)\n     (map (fn [uuid] [uuid (nano-id)]))\n     (into {}))))\n\n(defn update-content [content uuid->uid-map]\n  (let [uuids (keys uuid->uid-map)]\n    (reduce\n     (fn [acc uuid]\n       (if (str/includes? acc (str uuid))\n         (str/replace acc (str uuid) (get uuid->uid-map uuid))\n         acc))\n     content\n     uuids)))\n\n(defn update-uid [{:block/keys [uuid content] :as b}\n                  uuid->uid-map]\n  (cond-> b\n    (contains? uuid->uid-map uuid)\n    (assoc :block/uid (get uuid->uid-map uuid))\n\n    (some (fn [id] (str/includes? (str content) (str id))) (keys uuid->uid-map))\n    (update :block/content #(update-content % uuid->uid-map))))\n\n(defn update-todo [{:block/keys [content] :as block}]\n  (if content\n    (update block :block/content\n            (fn [c]\n              (-> c\n                  (str/replace todo-marker-regex \"{{[[TODO]]}}\")\n                  (str/replace done-marker-regex \"{{[[DONE]]}}\")\n                  (str/replace \"{{embed \" \"{{embed: \")\n                  (str/trim))))\n    block))\n\n(defn traverse\n  [keyseq vec-tree]\n  (let [uuid->uid-map (uuid->uid-map)]\n    (walk/postwalk\n     (fn [x]\n       (cond\n         (and (map? x) (contains? x :block/uuid))\n         (-> x\n\n             (update-uid uuid->uid-map)\n\n             (update-todo)\n\n             (s/rename-keys {:block/original-name :page/title\n                             :block/content :block/string})\n\n             (select-keys keyseq))\n\n         :else\n         x))\n     vec-tree)))\n"]}