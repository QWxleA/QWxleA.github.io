{
"version":3,
"file":"module$node_modules$codemirror$addon$mode$overlay.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/codemirror/addon/mode/overlay.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$addon$mode$overlay\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Utility function that allows modes to be combined. The mode given\n// as the base argument takes care of most of the normal mode\n// functionality, but a second (typically simple) mode is used, which\n// can override the style of text. Both modes get to parse all of the\n// text, but when both assign a non-null style to a piece of code, the\n// overlay wins, unless the combine argument was true and not overridden,\n// or state.overlay.combineTokens was true, in which case the styles are\n// combined.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.overlayMode = function(base, overlay, combine) {\n  return {\n    startState: function() {\n      return {\n        base: CodeMirror.startState(base),\n        overlay: CodeMirror.startState(overlay),\n        basePos: 0, baseCur: null,\n        overlayPos: 0, overlayCur: null,\n        streamSeen: null\n      };\n    },\n    copyState: function(state) {\n      return {\n        base: CodeMirror.copyState(base, state.base),\n        overlay: CodeMirror.copyState(overlay, state.overlay),\n        basePos: state.basePos, baseCur: null,\n        overlayPos: state.overlayPos, overlayCur: null\n      };\n    },\n\n    token: function(stream, state) {\n      if (stream != state.streamSeen ||\n          Math.min(state.basePos, state.overlayPos) < stream.start) {\n        state.streamSeen = stream;\n        state.basePos = state.overlayPos = stream.start;\n      }\n\n      if (stream.start == state.basePos) {\n        state.baseCur = base.token(stream, state.base);\n        state.basePos = stream.pos;\n      }\n      if (stream.start == state.overlayPos) {\n        stream.pos = stream.start;\n        state.overlayCur = overlay.token(stream, state.overlay);\n        state.overlayPos = stream.pos;\n      }\n      stream.pos = Math.min(state.basePos, state.overlayPos);\n\n      // state.overlay.combineTokens always takes precedence over combine,\n      // unless set to null\n      if (state.overlayCur == null) return state.baseCur;\n      else if (state.baseCur != null &&\n               state.overlay.combineTokens ||\n               combine && state.overlay.combineTokens == null)\n        return state.baseCur + \" \" + state.overlayCur;\n      else return state.overlayCur;\n    },\n\n    indent: base.indent && function(state, textAfter, line) {\n      return base.indent(state.base, textAfter, line);\n    },\n    electricChars: base.electricChars,\n\n    innerMode: function(state) { return {state: state.base, mode: base}; },\n\n    blankLine: function(state) {\n      var baseToken, overlayToken;\n      if (base.blankLine) baseToken = base.blankLine(state.base);\n      if (overlay.blankLine) overlayToken = overlay.blankLine(state.overlay);\n\n      return overlayToken == null ?\n        baseToken :\n        (combine && baseToken != null ? baseToken + \" \" + overlayToken : overlayToken);\n    }\n  };\n};\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","overlayMode","CodeMirror.overlayMode","base","overlay","combine","startState","basePos","baseCur","overlayPos","overlayCur","streamSeen","copyState","state","token","stream","Math","min","start","pos","combineTokens","indent","textAfter","line","electricChars","innerMode","mode","blankLine","baseToken","overlayToken"]
}
