{
"version":3,
"file":"module$node_modules$jszip$lib$generate$ZipFileWorker.js",
"lineCount":14,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkUjHC,QAASA,cAAa,CAACC,WAAD,CAAcC,OAAd,CAAuBC,QAAvB,CAAiCC,cAAjC,CAAiD,CACnEC,aAAcC,CAAAA,IAAd,CAAmB,IAAnB,CAAyB,eAAzB,CAEA,KAAKC,CAAAA,YAAL,CAAoB,CAEpB,KAAKC,CAAAA,UAAL,CAAkBN,OAElB,KAAKO,CAAAA,WAAL,CAAmBN,QAEnB,KAAKC,CAAAA,cAAL,CAAsBA,cAEtB,KAAKH,CAAAA,WAAL,CAAmBA,WAKnB,KAAKS,CAAAA,UAAL,CAAkB,CAAA,CAElB,KAAKC,CAAAA,aAAL,CAAqB,EAErB,KAAKC,CAAAA,UAAL,CAAkB,EAIlB,KAAKC,CAAAA,YAAL,CAFA,IAAKC,CAAAA,mBAEL,CAF2B,CAK3B,KAAKC,CAAAA,WAAL,CAAmB,IAInB,KAAKC,CAAAA,QAAL,CAAgB,EA/BmD,CA/TvE,IAAIC;AAAQpB,OAAA,CAAQ,qCAAR,CAAZ,CACIQ,cAAgBR,OAAA,CAAQ,oDAAR,CADpB,CAEIqB,KAAOrB,OAAA,CAAQ,oCAAR,CAFX,CAGIsB,MAAQtB,OAAA,CAAQ,qCAAR,CAHZ,CAIIuB,UAAYvB,OAAA,CAAQ,yCAAR,CAJhB,CAaIwB,SAAWA,QAAQ,CAACC,GAAD,CAAMC,KAAN,CAAa,CAAA,IAC5BC,IAAM,EADsB,CAClBC,CACd,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBF,KAAhB,CAAuBE,CAAA,EAAvB,CACID,GACM,EADCE,MAAOC,CAAAA,YAAP,CAAoBL,GAApB,CAA0B,GAA1B,CACD,CAAAA,GAAA,IAAQ,CAElB,OAAOE,IANyB,CAbpC,CA8EII,iBAAmBA,QAAQ,CAACC,UAAD,CAAaC,eAAb,CAA8BC,cAA9B,CAA8CC,MAA9C,CAAsD7B,QAAtD,CAAgEC,cAAhE,CAAgF,CAAA,IACvG6B;AAAOJ,UAAA,CAAA,IADgG,CAE3GK,YAAcL,UAAA,CAAA,WAF6F,CAG3GM,kBAAoB/B,cAApB+B,GAAuCjB,IAAKkB,CAAAA,UAH+D,CAI3GC,gBAAkBpB,KAAMqB,CAAAA,WAAN,CAAkB,QAAlB,CAA4BlC,cAAA,CAAe6B,IAAKM,CAAAA,IAApB,CAA5B,CAJyF,CAK3GC,mBAAqBvB,KAAMqB,CAAAA,WAAN,CAAkB,QAAlB,CAA4BpB,IAAKkB,CAAAA,UAAL,CAAgBH,IAAKM,CAAAA,IAArB,CAA5B,CALsF,CAM3GrC,QAAU+B,IAAK/B,CAAAA,OACfuC,eAAAA,CAAiBxB,KAAMqB,CAAAA,WAAN,CAAkB,QAAlB,CAA4BlC,cAAA,CAAeF,OAAf,CAA5B,CAP0F,KAQ3GwC,kBAAoBzB,KAAMqB,CAAAA,WAAN,CAAkB,QAAlB,CAA4BpB,IAAKkB,CAAAA,UAAL,CAAgBlC,OAAhB,CAA5B,CARuF,CAS3GyC,mBAAqBH,kBAAmBI,CAAAA,MAAxCD,GAAmDV,IAAKM,CAAAA,IAAKK,CAAAA,MAT8C,CAU3GC,kBAAoBH,iBAAkBE,CAAAA,MAAtCC;AAAiD3C,OAAQ0C,CAAAA,MAGzDE,QAAAA,CAAc,EAGdC,KAAAA,QAAMd,IAAKc,CAAAA,GAfX,KAgBAC,KAAOf,IAAKe,CAAAA,IAhBZ,CAoBY,oCAAA,CApBZ,CAqBqB,6CAAA,CArBrB,CAsBuB,+CAAA,CAKvB,IAAI,CAAClB,eAAL,EAAwBC,cAAxB,CACaZ,mCAET,CAFiBU,UAAA,CAAA,KAEjB,CADSoB,4CACT,CAD0BpB,UAAA,CAAA,cAC1B,CAASqB,8CAAT,CAA4BrB,UAAA,CAAA,gBAG5BsB,WAAAA,CAAU,CACVrB,gBAAJ,GAIIqB,UAJJ,EAIe,CAJf,CAMKhB,kBAAL,EAA2BQ,CAAAA,kBAA3B;AAAiDE,CAAAA,iBAAjD,GAEIM,UAFJ,EAEe,IAFf,CAMIC,gBAAAA,CAAc,CAEdL,QAAJ,GAEIK,eAFJ,EAEmB,EAFnB,CAIgB,OAAhB,GAAGjD,QAAH,EACIkD,QACA,CADgB,GAChB,EA9FAC,iBA8FA,CAAiDC,IAAjD,CAA4CtB,IAAKsB,CAAAA,eAAjD,IAzFAD,iBAyFA,CAAkEP,OAzFzD,CAAQ,KAAR,CAAiB,KAyF1B,EAAAK,eAAA,GAvFIE,iBAuFJ,CAvFa,KAuFb,GAvFwB,EAqF5B,GAIID,QACA,CADgB,EAChB,CAAAD,eAAA,GAA2CnB,IAAKuB,CAAAA,cAAhD,EAvEsB,CAuEtB,EAvE4B,EAkEhC,CAaAC,KAAA,CAAUT,IAAKU,CAAAA,WAAL,EAEVD,KAAA,CADUA,IACV,EADqB,CACrB,CAAoBT,IAAKW,CAAAA,aAAL,EAEpBF,KAAA,CADUA,IACV,EADqB,CACrB,CAAoBT,IAAKY,CAAAA,aAAL,EAApB,CAA2C,CAE3CC,QAAA,CAAUb,IAAKc,CAAAA,cAAL,EAAV,CAAkC,IAElCD,QAAA,CADUA,OACV,EADqB,CACrB,CAAqBb,IAAKe,CAAAA,WAAL,EAArB,CAA0C,CAE1CF,QAAA,CADUA,OACV,EADqB,CACrB;AAAoBb,IAAKgB,CAAAA,UAAL,EAEhBrB,mBAAJ,GAUIsB,kBAQA,CANI5C,QAAA,CAAS,CAAT,CAAY,CAAZ,CAMJ,CAJIA,QAAA,CAASF,KAAA,CAAMkB,eAAN,CAAT,CAAiC,CAAjC,CAIJ,CAFIG,kBAEJ,CAAAM,OAAA,EAEI,IAFJ,CAIIzB,QAAA,CAAS4C,kBAAsBrB,CAAAA,MAA/B,CAAuC,CAAvC,CAJJ,CAMIqB,kBAxBR,CA2BGpB,kBAAH,GAEIqB,kBAQA,CANI7C,QAAA,CAAS,CAAT,CAAY,CAAZ,CAMJ,CAJIA,QAAA,CAASF,KAAA,CAAMsB,cAAN,CAAT,CAAgC,CAAhC,CAIJ,CAFIC,iBAEJ,CAAAI,OAAA,EAEI,IAFJ,CAIIzB,QAAA,CAAS6C,kBAAyBtB,CAAAA,MAAlC,CAA0C,CAA1C,CAJJ,CAMIsB,kBAhBR,CAwBAC,mBAAA,CAFAA,QAEA,CAAU9C,QAAA,CAAS8B,UAAT,CAAkB,CAAlB,CAEVgB,mBAAA,EAAUjC,WAAYkC,CAAAA,KAEtBD,mBAAA,EAAU9C,QAAA,CAASoC,IAAT,CAAkB,CAAlB,CAEVU;kBAAA,EAAU9C,QAAA,CAASwC,OAAT,CAAkB,CAAlB,CAEVM,mBAAA,EAAU9C,QAAA,CAAkBF,mCAAlB,CAAyB,CAAzB,CAEVgD,mBAAA,EAAU9C,QAAA,CAAkB4B,4CAAlB,CAAkC,CAAlC,CAEVkB,mBAAA,EAAU9C,QAAA,CAAkB6B,8CAAlB,CAAoC,CAApC,CAEViB,mBAAA,EAAU9C,QAAA,CAASgB,eAAgBO,CAAAA,MAAzB,CAAiC,CAAjC,CAEVuB,mBAAA,EAAU9C,QAAA,CAASyB,OAAYF,CAAAA,MAArB,CAA6B,CAA7B,CAGNyB,YAAAA,CAAajD,SAAUkD,CAAAA,iBAAvBD,CAA2CF,kBAA3CE,CAAoDhC,eAApDgC,CAAsEvB,OAEtEyB,OAAAA,CAAYnD,SAAUoD,CAAAA,mBAAtBD,CAEAlD,QAAA,CAASgC,QAAT;AAAwB,CAAxB,CAFAkB,CAIAJ,kBAJAI,CAMAlD,QAAA,CAASoB,cAAeG,CAAAA,MAAxB,CAAgC,CAAhC,CANA2B,CAQA,kBARAA,CAYAlD,QAAA,CAAS+B,eAAT,CAAsB,CAAtB,CAZAmB,CAcAlD,QAAA,CAASW,MAAT,CAAiB,CAAjB,CAdAuC,CAgBAlC,eAhBAkC,CAkBAzB,OAlBAyB,CAoBA9B,cAEJ,OAAO,CACH4B,WAAYA,WADT,CAEHE,UAAWA,MAFR,CA5KoG,CAkR/GtD,MAAMwD,CAAAA,QAAN,CAAezE,aAAf,CAA8BK,aAA9B,CAKAL,cAAc0E,CAAAA,SAAUC,CAAAA,IAAxB,CAA+BC,QAAS,CAACC,KAAD,CAAQ,CAE5C,IAAIC,mBAAqBD,KAAME,CAAAA,IAAKC,CAAAA,OAAhCF,EAA2C,CAA/C,CACIjE,aAAe,IAAKA,CAAAA,YADxB,CAEIoE,eAAiB,IAAKjE,CAAAA,QAAS4B,CAAAA,MAEhC,KAAKlC,CAAAA,UAAR,CACI,IAAKC,CAAAA,aAAcgE,CAAAA,IAAnB,CAAwBE,KAAxB,CADJ,EAGI,IAAKtE,CAAAA,YAEL,EAFqBsE,KAAMK,CAAAA,IAAKtC,CAAAA,MAEhC,CAAAvC,aAAcqE,CAAAA,SAAUC,CAAAA,IAAKrE,CAAAA,IAA7B,CAAkC,IAAlC;AAAwC,CACpC4E,KAAOL,KAAMK,CAAAA,IADuB,CAEpCH,KAAO,CACHhE,YAAc,IAAKA,CAAAA,WADhB,CAEHiE,QAAUnE,YAAA,EAAgBiE,kBAAhB,CAAqC,GAArC,EAA4CjE,YAA5C,CAA2DoE,cAA3D,CAA4E,CAA5E,GAAkFpE,YAAlF,CAAiG,GAFxG,CAF6B,CAAxC,CALJ,CAN4C,CAyBhDb,cAAc0E,CAAAA,SAAUS,CAAAA,YAAxB,CAAuCC,QAAS,CAACvD,UAAD,CAAa,CACzD,IAAKf,CAAAA,mBAAL,CAA2B,IAAKP,CAAAA,YAChC,KAAKQ,CAAAA,WAAL,CAAmBc,UAAA,CAAA,IAAmBU,CAAAA,IAEtC,KAAIT,gBAAkB,IAAK7B,CAAAA,WAAvB6B,EAAsC,CAACD,UAAA,CAAA,IAAmBkB,CAAAA,GAG3DjB,gBAAH,EACQuD,UACJ,CADazD,gBAAA,CAAiBC,UAAjB,CAA6BC,eAA7B,CAA8C,CAAA,CAA9C,CAAqD,IAAKhB,CAAAA,mBAA1D,CAA+E,IAAKL,CAAAA,WAApF,CAAiG,IAAKL,CAAAA,cAAtG,CACb,CAAA,IAAKuE,CAAAA,IAAL,CAAU,CACNO,KAAOG,UAAOhB,CAAAA,UADR;AAENU,KAAO,CAACC,QAAQ,CAAT,CAFD,CAAV,CAFJ,EAQI,IAAKtE,CAAAA,UART,CAQsB,CAAA,CAfmC,CAuB7DV,cAAc0E,CAAAA,SAAUY,CAAAA,YAAxB,CAAuCC,QAAS,CAAC1D,UAAD,CAAa,CACzD,IAAKnB,CAAAA,UAAL,CAAkB,CAAA,CAClB,KAAIoB,gBAAkB,IAAK7B,CAAAA,WAAvB6B,EAAsC,CAACD,UAAA,CAAA,IAAmBkB,CAAAA,GAA9D,CACIsC,OAASzD,gBAAA,CAAiBC,UAAjB,CAA6BC,eAA7B,CAA8C,CAAA,CAA9C,CAAoD,IAAKhB,CAAAA,mBAAzD,CAA8E,IAAKL,CAAAA,WAAnF,CAAgG,IAAKL,CAAAA,cAArG,CAEb,KAAKQ,CAAAA,UAAW+D,CAAAA,IAAhB,CAAqBU,MAAOd,CAAAA,SAA5B,CACA,IAAGzC,eAAH,CAES6C,eAAL,CAAA,IAAKA,CAAAA,IAAL,CAlHJa,UAkHI,CAlHSpE,SAAUqE,CAAAA,eAkHnB,CAhHApE,QAAA,CAiHmCQ,UAjH1B,CAAA,KAAT,CAA8B,CAA9B,CAgHA,CA9GAR,QAAA,CA+GmCQ,UA/G1B,CAAA,cAAT,CAAuC,CAAvC,CA8GA,CA5GAR,QAAA,CA6GmCQ,UA7G1B,CAAA,gBAAT;AAAyC,CAAzC,CA4GA,CAAK8C,eAAL,CAAA,IAAA,CAAA,IAAA,CAAU,CACNO,KA3GDM,UA0GO,CAENT,KAAO,CAACC,QAAQ,GAAT,CAFD,CAAV,CAFJ,KAaI,KAJA,IAAKL,CAAAA,IAAL,CAAU,CACNO,KAAOG,MAAOhB,CAAAA,UADR,CAENU,KAAO,CAACC,QAAQ,CAAT,CAFD,CAAV,CAIA,CAAM,IAAKrE,CAAAA,aAAciC,CAAAA,MAAzB,CAAA,CACI,IAAK+B,CAAAA,IAAL,CAAU,IAAKhE,CAAAA,aAAc+E,CAAAA,KAAnB,EAAV,CAGR,KAAK3E,CAAAA,WAAL,CAAmB,IAvBsC,CA6B7Df,cAAc0E,CAAAA,SAAUiB,CAAAA,KAAxB,CAAgCC,QAAS,EAAG,CAGxC,IADA,IAAIC,eAAiB,IAAKtF,CAAAA,YAA1B,CACQkB,EAAI,CAAZ,CAAeA,CAAf,CAAmB,IAAKb,CAAAA,UAAWgC,CAAAA,MAAnC,CAA2CnB,CAAA,EAA3C,CACI,IAAKkD,CAAAA,IAAL,CAAU,CACNO,KAAO,IAAKtE,CAAAA,UAAL,CAAgBa,CAAhB,CADD,CAENsD,KAAO,CAACC,QAAQ,GAAT,CAFD,CAAV,CAOqDpC,EAAAA,CAAhBA,IAAKhC,CAAAA,UAAWgC,CAAAA,MAAQkD,KAAAA,iBAF1C,IAAKvF,CAAAA,YAEqCuF,CAFtBD,cAEsBC,CAlL7DrD,eAAiBxB,KAAMqB,CAAAA,WAAN,CAAkB,QAAlB;AAA4B,GAkLmE,IAAKlC,CAAAA,cAlLxE,EAkLkD,IAAKI,CAAAA,UAlLvD,CAA5B,CAGrBuF,eAAA,CAAS3E,SAAU4E,CAAAA,qBAAnB,CAEI,kBAFJ,CAMI3E,QAAA,CAASR,CAAT,CAAuB,CAAvB,CANJ,CAQIQ,QAAA,CAASR,CAAT,CAAuB,CAAvB,CARJ,CAUIQ,QAAA,CAASyE,gBAAT,CAA2B,CAA3B,CAVJ,CAYIzE,QAAA,CAmK+EwE,cAnK/E,CAAyB,CAAzB,CAZJ,CAcIxE,QAAA,CAASoB,cAAeG,CAAAA,MAAxB,CAAgC,CAAhC,CAdJ,CAgBIH,cAiKJ,KAAKkC,CAAAA,IAAL,CAAU,CACNO,KAhKGa,cA+JG,CAENhB,KAAO,CAACC,QAAQ,GAAT,CAFD,CAAV,CAbwC,CAsB5ChF,cAAc0E,CAAAA,SAAUuB,CAAAA,iBAAxB,CAA4CC,QAAS,EAAG,CACpD,IAAKC,CAAAA,QAAL,CAAgB,IAAKnF,CAAAA,QAAS0E,CAAAA,KAAd,EAChB,KAAKP,CAAAA,YAAL,CAAkB,IAAKgB,CAAAA,QAAStE,CAAAA,UAAhC,CACI,KAAKuE,CAAAA,QAAT,CACI,IAAKD,CAAAA,QAASE,CAAAA,KAAd,EADJ,CAGI,IAAKF,CAAAA,QAASG,CAAAA,MAAd,EANgD,CAaxDtG,cAAc0E,CAAAA,SAAU6B,CAAAA,gBAAxB;AAA2CC,QAAS,CAACL,QAAD,CAAW,CAC3D,IAAKnF,CAAAA,QAAS2D,CAAAA,IAAd,CAAmBwB,QAAnB,CACA,KAAIM,KAAO,IAEXN,SAASO,CAAAA,EAAT,CAAY,MAAZ,CAAoB,QAAS,CAAC7B,KAAD,CAAQ,CACjC4B,IAAKE,CAAAA,YAAL,CAAkB9B,KAAlB,CADiC,CAArC,CAGAsB,SAASO,CAAAA,EAAT,CAAY,KAAZ,CAAmB,QAAS,EAAG,CAC3BD,IAAKnB,CAAAA,YAAL,CAAkBmB,IAAKN,CAAAA,QAAStE,CAAAA,UAAhC,CACG4E,KAAKzF,CAAAA,QAAS4B,CAAAA,MAAjB,CACI6D,IAAKR,CAAAA,iBAAL,EADJ,CAGIQ,IAAKG,CAAAA,GAAL,EALuB,CAA/B,CAQAT,SAASO,CAAAA,EAAT,CAAY,OAAZ,CAAqB,QAAS,CAACG,CAAD,CAAI,CAC9BJ,IAAKK,CAAAA,KAAL,CAAWD,CAAX,CAD8B,CAAlC,CAGA,OAAO,KAlBoD,CAwB/D7G,cAAc0E,CAAAA,SAAU4B,CAAAA,MAAxB,CAAiCS,QAAS,EAAG,CACzC,GAAG,CAAC1G,aAAcqE,CAAAA,SAAU4B,CAAAA,MAAOhG,CAAAA,IAA/B,CAAoC,IAApC,CAAJ,CACI,MAAO,CAAA,CAGX,IAAI,CAAC,IAAK6F,CAAAA,QAAV,EAAsB,IAAKnF,CAAAA,QAAS4B,CAAAA,MAApC,CAEI,MADA,KAAKqD,CAAAA,iBAAL,EACO,CAAA,CAAA,CAEX,IAAI,CAAC,IAAKE,CAAAA,QAAV;AAAsB,CAAC,IAAKnF,CAAAA,QAAS4B,CAAAA,MAArC,EAA+C,CAAC,IAAKoE,CAAAA,cAArD,CAEI,MADA,KAAKJ,CAAAA,GAAL,EACO,CAAA,CAAA,CAX8B,CAkB7C5G,cAAc0E,CAAAA,SAAUoC,CAAAA,KAAxB,CAAgCG,QAAS,CAACJ,UAAD,CAAI,CACzC,IAAIK,QAAU,IAAKlG,CAAAA,QACnB,IAAG,CAACX,aAAcqE,CAAAA,SAAUoC,CAAAA,KAAMxG,CAAAA,IAA9B,CAAmC,IAAnC,CAAyCuG,UAAzC,CAAJ,CACI,MAAO,CAAA,CAEX,KAAI,IAAIpF,EAAI,CAAZ,CAAeA,CAAf,CAAmByF,OAAQtE,CAAAA,MAA3B,CAAmCnB,CAAA,EAAnC,CACI,GAAI,CACAyF,OAAA,CAAQzF,CAAR,CAAWqF,CAAAA,KAAX,CAAiBD,UAAjB,CADA,CAEF,MAAMA,CAAN,CAAS,EAIf,MAAO,CAAA,CAZkC,CAkB7C7G,cAAc0E,CAAAA,SAAUyC,CAAAA,IAAxB,CAA+BC,QAAS,EAAG,CACvC/G,aAAcqE,CAAAA,SAAUyC,CAAAA,IAAK7G,CAAAA,IAA7B,CAAkC,IAAlC,CAEA,KADA,IAAI4G,QAAU,IAAKlG,CAAAA,QAAnB,CACQS,EAAI,CAAZ,CAAeA,CAAf,CAAmByF,OAAQtE,CAAAA,MAA3B,CAAmCnB,CAAA,EAAnC,CACIyF,OAAA,CAAQzF,CAAR,CAAW0F,CAAAA,IAAX,EAJmC,CAQ3CrH,OAAOC,CAAAA,OAAP,CAAiBC,aA5hBgG;",
"sources":["node_modules/jszip/lib/generate/ZipFileWorker.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$generate$ZipFileWorker\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('../utils');\nvar GenericWorker = require('../stream/GenericWorker');\nvar utf8 = require('../utf8');\nvar crc32 = require('../crc32');\nvar signature = require('../signature');\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nvar decToHex = function(dec, bytes) {\n    var hex = \"\", i;\n    for (i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(dec & 0xff);\n        dec = dec >>> 8;\n    }\n    return hex;\n};\n\n/**\n * Generate the UNIX part of the external file attributes.\n * @param {Object} unixPermissions the unix permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n *\n * TTTTsstrwxrwxrwx0000000000ADVSHR\n * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n *     ^^^_________________________ setuid, setgid, sticky\n *        ^^^^^^^^^________________ permissions\n *                 ^^^^^^^^^^______ not used ?\n *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n */\nvar generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n\n    var result = unixPermissions;\n    if (!unixPermissions) {\n        // I can't use octal values in strict mode, hence the hexa.\n        //  040775 => 0x41fd\n        // 0100664 => 0x81b4\n        result = isDir ? 0x41fd : 0x81b4;\n    }\n    return (result & 0xFFFF) << 16;\n};\n\n/**\n * Generate the DOS part of the external file attributes.\n * @param {Object} dosPermissions the dos permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * Bit 0     Read-Only\n * Bit 1     Hidden\n * Bit 2     System\n * Bit 3     Volume Label\n * Bit 4     Directory\n * Bit 5     Archive\n */\nvar generateDosExternalFileAttr = function (dosPermissions, isDir) {\n\n    // the dir flag is already set for compatibility\n    return (dosPermissions || 0)  & 0x3F;\n};\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {Object} streamInfo the hash with information about the compressed file.\n * @param {Boolean} streamedContent is the content streamed ?\n * @param {Boolean} streamingEnded is the stream finished ?\n * @param {number} offset the current offset from the start of the zip file.\n * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n * @param {Function} encodeFileName the function to encode the file name / comment.\n * @return {Object} the zip parts.\n */\nvar generateZipParts = function(streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {\n    var file = streamInfo['file'],\n    compression = streamInfo['compression'],\n    useCustomEncoding = encodeFileName !== utf8.utf8encode,\n    encodedFileName = utils.transformTo(\"string\", encodeFileName(file.name)),\n    utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n    comment = file.comment,\n    encodedComment = utils.transformTo(\"string\", encodeFileName(comment)),\n    utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n    useUTF8ForComment = utfEncodedComment.length !== comment.length,\n    dosTime,\n    dosDate,\n    extraFields = \"\",\n    unicodePathExtraField = \"\",\n    unicodeCommentExtraField = \"\",\n    dir = file.dir,\n    date = file.date;\n\n\n    var dataInfo = {\n        crc32 : 0,\n        compressedSize : 0,\n        uncompressedSize : 0\n    };\n\n    // if the content is streamed, the sizes/crc32 are only available AFTER\n    // the end of the stream.\n    if (!streamedContent || streamingEnded) {\n        dataInfo.crc32 = streamInfo['crc32'];\n        dataInfo.compressedSize = streamInfo['compressedSize'];\n        dataInfo.uncompressedSize = streamInfo['uncompressedSize'];\n    }\n\n    var bitflag = 0;\n    if (streamedContent) {\n        // Bit 3: the sizes/crc32 are set to zero in the local header.\n        // The correct values are put in the data descriptor immediately\n        // following the compressed data.\n        bitflag |= 0x0008;\n    }\n    if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {\n        // Bit 11: Language encoding flag (EFS).\n        bitflag |= 0x0800;\n    }\n\n\n    var extFileAttr = 0;\n    var versionMadeBy = 0;\n    if (dir) {\n        // dos or unix, we set the dos dir flag\n        extFileAttr |= 0x00010;\n    }\n    if(platform === \"UNIX\") {\n        versionMadeBy = 0x031E; // UNIX, version 3.0\n        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n    } else { // DOS or other, fallback to DOS\n        versionMadeBy = 0x0014; // DOS, version 2.0\n        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n    }\n\n    // date\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n    dosTime = date.getUTCHours();\n    dosTime = dosTime << 6;\n    dosTime = dosTime | date.getUTCMinutes();\n    dosTime = dosTime << 5;\n    dosTime = dosTime | date.getUTCSeconds() / 2;\n\n    dosDate = date.getUTCFullYear() - 1980;\n    dosDate = dosDate << 4;\n    dosDate = dosDate | (date.getUTCMonth() + 1);\n    dosDate = dosDate << 5;\n    dosDate = dosDate | date.getUTCDate();\n\n    if (useUTF8ForFileName) {\n        // set the unicode path extra field. unzip needs at least one extra\n        // field to correctly handle unicode path, so using the path is as good\n        // as any other information. This could improve the situation with\n        // other archive managers too.\n        // This field is usually used without the utf8 flag, with a non\n        // unicode path in the header (winrar, winzip). This helps (a bit)\n        // with the messy Windows' default compressed folders feature but\n        // breaks on p7zip which doesn't seek the unicode path extra field.\n        // So for now, UTF-8 everywhere !\n        unicodePathExtraField =\n            // Version\n            decToHex(1, 1) +\n            // NameCRC32\n            decToHex(crc32(encodedFileName), 4) +\n            // UnicodeName\n            utfEncodedFileName;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x70\" +\n            // size\n            decToHex(unicodePathExtraField.length, 2) +\n            // content\n            unicodePathExtraField;\n    }\n\n    if(useUTF8ForComment) {\n\n        unicodeCommentExtraField =\n            // Version\n            decToHex(1, 1) +\n            // CommentCRC32\n            decToHex(crc32(encodedComment), 4) +\n            // UnicodeName\n            utfEncodedComment;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x63\" +\n            // size\n            decToHex(unicodeCommentExtraField.length, 2) +\n            // content\n            unicodeCommentExtraField;\n    }\n\n    var header = \"\";\n\n    // version needed to extract\n    header += \"\\x0A\\x00\";\n    // general purpose bit flag\n    header += decToHex(bitflag, 2);\n    // compression method\n    header += compression.magic;\n    // last mod file time\n    header += decToHex(dosTime, 2);\n    // last mod file date\n    header += decToHex(dosDate, 2);\n    // crc-32\n    header += decToHex(dataInfo.crc32, 4);\n    // compressed size\n    header += decToHex(dataInfo.compressedSize, 4);\n    // uncompressed size\n    header += decToHex(dataInfo.uncompressedSize, 4);\n    // file name length\n    header += decToHex(encodedFileName.length, 2);\n    // extra field length\n    header += decToHex(extraFields.length, 2);\n\n\n    var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;\n\n    var dirRecord = signature.CENTRAL_FILE_HEADER +\n        // version made by (00: DOS)\n        decToHex(versionMadeBy, 2) +\n        // file header (common to file and central directory)\n        header +\n        // file comment length\n        decToHex(encodedComment.length, 2) +\n        // disk number start\n        \"\\x00\\x00\" +\n        // internal file attributes TODO\n        \"\\x00\\x00\" +\n        // external file attributes\n        decToHex(extFileAttr, 4) +\n        // relative offset of local header\n        decToHex(offset, 4) +\n        // file name\n        encodedFileName +\n        // extra field\n        extraFields +\n        // file comment\n        encodedComment;\n\n    return {\n        fileRecord: fileRecord,\n        dirRecord: dirRecord\n    };\n};\n\n/**\n * Generate the EOCD record.\n * @param {Number} entriesCount the number of entries in the zip file.\n * @param {Number} centralDirLength the length (in bytes) of the central dir.\n * @param {Number} localDirLength the length (in bytes) of the local dir.\n * @param {String} comment the zip file comment as a binary string.\n * @param {Function} encodeFileName the function to encode the comment.\n * @return {String} the EOCD record.\n */\nvar generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {\n    var dirEnd = \"\";\n    var encodedComment = utils.transformTo(\"string\", encodeFileName(comment));\n\n    // end of central dir signature\n    dirEnd = signature.CENTRAL_DIRECTORY_END +\n        // number of this disk\n        \"\\x00\\x00\" +\n        // number of the disk with the start of the central directory\n        \"\\x00\\x00\" +\n        // total number of entries in the central directory on this disk\n        decToHex(entriesCount, 2) +\n        // total number of entries in the central directory\n        decToHex(entriesCount, 2) +\n        // size of the central directory   4 bytes\n        decToHex(centralDirLength, 4) +\n        // offset of start of central directory with respect to the starting disk number\n        decToHex(localDirLength, 4) +\n        // .ZIP file comment length\n        decToHex(encodedComment.length, 2) +\n        // .ZIP file comment\n        encodedComment;\n\n    return dirEnd;\n};\n\n/**\n * Generate data descriptors for a file entry.\n * @param {Object} streamInfo the hash generated by a worker, containing information\n * on the file entry.\n * @return {String} the data descriptors.\n */\nvar generateDataDescriptors = function (streamInfo) {\n    var descriptor = \"\";\n    descriptor = signature.DATA_DESCRIPTOR +\n        // crc-32                          4 bytes\n        decToHex(streamInfo['crc32'], 4) +\n        // compressed size                 4 bytes\n        decToHex(streamInfo['compressedSize'], 4) +\n        // uncompressed size               4 bytes\n        decToHex(streamInfo['uncompressedSize'], 4);\n\n    return descriptor;\n};\n\n\n/**\n * A worker to concatenate other workers to create a zip file.\n * @param {Boolean} streamFiles `true` to stream the content of the files,\n * `false` to accumulate it.\n * @param {String} comment the comment to use.\n * @param {String} platform the platform to use, \"UNIX\" or \"DOS\".\n * @param {Function} encodeFileName the function to encode file names and comments.\n */\nfunction ZipFileWorker(streamFiles, comment, platform, encodeFileName) {\n    GenericWorker.call(this, \"ZipFileWorker\");\n    // The number of bytes written so far. This doesn't count accumulated chunks.\n    this.bytesWritten = 0;\n    // The comment of the zip file\n    this.zipComment = comment;\n    // The platform \"generating\" the zip file.\n    this.zipPlatform = platform;\n    // the function to encode file names and comments.\n    this.encodeFileName = encodeFileName;\n    // Should we stream the content of the files ?\n    this.streamFiles = streamFiles;\n    // If `streamFiles` is false, we will need to accumulate the content of the\n    // files to calculate sizes / crc32 (and write them *before* the content).\n    // This boolean indicates if we are accumulating chunks (it will change a lot\n    // during the lifetime of this worker).\n    this.accumulate = false;\n    // The buffer receiving chunks when accumulating content.\n    this.contentBuffer = [];\n    // The list of generated directory records.\n    this.dirRecords = [];\n    // The offset (in bytes) from the beginning of the zip file for the current source.\n    this.currentSourceOffset = 0;\n    // The total number of entries in this zip file.\n    this.entriesCount = 0;\n    // the name of the file currently being added, null when handling the end of the zip file.\n    // Used for the emitted metadata.\n    this.currentFile = null;\n\n\n\n    this._sources = [];\n}\nutils.inherits(ZipFileWorker, GenericWorker);\n\n/**\n * @see GenericWorker.push\n */\nZipFileWorker.prototype.push = function (chunk) {\n\n    var currentFilePercent = chunk.meta.percent || 0;\n    var entriesCount = this.entriesCount;\n    var remainingFiles = this._sources.length;\n\n    if(this.accumulate) {\n        this.contentBuffer.push(chunk);\n    } else {\n        this.bytesWritten += chunk.data.length;\n\n        GenericWorker.prototype.push.call(this, {\n            data : chunk.data,\n            meta : {\n                currentFile : this.currentFile,\n                percent : entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100\n            }\n        });\n    }\n};\n\n/**\n * The worker started a new source (an other worker).\n * @param {Object} streamInfo the streamInfo object from the new source.\n */\nZipFileWorker.prototype.openedSource = function (streamInfo) {\n    this.currentSourceOffset = this.bytesWritten;\n    this.currentFile = streamInfo['file'].name;\n\n    var streamedContent = this.streamFiles && !streamInfo['file'].dir;\n\n    // don't stream folders (because they don't have any content)\n    if(streamedContent) {\n        var record = generateZipParts(streamInfo, streamedContent, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n        this.push({\n            data : record.fileRecord,\n            meta : {percent:0}\n        });\n    } else {\n        // we need to wait for the whole file before pushing anything\n        this.accumulate = true;\n    }\n};\n\n/**\n * The worker finished a source (an other worker).\n * @param {Object} streamInfo the streamInfo object from the finished source.\n */\nZipFileWorker.prototype.closedSource = function (streamInfo) {\n    this.accumulate = false;\n    var streamedContent = this.streamFiles && !streamInfo['file'].dir;\n    var record = generateZipParts(streamInfo, streamedContent, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);\n\n    this.dirRecords.push(record.dirRecord);\n    if(streamedContent) {\n        // after the streamed file, we put data descriptors\n        this.push({\n            data : generateDataDescriptors(streamInfo),\n            meta : {percent:100}\n        });\n    } else {\n        // the content wasn't streamed, we need to push everything now\n        // first the file record, then the content\n        this.push({\n            data : record.fileRecord,\n            meta : {percent:0}\n        });\n        while(this.contentBuffer.length) {\n            this.push(this.contentBuffer.shift());\n        }\n    }\n    this.currentFile = null;\n};\n\n/**\n * @see GenericWorker.flush\n */\nZipFileWorker.prototype.flush = function () {\n\n    var localDirLength = this.bytesWritten;\n    for(var i = 0; i < this.dirRecords.length; i++) {\n        this.push({\n            data : this.dirRecords[i],\n            meta : {percent:100}\n        });\n    }\n    var centralDirLength = this.bytesWritten - localDirLength;\n\n    var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);\n\n    this.push({\n        data : dirEnd,\n        meta : {percent:100}\n    });\n};\n\n/**\n * Prepare the next source to be read.\n */\nZipFileWorker.prototype.prepareNextSource = function () {\n    this.previous = this._sources.shift();\n    this.openedSource(this.previous.streamInfo);\n    if (this.isPaused) {\n        this.previous.pause();\n    } else {\n        this.previous.resume();\n    }\n};\n\n/**\n * @see GenericWorker.registerPrevious\n */\nZipFileWorker.prototype.registerPrevious = function (previous) {\n    this._sources.push(previous);\n    var self = this;\n\n    previous.on('data', function (chunk) {\n        self.processChunk(chunk);\n    });\n    previous.on('end', function () {\n        self.closedSource(self.previous.streamInfo);\n        if(self._sources.length) {\n            self.prepareNextSource();\n        } else {\n            self.end();\n        }\n    });\n    previous.on('error', function (e) {\n        self.error(e);\n    });\n    return this;\n};\n\n/**\n * @see GenericWorker.resume\n */\nZipFileWorker.prototype.resume = function () {\n    if(!GenericWorker.prototype.resume.call(this)) {\n        return false;\n    }\n\n    if (!this.previous && this._sources.length) {\n        this.prepareNextSource();\n        return true;\n    }\n    if (!this.previous && !this._sources.length && !this.generatedError) {\n        this.end();\n        return true;\n    }\n};\n\n/**\n * @see GenericWorker.error\n */\nZipFileWorker.prototype.error = function (e) {\n    var sources = this._sources;\n    if(!GenericWorker.prototype.error.call(this, e)) {\n        return false;\n    }\n    for(var i = 0; i < sources.length; i++) {\n        try {\n            sources[i].error(e);\n        } catch(e) {\n            // the `error` exploded, nothing to do\n        }\n    }\n    return true;\n};\n\n/**\n * @see GenericWorker.lock\n */\nZipFileWorker.prototype.lock = function () {\n    GenericWorker.prototype.lock.call(this);\n    var sources = this._sources;\n    for(var i = 0; i < sources.length; i++) {\n        sources[i].lock();\n    }\n};\n\nmodule.exports = ZipFileWorker;\n\n};"],
"names":["shadow$provide","global","require","module","exports","ZipFileWorker","streamFiles","comment","platform","encodeFileName","GenericWorker","call","bytesWritten","zipComment","zipPlatform","accumulate","contentBuffer","dirRecords","entriesCount","currentSourceOffset","currentFile","_sources","utils","utf8","crc32","signature","decToHex","dec","bytes","hex","i","String","fromCharCode","generateZipParts","streamInfo","streamedContent","streamingEnded","offset","file","compression","useCustomEncoding","utf8encode","encodedFileName","transformTo","name","utfEncodedFileName","encodedComment","utfEncodedComment","useUTF8ForFileName","length","useUTF8ForComment","extraFields","dir","date","compressedSize","uncompressedSize","bitflag","extFileAttr","versionMadeBy","result","unixPermissions","dosPermissions","dosTime","getUTCHours","getUTCMinutes","getUTCSeconds","dosDate","getUTCFullYear","getUTCMonth","getUTCDate","unicodePathExtraField","unicodeCommentExtraField","header","magic","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","inherits","prototype","push","ZipFileWorker.prototype.push","chunk","currentFilePercent","meta","percent","remainingFiles","data","openedSource","ZipFileWorker.prototype.openedSource","record","closedSource","ZipFileWorker.prototype.closedSource","descriptor","DATA_DESCRIPTOR","shift","flush","ZipFileWorker.prototype.flush","localDirLength","centralDirLength","dirEnd","CENTRAL_DIRECTORY_END","prepareNextSource","ZipFileWorker.prototype.prepareNextSource","previous","isPaused","pause","resume","registerPrevious","ZipFileWorker.prototype.registerPrevious","self","on","processChunk","end","e","error","ZipFileWorker.prototype.resume","generatedError","ZipFileWorker.prototype.error","sources","lock","ZipFileWorker.prototype.lock"]
}
