{
"version":3,
"file":"module$node_modules$codemirror$mode$http$http.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/codemirror/mode/http/http.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$http$http\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"http\", function() {\n  function failFirstLine(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return \"error\";\n  }\n\n  function start(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n      state.cur = responseStatusCode;\n      return \"keyword\";\n    } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n      state.cur = requestPath;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function responseStatusCode(stream, state) {\n    var code = stream.match(/^\\d+/);\n    if (!code) return failFirstLine(stream, state);\n\n    state.cur = responseStatusText;\n    var status = Number(code[0]);\n    if (status >= 100 && status < 200) {\n      return \"positive informational\";\n    } else if (status >= 200 && status < 300) {\n      return \"positive success\";\n    } else if (status >= 300 && status < 400) {\n      return \"positive redirect\";\n    } else if (status >= 400 && status < 500) {\n      return \"negative client-error\";\n    } else if (status >= 500 && status < 600) {\n      return \"negative server-error\";\n    } else {\n      return \"error\";\n    }\n  }\n\n  function responseStatusText(stream, state) {\n    stream.skipToEnd();\n    state.cur = header;\n    return null;\n  }\n\n  function requestPath(stream, state) {\n    stream.eatWhile(/\\S/);\n    state.cur = requestProtocol;\n    return \"string-2\";\n  }\n\n  function requestProtocol(stream, state) {\n    if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n      state.cur = header;\n      return \"keyword\";\n    } else {\n      return failFirstLine(stream, state);\n    }\n  }\n\n  function header(stream) {\n    if (stream.sol() && !stream.eat(/[ \\t]/)) {\n      if (stream.match(/^.*?:/)) {\n        return \"atom\";\n      } else {\n        stream.skipToEnd();\n        return \"error\";\n      }\n    } else {\n      stream.skipToEnd();\n      return \"string\";\n    }\n  }\n\n  function body(stream) {\n    stream.skipToEnd();\n    return null;\n  }\n\n  return {\n    token: function(stream, state) {\n      var cur = state.cur;\n      if (cur != header && cur != body && stream.eatSpace()) return null;\n      return cur(stream, state);\n    },\n\n    blankLine: function(state) {\n      state.cur = body;\n    },\n\n    startState: function() {\n      return {cur: start};\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"message/http\", \"http\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","failFirstLine","stream","state","skipToEnd","cur","header","start","match","responseStatusCode","test","peek","requestPath","code","responseStatusText","status","Number","eatWhile","requestProtocol","sol","eat","body","token","eatSpace","blankLine","startState","defineMIME"]
}
