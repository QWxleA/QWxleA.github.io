{
"version":3,
"file":"module$node_modules$codemirror$mode$perl$perl.js",
"lineCount":25,
"mappings":"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",
"sources":["node_modules/codemirror/mode/perl/perl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$perl$perl\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// CodeMirror2 mode/perl/perl.js (text/x-perl) beta 0.10 (2011-11-08)\n// This is a part of CodeMirror from https://github.com/sabaca/CodeMirror_mode_perl (mail@sabaca.com)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"perl\",function(){\n        // http://perldoc.perl.org\n        var PERL={                                      //   null - magic touch\n                                                        //   1 - keyword\n                                                        //   2 - def\n                                                        //   3 - atom\n                                                        //   4 - operator\n                                                        //   5 - variable-2 (predefined)\n                                                        //   [x,y] - x=1,2,3; y=must be defined if x{...}\n                                                //      PERL operators\n                '->'                            :   4,\n                '++'                            :   4,\n                '--'                            :   4,\n                '**'                            :   4,\n                                                        //   ! ~ \\ and unary + and -\n                '=~'                            :   4,\n                '!~'                            :   4,\n                '*'                             :   4,\n                '/'                             :   4,\n                '%'                             :   4,\n                'x'                             :   4,\n                '+'                             :   4,\n                '-'                             :   4,\n                '.'                             :   4,\n                '<<'                            :   4,\n                '>>'                            :   4,\n                                                        //   named unary operators\n                '<'                             :   4,\n                '>'                             :   4,\n                '<='                            :   4,\n                '>='                            :   4,\n                'lt'                            :   4,\n                'gt'                            :   4,\n                'le'                            :   4,\n                'ge'                            :   4,\n                '=='                            :   4,\n                '!='                            :   4,\n                '<=>'                           :   4,\n                'eq'                            :   4,\n                'ne'                            :   4,\n                'cmp'                           :   4,\n                '~~'                            :   4,\n                '&'                             :   4,\n                '|'                             :   4,\n                '^'                             :   4,\n                '&&'                            :   4,\n                '||'                            :   4,\n                '//'                            :   4,\n                '..'                            :   4,\n                '...'                           :   4,\n                '?'                             :   4,\n                ':'                             :   4,\n                '='                             :   4,\n                '+='                            :   4,\n                '-='                            :   4,\n                '*='                            :   4,  //   etc. ???\n                ','                             :   4,\n                '=>'                            :   4,\n                '::'                            :   4,\n                                                        //   list operators (rightward)\n                'not'                           :   4,\n                'and'                           :   4,\n                'or'                            :   4,\n                'xor'                           :   4,\n                                                //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)\n                'BEGIN'                         :   [5,1],\n                'END'                           :   [5,1],\n                'PRINT'                         :   [5,1],\n                'PRINTF'                        :   [5,1],\n                'GETC'                          :   [5,1],\n                'READ'                          :   [5,1],\n                'READLINE'                      :   [5,1],\n                'DESTROY'                       :   [5,1],\n                'TIE'                           :   [5,1],\n                'TIEHANDLE'                     :   [5,1],\n                'UNTIE'                         :   [5,1],\n                'STDIN'                         :    5,\n                'STDIN_TOP'                     :    5,\n                'STDOUT'                        :    5,\n                'STDOUT_TOP'                    :    5,\n                'STDERR'                        :    5,\n                'STDERR_TOP'                    :    5,\n                '$ARG'                          :    5,\n                '$_'                            :    5,\n                '@ARG'                          :    5,\n                '@_'                            :    5,\n                '$LIST_SEPARATOR'               :    5,\n                '$\"'                            :    5,\n                '$PROCESS_ID'                   :    5,\n                '$PID'                          :    5,\n                '$$'                            :    5,\n                '$REAL_GROUP_ID'                :    5,\n                '$GID'                          :    5,\n                '$('                            :    5,\n                '$EFFECTIVE_GROUP_ID'           :    5,\n                '$EGID'                         :    5,\n                '$)'                            :    5,\n                '$PROGRAM_NAME'                 :    5,\n                '$0'                            :    5,\n                '$SUBSCRIPT_SEPARATOR'          :    5,\n                '$SUBSEP'                       :    5,\n                '$;'                            :    5,\n                '$REAL_USER_ID'                 :    5,\n                '$UID'                          :    5,\n                '$<'                            :    5,\n                '$EFFECTIVE_USER_ID'            :    5,\n                '$EUID'                         :    5,\n                '$>'                            :    5,\n                '$a'                            :    5,\n                '$b'                            :    5,\n                '$COMPILING'                    :    5,\n                '$^C'                           :    5,\n                '$DEBUGGING'                    :    5,\n                '$^D'                           :    5,\n                '${^ENCODING}'                  :    5,\n                '$ENV'                          :    5,\n                '%ENV'                          :    5,\n                '$SYSTEM_FD_MAX'                :    5,\n                '$^F'                           :    5,\n                '@F'                            :    5,\n                '${^GLOBAL_PHASE}'              :    5,\n                '$^H'                           :    5,\n                '%^H'                           :    5,\n                '@INC'                          :    5,\n                '%INC'                          :    5,\n                '$INPLACE_EDIT'                 :    5,\n                '$^I'                           :    5,\n                '$^M'                           :    5,\n                '$OSNAME'                       :    5,\n                '$^O'                           :    5,\n                '${^OPEN}'                      :    5,\n                '$PERLDB'                       :    5,\n                '$^P'                           :    5,\n                '$SIG'                          :    5,\n                '%SIG'                          :    5,\n                '$BASETIME'                     :    5,\n                '$^T'                           :    5,\n                '${^TAINT}'                     :    5,\n                '${^UNICODE}'                   :    5,\n                '${^UTF8CACHE}'                 :    5,\n                '${^UTF8LOCALE}'                :    5,\n                '$PERL_VERSION'                 :    5,\n                '$^V'                           :    5,\n                '${^WIN32_SLOPPY_STAT}'         :    5,\n                '$EXECUTABLE_NAME'              :    5,\n                '$^X'                           :    5,\n                '$1'                            :    5, // - regexp $1, $2...\n                '$MATCH'                        :    5,\n                '$&'                            :    5,\n                '${^MATCH}'                     :    5,\n                '$PREMATCH'                     :    5,\n                '$`'                            :    5,\n                '${^PREMATCH}'                  :    5,\n                '$POSTMATCH'                    :    5,\n                \"$'\"                            :    5,\n                '${^POSTMATCH}'                 :    5,\n                '$LAST_PAREN_MATCH'             :    5,\n                '$+'                            :    5,\n                '$LAST_SUBMATCH_RESULT'         :    5,\n                '$^N'                           :    5,\n                '@LAST_MATCH_END'               :    5,\n                '@+'                            :    5,\n                '%LAST_PAREN_MATCH'             :    5,\n                '%+'                            :    5,\n                '@LAST_MATCH_START'             :    5,\n                '@-'                            :    5,\n                '%LAST_MATCH_START'             :    5,\n                '%-'                            :    5,\n                '$LAST_REGEXP_CODE_RESULT'      :    5,\n                '$^R'                           :    5,\n                '${^RE_DEBUG_FLAGS}'            :    5,\n                '${^RE_TRIE_MAXBUF}'            :    5,\n                '$ARGV'                         :    5,\n                '@ARGV'                         :    5,\n                'ARGV'                          :    5,\n                'ARGVOUT'                       :    5,\n                '$OUTPUT_FIELD_SEPARATOR'       :    5,\n                '$OFS'                          :    5,\n                '$,'                            :    5,\n                '$INPUT_LINE_NUMBER'            :    5,\n                '$NR'                           :    5,\n                '$.'                            :    5,\n                '$INPUT_RECORD_SEPARATOR'       :    5,\n                '$RS'                           :    5,\n                '$/'                            :    5,\n                '$OUTPUT_RECORD_SEPARATOR'      :    5,\n                '$ORS'                          :    5,\n                '$\\\\'                           :    5,\n                '$OUTPUT_AUTOFLUSH'             :    5,\n                '$|'                            :    5,\n                '$ACCUMULATOR'                  :    5,\n                '$^A'                           :    5,\n                '$FORMAT_FORMFEED'              :    5,\n                '$^L'                           :    5,\n                '$FORMAT_PAGE_NUMBER'           :    5,\n                '$%'                            :    5,\n                '$FORMAT_LINES_LEFT'            :    5,\n                '$-'                            :    5,\n                '$FORMAT_LINE_BREAK_CHARACTERS' :    5,\n                '$:'                            :    5,\n                '$FORMAT_LINES_PER_PAGE'        :    5,\n                '$='                            :    5,\n                '$FORMAT_TOP_NAME'              :    5,\n                '$^'                            :    5,\n                '$FORMAT_NAME'                  :    5,\n                '$~'                            :    5,\n                '${^CHILD_ERROR_NATIVE}'        :    5,\n                '$EXTENDED_OS_ERROR'            :    5,\n                '$^E'                           :    5,\n                '$EXCEPTIONS_BEING_CAUGHT'      :    5,\n                '$^S'                           :    5,\n                '$WARNING'                      :    5,\n                '$^W'                           :    5,\n                '${^WARNING_BITS}'              :    5,\n                '$OS_ERROR'                     :    5,\n                '$ERRNO'                        :    5,\n                '$!'                            :    5,\n                '%OS_ERROR'                     :    5,\n                '%ERRNO'                        :    5,\n                '%!'                            :    5,\n                '$CHILD_ERROR'                  :    5,\n                '$?'                            :    5,\n                '$EVAL_ERROR'                   :    5,\n                '$@'                            :    5,\n                '$OFMT'                         :    5,\n                '$#'                            :    5,\n                '$*'                            :    5,\n                '$ARRAY_BASE'                   :    5,\n                '$['                            :    5,\n                '$OLD_PERL_VERSION'             :    5,\n                '$]'                            :    5,\n                                                //      PERL blocks\n                'if'                            :[1,1],\n                elsif                           :[1,1],\n                'else'                          :[1,1],\n                'while'                         :[1,1],\n                unless                          :[1,1],\n                'for'                           :[1,1],\n                foreach                         :[1,1],\n                                                //      PERL functions\n                'abs'                           :1,     // - absolute value function\n                accept                          :1,     // - accept an incoming socket connect\n                alarm                           :1,     // - schedule a SIGALRM\n                'atan2'                         :1,     // - arctangent of Y/X in the range -PI to PI\n                bind                            :1,     // - binds an address to a socket\n                binmode                         :1,     // - prepare binary files for I/O\n                bless                           :1,     // - create an object\n                bootstrap                       :1,     //\n                'break'                         :1,     // - break out of a \"given\" block\n                caller                          :1,     // - get context of the current subroutine call\n                chdir                           :1,     // - change your current working directory\n                chmod                           :1,     // - changes the permissions on a list of files\n                chomp                           :1,     // - remove a trailing record separator from a string\n                chop                            :1,     // - remove the last character from a string\n                chown                           :1,     // - change the ownership on a list of files\n                chr                             :1,     // - get character this number represents\n                chroot                          :1,     // - make directory new root for path lookups\n                close                           :1,     // - close file (or pipe or socket) handle\n                closedir                        :1,     // - close directory handle\n                connect                         :1,     // - connect to a remote socket\n                'continue'                      :[1,1], // - optional trailing block in a while or foreach\n                'cos'                           :1,     // - cosine function\n                crypt                           :1,     // - one-way passwd-style encryption\n                dbmclose                        :1,     // - breaks binding on a tied dbm file\n                dbmopen                         :1,     // - create binding on a tied dbm file\n                'default'                       :1,     //\n                defined                         :1,     // - test whether a value, variable, or function is defined\n                'delete'                        :1,     // - deletes a value from a hash\n                die                             :1,     // - raise an exception or bail out\n                'do'                            :1,     // - turn a BLOCK into a TERM\n                dump                            :1,     // - create an immediate core dump\n                each                            :1,     // - retrieve the next key/value pair from a hash\n                endgrent                        :1,     // - be done using group file\n                endhostent                      :1,     // - be done using hosts file\n                endnetent                       :1,     // - be done using networks file\n                endprotoent                     :1,     // - be done using protocols file\n                endpwent                        :1,     // - be done using passwd file\n                endservent                      :1,     // - be done using services file\n                eof                             :1,     // - test a filehandle for its end\n                'eval'                          :1,     // - catch exceptions or compile and run code\n                'exec'                          :1,     // - abandon this program to run another\n                exists                          :1,     // - test whether a hash key is present\n                exit                            :1,     // - terminate this program\n                'exp'                           :1,     // - raise I to a power\n                fcntl                           :1,     // - file control system call\n                fileno                          :1,     // - return file descriptor from filehandle\n                flock                           :1,     // - lock an entire file with an advisory lock\n                fork                            :1,     // - create a new process just like this one\n                format                          :1,     // - declare a picture format with use by the write() function\n                formline                        :1,     // - internal function used for formats\n                getc                            :1,     // - get the next character from the filehandle\n                getgrent                        :1,     // - get next group record\n                getgrgid                        :1,     // - get group record given group user ID\n                getgrnam                        :1,     // - get group record given group name\n                gethostbyaddr                   :1,     // - get host record given its address\n                gethostbyname                   :1,     // - get host record given name\n                gethostent                      :1,     // - get next hosts record\n                getlogin                        :1,     // - return who logged in at this tty\n                getnetbyaddr                    :1,     // - get network record given its address\n                getnetbyname                    :1,     // - get networks record given name\n                getnetent                       :1,     // - get next networks record\n                getpeername                     :1,     // - find the other end of a socket connection\n                getpgrp                         :1,     // - get process group\n                getppid                         :1,     // - get parent process ID\n                getpriority                     :1,     // - get current nice value\n                getprotobyname                  :1,     // - get protocol record given name\n                getprotobynumber                :1,     // - get protocol record numeric protocol\n                getprotoent                     :1,     // - get next protocols record\n                getpwent                        :1,     // - get next passwd record\n                getpwnam                        :1,     // - get passwd record given user login name\n                getpwuid                        :1,     // - get passwd record given user ID\n                getservbyname                   :1,     // - get services record given its name\n                getservbyport                   :1,     // - get services record given numeric port\n                getservent                      :1,     // - get next services record\n                getsockname                     :1,     // - retrieve the sockaddr for a given socket\n                getsockopt                      :1,     // - get socket options on a given socket\n                given                           :1,     //\n                glob                            :1,     // - expand filenames using wildcards\n                gmtime                          :1,     // - convert UNIX time into record or string using Greenwich time\n                'goto'                          :1,     // - create spaghetti code\n                grep                            :1,     // - locate elements in a list test true against a given criterion\n                hex                             :1,     // - convert a string to a hexadecimal number\n                'import'                        :1,     // - patch a module's namespace into your own\n                index                           :1,     // - find a substring within a string\n                'int'                           :1,     // - get the integer portion of a number\n                ioctl                           :1,     // - system-dependent device control system call\n                'join'                          :1,     // - join a list into a string using a separator\n                keys                            :1,     // - retrieve list of indices from a hash\n                kill                            :1,     // - send a signal to a process or process group\n                last                            :1,     // - exit a block prematurely\n                lc                              :1,     // - return lower-case version of a string\n                lcfirst                         :1,     // - return a string with just the next letter in lower case\n                length                          :1,     // - return the number of bytes in a string\n                'link'                          :1,     // - create a hard link in the filesytem\n                listen                          :1,     // - register your socket as a server\n                local                           : 2,    // - create a temporary value for a global variable (dynamic scoping)\n                localtime                       :1,     // - convert UNIX time into record or string using local time\n                lock                            :1,     // - get a thread lock on a variable, subroutine, or method\n                'log'                           :1,     // - retrieve the natural logarithm for a number\n                lstat                           :1,     // - stat a symbolic link\n                m                               :null,  // - match a string with a regular expression pattern\n                map                             :1,     // - apply a change to a list to get back a new list with the changes\n                mkdir                           :1,     // - create a directory\n                msgctl                          :1,     // - SysV IPC message control operations\n                msgget                          :1,     // - get SysV IPC message queue\n                msgrcv                          :1,     // - receive a SysV IPC message from a message queue\n                msgsnd                          :1,     // - send a SysV IPC message to a message queue\n                my                              : 2,    // - declare and assign a local variable (lexical scoping)\n                'new'                           :1,     //\n                next                            :1,     // - iterate a block prematurely\n                no                              :1,     // - unimport some module symbols or semantics at compile time\n                oct                             :1,     // - convert a string to an octal number\n                open                            :1,     // - open a file, pipe, or descriptor\n                opendir                         :1,     // - open a directory\n                ord                             :1,     // - find a character's numeric representation\n                our                             : 2,    // - declare and assign a package variable (lexical scoping)\n                pack                            :1,     // - convert a list into a binary representation\n                'package'                       :1,     // - declare a separate global namespace\n                pipe                            :1,     // - open a pair of connected filehandles\n                pop                             :1,     // - remove the last element from an array and return it\n                pos                             :1,     // - find or set the offset for the last/next m//g search\n                print                           :1,     // - output a list to a filehandle\n                printf                          :1,     // - output a formatted list to a filehandle\n                prototype                       :1,     // - get the prototype (if any) of a subroutine\n                push                            :1,     // - append one or more elements to an array\n                q                               :null,  // - singly quote a string\n                qq                              :null,  // - doubly quote a string\n                qr                              :null,  // - Compile pattern\n                quotemeta                       :null,  // - quote regular expression magic characters\n                qw                              :null,  // - quote a list of words\n                qx                              :null,  // - backquote quote a string\n                rand                            :1,     // - retrieve the next pseudorandom number\n                read                            :1,     // - fixed-length buffered input from a filehandle\n                readdir                         :1,     // - get a directory from a directory handle\n                readline                        :1,     // - fetch a record from a file\n                readlink                        :1,     // - determine where a symbolic link is pointing\n                readpipe                        :1,     // - execute a system command and collect standard output\n                recv                            :1,     // - receive a message over a Socket\n                redo                            :1,     // - start this loop iteration over again\n                ref                             :1,     // - find out the type of thing being referenced\n                rename                          :1,     // - change a filename\n                require                         :1,     // - load in external functions from a library at runtime\n                reset                           :1,     // - clear all variables of a given name\n                'return'                        :1,     // - get out of a function early\n                reverse                         :1,     // - flip a string or a list\n                rewinddir                       :1,     // - reset directory handle\n                rindex                          :1,     // - right-to-left substring search\n                rmdir                           :1,     // - remove a directory\n                s                               :null,  // - replace a pattern with a string\n                say                             :1,     // - print with newline\n                scalar                          :1,     // - force a scalar context\n                seek                            :1,     // - reposition file pointer for random-access I/O\n                seekdir                         :1,     // - reposition directory pointer\n                select                          :1,     // - reset default output or do I/O multiplexing\n                semctl                          :1,     // - SysV semaphore control operations\n                semget                          :1,     // - get set of SysV semaphores\n                semop                           :1,     // - SysV semaphore operations\n                send                            :1,     // - send a message over a socket\n                setgrent                        :1,     // - prepare group file for use\n                sethostent                      :1,     // - prepare hosts file for use\n                setnetent                       :1,     // - prepare networks file for use\n                setpgrp                         :1,     // - set the process group of a process\n                setpriority                     :1,     // - set a process's nice value\n                setprotoent                     :1,     // - prepare protocols file for use\n                setpwent                        :1,     // - prepare passwd file for use\n                setservent                      :1,     // - prepare services file for use\n                setsockopt                      :1,     // - set some socket options\n                shift                           :1,     // - remove the first element of an array, and return it\n                shmctl                          :1,     // - SysV shared memory operations\n                shmget                          :1,     // - get SysV shared memory segment identifier\n                shmread                         :1,     // - read SysV shared memory\n                shmwrite                        :1,     // - write SysV shared memory\n                shutdown                        :1,     // - close down just half of a socket connection\n                'sin'                           :1,     // - return the sine of a number\n                sleep                           :1,     // - block for some number of seconds\n                socket                          :1,     // - create a socket\n                socketpair                      :1,     // - create a pair of sockets\n                'sort'                          :1,     // - sort a list of values\n                splice                          :1,     // - add or remove elements anywhere in an array\n                'split'                         :1,     // - split up a string using a regexp delimiter\n                sprintf                         :1,     // - formatted print into a string\n                'sqrt'                          :1,     // - square root function\n                srand                           :1,     // - seed the random number generator\n                stat                            :1,     // - get a file's status information\n                state                           :1,     // - declare and assign a state variable (persistent lexical scoping)\n                study                           :1,     // - optimize input data for repeated searches\n                'sub'                           :1,     // - declare a subroutine, possibly anonymously\n                'substr'                        :1,     // - get or alter a portion of a stirng\n                symlink                         :1,     // - create a symbolic link to a file\n                syscall                         :1,     // - execute an arbitrary system call\n                sysopen                         :1,     // - open a file, pipe, or descriptor\n                sysread                         :1,     // - fixed-length unbuffered input from a filehandle\n                sysseek                         :1,     // - position I/O pointer on handle used with sysread and syswrite\n                system                          :1,     // - run a separate program\n                syswrite                        :1,     // - fixed-length unbuffered output to a filehandle\n                tell                            :1,     // - get current seekpointer on a filehandle\n                telldir                         :1,     // - get current seekpointer on a directory handle\n                tie                             :1,     // - bind a variable to an object class\n                tied                            :1,     // - get a reference to the object underlying a tied variable\n                time                            :1,     // - return number of seconds since 1970\n                times                           :1,     // - return elapsed time for self and child processes\n                tr                              :null,  // - transliterate a string\n                truncate                        :1,     // - shorten a file\n                uc                              :1,     // - return upper-case version of a string\n                ucfirst                         :1,     // - return a string with just the next letter in upper case\n                umask                           :1,     // - set file creation mode mask\n                undef                           :1,     // - remove a variable or function definition\n                unlink                          :1,     // - remove one link to a file\n                unpack                          :1,     // - convert binary structure into normal perl variables\n                unshift                         :1,     // - prepend more elements to the beginning of a list\n                untie                           :1,     // - break a tie binding to a variable\n                use                             :1,     // - load in a module at compile time\n                utime                           :1,     // - set a file's last access and modify times\n                values                          :1,     // - return a list of the values in a hash\n                vec                             :1,     // - test or set particular bits in a string\n                wait                            :1,     // - wait for any child process to die\n                waitpid                         :1,     // - wait for a particular child process to die\n                wantarray                       :1,     // - get void vs scalar vs list context of current subroutine call\n                warn                            :1,     // - print debugging info\n                when                            :1,     //\n                write                           :1,     // - print a picture record\n                y                               :null}; // - transliterate a string\n\n        var RXstyle=\"string-2\";\n        var RXmodifiers=/[goseximacplud]/;              // NOTE: \"m\", \"s\", \"y\" and \"tr\" need to correct real modifiers for each regexp type\n\n        function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)\n                state.chain=null;                               //                                                          12   3tail\n                state.style=null;\n                state.tail=null;\n                state.tokenize=function(stream,state){\n                        var e=false,c,i=0;\n                        while(c=stream.next()){\n                                if(c===chain[i]&&!e){\n                                        if(chain[++i]!==undefined){\n                                                state.chain=chain[i];\n                                                state.style=style;\n                                                state.tail=tail;}\n                                        else if(tail)\n                                                stream.eatWhile(tail);\n                                        state.tokenize=tokenPerl;\n                                        return style;}\n                                e=!e&&c==\"\\\\\";}\n                        return style;};\n                return state.tokenize(stream,state);}\n\n        function tokenSOMETHING(stream,state,string){\n                state.tokenize=function(stream,state){\n                        if(stream.string==string)\n                                state.tokenize=tokenPerl;\n                        stream.skipToEnd();\n                        return \"string\";};\n                return state.tokenize(stream,state);}\n\n        function tokenPerl(stream,state){\n                if(stream.eatSpace())\n                        return null;\n                if(state.chain)\n                        return tokenChain(stream,state,state.chain,state.style,state.tail);\n                if(stream.match(/^\\-?[\\d\\.]/,false))\n                        if(stream.match(/^(\\-?(\\d*\\.\\d+(e[+-]?\\d+)?|\\d+\\.\\d*)|0x[\\da-fA-F]+|0b[01]+|\\d+(e[+-]?\\d+)?)/))\n                                return 'number';\n                if(stream.match(/^<<(?=\\w)/)){                  // NOTE: <<SOMETHING\\n...\\nSOMETHING\\n\n                        stream.eatWhile(/\\w/);\n                        return tokenSOMETHING(stream,state,stream.current().substr(2));}\n                if(stream.sol()&&stream.match(/^\\=item(?!\\w)/)){// NOTE: \\n=item...\\n=cut\\n\n                        return tokenSOMETHING(stream,state,'=cut');}\n                var ch=stream.next();\n                if(ch=='\"'||ch==\"'\"){                           // NOTE: ' or \" or <<'SOMETHING'\\n...\\nSOMETHING\\n or <<\"SOMETHING\"\\n...\\nSOMETHING\\n\n                        if(prefix(stream, 3)==\"<<\"+ch){\n                                var p=stream.pos;\n                                stream.eatWhile(/\\w/);\n                                var n=stream.current().substr(1);\n                                if(n&&stream.eat(ch))\n                                        return tokenSOMETHING(stream,state,n);\n                                stream.pos=p;}\n                        return tokenChain(stream,state,[ch],\"string\");}\n                if(ch==\"q\"){\n                        var c=look(stream, -2);\n                        if(!(c&&/\\w/.test(c))){\n                                c=look(stream, 0);\n                                if(c==\"x\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n                                else if(c==\"q\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],\"string\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],\"string\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],\"string\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],\"string\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],\"string\");}}\n                                else if(c==\"w\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],\"bracket\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],\"bracket\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],\"bracket\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],\"bracket\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],\"bracket\");}}\n                                else if(c==\"r\"){\n                                        c=look(stream, 1);\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 2);\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}\n                                else if(/[\\^'\"!~\\/(\\[{<]/.test(c)){\n                                        if(c==\"(\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\")\"],\"string\");}\n                                        if(c==\"[\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\"]\"],\"string\");}\n                                        if(c==\"{\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\"}\"],\"string\");}\n                                        if(c==\"<\"){\n                                                eatSuffix(stream, 1);\n                                                return tokenChain(stream,state,[\">\"],\"string\");}\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                return tokenChain(stream,state,[stream.eat(c)],\"string\");}}}}\n                if(ch==\"m\"){\n                        var c=look(stream, -2);\n                        if(!(c&&/\\w/.test(c))){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(/[\\^'\"!~\\/]/.test(c)){\n                                                return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}\n                                        if(c==\"(\"){\n                                                return tokenChain(stream,state,[\")\"],RXstyle,RXmodifiers);}\n                                        if(c==\"[\"){\n                                                return tokenChain(stream,state,[\"]\"],RXstyle,RXmodifiers);}\n                                        if(c==\"{\"){\n                                                return tokenChain(stream,state,[\"}\"],RXstyle,RXmodifiers);}\n                                        if(c==\"<\"){\n                                                return tokenChain(stream,state,[\">\"],RXstyle,RXmodifiers);}}}}\n                if(ch==\"s\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n                if(ch==\"y\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}\n                if(ch==\"t\"){\n                        var c=/[\\/>\\]})\\w]/.test(look(stream, -2));\n                        if(!c){\n                                c=stream.eat(\"r\");if(c){\n                                c=stream.eat(/[(\\[{<\\^'\"!~\\/]/);\n                                if(c){\n                                        if(c==\"[\")\n                                                return tokenChain(stream,state,[\"]\",\"]\"],RXstyle,RXmodifiers);\n                                        if(c==\"{\")\n                                                return tokenChain(stream,state,[\"}\",\"}\"],RXstyle,RXmodifiers);\n                                        if(c==\"<\")\n                                                return tokenChain(stream,state,[\">\",\">\"],RXstyle,RXmodifiers);\n                                        if(c==\"(\")\n                                                return tokenChain(stream,state,[\")\",\")\"],RXstyle,RXmodifiers);\n                                        return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}\n                if(ch==\"`\"){\n                        return tokenChain(stream,state,[ch],\"variable-2\");}\n                if(ch==\"/\"){\n                        if(!/~\\s*$/.test(prefix(stream)))\n                                return \"operator\";\n                        else\n                                return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}\n                if(ch==\"$\"){\n                        var p=stream.pos;\n                        if(stream.eatWhile(/\\d/)||stream.eat(\"{\")&&stream.eatWhile(/\\d/)&&stream.eat(\"}\"))\n                                return \"variable-2\";\n                        else\n                                stream.pos=p;}\n                if(/[$@%]/.test(ch)){\n                        var p=stream.pos;\n                        if(stream.eat(\"^\")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\\\\-#?@;:&`~\\^!\\[\\]*'\"$+.,\\/<>()]/)){\n                                var c=stream.current();\n                                if(PERL[c])\n                                        return \"variable-2\";}\n                        stream.pos=p;}\n                if(/[$@%&]/.test(ch)){\n                        if(stream.eatWhile(/[\\w$\\[\\]]/)||stream.eat(\"{\")&&stream.eatWhile(/[\\w$\\[\\]]/)&&stream.eat(\"}\")){\n                                var c=stream.current();\n                                if(PERL[c])\n                                        return \"variable-2\";\n                                else\n                                        return \"variable\";}}\n                if(ch==\"#\"){\n                        if(look(stream, -2)!=\"$\"){\n                                stream.skipToEnd();\n                                return \"comment\";}}\n                if(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/.test(ch)){\n                        var p=stream.pos;\n                        stream.eatWhile(/[:+\\-\\^*$&%@=<>!?|\\/~\\.]/);\n                        if(PERL[stream.current()])\n                                return \"operator\";\n                        else\n                                stream.pos=p;}\n                if(ch==\"_\"){\n                        if(stream.pos==1){\n                                if(suffix(stream, 6)==\"_END__\"){\n                                        return tokenChain(stream,state,['\\0'],\"comment\");}\n                                else if(suffix(stream, 7)==\"_DATA__\"){\n                                        return tokenChain(stream,state,['\\0'],\"variable-2\");}\n                                else if(suffix(stream, 7)==\"_C__\"){\n                                        return tokenChain(stream,state,['\\0'],\"string\");}}}\n                if(/\\w/.test(ch)){\n                        var p=stream.pos;\n                        if(look(stream, -2)==\"{\"&&(look(stream, 0)==\"}\"||stream.eatWhile(/\\w/)&&look(stream, 0)==\"}\"))\n                                return \"string\";\n                        else\n                                stream.pos=p;}\n                if(/[A-Z]/.test(ch)){\n                        var l=look(stream, -2);\n                        var p=stream.pos;\n                        stream.eatWhile(/[A-Z_]/);\n                        if(/[\\da-z]/.test(look(stream, 0))){\n                                stream.pos=p;}\n                        else{\n                                var c=PERL[stream.current()];\n                                if(!c)\n                                        return \"meta\";\n                                if(c[1])\n                                        c=c[0];\n                                if(l!=\":\"){\n                                        if(c==1)\n                                                return \"keyword\";\n                                        else if(c==2)\n                                                return \"def\";\n                                        else if(c==3)\n                                                return \"atom\";\n                                        else if(c==4)\n                                                return \"operator\";\n                                        else if(c==5)\n                                                return \"variable-2\";\n                                        else\n                                                return \"meta\";}\n                                else\n                                        return \"meta\";}}\n                if(/[a-zA-Z_]/.test(ch)){\n                        var l=look(stream, -2);\n                        stream.eatWhile(/\\w/);\n                        var c=PERL[stream.current()];\n                        if(!c)\n                                return \"meta\";\n                        if(c[1])\n                                c=c[0];\n                        if(l!=\":\"){\n                                if(c==1)\n                                        return \"keyword\";\n                                else if(c==2)\n                                        return \"def\";\n                                else if(c==3)\n                                        return \"atom\";\n                                else if(c==4)\n                                        return \"operator\";\n                                else if(c==5)\n                                        return \"variable-2\";\n                                else\n                                        return \"meta\";}\n                        else\n                                return \"meta\";}\n                return null;}\n\n        return {\n            startState: function() {\n                return {\n                    tokenize: tokenPerl,\n                    chain: null,\n                    style: null,\n                    tail: null\n                };\n            },\n            token: function(stream, state) {\n                return (state.tokenize || tokenPerl)(stream, state);\n            },\n            lineComment: '#'\n        };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"perl\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/x-perl\", \"perl\");\n\n// it's like \"peek\", but need for look-ahead or look-behind if index < 0\nfunction look(stream, c){\n  return stream.string.charAt(stream.pos+(c||0));\n}\n\n// return a part of prefix of current stream from current position\nfunction prefix(stream, c){\n  if(c){\n    var x=stream.pos-c;\n    return stream.string.substr((x>=0?x:0),c);}\n  else{\n    return stream.string.substr(0,stream.pos-1);\n  }\n}\n\n// return a part of suffix of current stream from current position\nfunction suffix(stream, c){\n  var y=stream.string.length;\n  var x=y-stream.pos+1;\n  return stream.string.substr(stream.pos,(c&&c<y?c:x));\n}\n\n// eating and vomiting a part of stream from current position\nfunction eatSuffix(stream, c){\n  var x=stream.pos+c;\n  var y;\n  if(x<=0)\n    stream.pos=0;\n  else if(x>=(y=stream.string.length-1))\n    stream.pos=y;\n  else\n    stream.pos=x;\n}\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","look","stream","c","string","charAt","pos","prefix","x","substr","suffix","y","length","eatSuffix","defineMode","tokenChain","state","chain","style","tail","tokenize","state.tokenize","e","i","next","undefined","eatWhile","tokenPerl","tokenSOMETHING","skipToEnd","eatSpace","match","current","sol","ch","p","n","eat","test","RXstyle","RXmodifiers","PERL","l","elsif","unless","foreach","accept","alarm","bind","binmode","bless","bootstrap","caller","chdir","chmod","chomp","chop","chown","chr","chroot","close","closedir","connect","crypt","dbmclose","dbmopen","defined","die","dump","each","endgrent","endhostent","endnetent","endprotoent","endpwent","endservent","eof","exists","exit","fcntl","fileno","flock","fork","format","formline","getc","getgrent","getgrgid","getgrnam","gethostbyaddr","gethostbyname","gethostent","getlogin","getnetbyaddr","getnetbyname","getnetent","getpeername","getpgrp","getppid","getpriority","getprotobyname","getprotobynumber","getprotoent","getpwent","getpwnam","getpwuid","getservbyname","getservbyport","getservent","getsockname","getsockopt","given","glob","gmtime","grep","hex","index","ioctl","keys","kill","last","lc","lcfirst","listen","local","localtime","lock","lstat","m","map","mkdir","msgctl","msgget","msgrcv","msgsnd","my","no","oct","open","opendir","ord","our","pack","pipe","pop","print","printf","prototype","push","q","qq","qr","quotemeta","qw","qx","rand","read","readdir","readline","readlink","readpipe","recv","redo","ref","rename","reset","reverse","rewinddir","rindex","rmdir","s","say","scalar","seek","seekdir","select","semctl","semget","semop","send","setgrent","sethostent","setnetent","setpgrp","setpriority","setprotoent","setpwent","setservent","setsockopt","shift","shmctl","shmget","shmread","shmwrite","shutdown","sleep","socket","socketpair","splice","sprintf","srand","stat","study","symlink","syscall","sysopen","sysread","sysseek","system","syswrite","tell","telldir","tie","tied","time","times","tr","truncate","uc","ucfirst","umask","undef","unlink","unpack","unshift","untie","use","utime","values","vec","wait","waitpid","wantarray","warn","when","write","startState","token","lineComment","registerHelper","defineMIME"]
}
