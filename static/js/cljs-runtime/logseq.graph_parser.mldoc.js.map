{"version":3,"sources":["logseq/graph_parser/mldoc.cljc"],"mappings":"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","names":["js/logseq","js/logseq.graph-parser","js/logseq.graph-parser.mldoc","js/logseq.graph-parser.mldoc.parseJson","logseq.graph-parser.mldoc/parseJson","logseq.graph_parser.mldoc.goog$module$goog$object.get","js/module$node_modules$mldoc$index.Mldoc","js/logseq.graph-parser.mldoc.parseInlineJson","logseq.graph-parser.mldoc/parseInlineJson","js/logseq.graph-parser.mldoc.astExportMarkdown","logseq.graph-parser.mldoc/astExportMarkdown","logseq.graph-parser.mldoc/default-references","js/JSON.stringify","cljs.core/clj->js","logseq.graph-parser.mldoc/convert-export-md-remove-options","opts","cljs.core.mapv","opt","G__59058","cljs.core/Keyword","cljs.core.remove","cljs.core/empty?","logseq.graph-parser.mldoc/parse-json","content","config","logseq.graph-parser.mldoc/inline-parse-json","text","logseq.graph-parser.mldoc/ast-export-markdown","ast","references","G__59064","G__59065","G__59066","or__5043__auto__","var_args","G__59071","logseq.graph-parser.mldoc/default-config","js/Error","p__59072","map__59073","cljs.core/--destructure-map","cljs.core.get","format","logseq.graph_parser.mldoc.default_config","export-heading-to-list?","export-keep-properties?","export-md-indent-style","export-md-remove-options","parse_outline_only?","clojure.string/capitalize","cljs.core/name","p1__59068#","cljs.core.filter","cljs.core/second","cljs.core.into","cljs-bean.core/->js","logseq.graph-parser.mldoc/remove-indentation-spaces","s","level","remove-first-line?","vec__59082","seq__59083","cljs.core/seq","first__59084","cljs.core/first","cljs.core/next","lines","clojure.string/split-lines","f","r","body","cljs.core.map","line","clojure.string/blank?","logseq.graph_parser.util.safe_subs","cljs.core/cons","clojure.string.join","logseq.graph-parser.mldoc/update-src-full-content","logseq.graph-parser.utf8/encode","p__59087","vec__59088","cljs.core.nth","block","pos-meta","cljs.core/vector?","cljs.core._EQ_","map__59091","start_pos","end_pos","logseq.graph_parser.utf8.substring","spaces","cljs.core/re-find","cljs.core/count","cljs.core.assoc","logseq.graph-parser.mldoc/->vec","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","logseq.graph-parser.mldoc/->vec-concat","seq59095","self__5752__auto__","coll","cljs.core/nil?","cljs.core.apply","cljs.core/concat","cljs.core.distinct","logseq.graph-parser.mldoc/collect-page-properties","parse-property","config-state","vec__59099","original-ast","directive?","p__59102","vec__59103","item","_","clojure.string/lower-case","grouped-ast","cljs.core/group-by","directive-ast","cljs.core.take_while","properties-ast","other-ast","cljs.core/ffirst","cljs.core/last","cljs.core/rest","properties","p__59106","vec__59107","k","v","cljs.core.keyword","cljs.core/contains?","linked.core.map","macro-properties","x","macros","p__59110","vec__59111","vec__59116","logseq.graph-parser.util/split-first","clojure.string/trim","G__59125","alias","cljs.core/coll?","filetags","temp__5720__auto__","org-file-tags","clojure.string.split","tags","logseq.graph_parser.mldoc.__GT_vec_concat","cljs.core.update","cljs.core/constantly","p__59141","vec__59142","_k","logseq.graph-parser.mldoc/parse-property","logseq.graph-parser.mldoc/->edn","e59146","logseq.graph-parser.util/json->clj","e","lambdaisland.glogi.log","cljs.core/identity","logseq.graph-parser.mldoc/inline->edn","e59162","_e","logseq.graph-parser.mldoc/link?","link","vec__59164","vec__59167","type","ref-type","ref-value","logseq.graph-parser.config/draw?","cljs.core/boolean","logseq.graph-parser.config/local-asset?"],"sourcesContent":["(ns ^:nbb-compatible logseq.graph-parser.mldoc\n  ;; Disable clj linters since we don't support clj\n  #?(:clj {:clj-kondo/config {:linters {:unresolved-namespace {:level :off}\n                                        :unresolved-symbol {:level :off}}}})\n  (:require #?(:org.babashka/nbb [\"mldoc$default\" :refer [Mldoc]]\n               :default [\"mldoc\" :refer [Mldoc]])\n            #?(:org.babashka/nbb [logseq.graph-parser.log :as log]\n               :default [lambdaisland.glogi :as log])\n            [goog.object :as gobj]\n            [cljs-bean.core :as bean]\n            [logseq.graph-parser.utf8 :as utf8]\n            [clojure.string :as string]\n            [linked.core :as linked]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]))\n\n(defonce parseJson (gobj/get Mldoc \"parseJson\"))\n(defonce parseInlineJson (gobj/get Mldoc \"parseInlineJson\"))\n(defonce astExportMarkdown (gobj/get Mldoc \"astExportMarkdown\"))\n\n(def default-references\n  (js/JSON.stringify\n   (clj->js {:embed_blocks []\n             :embed_pages []})))\n\n(defn- convert-export-md-remove-options [opts]\n  (->> opts\n       (mapv (fn [opt]\n               (case opt\n                 :page-ref [\"Page_ref\"]\n                 :emphasis [\"Emphasis\"]\n                 [])))\n       (remove empty?)))\n\n(defn parse-json\n  [content config]\n  (parseJson content config))\n\n(defn inline-parse-json\n  [text config]\n  (parseInlineJson text config))\n\n(defn ast-export-markdown\n  [ast config references]\n  (astExportMarkdown ast\n                     config\n                     (or references default-references)))\n\n(defn default-config\n  ([format]\n   (default-config format {:export-heading-to-list? false}))\n  ([format {:keys [export-heading-to-list? export-keep-properties? export-md-indent-style export-md-remove-options parse_outline_only?]}]\n   (let [format (string/capitalize (name (or format :markdown)))]\n     (->> {:toc false\n           :parse_outline_only (or parse_outline_only? false)\n           :heading_number false\n           :keep_line_break true\n           :format format\n           :heading_to_list (or export-heading-to-list? false)\n           :exporting_keep_properties export-keep-properties?\n           :export_md_indent_style export-md-indent-style\n           :export_md_remove_options\n           (convert-export-md-remove-options export-md-remove-options)}\n          (filter #(not (nil? (second %))))\n          (into {})\n          (bean/->js)\n          js/JSON.stringify))))\n\n(defn remove-indentation-spaces\n  [s level remove-first-line?]\n  (let [lines (string/split-lines s)\n        [f & r] lines\n        body (map (fn [line]\n                    (if (string/blank? (gp-util/safe-subs line 0 level))\n                      (gp-util/safe-subs line level)\n                      line))\n               (if remove-first-line? lines r))\n        content (if remove-first-line? body (cons f body))]\n    (string/join \"\\n\" content)))\n\n(defn- update-src-full-content\n  [ast content]\n  (let [content (utf8/encode content)]\n    (map (fn [[block pos-meta]]\n          (if (and (vector? block)\n                   (= \"Src\" (first block)))\n            (let [{:keys [start_pos end_pos]} pos-meta\n                  content (utf8/substring content start_pos end_pos)\n                  spaces (re-find #\"^[\\t ]+\" (first (string/split-lines content)))\n                  content (if spaces (remove-indentation-spaces content (count spaces) true)\n                              content)\n                  block [\"Src\" (assoc (second block) :full_content content)]]\n              [block pos-meta])\n            [block pos-meta])) ast)))\n\n(defn- ->vec\n  [s]\n  (if (string? s) [s] s))\n\n(defn- ->vec-concat\n  [& coll]\n  (->> (map ->vec coll)\n       (remove nil?)\n       (apply concat)\n       (distinct)))\n\n(defn collect-page-properties\n  [ast parse-property config-state]\n  (if (seq ast)\n    (let [original-ast ast\n          ast (map first ast)           ; without position meta\n          directive? (fn [[item _]] (= \"directive\" (string/lower-case (first item))))\n          grouped-ast (group-by directive? original-ast)\n          directive-ast (take-while directive? original-ast)\n          [properties-ast other-ast] (if (= \"Property_Drawer\" (ffirst ast))\n                                       [(last (first ast))\n                                        (rest original-ast)]\n                                       [(->> (map first directive-ast)\n                                             (map rest))\n                                        (get grouped-ast false)])\n          properties (->>\n                      properties-ast\n                      (map (fn [[k v]]\n                             (let [k (keyword (string/lower-case k))\n                                   v (if (contains? #{:title :description :filters :macro} k)\n                                       v\n                                       (parse-property k v config-state))]\n                               [k v]))))\n          properties (into (linked/map) properties)\n          macro-properties (filter (fn [x] (= :macro (first x))) properties)\n          macros (if (seq macro-properties)\n                   (->>\n                    (map\n                     (fn [[_ v]]\n                       (let [[k v] (gp-util/split-first \" \" v)]\n                         (mapv\n                          string/trim\n                          [k v])))\n                     macro-properties)\n                    (into {}))\n                   {})\n          properties (->> (remove (fn [x] (= :macro (first x))) properties)\n                          (into (linked/map)))\n          properties (cond-> properties\n                             (seq macros)\n                             (assoc :macros macros))\n          alias (:alias properties)\n          alias (when alias\n                  (if (coll? alias)\n                    (remove string/blank? alias)\n                    [alias]))\n          filetags (when-let [org-file-tags (:filetags properties)]\n                     (->> (string/split org-file-tags \":\")\n                          (remove string/blank?)))\n          tags (:tags properties)\n          tags (->> (->vec-concat tags filetags)\n                    (remove string/blank?))\n          properties (assoc properties :tags tags :alias alias)\n          properties (-> properties\n                         (update :filetags (constantly filetags)))\n          properties (into (linked/map)\n                           (remove (fn [[_k v]]\n                                     (or (nil? v) (and (coll? v) (empty? v))))\n                                   properties))]\n      (if (seq properties)\n        (cons [[\"Properties\" properties] nil] other-ast)\n        original-ast))\n    ast))\n\n(def parse-property nil)\n\n(defn ->edn\n  [content config config-state]\n  (if (string? content)\n    (try\n      (if (string/blank? content)\n        []\n        (-> content\n            (parse-json config)\n            (gp-util/json->clj)\n            (update-src-full-content content)\n            (collect-page-properties parse-property config-state)))\n      (catch :default e\n        (log/error :unexpected-error e)\n        []))\n    (log/error :edn/wrong-content-type content)))\n\n(defn inline->edn\n  [text config]\n  (try\n    (if (string/blank? text)\n      {}\n      (-> text\n          (inline-parse-json config)\n          (gp-util/json->clj)))\n    (catch :default _e\n      [])))\n\n(defn link?\n  [format link]\n  (when (string? link)\n    (let [[type link] (first (inline->edn link (default-config format)))\n          [ref-type ref-value] (:url link)]\n      (and (= \"Link\" type)\n           (or\n            ;; 1. url\n            (not (contains? #{\"Page_ref\" \"Block_ref\"} ref-type))\n\n            (and (contains? #{\"Page_ref\"} ref-type)\n                 (or\n                  ;; 2. excalidraw link\n                  (gp-config/draw? ref-value)\n\n                  ;; 3. local asset link\n                  (boolean (gp-config/local-asset? ref-value)))))))))\n"]}