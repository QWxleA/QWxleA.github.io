{"version":3,"sources":["frontend/external/roam.cljs"],"mappings":"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","names":["js/frontend","js/frontend.external","js/frontend.external.roam","js/frontend.external.roam.all-refed-uids","frontend.external.roam/all-refed-uids","cljs.core.atom","js/frontend.external.roam.uid->uuid","frontend.external.roam/uid->uuid","frontend.external.roam/reset-state!","cljs.core/reset!","js/frontend.external.roam.uid-pattern","frontend.external.roam/uid-pattern","js/frontend.external.roam.macro-pattern","frontend.external.roam/macro-pattern","frontend.external.roam/uid-transform","text","clojure.string/replace","p__108485","vec__108486","cljs.core.nth","_","uid","id","cljs.core/deref","cljs.core.get","frontend.external.roam/macro-transform","p__108489","vec__108490","original","vec__108493","name","arg","logseq.graph-parser.util/split-first","logseq.graph-parser.text/page-ref-un-brackets!","frontend.util.format","frontend.external.roam/fenced-code-transform","frontend.external.roam/load-all-refed-uids!","data","full-text","clojure.walk/postwalk","f","and__4251__auto__","cljs.core/map?","cljs.core.swap_BANG_","v","uids","cljs.core/re-seq","cljs.core.map","cljs.core/last","cljs.core.distinct","cljs.core/set","seq__108496","cljs.core/seq","chunk__108497","count__108498","i__108499","temp__5720__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/assoc","medley.core/random-uuid","frontend.external.roam/transform","p__108500","map__108501","cljs.core/--destructure-map","frontend.external.roam/child->text","string","children","level","children-text","G__108502","G__108503","frontend.external.roam/children->text","level-pattern","cljs.core.apply","cljs.core/str","cljs.core.repeat","properties","cljs.core/contains?","clojure.string/triml","p1__108504#","cljs.core.interpose","frontend.external.roam/json->edn","raw-string","js/JSON.parse","cljs-bean.core/->clj","frontend.external.roam/->file","page-data","map__108505","create-time","title","edit-time","initial-level","journal?","frontend.date/valid-journal-title?","front-matter","clojure.string/blank?","frontend.external.roam/->files","edn-data","files","p1__108506#","cljs.core.remove","cljs.core/group-by","clojure.string/lower-case","p__108507","vec__108508","vec__108511","seq__108512","first__108513","fst","others","cljs.core.assoc","cljs.core/cons","this__4502__auto__","k__4503__auto__","this__4504__auto__","k108515","else__4505__auto__","G__108519","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__108520","vec__108521","k__4526__auto__","v__4527__auto__","cljs.core/PROTOCOL_SENTINEL","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__108514","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this108516","other108517","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","this__4510__auto__","k__4511__auto__","pred__108524","cljs.core/keyword-identical?","expr__108525","this__4515__auto__","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","frontend.external.roam/Roam","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__108518","extmap__4542__auto__","G__108527","cljs.core/record?","frontend.external.roam/->Roam","frontend.external.roam/map->Roam","_this","content","_config"],"sourcesContent":["(ns frontend.external.roam\n  (:require [cljs-bean.core :as bean]\n            [frontend.external.protocol :as protocol]\n            [frontend.date :as date]\n            [medley.core :as medley]\n            [clojure.walk :as walk]\n            [clojure.string :as string]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.text :as text]))\n\n(defonce all-refed-uids (atom #{}))\n(defonce uid->uuid (atom {}))\n\n(defn reset-state!\n  []\n  (reset! all-refed-uids #{})\n  (reset! uid->uuid {}))\n\n;; DONE: 1. uid converted to a uuid\n;; DONE: 2. merge pages with same names (case-sensitive)\n;; DONE: 3. mldoc add support to roam research macros, or we can transform here.\n;; DONE: 4. mldoc add support to nested links\n;; DONE: 5. Roam attributes -> properties\n;; TODO: 6. hiccup\n\n(defonce uid-pattern #\"\\(\\(([a-zA-Z0-9_\\\\-]{6,24})\\)\\)\")\n(defonce macro-pattern #\"\\{\\{([^{}]+)\\}\\}\")\n\n(defn uid-transform\n  [text]\n  (string/replace text uid-pattern (fn [[_ uid]]\n                                     (let [id (get @uid->uuid uid uid)]\n                                       (str \"((\" id \"))\")))))\n\n(defn macro-transform\n  [text]\n  (string/replace text macro-pattern (fn [[original text]]\n                                       (let [[name arg] (gp-util/split-first \":\" text)]\n                                         (if name\n                                           (let [name (text/page-ref-un-brackets! name)]\n                                             (util/format \"{{%s %s}}\" name arg))\n                                           original)))))\n\n(defn- fenced-code-transform\n  [text]\n  (string/replace text #\"```\" \"\\n```\"))\n\n(defn load-all-refed-uids!\n  [data]\n  (let [full-text (atom \"\")]\n    (walk/postwalk\n     (fn [f]\n       (when (and (map? f) (:string f))\n         (swap! full-text (fn [v] (str v (:string f)))))\n       f)\n     data)\n    (let [uids (->> (re-seq uid-pattern @full-text)\n                    (map last)\n                    (distinct)\n                    (set))]\n      (reset! all-refed-uids uids)\n      (doseq [uid uids]\n        (swap! uid->uuid assoc uid (medley/random-uuid))))))\n\n(defn transform\n  [text]\n  (-> text\n      (string/replace \"{{[[TODO]]}}\" \"TODO\")\n      (string/replace \"{{[[DONE]]}}\" \"DONE\")\n      (uid-transform)\n      (macro-transform)\n      (fenced-code-transform)))\n\n(declare children->text)\n(defn child->text\n  [{:keys [uid string children]} level]\n  (when-not (and (get @uid->uuid uid) uid)\n    (swap! uid->uuid assoc uid (medley/random-uuid)))\n  (let [children-text (children->text children (inc level))\n        level-pattern (str (apply str (repeat level \"\\t\"))\n                           (if (zero? level)\n                             \"-\"\n                             \" -\"))\n        properties (when (contains? @all-refed-uids uid)\n                     (str\n                      (util/format \"id:: %s\"\n                                   (str (get @uid->uuid uid)))\n                      \"\\n\"))]\n    (if string\n      (str level-pattern \" \" (string/triml string) \"\\n\" properties children-text)\n      children-text)))\n\n(defn children->text\n  [children level]\n  (->> (map #(child->text % level) children)\n       (interpose \"\\n\")\n       (apply str)))\n\n(defn json->edn\n  [raw-string]\n  (-> raw-string js/JSON.parse bean/->clj))\n\n(defn ->file\n  [page-data]\n  (let [{:keys [create-time title children edit-time]} page-data\n        initial-level 1\n        text (when (seq children)\n               (when-let [text (children->text children (dec initial-level))]\n                 (let [journal? (date/valid-journal-title? title)\n                       front-matter (if journal?\n                                      \"\"\n                                      (util/format \"---\\ntitle: %s\\n---\\n\\n\" title))]\n                   (str front-matter (transform text)))))]\n    (when (and (not (string/blank? title))\n               text)\n      {:title title\n       :created-at create-time\n       :last-modified-at edit-time\n       :text text})))\n\n(defn ->files\n  [edn-data]\n  (load-all-refed-uids! edn-data)\n  (let [files (map ->file edn-data)\n        files (remove #(nil? (:title %)) files)\n        files (group-by (fn [f] (string/lower-case (:title f)))\n                        files)]\n    (map\n     (fn [[_ [fst & others]]]\n       (assoc fst :text\n              (->> (map :text (cons fst others))\n                   (interpose \"\\n\")\n                   (apply str))))\n     files)))\n\n(defrecord Roam []\n  protocol/External\n  (toMarkdownFiles [_this content _config]\n                   (-> content json->edn ->files)))\n\n(comment\n  (defonce test-roam-json (frontend.db/get-file \"same.json\"))\n  (defonce edn-data (bean/->clj (js/JSON.parse test-roam-json))))\n"]}