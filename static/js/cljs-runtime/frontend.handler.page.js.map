{"version":3,"sources":["frontend/handler/page.cljs"],"mappings":"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","names":["frontend.handler.page/get-directory","journal?","frontend.config/get-journals-directory","frontend.config/get-pages-directory","frontend.handler.page/get-file-name","title","temp__5720__auto__","s","frontend.date/journal-title->default","frontend.util.page_name_sanity","clojure.string/lower-case","logseq.graph_parser.util.safe_subs","var_args","G__63213","frontend.handler.page/get-page-file-path","js/Error","frontend.handler.page.get_page_file_path","frontend.state/get-current-page","page-name","frontend.util/page-name-sanity-lc","page","G__63214","frontend.db/entity","frontend.handler.page/build-title","original-name","clojure.string/includes?","frontend.util.format","G__63216","frontend.handler.page/default-properties-block","format","frontend.handler.page.default_properties_block","properties","p","frontend.handler.common/get-page-default-properties","ps","cljs.core.merge","content","frontend.util.page-property/insert-properties","refs","frontend.format.block/get-page-refs-from-properties","frontend.db/new-block-id","cljs.core/keys","frontend.handler.page/create-title-property?","and__4251__auto__","cljs.core/not","frontend.util/create-title-property?","frontend.handler.page/build-page-tx","page-entity","create-title?","or__4253__auto__","cljs.core/seq","cljs.core.assoc","properties-block","frontend.handler.editor/properties-block","G__63219","frontend.handler.page/create!","p__63220","map__63221","cljs.core/--destructure-map","cljs.core.get","frontend.handler.page.create_BANG_","redirect?","create-first-block?","split-namespace?","clojure.string/trim","frontend.util/remove-boundary-slashes","repo","frontend.state/get-current-repo","frontend.db/page-empty?","pages","frontend.util/split-namespace-pages","frontend.state.get_preferred_format","cljs.core.map","frontend.format.block.page_name__GT_map","txs","cljs.core.drop_last","p1__63217#","cljs.core.mapcat","cljs.core.remove","cljs.core/nil?","m","G__63222","last-txs","cljs.core/last","cljs.core.concat","frontend.db/transact!","G__63223","G__63224","G__63225","frontend.handler.editor/api-insert-new-block!","frontend.handler.route.redirect_to_page_BANG_","frontend.handler.page/delete-file!","file","frontend.db/get-page-file","file-path","clojure.string/blank?","G__63226","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","_","frontend.config/local-db?","frontend.mobile.util/is-native-platform?","frontend.fs/delete-file!","frontend.fs/unlink!","frontend.config/get-repo-path","promesa.core.catch$","err","js/console.error","frontend.handler.page/compute-new-file-path","old-path","new-name","result","clojure.string.split","file-name","ext","new-file","parts","cljs.core/butlast","clojure.string.join","frontend.handler.page/rename-file!","ok-handler","G__63227","frontend.db/pull","new-path","G__63228","G__63229","frontend.fs/rename!","error","cljs.core.println","frontend.handler.page/replace-page-ref!","old-name","vec__63232","cljs.core.nth","vec__63235","vec__63238","original-old-name","original-new-name","old-ref","new-ref","p1__63230#","p1__63231#","clojure.string/replace","old-org-ref","cljs.core._EQ_","frontend.state.get_config","cljs.core/re-find","cljs.core/re-pattern","vec__63241","old-full-ref","old-label","new-label","new-full-ref","frontend.handler.page/replace-tag-ref!","old-tag","new-tag","frontend.util/replace-ignore-case","frontend.handler.page/replace-old-page!","frontend.handler.page/walk-replace-old-page!","form","clojure.walk/postwalk","f","cljs.core/vector?","cljs.core/contains?","cljs.core/first","clojure.string/starts-with?","cljs.core/second","clojure.string/replace-first","frontend.handler.page/favorited?","favorites","cljs.core.filter","cljs.core/string?","cljs.core/set","frontend.handler.page/favorite-page!","cljs.core/cons","cljs.core.distinct","cljs.core/vec","frontend.handler.config/set-config!","frontend.handler.page/unfavorite-page!","p1__63244#","frontend.handler.page/toggle-favorite!","frontend.state/sub-graph-config","favorited?","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.handler.page/delete!","p__63273","map__63274","seq63262","G__63263","cljs.core/next","G__63264","self__4851__auto__","delete-file?","blocks","frontend.db/get-page-blocks-no-cache","tx-data","cljs.core.mapv","block","G__63276","frontend.db.model/get-alias-source-page","id","G__63283","attribute","frontend.db-schema/retract-page-attributes","G__63293","cljs.core/fn?","frontend.handler.ui.re_render_root_BANG_","frontend.handler.page/rename-update-block-refs!","from-id","to-id","frontend.handler.page/rename-update-refs!","old-original-name","to-page","G__63302","G__63303","frontend.db/get-page-referenced-blocks-no-cache","page-ids","tx","p__63305","map__63306","uuid","content'","properties'","frontend.util/remove-nils-non-nested","seq__63307","chunk__63308","count__63309","i__63310","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","page-id","frontend.modules.outliner.file/sync-to-file","frontend.handler.page/rename-page-aux","old-page-name","new-file-name","frontend.util/file-name-sanity","new-page-name","G__63355","frontend.modules.outliner.tree/-get-down","frontend.modules.outliner.core/block","properties-block-tx","front-matter?","frontend.util.property/front-matter?","frontend.util.property.insert_property","page-txs","cljs.core.conj","datascript.core.transact_BANG_","frontend.db/get-db","cljs.core.not_EQ_","frontend.util.page-property/add-property!","frontend.handler.route/redirect!","___42616__auto__","___42615__auto__","frontend.handler.recent/update-or-add-renamed-page","frontend.handler.page/rename-nested-pages","old-ns-name","new-ns-name","nested-page-str","ns-prefix","nested-pages","frontend.db/get-pages-by-name-partition","nested-pages-ns","seq__63366","chunk__63367","count__63368","i__63369","map__63391","map__63394","name","old-page-title","new-page-title","seq__63403","chunk__63404","count__63405","i__63406","map__63425","map__63447","frontend.handler.page/rename-namespace-pages!","frontend.db/get-namespace-pages","G__63455","seq__63456","chunk__63457","count__63458","i__63459","map__63484","map__63487","frontend.handler.page/merge-pages!","from-page-name","to-page-name","frontend.db/page-exists?","G__63497","from-page","G__63499","from-first-child","G__63506","frontend.modules.outliner.core/get-data","to-last-direct-child-id","frontend.db.model.get_block_last_direct_child","conn","frontend.db.conn.get_db","datoms","cljs.core/deref","datascript.core.datoms","block-eids","frontend.db.utils.pull_many","G__63516","frontend.util/get-page-original-name","frontend.handler.page/rename!","name-changed?","G__63530","frontend.handler.notification.show_BANG_","frontend.handler.page/split-col-by-element","col","element","idx","cljs.core.subvec","p__63547","map__63548","frontend.handler.page/reorder-favorites!","to","up?","from","frontend.state/state","vec__63561","vec__63564","prev","next","p1__63545#","e","frontend.handler.page/has-more-journals?","current-length","frontend.db/get-journals-length","frontend.handler.page/load-more-journals!","frontend.state/set-journals-length!","frontend.handler.page/update-public-attribute!","value","frontend.handler.page/get-page-ref-text","edit-block-file-path","frontend.db.model/get-block-file-path","frontend.state/get-edit-block","frontend.state/org-mode-file-link?","temp__5718__auto__","ref-file-path","frontend.util/get-relative-path","frontend.date/valid-journal-title?","frontend.util/electron?","frontend.config/get-repo-dir","js/decodeURI","frontend.handler.page/init-commands!","frontend.commands/init-commands!","frontend.handler.page/rebuild-slash-commands-list!","goog.functions/debounce","frontend.handler.page/template-exists?","templates","frontend.db/get-all-templates","frontend.handler.page/ls-dir-files!","frontend.handler.web.nfs/ls-dir-files-with-handler!","frontend.handler.page/get-all-pages","frontend.db/get-all-pages","logseq.graph-parser.util/uuid-string?","logseq.graph-parser.config/draw?","G__63590","frontend.db/built-in-pages-names","clojure.string/upper-case","frontend.handler.common/fix-pages-timestamps","frontend.handler.page/get-filters","frontend.db/get-page-properties","properties-str","e63591","cljs.reader.read_string","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.page/save-filter!","filter-state","frontend.handler.page/page-not-exists-handler","input","q","current-pos","frontend.state/set-editor-show-page-search!","page-ref-text","frontend.handler.page.goog$module$goog$object.get","old-page-ref","new-value","frontend.state.set_edit_content_BANG_","new-pos","frontend.util.cursor/move-cursor-to","current-selected","frontend.util/get-selected-text","frontend.util.cursor.move_cursor_forward","frontend.handler.page/on-chosen-handler","_q","pos","frontend.util.cursor/pos","edit-content","frontend.state/sub","frontend.handler.editor/*selected-text","chosen","_click?","vec__63616","wrapped?","cljs.core.subs","logseq.graph-parser.util/safe-re-find","last-pattern","forward-pos","frontend.handler.editor/insert-command!","frontend.util/replace-first","frontend.handler.page/create-today-journal!","frontend.state/enable-journals?","frontend.state/loading-files?","frontend.state/set-today!","frontend.date/today","today-page","path","frontend.config/get-file-extension","repo-dir","template","frontend.state/get-default-journal-template","file-exists?","frontend.fs/file-exists?","file-content","frontend.fs.read_file","frontend.state/pub-event!","frontend.handler.page/open-today-in-sidebar","G__63640","frontend.state/sidebar-add-block!","frontend.handler.page/open-file-in-default-app","js/window.apis.openPath","frontend.handler.page/copy-current-file","frontend.util.copy_to_clipboard_BANG_","frontend.handler.page/open-file-in-directory","js/window.apis.showItemInFolder"],"sourcesContent":["(ns frontend.handler.page\n  (:require [cljs.reader :as reader]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [datascript.core :as d]\n            [frontend.commands :as commands]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.model :as model]\n            [frontend.db.utils :as db-utils]\n            [frontend.db.conn :as conn]\n            [frontend.format.block :as block]\n            [frontend.fs :as fs]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.route :as route-handler]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.handler.web.nfs :as web-nfs]\n            [frontend.handler.config :as config-handler]\n            [frontend.handler.recent :as recent-handler]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.file :as outliner-file]\n            [frontend.modules.outliner.tree :as outliner-tree]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.property :as property]\n            [frontend.util.page-property :as page-property]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.mobile.util :as mobile-util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [goog.functions :refer [debounce]]))\n\n(defn- get-directory\n  [journal?]\n  (if journal?\n    (config/get-journals-directory)\n    (config/get-pages-directory)))\n\n(defn- get-file-name\n  [journal? title]\n  (when-let [s (if journal?\n                 (date/journal-title->default title)\n                 (util/page-name-sanity (string/lower-case title)))]\n    ;; Win10 file path has a length limit of 260 chars\n    (gp-util/safe-subs s 0 200)))\n\n(defn get-page-file-path\n  ([] (get-page-file-path (state/get-current-page)))\n  ([page-name]\n   (when page-name\n     (let [page-name (util/page-name-sanity-lc page-name)]\n       (when-let [page (db/entity [:block/name page-name])]\n         (:file/path (:block/file page)))))))\n\n(defn- build-title [page]\n  (let [original-name (:block/original-name page)]\n    (if (string/includes? original-name \",\")\n      (util/format \"\\\"%s\\\"\" original-name)\n      original-name)))\n\n(defn default-properties-block\n  ([title format page]\n   (default-properties-block title format page {}))\n  ([title format page properties]\n   (let [p (common-handler/get-page-default-properties title)\n         ps (merge p properties)\n         content (page-property/insert-properties format \"\" ps)\n         refs (block/get-page-refs-from-properties properties)]\n     {:block/uuid (db/new-block-id)\n      :block/properties ps\n      :block/properties-order (keys ps)\n      :block/refs refs\n      :block/left page\n      :block/format format\n      :block/content content\n      :block/parent page\n      :block/page page})))\n\n(defn- create-title-property?\n  [journal? page-name]\n  (and (not journal?)\n       (util/create-title-property? page-name)))\n\n(defn- build-page-tx [format properties page journal?]\n  (when (:block/uuid page)\n    (let [page-entity [:block/uuid (:block/uuid page)]\n          create-title? (create-title-property? journal?\n                                                (or\n                                                 (:block/original-name page)\n                                                 (:block/name page)))\n          page (if (seq properties) (assoc page :block/properties properties) page)]\n      (cond\n        create-title?\n        (let [properties-block (default-properties-block (build-title page) format page-entity properties)]\n          [page\n           properties-block])\n\n        (seq properties)\n        [page (editor-handler/properties-block properties format page-entity)]\n\n        :else\n        [page]))))\n\n(defn create!\n  ([title]\n   (create! title {}))\n  ([title {:keys [redirect? create-first-block? format properties split-namespace? journal?]\n           :or   {redirect?           true\n                  create-first-block? true\n                  format              nil\n                  properties          nil\n                  split-namespace?    true}}]\n   (let [title (string/trim title)\n         title (util/remove-boundary-slashes title)\n         page-name (util/page-name-sanity-lc title)\n         repo (state/get-current-repo)]\n     (when (db/page-empty? repo page-name)\n       (let [pages    (if split-namespace?\n                        (util/split-namespace-pages title)\n                        [title])\n             format   (or format (state/get-preferred-format))\n             pages    (map (fn [page]\n                             (-> (block/page-name->map page true)\n                                 (assoc :block/format format)))\n                        pages)\n             txs      (->> pages\n                           ;; for namespace pages, only last page need properties\n                           drop-last\n                           (mapcat #(build-page-tx format nil % journal?))\n                           (remove nil?)\n                           (remove (fn [m]\n                                     (some? (db/entity [:block/name (:block/name m)])))))\n             last-txs (build-page-tx format properties (last pages) journal?)\n             txs      (concat txs last-txs)]\n         (when (seq txs)\n           (db/transact! txs)))\n\n       (when create-first-block?\n         (when (or\n                (db/page-empty? repo (:db/id (db/entity [:block/name page-name])))\n                (create-title-property? journal? page-name))\n           (editor-handler/api-insert-new-block! \"\" {:page page-name}))))\n\n     (when redirect?\n       (route-handler/redirect-to-page! page-name))\n     page-name)))\n\n(defn delete-file!\n  [repo page-name]\n  (let [file (db/get-page-file page-name)\n        file-path (:file/path file)]\n    ;; delete file\n    (when-not (string/blank? file-path)\n      (db/transact! [[:db.fn/retractEntity [:file/path file-path]]])\n      (->\n       (p/let [_ (and (config/local-db? repo)\n                      (mobile-util/is-native-platform?)\n                      (fs/delete-file! repo file-path file-path {}))\n               _ (fs/unlink! repo (config/get-repo-path repo file-path) nil)])\n       (p/catch (fn [err]\n                  (js/console.error \"error: \" err)))))))\n\n(defn- compute-new-file-path\n  [old-path new-name]\n  (let [result (string/split old-path \"/\")\n        file-name (util/page-name-sanity new-name true)\n        ext (last (string/split (last result) \".\"))\n        new-file (str file-name \".\" ext)\n        parts (concat (butlast result) [new-file])]\n    (string/join \"/\" parts)))\n\n(defn rename-file!\n  [file new-name ok-handler]\n  (let [repo (state/get-current-repo)\n        file (db/pull (:db/id file))\n        old-path (:file/path file)\n        new-path (compute-new-file-path old-path new-name)]\n    ;; update db\n    (db/transact! repo [{:db/id (:db/id file)\n                         :file/path new-path}])\n    (->\n     (p/let [_ (fs/rename! repo old-path new-path)]\n       (ok-handler))\n     (p/catch (fn [error]\n                (println \"file rename failed: \" error))))))\n\n(defn- replace-page-ref!\n  \"Unsanitized names\"\n  [content old-name new-name]\n  (let [[original-old-name original-new-name] (map string/trim [old-name new-name])\n        [old-ref new-ref] (map #(util/format \"[[%s]]\" %) [old-name new-name])\n        [old-name new-name] (map #(if (string/includes? % \"/\")\n                                    (string/replace % \"/\" \".\")\n                                    %)\n                                 [original-old-name original-new-name])\n        old-org-ref (and (= :org (state/get-preferred-format))\n                         (:org-mode/insert-file-link? (state/get-config))\n                         (re-find\n                          (re-pattern\n                           (util/format\n                            \"\\\\[\\\\[file:\\\\.*/.*%s\\\\.org\\\\]\\\\[(.*?)\\\\]\\\\]\" old-name))\n                          content))]\n    (-> (if old-org-ref\n          (let [[old-full-ref old-label] old-org-ref\n                new-label (if (= old-label original-old-name)\n                            original-new-name\n                            old-label)\n                new-full-ref (-> (string/replace old-full-ref old-name new-name)\n                                 (string/replace (str \"[\" old-label \"]\")\n                                                 (str \"[\" new-label \"]\")))]\n            (string/replace content old-full-ref new-full-ref))\n          content)\n        (string/replace old-ref new-ref))))\n\n(defn- replace-tag-ref!\n  [content old-name new-name]\n  (let [old-tag (util/format \"#%s\" old-name)\n        new-tag (if (re-find #\"[\\s\\t]+\" new-name)\n                  (util/format \"#[[%s]]\" new-name)\n                  (str \"#\" new-name))]\n    (-> (util/replace-ignore-case content (str \"^\" old-tag \"\\\\b\") new-tag)\n        (util/replace-ignore-case (str \" \" old-tag \" \") (str \" \" new-tag \" \"))\n        (util/replace-ignore-case (str \" \" old-tag \"$\") (str \" \" new-tag)))))\n\n(defn- replace-old-page!\n  \"Unsanitized names\"\n  [content old-name new-name]\n  (when (and (string? content) (string? old-name) (string? new-name))\n    (-> content\n        (replace-page-ref! old-name new-name)\n        (replace-tag-ref! old-name new-name))))\n\n(defn- walk-replace-old-page!\n  \"Unsanitized names\"\n  [form old-name new-name]\n  (walk/postwalk (fn [f]\n                   (cond\n                     (and (vector? f)\n                          (contains? #{\"Search\" \"Label\"} (first f))\n                          (string/starts-with? (second f) (str old-name \"/\")))\n                     [(first f) (string/replace-first (second f)\n                                                      (str old-name \"/\")\n                                                      (str new-name \"/\"))]\n\n                     (string? f)\n                     (if (= f old-name)\n                       new-name\n                       (replace-old-page! f old-name new-name))\n\n                     :else\n                     f))\n                 form))\n\n(defn favorited?\n  [page-name]\n  (let [favorites (->> (:favorites (state/get-config))\n                       (filter string?)\n                       (map string/lower-case)\n                       (set))]\n    (contains? favorites page-name)))\n\n(defn favorite-page!\n  [page-name]\n  (when-not (string/blank? page-name)\n    (let [favorites (->\n                     (cons\n                      page-name\n                      (or (:favorites (state/get-config)) []))\n                     (distinct)\n                     (vec))]\n      (config-handler/set-config! :favorites favorites))))\n\n(defn unfavorite-page!\n  [page-name]\n  (when-not (string/blank? page-name)\n    (let [favorites (->> (:favorites (state/get-config))\n                         (remove #(= (string/lower-case %) (string/lower-case page-name)))\n                         (vec))]\n      (config-handler/set-config! :favorites favorites))))\n\n(defn toggle-favorite! []\n  ;; NOTE: in journals or settings, current-page is nil\n  (when-let [page-name (state/get-current-page)]\n   (let [favorites  (:favorites (state/sub-graph-config))\n         favorited? (contains? (set (map string/lower-case favorites))\n                               (string/lower-case page-name))]\n    (if favorited?\n      (unfavorite-page! page-name)\n      (favorite-page! page-name)))))\n\n(defn delete!\n  [page-name ok-handler & {:keys [delete-file?]\n                           :or {delete-file? true}}]\n  (when page-name\n    (when-let [repo (state/get-current-repo)]\n      (let [page-name (util/page-name-sanity-lc page-name)\n            blocks (db/get-page-blocks-no-cache page-name)\n            tx-data (mapv\n                     (fn [block]\n                       [:db.fn/retractEntity [:block/uuid (:block/uuid block)]])\n                     blocks)\n            page (db/entity [:block/name page-name])]\n        (db/transact! tx-data)\n\n        (when delete-file? (delete-file! repo page-name))\n\n        ;; if other page alias this pagename,\n        ;; then just remove some attrs of this entity instead of retractEntity\n        (when-not (:block/_namespace page)\n          (if (model/get-alias-source-page (state/get-current-repo) page-name)\n            (when-let [id (:db/id (db/entity [:block/name page-name]))]\n              (let [txs (mapv (fn [attribute]\n                                [:db/retract id attribute])\n                              db-schema/retract-page-attributes)]\n                (db/transact! txs)))\n            (db/transact! [[:db.fn/retractEntity [:block/name page-name]]])))\n\n        (unfavorite-page! page-name)\n\n        (when (fn? ok-handler) (ok-handler))\n        (ui-handler/re-render-root!)))))\n\n(defn- rename-update-block-refs!\n  [refs from-id to-id]\n  (->> refs\n       (remove #{{:db/id from-id}})\n       (cons {:db/id to-id})\n       (distinct)\n       (vec)))\n\n(defn- rename-update-refs!\n  \"Unsanitized only\"\n  [page old-original-name new-name]\n  ;; update all pages which have references to this page\n  (let [repo (state/get-current-repo)\n        to-page (db/entity [:block/name (util/page-name-sanity-lc new-name)])\n        blocks   (db/get-page-referenced-blocks-no-cache (:db/id page))\n        page-ids (->> (map :block/page blocks)\n                      (remove nil?)\n                      (set))\n        tx       (->> (map (fn [{:block/keys [uuid content properties] :as block}]\n                             (let [content    (let [content' (replace-old-page! content old-original-name new-name)]\n                                                (when-not (= content' content)\n                                                  content'))\n                                   properties (let [properties' (walk-replace-old-page! properties old-original-name new-name)]\n                                                (when-not (= properties' properties)\n                                                  properties'))]\n                               (when (or content properties)\n                                 (util/remove-nils-non-nested\n                                  {:block/uuid       uuid\n                                   :block/content    content\n                                   :block/properties properties\n                                   :block/refs (rename-update-block-refs! (:block/refs block) (:db/id page) (:db/id to-page))\n                                   :block/path-refs (rename-update-block-refs! (:block/path-refs block) (:db/id page) (:db/id to-page))})))) blocks)\n                      (remove nil?))]\n    (db/transact! repo tx)\n    (doseq [page-id page-ids]\n      (outliner-file/sync-to-file page-id))))\n\n(defn- rename-page-aux\n  \"Only accepts unsanitized page names\"\n  [old-name new-name redirect?]\n  (let [old-page-name       (util/page-name-sanity-lc old-name)\n        new-file-name       (util/file-name-sanity new-name)\n        new-page-name       (util/page-name-sanity-lc new-name)\n        repo                (state/get-current-repo)\n        page                (db/pull [:block/name old-page-name])]\n    (when (and repo page)\n      (let [old-original-name   (:block/original-name page)\n            file                (:block/file page)\n            journal?            (:block/journal? page)\n            properties-block    (:data (outliner-tree/-get-down (outliner-core/block page)))\n            properties-block-tx (when (and properties-block\n                                           (string/includes? (util/page-name-sanity-lc (:block/content properties-block))\n                                                             old-page-name))\n                                  (let [front-matter? (and (property/front-matter? (:block/content properties-block))\n                                                           (= :markdown (:block/format properties-block)))]\n                                    {:db/id         (:db/id properties-block)\n                                     :block/content (property/insert-property (:block/format properties-block)\n                                                                              (:block/content properties-block)\n                                                                              :title\n                                                                              new-name\n                                                                              front-matter?)}))\n            page-txs            [{:db/id               (:db/id page)\n                                  :block/uuid          (:block/uuid page)\n                                  :block/name          new-page-name\n                                  :block/original-name new-name}]\n            page-txs            (if properties-block-tx (conj page-txs properties-block-tx) page-txs)]\n\n        (d/transact! (db/get-db repo false) page-txs)\n\n        ;; If page name changed after sanitization\n        (when (or (util/create-title-property? new-page-name)\n                  (not= (util/page-name-sanity new-name false) new-name))\n          (page-property/add-property! new-page-name :title new-name))\n\n        (when (and file (not journal?))\n          (rename-file! file new-file-name (fn [] nil)))\n\n        (rename-update-refs! page old-original-name new-name)\n\n        (outliner-file/sync-to-file page))\n\n      ;; Redirect to the newly renamed page\n      (when redirect?\n        (route-handler/redirect! {:to          :page\n                                  :push        false\n                                  :path-params {:name new-page-name}}))\n\n      (when (favorited? old-page-name)\n        (p/do!\n         (unfavorite-page! old-page-name)\n         (favorite-page! new-page-name)))\n\n      (recent-handler/update-or-add-renamed-page repo old-page-name new-page-name)\n\n      (ui-handler/re-render-root!))))\n\n(defn- rename-nested-pages\n  \"Unsanitized names only\"\n  [old-ns-name new-ns-name]\n  (let [repo            (state/get-current-repo)\n        nested-page-str (util/format \"[[%s]]\" (util/page-name-sanity-lc old-ns-name))\n        ns-prefix       (util/format \"[[%s/\" (util/page-name-sanity-lc old-ns-name))\n        nested-pages    (db/get-pages-by-name-partition repo nested-page-str)\n        nested-pages-ns (db/get-pages-by-name-partition repo ns-prefix)]\n    (when nested-pages\n      ;; rename page \"[[obsidian]] is a tool\" to \"[[logseq]] is a tool\"\n      (doseq [{:block/keys [name original-name]} nested-pages]\n        (let [old-page-title (or original-name name)\n              new-page-title (string/replace\n                              old-page-title\n                              (util/format \"[[%s]]\" old-ns-name)\n                              (util/format \"[[%s]]\" new-ns-name))]\n          (when (and old-page-title new-page-title)\n            (p/do!\n             (rename-page-aux old-page-title new-page-title false)\n             (println \"Renamed \" old-page-title \" to \" new-page-title))))))\n    (when nested-pages-ns\n      ;; rename page \"[[obsidian/page1]] is a tool\" to \"[[logseq/page1]] is a tool\"\n      (doseq [{:block/keys [name original-name]} nested-pages-ns]\n        (let [old-page-title (or original-name name)\n              new-page-title (string/replace\n                              old-page-title\n                              (util/format \"[[%s/\" old-ns-name)\n                              (util/format \"[[%s/\" new-ns-name))]\n          (when (and old-page-title new-page-title)\n            (p/do!\n             (rename-page-aux old-page-title new-page-title false)\n             (println \"Renamed \" old-page-title \" to \" new-page-title))))))))\n\n(defn- rename-namespace-pages!\n  \"Original names (unsanitized only)\"\n  [repo old-name new-name]\n  (let [pages (db/get-namespace-pages repo old-name)\n        page (db/pull [:block/name (util/page-name-sanity-lc old-name)])\n        pages (cons page pages)]\n    (doseq [{:block/keys [name original-name]} pages]\n      (let [old-page-title (or original-name name)\n            new-page-title (string/replace old-page-title old-name new-name)\n            redirect? (= name (:block/name page))]\n        (when (and old-page-title new-page-title)\n          (p/let [_ (rename-page-aux old-page-title new-page-title redirect?)]\n            (println \"Renamed \" old-page-title \" to \" new-page-title)))))))\n\n(defn merge-pages!\n  \"Only accepts sanitized page names\"\n  [from-page-name to-page-name]\n  (when (and (db/page-exists? from-page-name)\n             (db/page-exists? to-page-name)\n             (not= from-page-name to-page-name))\n    (let [to-page (db/entity [:block/name to-page-name])\n          to-id (:db/id to-page)\n          from-page (db/entity [:block/name from-page-name])\n          from-id (:db/id from-page)\n          from-first-child (some->> (db/pull from-id)\n                                    (outliner-core/block)\n                                    (outliner-tree/-get-down)\n                                    (outliner-core/get-data))\n          to-last-direct-child-id (model/get-block-last-direct-child (db/get-db) to-id false)\n          repo (state/get-current-repo)\n          conn (conn/get-db repo false)\n          datoms (d/datoms @conn :avet :block/page from-id)\n          block-eids (mapv :e datoms)\n          blocks (db-utils/pull-many repo '[:db/id :block/page :block/refs :block/path-refs :block/left :block/parent] block-eids)\n          tx-data (map (fn [block]\n                         (let [id (:db/id block)]\n                           (cond->\n                            {:db/id id\n                             :block/page {:db/id to-id}\n                             :block/path-refs (rename-update-block-refs! (:block/path-refs block) from-id to-id)\n                             :block/refs (rename-update-block-refs! (:block/refs block) from-id to-id)}\n\n                             (and from-first-child (= id (:db/id from-first-child)))\n                             (assoc :block/left {:db/id (or to-last-direct-child-id to-id)})\n\n                             (= (:block/parent block) {:db/id from-id})\n                             (assoc :block/parent {:db/id to-id})))) blocks)]\n      (d/transact! conn tx-data)\n      (outliner-file/sync-to-file {:db/id to-id})\n\n      (rename-update-refs! from-page\n                           (util/get-page-original-name from-page)\n                           (util/get-page-original-name to-page)))\n\n    (delete! from-page-name nil)\n\n    (route-handler/redirect! {:to          :page\n                              :push        false\n                              :path-params {:name to-page-name}})))\n\n(defn rename!\n  \"Accepts unsanitized page names\"\n  [old-name new-name]\n  (let [repo          (state/get-current-repo)\n        old-name      (string/trim old-name)\n        new-name      (string/trim new-name)\n        old-page-name (util/page-name-sanity-lc old-name)\n        new-page-name (util/page-name-sanity-lc new-name)\n        name-changed? (not= old-name new-name)]\n    (if (and old-name\n             new-name\n             (not (string/blank? new-name))\n             name-changed?)\n      (do\n        (cond\n          (= old-page-name new-page-name)\n          (rename-page-aux old-name new-name true)\n\n          (db/pull [:block/name new-page-name])\n          (merge-pages! old-page-name new-page-name)\n\n          :else\n          (rename-namespace-pages! repo old-name new-name))\n        (rename-nested-pages old-name new-name))\n      (when (string/blank? new-name)\n        (notification/show! \"Please use a valid name, empty name is not allowed!\" :error)))))\n\n(defn- split-col-by-element\n  [col element]\n  (let [col (vec col)\n        idx (.indexOf col element)]\n    [(subvec col 0 (inc idx))\n     (subvec col (inc idx))]))\n\n(defn reorder-favorites!\n  [{:keys [to up?]}]\n  (let [favorites (:favorites (state/get-config))\n        from (get @state/state :favorites/dragging)]\n    (when (and from to (not= from to))\n      (let [[prev next] (split-col-by-element favorites to)\n            [prev next] (mapv #(remove (fn [e] (= from e)) %) [prev next])\n            favorites (->>\n                       (if up?\n                         (concat (drop-last prev) [from (last prev)] next)\n                         (concat prev [from] next))\n                       (remove nil?)\n                       (distinct))]\n        (config-handler/set-config! :favorites favorites)))))\n\n(defn has-more-journals?\n  []\n  (let [current-length (:journals-length @state/state)]\n    (< current-length (db/get-journals-length))))\n\n(defn load-more-journals!\n  []\n  (when (has-more-journals?)\n    (state/set-journals-length! (+ (:journals-length @state/state) 7))))\n\n(defn update-public-attribute!\n  [page-name value]\n  (page-property/add-property! page-name :public value))\n\n(defn get-page-ref-text\n  [page]\n  (let [edit-block-file-path (model/get-block-file-path (state/get-edit-block))\n        page-name (string/lower-case page)]\n    (if (and edit-block-file-path\n             (state/org-mode-file-link? (state/get-current-repo)))\n      (if-let [ref-file-path (:file/path (db/get-page-file page-name))]\n        (util/format \"[[file:%s][%s]]\"\n                     (util/get-relative-path edit-block-file-path ref-file-path)\n                     page)\n        (let [journal? (date/valid-journal-title? page)\n              ref-file-path (str\n                             (if (or (util/electron?) (mobile-util/is-native-platform?))\n                               (-> (config/get-repo-dir (state/get-current-repo))\n                                   js/decodeURI\n                                   (string/replace #\"/+$\" \"\")\n                                   (str \"/\"))\n                               \"\")\n                             (get-directory journal?)\n                             \"/\"\n                             (get-file-name journal? page)\n                             \".org\")]\n          (create! page {:redirect? false})\n          (util/format \"[[file:%s][%s]]\"\n                       (util/get-relative-path edit-block-file-path ref-file-path)\n                       page)))\n      (util/format \"[[%s]]\" page))))\n\n(defn init-commands!\n  []\n  (commands/init-commands! get-page-ref-text))\n\n(def rebuild-slash-commands-list!\n  (debounce init-commands! 1500))\n\n(defn template-exists?\n  [title]\n  (when title\n    (let [templates (keys (db/get-all-templates))]\n      (when (seq templates)\n        (let [templates (map string/lower-case templates)]\n          (contains? (set templates) (string/lower-case title)))))))\n\n(defn ls-dir-files!\n  [ok-handler]\n  (web-nfs/ls-dir-files-with-handler!\n   (fn []\n     (init-commands!)\n     (when ok-handler (ok-handler)))))\n\n(defn get-all-pages\n  [repo]\n  (->> (db/get-all-pages repo)\n       (remove (fn [p]\n                 (let [name (:block/name p)]\n                   (or (gp-util/uuid-string? name)\n                       (gp-config/draw? name)\n                       (db/built-in-pages-names (string/upper-case name))))))\n       (common-handler/fix-pages-timestamps)))\n\n(defn get-filters\n  [page-name]\n  (let [properties (db/get-page-properties page-name)\n        properties-str (get properties :filters \"{}\")]\n    (try (reader/read-string properties-str)\n         (catch js/Error e\n           (log/error :syntax/filters e)))))\n\n(defn save-filter!\n  [page-name filter-state]\n  (page-property/add-property! page-name :filters filter-state))\n\n;; Editor\n(defn page-not-exists-handler\n  [input id q current-pos]\n  (state/set-editor-show-page-search! false)\n  (if (state/org-mode-file-link? (state/get-current-repo))\n    (let [page-ref-text (get-page-ref-text q)\n          value (gobj/get input \"value\")\n          old-page-ref (util/format \"[[%s]]\" q)\n          new-value (string/replace value\n                                    old-page-ref\n                                    page-ref-text)]\n      (state/set-edit-content! id new-value)\n      (let [new-pos (+ current-pos\n                       (- (count page-ref-text)\n                          (count old-page-ref))\n                       2)]\n        (cursor/move-cursor-to input new-pos)))\n    (let [current-selected (util/get-selected-text)]\n      (cursor/move-cursor-forward input (+ 2 (count current-selected))))))\n\n(defn on-chosen-handler\n  [input id _q pos format]\n  (let [current-pos (cursor/pos input)\n        edit-content (state/sub [:editor/content id])\n        q (or\n           @editor-handler/*selected-text\n           (when (state/sub :editor/show-page-search-hashtag?)\n             (gp-util/safe-subs edit-content pos current-pos))\n           (when (> (count edit-content) current-pos)\n             (gp-util/safe-subs edit-content pos current-pos)))]\n    (if (state/sub :editor/show-page-search-hashtag?)\n      (fn [chosen _click?]\n        (state/set-editor-show-page-search! false)\n        (let [wrapped? (= \"[[\" (gp-util/safe-subs edit-content (- pos 2) pos))\n              chosen (if (string/starts-with? chosen \"New page: \") ;; FIXME: What if a page named \"New page: XXX\"?\n                       (subs chosen 10)\n                       chosen)\n              chosen (if (and (gp-util/safe-re-find #\"\\s+\" chosen) (not wrapped?))\n                       (util/format \"[[%s]]\" chosen)\n                       chosen)\n              q (if @editor-handler/*selected-text \"\" q)\n              [last-pattern forward-pos] (if wrapped?\n                                           [q 3]\n                                           (if (= \\# (first q))\n                                             [(subs q 1) 1]\n                                             [q 2]))\n              last-pattern (str \"#\" (when wrapped? \"[[\") last-pattern)]\n          (editor-handler/insert-command! id\n                                          (str \"#\" (when wrapped? \"[[\") chosen)\n                                          format\n                                          {:last-pattern last-pattern\n                                           :end-pattern (when wrapped? \"]]\")\n                                           :forward-pos forward-pos})))\n      (fn [chosen _click?]\n        (state/set-editor-show-page-search! false)\n        (let [chosen (if (string/starts-with? chosen \"New page: \")\n                       (subs chosen 10)\n                       chosen)\n              page-ref-text (get-page-ref-text chosen)]\n          (editor-handler/insert-command! id\n                                          page-ref-text\n                                          format\n                                          {:last-pattern (str \"[[\" (if @editor-handler/*selected-text \"\" q))\n                                           :end-pattern \"]]\"\n                                           :postfix-fn   (fn [s] (util/replace-first \"]]\" s \"\"))\n                                           :forward-pos 3}))))))\n\n(defn create-today-journal!\n  []\n  (when-let [repo (state/get-current-repo)]\n    (when (and (state/enable-journals? repo)\n               (not (state/loading-files? repo)))\n      (state/set-today! (date/today))\n      (when (or (config/local-db? repo)\n                (and (= \"local\" repo) (not (mobile-util/is-native-platform?))))\n        (let [title (date/today)\n              today-page (util/page-name-sanity-lc title)\n              format (state/get-preferred-format repo)\n              file-name (date/journal-title->default title)\n              path (str (config/get-journals-directory) \"/\" file-name \".\"\n                        (config/get-file-extension format))\n              file-path (str \"/\" path)\n              repo-dir (config/get-repo-dir repo)\n              template (state/get-default-journal-template)]\n          (p/let [file-exists? (fs/file-exists? repo-dir file-path)\n                  file-content (when file-exists?\n                                 (fs/read-file repo-dir file-path))]\n            (when (and (db/page-empty? repo today-page)\n                       (or (not file-exists?)\n                           (and file-exists? (string/blank? file-content))))\n              (create! title {:redirect? false\n                              :split-namespace? false\n                              :create-first-block? (not template)\n                              :journal? true})\n              (state/pub-event! [:journal/insert-template today-page])\n              (ui-handler/re-render-root!))))))))\n\n(defn open-today-in-sidebar\n  []\n  (when-let [page (db/entity [:block/name (util/page-name-sanity-lc (date/today))])]\n    (state/sidebar-add-block!\n     (state/get-current-repo)\n     (:db/id page)\n     :page)))\n\n(defn open-file-in-default-app []\n  (when-let [file-path (and (util/electron?) (get-page-file-path))]\n    (js/window.apis.openPath file-path)))\n\n(defn copy-current-file []\n  (when-let [file-path (and (util/electron?) (get-page-file-path))]\n    (util/copy-to-clipboard! file-path)))\n\n(defn open-file-in-directory []\n  (when-let [file-path (and (util/electron?) (get-page-file-path))]\n    (js/window.apis.showItemInFolder file-path)))\n"]}