{"version":3,"sources":["frontend/handler/repeated.cljs"],"mappings":"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","names":["frontend.handler.repeated/custom-formatter","cljs_time.format.formatter","frontend.handler.repeated/repeated?","timestamp","frontend.handler.repeated/get-duration-f-and-text","duration","G__96526","cljs-time.core/hours","cljs-time.core/days","cljs-time.core/weeks","cljs-time.core/months","cljs-time.core/years","frontend.handler.repeated/get-repeater-symbol","kind","G__96535","var_args","G__96552","frontend.handler.repeated/timestamp->text","js/Error","p__96556","map__96557","cljs.core/--destructure-map","cljs.core.get","frontend.handler.repeated.timestamp__GT_text","date","repetition","time","start-time","map__96562","map__96563","vec__96564","cljs.core.nth","vec__96567","vec__96570","vec__96574","vec__96580","year","month","day","hour","min","cljs-time.core/hour","cljs-time.core/minute","num","or__4253__auto__","cljs_time.core.local_date_time","_duration-f","d","repeater","and__4251__auto__","time-repeater","frontend.util/zero-pad","clojure.string/blank?","frontend.util.format","cljs-time.format/unparse","frontend.handler.repeated/repeat-until-future-timestamp","datetime","now","delta","keep-week?","cljs_time.core.plus","result","cljs-time.core/after?","w1","cljs-time.core/day-of-week","w2","cljs.core.not_EQ_","cljs_time.core.days","p__96589","map__96590","frontend.handler.repeated/next-timestamp-text","map__96593","map__96594","vec__96595","vec__96598","vec__96601","vec__96604","week?","cljs.core._EQ_","duration-f","_","cljs-time.local/local-now","start-time'","G__96642","p__96646","map__96648","frontend.handler.repeated/timestamp-map->text","map__96649","p__96658","map__96661","frontend.handler.repeated/timestamp->map","map__96664","map__96665","vec__96666","vec__96669","vec__96672","cljs-time.core/local-date","cljs.core/last"],"sourcesContent":["(ns frontend.handler.repeated\n  (:require [cljs-time.core :as t]\n            [cljs-time.local :as tl]\n            [cljs-time.format :as tf]\n            [clojure.string :as string]\n            [frontend.util :as util]))\n\n(def custom-formatter (tf/formatter \"yyyy-MM-dd EEE\"))\n\n(defn repeated?\n  [timestamp]\n  (some? (:repetition timestamp)))\n\n(defn- get-duration-f-and-text\n  [duration]\n  (case duration\n    \"Hour\"\n    [t/hours \"h\"]\n    \"Day\"\n    [t/days \"d\"]\n    \"Week\"\n    [t/weeks \"w\"]\n    \"Month\"\n    [t/months \"m\"]\n    \"Year\"\n    [t/years \"y\"]\n    nil))\n\n(defn get-repeater-symbol\n  [kind]\n  (case kind\n    \"Plus\"\n    \"+\"\n    \"Dotted\"\n    \".+\"\n    \"++\"))\n\n(defn timestamp->text\n  ([timestamp]\n   (timestamp->text timestamp nil))\n  ([{:keys [date repetition time]} start-time]\n   (let [{:keys [year month day]} date\n         {:keys [hour min]\n          :or {hour 0 min 0}} time\n         [hour min] (if start-time\n                      [(t/hour start-time)\n                       (t/minute start-time)]\n                      [hour min])\n         [[kind] [duration] num] repetition\n         start-time (or start-time (t/local-date-time year month day hour min))\n         [_duration-f d] (get-duration-f-and-text duration)\n         kind (get-repeater-symbol kind)\n         repeater (when (and kind num d)\n                    (str kind num d))\n         time-repeater (if time\n                         (str (util/zero-pad hour) \":\" (util/zero-pad min)\n                              (if (string/blank? repeater)\n                                \"\"\n                                (str \" \" repeater)))\n                         repeater)]\n     (util/format \"%s%s\"\n                  (tf/unparse custom-formatter start-time)\n                  (if (string/blank? time-repeater)\n                    \"\"\n                    (str \" \" time-repeater))))))\n\n(defn- repeat-until-future-timestamp\n  [datetime now delta keep-week?]\n  (let [datetime (t/plus datetime delta)\n        result (loop [result datetime]\n                 (if (t/after? result now)\n                   result\n                   (recur (t/plus result delta))))\n        w1 (t/day-of-week datetime)\n        w2 (t/day-of-week result)]\n    (if (and keep-week? (not= w1 w2))\n      ;; next week\n      (if (> w2 w1)\n        (t/plus result (t/days (- 7 (- w2 w1))))\n        (t/plus result (t/days (- w1 w2))))\n      result)))\n\n(defn next-timestamp-text\n  [{:keys [date repetition time] :as timestamp}]\n  (let [{:keys [year month day]} date\n        {:keys [hour min]\n         :or {hour 0 min 0}} time\n        [[kind] [duration] num] repetition\n        week? (or (= duration \"Week\")\n                  (= duration \"w\"))\n        [duration-f _] (get-duration-f-and-text duration)\n        delta (duration-f num)\n        start-time (t/local-date-time year month day hour min)\n        now (tl/local-now)\n        start-time' (case kind\n                      \"Dotted\"\n                      (repeat-until-future-timestamp start-time now delta week?)\n\n                      \"DoublePlus\"\n                      (if (t/after? start-time now)\n                        start-time\n                        (t/plus start-time delta))\n\n\n                      ;; \"Plus\"\n                      (t/plus start-time delta))]\n    (timestamp->text timestamp start-time')))\n\n(defn timestamp-map->text\n  [{:keys [date time repeater]}]\n  (let [{:keys [kind duration num]} repeater\n        repeater (when (and kind num duration)\n                   (str kind num duration))\n        time-repeater (if-not (string/blank? time)\n                        (str time\n                             (if (string/blank? repeater)\n                               \"\"\n                               (str \" \" repeater)))\n                        repeater)]\n    (util/format \"<%s%s>\"\n                 (tf/unparse custom-formatter date)\n                 (if (string/blank? time-repeater)\n                   \"\"\n                   (str \" \" time-repeater)))))\n\n(defn timestamp->map\n  [{:keys [date repetition time]}]\n  (let [{:keys [year month day]} date\n        {:keys [hour min]} time\n        [[kind] [duration] num] repetition]\n    {:date (t/local-date year month day)\n     :time (when (and hour min)\n             (str (util/zero-pad hour) \":\" (util/zero-pad min)))\n     :repeater (when (and kind duration num)\n                 {:kind (get-repeater-symbol kind)\n                  :duration (last (get-duration-f-and-text duration))\n                  :num num})}))\n"]}