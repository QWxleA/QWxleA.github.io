{
"version":3,
"file":"module$node_modules$codemirror$mode$pig$pig.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/codemirror/mode/pig/pig.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$pig$pig\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n *      Pig Latin Mode for CodeMirror 2\n *      @author Prasanth Jayachandran\n *      @link   https://github.com/prasanthj/pig-codemirror-2\n *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pig\", function(_config, parserConfig) {\n  var keywords = parserConfig.keywords,\n  builtins = parserConfig.builtins,\n  types = parserConfig.types,\n  multiLineStrings = parserConfig.multiLineStrings;\n\n  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n\n  function tokenComment(stream, state) {\n    var isEnd = false;\n    var ch;\n    while(ch = stream.next()) {\n      if(ch == \"/\" && isEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      isEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true; break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"error\";\n    };\n  }\n\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    // is a start of string?\n    if (ch == '\"' || ch == \"'\")\n      return chain(stream, state, tokenString(ch));\n    // is it one of the special chars\n    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n      return null;\n    // is it a number?\n    else if(/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    // multi line comment or operator\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        return chain(stream, state, tokenComment);\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // single line comment or operator\n    else if (ch==\"-\") {\n      if(stream.eat(\"-\")){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      else {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n    }\n    // is it an operator\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      // get the while word\n      stream.eatWhile(/[\\w\\$_]/);\n      // is it one of the listed keywords?\n      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n        //keywords can be used as variables like flatten(group), group.$0 etc..\n        if (!stream.eat(\")\") && !stream.eat(\".\"))\n          return \"keyword\";\n      }\n      // is it one of the builtin functions?\n      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-2\";\n      // is it one of the listed types?\n      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n        return \"variable-3\";\n      // default is a 'variable'\n      return \"variable\";\n    }\n  }\n\n  // Interface\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      if(stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      return style;\n    }\n  };\n});\n\n(function() {\n  function keywords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  // builtin funcs taken from trunk revision 1303237\n  var pBuiltins = \"ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL \"\n    + \"CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS \"\n    + \"DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG \"\n    + \"FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN \"\n    + \"INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER \"\n    + \"ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS \"\n    + \"LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  \"\n    + \"PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE \"\n    + \"SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG \"\n    + \"TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER \";\n\n  // taken from QueryLexer.g\n  var pKeywords = \"VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP \"\n    + \"JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL \"\n    + \"PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE \"\n    + \"SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE \"\n    + \"NEQ MATCHES TRUE FALSE DUMP\";\n\n  // data types\n  var pTypes = \"BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP \";\n\n  CodeMirror.defineMIME(\"text/x-pig\", {\n    name: \"pig\",\n    builtins: keywords(pBuiltins),\n    keywords: keywords(pKeywords),\n    types: keywords(pTypes)\n  });\n\n  CodeMirror.registerHelper(\"hintWords\", \"pig\", (pBuiltins + pTypes + pKeywords).split(\" \"));\n}());\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","_config","parserConfig","tokenComment","stream","state","isEnd","ch","next","tokenize","tokenBase","tokenString","quote","escaped","end","multiLineStrings","f","test","eatWhile","eat","isOperatorChar","skipToEnd","keywords","propertyIsEnumerable","current","toUpperCase","builtins","types","startState","startOfLine","token","eatSpace","style","str","obj","words","split","i","length","defineMIME","name","pBuiltins","pKeywords","pTypes","registerHelper"]
}
