{"version":3,"sources":["frontend/extensions/graph.cljs"],"mappings":";;;;AAQA,uDAAA,vDAAOA,sHACAC,MAAMC,KAAKC,YAAYC;AAD9B,AAEE,OACC,AAASH,4BAAOC,KAChB,WAAKA,SAAKG;AAAV,AACE,GAAU,AAACC,0BAAUH,YAAYD;AAAjC;;AAAA,AACE,IAAMG,iBAAW,AAACE,wBAAWF;IACvBA,iBAAW,oEAAA,uDAAA,4DAAA,yDAAA,2CAAA,uDAAA,IAAA,uDAAA,7YAACG,qDAAMH;AADxB,AAKE,OAAiBJ,qBAAMC,SAAK,AAACO,uBAAUJ;;;;AAEhD,kDAAA,lDAAOK,4GACAT,MAAMC,KAAKS;AADlB,AAEE,OACC,AAASV,wBAAOC,KAChB,WAAKU,KAAKC;AAAV,AACE,OAAiBZ,qBAAMW,KAAK,uBAAA,2CAAA,uDAAA,IAAA,7HAACH,oLACkB,+BAAA,OAAA,pBAAIE;;;AAExD,6CAAA,7CAAMG,kGAAkBb,MAAMC,KAAKa,MAAMC,kBAAaC,aAAQC,YAAMP;AAApE,AAEE,oBAAI,iBAAAQ,mBAAI,4DAAA,5DAACC,sDAASL;AAAd,AAAA,oBAAAI;AAAAA;;AAAgCD;;;AAClC,AACE,oBAAA,AAAAG,gBAAWJ;AAAX;AAAA,AACE,AAACK,mDAAMN,kBACA,WAAKO;AAAL,AACE,OAACC,cAAI,AAACC,iDAAS,AAACC,6CAAKH,EAAErB;;;;AAElC,kCAAA,SAAA,3CAAmB,AAASD,6BAAOC;;AACnC,AAACF,qDAAsBC,MAAMC,KAAK,cAAA,AAAAmB,dAACM,8BAAKX,oBAAcL;;AACtD,OAACD,gDAAiBT,MAAMC,KAAKS;;AAC/B,oBAAUO;AAAV;;AAAA,AACE,IAAMU,YAAU,AAACC,uEAA6B3B;AAA9C,AACE,AAAkBD,kBAAMC;;AACxB,OAAC4B,4EAAgCF;;;;AAEzC,qCAAA,AAAAG,oBAAAC,qBAAA,9EAAWE,yFAWRQ,MAAMG;AAXT,AAAA,AAAA,OAAAZ,6BAAA,MAAA,OAYoB,WAAKa;AAAL,AACE,IAAMC,MAAI,kDAAA,lDAACC,4CAAIN;AAAf,AACE,oBAAM,iBAAAO,oBAAKF;AAAL,AAAA,oBAAAE;AAASH;;AAATG;;;AAAN,AACE,OAACN,sBAAOI,IAAID;;AADd;;eAdxB,SAAA;GAAA,yLAAA,2CAAA,8GAAA,/PACE,6CAAA,KAAA,lDAACX,mNACYC,oHACG,WAAKC,UAAUC;AAAf,AACE,OAACC,gDAAK,0IAAA,mFAAA,wDAAA,uDAAA,5UAACC,sBAAY,AAACC,gBAAM,AAAA,wFAAWJ,6QAE/B,0IAAA,mFAAA,wDAAA,uDAAA,5UAACG,sBAAY,AAACC,gBAAM,AAAA,wFAAWH;GANzD,qEAQiB,WAAKI;AAAL,AACE,0EAAA,1EAACC,sBAAOC;;AACRF;mBAVnB","names":["frontend.extensions.graph/highlight-neighbours!","graph","node","focus-nodes","_dark?","attributes","cljs.core/contains?","cljs-bean.core/->clj","cljs.core.assoc","cljs-bean.core/->js","frontend.extensions.graph/highlight-edges!","dark?","edge","_attributes","frontend.extensions.graph/on-click-handler","event","*focus-nodes","*n-hops","drag?","or__4253__auto__","frontend.extensions.graph.goog$module$goog$object.get","cljs.core/deref","cljs.core.swap_BANG_","v","cljs.core/vec","cljs.core.distinct","cljs.core.conj","cljs.core/set","page-name","frontend.db.model.get_redirect_page_name","frontend.handler.route.redirect_to_page_BANG_","rum.core/lazy-build","rum.core/build-defcs","daiquiri.core/create-element","frontend.extensions.graph/graph-2d","rum.core.local","frontend.extensions.graph.pixi/render!","old-state","new-state","cljs.core.not_EQ_","cljs.core/select-keys","cljs.core/first","state","cljs.core/reset!","frontend.extensions.graph.pixi/*graph-instance","_opts","value","ref","cljs.core.get","and__4251__auto__"],"sourcesContent":["(ns frontend.extensions.graph\n  (:require [cljs-bean.core :as bean]\n            [frontend.db.model :as model]\n            [frontend.extensions.graph.pixi :as pixi]\n            [frontend.handler.route :as route-handler]\n            [goog.object :as gobj]\n            [rum.core :as rum]))\n\n(defn- highlight-neighbours!\n  [^js graph node focus-nodes _dark?]\n  (.forEachNeighbor\n   (.-graph graph) node\n   (fn [node attributes]\n     (when-not (contains? focus-nodes node)\n       (let [attributes (bean/->clj attributes)\n             attributes (assoc attributes\n                               :color \"#6366F1\"\n                               :border {:width 2\n                                        :color \"#6366F1\"})]\n         (.resetNodeStyle graph node (bean/->js attributes)))))))\n\n(defn- highlight-edges!\n  [^js graph node dark?]\n  (.forEachEdge\n   (.-graph graph) node\n   (fn [edge _attributes]\n     (.resetEdgeStyle graph edge (bean/->js {:width 1\n                                             :color (if dark? \"#999\" \"#A5B4FC\")})))))\n\n(defn on-click-handler [graph node event *focus-nodes *n-hops drag? dark?]\n  ;; shift+click to select the page\n  (if (or (gobj/get event \"shiftKey\") drag?)\n    (do\n      (when-not @*n-hops\n        (swap! *focus-nodes ;; Don't trigger re-render\n               (fn [v]\n                 (vec (distinct (conj v node))))))\n      ;; highlight current node\n      (.setNodeAttribute (.-graph graph) node \"parent\" \"ls-selected-nodes\")\n      (highlight-neighbours! graph node (set @*focus-nodes) dark?)\n      (highlight-edges! graph node dark?))\n    (when-not drag?\n      (let [page-name (model/get-redirect-page-name node)]\n        (.unhoverNode ^js graph node)\n        (route-handler/redirect-to-page! page-name)))))\n\n(rum/defcs graph-2d <\n  (rum/local nil :ref)\n  {:did-update pixi/render!\n   :should-update (fn [old-state new-state]\n                    (not= (select-keys (first (:rum/args old-state))\n                                       [:nodes :links :dark?])\n                          (select-keys (first (:rum/args new-state))\n                                       [:nodes :links :dark?])))\n   :will-unmount (fn [state]\n                   (reset! pixi/*graph-instance nil)\n                   state)}\n  [state _opts]\n  [:div.graph {:ref (fn [value]\n                      (let [ref (get state :ref)]\n                        (when (and ref value)\n                          (reset! ref value))))}])\n"]}