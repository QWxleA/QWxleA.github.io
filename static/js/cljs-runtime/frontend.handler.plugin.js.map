{"version":3,"sources":["frontend/handler/plugin.cljs"],"mappings":"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","names":["js/frontend","js/frontend.handler","js/frontend.handler.plugin","js/frontend.handler.plugin.lsp-enabled?","frontend.handler.plugin/lsp-enabled?","and__4251__auto__","frontend.util/electron?","frontend.state/lsp-enabled?-or-theme","frontend.handler.plugin/normalize-keyword-for-json","input","clojure.walk/postwalk","a","cljs.core/Keyword","camel-snake-kebab.core/->camelCase","cljs.core/name","cljs.core/uuid?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.handler.plugin/invoke-exported-api","seq62063","G__62064","cljs.core/first","cljs.core/next","self__4851__auto__","type","args","e62065","cljs.core.apply","cljs.core/js-invoke","js/window.logseq","js/Error","e","js/console.error","js/frontend.handler.plugin.central-endpoint","frontend.handler.plugin/central-endpoint","js/frontend.handler.plugin.plugins-url","frontend.handler.plugin/plugins-url","js/frontend.handler.plugin.stats-url","frontend.handler.plugin/stats-url","frontend.handler.plugin/gh-repo-url","repo","frontend.handler.plugin/pkg-asset","id","asset","clojure.string/starts-with?","temp__5720__auto__","clojure.string/replace","frontend.handler.plugin/load-marketplace-plugins","refresh?","or__4253__auto__","cljs.core/deref","frontend.state/state","promesa.core.create","resolve","reject","frontend.util.fetch","res","pkgs","frontend.state/set-state!","promesa.core.catch$","promesa.core/resolved","frontend.handler.plugin/load-marketplace-stats","cljs.core.into","cljs.core.map","p__62075","vec__62076","cljs.core.nth","k","stat","cljs.core.assoc","cljs.core.reduce","b","cljs.core.get","frontend.handler.plugin/installed?","cljs.core/contains?","cljs.core.keyword","cljs.core.get_in","p__62083","map__62085","cljs.core/--destructure-map","frontend.handler.plugin/install-marketplace-plugin","mft","electron.ipc.ipc","p__62091","map__62093","frontend.handler.plugin/check-or-update-marketplace-plugin","pkg","error-handler","cljs.core/not","promesa.core.then","frontend.state/reset-all-updates-state","mfts","p1__62088#","cljs.core/some","cljs.core._EQ_","cljs.core.merge","cljs.core.dissoc","frontend.handler.plugin/get-plugin-inst","e62097","js/LSPluginCore.ensurePlugin","_e","frontend.handler.plugin/open-updates-downloading","cljs.core/seq","frontend.state/all-available-coming-updates","p1__62098#","frontend.state/coming-update-new-version?","cljs.core/second","cljs.core.update","cljs.core/dissoc","frontend.handler.plugin/close-updates-downloading","frontend.handler.plugin/has-setting-schema?","pl","cljs.core/boolean","frontend.handler.plugin/get-enabled-plugins-if-setting-schema","plugins","frontend.state.get_enabled_QMARK__installed_plugins","p1__62109#","cljs.core.filter","frontend.handler.plugin/setup-install-listener!","t","channel","listener","_","js/console.debug","map__62121","status","payload","only-check","cljs-bean.core/->clj","G__62122","map__62123","dst","name","title","theme","frontend.state/consume-updates-coming-plugin","frontend.handler.notification.show_BANG_","js/LSPluginCore.register","cljs-bean.core/->js","js/setTimeout","frontend.handler.plugin/select-a-plugin-theme","vec__62127","error-code","msg","G__62130","pending?","js/window.apis.addListener","js/window.apis.removeAllListeners","frontend.handler.plugin/register-plugin","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/assoc","frontend.handler.plugin/unregister-plugin","js/LSPluginCore.unregister","frontend.handler.plugin/host-mounted!","js/LSPluginCore.hostMounted","p__62142","vec__62143","frontend.handler.plugin/register-plugin-slash-command","pid","cmd","actions","cljs.core.fnil","cljs.core/merge","cljs.core/PersistentHashMap","p1__62140#","cljs.core.mapv","cljs.core.conj","frontend.state/pub-event!","frontend.handler.plugin/unregister-plugin-slash-command","medley.core/dissoc-in","frontend.handler.plugin/keybinding-mode-handler-map","p__62156","map__62160","frontend.handler.plugin/simple-cmd->palette-cmd","key","label","desc","keybinding","action","palette-cmd","shortcut","frontend.util/mac?","mode","frontend.handler.plugin/simple-cmd-keybinding->shortcut-args","binding","p__62168","map__62169","frontend.handler.plugin/register-plugin-simple-command","cljs.core/conj","frontend.handler.plugin/unregister-plugin-simple-command","p__62173","map__62174","frontend.handler.plugin/register-plugin-ui-item","opts","frontend.handler.plugin/unregister-plugin-ui-items","cljs.core/assoc-in","p__62176","map__62177","frontend.handler.plugin/register-plugin-resources","path","frontend.handler.plugin/unregister-plugin-resources","G__62183","frontend.handler.plugin/unregister-plugin-themes","frontend.handler.plugin.unregister_plugin_themes","effect","js/LSPluginCore.unregisterTheme","frontend.handler.plugin/*fenced-code-providers","cljs.core.atom","p__62192","map__62193","frontend.handler.plugin/register-fenced-code-renderer","before","subs","render","edit","_opts","cljs.core/disj","frontend.handler.plugin/hook-fenced-code-by-type","p1__62196#","frontend.state/get-plugin-resource","frontend.handler.plugin/*extensions-enhancer-providers","p__62209","map__62210","frontend.handler.plugin/register-extensions-enhancer","enhancer","frontend.handler.plugin/hook-extensions-enhancer-by-type","p1__62213#","themes","cljs.core/group-by","theme-mode","frontend.state/set-theme!","js/LSPluginCore.selectTheme","frontend.handler.plugin/update-plugin-settings-state","settings","frontend.handler.plugin/open-settings-file-in-default-app!","id-or-plugin","plugin","cljs.core/coll?","frontend.state/get-plugin-by-id","file-path","js/apis.openPath","G__62231","frontend.handler.plugin/open-plugin-settings!","frontend.handler.plugin.open_plugin_settings_BANG_","nav?","p__62241","map__62242","frontend.handler.plugin/parse-user-md-content","content","url","e62244","clojure.string/blank?","p__62248","vec__62250","matched","link","frontend.util/node-path","frontend.format.to_html","logseq.graph_parser.mldoc.default_config","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.plugin/open-readme!","item","display","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","frontend.handler.plugin.invoke_exported_api","clojure.string/trim","frontend.state.set_sub_modal_BANG_","p1__62266#","js/console.warn","frontend.handler.plugin/load-unpacked-plugin","frontend.handler.plugin/reset-unpacked-state","frontend.handler.plugin/hook-plugin","tag","plugin-id","e62290","cljs.core.js_invoke","js/LSPluginCore","clojure.string/capitalize","G__62302","frontend.handler.plugin/hook-plugin-app","frontend.handler.plugin.hook_plugin_app","G__62318","frontend.handler.plugin/hook-plugin-editor","frontend.handler.plugin.hook_plugin_editor","G__62330","frontend.handler.plugin/hook-plugin-db","frontend.handler.plugin.hook_plugin_db","p__62338","map__62339","frontend.handler.plugin/hook-plugin-block-changes","blocks","tx-data","tx-meta","seq__62340","chunk__62342","count__62343","i__62344","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","tx-data'","frontend.handler.plugin/get-ls-dotdir-root","frontend.handler.plugin/make-fn-to-load-dotdir-json","dirname","default","exist?","frontend.fs/file-exists?","frontend.fs/mkdir!","G__62371","G__62372","G__62373","frontend.fs.create_if_not_exists","json","frontend.fs.read_file","js/JSON.parse","frontend.handler.plugin/make-fn-to-save-dotdir-json","G__62374","G__62375","G__62376","frontend.fs/write-file!","frontend.handler.plugin/make-fn-to-unlink-dotdir-json","G__62377","G__62378","G__62379","frontend.fs/unlink!","frontend.handler.plugin/show-themes-modal!","frontend.handler.plugin/goto-plugins-dashboard!","frontend.handler.plugin/get-user-default-plugins","files","cljs.core.js__GT_clj","p1__62380#","frontend.handler.plugin/check-enabled-for-updates","theme?","cljs.core.take","v","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","daiquiri.interpreter/interpret","frontend.handler.plugin/lsp-indicator","rum.core/reactive","text","frontend.state/sub","frontend.components.svg/logo","frontend.handler.plugin/init-plugins!","callback","el","js/document.createElement","js/document.body","rum.core/mount","root","js/LSPlugin","clear-commands!","G__62382","js/JSON","cljs.core/vec","cljs.core.mapcat","p__62383","vec__62384","vs","p1__62381#","default-plugins","frontend.handler.plugin/setup!"],"sourcesContent":["(ns frontend.handler.plugin\n  (:require [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.util :as util]\n            [clojure.walk :as walk]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [frontend.handler.notification :as notifications]\n            [camel-snake-kebab.core :as csk]\n            [frontend.state :as state]\n            [medley.core :as medley]\n            [frontend.fs :as fs]\n            [electron.ipc :as ipc]\n            [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            [lambdaisland.glogi :as log]\n            [frontend.components.svg :as svg]\n            [frontend.format :as format]))\n\n(defonce lsp-enabled?\n         (and (util/electron?)\n              (state/lsp-enabled?-or-theme)))\n\n(defn- normalize-keyword-for-json\n  [input]\n  (when input\n    (walk/postwalk\n      (fn [a]\n        (cond\n          (keyword? a) (csk/->camelCase (name a))\n          (uuid? a) (str a)\n          :else a)) input)))\n\n(defn invoke-exported-api\n  [type & args]\n  (try\n    (apply js-invoke (aget js/window.logseq \"api\") type args)\n    (catch js/Error e (js/console.error e))))\n\n;; state handlers\n(defonce central-endpoint \"https://raw.githubusercontent.com/logseq/marketplace/master/\")\n(defonce plugins-url (str central-endpoint \"plugins.json\"))\n(defonce stats-url (str central-endpoint \"stats.json\"))\n(declare select-a-plugin-theme)\n\n(defn gh-repo-url [repo]\n  (str \"https://github.com/\" repo))\n\n(defn pkg-asset [id asset]\n  (if (and asset (string/starts-with? asset \"http\"))\n    asset (when-let [asset (and asset (string/replace asset #\"^[./]+\" \"\"))]\n            (str central-endpoint \"packages/\" id \"/\" asset))))\n\n(defn load-marketplace-plugins\n  [refresh?]\n  (if (or refresh? (nil? (:plugin/marketplace-pkgs @state/state)))\n    (p/create\n      (fn [resolve reject]\n        (-> (util/fetch plugins-url\n                        (fn [res]\n                          (let [pkgs (:packages res)]\n                            (state/set-state! :plugin/marketplace-pkgs pkgs)\n                            (resolve pkgs)))\n                        reject)\n            (p/catch reject))))\n    (p/resolved (:plugin/marketplace-pkgs @state/state))))\n\n(defn load-marketplace-stats\n  [refresh?]\n  (if (or refresh? (nil? (:plugin/marketplace-stats @state/state)))\n    (p/create\n      (fn [resolve reject]\n        (util/fetch stats-url\n                    (fn [res]\n                      (when res\n                        (state/set-state!\n                          :plugin/marketplace-stats\n                          (into {} (map (fn [[k stat]]\n                                          [k (assoc stat\n                                               :total_downloads\n                                               (reduce (fn [a b] (+ a (get b 2))) 0 (:releases stat)))])\n                                        res)))\n                        (resolve nil)))\n                    reject)))\n    (p/resolved nil)))\n\n(defn installed?\n  [id]\n  (and (contains? (:plugin/installed-plugins @state/state) (keyword id))\n       (get-in @state/state [:plugin/installed-plugins (keyword id) :iir])))\n\n(defn install-marketplace-plugin\n  [{:keys [id] :as mft}]\n  (when-not (and (:plugin/installing @state/state)\n                 (installed? id))\n    (p/create\n      (fn [resolve]\n        (state/set-state! :plugin/installing mft)\n        (ipc/ipc :installMarketPlugin mft)\n        (resolve id)))))\n\n(defn check-or-update-marketplace-plugin\n  [{:keys [id] :as pkg} error-handler]\n  (when-not (and (:plugin/installing @state/state)\n                 (not (installed? id)))\n    (p/catch\n      (p/then\n        (do (state/set-state! :plugin/installing pkg)\n            (p/catch\n              (load-marketplace-plugins false)\n              (fn [^js e]\n                (state/reset-all-updates-state)\n                (throw e))))\n        (fn [mfts]\n\n          (let [mft (some #(when (= (:id %) id) %) mfts)]\n            ;;TODO: (throw (js/Error. [:not-found-in-marketplace id]))\n            (ipc/ipc :updateMarketPlugin (merge (dissoc pkg :logger) mft)))\n          true))\n\n      (fn [^js e]\n        (error-handler e)\n        (state/set-state! :plugin/installing nil)\n        (js/console.error e)))))\n\n(defn get-plugin-inst\n  [id]\n  (try\n    (js/LSPluginCore.ensurePlugin (name id))\n    (catch js/Error _e\n      nil)))\n\n(defn open-updates-downloading\n  []\n  (when (and (not (:plugin/updates-downloading? @state/state))\n             (seq (state/all-available-coming-updates)))\n    (->> (:plugin/updates-coming @state/state)\n         (map #(if (state/coming-update-new-version? (second %1))\n                 (update % 1 dissoc :error-code) %1))\n         (into {})\n         (state/set-state! :plugin/updates-coming))\n    (state/set-state! :plugin/updates-downloading? true)))\n\n(defn close-updates-downloading\n  []\n  (when (:plugin/updates-downloading? @state/state)\n    (state/set-state! :plugin/updates-downloading? false)))\n\n(defn has-setting-schema?\n  [id]\n  (when-let [pl (and id (get-plugin-inst (name id)))]\n    (boolean (.-settingsSchema pl))))\n\n(defn get-enabled-plugins-if-setting-schema\n  []\n  (when-let [plugins (seq (state/get-enabled?-installed-plugins false nil true))]\n    (filter #(has-setting-schema? (:id %)) plugins)))\n\n(defn setup-install-listener!\n  [t]\n  (let [channel (name :lsp-installed)\n        listener (fn [^js _ ^js e]\n                   (js/console.debug :lsp-installed e)\n\n                   (when-let [{:keys [status payload only-check]} (bean/->clj e)]\n                     (case (keyword status)\n\n                       :completed\n                       (let [{:keys [id dst name title theme]} payload\n                             name (or title name \"Untitled\")]\n                         (if only-check\n                           (state/consume-updates-coming-plugin payload false)\n                           (if (installed? id)\n                             (when-let [^js pl (get-plugin-inst id)] ;; update\n                               (p/then\n                                 (.reload pl)\n                                 #(do\n                                    ;;(if theme (select-a-plugin-theme id))\n                                    (notifications/show!\n                                      (str (t :plugin/update) (t :plugins) \": \" name \" - \" (.-version (.-options pl))) :success)\n                                    (state/consume-updates-coming-plugin payload true))))\n\n                             (do                            ;; register new\n                               (p/then\n                                 (js/LSPluginCore.register (bean/->js {:key id :url dst}))\n                                 (fn [] (when theme (js/setTimeout #(select-a-plugin-theme id) 300))))\n                               (notifications/show!\n                                 (str (t :plugin/installed) (t :plugins) \": \" name) :success)))))\n\n                       :error\n                       (let [error-code (keyword (string/replace (:error-code payload) #\"^[\\s\\:\\[]+\" \"\"))\n                             [msg type] (case error-code\n\n                                          :no-new-version\n                                          [(str (t :plugin/up-to-date) \" :)\") :success]\n\n                                          [error-code :error])\n                             pending? (seq (:plugin/updates-pending @state/state))]\n\n                         (if (and only-check pending?)\n                           (state/consume-updates-coming-plugin payload false)\n\n                           (do\n                             ;; consume failed download updates\n                             (when (and (not only-check) (not pending?))\n                               (state/consume-updates-coming-plugin payload true))\n\n                             ;; notify human tips\n                             (notifications/show!\n                               (str\n                                 (if (= :error type) \"[Error]\" \"\")\n                                 (str \"<\" (:id payload) \"> \")\n                                 msg) type)))\n\n                         (js/console.error payload))\n\n                       :dunno))\n\n                   ;; reset\n                   (js/setTimeout #(state/set-state! :plugin/installing nil) 512)\n                   true)]\n\n    (js/window.apis.addListener channel listener)\n\n    ;; clear\n    (fn []\n      (js/window.apis.removeAllListeners channel))))\n\n(defn register-plugin\n  [pl]\n  (swap! state/state update-in [:plugin/installed-plugins] assoc (keyword (:id pl)) pl))\n\n(defn unregister-plugin\n  [id]\n  (js/LSPluginCore.unregister id))\n\n(defn host-mounted!\n  []\n  (and lsp-enabled? (js/LSPluginCore.hostMounted)))\n\n(defn register-plugin-slash-command\n  [pid [cmd actions]]\n  (when-let [pid (keyword pid)]\n    (when (contains? (:plugin/installed-plugins @state/state) pid)\n      (swap! state/state update-in [:plugin/installed-slash-commands pid]\n             (fnil merge {}) (hash-map cmd (mapv #(conj % {:pid pid}) actions)))\n      (state/pub-event! [:rebuild-slash-commands-list])\n      true)))\n\n(defn unregister-plugin-slash-command\n  [pid]\n  (swap! state/state medley/dissoc-in [:plugin/installed-slash-commands (keyword pid)])\n  (state/pub-event! [:rebuild-slash-commands-list]))\n\n(def keybinding-mode-handler-map\n  {:global      :shortcut.handler/editor-global\n   :non-editing :shortcut.handler/global-non-editing-only\n   :editing     :shortcut.handler/block-editing-only})\n\n(defn simple-cmd->palette-cmd\n  [pid {:keys [key label type desc keybinding] :as cmd} action]\n  (let [palette-cmd {:id         (keyword (str \"plugin.\" pid \"/\" key))\n                     :desc       (or desc label)\n                     :shortcut   (when-let [shortcut (:binding keybinding)]\n                                   (if util/mac?\n                                     (or (:mac keybinding) shortcut)\n                                     shortcut))\n                     :handler-id (let [mode (or (:mode keybinding) :global)]\n                                   (get keybinding-mode-handler-map (keyword mode)))\n                     :action     (fn []\n                                   (state/pub-event!\n                                     [:exec-plugin-cmd {:type type :key key :pid pid :cmd cmd :action action}]))}]\n    palette-cmd))\n\n(defn simple-cmd-keybinding->shortcut-args\n  [pid key keybinding]\n  (let [id (keyword (str \"plugin.\" pid \"/\" key))\n        binding (:binding keybinding)\n        binding (if util/mac?\n                  (or (:mac keybinding) binding)\n                  binding)\n        mode (or (:mode keybinding) :global)\n        mode (get keybinding-mode-handler-map (keyword mode))]\n    [mode id {:binding binding}]))\n\n(defn register-plugin-simple-command\n  ;; action => [:action-key :event-key]\n  [pid {:keys [type] :as cmd} action]\n  (when-let [pid (keyword pid)]\n    (when (contains? (:plugin/installed-plugins @state/state) pid)\n      (swap! state/state update-in [:plugin/simple-commands pid]\n             (fnil conj []) [type cmd action pid])\n      true)))\n\n(defn unregister-plugin-simple-command\n  [pid]\n  (swap! state/state medley/dissoc-in [:plugin/simple-commands (keyword pid)]))\n\n(defn register-plugin-ui-item\n  [pid {:keys [type] :as opts}]\n  (when-let [pid (keyword pid)]\n    (when (contains? (:plugin/installed-plugins @state/state) pid)\n      (swap! state/state update-in [:plugin/installed-ui-items pid]\n             (fnil conj []) [type opts pid])\n      true)))\n\n(defn unregister-plugin-ui-items\n  [pid]\n  (swap! state/state assoc-in [:plugin/installed-ui-items (keyword pid)] []))\n\n(defn register-plugin-resources\n  [pid type {:keys [key] :as opts}]\n  (when-let [pid (keyword pid)]\n    (when-let [type (and key (keyword type))]\n      (let [path [:plugin/installed-resources pid type]]\n        (when (contains? #{:error nil} (get-in @state/state (conj path key)))\n          (swap! state/state update-in path\n            (fnil assoc {}) key (merge opts {:pid pid}))\n          true)))))\n\n(defn unregister-plugin-resources\n  [pid]\n  (when-let [pid (keyword pid)]\n    (swap! state/state medley/dissoc-in [:plugin/installed-resources pid])\n    true))\n\n(defn unregister-plugin-themes\n  ([pid] (unregister-plugin-themes pid true))\n  ([pid effect]\n   (js/LSPluginCore.unregisterTheme (name pid) effect)))\n\n(def *fenced-code-providers (atom #{}))\n\n(defn register-fenced-code-renderer\n  [pid type {:keys [before subs render edit] :as _opts}]\n  (when-let [key (and type (keyword type))]\n    (register-plugin-resources pid :fenced-code-renderers\n      {:key key :edit edit :before before :subs subs :render render})\n    (swap! *fenced-code-providers conj pid)\n    #(swap! *fenced-code-providers disj pid)))\n\n(defn hook-fenced-code-by-type\n  [type]\n  (when-let [key (and (seq @*fenced-code-providers) type (keyword type))]\n    (first (map #(state/get-plugin-resource % :fenced-code-renderers key)\n                @*fenced-code-providers))))\n\n(def *extensions-enhancer-providers (atom #{}))\n\n(defn register-extensions-enhancer\n  [pid type {:keys [enhancer] :as _opts}]\n  (when-let [key (and type (keyword type))]\n    (register-plugin-resources pid :extensions-enhancers\n       {:key key :enhancer enhancer})\n    (swap! *extensions-enhancer-providers conj pid)\n    #(swap! *extensions-enhancer-providers disj pid)))\n\n(defn hook-extensions-enhancer-by-type\n  [type]\n  (when-let [key (and type (keyword type))]\n    (map #(state/get-plugin-resource % :extensions-enhancers key)\n         @*extensions-enhancer-providers)))\n\n(defn select-a-plugin-theme\n  [pid]\n  (when-let [themes (get (group-by :pid (:plugin/installed-themes @state/state)) pid)]\n    (when-let [theme (first themes)]\n      (let [theme-mode (:mode theme)]\n        (and theme-mode (state/set-theme! theme-mode))\n        (js/LSPluginCore.selectTheme (bean/->js theme))))))\n\n(defn update-plugin-settings-state\n  [id settings]\n  (state/set-state! [:plugin/installed-plugins id :settings]\n                    ;; TODO: force settings related ui reactive\n                    ;; Sometimes toggle to `disable` not working\n                    ;; But related-option data updated?\n                    (assoc settings :disabled (boolean (:disabled settings)))))\n\n(defn open-settings-file-in-default-app!\n  [id-or-plugin]\n  (when-let [plugin (if (coll? id-or-plugin)\n                      id-or-plugin (state/get-plugin-by-id id-or-plugin))]\n    (when-let [file-path (:usf plugin)]\n      (js/apis.openPath file-path))))\n\n(defn open-plugin-settings!\n  ([id] (open-plugin-settings! id false))\n  ([id nav?]\n   (when-let [plugin (and id (state/get-plugin-by-id id))]\n     (if (has-setting-schema? id)\n       (state/pub-event! [:go/plugins-settings id nav? (or (:name plugin) (:title plugin))])\n       (open-settings-file-in-default-app! plugin)))))\n\n(defn parse-user-md-content\n  [content {:keys [url]}]\n  (try\n    (when-not (string/blank? content)\n      (let [content (if-not (string/blank? url)\n                      (string/replace\n                        content #\"!\\[[^\\]]*\\]\\((.*?)\\s*(\\\"(?:.*[^\\\"])\\\")?\\s*\\)\"\n                        (fn [[matched link]]\n                          (if (and link (not (string/starts-with? link \"http\")))\n                            (string/replace matched link (util/node-path.join url link))\n                            matched)))\n                      content)]\n        (format/to-html content :markdown (gp-mldoc/default-config :markdown))))\n    (catch js/Error e\n      (log/error :parse-user-md-exception e)\n      content)))\n\n(defn open-readme!\n  [url item display]\n  (let [repo (:repo item)]\n    (if (nil? repo)\n      ;; local\n      (-> (p/let [content (invoke-exported-api \"load_plugin_readme\" url)\n                  content (parse-user-md-content content item)]\n                 (and (string/blank? (string/trim content)) (throw nil))\n                 (state/set-state! :plugin/active-readme [content item])\n                 (state/set-sub-modal! (fn [_] (display))))\n          (p/catch #(do (js/console.warn %)\n                        (notifications/show! \"No README content.\" :warn))))\n      ;; market\n      (state/set-sub-modal! (fn [_] (display repo nil))))))\n\n(defn load-unpacked-plugin\n  []\n  (when util/electron?\n    (p/let [path (ipc/ipc \"openDialog\")]\n           (when-not (:plugin/selected-unpacked-pkg @state/state)\n             (state/set-state! :plugin/selected-unpacked-pkg path)))))\n\n(defn reset-unpacked-state\n  []\n  (state/set-state! :plugin/selected-unpacked-pkg nil))\n\n(defn hook-plugin\n  [tag type payload plugin-id]\n  (when lsp-enabled?\n    (try\n      (js-invoke js/LSPluginCore\n                 (str \"hook\" (string/capitalize (name tag)))\n                 (name type)\n                 (if (coll? payload)\n                   (bean/->js (normalize-keyword-for-json payload))\n                   payload)\n                 (if (keyword? plugin-id) (name plugin-id) plugin-id))\n      (catch js/Error e\n        (js/console.error \"[Hook Plugin Err]\" e)))))\n\n(defn hook-plugin-app\n  ([type payload] (hook-plugin-app type payload nil))\n  ([type payload plugin-id] (hook-plugin :app type payload plugin-id)))\n\n(defn hook-plugin-editor\n  ([type payload] (hook-plugin-editor type payload nil))\n  ([type payload plugin-id] (hook-plugin :editor type payload plugin-id)))\n\n(defn hook-plugin-db\n  ([type payload] (hook-plugin-db type payload nil))\n  ([type payload plugin-id] (hook-plugin :db type payload plugin-id)))\n\n(defn hook-plugin-block-changes\n  [{:keys [blocks tx-data tx-meta]}]\n\n  (doseq [b blocks\n          :let [tx-data' (group-by first tx-data)\n                type     (str \"block:\" (:block/uuid b))]]\n    (hook-plugin-db type {:block b :tx-data (get tx-data' (:db/id b)) :tx-meta tx-meta})))\n\n(defn get-ls-dotdir-root\n  []\n  (ipc/ipc \"getLogseqDotDirRoot\"))\n\n(defn make-fn-to-load-dotdir-json\n  [dirname default]\n  (fn [key]\n    (when-let [key (and key (name key))]\n      (p/let [repo   \"\"\n              path   (get-ls-dotdir-root)\n              exist? (fs/file-exists? path dirname)\n              _      (when-not exist? (fs/mkdir! (util/node-path.join path dirname)))\n              path   (util/node-path.join path dirname (str key \".json\"))\n              _      (fs/create-if-not-exists repo \"\" path (or default \"{}\"))\n              json   (fs/read-file \"\" path)]\n        [path (js/JSON.parse json)]))))\n\n(defn make-fn-to-save-dotdir-json\n  [dirname]\n  (fn [key content]\n    (when-let [key (and key (name key))]\n      (p/let [repo \"\"\n              path (get-ls-dotdir-root)\n              path (util/node-path.join path dirname (str key \".json\"))]\n        (fs/write-file! repo \"\" path content {:skip-compare? true})))))\n\n(defn make-fn-to-unlink-dotdir-json\n  [dirname]\n  (fn [key]\n    (when-let [key (and key (name key))]\n      (p/let [repo \"\"\n              path (get-ls-dotdir-root)\n              path (util/node-path.join path dirname (str key \".json\"))]\n        (fs/unlink! repo path nil)))))\n\n(defn show-themes-modal!\n  []\n  (state/pub-event! [:modal/show-themes-modal]))\n\n(defn goto-plugins-dashboard!\n  []\n  (state/pub-event! [:go/plugins]))\n\n(defn- get-user-default-plugins\n  []\n  (p/catch\n    (p/let [files ^js (ipc/ipc \"getUserDefaultPlugins\")\n            files (js->clj files)]\n           (map #(hash-map :url %) files))\n    (fn [e]\n      (js/console.error e))))\n\n(defn check-enabled-for-updates\n  [theme?]\n  (let [pending? (seq (:plugin/updates-pending @state/state))]\n    (when-let [plugins (and (not pending?)\n                            ;; TODO: too many requests may be limited by Github api\n                            (seq (take 32 (state/get-enabled?-installed-plugins theme?))))]\n      (state/set-state! :plugin/updates-pending\n                        (into {} (map (fn [v] [(keyword (:id v)) v]) plugins)))\n      (state/pub-event! [:plugin/consume-updates]))))\n\n;; components\n(rum/defc lsp-indicator < rum/reactive\n  []\n  (let [text (state/sub :plugin/indicator-text)]\n    (when-not (= text \"END\")\n      [:div.flex.align-items.justify-center.h-screen.w-full.preboot-loading\n       [:span.flex.items-center.justify-center.w-60.flex-col\n        [:small.scale-250.opacity-70.mb-10.animate-pulse (svg/logo false)]\n        [:small.block.text-sm.relative.opacity-50 {:style {:right \"-8px\"}} text]]])))\n\n(defn init-plugins!\n  [callback]\n\n  (let [el (js/document.createElement \"div\")]\n    (.appendChild js/document.body el)\n    (rum/mount\n      (lsp-indicator) el))\n\n  (state/set-state! :plugin/indicator-text \"LOADING\")\n\n  (p/then\n    (p/let [root (get-ls-dotdir-root)\n            _ (.setupPluginCore js/LSPlugin (bean/->js {:localUserConfigRoot root :dotConfigRoot root}))\n\n            clear-commands! (fn [pid]\n                              ;; commands\n                              (unregister-plugin-slash-command pid)\n                              (invoke-exported-api \"unregister_plugin_simple_command\" pid)\n                              (invoke-exported-api \"uninstall_plugin_hook\" pid)\n                              (unregister-plugin-ui-items pid)\n                              (unregister-plugin-resources pid))\n\n            _ (doto js/LSPluginCore\n                (.on \"registered\"\n                     (fn [^js pl]\n                       (register-plugin\n                         (bean/->clj (.parse js/JSON (.stringify js/JSON pl))))))\n\n                (.on \"reloaded\"\n                     (fn [^js pl]\n                       (register-plugin\n                         (bean/->clj (.parse js/JSON (.stringify js/JSON pl))))))\n\n                (.on \"unregistered\" (fn [pid]\n                                      (let [pid (keyword pid)]\n                                        ;; effects\n                                        (unregister-plugin-themes pid)\n                                        ;; plugins\n                                        (swap! state/state medley/dissoc-in [:plugin/installed-plugins pid])\n                                        ;; commands\n                                        (clear-commands! pid))))\n\n                (.on \"unlink-plugin\" (fn [pid]\n                                       (let [pid (keyword pid)]\n                                         (ipc/ipc \"uninstallMarketPlugin\" (name pid)))))\n\n                (.on \"beforereload\" (fn [^js pl]\n                                      (let [pid (.-id pl)]\n                                        (clear-commands! pid)\n                                        (unregister-plugin-themes pid false))))\n\n                (.on \"disabled\" (fn [pid]\n                                  (clear-commands! pid)\n                                  (unregister-plugin-themes pid)))\n\n                (.on \"theme-changed\" (fn [^js themes]\n                                       (swap! state/state assoc :plugin/installed-themes\n                                              (vec (mapcat (fn [[pid vs]] (mapv #(assoc % :pid pid) (bean/->clj vs))) (bean/->clj themes))))))\n\n                (.on \"theme-selected\" (fn [^js opts]\n                                        (let [opts (bean/->clj opts)\n                                              url (:url opts)\n                                              mode (:mode opts)]\n                                          (when mode (state/set-theme! mode))\n                                          (state/set-state! :plugin/selected-theme url))))\n\n                (.on \"settings-changed\" (fn [id ^js settings]\n                                          (let [id (keyword id)]\n                                            (when (and settings\n                                                       (contains? (:plugin/installed-plugins @state/state) id))\n                                              (update-plugin-settings-state id (bean/->clj settings)))))))\n\n            default-plugins (get-user-default-plugins)\n\n            _ (.register js/LSPluginCore (bean/->js (if (seq default-plugins) default-plugins [])) true)])\n    #(do\n       (state/set-state! :plugin/indicator-text \"END\")\n       (callback))))\n\n(defn setup!\n  \"setup plugin core handler\"\n  [callback]\n  (if (not lsp-enabled?)\n    (callback)\n    (init-plugins! callback)))\n"]}