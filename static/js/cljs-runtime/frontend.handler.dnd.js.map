{"version":3,"sources":["frontend/handler/dnd.cljs"],"mappings":"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","names":["frontend.handler.dnd/move-blocks","event","blocks","target-block","move-to","blocks'","p1__58002#","cljs.core.map","cljs.core.dissoc","first-block","cljs.core/first","top?","cljs.core._EQ_","nested?","alt-key?","and__5041__auto__","current-format","target-format","cljs.core/count","frontend.handler.editor/set-block-property!","frontend.handler.editor/api-insert-new-block!","frontend.util.format","cljs.core.not_EQ_","frontend.state/pub-event!","cljs.core/every?","cljs.core/map?","cljs.core.conj","target-node","frontend.modules.outliner.core/block","transact-data__50573__auto__","frontend.modules.outliner.core/*transaction-data*","opts__50574__auto__","cljs.core.assoc","*transaction-data*-orig-val__58007","*transaction-data*-temp-val__58008","cljs.core/transient","r__50575__auto__","cljs.core/persistent!","tx__50576__auto__","cljs.core.mapcat","tx-meta__50577__auto__","all-tx__50578__auto__","cljs.core.concat","opts#__50579__auto__","cljs.core.merge","cljs.core/seq","result__50580__auto__","frontend.modules.outliner.datascript/transact!","frontend.handler.editor.save_current_block_BANG_","first-child?","frontend.modules.outliner.tree/-get-parent-id","frontend.modules.outliner.tree/-get-left-id","parent","frontend.modules.outliner.tree/-get-parent","frontend.modules.outliner.core/move-blocks!","before-node","frontend.modules.outliner.tree/-get-left"],"sourcesContent":["(ns frontend.handler.dnd\n  (:require [frontend.handler.editor :as editor-handler]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.modules.outliner.transaction :as outliner-tx]\n            [frontend.state :as state]\n            [frontend.util :as util]))\n\n(defn move-blocks\n  [^js event blocks target-block move-to]\n  (let [blocks' (map #(dissoc % :block/level :block/children) blocks)\n        first-block (first blocks')\n        top? (= move-to :top)\n        nested? (= move-to :nested)\n        alt-key? (and event (.-altKey event))\n        current-format (:block/format first-block)\n        target-format (:block/format target-block)]\n    (cond\n      ;; alt pressed, make a block-ref\n      (and alt-key? (= (count blocks) 1))\n      (do\n        (editor-handler/set-block-property! (:block/uuid first-block)\n                                            :id\n                                            (str (:block/uuid first-block)))\n        (editor-handler/api-insert-new-block!\n         (util/format \"((%s))\" (str (:block/uuid first-block)))\n         {:block-uuid (:block/uuid target-block)\n          :sibling? (not nested?)\n          :before? top?}))\n\n      ;; format mismatch\n      (and current-format target-format (not= current-format target-format))\n      (state/pub-event! [:notification/show\n                         {:content [:div \"Those two pages have different formats.\"]\n                          :status :warning\n                          :clear? true}])\n\n\n      (every? map? (conj blocks target-block))\n      (let [target-node (outliner-core/block target-block)]\n        (outliner-tx/transact!\n          {:outliner-op :move-blocks}\n          (editor-handler/save-current-block!)\n          (if top?\n            (let [first-child?\n                  (= (tree/-get-parent-id target-node)\n                     (tree/-get-left-id target-node))]\n              (if first-child?\n                (let [parent (tree/-get-parent target-node)]\n                  (outliner-core/move-blocks! blocks (:data parent) false))\n                (let [before-node (tree/-get-left target-node)]\n                  (outliner-core/move-blocks! blocks (:data before-node) true))))\n            (outliner-core/move-blocks! blocks target-block (not nested?)))))\n\n      :else\n      nil)))\n"]}