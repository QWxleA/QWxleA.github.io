{"version":3,"sources":["frontend/components/datetime.cljs"],"mappings":";AAcA,GAAA,QAAAA,qCAAAC,gDAAAC,yDAAAC;AAAA;AAAA,AAAA,uDAAA,2CAAA,qDAAA,GAAA,8DAAA,xNAASC;;AAET,GAAA,QAAAJ,qCAAAC,gDAAAC,yDAAAG;AAAA;AAAA,AAAA,AAASC,+CAAW,AAACC,6CAAKH;;AAE1B,GAAA,QAAAJ,qCAAAC,gDAAAC,yDAAAM;AAAA;AAAA,AAAA,AAASC,sDAAY,6CAAA,7CAACF;;AACtB,0CAAA,AAAAG,oBAAAC,oBAAA,lFAAUI,6FACPE;AADH,AAAA,AAAA,IAEQC,cAAM,AAACC,eAAUV;AAFzB,AAAA,oBAGQ,iBAAAW,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAAU,UAAK,AAACC,4BAAcJ;;;AAHtC,OAAAL,6BAAA,MAAA,SAAA,UAAA,kBAAA,iBAAA,CAAA,AAAAA,6BAAA,QAAA,MAAA,+CAAA,AAAAC,zBAMwBI,mDACJ,WAAKK;AAAL,AACE,AAACC,mBAAUD;;AACX,IAAME,QAAM,AAACC,qBAAYH;AAAzB,AACE,uHAAA,hHAACI,mDAAMpB,6CAAWqB,qEAAYH;gBAVtD,2BAAA,IAAA,AAAAZ,6BAAA,IAAA,WAWuC;AAAA,AACE,0EAAA,1EAACgB,sBAAOnB;;AACR,uHAAA,qDAAA,rKAACiB,mDAAMpB,6CAAWqB;eAb3D,oBAAA,CAAA,AAAAb,+BAcQe;;AAdR,OAAAjB,6BAAA,IAAA,WAe6B;AAAA,AACE,0EAAA,1EAACgB,sBAAOnB;;AACR,IAAAqB,aAA4B,AAACK;IAA7BL,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAcG;aAAd,AAAAD,4CAAAF,eAAA,pEAAmBI;IACbE,SAAO,mDAAA,NAAKH,UAAS,AAACI,uBAAcH;AAD1C,AAEE,uHAAA,hHAACR,mDAAMpB,6CAAWqB,qEAAYS;eAnB/D,WAAA,CAAA;;GAAA,6GAAA,1BAAuBpB;AAsBvB,GAAA,QAAAhB,qCAAAC,gDAAAC,yDAAAoC;AAAA;AAAA,AAAA,AAASC,0DAAgB,6CAAA,7CAAChC;;AAC1B,2CAAA,AAAAG,oBAAAC,oBAAA,WAAA6B,9FAAUE;AAAV,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;UAAA,AAAAT,4CAAAS,eAAA,jEACWE;eADX,AAAAX,4CAAAS,eAAA,tEACeG;WADf,AAAAZ,4CAAAS,eAAA,lEACwBI;AADxB,AAAA,AAAA,IAEQ3B,cAAM,AAACC,eAAUoB;AAFzB,AAAA,oBAGQ,iBAAAnB,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAAU,IAAA0B,oBAAKH;AAAL,AAAA,oBAAAG;AAAA,IAAAA,wBAASF;AAAT,AAAA,oBAAAE;AAAkBD;;AAAlBC;;;AAAAA;;;;AAHlB,OAAAlC,6BAAA,MAAA,SAAA,UAAA,kBAAA,qCAAA,CAAA,AAAAA,6BAAA,QAAA,MAAA,6CAAA,AAAAC,fAMwB8B,yCACJ,WAAKrB;AAAL,AACE,IAAME,QAAM,AAACC,qBAAYH;AAAzB,AACE,0HAAA,mFAAA,8DAAA,pQAACI,mDAAMpB,6CAAWyC,+NAA0BvB;gBATpE,wDAAA,IAUO,AAACwB,mBACA,AAACC,6CACA,WAAKC;AAAL,AACE,GAAI,AAACC,6CAAE,AAAA,qFAAQD,MAAMN;AACnB,0DAAA,4DAAA,/GAACQ,8CAAMF;;AACPA;;GAJL,mFAAA,2CAAA,uDAAA,YAAA,2CAAA,uDAAA,YAAA,2CAAA,uDAAA,YAAA,2CAAA,uDAAA,YAAA,2CAAA,uDAAA,qBAUA,WAAK1B;AAAL,AACE,0HAAA,mFAAA,8DAAA,pQAACE,mDAAMpB,6CAAWyC,yOAA+BvB;SAtB3D,AAAAZ,6BAAA,IAAA,vCAUO,kDAegC;AAAA,AACE,8EAAA,9EAACgB,sBAAOW;;AACR,uHAAA,8DAAA,9KAACb,mDAAMpB,6CAAWqB;eA3B3D,oBAAA,CAAA,AAAAb,+BA4BQe;;AA5BR,OAAAjB,6BAAA,IAAA,WA6B6B;AAAA,AACE,8EAAA,9EAACgB,sBAAOW;;AACR,uHAAA,8DAAA,2CAAA,qDAAA,KAAA,mDAAA,IAAA,6DAAA,vYAACb,mDAAMpB,6CAAWqB;eA/BjD,WAAA,CAAA;;GAAA,6GAAA,1BAAwBX;AAqCxB,qDAAA,rDAAMqC;AAAN,AAEE,AAACzB,sBAAOtB,6CAAWF;;AACnB,0EAAA,1EAACwB,sBAAOnB;;AACR,8EAAA,9EAACmB,sBAAOW;;AACR,yCAAA,zCAACe;;AACD,sCAAA,2EAAA,1GAACC;;AAEH,yCAAA,zCAAOC,0FACJC;AADH,AAEE,oBAAMA;AAAN,AAAQ,AAAClC,mBAAUkC;;AAAnB;;AACA,IAAAC,mBAAA,AAAAC,gBAAwCrD;IAAxCoD,uBAAA,AAAA3B,4BAAA2B;sBAAAA,lBAA4BI;qBAA5B,AAAA9B,4CAAA0B,qBAAA,lFAAcG;IACRE,aAAK,AAAA,yGAAA,AAAAJ,gBAAoBK;IACzBF,sBAAU,8DAAA,9DAACV,8CAAMU,sEAAgB,iBAAA1C,mBAAI2C;AAAJ,AAAA,oBAAA3C;AAAAA;;AAAS,OAAC6C;;;IAC3CpB,aAAK,gKAAA,KAAA,nKAAI,6CAAA,7CAACM,iDAAM,AAAA,2FAAWU;IAC3BC,sBAAU,uCAAA,mFAAA,8DAAA,xLAACf,mBAASe,kOAA4BjB;IAChDqB,aAAK,AAACC,iDAA6BL;IACnCM,mBAAW,AAACC;IANlBT,mBAOgCQ;IAPhCR,uBAAA,AAAA7B,4BAAA6B;kBAAA,AAAA5B,4CAAA4B,qBAAA,/EAOcU;gBAPd,AAAAtC,4CAAA4B,qBAAA,7EAOoBW;wBAPpB,AAAAvC,4CAAA4B,qBAAA,rFAOwB1C;IAClBsD,iBAAS,iBAAApD,mBAAI,AAAA,6FAAakD;AAAjB,AAAA,oBAAAlD;AAAAA;;AACI,OAAA,6FAAa,AAACqD;;;IAC3BF,gBAAI,iBAAAnD,mBAAA,AAAAuC,gBAAKe;AAAL,AAAA,oBAAAtD;AAAAA;;AAA+BmD;;;AAVzC,AAWE,AAACI,kDAAoCH,eACAD,cACAL;;AACrC,oBAAMhD;AAAN,AACE,wCAAA,xCAACU,sBAAOV;;AADV;;AAEF,AAACmC;;AACD,iDAAA,jDAACuB;;AACD,uCAAA,hCAACC;;AAEH,6CAAA,AAAAnE,oBAAAC,oBAAA,rFAAUwE;AAAV,AAAA,AAAA,IAAAL,aAQgC,AAAC3D,eAAUb;IAR3CwE,iBAAA,AAAA/C,4BAAA+C;WAAA,AAAA9C,4CAAA8C,eAAA,lEAQgBa;eARhB,AAAA3D,4CAAA8C,eAAA,tEAQqBjB;AARrB,AAAA,OAAAjD,6BAAA,MAAA,MAAA,4BAAA,aAAA,CAAA,AAAAA,6BAAA,IAAA,aAAA,uCAAA,CAAA,wDAAA,AAAAA,6BAAA,IAAA,aAAA,uCAAA,CAAA,iEAAA,iBAAAmE,tNAWK,AAAChE,wCAAW4E,0GAGZ,AAACjD,yCAAYmB,wCAGZ,wDAAA,2DAAA,nHAAC+B,gLACWpC;AAlBlB,AAAA,OAAA5C,6BAAA,IAAA,EAAA,AAAAoE,qBAAAD,aAAA,AAAAE,wCAAA,AAAAC,2HAAA,2CAAA,wDAAA,mFAAA,uBAAAH,kBAAA,aAAA,SAAA,EAAA,AAAAC,qBAAAD,aAAA,KAAA,CAAA,AAAAjE,+BAAAiE;;GAAA,mFAA0B/D,kBACxB,AAACoE,0DACA,WAAKC;AAAL,AACE,IAAAC,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,kBAAA,XAACE;AAAD,AAAgB,6HAAA,0DAAA,hLAACC,8DAAgBL,4GACME,mEACI/B;GAF3C;;AADF;;YAHL;AAoBA,2CAAA,AAAA9C,oBAAAC,oBAAA,nFAAUkF,8FAaPG,GAAGC,OAAOC;AAbb,AAAA,AAAA,sBAAA,AAAAvC,lBAcQwC,kCAAiBzB;IACjB0B,8BAAsB,iBAAAtD,oBAAKqD;AAAL,AAAA,oBAAArD;AACK,iCAAA,iFAAA,gBAAA,3HAACuD,2JACU,AAACC,0BAAkBH;;AAFnCrD;;;IAGtBiB,OAAK,mBAAA,nBAACwC;AAlBd,AAAA,oBAmBU,mBAAA,nBAACA;AAnBX,AAAA,OAAA3F,6BAAA,MAAA,MAAA,6BAoBsD,WAAK6C;AAAL,AAAQ,OAAClC,mBAAUkC;iBACd,WAAKA;AAAL,AAAQ,OAAkBA;eArBrF,iBAAA,CAAA,AAAA3C,+BAsBO,4BAAA,2CAAA,mHAAA,1LAAC0F,uBACAzC,uIACwBqC,2FAEvB,WAAK3C,EAAEM;AAAP,AACE,AAACxC,mBAAUkC;;AACX,IAAMM,WAAK,AAAC0C,oCAAuB1C;IAC7B2C,UAAQ,AAACC,yDAAkB5C;AADjC,AAEE,oBAAUqC;AAAV;;AAAA,AAEE,0LAAA,1LAACQ,6CAA+BZ,GACA,0DAAA,1DAACa,qHAAqBH,cACtBT;;AAEhC,iDAAA,jDAACrB;;AACD,qEAAA,9DAAChD,sBAAO8C;;aArCvB,+CAAA,6CAAA,1EAsCa0B,6BACJ,AAACjB;;AAvCV;;GAAA,qGAAA,2CAAA,7DAAwBnE,mHACf,WAAKqE;AAAL,AACE,IAAMS,WAAG,AAACC,eAAK,AAAA,wFAAWV;AAA1B,AACE,oBAAIS;AACF,AAAClE,sBAAOtB,6CAAWwF;;AACnB,mEAAA,2CAAA,qDAAA,GAAA,8DAAA,pOAAClE,sBAAOtB;;;AAEV,oBAAU,AAAA,yGAAA,AAAAqD,gBAAoBK;AAA9B;AAAA,AACE,+BAAA,/BAACT,0GAAmC,AAACU;;;AACzCoB;GATX,qEAUiB,WAAKA;AAAL,AACE,AAAChC;;AACDgC;mBAZnB","names":["js/frontend","js/frontend.components","js/frontend.components.datetime","js/frontend.components.datetime.default-timestamp-value","frontend.components.datetime/default-timestamp-value","js/frontend.components.datetime.*timestamp","frontend.components.datetime/*timestamp","cljs.core.atom","js/frontend.components.datetime.*show-time?","frontend.components.datetime/*show-time?","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","rum.core/mark-sync-update","daiquiri.interpreter/interpret","frontend.components.datetime/time-input","rum.core/reactive","default-value","show?","rum.core/react","or__5043__auto__","clojure.string/blank?","event","frontend.util/stop","value","frontend.util/evalue","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/reset!","frontend.components.svg/close","map__56829","cljs.core/--destructure-map","cljs.core.get","hour","minute","frontend.date/get-local-date","result","frontend.util/zero-pad","js/frontend.components.datetime.*show-repeater?","frontend.components.datetime/*show-repeater?","p__56833","map__56835","frontend.components.datetime/repeater-cp","num","duration","kind","and__5041__auto__","cljs.core/assoc-in","frontend.ui/select","cljs.core.mapv","item","cljs.core._EQ_","cljs.core.assoc","frontend.components.datetime/clear-timestamp!","frontend.state/set-timestamp-block!","frontend.state/set-state!","frontend.components.datetime/on-submit","e","map__56843","cljs.core/deref","map__56844","repeater","timestamp","date","frontend.state/state","cljs-time.core/today","text","frontend.handler.repeated/timestamp-map->text","block-data","frontend.state/get-timestamp-block","block","typ","block-id","frontend.state/get-edit-block","frontend.commands/*current-command","frontend.handler.editor/set-block-timestamp!","frontend.state/set-editor-show-date-picker!","frontend.commands/restore-state","map__56847","attrs56876","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","frontend.components.datetime/time-repeater","frontend.mixins.event_mixin","state","temp__5720__auto__","input","frontend.state/get-input","js/setTimeout","frontend.mixins.on_enter","time","frontend.ui.button","frontend.components.datetime/date-picker","ts","cljs.core/last","id","format","_ts","current-command","deadline-or-schedule?","cljs.core/contains?","clojure.string/lower-case","frontend.state/sub","frontend.ui/datepicker","cljs-time.core/to-default-time-zone","journal","frontend.date.journal_name","frontend.handler.editor/insert-command!","frontend.util.format"],"sourcesContent":["(ns frontend.components.datetime\n  (:require [cljs-time.core :as t]\n            [clojure.string :as string]\n            [frontend.commands :as commands]\n            [frontend.components.svg :as svg]\n            [frontend.date :as date]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.repeated :as repeated]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [frontend.mixins :as mixins]\n            [rum.core :as rum]))\n\n(defonce default-timestamp-value {:time \"\"\n                                  :repeater {}})\n(defonce *timestamp (atom default-timestamp-value))\n\n(defonce *show-time? (atom false))\n(rum/defc time-input < rum/reactive\n  [default-value]\n  (let [show? (rum/react *show-time?)]\n    (if (or show? (not (string/blank? default-value)))\n      [:div.flex.flex-row {:style {:height 32}}\n       [:input#time.form-input.w-20.ms:w-60\n        {:default-value default-value\n         :on-change (fn [event]\n                      (util/stop event)\n                      (let [value (util/evalue event)]\n                        (swap! *timestamp assoc :time value)))}]\n       [:a.ml-2.self-center {:on-click (fn []\n                                         (reset! *show-time? false)\n                                         (swap! *timestamp assoc :time nil))}\n        svg/close]]\n      [:a.text-sm {:on-click (fn []\n                               (reset! *show-time? true)\n                               (let [{:keys [hour minute]} (date/get-local-date)\n                                     result (str hour \":\" (util/zero-pad minute))]\n                                 (swap! *timestamp assoc :time result)))}\n       \"Add time\"])))\n\n(defonce *show-repeater? (atom false))\n(rum/defc repeater-cp < rum/reactive\n  [{:keys [num duration kind]}]\n  (let [show? (rum/react *show-repeater?)]\n    (if (or show? (and num duration kind))\n      [:div.w.full.flex.flex-row.justify-left {:style {:height 32}}\n       [:input#repeater-num.form-input.mt-1.w-8.px-1.sm:w-20.sm:px-2.text-center\n        {:default-value num\n         :on-change (fn [event]\n                      (let [value (util/evalue event)]\n                        (swap! *timestamp assoc-in [:repeater :num] value)))}]\n       (ui/select\n        (mapv\n         (fn [item]\n           (if (= (:label item) duration)\n             (assoc item :selected \"selected\")\n             item))\n         [{:label \"h\"}\n          {:label \"d\"}\n          {:label \"w\"}\n          {:label \"m\"}\n          {:label \"y\"}])\n        (fn [value]\n          (swap! *timestamp assoc-in [:repeater :duration] value))\n        nil)\n\n       [:a.ml-1.self-center {:on-click (fn []\n                                         (reset! *show-repeater? false)\n                                         (swap! *timestamp assoc :repeater {}))}\n        svg/close]]\n      [:a.text-sm {:on-click (fn []\n                               (reset! *show-repeater? true)\n                               (swap! *timestamp assoc :repeater\n                                      {:kind \".+\"\n                                       :num 1\n                                       :duration \"d\"}))}\n       \"Add repeater\"])))\n\n(defn clear-timestamp!\n  []\n  (reset! *timestamp default-timestamp-value)\n  (reset! *show-time? false)\n  (reset! *show-repeater? false)\n  (state/set-timestamp-block! nil)\n  (state/set-state! :date-picker/date nil))\n\n(defn- on-submit\n  [e]\n  (when e (util/stop e))\n  (let [{:keys [repeater] :as timestamp} @*timestamp\n        date (:date-picker/date @state/state)\n        timestamp (assoc timestamp :date (or date (t/today)))\n        kind (if (= \"w\" (:duration repeater)) \"++\" \".+\")\n        timestamp (assoc-in timestamp [:repeater :kind] kind)\n        text (repeated/timestamp-map->text timestamp)\n        block-data (state/get-timestamp-block)\n        {:keys [block typ show?]} block-data\n        block-id (or (:block/uuid block)\n                     (:block/uuid (state/get-edit-block)))\n        typ (or @commands/*current-command typ)]\n    (editor-handler/set-block-timestamp! block-id\n                                         typ\n                                         text)\n    (when show?\n      (reset! show? false)))\n  (clear-timestamp!)\n  (state/set-editor-show-date-picker! false)\n  (commands/restore-state false))\n\n(rum/defc time-repeater < rum/reactive\n  (mixins/event-mixin\n   (fn [state]\n     (when-let [input (state/get-input)]\n       (js/setTimeout #(mixins/on-enter state\n                                        :node input\n                                        :on-enter on-submit) 100))))\n  []\n  (let [{:keys [time repeater]} (rum/react *timestamp)]\n    [:div#time-repeater.py-1.px-4\n     [:p.text-sm.opacity-50.font-medium.mt-4 \"Time:\"]\n     (time-input time)\n\n     [:p.text-sm.opacity-50.font-medium.mt-4 \"Repeater:\"]\n     (repeater-cp repeater)\n\n     [:p.mt-4\n      (ui/button \"Submit\"\n        :on-click on-submit)]]))\n\n(rum/defc date-picker < rum/reactive\n  {:init (fn [state]\n           (let [ts (last (:rum/args state))]\n             (if ts\n               (reset! *timestamp ts)\n               (reset! *timestamp {:time \"\"\n                                   :repeater {}}))\n             (when-not (:date-picker/date @state/state)\n               (state/set-state! :date-picker/date (t/today))))\n           state)\n   :will-unmount (fn [state]\n                   (clear-timestamp!)\n                   state)}\n  [id format _ts]\n  (let [current-command @commands/*current-command\n        deadline-or-schedule? (and current-command\n                                   (contains? #{\"deadline\" \"scheduled\"}\n                                              (string/lower-case current-command)))\n        date (state/sub :date-picker/date)]\n    (when (state/sub :editor/show-date-picker?)\n      [:div#date-time-picker.flex.flex-row {:on-click (fn [e] (util/stop e))\n                                            :on-mouse-down (fn [e] (.stopPropagation e))}\n       (ui/datepicker\n        date\n        {:deadline-or-schedule? deadline-or-schedule?\n         :on-change\n         (fn [e date]\n           (util/stop e)\n           (let [date (t/to-default-time-zone date)\n                 journal (date/journal-name date)]\n             (when-not deadline-or-schedule?\n               ;; similar to page reference\n               (editor-handler/insert-command! id\n                                               (util/format \"[[%s]]\" journal)\n                                               format\n                                               nil)\n               (state/set-editor-show-date-picker! false)\n               (reset! commands/*current-command nil))))})\n       (when deadline-or-schedule?\n         (time-repeater))])))\n"]}