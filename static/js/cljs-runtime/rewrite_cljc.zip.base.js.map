{"version":3,"sources":["rewrite_cljc/zip/base.cljc"],"mappings":"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","names":["var_args","G__78765","rewrite-cljc.zip.base/edn*","js/Error","p__78767","map__78768","cljs.core/--destructure-map","cljs.core.get","node","rewrite_cljc.zip.base.edn_STAR_","track-position?","rewrite-cljc.custom-zipper.core/custom-zipper","rewrite-cljc.custom-zipper.core/zipper","G__78771","rewrite-cljc.zip.base/edn","rewrite_cljc.zip.base.edn","options","cljs.core._EQ_","rewrite-cljc.node/tag","top","or__5043__auto__","rewrite-cljc.custom-zipper.core/down","rewrite_cljc.zip.whitespace.skip_whitespace","rewrite-cljc.node/forms-node","rewrite-cljc.zip.base/tag","zloc","G__78773","rewrite-cljc.custom-zipper.core/node","rewrite-cljc.zip.base/sexpr","G__78775","rewrite-cljc.node/sexpr","rewrite-cljc.zip.base/child-sexprs","G__78777","rewrite-cljc.node/child-sexprs","rewrite-cljc.zip.base/length","G__78778","rewrite-cljc.node/length","rewrite-cljc.zip.base/value","G__78779","rewrite-cljc.node/value","G__78781","rewrite-cljc.zip.base/of-string","s","rewrite_cljc.zip.base.of_string","G__78782","rewrite-cljc.parser/parse-string-all","rewrite-cljc.zip.base/string","G__78783","rewrite-cljc.node/string","rewrite-cljc.zip.base/root-string","G__78784","rewrite-cljc.custom-zipper.core/root","rewrite-cljc.zip.base/print!","_writer","cljs.core/string-print","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","rewrite-cljc.zip.base/print","p__78787","vec__78788","cljs.core.nth","seq78785","G__78786","cljs.core/first","cljs.core/next","self__5751__auto__","writer","G__78791","rewrite-cljc.zip.base/print-root","p__78794","vec__78795","seq78792","G__78793","G__78798"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-cljc.custom-zipper.core :as z]\n            [rewrite-cljc.node :as node]\n            [rewrite-cljc.parser :as p]\n            [rewrite-cljc.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Zipper\n(defn edn*\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-cljc.parse]]).\n\n   Set `:track-position?` in `options` to enable ones-based row/column tracking.\n   See [[rewrite-cljc.zip/position]].\n\n   NOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-cljc.zip`, you must use `rewrite-cljc.zip`.\"\n  ([node]\n   (edn* node {}))\n  ([node {:keys [track-position?]}]\n   (if track-position?\n     (z/custom-zipper node)\n     (z/zipper node))))\n\n(defn edn\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-cljc.parse]])\n   and move to the first non-whitespace/non-comment child.\n\n   Set `:track-position?` in `options` to enable ones-based row/column tracking.\n   See [[rewrite-cljc.zip/position]].\n\n   NOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-cljc.zip`, you must use `rewrite-cljc.zip`.\"\n  ([node] (edn node {}))\n  ([node options]\n   (if (= (node/tag node) :forms)\n     (let [top (edn* node options)]\n       (or (-> top z/down ws/skip-whitespace)\n           top))\n     (recur (node/forms-node [node]) options))))\n\n;; ## Inspection\n\n(defn tag\n  \"Return tag of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/node node/tag))\n\n(defn sexpr\n  \"Return s-expression of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/node node/sexpr))\n\n(defn ^{:added \"0.4.4\"} child-sexprs\n  \"Return s-expression of children of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/node node/child-sexprs))\n\n(defn length\n  \"Return length of printable string of current node in `zloc`.\"\n  [zloc]\n  (or (some-> zloc z/node node/length) 0))\n\n(defn ^{:deprecated \"0.4.0\"} value\n  \"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves.\"\n  [zloc]\n  (some-> zloc z/node node/value))\n\n;; ## Read\n(defn of-string\n  \"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n   Set `:track-position?` in `options` to enable ones-based row/column tracking.\n   See [[rewrite-cljc.zip/position]].\n\n   NOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-cljc.zip`, you must use `rewrite-cljc.zip`.\"\n  ([s] (of-string s {}))\n  ([s options]\n   (some-> s p/parse-string-all (edn options))))\n\n#?(:clj\n   (defn of-file\n     \"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`.\n\n      Set `:track-position?` in `options` to enable ones-based row/column tracking.\n      See [[rewrite-cljc.zip/position]].\n\n      NOTE: when position tracking is enabled, `clojure.zip` is not interchangeable with `rewrite-cljc.zip`, you must use `rewrite-cljc.zip`.\"\n     ([f] (of-file f {}))\n     ([f options]\n      (some-> f p/parse-file-all (edn options)))))\n\n;; ## Write\n\n(defn ^{:added \"0.4.0\"} string\n  \"Return string representing the current node in `zloc`.\"\n  [zloc]\n  (some-> zloc z/node node/string))\n\n(defn ^{:added \"0.4.0\"} root-string\n  \"Return string representing the zipped-up `zloc` zipper.\"\n  [zloc]\n  (some-> zloc z/root node/string))\n\n#?(:clj\n   (defn- print! [^String s writer]\n     (if writer\n       (.write ^java.io.Writer writer s)\n       (recur s *out*)))\n   :cljs\n   (defn- print! [s _writer]\n     (string-print s)))\n\n(defn print\n  \"Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  [zloc & [writer]]\n  (some-> zloc\n          string\n          (print! writer)))\n\n(defn print-root\n  \"Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  [zloc & [writer]]\n  (some-> zloc\n          root-string\n          (print! writer)))\n"]}