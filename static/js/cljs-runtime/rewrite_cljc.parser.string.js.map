{"version":3,"sources":["rewrite_cljc/parser/string.cljc"],"mappings":";AASA;;;wCAAA,xCAAOA,wFAEJC,MAAoBC;AAFvB,AAGE,IAAMC,IAAE,AAAWD;AAAnB,AACmC,AAAQA;;AACzC,OAACE,6CAAKH,MAAME;;AAEhB,8CAAA,9CAAOE,oGACiBC;AADxB,AAEE,AAACC,iCAASD;;AACV,IAAMJ,MAAI,KAAAM;AAAV,AACE,oBAAA,hBAAOC;YAAP,RACOR;;AADP,AAEE,IAAAS,qBAAW,AAAaJ;AAAxB,AAAA,oBAAAI;AAAA,QAAAA,JAASC;AAAT,AACE,GAAM,EAAK,AAACC,cAAIH,oBAAS,OAAA,NAAYE;AAC/B,OAACX,sCAAWC,MAAMC;;AADxB,GAGM,OAAA,NAAYS;AACZ,eAAOF;eAAQ,AAACT,sCAAWC,MAAMC;;;;;AAJvC,AAOM,AACE,AAASA,WAAIS;;AACb,eAAO,EAAK,AAACC,cAAIH,oBAAS,OAAA,NAAYE;eAAOV;;;;;;;;AACrD,4IAAA,rIAACY,4EAAeP;;;;;AAExB,0CAAA,1CAAMQ,4FACkBR;AADxB,AAEE,OAACS,8BAAiB,AAACV,4CAAiBC;;AAEtC,yCAAA,zCAAMU,0FACkBV;AADxB,AAEE,IAAMW,IAAE,AAACZ,4CAAiBC;AAA1B,AACE,yDAAA,lDAACY,uDAAiBD","names":["rewrite-cljc.parser.string/flush-into","lines","buf","s","cljs.core.conj","rewrite-cljc.parser.string/read-string-data","reader","rewrite-cljc.parser.utils/ignore","js/goog.string.StringBuffer","escape?","temp__5718__auto__","c","cljs.core/not","rewrite_cljc.parser.utils.throw_reader","rewrite-cljc.parser.string/parse-string","rewrite-cljc.node/string-node","rewrite-cljc.parser.string/parse-regex","h","clojure.string.join"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.parser.string\n  (:require [clojure.string :as string]\n            [clojure.tools.reader.reader-types :as r]\n            [rewrite-cljc.node :as node]\n            [rewrite-cljc.parser.utils :as u])\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- flush-into\n  \"Flush buffer and add string to the given vector.\"\n  [lines ^StringBuffer buf]\n  (let [s (.toString buf)]\n    #?(:clj (.setLength buf 0) :cljs (.clear buf))\n    (conj lines s)))\n\n(defn- read-string-data\n  [#?(:cljs ^not-native reader :default reader)]\n  (u/ignore reader)\n  (let [buf (StringBuffer.)]\n    (loop [escape? false\n           lines []]\n      (if-let [c (r/read-char reader)]\n        (cond (and (not escape?) (identical? c \\\"))\n              (flush-into lines buf)\n\n              (identical? c \\newline)\n              (recur escape? (flush-into lines buf))\n\n              :else\n              (do\n                (.append buf c)\n                (recur (and (not escape?) (identical? c \\\\)) lines)))\n        (u/throw-reader reader \"Unexpected EOF while reading string.\")))))\n\n(defn parse-string\n  [#?(:cljs ^not-native reader :default reader)]\n  (node/string-node (read-string-data reader)))\n\n(defn parse-regex\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [h (read-string-data reader)]\n    (string/join \"\\n\" h)))\n"]}