{"version":3,"sources":["rewrite_cljc/parser/whitespace.cljc"],"mappings":";AAMA;;;;kDAAA,lDAAMA,4GAGkBC;AAHxB,AAIE,IAAMC,IAAE,AAACC,yBAAYF;AAArB,AACE,GAAM,AAACG,qCAAkBF;AACnB,OAACG,+BACA,AAACC,6DAAkBL,OAAOG;;AAFjC,GAIM,AAACG,iCAAcL;AACf,OAACM,6BACA,AAACF,6DAAkBL,OAAOM;;AANjC,AASM,OAACE,kCACA,AAACH,6DAAkBL,OAAOS","names":["rewrite-cljc.parser.whitespace/parse-whitespace","reader","c","rewrite-cljc.reader/peek","rewrite-cljc.reader/linebreak?","rewrite-cljc.node/newline-node","rewrite_cljc.reader.read_while","rewrite-cljc.reader/comma?","rewrite-cljc.node/comma-node","rewrite-cljc.node/whitespace-node","rewrite-cljc.reader/space?"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.parser.whitespace\n  (:require [rewrite-cljc.node :as node]\n            [rewrite-cljc.reader :as reader]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn parse-whitespace\n  \"Parse as much whitespace as possible. The created node can either contain\n   only linebreaks or only space/tabs.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [c (reader/peek reader)]\n    (cond (reader/linebreak? c)\n          (node/newline-node\n           (reader/read-while reader reader/linebreak?))\n\n          (reader/comma? c)\n          (node/comma-node\n           (reader/read-while reader reader/comma?))\n\n          :else\n          (node/whitespace-node\n           (reader/read-while reader reader/space?)))))\n"]}