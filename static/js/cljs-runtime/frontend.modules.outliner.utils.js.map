{"version":3,"sources":["frontend/modules/outliner/utils.cljs"],"mappings":";AAMA,kDAAA,lDAAMA,4GACHC;AADH,AAEE,qCAAA,5BACE,OAASA,uBACT,OAASA,qBACT,AAACC,sBAAMD;;AAEX,iDAAA,jDAAME,0GACHF;AADH,AAEE,GAAQ,AAACD,gDAAUC;AAAnB;;AAAA,AAAA,MAAA,KAAAG,MAAA,CAAA,sUAAA,KAAA,7QACE,0DAAA,1DAACC,gJAAgD,AAACC,wGAAOL;;;AAE7D,gDAAA,hDAAMM,wGACHN;AADH,AAEE,GACE,AAACD,gDAAUC;AACXA;;AAFF,GAIE,EACE,AAACO,wBAAQP,SACT,iEAAA,jEAACQ,6CAAE,AAACC,gBAAMT;AACZ,OAACU,iBAAOV;;AAPV,GASE,EACE,AAACO,wBAAQP,SACT,iEAAA,jEAACQ,6CAAE,AAACC,gBAAMT;AACZ,IAAMW,OAAK,sDAAA,tDAACC;AAAZ,oGACM,AAACC,+BAAsBF,KAAKX,xIAC9B,OAAA;;AAdN,GAgBE,EAAI,AAACc,qCAAUd,SAAI,AAACe,qBAAKf;AACzB,IAAMW,OAAK,sDAAA,tDAACC;AAAZ,oGACM,AAACC,+BAAsBF,KAAK,AAAA,mFAAQX,3NACtC,OAAA;;AAnBN,AAAA;;;;;;;AAuBF;;;;;;;;wDAAA,xDAAMgB,wHAOHhB;AAPH,AAQE,GACE,EACE,AAACO,wBAAQP,SACT,iEAAA,jEAACQ,6CAAE,AAACC,gBAAMT;AACZA;;AAJF,GAME,AAACD,gDAAUC;AANb,0FAAA,+DAOeA;;AAPf,GASE,EAAI,AAACc,qCAAUd,SAAI,AAACe,qBAAKf;AACzBA;;AAVF,AAAA","names":["frontend.modules.outliner.utils/block-id?","id","cljs.core/uuid?","frontend.modules.outliner.utils/check-block-id","js/Error","frontend.util.format","cljs.core.pr_str","frontend.modules.outliner.utils/->block-id","cljs.core/vector?","cljs.core._EQ_","cljs.core/first","cljs.core/second","conn","frontend.db.conn.get_db","frontend.db.outliner/get-by-id","datascript.impl.entity/entity?","cljs.core/map?","frontend.modules.outliner.utils/->block-lookup-ref"],"sourcesContent":["(ns frontend.modules.outliner.utils\n  (:require [frontend.db.conn :as conn]\n            [frontend.db.outliner :as db-outliner]\n            [datascript.impl.entity :as e]\n            [frontend.util :as util]))\n\n(defn block-id?\n  [id]\n  (or\n    (number? id)\n    (string? id)\n    (uuid? id)))\n\n(defn check-block-id\n  [id]\n  (assert (block-id? id)\n    (util/format \"The id should match block-id?: %s\" (pr-str id))))\n\n(defn ->block-id\n  [id]\n  (cond\n    (block-id? id)\n    id\n\n    (and\n      (vector? id)\n      (= (first id) :block/uuid))\n    (second id)\n\n    (and\n      (vector? id)\n      (= (first id) :block/name))\n    (let [conn (conn/get-db false)]\n      (-> (db-outliner/get-by-id conn id)\n        (:block/uuid)))\n\n    (or (e/entity? id) (map? id))\n    (let [conn (conn/get-db false)]\n      (-> (db-outliner/get-by-id conn (:db/id id))\n        (:block/uuid)))\n\n    :else nil))\n\n(defn ->block-lookup-ref\n  \"\n  string? or number?  -> [:block/uuid x]\n  [:block/uuid x] -> [:block/uuid x]\n  {:db/id x} -> {:db/id x}\n  :else -> nil\n  \"\n  [id]\n  (cond\n    (and\n      (vector? id)\n      (= (first id) :block/uuid))\n    id\n\n    (block-id? id)\n    [:block/uuid id]\n\n    (or (e/entity? id) (map? id))\n    id\n\n    :else nil))\n"]}