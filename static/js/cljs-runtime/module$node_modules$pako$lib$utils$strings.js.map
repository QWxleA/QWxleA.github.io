{
"version":3,
"file":"module$node_modules$pako$lib$utils$strings.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/pako/lib/utils/strings.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pako$lib$utils$strings\"] = function(global,require,module,exports) {\n// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","buf2binstring","buf","len","subarray","STR_APPLY_UIA_OK","STR_APPLY_OK","String","fromCharCode","apply","utils","shrinkBuf","result","i","__","Uint8Array","_utf8len","Buf8","q","string2buf","exports.string2buf","str","m_pos","str_len","length","buf_len","c","charCodeAt","c2","exports.buf2binstring","binstring2buf","exports.binstring2buf","buf2string","exports.buf2string","max","out","utf16buf","Array","c_len","utf8border","exports.utf8border","pos"]
}
