shadow$provide.module$node_modules$jszip$lib$compressedObject=function(global,require,module,exports){function CompressedObject(compressedSize,uncompressedSize,crc32,compression,data){this.compressedSize=compressedSize;this.uncompressedSize=uncompressedSize;this.crc32=crc32;this.compression=compression;this.compressedContent=data}var external=require("module$node_modules$jszip$lib$external"),DataWorker=require("module$node_modules$jszip$lib$stream$DataWorker"),DataLengthProbe=require("module$node_modules$jszip$lib$stream$DataLengthProbe"),
Crc32Probe=require("module$node_modules$jszip$lib$stream$Crc32Probe");DataLengthProbe=require("module$node_modules$jszip$lib$stream$DataLengthProbe");CompressedObject.prototype={getContentWorker:function(){var worker=(new DataWorker(external.Promise.resolve(this.compressedContent))).pipe(this.compression.uncompressWorker()).pipe(new DataLengthProbe("data_length")),that=this;worker.on("end",function(){if(this.streamInfo.data_length!==that.uncompressedSize)throw Error("Bug : uncompressed data size mismatch");
});return worker},getCompressedWorker:function(){return(new DataWorker(external.Promise.resolve(this.compressedContent))).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}};CompressedObject.createWorkerFrom=function(uncompressedWorker,compression,compressionOptions){return uncompressedWorker.pipe(new Crc32Probe).pipe(new DataLengthProbe("uncompressedSize")).pipe(compression.compressWorker(compressionOptions)).pipe(new DataLengthProbe("compressedSize")).withStreamInfo("compression",
compression)};module.exports=CompressedObject}
//# sourceMappingURL=module$node_modules$jszip$lib$compressedObject.js.map
