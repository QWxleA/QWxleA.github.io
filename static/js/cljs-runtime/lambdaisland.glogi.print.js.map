{"version":3,"sources":["lambdaisland/glogi/print.cljs"],"mappings":"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","names":["lambdaisland.glogi.print/colors","lambdaisland.glogi.print/level-color","level","pred__109512","expr__109513","G__109515","G__109516","G__109517","G__109518","G__109519","G__109520","G__109521","G__109522","G__109523","G__109524","G__109525","G__109526","G__109527","G__109528","cljs.core/<=","lambdaisland.glogi/level-value","var_args","G__109530","lambdaisland.glogi.print/add","js/Error","p__109531","vec__109532","cljs.core.nth","p__109535","vec__109536","p__109539","vec__109540","res","res-css","s","color","cljs.core.conj","cljs.core.get","fg","bg","lambdaisland.glogi.print/print-console-log-css","value","cljs.core._EQ_","lambdaisland.glogi.print.add","cljs.core/Keyword","cljs.core/Symbol","cljs.core.pr_str","cljs.core/map-entry?","G__109547","G__109548","cljs.core/key","G__109545","G__109546","cljs.core/val","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","%","cljs.core.reduce","cljs.core.interpose","cljs.core/map?","t","cljs.core/type","n","cljs.core/empty?","cljs.core/set?","cljs.core/vector?","cljs.core/PersistentQueue","cljs.core.into","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IAtom","cljs.core/deref","cljs.core/uuid?","cljs.core/object?","p1__109543#","p2__109544#","cljs.core.assoc","cljs.core.keyword","lambdaisland.glogi.print.goog$module$goog$object.get","js/Object.keys","cljs.core/array?","lambdaisland.glogi.print/format","logger-name","vec__109550","cljs.core/cons"],"sourcesContent":["(ns lambdaisland.glogi.print\n  (:require [lambdaisland.glogi :as glogi]\n            [goog.object :as gobj]))\n\n;; https://github.com/chriskempson/base16-tomorrow-scheme/blob/master/tomorrow.yaml\n\n(def colors\n  {:white    \"#ffffff\"\n   :gray1    \"#e0e0e0\"\n   :gray2    \"#d6d6d6\"\n   :gray3    \"#8e908c\"\n   :gray4    \"#969896\"\n   :gray5    \"#4d4d4c\"\n   :gray6    \"#282a2e\"\n   :black    \"#1d1f21\"\n   :red      \"#c82829\"\n   :orange   \"#f5871f\"\n   :yellow   \"#eab700\"\n   :green    \"#718c00\"\n   :turqoise \"#3e999f\"\n   :blue     \"#4271ae\"\n   :purple   \"#8959a8\"\n   :brown    \"#a3685a\"})\n\n(defn level-color [level]\n  (condp <= (glogi/level-value level)\n    (glogi/level-value :severe)  :red\n    (glogi/level-value :warning) :orange\n    (glogi/level-value :info)    :blue\n    (glogi/level-value :config)  :green\n    (glogi/level-value :fine)    :yellow\n    (glogi/level-value :finer)   :gray3\n    (glogi/level-value :finest)  :gray4\n    :gray2))\n\n(defn add\n  ([[res res-css] s]\n   [(str res s) res-css])\n  ([[res res-css] s color]\n   [(str res \"%c\" (str s) \"%c\") (conj res-css (str \"color:\" (get colors color)) \"color:black\")])\n  ([[res res-css] s fg bg]\n   [(str res \"%c\" (str s) \"%c\") (conj res-css\n                                      (str \"color:\" (get colors fg)\n                                           \";background-color:\" (get colors bg))\n                                      \"color:black;background-color:inherit\")]))\n\n(defn print-console-log-css [res value]\n  (cond\n    (= ::comma value)\n    (add res \", \" :gray2)\n\n    (= ::space value)\n    (add res \" \")\n\n    (keyword? value)\n    (add res value :blue)\n\n    (symbol? value)\n    (add res value :green)\n\n    (string? value)\n    (add res (pr-str value) :turqoise)\n\n    (map-entry? value)\n    (-> res\n        (print-console-log-css (key value))\n        (add \" \")\n        (print-console-log-css (val value)))\n\n    (or (instance? cljs.core/PersistentArrayMap value)\n        (instance? cljs.core/PersistentHashMap value))\n    (as-> res %\n      (add % \"{\" :purple)\n      (reduce print-console-log-css % (interpose ::comma value))\n      (add % \"}\" :purple))\n\n    (map? value) ;; non-standard map implementation\n    (as-> res %\n      (add % (str \"#\" (let [t (type value)\n                            n (.-name t)]\n                        (if (empty? n)\n                          (pr-str t)\n                          n)) \" \") :brown)\n      (add % \"{\" :purple)\n      (reduce print-console-log-css % (interpose ::comma value))\n      (add % \"}\" :purple))\n\n    (set? value)\n    (as-> res %\n      (add % \"#{\" :purple)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \"}\" :purple))\n\n    (vector? value)\n    (as-> res %\n      (add % \"[\" :purple)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \"]\" :purple))\n\n    (instance? cljs.core.PersistentQueue value)\n    (-> res\n        (add \"#queue \" :brown)\n        (recur (into [] value)))\n\n    (seq? value)\n    (as-> res %\n      (add % \"(\" :brown)\n      (reduce print-console-log-css % (interpose ::space value))\n      (add % \")\" :brown))\n\n    (satisfies? IAtom value)\n    (-> res\n        (add \"#atom \" :brown)\n        (recur @value))\n\n    (uuid? value)\n    (-> res\n        (add \"#uuid \" :brown)\n        (recur (str value)))\n\n    (object? value)\n    (-> res\n        (add \"#js \" :brown)\n        (recur (reduce #(assoc %1 (keyword %2) (gobj/get value %2)) {} (js/Object.keys value))))\n\n    (array? value)\n    (-> res\n        (add \"#js \" :brown)\n        (recur (into [] value)))\n\n    :else\n    (add res (pr-str value) :gray5)))\n\n(defn format [level logger-name value]\n  (let [color (level-color level)\n        [res res-css] (-> [\"\" []]\n                          (add \"[\" :white color)\n                          (add logger-name :white color)\n                          (add \"]\" :white color)\n                          (add \" \")\n                          (print-console-log-css value))]\n    (cons res res-css)))\n"]}