{"version":3,"sources":["frontend/handler/repo.cljs"],"mappings":"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","names":["frontend.handler.repo/create-config-file-if-not-exists","repo-url","frontend.spec/validate","repo-dir","frontend.config/get-repo-dir","app-dir","frontend.config/app-name","dir","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","_","frontend.fs/mkdir-if-not-exists","default-content","frontend.config/config-default-content","path","frontend.config/config-file","file-exists?","frontend.fs.create_if_not_exists","frontend.handler.file.reset_file_BANG_","frontend.handler.common/reset-config!","frontend.handler.repo/create-contents-file","p__62695","vec__62696","cljs.core.nth","pages-dir","frontend.state/get-pages-directory","org-path","md-path","p1__62691#","cljs.core.map","contents-file-exist?","p1__62692#","cljs.core/some","frontend.fs/file-exists?","format","frontend.state.get_preferred_format","frontend.config/get-file-extension","file-path","G__62699","cljs.core/name","frontend.handler.repo/create-custom-theme","frontend.config/custom-css-file","frontend.handler.repo/create-dummy-notes-page","content","frontend.config/get-pages-directory","_file-exists?","p__62700","map__62701","cljs.core/--destructure-map","cljs.core.get","frontend.handler.repo/create-today-journal-if-not-exists","frontend.state/enable-journals?","title","frontend.date/today","file-name","frontend.date/journal-title->default","frontend.util/default-content-with-title","template","frontend.state/get-default-journal-template","and__4251__auto__","clojure.string/blank?","frontend.config/get-journals-directory","page-exists?","G__62702","G__62703","frontend.db/entity","frontend.util/page-name-sanity-lc","empty-blocks?","G__62704","G__62705","frontend.db/page-empty?","or__4253__auto__","cljs.core/not","frontend.fs.nfs/check-directory-permission!","frontend.state/editing?","frontend.handler.ui.re_render_root_BANG_","var_args","G__62707","frontend.handler.repo/create-default-files!","js/Error","frontend.handler.repo.create_default_files_BANG_","encrypted?","frontend.config/recycle-dir","frontend.handler.file/create-metadata-file","frontend.state/pub-event!","G__62712","frontend.handler.repo/load-pages-metadata!","repo","file-paths","files","frontend.handler.repo.load_pages_metadata_BANG_","force?","e62714","file","frontend.config.get_pages_metadata_path","cljs.core/contains?","cljs.core/set","temp__5720__auto__","p1__62710#","cljs.core._EQ_","metadata","frontend.handler.common/safe-read-string","pages","frontend.db/get-all-pages","cljs.core/zipmap","cljs.core.filter","p__62715","map__62716","name","created-at","updated-at","page","cljs.core.not_EQ_","cljs.core.remove","cljs.core/nil?","cljs.core/seq","frontend.db/transact!","e","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.repo/update-pages-metadata!","js/goog.DEBUG","k__45304__auto__","js/console","res__45305__auto__","frontend.handler.repo/parse-and-load-file!","new-graph?","e62721","frontend.handler.file/alter-file","frontend.state/set-parsing-state!","m","cljs.core.update","cljs.core/conj","cljs.core/inc","frontend.handler.repo/after-parse","db-encrypted?","re-render?","re-render-opts","opts","graph-added-chan","frontend.state/enable-encryption?","p1__62724#","frontend.state/reset-parsing-state!","frontend.state/set-loading-files!","cljs.core.async/offer!","frontend.handler.repo/parse-files-and-create-default-files-inner!","delete-files","delete-blocks","map__62729","map__62730","support-files","frontend.format/get-format","clojure.set.union","frontend.config/mldoc-support-formats","cljs.core.sort_by","journals","non-journals","cljs.core/group-by","clojure.string/includes?","built-in","others","support-files'","cljs.core.concat","cljs.core/reverse","delete-data","chan","cljs.core.async/to-chan!","cljs.core.async.promise_chan","frontend.state/set-current-repo!","cljs.core/count","frontend.util/node-test?","seq__62734","chunk__62735","count__62736","i__62737","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","cljs.core.assoc","c__41861__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41862__auto__","switch__41838__auto__","state_62766","state_val_62767","statearr-62768","cljs.core.async.impl.ioc-helpers/take!","inst_62764","cljs.core.async.impl.ioc-helpers/return-chan","inst_62748","statearr-62773","statearr-62777","statearr-62778","inst_62752","temp__5718__auto__","inst_62753","inst_62754","statearr-62786","inst_62760","statearr-62800","inst_62762","statearr-62805","inst_62756","inst_62757","statearr-62806","statearr-62808","statearr-62815","state-machine__41839__auto__","ret-value__41840__auto__","result__41841__auto__","cljs.core/keyword-identical?","ex__41842__auto__","e62818","statearr-62819","statearr-62820","state__41863__auto__","statearr-62825","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","frontend.handler.repo/parse-files-and-create-default-files!","promesa.core/all","frontend.encrypt.decrypt","p__62836","map__62837","frontend.handler.repo/parse-files-and-load-to-db!","_refresh?","metadata-file","frontend.config.get_metadata_path","metadata-content","p1__62835#","frontend.handler.common/read-metadata!","db-encrypted-secret","close-fn","frontend.state/set-state!","p__62844","map__62845","frontend.handler.repo/load-repo-to-db!","diffs","nfs-files","refresh?","empty-graph?","frontend.handler.route.redirect_to_home_BANG_","config","frontend.state.get_config","G__62846","p1__62838#","frontend.config.get_config_path","frontend.handler.common/read-config","relate-path-fn","k","G__62847","clojure.string/replace","js/decodeURI","frontend.config/get-local-dir","p1__62839#","frontend.handler.common/remove-hidden-files","p1__62840#","load-contents","option","frontend.handler.file/load-files-contents!","files-contents","filter-diffs","type","f","remove-files","modify-files","add-files","frontend.db/delete-files","frontend.db/delete-blocks","delete-pages","frontend.db/delete-pages-by-files","add-or-modify-files","G__62848","logseq.graph-parser.util/remove-nils","options","p__62849","map__62850","frontend.handler.repo/remove-repo!","url","delete-db-f","graph-exists?","frontend.db/get-db","frontend.db/remove-conn!","frontend.db.persist/delete-graph!","frontend.search/remove-db!","frontend.state/delete-repo!","electron.ipc.ipc","frontend.config/local-db?","frontend.idb/clear-local-db!","frontend.handler.repo/start-repo-db-if-not-exists!","frontend.db.start_db_conn_BANG_","frontend.handler.repo/setup-local-repo-if-not-exists!","js/window.pfs","frontend.config/local-repo","___42616__auto__","___42615__auto__","frontend.config/publishing?","dummy-notes","frontend.context.i18n.t","tutorial","clojure.string/replace-first","frontend.state/set-db-restoring!","js/setTimeout","G__62852","frontend.handler.repo/restore-and-setup-repo!","frontend.handler.repo.restore_and_setup_repo_BANG_","frontend.state/get-me","me","frontend.db/restore-graph!","frontend.handler.file.restore_config_BANG_","frontend.db/listen-and-persist!","frontend.handler.ui/add-style-if-exists!","frontend.handler.repo/rebuild-index!","frontend.search/reset-indice!","frontend.db/clear-query-state!","promesa.core.catch$","error","cljs.core.prn","frontend.handler.repo/re-index!","nfs-rebuild-index!","ok-handler","frontend.state/get-current-repo","local?","frontend.handler.metadata/set-pages-metadata!","G__62854","frontend.handler.repo/persist-db!","p__62855","map__62856","frontend.handler.repo.persist_db_BANG_","handlers","before","on-success","on-error","frontend.db/persist!","js/console.error","frontend.handler.repo/broadcast-persist-db!","graph","frontend.handler.repo/graph-ready!"],"sourcesContent":["(ns frontend.handler.repo\n  (:refer-clojure :exclude [clone])\n  (:require [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.context.i18n :refer [t]]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.format :as format]\n            [frontend.fs :as fs]\n            [frontend.fs.nfs :as nfs]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.file :as file-handler]\n            [frontend.handler.route :as route-handler]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.handler.metadata :as metadata-handler]\n            [frontend.idb :as idb]\n            [frontend.search :as search]\n            [frontend.spec :as spec]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [shadow.resource :as rc]\n            [frontend.db.persist :as db-persist]\n            [logseq.graph-parser.util :as gp-util]\n            [electron.ipc :as ipc]\n            [clojure.set :as set]\n            [clojure.core.async :as async]\n            [frontend.encrypt :as encrypt]))\n\n;; Project settings should be checked in two situations:\n;; 1. User changes the config.edn directly in logseq.com (fn: alter-file)\n;; 2. Git pulls the new change (fn: load-files)\n\n(defn create-config-file-if-not-exists\n  [repo-url]\n  (spec/validate :repos/url repo-url)\n  (let [repo-dir (config/get-repo-dir repo-url)\n        app-dir config/app-name\n        dir (str repo-dir \"/\" app-dir)]\n    (p/let [_ (fs/mkdir-if-not-exists dir)]\n      (let [default-content config/config-default-content\n            path (str app-dir \"/\" config/config-file)]\n        (p/let [file-exists? (fs/create-if-not-exists repo-url repo-dir (str app-dir \"/\" config/config-file) default-content)]\n          (when-not file-exists?\n            (file-handler/reset-file! repo-url path default-content)\n            (common-handler/reset-config! repo-url default-content)))))))\n\n(defn create-contents-file\n  [repo-url]\n  (spec/validate :repos/url repo-url)\n  (p/let [repo-dir (config/get-repo-dir repo-url)\n          pages-dir (state/get-pages-directory)\n          [org-path md-path] (map #(str \"/\" pages-dir \"/contents.\" %) [\"org\" \"md\"])\n          contents-file-exist? (some #(fs/file-exists? repo-dir %) [org-path md-path])]\n    (when-not contents-file-exist?\n      (let [format (state/get-preferred-format)\n            path (str pages-dir \"/contents.\"\n                      (config/get-file-extension format))\n            file-path (str \"/\" path)\n            default-content (case (name format)\n                              \"org\" (rc/inline \"contents.org\")\n                              \"markdown\" (rc/inline \"contents.md\")\n                              \"\")]\n        (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" pages-dir))\n                file-exists? (fs/create-if-not-exists repo-url repo-dir file-path default-content)]\n          (when-not file-exists?\n            (file-handler/reset-file! repo-url path default-content)))))))\n\n(defn create-custom-theme\n  [repo-url]\n  (spec/validate :repos/url repo-url)\n  (let [repo-dir (config/get-repo-dir repo-url)\n        path (str config/app-name \"/\" config/custom-css-file)\n        file-path (str \"/\" path)\n        default-content \"\"]\n    (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name))\n            file-exists? (fs/create-if-not-exists repo-url repo-dir file-path default-content)]\n      (when-not file-exists?\n        (file-handler/reset-file! repo-url path default-content)))))\n\n(defn create-dummy-notes-page\n  [repo-url content]\n  (spec/validate :repos/url repo-url)\n  (let [repo-dir (config/get-repo-dir repo-url)\n        path (str (config/get-pages-directory) \"/how_to_make_dummy_notes.md\")\n        file-path (str \"/\" path)]\n    (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" (config/get-pages-directory)))\n            _file-exists? (fs/create-if-not-exists repo-url repo-dir file-path content)]\n      (file-handler/reset-file! repo-url path content))))\n\n(defn- create-today-journal-if-not-exists\n  [repo-url {:keys [content]}]\n  (spec/validate :repos/url repo-url)\n  (when (state/enable-journals? repo-url)\n    (let [repo-dir (config/get-repo-dir repo-url)\n          format (state/get-preferred-format repo-url)\n          title (date/today)\n          file-name (date/journal-title->default title)\n          default-content (util/default-content-with-title format)\n          template (state/get-default-journal-template)\n          template (when (and template\n                              (not (string/blank? template)))\n                     template)\n          content (cond\n                    content\n                    content\n\n                    template\n                    (str default-content template)\n\n                    :else\n                    default-content)\n          path (str (config/get-journals-directory) \"/\" file-name \".\"\n                    (config/get-file-extension format))\n          file-path (str \"/\" path)\n          page-exists? (db/entity repo-url [:block/name (util/page-name-sanity-lc title)])\n          empty-blocks? (db/page-empty? repo-url (util/page-name-sanity-lc title))]\n      (when (or empty-blocks? (not page-exists?))\n        (p/let [_ (nfs/check-directory-permission! repo-url)\n                _ (fs/mkdir-if-not-exists (str repo-dir \"/\" (config/get-journals-directory)))\n                file-exists? (fs/file-exists? repo-dir file-path)]\n          (when-not file-exists?\n            (p/let [_ (file-handler/reset-file! repo-url path content)]\n              (p/let [_ (fs/create-if-not-exists repo-url repo-dir file-path content)]\n                (when-not (state/editing?)\n                  (ui-handler/re-render-root!)))))\n          (when-not (state/editing?)\n            (ui-handler/re-render-root!)))))))\n\n(defn create-default-files!\n  ([repo-url]\n   (create-default-files! repo-url false))\n  ([repo-url encrypted?]\n   (spec/validate :repos/url repo-url)\n   (let [repo-dir (config/get-repo-dir repo-url)]\n     (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name))\n             _ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name \"/\" config/recycle-dir))\n             _ (fs/mkdir-if-not-exists (str repo-dir \"/\" (config/get-journals-directory)))\n             _ (file-handler/create-metadata-file repo-url encrypted?)\n             _ (create-config-file-if-not-exists repo-url)\n             _ (create-contents-file repo-url)\n             _ (create-custom-theme repo-url)]\n       (state/pub-event! [:page/create-today-journal repo-url])))))\n\n(defn- load-pages-metadata!\n  \"force?: if set true, skip the metadata timestamp range check\"\n  ([repo file-paths files]\n   (load-pages-metadata! repo file-paths files false))\n  ([repo file-paths files force?]\n   (try\n     (let [file (config/get-pages-metadata-path)]\n       (when (contains? (set file-paths) file)\n         (when-let [content (some #(when (= (:file/path %) file) (:file/content %)) files)]\n           (let [metadata (common-handler/safe-read-string content \"Parsing pages metadata file failed: \")\n                 pages (db/get-all-pages repo)\n                 pages (zipmap (map :block/name pages) pages)\n                 metadata (->>\n                           (filter (fn [{:block/keys [name created-at updated-at]}]\n                                     (when-let [page (get pages name)]\n                                       (and\n                                        (>= updated-at created-at) ;; metadata validation\n                                        (or force? ;; when force is true, shortcut timestamp range check\n                                            (and (or (nil? (:block/created-at page))\n                                                     (>= created-at (:block/created-at page)))\n                                                 (or (nil? (:block/updated-at page))\n                                                     (>= updated-at (:block/created-at page)))))\n                                        (or ;; persistent metadata is the gold standard\n                                         (not= created-at (:block/created-at page))\n                                         (not= updated-at (:block/created-at page)))))) metadata)\n                           (remove nil?))]\n             (when (seq metadata)\n               (db/transact! repo metadata))))))\n     (catch js/Error e\n       (log/error :exception e)))))\n\n(defn update-pages-metadata!\n  \"update pages meta content -> db. Only accept non-encrypted content!\"\n  [repo content force?]\n  (let [path (config/get-pages-metadata-path)\n        files [{:file/path path\n                :file/content content}]\n        file-paths [path]]\n    (util/profile \"update-pages-metadata!\" (load-pages-metadata! repo file-paths files force?))))\n\n(defn- parse-and-load-file!\n  [repo-url file new-graph?]\n  (try\n    (file-handler/alter-file repo-url\n                             (:file/path file)\n                             (:file/content file)\n                             {:new-graph? new-graph?\n                              :re-render-root? false\n                              :from-disk? true})\n    (catch :default e\n      (state/set-parsing-state! (fn [m]\n                                  (update m :failed-parsing-files conj [(:file/path file) e])))))\n  (state/set-parsing-state! (fn [m]\n                              (update m :finished inc))))\n\n(defn- after-parse\n  [repo-url files file-paths db-encrypted? re-render? re-render-opts opts graph-added-chan]\n  (load-pages-metadata! repo-url file-paths files true)\n  (when (or (:new-graph? opts) (not (:refresh? opts)))\n    (if (and (not db-encrypted?) (state/enable-encryption? repo-url))\n      (state/pub-event! [:modal/encryption-setup-dialog repo-url\n                         #(create-default-files! repo-url %)])\n      (create-default-files! repo-url db-encrypted?)))\n  (when re-render?\n    (ui-handler/re-render-root! re-render-opts))\n  (state/pub-event! [:graph/added repo-url opts])\n  (state/reset-parsing-state!)\n  (state/set-loading-files! repo-url false)\n  (async/offer! graph-added-chan true))\n\n(defn- parse-files-and-create-default-files-inner!\n  [repo-url files delete-files delete-blocks file-paths db-encrypted? re-render? re-render-opts opts]\n  (let [support-files (filter\n                       (fn [file]\n                         (let [format (format/get-format (:file/path file))]\n                           (contains? (set/union #{:edn :css} config/mldoc-support-formats) format)))\n                       files)\n        support-files (sort-by :file/path support-files)\n        {journals true non-journals false} (group-by (fn [file] (string/includes? (:file/path file) \"journals/\")) support-files)\n        {built-in true others false} (group-by (fn [file]\n                                                 (or (string/includes? (:file/path file) \"contents.\")\n                                                     (string/includes? (:file/path file) \".edn\")\n                                                     (string/includes? (:file/path file) \"custom.css\"))) non-journals)\n        support-files' (concat (reverse journals) built-in others)\n        new-graph? (:new-graph? opts)\n        delete-data (->> (concat delete-files delete-blocks)\n                         (remove nil?))\n        chan (async/to-chan! support-files')\n        graph-added-chan (async/promise-chan)]\n    (when (seq delete-data) (db/transact! repo-url delete-data))\n    (state/set-current-repo! repo-url)\n    (state/set-parsing-state! {:total (count support-files')})\n    ;; Synchronous for tests for not breaking anything\n    (if util/node-test?\n      (do\n        (doseq [file support-files']\n          (state/set-parsing-state! (fn [m]\n                                      (assoc m :current-parsing-file (:file/path file))))\n          (parse-and-load-file! repo-url file new-graph?))\n        (after-parse repo-url files file-paths db-encrypted? re-render? re-render-opts opts graph-added-chan))\n      (async/go-loop []\n        (if-let [file (async/<! chan)]\n          (do\n            (state/set-parsing-state! (fn [m]\n                                        (assoc m :current-parsing-file (:file/path file))))\n            (async/<! (async/timeout 10))\n            (parse-and-load-file! repo-url file new-graph?)\n            (recur))\n          (after-parse repo-url files file-paths db-encrypted? re-render? re-render-opts opts graph-added-chan))))\n    graph-added-chan))\n\n(defn- parse-files-and-create-default-files!\n  [repo-url files delete-files delete-blocks file-paths db-encrypted? re-render? re-render-opts opts]\n  (if db-encrypted?\n    (p/let [files (p/all\n                   (map (fn [file]\n                          (p/let [content (encrypt/decrypt (:file/content file))]\n                            (assoc file :file/content content)))\n                     files))]\n      (parse-files-and-create-default-files-inner! repo-url files delete-files delete-blocks file-paths db-encrypted? re-render? re-render-opts opts))\n    (parse-files-and-create-default-files-inner! repo-url files delete-files delete-blocks file-paths db-encrypted? re-render? re-render-opts opts)))\n\n(defn parse-files-and-load-to-db!\n  [repo-url files {:keys [delete-files delete-blocks re-render? re-render-opts _refresh?] :as opts\n                   :or {re-render? true}}]\n  (let [file-paths (map :file/path files)\n        metadata-file (config/get-metadata-path)\n        metadata-content (some #(when (= (:file/path %) metadata-file)\n                                  (:file/content %)) files)\n        metadata (when metadata-content\n                   (common-handler/read-metadata! metadata-content))\n        db-encrypted? (:db/encrypted? metadata)\n        db-encrypted-secret (if db-encrypted? (:db/encrypted-secret metadata) nil)]\n    (if db-encrypted?\n      (let [close-fn #(parse-files-and-create-default-files! repo-url files delete-files delete-blocks file-paths db-encrypted? re-render? re-render-opts opts)]\n        (state/set-state! :encryption/graph-parsing? true)\n        (state/pub-event! [:modal/encryption-input-secret-dialog repo-url\n                           db-encrypted-secret\n                           close-fn]))\n      (parse-files-and-create-default-files! repo-url files delete-files delete-blocks file-paths db-encrypted? re-render? re-render-opts opts))))\n\n(defn load-repo-to-db!\n  [repo-url {:keys [diffs nfs-files refresh? new-graph? empty-graph?]}]\n  (spec/validate :repos/url repo-url)\n  (route-handler/redirect-to-home!)\n  (state/set-parsing-state! {:graph-loading? true})\n  (let [config (or (state/get-config repo-url)\n                   (when-let [content (some-> (first (filter #(= (config/get-config-path repo-url) (:file/path %)) nfs-files))\n                                              :file/content)]\n                     (common-handler/read-config content)))\n        relate-path-fn (fn [m k]\n                         (some-> (get m k)\n                                 (string/replace (js/decodeURI (config/get-local-dir repo-url)) \"\")))\n        nfs-files (common-handler/remove-hidden-files nfs-files config #(relate-path-fn % :file/path))\n        diffs (common-handler/remove-hidden-files diffs config #(relate-path-fn % :path))\n        load-contents (fn [files option]\n                        (file-handler/load-files-contents!\n                         repo-url\n                         files\n                         (fn [files-contents]\n                           (parse-files-and-load-to-db! repo-url files-contents (assoc option :refresh? refresh?)))))]\n    (cond\n      (and (not (seq diffs)) nfs-files)\n      (parse-files-and-load-to-db! repo-url nfs-files {:new-graph? new-graph?\n                                                       :empty-graph? empty-graph?})\n\n      :else\n      (when (seq diffs)\n        (let [filter-diffs (fn [type] (->> (filter (fn [f] (= type (:type f))) diffs)\n                                           (map :path)))\n              remove-files (filter-diffs \"remove\")\n              modify-files (filter-diffs \"modify\")\n              add-files (filter-diffs \"add\")\n              delete-files (when (seq remove-files)\n                             (db/delete-files remove-files))\n              delete-blocks (db/delete-blocks repo-url remove-files true)\n              delete-blocks (->>\n                             (concat\n                              delete-blocks\n                              (db/delete-blocks repo-url modify-files false))\n                             (remove nil?))\n              delete-pages (if (seq remove-files)\n                             (db/delete-pages-by-files remove-files)\n                             [])\n              add-or-modify-files (some->>\n                                   (concat modify-files add-files)\n                                   (gp-util/remove-nils))\n              options {:delete-files (concat delete-files delete-pages)\n                       :delete-blocks delete-blocks\n                       :re-render? true}]\n          (if (seq nfs-files)\n            (parse-files-and-load-to-db! repo-url nfs-files\n                                         (assoc options\n                                                :refresh? refresh?\n                                                :re-render-opts {:clear-all-query-state? true}))\n            (load-contents add-or-modify-files options)))))))\n\n(defn remove-repo!\n  [{:keys [url] :as repo}]\n  (let [delete-db-f (fn []\n                      (let [graph-exists? (db/get-db url)]\n                        (db/remove-conn! url)\n                        (db-persist/delete-graph! url)\n                        (search/remove-db! url)\n                        (state/delete-repo! repo)\n                        (when graph-exists? (ipc/ipc \"graphUnlinked\" repo))))]\n    (when (or (config/local-db? url) (= url \"local\"))\n      (p/let [_ (idb/clear-local-db! url)] ; clear file handles\n        (delete-db-f)))))\n\n(defn start-repo-db-if-not-exists!\n  [repo option]\n  (state/set-current-repo! repo)\n  (db/start-db-conn! nil repo option))\n\n(defn setup-local-repo-if-not-exists!\n  []\n  (if js/window.pfs\n    (let [repo config/local-repo]\n      (p/do! (fs/mkdir-if-not-exists (str \"/\" repo))\n             (state/set-current-repo! repo)\n             (db/start-db-conn! nil repo)\n             (when-not config/publishing?\n               (let [dummy-notes (t :tutorial/dummy-notes)]\n                 (create-dummy-notes-page repo dummy-notes)))\n             (when-not config/publishing?\n               (let [tutorial (t :tutorial/text)\n                     tutorial (string/replace-first tutorial \"$today\" (date/today))]\n                 (create-today-journal-if-not-exists repo {:content tutorial})))\n             (create-config-file-if-not-exists repo)\n             (create-contents-file repo)\n             (create-custom-theme repo)\n             (state/set-db-restoring! false)\n             (ui-handler/re-render-root!)))\n    (js/setTimeout setup-local-repo-if-not-exists! 100)))\n\n(defn restore-and-setup-repo!\n  \"Restore the db of a graph from the persisted data, and setup.\n   Create a new conn, or replace the conn in state with a new one.\n   me: optional, identity data, can be retrieved from `(state/get-me)` or `nil`\"\n  ([repo]\n   (restore-and-setup-repo! repo (state/get-me)))\n  ([repo me]\n   (p/let [_ (state/set-db-restoring! true)\n           _ (db/restore-graph! repo me)]\n     (file-handler/restore-config! repo false)\n     ;; Don't have to unlisten the old listerner, as it will be destroyed with the conn\n     (db/listen-and-persist! repo)\n     (ui-handler/add-style-if-exists!)\n     (state/set-db-restoring! false))))\n\n(defn rebuild-index!\n  [url]\n  (when url\n    (search/reset-indice! url)\n    (db/remove-conn! url)\n    (db/clear-query-state!)\n    (-> (p/do! (db-persist/delete-graph! url))\n        (p/catch (fn [error]\n                   (prn \"Delete repo failed, error: \" error))))))\n\n(defn re-index!\n  [nfs-rebuild-index! ok-handler]\n  (route-handler/redirect-to-home!)\n  (when-let [repo (state/get-current-repo)]\n    (let [local? (config/local-db? repo)]\n      (if local?\n        (p/let [_ (metadata-handler/set-pages-metadata! repo)]\n          (nfs-rebuild-index! repo ok-handler))\n        (rebuild-index! repo))\n      (js/setTimeout\n       (route-handler/redirect-to-home!)\n       500))))\n\n(defn persist-db!\n  ([]\n   (persist-db! {}))\n  ([handlers]\n   (persist-db! (state/get-current-repo) handlers))\n  ([repo {:keys [before on-success on-error]}]\n   (->\n    (p/do!\n     (when before\n       (before))\n     (metadata-handler/set-pages-metadata! repo)\n     (db/persist! repo)\n     (when on-success\n       (on-success)))\n    (p/catch (fn [error]\n               (js/console.error error)\n               (when on-error\n                 (on-error)))))))\n\n(defn broadcast-persist-db!\n  \"Only works for electron\n   Call backend to handle persisting a specific db on other window\n   Skip persisting if no other windows is open (controlled by electron)\n     step 1. [In HERE]  a window         ---broadcastPersistGraph---->   electron\n     step 2.            electron         ---------persistGraph------->   window holds the graph\n     step 3.            window w/ graph  --broadcastPersistGraphDone->   electron\n     step 4. [In HERE]  a window         <---broadcastPersistGraph----   electron\"\n  [graph]\n  (p/let [_ (ipc/ipc \"broadcastPersistGraph\" graph)] ;; invoke for chaining promise\n    nil))\n\n(defn graph-ready!\n  \"Call electron that the graph is loaded.\"\n  [graph]\n  (ipc/ipc \"graphReady\" graph))\n"]}