{"version":3,"sources":["frontend/modules/shortcut/data_helper.cljs"],"mappings":"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","names":["frontend.modules.shortcut.data-helper/get-bindings","cljs.core/deref","cljs.core/vals","frontend.modules.shortcut.config/config","cljs.core.into","cljs.core.map","p__47884","vec__47885","cljs.core.nth","map__47888","cljs.core/--destructure-map","cljs.core.get","k","binding","frontend.modules.shortcut.data-helper/mod-key","shortcut","clojure.string/replace","frontend.util/mac?","frontend.modules.shortcut.data-helper/shortcut-binding","id","frontend.state/shortcuts","lambdaisland.glogi.log","cljs.core/identity","cljs.core.mapv","frontend.modules.shortcut.data-helper/normalize-user-keyname","G__47889","frontend.util/safe-lower-case","frontend.modules.shortcut.data-helper/binding-by-category","name","dict","cljs.core.apply","cljs.core/merge","p__47890","vec__47891","_","frontend.modules.shortcut.config/category","var_args","G__47895","frontend.modules.shortcut.data-helper/shortcut-map","js/Error","handler-id","frontend.modules.shortcut.data_helper.shortcut_map","state","raw","handler-m","p__47896","vec__47897","map__47900","fn","before","cljs.core/meta","G__47901","cljs.core/reduce-kv","r","handle-fn","cljs.core.assoc","cljs.core.partial","v","frontend.modules.shortcut.data-helper/decorate-namespace","n","cljs.core/name","ns","cljs.core/namespace","cljs.core.keyword","frontend.modules.shortcut.data-helper/decorate-binding","clojure.string.join","clojure.string/lower-case","frontend.modules.shortcut.data-helper/gen-shortcut-seq","bindings","cljs.core/first","clojure.string.split","frontend.modules.shortcut.data-helper/binding-for-display","tmp","and__5041__auto__","cljs.core._EQ_","frontend.modules.shortcut.data-helper/binding-for-storage","frontend.modules.shortcut.data-helper/remove-shortcut","repo","frontend.state/get-current-repo","path","frontend.config.get_config_path","temp__5720__auto__","content","frontend.db/get-file","result","frontend.handler.common/parse-config","new-result","p1__47902#","borkdude.rewrite-edn/update","cljs.core.dissoc","borkdude.rewrite-edn/sexpr","new-content","frontend.handler.common/reset-config!","frontend.handler.file/set-file-content!","frontend.modules.shortcut.data-helper/get-group","cljs.core.filter","p__47903","vec__47904","cljs.core/contains?","cljs.core/key","frontend.modules.shortcut.data-helper/potential-conflict?","cljs.core/not","p1__47907#","shortcut-m","parse-shortcut","e47908","goog.ui.KeyboardShortcutHandler/parseStringShortcut","e","js/console.error","cljs.core/js->clj","rest-bindings","cljs.core.remove","cljs.core/vector?","cljs.core.mapcat","cljs.core/some","b","frontend.modules.shortcut.data-helper/shortcut-data-by-id","data","G__47909","frontend.modules.shortcut.data-helper/shortcuts->commands","m","p__47910","vec__47911","clojure.set/rename-keys"],"sourcesContent":["(ns frontend.modules.shortcut.data-helper\n  (:require [borkdude.rewrite-edn :as rewrite]\n            [clojure.string :as str]\n            [clojure.set :refer [rename-keys]]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.handler.file :as file]\n            [frontend.modules.shortcut.config :as shortcut-config]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [lambdaisland.glogi :as log]\n            [frontend.handler.common :as common-handler])\n  (:import [goog.ui KeyboardShortcutHandler]))\n\n(defn get-bindings\n  []\n  (->> (vals @shortcut-config/config)\n       (into {})\n       (map (fn [[k {:keys [binding]}]]\n              {k binding}))\n       (into {})))\n\n(defn- mod-key [shortcut]\n  (str/replace shortcut #\"(?i)mod\"\n               (if util/mac? \"meta\" \"ctrl\")))\n\n(defn shortcut-binding\n  [id]\n  (let [shortcut (get (state/shortcuts) id\n                      (get (get-bindings) id))]\n    (cond\n      (nil? shortcut)\n      (log/warn :shortcut/binding-not-found {:id id})\n\n      (false? shortcut)\n      (do\n        (log/debug :shortcut/disabled {:id id})\n        false)\n\n      :else\n      (->>\n       (if (string? shortcut)\n         [shortcut]\n         shortcut)\n       (mapv mod-key)))))\n\n(defn normalize-user-keyname\n  [k]\n  (some-> k\n          (util/safe-lower-case)\n          (str/replace #\";+\" \"semicolon\")\n          (str/replace #\"=+\" \"equals\")\n          (str/replace #\"~+\" \"dash\")\n          (str/replace \"[\" \"open-square-bracket\")\n          (str/replace \"]\" \"close-square-bracket\")\n          (str/replace \"'\" \"single-quote\")))\n\n;; returns a vector to preserve order\n(defn binding-by-category [name]\n  (let [dict (->> (vals @shortcut-config/config)\n                  (apply merge)\n                  (map (fn [[k _]]\n                         {k {:binding (shortcut-binding k)}}))\n                  (into {}))]\n    (->> (shortcut-config/category name)\n         (mapv (fn [k] [k (k dict)])))))\n\n(defn shortcut-map\n  ([handler-id]\n   (shortcut-map handler-id nil))\n  ([handler-id state]\n   (let [raw       (get @shortcut-config/config handler-id)\n         handler-m (->> raw\n                        (map (fn [[k {:keys [fn]}]]\n                               {k fn}))\n                        (into {}))\n         before    (-> raw meta :before)]\n     (cond->> handler-m\n       state  (reduce-kv (fn [r k handle-fn]\n                           (assoc r k (partial handle-fn state)))\n                         {})\n       before (reduce-kv (fn [r k v]\n                           (assoc r k (before v)))\n                         {})))))\n\n(defn decorate-namespace [k]\n  (let [n (name k)\n        ns (namespace k)]\n    (keyword (str \"command.\" ns) n)))\n\n(defn decorate-binding [binding]\n  (-> (if (string? binding) binding (str/join \"+\"  binding))\n      (str/replace \"mod\" (if util/mac? \"cmd\" \"ctrl\"))\n      (str/replace \"alt\" (if util/mac? \"opt\" \"alt\"))\n      (str/replace \"shift+/\" \"?\")\n      (str/replace \"left\" \"\u2190\")\n      (str/replace \"right\" \"\u2192\")\n      (str/replace \"open-square-bracket\" \"[\")\n      (str/replace \"close-square-bracket\" \"]\")\n      (str/lower-case)))\n\n;; if multiple bindings, gen seq for first binding only for now\n(defn gen-shortcut-seq [id]\n  (let [bindings (shortcut-binding id)]\n    (if (false? bindings)\n      []\n      (-> bindings\n          first\n          (str/split  #\" |\\+\")))))\n\n(defn binding-for-display [k binding]\n  (let [tmp (cond\n              (false? binding)\n              (cond\n                (and util/mac? (= k :editor/kill-line-after))    \"system default: ctrl+k\"\n                (and util/mac? (= k :editor/beginning-of-block)) \"system default: ctrl+a\"\n                (and util/mac? (= k :editor/end-of-block))       \"system default: ctrl+e\"\n                (and util/mac? (= k :editor/backward-kill-word)) \"system default: opt+delete\"\n                :else \"disabled\")\n\n              (string? binding)\n              (decorate-binding binding)\n\n              :else\n              (->> binding\n                   (map decorate-binding)\n                   (str/join \" | \")))]\n\n    ;; Display \"cmd\" rather than \"meta\" to the user to describe the Mac\n    ;; mod key, because that's what the Mac keyboards actually say.\n    (str/replace tmp \"meta\" \"cmd\")))\n\n;; Given the displayed binding, prepare it to be put back into config.edn\n(defn binding-for-storage [binding]\n  (str/replace binding \"cmd\" \"meta\"))\n\n(defn remove-shortcut [k]\n  (let [repo (state/get-current-repo)\n        path (config/get-config-path)]\n    (when-let [content (db/get-file path)]\n      (let [result (common-handler/parse-config content)\n            new-result (rewrite/update\n                        result\n                        :shortcuts\n                        #(dissoc (rewrite/sexpr %) k))\n            new-content (str new-result)]\n        (common-handler/reset-config! repo new-content)\n        (file/set-file-content! repo path new-content)))))\n\n(defn get-group\n  \"Given shortcut key, return handler group\n  eg: :editor/new-line -> :shortcut.handler/block-editing-only\"\n  [k]\n  (->> @shortcut-config/config\n       (filter (fn [[_ v]] (contains? v k)))\n       (map key)\n       (first)))\n\n(defn potential-conflict? [k]\n  (if-not (shortcut-binding k)\n    false\n    (let [handler-id    (get-group k)\n          shortcut-m    (shortcut-map handler-id)\n          parse-shortcut #(try\n                           (KeyboardShortcutHandler/parseStringShortcut %)\n                           (catch js/Error e\n                             (js/console.error \"[shortcut/parse-error]\" (str % \" - \" (.-message e)))))\n          bindings      (->> (shortcut-binding k)\n                             (map mod-key)\n                             (map parse-shortcut)\n                             (map js->clj))\n          rest-bindings (->> (map key shortcut-m)\n                             (remove #{k})\n                             (map shortcut-binding)\n                             (filter vector?)\n                             (mapcat identity)\n                             (map mod-key)\n                             (map parse-shortcut)\n                             (map js->clj))]\n\n      (some? (some (fn [b] (some #{b} rest-bindings)) bindings)))))\n\n(defn shortcut-data-by-id [id]\n  (let [binding (shortcut-binding id)\n        data    (->> (vals @shortcut-config/config)\n                     (into  {})\n                     id)]\n    (assoc\n      data\n      :binding\n      (binding-for-display id binding))))\n\n(defn shortcuts->commands [handler-id]\n  (let [m (get @shortcut-config/config handler-id)]\n    (->> m\n         (map (fn [[id _]] (-> (shortcut-data-by-id id)\n                               (assoc :id id :handler-id handler-id)\n                               (rename-keys {:binding :shortcut\n                                             :fn      :action})))))))\n"]}