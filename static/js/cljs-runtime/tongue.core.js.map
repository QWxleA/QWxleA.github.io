{"version":3,"sources":["tongue/core.cljc"],"mappings":"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","names":["tongue.core/inst-formatter","tongue.inst/formatter","tongue.core/format-inst-iso","G__57853","G__57854","tongue.core/number-formatter","tongue.number/formatter","tongue.core/parse-long","s","js/parseInt","js/tongue","js/tongue.core","js/tongue.core.tags-cache","tongue.core/tags-cache","cljs.core/volatile!","tongue.core/tags","locale","or__5043__auto__","fexpr__57859","cljs.core/deref","tags","subtags","clojure.string.split","cljs.core/name","last-tag","temp__5722__auto__","subtag","cljs.core/first","tag","cljs.core/next","cljs.core.conj","cljs.core.keyword","cljs.core.assoc","tongue.core/lookup-template-for-locale","dicts","key","temp__5724__auto__","dict","cljs.core.get","cljs.core/contains?","cljs.core/reduced","tongue.core/lookup-template","tongue.core/escape-re-subst","str","clojure.string/replace","tongue.core/format-argument","x","formatter","cljs.core/unreduced","cljs.core/str","cljs.core/inst?","tongue$core$IInterpolate$interpolate_named$dyn","x__5390__auto__","m__5391__auto__","tongue.core/interpolate-named","goog/typeOf","m__5389__auto__","cljs.core/missing-protocol","tongue$core$IInterpolate$interpolate_positional$dyn","tongue.core/interpolate-positional","tongue.core/IInterpolate","v","interpolations","p__57879","vec__57880","cljs.core.nth","_","k","p__57887","vec__57888","n","idx","arg","tongue.core/invoke?","t","cljs.core/ifn?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","tongue.core/translate-missing","var_args","G__57902","tongue.core/translate","args-arr__5791__auto__","len__5766__auto__","i__5767__auto__","argseq__5792__auto__","cljs.core/IndexedSeq","seq57894","G__57895","G__57896","G__57897","G__57898","self__5751__auto__","cljs.core/map?","rest","args","cljs.core/cons","cljs.core.apply","tongue.core/append-ns","ns","segment","G__57913","tongue.core/build-dict","js/Error","tongue.core.build_dict","cljs.core/reduce-kv","aggr","value","cljs.core._EQ_","cljs.core/namespace","cljs.core.merge","tongue.core/resolve-alias-1","m","path","cljs.core.ex_info","val","tongue.core/resolve-aliases","cljs.core.into","p1__57919#","cljs.core.map","cljs.core/PersistentVector","cljs.core/second","tongue.core/build-dicts","acc","lang","tongue.core/build-translate","compiled-dicts","tongue.core.translate"],"sourcesContent":["(ns tongue.core\n  (:refer-clojure :exclude [parse-long])\n  (:require\n    [clojure.string :as str]\n    [tongue.inst :as inst]\n    [tongue.number :as number]\n    [tongue.macro :as macro]\n    #?(:clj [clojure.future :refer :all])\n    #?(:clj [clojure.spec.alpha :as spec])))\n\n\n(def inst-formatter inst/formatter)\n\n\n(def format-inst-iso (inst-formatter \"{year}-{month-numeric-padded}-{day-padded}T{hour24-padded}:{minutes-padded}:{seconds-padded}\" {}))\n\n\n(def number-formatter number/formatter)\n\n\n(defn- parse-long [s]\n  #?(:cljs (js/parseInt s)\n     :clj  (Long/parseLong s)))\n\n\n(defonce ^:private tags-cache (volatile! {}))\n\n\n(defn- tags\n  \":az-Arab-IR => (:az-Arab-IR :az-Arab :az), cached\"\n  [locale]\n  (or (@tags-cache locale)\n      (let [tags (loop [subtags  (str/split (name locale) #\"-\")\n                        last-tag nil\n                        tags     ()]\n                   (if-some [subtag (first subtags)]\n                     (let [tag (str last-tag (when last-tag \"-\") subtag)]\n                       (recur (next subtags) tag (conj tags (keyword tag))))\n                     tags))]\n        (vswap! tags-cache assoc locale tags)\n        tags)))\n\n\n(defn- lookup-template-for-locale [dicts locale key]\n  (when locale\n    (loop [tags (tags locale)]\n      (when-some [tag (first tags)]\n        (or\n          (let [dict (get dicts tag)]\n            (when (contains? dict key)\n              (reduced (get dict key))))\n          (recur (next tags)))))))\n\n\n(defn- lookup-template [dicts locale key]\n  (or\n    (lookup-template-for-locale dicts locale key)\n    (lookup-template-for-locale dicts (:tongue/fallback dicts) key)))\n\n\n(defn- escape-re-subst [str]\n  #?(:clj (java.util.regex.Matcher/quoteReplacement str)\n     :cljs (str/replace str #\"\\$\" \"$$$$\")))\n\n\n(defn format-argument [dicts locale x]\n  (cond\n    (number? x)\n    (let [formatter (unreduced\n                      (or (lookup-template-for-locale dicts locale :tongue/format-number)\n                        str))]\n                  (formatter x))\n\n    (inst? x)\n    (let [formatter (unreduced\n                      (or (lookup-template-for-locale dicts locale :tongue/format-inst)\n                        format-inst-iso))]\n      (formatter x))\n\n    :else\n    (str x)))\n\n\n(defprotocol IInterpolate\n  (interpolate-named [v dicts locale interpolations]\n    \"Interpolate the value `v` with named `interpolations` in the provided map.\")\n\n  (interpolate-positional [v dicts locale interpolations]\n    \"Interpolate the value `v` with positional `interpolations` in the provided vector.\"))\n\n\n(extend-type #?(:clj String\n                :cljs string)\n  IInterpolate\n  (interpolate-named [s dicts locale interpolations]\n    (str/replace s #?(:clj  #\"\\{([\\w*!_?$%&=<>'\\-+.#0-9]+|[\\w*!_?$%&=<>'\\-+.#0-9]+\\/[\\w*!_?$%&=<>'\\-+.#0-9:]+)\\}\"\n                      :cljs #\"\\{([\\w*!_?$%&=<>'\\-+.#0-9]+|[\\w*!_?$%&=<>'\\-+.#0-9]+/[\\w*!_?$%&=<>'\\-+.#0-9:]+)\\}\")\n                 (fn [[_ k]]\n                   (format-argument dicts locale (get interpolations (keyword k))))))\n\n  (interpolate-positional [s dicts locale interpolations]\n    (str/replace s #\"\\{(\\d+)\\}\"\n                 (fn [[_ n]]\n                   (let [idx (parse-long n)\n                         arg (nth interpolations (dec idx)\n                                  (str \"{Missing index \" idx \"}\"))]\n                     (format-argument dicts locale arg))))))\n\n\n(macro/with-spec\n  (spec/def ::locale simple-keyword?)\n  (spec/def ::key keyword?))\n\n\n(defn- invoke? [t]\n  (and (ifn? t) (not (satisfies? IInterpolate t))))\n\n\n(defn- translate-missing [dicts locale key]\n  (macro/if-some-reduced [t (lookup-template dicts locale :tongue/missing-key)]\n    (cond\n      (invoke? t) (interpolate-positional (t key) dicts locale [key])\n      (nil? t)    nil\n      :else       (interpolate-positional t dicts locale [key]))\n    (str \"{Missing key \" key \"}\")))\n\n\n(defn- translate\n  ([dicts locale key]\n   (macro/with-spec\n     (spec/assert ::locale locale)\n     (spec/assert ::key key))\n   (macro/if-some-reduced [t (lookup-template dicts locale key)]\n     (if (invoke? t) (t) t)\n     (translate-missing dicts locale key)))\n  ([dicts locale key x]\n   (macro/with-spec\n     (spec/assert ::locale locale)\n     (spec/assert ::key key))\n   (macro/if-some-reduced [t (lookup-template dicts locale key)]\n     (let [v (if (invoke? t) (t x) t)]\n       (if (map? x)\n         (interpolate-named v dicts locale x)\n         (interpolate-positional v dicts locale [x])))\n     (translate-missing dicts locale key)))\n  ([dicts locale key x & rest]\n   (macro/with-spec\n     (spec/assert ::locale locale)\n     (spec/assert ::key key))\n   (macro/if-some-reduced [t (lookup-template dicts locale key)]\n     (let [args (cons x rest)]\n       (interpolate-positional (if (invoke? t) (apply t x rest) t) dicts locale args))\n     (translate-missing dicts locale key))))\n\n\n(defn- append-ns [ns segment]\n  (str (when ns (str ns \".\"))\n       segment))\n\n\n(defn- build-dict\n  \"Collapses nested maps into namespaced keywords:\n   { :ns { :key 1 }} => { :ns/key 1 }\n   { :animal { :flying { :bird 420 }}} => { :animal.flying/bird 420 }\"\n  ([dict] (build-dict nil dict))\n  ([ns dict]\n    (reduce-kv\n      (fn [aggr key value]\n        (cond\n          (= \"tongue\" (namespace key))\n          (do\n            (assert (nil? ns) \":tongue/... keys can only be specified at top level\")\n            (assoc aggr key value))\n\n          (map? value)\n          (merge aggr (build-dict (append-ns ns (name key)) value))\n\n          :else\n          (assoc aggr (keyword (or ns (namespace key)) (name key)) value)))\n      {} dict)))\n\n\n(defn- resolve-alias-1\n  [m k]\n  (loop [v k\n         path #{}]\n    (when (path v)\n      (throw (ex-info \"Unable to resolve mutually recursive alias\" {:keys path})))\n    (let [val (or (m v) v)]\n      (if (= val v)\n        val\n        (recur val (conj path v))))))\n\n\n(defn- resolve-aliases\n  \"Shallowly walks a map, and finds every value that is also a key in the same\n  map, and replaces the value with the referenced value. Recursively walks the\n  map to resolve layered aliases.\n\n  (resolve-aliases {:a 1 :b 2 :c :a}) ;;=> {:a 1 :b 2 :c 1}\"\n  [m]\n  (into {} (map #(vector (first %) (resolve-alias-1 m (second %))) m)))\n\n\n(defn build-dicts [dicts]\n  (reduce-kv\n    (fn [acc lang dict]\n      (assoc acc lang (if (map? dict) (-> dict build-dict resolve-aliases) dict)))\n    {} dicts))\n\n\n(macro/with-spec\n  (spec/def ::template (spec/or\n                         :str string?\n                         :fn  ifn?\n                         :nil nil?))\n\n  (spec/def :tongue/format-number ifn?)\n  (spec/def :tongue/format-inst ifn?)\n  (spec/def :tongue/missing-key ::template)\n\n  (spec/def ::dict (spec/and\n                     (spec/keys :opt [:tongue/format-number :tongue/format-inst :tongue/missing-key])\n                     (spec/map-of keyword? (spec/or :plain  ::template\n                                                    :nested (spec/map-of keyword? ::template)))))\n\n  (spec/def :tongue/fallback keyword?)\n  (spec/def ::dicts (spec/and\n                      (spec/keys :opt [:tongue/fallback])\n                      (spec/conformer #(dissoc % :tongue/fallback))\n                      (spec/map-of keyword? ::dict))))\n\n\n(defn build-translate\n  \"Given dicts, builds translate function closed over these dicts:\n\n       (build-translate dicts) => ( [locale key & args] => string )\"\n  [dicts]\n  (macro/with-spec\n    (spec/assert ::dicts dicts))\n  (let [compiled-dicts (build-dicts dicts)]\n    (fn\n      ([locale key]   (translate compiled-dicts locale key))\n      ([locale key x] (translate compiled-dicts locale key x))\n      ([locale key x & args]\n        (apply translate compiled-dicts locale key x args)))))\n"]}