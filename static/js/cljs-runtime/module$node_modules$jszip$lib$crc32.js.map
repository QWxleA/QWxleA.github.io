{
"version":3,
"file":"module$node_modules$jszip$lib$crc32.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,mCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhG,IAAIC,MAAQH,OAAA,CAAQ,qCAAR,CAAZ,CAuBII,SAfJC,QAAkB,EAAG,CAGjB,IAHiB,IACbC,CADa,CACVC,MAAQ,EADE,CAGTC,EAAG,CAAX,CAAkB,GAAlB,CAAcA,CAAd,CAAuBA,CAAA,EAAvB,CAA2B,CACvBF,CAAA,CAAIE,CACJ,KAAI,IAAIC,EAAG,CAAX,CAAkB,CAAlB,CAAcA,CAAd,CAAqBA,CAAA,EAArB,CACIH,CAAA,CAAMA,CAAD,CAAG,CAAH,CAAS,UAAT,CAAuBA,CAAvB,GAA6B,CAA7B,CAAoCA,CAApC,GAA0C,CAEnDC,MAAA,CAAMC,CAAN,CAAA,CAAWF,CALY,CAQ3B,MAAOC,MAXU,CAeN,EAuCfN,OAAOC,CAAAA,OAAP,CAAiBQ,QAAqB,CAACC,KAAD,CAAQC,GAAR,CAAa,CAC/C,GAAqB,WAArB,GAAI,MAAOD,MAAX,EAAoC,CAACA,KAAME,CAAAA,MAA3C,CACI,MAAO,EAKX,IAFyC,QAEzC,GAFcV,KAAMW,CAAAA,SAAN,CAAgBH,KAAhB,CAEd,CAAY,CA1CZ,IAAkBI,IA2C2BC,CA3C3BD,CA2CaJ,KAAME,CAAAA,MAzCrCD,IAAA,EAyCiBA,GAzCjB,CAyCqB,CAzCrB,EAAa,CAAC,CAEd,KAAK,IAAIK,EAuCoCD,CAvC7C,CAAkBC,CAAlB,CAAsBF,GAAtB,CAA2BE,CAAA,EAA3B,CACIL,GAAA,CAAOA,GAAP,GAAe,CAAf,CALIR,QAKgB,EAAGQ,GAAH,CAsCAD,KAtCS,CAAIM,CAAJ,CAAT;AAAmB,GAAnB,CAsCpB,OAnCIL,IAmCJ,CAnCW,CAAC,CAkCJ,CAlBMG,GAAAA,CAqB8BC,CArB9BD,CAqBgBJ,KAAME,CAAAA,MAnBxCD,IAAA,EAmBoBA,GAnBpB,CAmBwB,CAnBxB,EAAa,CAAC,CAEd,KAASK,CAAT,CAiBgDD,CAjBhD,CAAkBC,CAAlB,CAAsBF,GAAtB,CAA2BE,CAAA,EAA3B,CACIL,GAAA,CAAOA,GAAP,GAAe,CAAf,CALIR,QAKgB,EAAGQ,GAAH,CAgBGD,KAhBUO,CAAAA,UAAJ,CAAeD,CAAf,CAAT,EAA8B,GAA9B,CAgBpB,OAbIL,IAaJ,CAbW,CAAC,CAG+B,CAjE6C;",
"sources":["node_modules/jszip/lib/crc32.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$crc32\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('./utils');\n\n/**\n * The following functions come from pako, from pako/lib/zlib/crc32.js\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n    var c, table = [];\n\n    for(var n =0; n < 256; n++){\n        c = n;\n        for(var k =0; k < 8; k++){\n            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        table[n] = c;\n    }\n\n    return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n    var t = crcTable, end = pos + len;\n\n    crc = crc ^ (-1);\n\n    for (var i = pos; i < end; i++ ) {\n        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n    }\n\n    return (crc ^ (-1)); // >>> 0;\n}\n\n// That's all for the pako functions.\n\n/**\n * Compute the crc32 of a string.\n * This is almost the same as the function crc32, but for strings. Using the\n * same function for the two use cases leads to horrible performances.\n * @param {Number} crc the starting value of the crc.\n * @param {String} str the string to use.\n * @param {Number} len the length of the string.\n * @param {Number} pos the starting position for the crc32 computation.\n * @return {Number} the computed crc32.\n */\nfunction crc32str(crc, str, len, pos) {\n    var t = crcTable, end = pos + len;\n\n    crc = crc ^ (-1);\n\n    for (var i = pos; i < end; i++ ) {\n        crc = (crc >>> 8) ^ t[(crc ^ str.charCodeAt(i)) & 0xFF];\n    }\n\n    return (crc ^ (-1)); // >>> 0;\n}\n\nmodule.exports = function crc32wrapper(input, crc) {\n    if (typeof input === \"undefined\" || !input.length) {\n        return 0;\n    }\n\n    var isArray = utils.getTypeOf(input) !== \"string\";\n\n    if(isArray) {\n        return crc32(crc|0, input, input.length, 0);\n    } else {\n        return crc32str(crc|0, input, input.length, 0);\n    }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","utils","crcTable","makeTable","c","table","n","k","module.exports","input","crc","length","getTypeOf","end","pos","i","charCodeAt"]
}
