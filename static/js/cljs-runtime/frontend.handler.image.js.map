{"version":3,"sources":["frontend/handler/image.cljs"],"mappings":"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","names":["frontend.handler.image/render-local-images!","and__5041__auto__","or__5043__auto__","frontend.util/electron?","frontend.mobile.util/native-ios?","frontend.config/local-db?","frontend.state/get-current-repo","e50363","images","cljs.core.array_seq","goog.dom/getElementsByTagName","get-src","image","local-images","cljs.core.filter","src","frontend.util/starts-with?","seq__50364","cljs.core/seq","chunk__50365","count__50366","i__50367","temp__5720__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","img","frontend.handler.image.goog$module$goog$object.set","frontend.handler.image.goog$module$goog$object.get","path","clojure.string/replace-first","cljs.core._EQ_","cljs.core.subs","frontend.util.p_handle","frontend.fs.read_file","frontend.config/get-repo-dir","blob","js/Blob","cljs.core/clj->js","img-url","frontend.image/create-object-url","error","cljs.core.println","js/console.dir","js/Error","_e","frontend.handler.image/request-presigned-url","file","filename","mime-type","uploading?","url-handler","on-processing","frontend.handler.notification.show_BANG_","cljs.core/reset!","frontend.util/post","frontend.config/api","p__50376","map__50377","cljs.core/--destructure-map","cljs.core.get","presigned-url","s3-object-key","resp","frontend.util/upload","_result","p__50378","map__50379","signed-url","cljs.core.prn","_error","e"],"sourcesContent":["(ns frontend.handler.image\n  (:require [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.fs :as fs]\n            [frontend.handler.notification :as notification]\n            [frontend.image :as image]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [frontend.mobile.util :as mobile-util]))\n\n(defn render-local-images!\n  []\n  (when-not (and (or (util/electron?)\n                     (mobile-util/native-ios?))\n                 (config/local-db? (state/get-current-repo)))\n    (try\n      (let [images (array-seq (gdom/getElementsByTagName \"img\"))\n            get-src (fn [image] (.getAttribute image \"src\"))\n            local-images (filter\n                          (fn [image]\n                            (let [src (get-src image)]\n                              (and src\n                                   (not (or (util/starts-with? src \"http://\")\n                                            (util/starts-with? src \"https://\")\n                                            (util/starts-with? src \"blob:\")\n                                            (util/starts-with? src \"data:\"))))))\n                          images)]\n        (doseq [img local-images]\n          (gobj/set img\n                    \"onerror\"\n                    (fn []\n                      (gobj/set (gobj/get img \"style\")\n                                \"display\" \"none\")))\n          (let [path (get-src img)\n                path (string/replace-first path \"file:\" \"\")\n                path (if (= (first path) \\.)\n                       (subs path 1)\n                       path)]\n            (util/p-handle\n             (fs/read-file (config/get-repo-dir (state/get-current-repo)) path {})\n             (fn [blob]\n               (let [blob (js/Blob. (array blob) (clj->js {:type \"image\"}))\n                     img-url (image/create-object-url blob)]\n                 (gobj/set img \"src\" img-url)\n                 (gobj/set (gobj/get img \"style\")\n                           \"display\" \"initial\")))\n             (fn [error]\n               (println \"Can't read local image file: \")\n               (js/console.dir error))))))\n      (catch js/Error _e\n        nil))))\n\n(defn request-presigned-url\n  [file filename mime-type uploading? url-handler on-processing]\n  (cond\n    (> (gobj/get file \"size\") (* 12 1024 1024))\n    (notification/show! [:p \"Sorry, we don't support any file that's larger than 12MB.\"] :error)\n\n    :else\n    (do\n      (reset! uploading? true)\n      ;; start uploading?\n      (util/post (str config/api \"presigned_url\")\n                 {:filename filename\n                  :mime-type mime-type}\n                 (fn [{:keys [presigned-url s3-object-key] :as resp}]\n                   (if presigned-url\n                     (util/upload presigned-url\n                                  file\n                                  (fn [_result]\n                                    ;; request cdn signed url\n                                    (util/post (str config/api \"signed_url\")\n                                               {:s3-object-key s3-object-key}\n                                               (fn [{:keys [signed-url]}]\n                                                 (reset! uploading? false)\n                                                 (if signed-url\n                                                   (url-handler signed-url)\n                                                   (prn \"Something error, can't get a valid signed url.\")))\n                                               (fn [_error]\n                                                 (reset! uploading? false)\n                                                 (prn \"Something error, can't get a valid signed url.\"))))\n                                  (fn [error]\n                                    (reset! uploading? false)\n                                    (prn \"upload failed.\")\n                                    (js/console.dir error))\n                                  (fn [e]\n                                    (on-processing e)))\n                     ;; TODO: notification, or re-try\n                     (do\n                       (reset! uploading? false)\n                       (prn \"failed to get any presigned url, resp: \" resp))))\n                 (fn [_error]\n                   ;; (prn \"Get token failed, error: \" error)\n                   (reset! uploading? false))))))\n"]}