{"version":3,"sources":["rewrite_cljc/node/coercer.cljc"],"mappings":"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","names":["rewrite-cljc.node.coercer/node-with-meta","n","value","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","mta","cljs.core/meta","cljs.core/empty?","rewrite_cljc.node.meta.meta_node","rewrite-cljc.node.protocols/coerce","comma","rewrite-cljc.node.whitespace/whitespace-nodes","space","rewrite-cljc.node.whitespace/whitespace-node","rewrite-cljc.node.coercer/map->children","m","cljs.core.mapcat","p__92642","vec__92643","cljs.core.nth","k","v","cljs.core.list_STAR_","cljs.core.drop_last","cljs.core/count","cljs.core/vec","rewrite-cljc.node.coercer/record-node","rewrite_cljc.node.reader_macro.reader_macro_node","rewrite_cljc.node.token.token_node","s","cljs.core.pr_str","cljs.core.symbol","cljs.core.subs","clojure.string.index_of","rewrite-cljc.node.seq/map-node","rewrite-cljc.node.protocols/NodeCoerceable","cljs.core/record?","rewrite-cljc.node.coercer/seq-node","f","sq","cljs.core.map","rewrite-cljc.node.whitespace/space-separated","G__92647","cljs.core/PersistentVector","rewrite-cljc.node.seq/vector-node","cljs.core/List","rewrite-cljc.node.seq/list-node","cljs.core/PersistentHashSet","rewrite-cljc.node.seq/set-node","cljs.core/EmptyList","create-map-node","cljs.core/PersistentHashMap","cljs.core/PersistentArrayMap","cljs.core/Var","rewrite-cljc.node.reader-macro/var-node","rewrite-cljc.node.comment/CommentNode","rewrite-cljc.node.forms/FormsNode","rewrite-cljc.node.integer/IntNode","rewrite-cljc.node.keyword/KeywordNode","rewrite-cljc.node.meta/MetaNode","rewrite-cljc.node.quote/QuoteNode","rewrite-cljc.node.reader-macro/ReaderNode","rewrite-cljc.node.reader-macro/ReaderMacroNode","rewrite-cljc.node.reader-macro/DerefNode","rewrite-cljc.node.stringz/StringNode","rewrite-cljc.node.uneval/UnevalNode","rewrite-cljc.node.whitespace/NewlineNode","rewrite-cljc.node.seq/SeqNode","rewrite-cljc.node.token/TokenNode","rewrite-cljc.node.whitespace/WhitespaceNode"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.coercer\n  (:require\n   #?@(:clj\n       [[rewrite-cljc.node.comment]\n        [rewrite-cljc.node.forms]\n        [rewrite-cljc.node.integer]\n        [rewrite-cljc.node.keyword]\n        [rewrite-cljc.node.meta :refer [meta-node]]\n        [rewrite-cljc.node.protocols :as node :refer [NodeCoerceable coerce]]\n        [rewrite-cljc.node.quote]\n        [rewrite-cljc.node.reader-macro :refer [reader-macro-node var-node]]\n        [rewrite-cljc.node.seq :refer [vector-node list-node set-node map-node]]\n        [rewrite-cljc.node.string]\n        [rewrite-cljc.node.token :refer [token-node]]\n        [rewrite-cljc.node.uneval]\n        [rewrite-cljc.node.whitespace :as ws]]\n       :cljs\n       [[clojure.string :as string]\n        [rewrite-cljc.node.comment :refer [CommentNode]]\n        [rewrite-cljc.node.forms :refer [FormsNode]]\n        [rewrite-cljc.node.integer :refer [IntNode]]\n        [rewrite-cljc.node.keyword :refer [KeywordNode]]\n        [rewrite-cljc.node.meta :refer [MetaNode meta-node]]\n        [rewrite-cljc.node.protocols :refer [NodeCoerceable coerce]]\n        [rewrite-cljc.node.quote :refer [QuoteNode]]\n        [rewrite-cljc.node.reader-macro :refer [ReaderNode ReaderMacroNode DerefNode reader-macro-node var-node]]\n        [rewrite-cljc.node.seq :refer [SeqNode vector-node list-node set-node map-node]]\n        [rewrite-cljc.node.stringz :refer [StringNode]]\n        [rewrite-cljc.node.token :refer [TokenNode token-node]]\n        [rewrite-cljc.node.uneval :refer [UnevalNode]]\n        [rewrite-cljc.node.whitespace :refer [WhitespaceNode NewlineNode] :as ws]]))\n   #?(:clj\n      (:import [rewrite_cljc.node.comment CommentNode]\n               [rewrite_cljc.node.forms FormsNode]\n               [rewrite_cljc.node.integer IntNode]\n               [rewrite_cljc.node.keyword KeywordNode]\n               [rewrite_cljc.node.meta MetaNode]\n               [rewrite_cljc.node.quote QuoteNode]\n               [rewrite_cljc.node.reader_macro ReaderNode ReaderMacroNode DerefNode]\n               [rewrite_cljc.node.seq SeqNode]\n               [rewrite_cljc.node.stringz StringNode]\n               [rewrite_cljc.node.token TokenNode]\n               [rewrite_cljc.node.uneval UnevalNode]\n               [rewrite_cljc.node.whitespace WhitespaceNode NewlineNode])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Helpers\n\n(defn node-with-meta\n  [n value]\n  (if #?(:clj (instance? clojure.lang.IMeta value)\n         :cljs (satisfies? IWithMeta value))\n    (let [mta (meta value)]\n      (if (empty? mta)\n        n\n        (meta-node (coerce mta) n)))\n    n))\n\n(let [comma (ws/whitespace-nodes \", \")\n      space (ws/whitespace-node \" \")]\n  (defn- map->children\n    [m]\n    (->> (mapcat\n          (fn [[k v]]\n            (list* (coerce k) space (coerce v) comma))\n          m)\n         (drop-last (count comma))\n         (vec))))\n\n(defn- record-node\n  [m]\n  (reader-macro-node\n   [(token-node #?(:clj (symbol (.getName ^Class (class m)))\n                   :cljs ;; this is a bit hacky, but is one way of preserving original name\n                         ;; under advanced cljs optimizations\n                   (let [s (pr-str m)]\n                     (symbol (subs s 1 (clojure.string/index-of s \"{\"))))))\n    (map-node (map->children m))]))\n\n;; ## Tokens\n\n#?(:clj\n   (extend-protocol NodeCoerceable\n     #?(:clj Object :cljs default)\n     (coerce [v]\n       (node-with-meta\n        (token-node v)\n        v)))\n   :cljs\n   (extend-protocol NodeCoerceable\n     #?(:clj Object :cljs default)\n     (coerce [v]\n       (node-with-meta\n        ;; in cljs, this is where we check for a record, in clj it happens under map handling\n        ;; TODO: Check if this can't be done by coercing an IRecord instead\n        (if (record? v)\n          (record-node v)\n          (token-node v))\n        v))))\n\n(extend-protocol NodeCoerceable\n  nil\n  (coerce [v]\n    (token-node nil)))\n\n;; ## Seqs\n\n(defn- seq-node\n  [f sq]\n  (node-with-meta\n    (->> (map coerce sq)\n         (ws/space-separated)\n         (vec)\n         (f))\n    sq))\n\n(extend-protocol NodeCoerceable\n  #?(:clj clojure.lang.IPersistentVector :cljs PersistentVector)\n  (coerce [sq]\n    (seq-node vector-node sq))\n  #?(:clj clojure.lang.IPersistentList :cljs List)\n  (coerce [sq]\n    (seq-node list-node sq))\n  #?(:clj clojure.lang.IPersistentSet :cljs PersistentHashSet)\n  (coerce [sq]\n    (seq-node set-node sq)))\n\n#?(:cljs\n   (extend-protocol NodeCoerceable\n     EmptyList\n     (coerce [sq]\n       (seq-node list-node sq))))\n\n;; ## Maps\n\n#?(:clj\n   (extend-protocol NodeCoerceable\n     clojure.lang.IPersistentMap\n     (coerce [m]\n       (node-with-meta\n        ;; in clj a record is a persistent map\n        (if (record? m)\n          (record-node m)\n          (map-node (map->children m)))\n        m)))\n   :cljs\n   (let [create-map-node (fn [m]\n                           (node-with-meta\n                            (map-node (map->children m))\n                            m))]\n     (extend-protocol NodeCoerceable\n       PersistentHashMap\n       (coerce [m] (create-map-node m)))\n     (extend-protocol NodeCoerceable\n       PersistentArrayMap\n       (coerce [m] (create-map-node m)))))\n\n;; ## Vars\n\n(extend-protocol NodeCoerceable\n  #?(:clj clojure.lang.Var :cljs Var)\n  (coerce [v]\n    (-> (str v)\n        (subs 2)\n        (symbol)\n        (token-node)\n        (vector)\n        (var-node))))\n\n;; ## rewrite-cljc nodes coerce to themselves\n\n(extend-protocol NodeCoerceable\n  CommentNode     (coerce [v] v)\n  FormsNode       (coerce [v] v)\n  IntNode         (coerce [v] v)\n  KeywordNode     (coerce [v] v)\n  MetaNode        (coerce [v] v)\n  QuoteNode       (coerce [v] v)\n  ReaderNode      (coerce [v] v)\n  ReaderMacroNode (coerce [v] v)\n  DerefNode       (coerce [v] v)\n  StringNode      (coerce [v] v)\n  UnevalNode      (coerce [v] v)\n  NewlineNode     (coerce [v] v)\n  SeqNode         (coerce [v] v)\n  TokenNode       (coerce [v] v)\n  WhitespaceNode  (coerce [v] v))\n"]}