{"version":3,"sources":["rewrite_cljc/parser/utils.cljc"],"mappings":";AAMA;;;8CAAA,9CAAMA,oGAEqCC;AAF3C,AAGE,OAACC,+CAA4BD;;AAE/B;;;6CAAA,7CAAME,kGAEqCF;AAF3C,AAGE,IAAAG,oBAAKH;AAAL,AAAA,oBAAAG;AAAO,SAAI,+CAAA,/CAACC,6CAAEJ,aAAY,+CAAA,/CAACI,6CAAEJ;;AAA7BG;;;AAEF;;;yCAAA,zCAAME,0FAEqCL;AAF3C,AAGE,IAAAG,oBAAK,AAACG,cAAI,AAACJ,2CAAWF;AAAtB,AAAA,GAAAG;AAA0B,OAACJ,4CAAYC;;AAAvCG;;;AAEF;;;mCAAA,nCAAMI,8EAEkBC;AAFxB,AAGE,AAAaA;;AAHf;;AAMA,AAAA,yCAAA,iDAAAC,1FAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4EAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8EAAA,9EAAME,yFACkBP,OAA0Ba;AADlD,AAEE,IAAMrB,IAAE,AAAqBQ;IACvBc,IAAE,AAAmBd;AAD3B,AAEE,MAAO,oSAAA,pSAACe,gDACA,+GAAA,4DAAA,2DAAA,zLAAK,AAACC,8CAAMC,cAAIJ,+DAAkBC,2DAActB;;;AAL5D,CAAA,iEAAA,jEAAMe;;AAAN;AAAA,CAAA,2DAAA,WAAAC,tEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAOA,qCAAA,rCAAMU,kFACkBlB;AADxB,AAEE,eAAA,XAAOmB;;AAAP,AACE,IAAAC,qBAAW,AAAapB;AAAxB,AAAA,oBAAAoB;AAAA,QAAAA,JAAS5B;AAAT,AACE,oBAAI,AAACE,2CAAWF;AACd,OAACwB,8CAAMC,cAAI,AAACI,6CAAKF,SAAS3B;;AAC1B,eAAO,AAAC6B,6CAAKF,SAAS3B;;;;;AACxB,OAACwB,8CAAMC,cAAIE","names":["rewrite-cljc.parser.utils/whitespace?","c","rewrite-cljc.interop/clojure-whitespace?","rewrite-cljc.parser.utils/linebreak?","and__4251__auto__","cljs.core._EQ_","rewrite-cljc.parser.utils/space?","cljs.core/not","rewrite-cljc.parser.utils/ignore","reader","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rewrite-cljc.parser.utils/throw-reader","seq92711","G__92712","cljs.core/first","cljs.core/next","self__4851__auto__","msg","l","cljs.core.ex_info","cljs.core.apply","cljs.core/str","rewrite-cljc.parser.utils/read-eol","char-seq","temp__5718__auto__","cljs.core.conj"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.parser.utils\n  (:require [clojure.tools.reader.reader-types :as r]\n            [rewrite-cljc.interop :as interop]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn whitespace?\n  \"Check if a given character is a whitespace.\"\n  [#?(:clj ^java.lang.Character c :default c)]\n  (interop/clojure-whitespace? c))\n\n(defn linebreak?\n  \"Check if a given character is a linebreak.\"\n  [#?(:clj ^java.lang.Character c :default c)]\n  (and c (or (= c \\newline) (= c \\return))))\n\n(defn space?\n  \"Check if a given character is a non-linebreak whitespace.\"\n  [#?(:clj ^java.lang.Character c :default c)]\n  (and (not (linebreak? c)) (whitespace? c)))\n\n(defn ignore\n  \"Ignore next character of Reader.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (r/read-char reader)\n  nil)\n\n(defn throw-reader\n  [#?(:cljs ^not-native reader :default reader) & msg]\n  (let [c (r/get-column-number reader)\n        l (r/get-line-number reader)]\n    (throw (ex-info\n            (str (apply str msg) \" [at line \" l \", column \" c \"]\") {}))))\n\n(defn read-eol\n  [#?(:cljs ^not-native reader :default reader)]\n  (loop [char-seq []]\n    (if-let [c (r/read-char reader)]\n      (if (linebreak? c)\n        (apply str (conj char-seq c))\n        (recur (conj char-seq c)))\n      (apply str char-seq))))\n"]}