{"version":3,"sources":["rewrite_cljc/node/keyword.cljc"],"mappings":"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","names":["this__4502__auto__","k__4503__auto__","this__4504__auto__","k91732","else__4505__auto__","G__91742","cljs.core/Keyword","k","namespaced?","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__91743","vec__91744","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__91731","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this91733","other91734","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__91769","this__4510__auto__","k__4511__auto__","pred__91770","cljs.core/keyword-identical?","expr__91771","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-cljc.node.keyword/KeywordNode","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__91736","extmap__4542__auto__","G__91853","cljs.core/record?","rewrite-cljc.node.keyword/->KeywordNode","rewrite-cljc.node.keyword/map->KeywordNode","_","and__4251__auto__","cljs.core/not","cljs.core/namespace","cljs.core.keyword","cljs.core/name","cljs.core/ns-name","cljs.core/*ns*","this","c","temp__5718__auto__","nspace","cljs.core.pr_str","rewrite-cljc.node.protocols/make-printable!","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rewrite-cljc.node.keyword/keyword-node","p__91862","vec__91863","js/Error","seq91857","G__91858","cljs.core/first","cljs.core/next","self__4851__auto__"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.keyword\n  (:require [rewrite-cljc.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n;; :foo - plain old\n;; ::foo - to current namespace\n;; :my.ns/foo - to valid explicit namespace\n;; ::my/foo - to valid :as alias\n(defrecord KeywordNode [k namespaced?]\n  node/Node\n  (tag [_] :token)\n  (printable-only? [_] false)\n  (sexpr [_]\n    (if (and namespaced?\n             (not (namespace k)))\n      (keyword\n       (name (ns-name *ns*))\n       (name k))\n      k))\n  (length [this]\n    (let [c (inc (count (name k)))]\n      (if namespaced?\n        (inc c)\n        (if-let [nspace (namespace k)]\n          (+ 1 c (count nspace))\n          c))))\n  (string [_]\n    (str (when namespaced? \":\")\n         (pr-str k)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(node/make-printable! KeywordNode)\n\n;; ## Constructor\n\n(defn keyword-node\n  \"Create node representing a keyword `k`. If `namespaced?` is `true`\n   a keyword \u00e0 la `::x` or `::ns/x` (i.e. namespaced/aliased/auto-resolved) is generated.\"\n  [k & [namespaced?]]\n  {:pre [(keyword? k)]}\n  (->KeywordNode k namespaced?))\n"]}