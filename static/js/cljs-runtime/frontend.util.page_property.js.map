{"version":3,"sources":["frontend/util/page_property.cljs"],"mappings":"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","names":["frontend.util.page-property/insert-property","format","content","key","value","clojure.string/blank?","cljs.core/name","cljs.core.keyword","key-part","frontend.util.format","G__62731","cljs.core/Keyword","new-property-line","lines","clojure.string/split-lines","key-exists?","cljs.core.atom","cljs.core.doall","cljs.core.map","line","clojure.string/starts-with?","cljs.core/deref","cljs.core/not","cljs.core/reset!","cljs.core._EQ_","cljs.core/cons","clojure.string.join","frontend.util.page-property/insert-properties","kvs","cljs.core.reduce","p__62738","vec__62739","cljs.core.nth","k","v","clojure.string/lower-case","clojure.string/replace","cljs.core/coll?","G__62742","cljs.core/seq","cljs.core.distinct","frontend.util.page-property/add-property!","page-name","temp__5720__auto__","page","G__62743","frontend.db/pull","frontend.util/page-name-sanity-lc","repo","frontend.state/get-current-repo","pre-block","G__62744","G__62745","frontend.db/get-pre-block","frontend.state.get_preferred_format","page-id","org?","cljs.core/contains?","cljs.core.pr_str","properties","new-properties","cljs.core.assoc","new-content","block","tx","frontend.db/transact!","frontend.db/new-block-id","clojure.string/upper-case","page-properties-tx","transact-data__62460__auto__","frontend.modules.outliner.core/*transaction-data*","opts__62461__auto__","*transaction-data*-orig-val__62750","*transaction-data*-temp-val__62751","cljs.core/transient","r__62462__auto__","cljs.core/persistent!","tx__62463__auto__","cljs.core.mapcat","tx-meta__62464__auto__","cljs.core/first","all-tx__62465__auto__","cljs.core.concat","opts#__62466__auto__","cljs.core.merge","cljs.core.dissoc","result__62467__auto__","frontend.modules.outliner.datascript/transact!","frontend.modules.outliner.core/insert-blocks!","frontend.modules.outliner.file/sync-to-file"],"sourcesContent":["(ns frontend.util.page-property\n  (:require [clojure.string :as string]\n            [frontend.db :as db]\n            [frontend.modules.outliner.core :as outliner-core]\n            [frontend.modules.outliner.file :as outliner-file]\n            [frontend.modules.outliner.transaction :as outliner-tx]\n            [frontend.state :as state]\n            [frontend.util :as util]))\n\n(defn insert-property\n  [format content key value]\n  (when (and (string? content) (not (string/blank? (name key))))\n    (let [key (if (string? key) (keyword key) key)\n          key-part (util/format (case format\n                                  :org \"#+%s: \"\n                                  \"%s:: \") (name key))\n          new-property-line (str key-part value)\n          lines (string/split-lines content)\n          key-exists? (atom false)\n          lines (doall\n                 (map (fn [line]\n                        (if (and (string/starts-with? line key-part) (not @key-exists?)) ; only replace the first match\n                          (do\n                            (reset! key-exists? true)\n                            new-property-line)\n                          line)) lines))\n          lines (if (= lines [\"\"]) nil lines)\n          lines (if @key-exists? lines (cons new-property-line lines))]\n      (string/join \"\\n\" lines))))\n\n(defn insert-properties\n  [format content kvs]\n  (reduce\n   (fn [content [k v]]\n     (let [k (if (string? k)\n               (keyword (-> (string/lower-case k)\n                            (string/replace \" \" \"-\")))\n               k)\n           v (if (coll? v)\n               (some->>\n                (seq v)\n                (distinct)\n                (string/join \", \"))\n               v)]\n       (insert-property format content k v)))\n   content kvs))\n\n(defn add-property!\n  \"Sanitized page-name, unsanitized key / value\"\n  [page-name key value]\n  (when-let [page (db/pull [:block/name (util/page-name-sanity-lc page-name)])]\n    (let [repo (state/get-current-repo)\n          key (keyword key)\n          pre-block (db/get-pre-block repo (:db/id page))\n          format (state/get-preferred-format)\n          page-id {:db/id (:db/id page)}\n          org? (= format :org)\n          value (if (contains? #{:filters} key) (pr-str value) value)]\n      (if pre-block\n        (let [properties (:block/properties pre-block)\n              new-properties (assoc properties key value)\n              content (:block/content pre-block)\n              new-content (insert-property format content key value)\n              block {:db/id (:db/id pre-block)\n                     :block/properties new-properties\n                     :block/content new-content\n                     :block/page page-id}\n              tx [(assoc page-id :block/properties new-properties)\n                  block]]\n          ;; (util/pprint tx)\n          (db/transact! tx))\n        (let [block {:block/uuid (db/new-block-id)\n                     :block/left page-id\n                     :block/parent page-id\n                     :block/page page-id\n                     :block/content (if org?\n                                      (str \"#+\" (string/upper-case (name key)) \": \" value)\n                                      (str (name key) \":: \" value))\n                     :block/format format\n                     :block/properties {key value}\n                     :block/pre-block? true}\n              page-properties-tx [(assoc page-id :block/properties {key value})]]\n          (outliner-tx/transact!\n            {:outliner-op :insert-blocks\n             :additional-tx page-properties-tx}\n            (outliner-core/insert-blocks! block page {:sibling? false}))))\n      (outliner-file/sync-to-file page-id))))\n"]}