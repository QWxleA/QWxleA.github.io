{"version":3,"sources":["frontend/search/db.cljs"],"mappings":";;AAUA,GAAA,QAAAA,qCAAAC,4CAAAC,+CAAAC;AAAA;AAAA,AAAA,AAASC,6BAAQ,6CAAA,7CAACC;;AAElB;;;qCAAA,6CAAAC,lFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAEwCO;WAFxC,AAAAL,4CAAAF,eAAA,lEAEiBI;WAFjB,AAAAF,4CAAAF,eAAA,lEAEsBK;cAFtB,AAAAH,4CAAAF,eAAA,rEAE2BM;AAF3B,AAGE,IAAAE,qBAAmB,AAACC,+BAAsBH;AAA1C,AAAA,oBAAAE;AAAA,AAAA,kBAAAA,dAAWF;AAAX,AAAA,kDAAA,4IAAA,wGAAA,yDAAA,3PACO,AAAA,mFAAQC,6DACN,4CAAKH,0DACLC,8DACGC;;AAJZ;;;AAMF,yCAAA,zCAAMI,0FAGHC;AAHH,iLAIO,CAACC,mEAAAA,qEAAAA,xNACD,AAACC,4CAAIV,hHACL,AAACW,+CAAOC,7EACR,OAACC;;AAER,8CAAA,9CAAMC,oGACHN;AADH,AAEE,IAAMO,SAAO,AAACR,uCAAoBC;IAC5BQ,SAAO,KAAAC,iDAAOF,OACA,qBAAA,2CAAA,qDAAA,mFAAA,OAAA,UAAA,eAAA,kEAAA,KAAA,6DAAA,KAAA,gFAAA,IAAA,8DAAA,OAAA,8DAAA,xkBAACG;AAFrB,AAQE,iGAAA,wFAAA,zLAACC,mDAAMzB,2BAAQ0B,sGAAUZ,sEAAcQ;;AACvCA;;AAEJ,kDAAA,lDAAMK,4GACHC;AADH,AAAA,kDAAA,uFAAA,lCACa,AAAChB,+BAAsBgB,2EACdA;;AAEtB;;;;6CAAA,7CAAMC;AAAN,AAIE,IAAAlB,qBAAgB,AAACmB;AAAjB,AAAA,oBAAAnB;AAAA,AAAA,WAAAA,PAAWG;AAAX,AACE,IAAMiB,sMAAW,iBAAAC,WAAc,AAACF,vGACf,AAACb,+CAAOiB,3IACR,AAAClB,4CAAIW,nEACL,AAACR;AAHD,AAAA,kHAAAa,4CAAAA,tJAACC,sDAAAA,gEAAAA;;IAIZX,SAAO,KAAAC,iDAAOQ,MACA,qBAAA,2CAAA,qDAAA,mFAAA,eAAA,kEAAA,KAAA,6DAAA,KAAA,gFAAA,IAAA,8DAAA,OAAA,8DAAA,vjBAACP;AALrB,AAYE,iGAAA,wFAAA,zLAACC,mDAAMzB,2BAAQ0B,sGAAUZ,oEAAaQ;;AACtCA;;AAdJ","names":["js/frontend","js/frontend.search","js/frontend.search.db","js/frontend.search.db.indices","frontend.search.db/indices","cljs.core.atom","p__43336","map__43337","cljs.core/--destructure-map","cljs.core.get","frontend.search.db/block->index","uuid","page","content","block","temp__5720__auto__","frontend.util/search-normalize","frontend.search.db/build-blocks-indice","repo","frontend.db/get-all-block-contents","cljs.core.map","cljs.core.remove","cljs.core/nil?","cljs-bean.core/->js","frontend.search.db/make-blocks-indice!","blocks","indice","js/module$node_modules$fuse_DOT_js$dist$fuse_common","cljs.core/clj->js","cljs.core.swap_BANG_","cljs.core/assoc-in","frontend.search.db/original-page-name->index","p","frontend.search.db/make-pages-indice!","frontend.state/get-current-repo","pages","G__43338","frontend.db/get-pages","clojure.string/blank?"],"sourcesContent":["(ns frontend.search.db\n  (:require [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            [frontend.db :as db]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [\"fuse.js\" :as fuse]))\n\n;; Notice: When breaking changes happen, bump version in src/electron/electron/search.cljs\n\n(defonce indices (atom nil))\n\n(defn block->index\n  \"Convert a block to the index for searching\"\n  [{:block/keys [uuid page content] :as block}]\n  (when-let [content (util/search-normalize content)]\n    {:id (:db/id block)\n     :uuid (str uuid)\n     :page page\n     :content content}))\n\n(defn build-blocks-indice\n  ;; TODO: Remove repo effects fns further up the call stack. db fns need standardization on taking connection\n  #_:clj-kondo/ignore\n  [repo]\n  (->> (db/get-all-block-contents)\n       (map block->index)\n       (remove nil?)\n       (bean/->js)))\n\n(defn make-blocks-indice!\n  [repo]\n  (let [blocks (build-blocks-indice repo)\n        indice (fuse. blocks\n                      (clj->js {:keys [\"uuid\" \"content\" \"page\"]\n                                :shouldSort true\n                                :tokenize true\n                                :minMatchCharLength 1\n                                :distance 1000\n                                :threshold 0.35}))]\n    (swap! indices assoc-in [repo :blocks] indice)\n    indice))\n\n(defn original-page-name->index\n  [p] {:name (util/search-normalize p)\n       :original-name p})\n\n(defn make-pages-indice!\n  \"Build a page indice from scratch.\n   Incremental page indice is implemented in frontend.search.sync-search-indice!\"\n  []\n  (when-let [repo (state/get-current-repo)]\n    (let [pages (->> (db/get-pages (state/get-current-repo))\n                     (remove string/blank?)\n                     (map original-page-name->index)\n                     (bean/->js))\n          indice (fuse. pages\n                        (clj->js {:keys [\"name\"]\n                                  :shouldSort true\n                                  :tokenize true\n                                  :minMatchCharLength 1\n                                  :distance 1000\n                                  :threshold 0.35\n                                  }))]\n      (swap! indices assoc-in [repo :pages] indice)\n      indice)))\n"]}