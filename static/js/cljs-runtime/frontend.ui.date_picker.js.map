{"version":3,"sources":["frontend/ui/date_picker.cljs"],"mappings":"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","names":["frontend.ui.date-picker/month-format","cljs_time.format.formatter","frontend.ui.date-picker/week-format","frontend.ui.date-picker/month-label","date","cljs-time.format/unparse","frontend.ui.date-picker/dec-month","cljs_time.core.minus","cljs_time.core.months","frontend.ui.date-picker/inc-month","cljs_time.core.plus","frontend.ui.date-picker/inc-date","n","cljs_time.core.days","var_args","G__55357","frontend.ui.date-picker/previous","js/Error","pred","frontend.ui.date_picker.previous","frontend.util/now->utc","period","frontend.ui.date-picker/=date","date1","date2","cljs.core._EQ_","cljs-time.core/year","cljs-time.core/month","cljs-time.core/day","frontend.ui.date-picker/<=date","or__5043__auto__","cljs-time.core/before?","frontend.ui.date-picker/>=date","cljs-time.core/after?","frontend.ui.date-picker/days-vector","frontend.ui.date-picker/rotate","coll","c","cljs.core/count","cljs.core.take","cljs.core.drop","cljs.core/mod","cljs.core/cycle","p1__55396#","frontend.ui.date-picker/is-day-pred","d","cljs-time.core/day-of-week","frontend.ui.date-picker/*internal-model","rum.core/cursor","frontend.state/state","frontend.ui.date-picker/main-div-with","table-div","class","style","attr","cljs.core.merge","rum.core/lazy-build","rum.core/build-defc","p__55463","map__55465","cljs.core/--destructure-map","cljs.core.get","attrs55425","daiquiri.core/create-element","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.interpreter/interpret","frontend.ui.date-picker/table-thead","display-month","show-weeks?","minimum","maximum","start-of-week","prev-date","frontend.util/deref-or-value","prev-enabled?","next-date","next-enabled?","template-row","cljs.core.conj","cljs.core/reset!","iter__5520__auto__","s__55500","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__55502","cljs.core/chunk-buffer","i__55501","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__55499","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__55509","b__55511","i__55510","iter__55508","day","p__55522","map__55531","frontend.ui.date-picker/table-td","focus-month","selected","today","attributes","disabled?","on-change","enabled-min","enabled-max","enabled-day","and__5041__auto__","disabled-day?","cljs.core/not","fexpr__55569","classes","on-click","e","frontend.ui.date-picker/week-td","frontend.ui.date-picker/table-tr","table-row","row-dates","p1__55587#","cljs.core.map","cljs.core.range","cljs.core.into","p1__55590#","frontend.ui.date-picker/table-tbody","current-start","row-start-dates","p1__55607#","p1__55608#","frontend.ui.date-picker/configure","selectable-fn","cljs.core/fn?","cljs.core/constantly","p__55636","map__55637","frontend.ui.date-picker/date-picker","rum.core/reactive","state","frontend.modules.shortcut.core/mixin","_model","frontend.state/get-start-of-week","args","internal-model","frontend.util/react","cljs_time.core.first_day_of_the_month","props-with-defaults","configuration","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.ui.date-picker\n  (:require [cljs-time.core       :refer [after? before? day day-of-week days first-day-of-the-month minus month months plus year]]\n            [cljs-time.format     :refer [formatter unparse]]\n            [frontend.modules.shortcut.core :as shortcut]\n            [frontend.state :as state]\n            [frontend.util  :as util    :refer [deref-or-value now->utc]]\n            [rum.core :as rum]))\n\n;; Adapted from re-com date-picker\n\n;; TODO: add left, right, up, down, enter bindings\n\n;; Loosely based on ideas: https://github.com/dangrossman/bootstrap-daterangepicker\n\n;; --- cljs-time facades ------------------------------------------------------\n\n(def ^:const month-format (formatter \"MMMM yyyy\"))\n\n(def ^:const week-format (formatter \"ww\"))\n\n(defn- month-label [date] (unparse month-format date))\n\n(defn- dec-month [date] (minus date (months 1)))\n\n(defn- inc-month [date] (plus date (months 1)))\n\n(defn- inc-date [date n] (plus date (days n)))\n\n(defn previous\n  \"If date fails pred, subtract period until true, otherwise answer date\"\n  ;; date   - a date object that satisfies cljs-time.core/DateTimeProtocol.\n  ;;          If omitted, use now->utc, which returns a goog.date.UtcDateTime version of now with time removed.\n  ;; pred   - can be one of cljs-time.predicate e.g. sunday? but any valid pred is supported.\n  ;; period - a period which will be subtracted see cljs-time.core periods\n  ;; Note:  If period and pred do not represent same granularity, some steps may be skipped\n                                        ;         e.g Pass a Wed date, specify sunday? as pred and a period (days 2) will skip one Sunday.\n  ([pred]\n   (previous pred (now->utc)))\n  ([pred date]\n   (previous pred date (days 1)))\n  ([pred date period]\n   (if (pred date)\n     date\n     (recur pred (minus date period) period))))\n\n(defn- =date [date1 date2]\n  (and\n   (= (year date1)  (year date2))\n   (= (month date1) (month date2))\n   (= (day date1)   (day date2))))\n\n(defn- <=date [date1 date2]\n  (or (=date date1 date2) (before? date1 date2)))\n\n(defn- >=date [date1 date2]\n  (or (=date date1 date2) (after? date1 date2)))\n\n(def ^:private days-vector\n  [{:key :Mo :short-name \"M\" :name \"MON\"}\n   {:key :Tu :short-name \"T\" :name \"TUE\"}\n   {:key :We :short-name \"W\" :name \"WED\"}\n   {:key :Th :short-name \"T\" :name \"THU\"}\n   {:key :Fr :short-name \"F\" :name \"FRI\"}\n   {:key :Sa :short-name \"S\" :name \"SAT\"}\n   {:key :Su :short-name \"S\" :name \"SUN\"}])\n\n(defn- rotate\n  [n coll]\n  (let [c (count coll)]\n    (take c (drop (mod n c) (cycle coll)))))\n\n(defn- is-day-pred [d]\n  #(= (day-of-week %) (inc d)))\n\n;; ----------------------------------------------------------------------------\n\n(def *internal-model (rum/cursor state/state :date-picker/date))\n\n(defn- main-div-with\n  [table-div class style attr]\n  [:div.rc-datepicker-wrapper\n   [:div {:style {:border-radius 4}}\n    [:div (merge\n           {:class (str \"rc-datepicker datepicker noselect \" class)\n            :style (merge {:font-size \"13px\"\n                           :position  \"static\"}\n                          style)}\n           attr)\n     table-div]]])\n\n(rum/defc table-thead\n  \"Answer 2 x rows showing month with nav buttons and days NOTE: not internationalized\"\n  [display-month {show-weeks? :show-weeks? minimum :minimum maximum :maximum start-of-week :start-of-week}]\n  (let [prev-date     (dec-month display-month)\n        minimum       (deref-or-value minimum)\n        maximum       (deref-or-value maximum)\n        prev-enabled? (if minimum (after? prev-date (dec-month minimum)) true)\n        next-date     (inc-month display-month)\n        next-enabled? (if maximum (before? next-date maximum) true)\n        template-row  (if show-weeks? [:tr [:th]] [:tr])]\n    [:thead\n     (conj template-row\n           [:th {:class (str \"prev \" (if prev-enabled? \"available selectable\" \"disabled\"))\n                 :style {:padding \"0px\"}\n                 :on-click #(when prev-enabled? (reset! *internal-model prev-date))}\n            [:span.font-bold \"<\"]]\n           [:th {:class \"month\" :col-span \"5\"} (month-label display-month)]\n           [:th {:class (str \"next \" (if next-enabled? \"available selectable\" \"disabled\"))\n                 :style {:padding \"0px\"}\n                 :on-click #(when next-enabled? (reset! *internal-model next-date))}\n            [:span.font-bold \">\"]])\n     (conj template-row\n           (for [day (rotate start-of-week days-vector)]\n             ^{:key (:key day)} [:th {:class \"day-enabled\"} (str (:name day))]))]))\n\n(defn- table-td\n  [date focus-month selected today {minimum :minimum maximum :maximum :as attributes} disabled? on-change]\n  ;;following can be simplified and terse\n  (let [minimum       (deref-or-value minimum)\n        maximum       (deref-or-value maximum)\n        enabled-min   (if minimum (>=date date minimum) true)\n        enabled-max   (if maximum (<=date date maximum) true)\n        enabled-day   (and enabled-min enabled-max)\n        disabled-day? (if enabled-day\n                        (not ((:selectable-fn attributes) date))\n                        true)\n        classes       (cond disabled?                    \"off\"\n                            disabled-day?                \"off\"\n                            (= focus-month (month date)) \"available\"\n                            :else                        \"available off\")\n        classes       (cond (and selected (=date selected date)) (str classes \" active start-date end-date\")\n                            (and today (=date date today))       (str classes \" today\")\n                            :else                                classes)\n        on-click      (fn [e]\n                        (when-not (or disabled? disabled-day?)\n                          (reset! *internal-model date)\n                          (on-change e date)))]\n    [:td {:class    classes\n          :on-click on-click} (day date)]))\n\n(defn- week-td [date]\n  [:td {:class \"week\"} (unparse week-format date)])\n\n(defn- table-tr\n  \"Return 7 columns of date cells from date inclusive\"\n  [date focus-month selected attributes disabled? on-change]\n                                        ;  {:pre [(sunday? date)]}\n  (let [table-row (if (:show-weeks? attributes) [:tr (week-td date)] [:tr])\n        row-dates (map #(inc-date date %) (range 7))\n        today     (when (:show-today? attributes) (now->utc))]\n    (into table-row (map #(table-td % focus-month selected today attributes disabled? on-change) row-dates))))\n\n(rum/defc table-tbody\n  \"Return matrix of 6 rows x 7 cols table cells representing 41 days from start-date inclusive\"\n  [display-month selected attributes disabled? on-change]\n  (let [start-of-week   (:start-of-week attributes)\n        current-start   (previous (is-day-pred start-of-week) display-month)\n        focus-month     (month display-month)\n        row-start-dates (map #(inc-date current-start (* 7 %)) (range 6))]\n    (into [:tbody] (map #(table-tr % focus-month selected attributes disabled? on-change) row-start-dates))))\n\n(defn- configure\n  \"Augment passed attributes with extra info/defaults\"\n  [attributes]\n  (let [selectable-fn (if (-> attributes :selectable-fn fn?)\n                        (:selectable-fn attributes)\n                        (constantly true))]\n    (merge attributes {:selectable-fn selectable-fn})))\n\n\n(rum/defc date-picker < rum/reactive\n  {:init (fn [state]\n           (reset! *internal-model (first (:rum/args state)))\n           state)}\n  (shortcut/mixin :shortcut.handler/date-picker)\n  [_model {:keys [on-change disabled? start-of-week class style attr]\n           :or   {start-of-week (state/get-start-of-week)} ;; Default to Sunday\n           :as   args}]\n  (let [internal-model (util/react *internal-model)\n        display-month (first-day-of-the-month (or internal-model (now->utc)))\n        props-with-defaults (merge args {:start-of-week start-of-week})\n        configuration       (configure props-with-defaults)]\n    (main-div-with\n     [:table.table-auto {:class \"table-condensed\"}\n      (table-thead display-month configuration)\n      (table-tbody display-month internal-model configuration disabled? on-change)]\n     class\n     style\n     attr)))\n"]}