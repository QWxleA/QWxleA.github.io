{"version":3,"sources":["frontend/mobile/record.cljs"],"mappings":"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","names":["frontend.mobile.record/request-audio-recording-permission","promesa.core.then","js/module$node_modules$capacitor_voice_recorder$dist$plugin_cjs.VoiceRecorder","result","frontend.mobile.record/has-audio-recording-permission?","frontend.mobile.record/set-recording-state","promesa.core.catch$","map__49726","cljs.core/--destructure-map","cljs.core.get","status","cljs.core.js__GT_clj","frontend.state/set-state!","error","js/console.error","frontend.mobile.record/start-recording","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","permission-granted?","or__5043__auto__","_result","js/console.log","lambdaisland.glogi.log","cljs.core/identity","frontend.mobile.record/embed-audio","database64","page","frontend.state/get-current-page","clojure.string/lower-case","frontend.date.journal_name","filename","frontend.date/get-date-time-string-2","edit-block","frontend.state/get-edit-block","format","frontend.db/get-page-format","path","frontend.handler.editor/get-asset-path","_file","js/module$node_modules$$capacitor$filesystem$dist$plugin_cjs.Filesystem","cljs.core/clj->js","url","frontend.util.format","file-link","frontend.handler.editor/get-asset-file-link","frontend.state/append-current-edit-content!","frontend.handler.editor/api-insert-new-block!","frontend.mobile.record/stop-recording","map__49741","value","_msDuration","recordDataBase64","_mimeType"],"sourcesContent":["(ns frontend.mobile.record\n  (:require [\"@capacitor/filesystem\" :refer [Filesystem]]\n            [\"capacitor-voice-recorder\" :refer [VoiceRecorder]]\n            [promesa.core :as p]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.state :as state]\n            [frontend.date :as date]\n            [lambdaisland.glogi :as log]\n            [frontend.util :as util]\n            [clojure.string :as string]\n            [frontend.db :as db]))\n\n(defn request-audio-recording-permission []\n  (p/then\n   (.requestAudioRecordingPermission VoiceRecorder)\n   (fn [^js result] (.-value result))))\n\n(defn- has-audio-recording-permission? []\n  (p/then\n   (.hasAudioRecordingPermission VoiceRecorder)\n   (fn [^js result] (.-value result))))\n\n(defn- set-recording-state []\n  (p/catch\n   (p/then (.getCurrentStatus VoiceRecorder)\n           (fn [^js result]\n             (let [{:keys [status]} (js->clj result :keywordize-keys true)]\n               (state/set-state! :editor/record-status status))))\n   (fn [error]\n     (js/console.error error))))\n\n(defn start-recording []\n  (p/let [permission-granted? (has-audio-recording-permission?)\n          permission-granted? (or permission-granted?\n                                  (request-audio-recording-permission))]\n    (when permission-granted?\n      (p/catch\n       (p/then (.startRecording VoiceRecorder)\n               (fn [^js _result]\n                 (set-recording-state)\n                 (js/console.log \"Start recording...\")))\n       (fn [error]\n         (log/error :start-recording-error error))))))\n\n(defn- embed-audio [database64]\n  (p/let [page (or (state/get-current-page) (string/lower-case (date/journal-name)))\n          filename (str (date/get-date-time-string-2) \".mp3\")\n          edit-block (state/get-edit-block)\n          format (or (:block/format edit-block) (db/get-page-format page))\n          path (editor-handler/get-asset-path filename)\n          _file (p/catch\n                 (.writeFile Filesystem (clj->js {:data database64\n                                                  :path path\n                                                  :recursive true}))\n                 (fn [error]\n                   (log/error :file/write-failed {:path path\n                                                  :error error})))\n          url (util/format \"../assets/%s\" filename)\n          file-link (editor-handler/get-asset-file-link format url filename true)]\n    (if edit-block\n      (state/append-current-edit-content! file-link)\n      (editor-handler/api-insert-new-block! file-link {:page page\n                                                       :edit-block? false\n                                                       :replace-empty-target? true}))))\n\n(defn stop-recording []\n  (p/catch\n   (p/then\n    (.stopRecording VoiceRecorder)\n    (fn [^js result]\n      (let [value (.-value result)\n            {:keys [_msDuration recordDataBase64 _mimeType]}\n            (js->clj value :keywordize-keys true)]\n        (set-recording-state)\n        (when (string? recordDataBase64)\n          (embed-audio recordDataBase64)\n          (js/console.log \"Stop recording...\")))))\n   (fn [error]\n     (js/console.error error))))\n"]}