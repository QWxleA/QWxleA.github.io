{"version":3,"sources":["frontend/search.cljs"],"mappings":"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","names":["frontend.search/get-engine","repo","frontend.util/electron?","frontend.search.node/->Node","frontend.search.browser/->Browser","frontend.search/str-len-distance","s1","s2","c1","cljs.core/count","c2","maxed","x__5128__auto__","y__5129__auto__","mined","x__5131__auto__","y__5132__auto__","frontend.search/MAX-STRING-LENGTH","frontend.search/clean-str","s","clojure.string/replace","clojure.string/lower-case","frontend.search/escape-str","frontend.regex/escape","frontend.search/char-array","cljs-bean.core/->js","cljs.core/seq","frontend.search/score","oquery","ostr","query","str","q","mult","idx","score","cljs.core/empty?","cljs.core._EQ_","cljs.core/first","cljs.core/rest","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.search/fuzzy-search","p__43841","map__43842","cljs.core/--destructure-map","cljs.core.get","seq43838","G__43839","cljs.core/next","G__43840","self__5751__auto__","data","limit","extract-fn","frontend.util/search-normalize","cljs.core.take","cljs.core.sort_by","cljs.core.comp","cljs.core/-","cljs.core/compare","p1__43837#","cljs.core.filter","iter__5520__auto__","s__43844","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__43846","cljs.core/chunk-buffer","i__43845","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__43843","cljs.core/chunk-rest","cljs.core/cons","item","cljs.core.map","frontend.search/block-search","option","engine","clojure.string/blank?","frontend.search.protocol/query","frontend.search/transact-blocks!","frontend.search.protocol/transact-blocks!","frontend.search/exact-matched?","match","cljs.core/boolean","cljs.core.reduce","coll","char","coll'","p1__43848#","cljs.core.drop_while","cljs.core.not_EQ_","cljs.core/reduced","G__43851","frontend.search/page-search","js/Error","frontend.search.page_search","frontend.state/get-current-repo","indice","or__5043__auto__","cljs.core/deref","cljs.core.get_in","frontend.search.db/indices","frontend.search.db/make-pages-indice!","result","cljs.core/clj->js","cljs-bean.core/->clj","p__43852","map__43853","cljs.core.remove","cljs.core/nil?","clojure.string/trim","cljs.core.distinct","original-name","G__43859","frontend.search/file-search","frontend.search.file_search","mldoc-exts","cljs.core/set","cljs.core/name","logseq.graph-parser.config/mldoc-support-formats","files","G__43867","frontend.db/get-files","file","G__43866","frontend.util/get-file-ext","frontend.search.fuzzy_search","G__43869","frontend.search/template-search","frontend.search.template_search","templates","frontend.db/get-all-templates","cljs.core/keys","cljs.core/vec","cljs.core/select-keys","frontend.search/sync-search-indice!","tx-report","datoms","datom","cljs.core/contains?","cljs.core/group-by","pages","blocks","pages-result","G__43879","G__43880","frontend.db/pull-many","pages-to-add-set","pages-to-add","page","p","frontend.search.db/original-page-name->index","pages-to-remove-set","cljs.core.swap_BANG_","cljs.core/update-in","seq__43881","chunk__43882","count__43883","i__43884","c__5565__auto__","cljs.core/chunk-first","page-name","frontend.util/safe-page-name-sanity-lc","frontend.search.goog$module$goog$object.get","seq__43888","chunk__43889","count__43890","i__43891","blocks-result","G__43892","G__43893","b","cljs.core.assoc","blocks-to-add-set","blocks-to-add","block","frontend.search.db/block->index","blocks-to-remove-set","G__43897","frontend.search/rebuild-indices!","frontend.search.rebuild_indices_BANG_","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","frontend.search.protocol/rebuild-blocks-indice!","cljs.core/assoc","frontend.search/reset-indice!","frontend.search.protocol/truncate-blocks!","cljs.core/assoc-in","frontend.search/remove-db!","frontend.search.protocol/remove-db!","frontend.search/cache-stale?","frontend.search.protocol/cache-stale?"],"sourcesContent":["(ns frontend.search\n  (:require [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            [logseq.graph-parser.config :as gp-config]\n            [frontend.db :as db]\n            [frontend.regex :as regex]\n            [frontend.search.browser :as search-browser]\n            [frontend.search.db :as search-db :refer [indices]]\n            [frontend.search.node :as search-node]\n            [frontend.search.protocol :as protocol]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [promesa.core :as p]))\n\n(defn get-engine\n  [repo]\n  (if (util/electron?)\n    (search-node/->Node repo)\n    (search-browser/->Browser repo)))\n\n;; Copied from https://gist.github.com/vaughnd/5099299\n(defn str-len-distance\n  ;; normalized multiplier 0-1\n  ;; measures length distance between strings.\n  ;; 1 = same length\n  [s1 s2]\n  (let [c1 (count s1)\n        c2 (count s2)\n        maxed (max c1 c2)\n        mined (min c1 c2)]\n    (double (- 1\n               (/ (- maxed mined)\n                  maxed)))))\n\n(def MAX-STRING-LENGTH 1000.0)\n\n(defn clean-str\n  [s]\n  (string/replace (string/lower-case s) #\"[\\[ \\\\/_\\]\\(\\)]+\" \"\"))\n\n(def escape-str regex/escape)\n\n(defn char-array\n  [s]\n  (bean/->js (seq s)))\n\n(defn score\n  [oquery ostr]\n  (let [query (clean-str oquery)\n        str (clean-str ostr)]\n    (loop [q (seq (char-array query))\n           s (seq (char-array str))\n           mult 1\n           idx MAX-STRING-LENGTH\n           score 0]\n      (cond\n        ;; add str-len-distance to score, so strings with matches in same position get sorted by length\n        ;; boost score if we have an exact match including punctuation\n        (empty? q) (+ score\n                      (str-len-distance query str)\n                      (if (<= 0 (.indexOf ostr oquery)) MAX-STRING-LENGTH 0))\n        (empty? s) 0\n        :else (if (= (first q) (first s))\n                   (recur (rest q)\n                          (rest s)\n                          (inc mult) ;; increase the multiplier as more query chars are matched\n                          (dec idx) ;; decrease idx so score gets lowered the further into the string we match\n                          (+ mult score)) ;; score for this match is current multiplier * idx\n                   (recur q\n                          (rest s)\n                          1 ;; when there is no match, reset multiplier to one\n                          (dec idx)\n                          score))))))\n\n(defn fuzzy-search\n  [data query & {:keys [limit extract-fn]\n                 :or {limit 20}}]\n  (let [query (util/search-normalize query)]\n    (->> (take limit\n               (sort-by :score (comp - compare)\n                        (filter #(< 0 (:score %))\n                                (for [item data]\n                                  (let [s (str (if extract-fn (extract-fn item) item))]\n                                    {:data item\n                                     :score (score query (util/search-normalize s))})))))\n         (map :data))))\n\n(defn block-search\n  [repo q option]\n  (when-let [engine (get-engine repo)]\n    (let [q (util/search-normalize q)\n          q (if (util/electron?) q (escape-str q))]\n      (when-not (string/blank? q)\n        (protocol/query engine q option)))))\n\n(defn transact-blocks!\n  [repo data]\n  (when-let [engine (get-engine repo)]\n    (protocol/transact-blocks! engine data)))\n\n(defn exact-matched?\n  \"Check if two strings points toward same search result\"\n  [q match]\n  (when (and (string? q) (string? match))\n    (boolean\n     (reduce\n      (fn [coll char]\n        (let [coll' (drop-while #(not= char %) coll)]\n          (if (seq coll')\n            (rest coll')\n            (reduced false))))\n      (seq (util/search-normalize match))\n      (seq (util/search-normalize q))))))\n\n(defn page-search\n  \"Return a list of page names that match the query\"\n  ([q]\n   (page-search q 10))\n  ([q limit]\n   (when-let [repo (state/get-current-repo)]\n     (let [q (util/search-normalize q)\n           q (clean-str q)]\n       (when-not (string/blank? q)\n         (let [indice (or (get-in @indices [repo :pages])\n                          (search-db/make-pages-indice!))\n               result (->> (.search indice q (clj->js {:limit limit}))\n                           (bean/->clj))]\n           ;; TODO: add indexes for highlights\n           (->> (map\n                  (fn [{:keys [item]}]\n                    (:original-name item))\n                 result)\n                (remove nil?)\n                (map string/trim)\n                (distinct)\n                (filter (fn [original-name]\n                          (exact-matched? q original-name))))))))))\n\n(defn file-search\n  ([q]\n   (file-search q 3))\n  ([q limit]\n   (let [q (clean-str q)]\n     (when-not (string/blank? q)\n       (let [mldoc-exts (set (map name gp-config/mldoc-support-formats))\n             files (->> (db/get-files (state/get-current-repo))\n                        (map first)\n                        (remove (fn [file]\n                                  (mldoc-exts (util/get-file-ext file)))))]\n         (when (seq files)\n           (fuzzy-search files q :limit limit)))))))\n\n(defn template-search\n  ([q]\n   (template-search q 10))\n  ([q limit]\n   (let [q (clean-str q)\n         templates (db/get-all-templates)]\n     (when (seq templates)\n       (let [result (fuzzy-search (keys templates) q :limit limit)]\n         (vec (select-keys templates result)))))))\n\n(defn sync-search-indice!\n  [repo tx-report]\n  (let [data (:tx-data tx-report)\n        datoms (filter\n                (fn [datom]\n                  (contains? #{:block/name :block/content} (:a datom)))\n                data)]\n    (when (seq datoms)\n      (let [datoms (group-by :a datoms)\n            pages (:block/name datoms)\n            blocks (:block/content datoms)]\n        (when (seq pages)\n          (let [pages-result (db/pull-many '[:db/id :block/name :block/original-name] (set (map :e pages)))\n                pages-to-add-set (->> (filter :added pages)\n                                      (map :e)\n                                      (set))\n                pages-to-add (->> (filter (fn [page]\n                                            (contains? pages-to-add-set (:db/id page))) pages-result)\n                                  (map (fn [p] (or (:block/original-name p)\n                                                   (:block/name p))))\n                                  (map search-db/original-page-name->index))\n                pages-to-remove-set (->> (remove :added pages)\n                                         (map :v))]\n            (swap! search-db/indices update-in [repo :pages]\n                   (fn [indice]\n                     (when indice\n                       (doseq [page-name pages-to-remove-set]\n                         (.remove indice\n                                  (fn [page]\n                                    (= (util/safe-page-name-sanity-lc page-name)\n                                       (util/safe-page-name-sanity-lc (gobj/get page \"original-name\"))))))\n                       (when (seq pages-to-add)\n                         (doseq [page pages-to-add]\n                           (.add indice (bean/->js page)))))\n                     indice))))\n\n        (when (seq blocks)\n          (let [blocks-result (->> (db/pull-many '[:db/id :block/uuid :block/format :block/content :block/page] (set (map :e blocks)))\n                                   (map (fn [b] (assoc b :block/page (get-in b [:block/page :db/id])))))\n                blocks-to-add-set (->> (filter :added blocks)\n                                       (map :e)\n                                       (set))\n                blocks-to-add (->> (filter (fn [block]\n                                             (contains? blocks-to-add-set (:db/id block)))\n                                           blocks-result)\n                                   (map search-db/block->index))\n                blocks-to-remove-set (->> (remove :added blocks)\n                                          (map :e)\n                                          (set))]\n            (transact-blocks! repo\n                              {:blocks-to-remove-set blocks-to-remove-set\n                               :blocks-to-add blocks-to-add})))))))\n\n(defn rebuild-indices!\n  ([]\n   (rebuild-indices! (state/get-current-repo)))\n  ([repo]\n   (when repo\n     (when-let [engine (get-engine repo)]\n       (let [pages (search-db/make-pages-indice!)]\n         (p/let [blocks (protocol/rebuild-blocks-indice! engine)]\n           (let [result {:pages pages\n                         :blocks blocks}]\n             (swap! indices assoc repo result)\n             indices)))))))\n\n(defn reset-indice!\n  [repo]\n  (when-let [engine (get-engine repo)]\n    (protocol/truncate-blocks! engine))\n  (swap! indices assoc-in [repo :pages] nil))\n\n(defn remove-db!\n  [repo]\n  (when-let [engine (get-engine repo)]\n    (protocol/remove-db! engine)))\n\n(defn cache-stale?\n  [repo]\n  (when-let [engine (get-engine repo)]\n    (protocol/cache-stale? engine repo)))\n"]}