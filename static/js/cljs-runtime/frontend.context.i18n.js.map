{"version":3,"sources":["frontend/context/i18n.cljs"],"mappings":";AAQA,AAAKA,8BACH,AAACC,0DAAWC,kEAAMC,qBAAYC;AAEhC,AAAKC,kCACH,AAACC,4BAAuBN;AAE1B,AAAA,0BAAA,kCAAAO,5DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,6DAAAF;;;AAAA,AAAA,CAAA,+DAAA,/DAAME,0EACDI;AADL,AAEE,IAAMC,qBAAmB,AAACC,gDAAQ,mBAAA,nBAACC;AAAnC,AACE,OAACC,8CAAMhB,gCAAUa,mBAAmBD;;;AAHxC,CAAA,kDAAA,lDAAMJ;;AAAN;AAAA,CAAA,4CAAA,WAAAC,vDAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAKA,6CAAA,7CAAOQ;AAAP,AACE,OAAA,AAAIC;;AAGN,8BAAA,9BAAMC;AAAN,AACE,IAAMN,qBAAmB,mBAAA,nBAACE;AAA1B,AACE,GAAM,uBAAA,tBAAMF;AAAZ,AACE,OAACO,4CAA8B,AAACH;;AADlC","names":["frontend.context.i18n/dicts","cljs.core.merge_with","cljs.core/merge","frontend.dicts/dicts","frontend.modules.shortcut.dicts/dicts","frontend.context.i18n/translate","tongue.core/build-translate","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.context.i18n/t","seq33169","self__5752__auto__","cljs.core/seq","args","preferred-language","cljs.core.keyword","frontend.state/sub","cljs.core.apply","frontend.context.i18n/fetch-local-language","js/window","frontend.context.i18n/start","frontend.state/set-preferred-language!"],"sourcesContent":["(ns frontend.context.i18n\n  \"Handles translation for the entire application. The dependencies for this ns\n  must be small since it is used throughout the application.\"\n  (:require [frontend.dicts :as dicts]\n            [frontend.modules.shortcut.dicts :as shortcut-dicts]\n            [tongue.core :as tongue]\n            [frontend.state :as state]))\n\n(def dicts\n  (merge-with merge dicts/dicts shortcut-dicts/dicts))\n\n(def translate\n  (tongue/build-translate dicts))\n\n(defn t\n  [& args]\n  (let [preferred-language (keyword (state/sub :preferred-language))]\n    (apply translate preferred-language args)))\n\n(defn- fetch-local-language []\n  (.. js/window -navigator -language))\n\n;; TODO: Fetch preferred language from backend if user is logged in\n(defn start []\n  (let [preferred-language (state/sub :preferred-language)]\n    (when (nil? preferred-language)\n      (state/set-preferred-language! (fetch-local-language)))))\n"]}