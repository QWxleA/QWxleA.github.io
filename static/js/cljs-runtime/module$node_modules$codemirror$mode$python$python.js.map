{
"version":3,
"file":"module$node_modules$codemirror$mode$python$python.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/codemirror/mode/python/python.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$python$python\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatibility with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state, inFormat) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return inFormat ? null :ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state, true)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent += 1;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\")\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state), closing = scope.type == textAfter.charAt(0)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","wordRegexp","words","RegExp","join","top","state","scopes","length","wordOperators","commonKeywords","commonBuiltins","registerHelper","concat","defineMode","conf","parserConf","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","inFormat","match","floatLiteral","eat","intLiteral","stringPrefixes","current","toLowerCase","indexOf","tokenize","tokenStringFactory","formatStringFactory","i","operators","delimiters","identifiers","keywords","builtins","next","ERRORCLASS","delimiter","tokenOuter","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","singleline","OUTCLASS","singleLineStringErrors","charAt","substr","isString","pop","push","indentUnit","align","indented","singleDelimiters","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","splice","hangingIndent","myKeywords","myBuiltins","undefined","extra_keywords","extra_builtins","py3","version","Number","external","startState","basecolumn","lambda","token","addErr","beginningOfLine","test","delimiter_index","slice","column","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","name"]
}
