{"version":3,"sources":["frontend/handler/common.cljs"],"mappings":"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","names":["frontend.handler.common/copy-to-clipboard-without-id-property!","format","content","frontend.util.copy_to_clipboard_BANG_","frontend.util.property/remove-id-property","frontend.handler.common/config-with-document-mode","config","cljs.core.assoc","frontend.state/sub","frontend.handler.common/ignore-files","pattern","paths","js/module$node_modules$ignore$index","cljs-bean.core/->js","cljs-bean.core/->clj","frontend.handler.common/hidden?","path","patterns","cljs.core._EQ_","cljs.core/first","cljs.core.subs","cljs.core/some","cljs.core.not_EQ_","clojure.string/starts-with?","frontend.handler.common/remove-hidden-files","files","get-path-fn","temp__5718__auto__","cljs.core/seq","cljs.core.remove","file","frontend.handler.common/get-config","repo-url","G__62608","G__62609","frontend.db/get-file","frontend.config.get_config_path","frontend.handler.common/safe-read-string","error-message-or-handler","e62616","cljs.reader.read_string","e","js/console.error","cljs.core/fn?","cljs.core.println","frontend.handler.common/read-config","_e","frontend.state/pub-event!","frontend.state/get-current-repo","frontend.config/config-default-content","frontend.handler.common/reset-config!","temp__5720__auto__","or__4253__auto__","frontend.state/set-config!","frontend.handler.common/read-metadata!","e62632","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.common/get-page-default-properties","page-name","frontend.handler.common/fix-pages-timestamps","pages","cljs.core.map","p__62638","map__62639","cljs.core/--destructure-map","cljs.core.get","created-at","updated-at","journal-day","p","G__62647","frontend.date/journal-day->ts","frontend.util/time-ms","frontend.handler.common/show-custom-context-menu!","context-menu-content","frontend.util/stop","client-x","frontend.handler.common.goog$module$goog$object.get","client-y","scroll-y","frontend.util/cur-doc-top","frontend.state/show-custom-context-menu!","js/setTimeout","context-menu","js/document.getElementById","dommy.core.set_style_BANG_","frontend.handler.common/parse-config","e62682","borkdude.rewrite-edn/parse-string"],"sourcesContent":["(ns frontend.handler.common\n  (:require [cljs-bean.core :as bean]\n            [cljs.reader :as reader]\n            [clojure.string :as string]\n            [dommy.core :as d]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.property :as property]\n            [goog.object :as gobj]\n            [\"ignore\" :as Ignore]\n            [lambdaisland.glogi :as log]\n            [borkdude.rewrite-edn :as rewrite]))\n\n(defn copy-to-clipboard-without-id-property!\n  [format content]\n  (util/copy-to-clipboard! (property/remove-id-property format content)))\n\n(defn config-with-document-mode\n  [config]\n  (assoc config\n         :document/mode? (state/sub [:document/mode?])))\n\n(defn ignore-files\n  [pattern paths]\n  (-> (Ignore)\n      (.add pattern)\n      (.filter (bean/->js paths))\n      (bean/->clj)))\n\n(defn- hidden?\n  [path patterns]\n  (let [path (if (and (string? path)\n                      (= \\/ (first path)))\n               (subs path 1)\n               path)]\n    (some (fn [pattern]\n            (let [pattern (if (and (string? pattern)\n                                   (not= \\/ (first pattern)))\n                            (str \"/\" pattern)\n                            pattern)]\n              (string/starts-with? (str \"/\" path) pattern))) patterns)))\n\n(defn remove-hidden-files\n  [files config get-path-fn]\n  (if-let [patterns (seq (:hidden config))]\n    (remove (fn [file]\n              (let [path (get-path-fn file)]\n                (hidden? path patterns))) files)\n    files))\n\n(defn get-config\n  [repo-url]\n  (db/get-file repo-url (config/get-config-path)))\n\n(defn safe-read-string\n  [content error-message-or-handler]\n  (try\n    (reader/read-string content)\n    (catch :default e\n      (js/console.error e)\n      (if (fn? error-message-or-handler)\n        (error-message-or-handler e)\n        (println error-message-or-handler))\n      {})))\n\n(defn read-config\n  [content]\n  (safe-read-string content\n                    (fn [_e]\n                      (state/pub-event! [:backup/broken-config (state/get-current-repo) content])\n                      (reader/read-string config/config-default-content))))\n\n(defn reset-config!\n  [repo-url content]\n  (when-let [content (or content (get-config repo-url))]\n    (let [config (read-config content)]\n      (state/set-config! repo-url config)\n      config)))\n\n(defn read-metadata!\n  [content]\n  (try\n    (reader/read-string content)\n    (catch :default e\n      (log/error :parse/metadata-failed e)\n      {})))\n\n(defn get-page-default-properties\n  [page-name]\n  {:title page-name\n   ;; :date (date/get-date-time-string)\n   })\n\n(defn fix-pages-timestamps\n  [pages]\n  (map (fn [{:block/keys [created-at updated-at journal-day] :as p}]\n         (cond->\n           p\n\n           (nil? created-at)\n           (assoc :block/created-at\n                  (if journal-day\n                    (date/journal-day->ts journal-day)\n                    (util/time-ms)))\n\n           (nil? updated-at)\n           (assoc :block/updated-at\n                  ;; Not exact true\n                  (if journal-day\n                    (date/journal-day->ts journal-day)\n                    (util/time-ms)))))\n    pages))\n\n(defn show-custom-context-menu! [e context-menu-content]\n  (util/stop e)\n  (let [client-x (gobj/get e \"clientX\")\n        client-y (gobj/get e \"clientY\")\n        scroll-y (util/cur-doc-top)]\n    (state/show-custom-context-menu! context-menu-content)\n\n    ;; FIXME: use setTimeout here because rum renders lazily.\n    (js/setTimeout\n     (fn []\n       (when-let [context-menu (d/by-id \"custom-context-menu\")]\n        (d/set-style! context-menu\n                      :left (str client-x \"px\")\n                      :top (str (+ scroll-y client-y) \"px\"))))\n     10)))\n\n(defn parse-config\n  \"Parse configuration from file `content` such as from config.edn.\"\n  [content]\n  (try\n    (rewrite/parse-string content)\n    (catch :default e\n      (log/error :parse/config-failed e)\n      (state/pub-event! [:backup/broken-config (state/get-current-repo) content])\n      (rewrite/parse-string config/config-default-content))))\n"]}