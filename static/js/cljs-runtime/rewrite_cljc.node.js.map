{"version":3,"sources":["rewrite_cljc/node.cljc"],"mappings":";AA4BA,AAAA;;;2BAAAQ,3BA2DG4E;;AA3DH;;;6BAAA3E,7BA0BGiE;;AA1BH;;;iCAAAhE,jCA2CMsE;;AA3CN;;;mCAAArE,nCAeeyD;;AAff;;;iCAAAxD,jCAwBG4D;;AAxBH;;;kCAAA3D,lCA8BG+D;;AA9BH;;;AAVGzE,2BAUHW;;AAAA;;;gCAAAC,hCAkDMkE;;AAlDN;;;AAdGhF,0CAcHe;;AAAA;;;qCAAAC,rCA4BG0D;;AA5BH;;;AAZGzE,0BAYHgB;;AAAA;;;2BAAAC,3BAGMuC;;AAHN;;;AARGrD,2BAQHe;;AAAA;;;AAhBGpB,wBAgBHqB;;AAAA;;;AAFMd,iCAENe;;AAAA;;;mCAAAC,nCAIMoC;;AAJN;;;4BAAAnC,5BAmEM+D;;AAnEN;;;;+BAAA9D,/BAaMuC;;AAbN;;;;;iCAAAtC,jCAOMkC;;AAPN;;;;iCAAAjC,jCAaMsC;;AAbN;;;8BAAArC,9BAYMkC;;AAZN;;;;kCAAAjC,lCAoBMwC;;AApBN;;;;;;;;;;;;;;;;;;;wCAAAvC,xCAqDMoD;;AArDN;;;AATM9E,+BASN2B;;AAAA;;;;+BAAAC,/BAuGMoE;;AAvGN;;;;8BAAAnE,9BAqFMyD;;AArFN;;;sCAAAxD,tCAgGM6D;;AAhGN;;;;6BAAA5D,7BA6EMqD;;AA7EN;;;8BAAApD,9BAeM8B;;AAfN;;;6BAAA7B,7BA8BMwC;;AA9BN;;;6BAAAvC,7BAyBMmC;;AAzBN;;;gCAAAlC,hCAoBM+B;;AApBN;;;;gCAAA9B,hCAeM2B;;AAfN;;;;+BAAA1B,/BAYMsB;;AAZN;;;;sCAAArB,tCAsBM6B;;AAtBN;;;;iCAAA5B,jCAgCMmC;;AAhCN;;;;0CAAAlC,1CA0CMmC;;AA1CN;;;AALMzE,+BAKNuC;;AAAA;;;gCAAAC,hCAOMe;;AAPN;;;oCAAAd,pCAuGQsD;;AAvGR;;;mCAAArD,nCA+GQsD;;AA/GR;;;qCAAArD,rCAqIMuD;;AArIN;;;6BAAAtD,7BAiGM8C;;AAjGN;;;iCAAA7C,jCAiEMmC;;AAjEN;;;2BAAAlC,3BA4FMyC;;AA5FN;;;oCAAAxC,pCAqDM8B;;AArDN;;;sCAAA7B,tCA4HMiD;;AA5HN;;;+BAAAhD,/BA2DM8B;;AA3DN;;;iCAAA7B,jCA0IMiD;;AA1IN;;;qCAAAhD,rCA6EMgC;;AA7EN,AAqFA;;;iDAAA,jDAAME,0GAEHC;AAFH,AAGE,SAAI,AAACtC,+CAAyCsC,WAC1C,AAACrE,yCAAmCqE;;AAI1C;;;;;0BAAA,1BAA6BE,4DAI1BF;AAJH,AAKE,oBAAI,AAAChF,yCAAUgF;AACb,IAAAK,WAAQ,AAACxF,qCAAYmF;IAArBK,eAAA,EAAA,CAAAA,YAAA,OAAA,KACQ,gBAAAA,hBAACC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAEQ,uHAAAA,hHAAC,AAACE,6CAAK9E,gCAAOH;;;AACtB,OAACA,kCAAS0E","names":["rewrite-cljc.node/tag","rewrite-cljc.node/printable-only?","rewrite-cljc.node/sexpr","rewrite-cljc.node/length","rewrite-cljc.node/regex-node","rewrite-cljc.node/string","rewrite-cljc.node/token-node","rewrite-cljc.node/comment-node","rewrite-cljc.node.protocols/coerce","rewrite-cljc.node.protocols/children","rewrite-cljc.node.protocols/child-sexprs","rewrite-cljc.node.protocols/concat-strings","rewrite-cljc.node.protocols/inner?","rewrite-cljc.node.protocols/leader-length","rewrite-cljc.node.protocols/length","rewrite-cljc.node.protocols/node?","rewrite-cljc.node.protocols/printable-only?","rewrite-cljc.node.protocols/replace-children","rewrite-cljc.node.protocols/sexpr","rewrite-cljc.node.protocols/sexprs","rewrite-cljc.node.protocols/string","rewrite-cljc.node.protocols/tag","rewrite-cljc.node.comment/comment-node","rewrite-cljc.node.comment/comment?","rewrite-cljc.node.fn/fn-node","rewrite-cljc.node.forms/forms-node","rewrite-cljc.node.integer/integer-node","rewrite-cljc.node.keyword/keyword-node","rewrite-cljc.node.meta/meta-node","rewrite-cljc.node.meta/raw-meta-node","rewrite-cljc.node.namespaced-map/namespaced-map-node","rewrite-cljc.node.regex/regex-node","rewrite-cljc.node.reader-macro/deref-node","rewrite-cljc.node.reader-macro/eval-node","rewrite-cljc.node.reader-macro/reader-macro-node","rewrite-cljc.node.reader-macro/var-node","rewrite-cljc.node.seq/list-node","rewrite-cljc.node.seq/map-node","rewrite-cljc.node.seq/set-node","rewrite-cljc.node.seq/vector-node","rewrite-cljc.node.stringz/string-node","rewrite-cljc.node.quote/quote-node","rewrite-cljc.node.quote/syntax-quote-node","rewrite-cljc.node.quote/unquote-node","rewrite-cljc.node.quote/unquote-splicing-node","rewrite-cljc.node.token/token-node","rewrite-cljc.node.uneval/uneval-node","rewrite-cljc.node.whitespace/comma-separated","rewrite-cljc.node.whitespace/line-separated","rewrite-cljc.node.whitespace/linebreak?","rewrite-cljc.node.whitespace/newlines","rewrite-cljc.node.whitespace/newline-node","rewrite-cljc.node.whitespace/spaces","rewrite-cljc.node.whitespace/whitespace-node","rewrite-cljc.node.whitespace/whitespace?","rewrite-cljc.node.whitespace/comma-node","rewrite-cljc.node.whitespace/comma?","rewrite-cljc.node.whitespace/whitespace-nodes","rewrite-cljc.node/sexprs","rewrite-cljc.node/comment?","rewrite-cljc.node/integer-node","rewrite-cljc.node/uneval-node","rewrite-cljc.node/meta-node","rewrite-cljc.node/quote-node","rewrite-cljc.node/forms-node","rewrite-cljc.node/keyword-node","rewrite-cljc.node/list-node","rewrite-cljc.node/string-node","rewrite-cljc.node/concat-strings","rewrite-cljc.node/raw-meta-node","rewrite-cljc.node/vector-node","rewrite-cljc.node/syntax-quote-node","rewrite-cljc.node/inner?","rewrite-cljc.node/set-node","rewrite-cljc.node/children","rewrite-cljc.node/replace-children","rewrite-cljc.node/leader-length","rewrite-cljc.node/map-node","rewrite-cljc.node/unquote-node","rewrite-cljc.node/unquote-splicing-node","rewrite-cljc.node/child-sexprs","rewrite-cljc.node/node?","rewrite-cljc.node/namespaced-map-node","rewrite-cljc.node/whitespace-node","rewrite-cljc.node/coerce","rewrite-cljc.node/comma-node","rewrite-cljc.node/newline-node","rewrite-cljc.node/fn-node","rewrite-cljc.node/var-node","rewrite-cljc.node/whitespace-nodes","rewrite-cljc.node/eval-node","rewrite-cljc.node/whitespace-or-comment?","node","rewrite-cljc.node/spaces","rewrite-cljc.node/value","rewrite-cljc.node/reader-macro-node","rewrite-cljc.node/newlines","G__92713","cljs.core/first","cljs.core.juxt","rewrite-cljc.node/deref-node","rewrite-cljc.node/comma-separated","rewrite-cljc.node/line-separated","rewrite-cljc.node/whitespace?","rewrite-cljc.node/linebreak?","rewrite-cljc.node/comma?"],"sourcesContent":["(ns rewrite-cljc.node\n  \"Create and evaluate nodes.\n\n  All nodes represent Clojure/ClojureScript/EDN.\"\n  ^{:added \"0.4.0\"}\n  (:refer-clojure :exclude [string coerce])\n  (:require [rewrite-cljc.node.coercer]\n            [rewrite-cljc.node.comment]\n            [rewrite-cljc.node.fn]\n            [rewrite-cljc.node.forms]\n            [rewrite-cljc.node.integer]\n            [rewrite-cljc.node.keyword]\n            [rewrite-cljc.node.meta]\n            [rewrite-cljc.node.namespaced-map]\n            [rewrite-cljc.node.protocols :as np]\n            [rewrite-cljc.node.quote]\n            [rewrite-cljc.node.reader-macro]\n            [rewrite-cljc.node.regex]\n            [rewrite-cljc.node.seq]\n            [rewrite-cljc.node.stringz]\n            [rewrite-cljc.node.token]\n            [rewrite-cljc.node.uneval]\n            [rewrite-cljc.node.whitespace]\n            #?(:clj [rewrite-cljc.potemkin.clojure :refer [import-vars]]))\n  #?(:cljs (:require-macros [rewrite-cljc.potemkin.cljs :refer [import-vars]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(import-vars\n [rewrite-cljc.node.protocols\n  coerce\n  children\n  child-sexprs\n  concat-strings\n  inner?\n  leader-length\n  length\n  node?\n  printable-only?\n  replace-children\n  sexpr\n  sexprs\n  string\n  tag]\n\n [rewrite-cljc.node.comment\n  comment-node\n  comment?]\n\n [rewrite-cljc.node.fn\n  fn-node]\n\n [rewrite-cljc.node.forms\n  forms-node]\n\n [rewrite-cljc.node.integer\n  integer-node]\n\n [rewrite-cljc.node.keyword\n  keyword-node]\n\n [rewrite-cljc.node.meta\n  meta-node\n  raw-meta-node]\n\n [rewrite-cljc.node.namespaced-map\n  namespaced-map-node]\n\n [rewrite-cljc.node.regex\n  regex-node]\n\n [rewrite-cljc.node.reader-macro\n  deref-node\n  eval-node\n  reader-macro-node\n  var-node]\n\n [rewrite-cljc.node.seq\n  list-node\n  map-node\n  set-node\n  vector-node]\n\n [rewrite-cljc.node.stringz\n  string-node]\n\n [rewrite-cljc.node.quote\n  quote-node\n  syntax-quote-node\n  unquote-node\n  unquote-splicing-node]\n\n [rewrite-cljc.node.token\n  token-node]\n\n [rewrite-cljc.node.uneval\n  uneval-node]\n\n [rewrite-cljc.node.whitespace\n  comma-separated\n  line-separated\n  linebreak?\n  newlines\n  newline-node\n  spaces\n  whitespace-node\n  whitespace?\n  comma-node\n  comma?\n  whitespace-nodes])\n\n;; ## Predicates\n\n(defn whitespace-or-comment?\n  \"Return true when `node` represents whitespace or comment.\"\n  [node]\n  (or (rewrite-cljc.node.whitespace/whitespace? node)\n      (rewrite-cljc.node.comment/comment? node)))\n\n;; ## Value\n\n(defn ^{:deprecated \"0.4.0\"} value\n  \"DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) \"\n  [node]\n  (if (np/inner? node)\n    (some-> (np/children node)\n            (first)\n            ((juxt np/tag np/sexpr)))\n    (np/sexpr node)))\n"]}