{
"version":3,
"file":"module$node_modules$jszip$lib$flate.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkBhGC,QAASA,YAAW,CAACC,MAAD,CAASC,OAAT,CAAkB,CAClCC,aAAcC,CAAAA,IAAd,CAAmB,IAAnB,CAAyB,cAAzB,CAA0CH,MAA1C,CAEA,KAAKI,CAAAA,KAAL,CAAa,IACb,KAAKC,CAAAA,WAAL,CAAmBL,MACnB,KAAKM,CAAAA,YAAL,CAAoBL,OAGpB,KAAKM,CAAAA,IAAL,CAAY,EARsB,CAhBlCC,MAAAA,CAAwC,WAAxCA,GAAkB,MAAOC,WAAzBD,EAAgF,WAAhFA,GAAyD,MAAOE,YAAhEF,EAAwH,WAAxHA,GAAiG,MAAOG,YAE5G,KAAIC,KAAOhB,OAAA,CAAQ,gCAAR,CAAX,CACIiB,MAAQjB,OAAA,CAAQ,qCAAR,CADZ,CAEIM,cAAgBN,OAAA,CAAQ,oDAAR,CAFpB;AAIIkB,WAAaN,MAAA,CAAiB,YAAjB,CAAgC,OAEjDV,QAAQiB,CAAAA,KAAR,CAAgB,QAmBhBF,MAAMG,CAAAA,QAAN,CAAejB,WAAf,CAA4BG,aAA5B,CAKAH,YAAYkB,CAAAA,SAAUC,CAAAA,YAAtB,CAAqCC,QAAS,CAACC,KAAD,CAAQ,CAClD,IAAKb,CAAAA,IAAL,CAAYa,KAAMb,CAAAA,IACC,KAAnB,GAAI,IAAKH,CAAAA,KAAT,EACI,IAAKiB,CAAAA,WAAL,EAEJ,KAAKjB,CAAAA,KAAMkB,CAAAA,IAAX,CAAgBT,KAAMU,CAAAA,WAAN,CAAkBT,UAAlB,CAA8BM,KAAMI,CAAAA,IAApC,CAAhB,CAA2D,CAAA,CAA3D,CALkD,CAWtDzB,YAAYkB,CAAAA,SAAUQ,CAAAA,KAAtB,CAA8BC,QAAS,EAAG,CACtCxB,aAAce,CAAAA,SAAUQ,CAAAA,KAAMtB,CAAAA,IAA9B,CAAmC,IAAnC,CACmB,KAAnB,GAAI,IAAKC,CAAAA,KAAT,EACI,IAAKiB,CAAAA,WAAL,EAEJ,KAAKjB,CAAAA,KAAMkB,CAAAA,IAAX,CAAgB,EAAhB,CAAoB,CAAA,CAApB,CALsC,CAU1CvB,YAAYkB,CAAAA,SAAUU,CAAAA,OAAtB,CAAgCC,QAAS,EAAG,CACxC1B,aAAce,CAAAA,SAAUU,CAAAA,OAAQxB,CAAAA,IAAhC,CAAqC,IAArC,CACA;IAAKC,CAAAA,KAAL,CAAa,IAF2B,CAW5CL,YAAYkB,CAAAA,SAAUI,CAAAA,WAAtB,CAAoCQ,QAAS,EAAG,CAC5C,IAAKzB,CAAAA,KAAL,CAAa,IAAIQ,IAAA,CAAK,IAAKP,CAAAA,WAAV,CAAJ,CAA2B,CACpCyB,IAAK,CAAA,CAD+B,CAEpCC,MAAO,IAAKzB,CAAAA,YAAayB,CAAAA,KAAzBA,EAAkC,CAAC,CAFC,CAA3B,CAIb,KAAIC,KAAO,IACX,KAAK5B,CAAAA,KAAM6B,CAAAA,MAAX,CAAoBC,QAAQ,CAACV,IAAD,CAAO,CAC/BQ,IAAKV,CAAAA,IAAL,CAAU,CACCE,IADD,CAENjB,KAAOyB,IAAKzB,CAAAA,IAFN,CAAV,CAD+B,CANS,CAchDT,QAAQqC,CAAAA,cAAR,CAAyBC,QAAS,CAACC,kBAAD,CAAqB,CACnD,MAAO,KAAItC,WAAJ,CAAgB,SAAhB,CAA2BsC,kBAA3B,CAD4C,CAGvDvC,QAAQwC,CAAAA,gBAAR,CAA2BC,QAAS,EAAG,CACnC,MAAO,KAAIxC,WAAJ,CAAgB,SAAhB,CAA2B,EAA3B,CAD4B,CAnFyD;",
"sources":["node_modules/jszip/lib/flate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$flate\"] = function(global,require,module,exports) {\n'use strict';\nvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\nvar pako = require(\"pako\");\nvar utils = require(\"./utils\");\nvar GenericWorker = require(\"./stream/GenericWorker\");\n\nvar ARRAY_TYPE = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\nexports.magic = \"\\x08\\x00\";\n\n/**\n * Create a worker that uses pako to inflate/deflate.\n * @constructor\n * @param {String} action the name of the pako function to call : either \"Deflate\" or \"Inflate\".\n * @param {Object} options the options to use when (de)compressing.\n */\nfunction FlateWorker(action, options) {\n    GenericWorker.call(this, \"FlateWorker/\" + action);\n\n    this._pako = null;\n    this._pakoAction = action;\n    this._pakoOptions = options;\n    // the `meta` object from the last chunk received\n    // this allow this worker to pass around metadata\n    this.meta = {};\n}\n\nutils.inherits(FlateWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nFlateWorker.prototype.processChunk = function (chunk) {\n    this.meta = chunk.meta;\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);\n};\n\n/**\n * @see GenericWorker.flush\n */\nFlateWorker.prototype.flush = function () {\n    GenericWorker.prototype.flush.call(this);\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push([], true);\n};\n/**\n * @see GenericWorker.cleanUp\n */\nFlateWorker.prototype.cleanUp = function () {\n    GenericWorker.prototype.cleanUp.call(this);\n    this._pako = null;\n};\n\n/**\n * Create the _pako object.\n * TODO: lazy-loading this object isn't the best solution but it's the\n * quickest. The best solution is to lazy-load the worker list. See also the\n * issue #446.\n */\nFlateWorker.prototype._createPako = function () {\n    this._pako = new pako[this._pakoAction]({\n        raw: true,\n        level: this._pakoOptions.level || -1 // default compression\n    });\n    var self = this;\n    this._pako.onData = function(data) {\n        self.push({\n            data : data,\n            meta : self.meta\n        });\n    };\n};\n\nexports.compressWorker = function (compressionOptions) {\n    return new FlateWorker(\"Deflate\", compressionOptions);\n};\nexports.uncompressWorker = function () {\n    return new FlateWorker(\"Inflate\", {});\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","FlateWorker","action","options","GenericWorker","call","_pako","_pakoAction","_pakoOptions","meta","USE_TYPEDARRAY","Uint8Array","Uint16Array","Uint32Array","pako","utils","ARRAY_TYPE","magic","inherits","prototype","processChunk","FlateWorker.prototype.processChunk","chunk","_createPako","push","transformTo","data","flush","FlateWorker.prototype.flush","cleanUp","FlateWorker.prototype.cleanUp","FlateWorker.prototype._createPako","raw","level","self","onData","this._pako.onData","compressWorker","exports.compressWorker","compressionOptions","uncompressWorker","exports.uncompressWorker"]
}
