{"version":3,"sources":["rewrite_cljc/parser/token.cljc"],"mappings":";AAMA,AAAA,6CAAA,qDAAAA,lGAAOM;AAAP,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,gFAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,kFAAA,kBAAAG,pGAAOD,6FACiBS;AADxB,AAAA,IAAAP,aAAAD;cAAA,AAAAE,4CAAAD,WAAA,IAAA,rEACmDQ;AADnD,AAEE,IAAMC,iBAAS,AAACC,cAAIF;AAApB,AACE,6CAAA,WAAAG,jDAACC,+BACAL;AADD,AAEE,IAAAM,oBAAK,AAACC,cAAI,6FAAAH,6CAAAA,zIAACF,+CAAAA,iEAAAA;AAAX,AAAA,GAAAI;AACK,yDAAAF,lDAACI;;AADNF;;;;;AALN,CAAA,qEAAA,rEAAOf;;AAAP;AAAA,CAAA,+DAAA,WAAAI,1EAAOJ;AAAP,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAQA,kDAAA,lDAAOc,4GACiBT;AADxB,AAEE,IAAMU,IAAE,AAACC,yBAAOX;AAAhB,AACE,oDAAKU,+CACA,8GAAA,5GAAI,kDAAA,lDAACE,gDAAKF,SACR,AAACnB,2CAAiBS;;AAG7B;;;;wCAAA,xCAAOa,wFAGiBb,OAAwBc,MAAMC;AAHtD,AAIE,IAAMC,SAAO,yIAAA,mFAAA,IAAA,hOAACC,gFACAjB;AADd,AAGE,GAAI,AAACkB,uBAAOF;AACV,OAACG,2DAAgBL,MAAMC;;AACvB,IAAMK,IAAE,6CAAKL,0DAAaC;AAA1B,AACE,OAACG,2DACA,AAACE,mCAAcD,GACfA;;;AAET;;;wCAAA,xCAAME,wFAEkBtB;AAFxB,AAGE,IAAMuB,aAAW,AAACZ,yBAAOX;IACnBoB,yGAAO,EAAI,wDAAA,xDAACI,6CAAED,kBACL,AAACd,gDAAsBT,QACvB,AAACT,2CAAiBS,zQACpB,6CAAKuB;IACZE,IAAE,AAACJ,mCAAcD;AALvB,AAME,GAAI,cAAAM,bAASD;AACX,OAACZ,sCAAYb,OAAOyB,EAAEL;;AACtB,OAACD,2DAAgBM,EAAEL","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rewrite-cljc.parser.token/read-to-boundary","p__92797","vec__92798","cljs.core.nth","seq92792","G__92793","cljs.core/first","cljs.core/next","self__4851__auto__","reader","allowed","allowed?","cljs.core/set","p1__92791#","rewrite-cljc.reader/read-until","and__4251__auto__","cljs.core/not","rewrite-cljc.reader/whitespace-or-boundary?","rewrite-cljc.parser.token/read-to-char-boundary","c","rewrite-cljc.reader/next","cljs.core.not_EQ_","rewrite-cljc.parser.token/symbol-node","value","value-string","suffix","rewrite_cljc.parser.token.read_to_boundary","cljs.core/empty?","rewrite_cljc.node.token_node","s","rewrite-cljc.reader/string->edn","rewrite-cljc.parser.token/parse-token","first-char","cljs.core._EQ_","v","cljs.core/Symbol"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.parser.token\n  (:require [rewrite-cljc.node :as node]\n            [rewrite-cljc.reader :as r]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- read-to-boundary\n  [#?(:cljs ^not-native reader :default reader) & [allowed]]\n  (let [allowed? (set allowed)]\n    (r/read-until\n     reader\n     #(and (not (allowed? %))\n           (r/whitespace-or-boundary? %)))))\n\n(defn- read-to-char-boundary\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [c (r/next reader)]\n    (str c\n         (if (not= c \\\\)\n           (read-to-boundary reader)\n           \"\"))))\n\n(defn- symbol-node\n  \"Symbols allow for certain boundary characters that have\n   to be handled explicitly.\"\n  [#?(:cljs ^not-native reader :default reader) value value-string]\n  (let [suffix (read-to-boundary\n                reader\n                [\\' \\:])]\n    (if (empty? suffix)\n      (node/token-node value value-string)\n      (let [s (str value-string suffix)]\n        (node/token-node\n         (r/string->edn s)\n         s)))))\n\n(defn parse-token\n  \"Parse a single token.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [first-char (r/next reader)\n        s (->> (if (= first-char \\\\)\n                 (read-to-char-boundary reader)\n                 (read-to-boundary reader))\n               (str first-char))\n        v (r/string->edn s)]\n    (if (symbol? v)\n      (symbol-node reader v s)\n      (node/token-node v s))))\n"]}