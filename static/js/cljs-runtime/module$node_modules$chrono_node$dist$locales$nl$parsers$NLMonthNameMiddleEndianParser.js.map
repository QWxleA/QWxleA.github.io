{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameMiddleEndianParser.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,qFAAA,CAA0G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElJC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,QAAUN,OAAA,CAAQ,wDAAR,CAAhB,CACMO,YAAcP,OAAA,CAAQ,2DAAR,CADpB,CAEMQ,YAAcR,OAAA,CAAQ,2DAAR,CAFpB,CAGMS,YAAcT,OAAA,CAAQ,2DAAR,CACdU;MAAAA,CAAYV,OAAA,CAAQ,oDAAR,CACZW,QAAAA,CAAmCX,OAAA,CAAQ,oFAAR,CACzC,OAAMY,QAAU,IAAIC,MAAJ,CAAW,cAAX,CACZ,IAAIL,WAAYM,CAAAA,sBAAhB,GADY,CAEZ,mDAFY,CAIZ,IAAIN,WAAYM,CAAAA,sBAAhB,GAJY,CAKZ,4BALY,CAQZJ,MAAUK,CAAAA,eAAV,CAA0BR,WAAYS,CAAAA,gBAAtC,CARY,CASZ,oBATY,CAYZ,IAAIP,WAAYQ,CAAAA,YAAhB,gBAZY,CAaZ,gBAbY;AAcC,GAdD,CAmBhB,MAAMC,8BAAN,QAA4CP,QAAiCQ,CAAAA,sCAA7E,CACIC,YAAY,EAAG,CACX,MAAOR,QADI,CAGfS,YAAY,CAACC,OAAD,CAAUC,KAAV,CAAiB,CACzB,IAAMC,MAAQjB,WAAYS,CAAAA,gBAAZ,CAA6BO,KAAA,CAT1BE,CAS0B,CAAwBC,CAAAA,WAAxB,EAA7B,CACd,OAAMC,IAAMnB,WAAYoB,CAAAA,yBAAZ,CAAsCL,KAAA,CATvCM,CASuC,CAAtC,CACZ,IAAU,EAAV,CAAIF,GAAJ,CAEI,MADAJ,MAAMO,CAAAA,KACC,EADqBP,KAAA,CAXrBM,CAWqB,CAAkBE,CAAAA,MACvC,CAAA,IAEX,OAAMC,WAAaV,OAAQW,CAAAA,uBAAR,CAAgC,CAC1CN,GAD0C,CAExCH,KAFwC,CAAhC,CAIfD,MAAA,CAhBOW,CAgBP,CAAJ,EACUC,KACN,CADa1B,WAAY2B,CAAAA,SAAZ,CAAsBb,KAAA,CAjB5BW,CAiB4B,CAAtB,CACb,CAAAF,UAAWK,CAAAA,MAAX,CAAkB,MAAlB,CAA0BF,KAA1B,CAFJ,GAKUA,KACN,CADa7B,OAAQgC,CAAAA,oBAAR,CAA6BhB,OAAQiB,CAAAA,OAArC;AAA8CZ,GAA9C,CAAmDH,KAAnD,CACb,CAAAQ,UAAWQ,CAAAA,KAAX,CAAiB,MAAjB,CAAyBL,KAAzB,CANJ,CAQA,IAAI,CAACZ,KAAA,CAzBSkB,CAyBT,CAAL,CACI,MAAOT,WAELU,MAAAA,CAAUlC,WAAYoB,CAAAA,yBAAZ,CAAsCL,KAAA,CA5BxCkB,CA4BwC,CAAtC,CACVE,QAAAA,CAASrB,OAAQsB,CAAAA,mBAAR,CAA4BrB,KAAMO,CAAAA,KAAlC,CAAyCP,KAAA,CAAM,CAAN,CAAzC,CACfoB,QAAOE,CAAAA,KAAP,CAAeb,UACfW,QAAOG,CAAAA,GAAP,CAAad,UAAWe,CAAAA,KAAX,EACbJ,QAAOG,CAAAA,GAAIT,CAAAA,MAAX,CAAkB,KAAlB,CAAyBK,KAAzB,CACA,OAAOC,QA3BkB,CAJjC,CAkCAzC,OAAQ8C,CAAAA,OAAR,CAAkB9B,6BA9DgI;",
"sources":["node_modules/chrono-node/dist/locales/nl/parsers/NLMonthNameMiddleEndianParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameMiddleEndianParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst years_1 = require(\"../../../calculation/years\");\nconst constants_1 = require(\"../constants\");\nconst constants_2 = require(\"../constants\");\nconst constants_3 = require(\"../constants\");\nconst pattern_1 = require(\"../../../utils/pattern\");\nconst AbstractParserWithWordBoundary_1 = require(\"../../../common/parsers/AbstractParserWithWordBoundary\");\nconst PATTERN = new RegExp(\"(?:on\\\\s*?)?\" +\n    `(${constants_2.ORDINAL_NUMBER_PATTERN})` +\n    \"(?:\\\\s*\" +\n    \"(?:tot|\\\\-|\\\\\u2013|until|through|till|\\\\s)\\\\s*\" +\n    `(${constants_2.ORDINAL_NUMBER_PATTERN})` +\n    \")?\" +\n    \"(?:-|/|\\\\s*(?:of)?\\\\s*)\" +\n    \"(\" +\n    pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY) +\n    \")\" +\n    \"(?:\" +\n    \"(?:-|/|,?\\\\s*)\" +\n    `(${constants_3.YEAR_PATTERN}(?![^\\\\s]\\\\d))` +\n    \")?\" +\n    \"(?=\\\\W|$)\", \"i\");\nconst MONTH_NAME_GROUP = 3;\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst YEAR_GROUP = 4;\nclass NLMonthNameMiddleEndianParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const month = constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = constants_2.parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n        const components = context.createParsingComponents({\n            day: day,\n            month: month,\n        });\n        if (match[YEAR_GROUP]) {\n            const year = constants_3.parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        }\n        else {\n            const year = years_1.findYearClosestToRef(context.refDate, day, month);\n            components.imply(\"year\", year);\n        }\n        if (!match[DATE_TO_GROUP]) {\n            return components;\n        }\n        const endDate = constants_2.parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n        const result = context.createParsingResult(match.index, match[0]);\n        result.start = components;\n        result.end = components.clone();\n        result.end.assign(\"day\", endDate);\n        return result;\n    }\n}\nexports.default = NLMonthNameMiddleEndianParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","years_1","constants_1","constants_2","constants_3","pattern_1","AbstractParserWithWordBoundary_1","PATTERN","RegExp","ORDINAL_NUMBER_PATTERN","matchAnyPattern","MONTH_DICTIONARY","YEAR_PATTERN","NLMonthNameMiddleEndianParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","month","MONTH_NAME_GROUP","toLowerCase","day","parseOrdinalNumberPattern","DATE_GROUP","index","length","components","createParsingComponents","YEAR_GROUP","year","parseYear","assign","findYearClosestToRef","refDate","imply","DATE_TO_GROUP","endDate","result","createParsingResult","start","end","clone","default"]
}
