{
"version":3,
"file":"module$node_modules$codemirror$mode$ttcn_cfg$ttcn_cfg.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/codemirror/mode/ttcn-cfg/ttcn-cfg.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$ttcn_cfg$ttcn_cfg\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"ttcn-cfg\", function(config, parserConfig) {\n    var indentUnit = config.indentUnit,\n        keywords = parserConfig.keywords || {},\n        fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions || {},\n        externalCommands = parserConfig.externalCommands || {},\n        multiLineStrings = parserConfig.multiLineStrings,\n        indentStatements = parserConfig.indentStatements !== false;\n    var isOperatorChar = /[\\|]/;\n    var curPunc;\n\n    function tokenBase(stream, state) {\n      var ch = stream.next();\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[:=]/.test(ch)) {\n        curPunc = ch;\n        return \"punctuation\";\n      }\n      if (ch == \"#\"){\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      if (ch == \"[\"){\n        stream.eatWhile(/[\\w_\\]]/);\n        return \"number sectionTitle\";\n      }\n\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n      if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))\n        return \"negative fileNCtrlMaskOptions\";\n      if (externalCommands.propertyIsEnumerable(cur)) return \"negative externalCommands\";\n\n      return \"variable\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped){\n            var afterNext = stream.peek();\n            //look if the character if the quote is like the B in '10100010'B\n            if (afterNext){\n              afterNext = afterNext.toLowerCase();\n              if(afterNext == \"b\" || afterNext == \"h\" || afterNext == \"o\")\n                stream.next();\n            }\n            end = true; break;\n          }\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = null;\n        return \"string\";\n      };\n    }\n\n    function Context(indented, column, type, align, prev) {\n      this.indented = indented;\n      this.column = column;\n      this.type = type;\n      this.align = align;\n      this.prev = prev;\n    }\n    function pushContext(state, col, type) {\n      var indent = state.indented;\n      if (state.context && state.context.type == \"statement\")\n        indent = state.context.indented;\n      return state.context = new Context(indent, col, type, null, state.context);\n    }\n    function popContext(state) {\n      var t = state.context.type;\n      if (t == \")\" || t == \"]\" || t == \"}\")\n        state.indented = state.context.indented;\n      return state.context = state.context.prev;\n    }\n\n    //Interface\n    return {\n      startState: function(basecolumn) {\n        return {\n          tokenize: null,\n          context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n          indented: 0,\n          startOfLine: true\n        };\n      },\n\n      token: function(stream, state) {\n        var ctx = state.context;\n        if (stream.sol()) {\n          if (ctx.align == null) ctx.align = false;\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        curPunc = null;\n        var style = (state.tokenize || tokenBase)(stream, state);\n        if (style == \"comment\") return style;\n        if (ctx.align == null) ctx.align = true;\n\n        if ((curPunc == \";\" || curPunc == \":\" || curPunc == \",\")\n            && ctx.type == \"statement\"){\n          popContext(state);\n        }\n        else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n        else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n        else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n        else if (curPunc == \"}\") {\n          while (ctx.type == \"statement\") ctx = popContext(state);\n          if (ctx.type == \"}\") ctx = popContext(state);\n          while (ctx.type == \"statement\") ctx = popContext(state);\n        }\n        else if (curPunc == ctx.type) popContext(state);\n        else if (indentStatements && (((ctx.type == \"}\" || ctx.type == \"top\")\n            && curPunc != ';') || (ctx.type == \"statement\"\n            && curPunc == \"newstatement\")))\n          pushContext(state, stream.column(), \"statement\");\n        state.startOfLine = false;\n        return style;\n      },\n\n      electricChars: \"{}\",\n      lineComment: \"#\",\n      fold: \"brace\"\n    };\n  });\n\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i)\n      obj[words[i]] = true;\n    return obj;\n  }\n\n  CodeMirror.defineMIME(\"text/x-ttcn-cfg\", {\n    name: \"ttcn-cfg\",\n    keywords: words(\"Yes No LogFile FileMask ConsoleMask AppendFile\" +\n    \" TimeStampFormat LogEventTypes SourceInfoFormat\" +\n    \" LogEntityName LogSourceInfo DiskFullAction\" +\n    \" LogFileNumber LogFileSize MatchingHints Detailed\" +\n    \" Compact SubCategories Stack Single None Seconds\" +\n    \" DateTime Time Stop Error Retry Delete TCPPort KillTimer\" +\n    \" NumHCs UnixSocketsEnabled LocalAddress\"),\n    fileNCtrlMaskOptions: words(\"TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING\" +\n    \" TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP\" +\n    \" TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION\" +\n    \" TTCN_USER TTCN_FUNCTION TTCN_STATISTICS\" +\n    \" TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG\" +\n    \" EXECUTOR ERROR WARNING PORTEVENT TIMEROP\" +\n    \" VERDICTOP DEFAULTOP TESTCASE ACTION USER\" +\n    \" FUNCTION STATISTICS PARALLEL MATCHING DEBUG\" +\n    \" LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED\" +\n    \" DEBUG_ENCDEC DEBUG_TESTPORT\" +\n    \" DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE\" +\n    \" DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT\" +\n    \" DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED\" +\n    \" EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA\" +\n    \" EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS\" +\n    \" EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED\" +\n    \" FUNCTION_RND FUNCTION_UNQUALIFIED\" +\n    \" MATCHING_DONE MATCHING_MCSUCCESS\" +\n    \" MATCHING_MCUNSUCC MATCHING_MMSUCCESS\" +\n    \" MATCHING_MMUNSUCC MATCHING_PCSUCCESS\" +\n    \" MATCHING_PCUNSUCC MATCHING_PMSUCCESS\" +\n    \" MATCHING_PMUNSUCC MATCHING_PROBLEM\" +\n    \" MATCHING_TIMEOUT MATCHING_UNQUALIFIED\" +\n    \" PARALLEL_PORTCONN PARALLEL_PORTMAP\" +\n    \" PARALLEL_PTC PARALLEL_UNQUALIFIED\" +\n    \" PORTEVENT_DUALRECV PORTEVENT_DUALSEND\" +\n    \" PORTEVENT_MCRECV PORTEVENT_MCSEND\" +\n    \" PORTEVENT_MMRECV PORTEVENT_MMSEND\" +\n    \" PORTEVENT_MQUEUE PORTEVENT_PCIN\" +\n    \" PORTEVENT_PCOUT PORTEVENT_PMIN\" +\n    \" PORTEVENT_PMOUT PORTEVENT_PQUEUE\" +\n    \" PORTEVENT_STATE PORTEVENT_UNQUALIFIED\" +\n    \" STATISTICS_UNQUALIFIED STATISTICS_VERDICT\" +\n    \" TESTCASE_FINISH TESTCASE_START\" +\n    \" TESTCASE_UNQUALIFIED TIMEROP_GUARD\" +\n    \" TIMEROP_READ TIMEROP_START TIMEROP_STOP\" +\n    \" TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED\" +\n    \" USER_UNQUALIFIED VERDICTOP_FINAL\" +\n    \" VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT\" +\n    \" VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED\"),\n    externalCommands: words(\"BeginControlPart EndControlPart BeginTestCase\" +\n    \" EndTestCase\"),\n    multiLineStrings: true\n  });\n});\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","words","str","obj","split","i","length","defineMode","config","parserConfig","tokenBase","stream","state","ch","next","tokenize","tokenString","test","curPunc","skipToEnd","eatWhile","isOperatorChar","cur","current","keywords","propertyIsEnumerable","fileNCtrlMaskOptions","externalCommands","quote","escaped","end","afterNext","peek","toLowerCase","multiLineStrings","Context","indented","column","type","align","prev","pushContext","col","indent","context","popContext","t","indentUnit","indentStatements","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","electricChars","lineComment","fold","defineMIME","name"]
}
