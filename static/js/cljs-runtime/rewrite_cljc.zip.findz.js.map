{"version":3,"sources":["rewrite_cljc/zip/findz.cljc"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","rewrite-cljc.zip.findz/tag-predicate","p__78819","vec__78820","cljs.core.nth","seq78817","G__78818","cljs.core/first","cljs.core/next","self__5751__auto__","t","additional","p1__78811#","node","and__5041__auto__","cljs.core._EQ_","rewrite-cljc.zip.base/tag","rewrite-cljc.zip.findz/position-in-range?","zloc","pos","vec__78832","r","c","cljs.core/map?","cljs.core.ex_info","vec__78837","vec__78840","vec__78843","zstart-row","zstart-col","zend-row","zend-col","rewrite-cljc.custom-zipper.core/position-span","G__78848","rewrite-cljc.zip.findz/find","js/Error","p?","rewrite_cljc.zip.findz.find","rewrite-cljc.zip.move/right","f","cljs.core/iterate","cljs.core.take_while","cljs.core/identity","cljs.core/complement","rewrite-cljc.zip.move/end?","cljs.core.drop_while","G__78851","rewrite-cljc.zip.findz/find-last-by-pos","rewrite_cljc.zip.findz.find_last_by_pos","cljs.core/constantly","rewrite-cljc.custom-zipper.core/next","p1__78849#","cljs.core.filter","cljs.core/last","rewrite-cljc.zip.findz/find-depth-first","rewrite-cljc.zip.move/next","G__78853","rewrite-cljc.zip.findz/find-next","rewrite_cljc.zip.findz.find_next","G__78854","rewrite-cljc.zip.findz/find-next-depth-first","G__78857","rewrite-cljc.zip.findz/find-tag","rewrite_cljc.zip.findz.find_tag","p1__78855#","G__78859","rewrite-cljc.zip.findz/find-next-tag","rewrite_cljc.zip.findz.find_next_tag","rewrite-cljc.zip.findz/find-tag-by-pos","p1__78860#","G__78862","rewrite-cljc.zip.findz/find-token","rewrite_cljc.zip.findz.find_token","rewrite_cljc.zip.findz.tag_predicate","G__78864","rewrite-cljc.zip.findz/find-next-token","rewrite_cljc.zip.findz.find_next_token","G__78867","rewrite-cljc.zip.findz/find-value","v","rewrite_cljc.zip.findz.find_value","p1__78865#","cljs.core/set?","cljs.core.comp","rewrite-cljc.zip.base/sexpr","G__78869","rewrite-cljc.zip.findz/find-next-value","rewrite_cljc.zip.findz.find_next_value"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.findz\n  (:refer-clojure :exclude [find])\n  (:require [rewrite-cljc.custom-zipper.core :as z]\n            [rewrite-cljc.zip.base :as base]\n            [rewrite-cljc.zip.move :as m]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Helpers\n\n(defn- tag-predicate\n  [t & [additional]]\n  (if additional\n    (fn [node]\n      (and (= (base/tag node) t)\n           (additional node)))\n    #(= (base/tag %) t)))\n\n(defn- position-in-range? [zloc pos]\n  (let [[r c] (if (map? pos) [(:row pos) (:col pos)] pos)]\n    (when (or (<= r 0) (<= c 0))\n      (throw (ex-info \"zipper row and col positions are ones-based\" {:pos pos})))\n    (let [[[zstart-row zstart-col][zend-row zend-col]] (z/position-span zloc)]\n      (and (>= r zstart-row)\n           (<= r zend-row)\n           (if (= r zstart-row) (>= c zstart-col) true)\n           (if (= r zend-row) (< c zend-col) true)))))\n\n;; ## Find Operations\n\n(defn find\n  \"Return the first node satisfying predicate `p?` seaching from the current node\n   in `zloc` traversing by function `f`.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc p?]\n   (find zloc m/right p?))\n  ([zloc f p?]\n   (->> zloc\n        (iterate f)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (drop-while (complement p?))\n        (first))))\n\n(defn find-last-by-pos\n  \"Return the last node spanning position `pos` that satisfies predicate `p?`\n   searching depth-first from the current node in `zloc`.\n\n  NOTE: Does not ignore whitespace/comment nodes.\"\n  ([zloc pos] (find-last-by-pos zloc pos (constantly true)))\n  ([zloc pos p?]\n   (->> zloc\n        (iterate z/next)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (filter #(and (p? %)\n                      (position-in-range? % pos)))\n        last)))\n\n(defn find-depth-first\n  \"Return first node satisfying predicate `p?` searching depth-first from\n   the current node in `zloc`.\"\n  [zloc p?]\n  (find zloc m/next p?))\n\n(defn find-next\n  \"Return the first node satisfying predicate `p?` searching one movement `f` from the current\n   node in `zloc` traversing by function `f`.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc p?]\n   (find-next zloc m/right p?))\n  ([zloc f p?]\n   (some-> zloc f (find f p?))))\n\n(defn find-next-depth-first\n  \"Return the first node satisfying predicate `p?` searching depth-first from one\n   node after the current node in `zloc`\"\n  [zloc p?]\n  (find-next zloc m/next p?))\n\n(defn find-tag\n  \"Return the first node with tag `t` searching from the current node in `zloc` traversing by\n   function `f`.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc t]\n   (find-tag zloc m/right t))\n  ([zloc f t]\n   (find zloc f #(= (base/tag %) t))))\n\n(defn find-next-tag\n  \"Return the first node with tag `t` searching one movement `f` from the current\n   node in `zloc` traversing by function `f`.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc t]\n   (find-next-tag zloc m/right t))\n  ([zloc f t]\n   (->> (tag-predicate t)\n        (find-next zloc f))))\n\n(defn find-tag-by-pos\n  \"Return the last node spanning position `pos` with tag `t` searching depth-first from the current node in `zloc`.\"\n  ([zloc pos t]\n   (find-last-by-pos zloc pos #(= (base/tag %) t))))\n\n(defn find-token\n  \"Return the first token node satisfying predicate `p?` searching from the current node in `zloc` traversing\n   by function `f`.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc p?]\n   (find-token zloc m/right p?))\n  ([zloc f p?]\n   (->> (tag-predicate :token p?)\n        (find zloc f))))\n\n(defn find-next-token\n  \"Return the first token node satisfying predicate `p?` searching from the current node in `zloc` traversing\n   by function `f`.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc p?]\n   (find-next-token zloc m/right p?))\n  ([zloc f p?]\n   (find-token (f zloc) f p?)))\n\n(defn find-value\n  \"Return the first token node with value `v` searching one movement `f` from the current node in `zloc` traversing\n   by function `f`.\n\n   `v` can be a single value or a set. When `v` is a set matches on any value in set.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc v]\n   (find-value zloc m/right v))\n  ([zloc f v]\n   (let [p? (if (set? v)\n              (comp v base/sexpr)\n              #(= (base/sexpr %) v))]\n     (find-token zloc f p?))))\n\n(defn find-next-value\n  \"Return the first token node with value `v` searching one movement `f` from the current node in `zloc` traversing\n   by function `f`.\n\n   `v` can be a single value or a set. When `v` is a set matches on any value in set.\n\n   `f` defaults to [[rewrite-cljc.zip/right]]\"\n  ([zloc v]\n   (find-next-value zloc m/right v))\n  ([zloc f v]\n   (find-value (f zloc) f v)))\n"]}