{"version":3,"sources":["frontend/commands.cljs"],"mappings":"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","names":["js/frontend","js/frontend.commands","js/frontend.commands.*show-commands","frontend.commands/*show-commands","cljs.core.atom","js/frontend.commands.*slash-caret-pos","frontend.commands/*slash-caret-pos","js/frontend.commands.*show-block-commands","frontend.commands/*show-block-commands","js/frontend.commands.angle-bracket","frontend.commands/angle-bracket","js/frontend.commands.*angle-bracket-caret-pos","frontend.commands/*angle-bracket-caret-pos","js/frontend.commands.*current-command","frontend.commands/*current-command","frontend.commands/query-doc","e","frontend.commands/link-steps","frontend.state.get_editor_command_trigger","frontend.commands/image-link-steps","frontend.commands/zotero-steps","frontend.commands/*extend-slash-commands","frontend.commands/register-slash-command","cmd","cljs.core.swap_BANG_","cljs.core/conj","frontend.commands/->marker","marker","frontend.commands/->priority","priority","frontend.commands/->inline","type","template","frontend.util.format","frontend.commands/embed-page","cljs.core.conj","frontend.commands/embed-block","frontend.commands/get-preferred-workflow","workflow","frontend.state/get-preferred-workflow","cljs.core._EQ_","frontend.commands/->heading","heading","frontend.commands/markdown-headings","format","frontend.state.get_preferred_format","cljs.core/name","cljs.core.mapv","level","cljs.core.apply","cljs.core/str","cljs.core.repeat","cljs.core.range","js/frontend.commands.*matched-commands","frontend.commands/*matched-commands","js/frontend.commands.*initial-commands","frontend.commands/*initial-commands","js/frontend.commands.*first-command-group","frontend.commands/*first-command-group","var_args","G__49337","frontend.commands/->block","js/Error","frontend.commands.__GT_block","optional","vec__49338","cljs.core.nth","cljs.core.get","frontend.state/get-edit-block","markdown-src?","clojure.string/lower-case","left","right","p1__49335#","cljs.core.map","clojure.string/upper-case","backward-pos","cljs.core/count","frontend.commands/->properties","frontend.commands/block-commands-map","cljs.core.concat","frontend.state/get-commands","cljs.core.remove","cljs.core/nil?","frontend.util/distinct-by-last-wins","cljs.core/first","frontend.commands/commands-map","get-page-ref-text","cljs.core/deref","frontend.state/markdown?","and__5041__auto__","frontend.util/electron?","frontend.config/local-db?","frontend.state/get-current-repo","frontend.state/deprecated-logged?","G__49341","frontend.date/tomorrow","G__49342","frontend.date/yesterday","G__49343","frontend.date/today","frontend.date/get-current-time","file","frontend.handler.draw/file-name","path","logseq.graph-parser.config/default-draw-directory","text","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","_","frontend.handler.draw/create-draw-with-default-content","cljs.core.println","frontend.state/get-plugins-commands","frontend.commands/init-commands!","commands","cljs.core/reset!","js/frontend.commands.*matched-block-commands","frontend.commands/*matched-block-commands","frontend.commands/restore-state","restore-slash-caret-pos?","p__49344","map__49345","cljs.core/--destructure-map","frontend.commands/insert!","id","value","last-pattern","postfix-fn","forward-pos","end-pattern","backward-truncate-number","_option","temp__5720__auto__","input","goog.dom/getElement","or__5043__auto__","edit-content","frontend.commands.goog$module$goog$object.get","current-pos","frontend.util.cursor/pos","i","clojure.string.index_of","logseq.graph_parser.util.safe_subs","orig-prefix","cljs.core.subs","space?","s","last-index","clojure.string.last_index_of","cljs.core/not","clojure.string/ends-with?","clojure.string/starts-with?","prefix","cljs.core/integer?","clojure.string/blank?","frontend.util/concat-without-spaces","frontend.util.replace_last","postfix","new-value","new-pos","frontend.state/set-block-content-and-last-pos!","frontend.util.cursor/move-cursor-to","cljs.core.not_EQ_","p__49346","map__49347","frontend.commands/simple-insert!","check-fn","G__49348","G__49349","G__49350","p__49351","map__49352","frontend.commands/simple-replace!","selected","selected?","clojure.string/replace-first","G__49353","G__49354","frontend.commands/delete-pair!","G__49356","frontend.commands/get-matched-commands","frontend.commands.get_matched_commands","frontend.search.fuzzy_search","js/frontend.commands.handle-step","method-table__5639__auto__","prefer-table__5640__auto__","method-cache__5641__auto__","cached-hierarchy__5642__auto__","hierarchy__5643__auto__","fexpr__49357","cljs.core/MultiFn","cljs.core.symbol","frontend.commands/handle-step","p__49358","vec__49359","map__49362","event","pid","uuid","payload","frontend.handler.plugin.hook_plugin_editor","cljs.core.merge","p__49363","vec__49364","option","input-id","frontend.state/get-edit-input-id","beginning-of-line?","frontend.util.cursor/beginning-of-line?","cljs.core/contains?","p__49367","vec__49368","n","current-input","frontend.util.cursor.move_cursor_backward","p__49371","vec__49372","frontend.util.cursor.move_cursor_forward","p__49375","vec__49376","frontend.util.cursor/move-cursor-to-end","p__49379","vec__49380","frontend.state/get-editor-last-pos","p__49383","vec__49384","cljs.core/boolean","p__49387","vec__49388","frontend.commands/compute-pos-delta-when-change-marker","pos","old-marker","G__49391","frontend.util/safe-re-find","frontend.util.marker/bare-marker-pattern","clojure.string/trim","pos-delta","x__5128__auto__","y__5129__auto__","p__49392","vec__49393","vec__49396","slash-pos","re-pattern","new-line-re-pattern","temp__5718__auto__","matches","cljs.core/seq","frontend.util/re-pos","vec__49399","start-pos","content","cljs.core/last","frontend.util.marker/marker-pattern","frontend.state.set_edit_content_BANG_","js/setTimeout","p__49402","vec__49403","_format","G__49406","frontend.db/get-page-format","frontend.state/get-current-page","new-priority","frontend.util.priority/add-or-update-priority","p__49407","vec__49408","G__49411","frontend.util.property.insert_property","p__49412","vec__49413","G__49416","frontend.util.property/goto-properties-end","p__49417","vec__49418","heading-pattern","clojure.string/triml","p__49421","vec__49422","frontend.state/set-editor-show-page-search!","p__49425","vec__49426","frontend.state/set-editor-show-page-search-hashtag!","p__49429","vec__49430","_type","frontend.state/set-editor-show-block-search!","p__49433","vec__49434","frontend.state/set-editor-show-template-search!","p__49437","vec__49438","frontend.state/set-editor-show-input!","p__49441","vec__49442","frontend.state/set-editor-show-zotero!","frontend.commands/insert-youtube-timestamp","macro","frontend.extensions.video.youtube/gen-youtube-ts-macro","frontend.util/insert-at-current-position!","p__49445","vec__49446","p__49449","vec__49450","frontend.state/get-input","frontend.handler.notification.show_BANG_","frontend.state/set-editor-show-date-picker!","p__49453","vec__49454","_input-id","input-file","p__49457","vec__49458","seq__49459","first__49460","cljs.core/next","_args","cljs.core.prn","frontend.commands/handle-steps","vector","seq__49461","chunk__49462","count__49463","i__49464","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","step","p__49465","map__49466","frontend.commands/exec-plugin-simple-command!","block-id","action","frontend.db.utils.pull","inputs","cljs.core/PersistentVector","cljs.core.assoc"],"sourcesContent":["(ns frontend.commands\n  (:require [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.db.utils :as db-util]\n            [frontend.handler.draw :as draw]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.plugin :as plugin-handler]\n            [frontend.extensions.video.youtube :as youtube]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [frontend.util.marker :as marker]\n            [frontend.util.priority :as priority]\n            [frontend.util.property :as property]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [promesa.core :as p]))\n\n;; TODO: move to frontend.handler.editor.commands\n\n(defonce *show-commands (atom false))\n(defonce *slash-caret-pos (atom nil))\n(defonce *show-block-commands (atom false))\n(defonce angle-bracket \"<\")\n(defonce *angle-bracket-caret-pos (atom nil))\n(defonce *current-command (atom nil))\n\n(def query-doc\n  [:div {:on-mouse-down (fn [e] (.stopPropagation e))}\n   [:div.font-medium.text-lg.mb-2 \"Query examples:\"]\n   [:ul.mb-1\n    [:li.mb-1 [:code \"{{query #tag}}\"]]\n    [:li.mb-1 [:code \"{{query [[page]]}}\"]]\n    [:li.mb-1 [:code \"{{query \\\"full-text search\\\"}}\"]]\n    [:li.mb-1 [:code \"{{query (and [[project]] (task NOW LATER))}}\"]]\n    [:li.mb-1 [:code \"{{query (or [[page 1]] [[page 2]])}}\"]]\n    [:li.mb-1 [:code \"{{query (and (between -7d +7d) (task DONE))}}\"]]\n    [:li.mb-1 [:code \"{{query (property key value)}}\"]]\n    [:li.mb-1 [:code \"{{query (page-tags #tag)}}\"]]]\n\n   [:p \"Check more examples at \"\n    [:a {:href \"https://docs.logseq.com/#/page/queries\"\n         :target \"_blank\"}\n     \"Queries documentation\"]\n    \".\"]])\n\n(defn link-steps []\n  [[:editor/input (str (state/get-editor-command-trigger) \"link\")]\n   [:editor/show-input [{:command :link\n                         :id :link\n                         :placeholder \"Link\"\n                         :autoFocus true}\n                        {:command :link\n                         :id :label\n                         :placeholder \"Label\"}]]])\n\n(defn image-link-steps []\n  [[:editor/input (str (state/get-editor-command-trigger) \"link\")]\n   [:editor/show-input [{:command :image-link\n                         :id :link\n                         :placeholder \"Link\"\n                         :autoFocus true}\n                        {:command :image-link\n                         :id :label\n                         :placeholder \"Label\"}]]])\n\n(defn zotero-steps []\n  [[:editor/input (str (state/get-editor-command-trigger) \"zotero\")]\n   [:editor/show-zotero]])\n\n(def *extend-slash-commands (atom []))\n\n(defn register-slash-command [cmd]\n  (swap! *extend-slash-commands conj cmd))\n\n(defn ->marker\n  [marker]\n  [[:editor/clear-current-slash]\n   [:editor/set-marker marker]\n   [:editor/move-cursor-to-end]])\n\n(defn ->priority\n  [priority]\n  [[:editor/clear-current-slash]\n   [:editor/set-priority priority]\n   [:editor/move-cursor-to-end]])\n\n(defn ->inline\n  [type]\n  (let [template (util/format \"@@%s: @@\"\n                              type)]\n    [[:editor/input template {:last-pattern (state/get-editor-command-trigger)\n                              :backward-pos 2}]]))\n\n(defn embed-page\n  []\n  (conj\n   [[:editor/input \"{{embed [[]]}}\" {:last-pattern (state/get-editor-command-trigger)\n                                     :backward-pos 4}]]\n   [:editor/search-page :embed]))\n\n(defn embed-block\n  []\n  [[:editor/input \"{{embed (())}}\" {:last-pattern (state/get-editor-command-trigger)\n                                    :backward-pos 4}]\n   [:editor/search-block :embed]])\n\n(defn get-preferred-workflow\n  []\n  (let [workflow (state/get-preferred-workflow)]\n    (if (= :now workflow)\n      [[\"LATER\" (->marker \"LATER\")]\n       [\"NOW\" (->marker \"NOW\")]\n       [\"TODO\" (->marker \"TODO\")]\n       [\"DOING\" (->marker \"DOING\")]]\n      [[\"TODO\" (->marker \"TODO\")]\n       [\"DOING\" (->marker \"DOING\")]\n       [\"LATER\" (->marker \"LATER\")]\n       [\"NOW\" (->marker \"NOW\")]])))\n\n;; Credits to roamresearch.com\n\n(defn- ->heading\n  [heading]\n  [[:editor/clear-current-slash]\n   [:editor/set-heading heading]\n   [:editor/move-cursor-to-end]])\n\n(defn- markdown-headings\n  []\n  (let [format (state/get-preferred-format)]\n    (when (= (name format) \"markdown\")\n      (mapv (fn [level]\n              (let [heading (str \"h\" level)]\n                [heading (->heading (apply str (repeat level \"#\")))])) (range 1 7)))))\n\n(defonce *matched-commands (atom nil))\n(defonce *initial-commands (atom nil))\n\n(defonce *first-command-group\n  {\"Page reference\" \"BASIC\"\n   \"Tomorrow\" \"TIME & DATE\"\n   \"LATER\" \"TASK\"\n   \"A\" \"PRIORITY\"\n   \"Query\" \"ADVANCED\"\n   \"Quote\" \"ORG-MODE\"})\n\n(defn ->block\n  ([type]\n   (->block type nil))\n  ([type optional]\n   (let [format (get (state/get-edit-block) :block/format)\n         markdown-src? (and (= format :markdown)\n                       (= (string/lower-case type) \"src\"))\n         [left right] (cond\n                        markdown-src?\n                        [\"```\" \"\\n```\"]\n\n                        :else\n                        (->> [\"#+BEGIN_%s\" \"\\n#+END_%s\"]\n                             (map #(util/format %\n                                                (string/upper-case type)))))\n         template (str\n                   left\n                   (if optional (str \" \" optional) \"\")\n                   \"\\n\"\n                   right)\n         backward-pos (if (= type \"src\")\n                        (+ 1 (count right))\n                        (count right))]\n     [[:editor/input template {:type \"block\"\n                               :last-pattern angle-bracket\n                               :backward-pos backward-pos}]])))\n\n(defn ->properties\n  []\n  [[:editor/clear-current-bracket]\n   [:editor/insert-properties]\n   [:editor/move-cursor-to-properties]])\n\n;; https://orgmode.org/manual/Structure-Templates.html\n(defn block-commands-map\n  []\n  (->>\n   (concat\n    [[\"Quote\" (->block \"quote\")]\n     [\"Src\" (->block \"src\" \"\")]\n     [\"Query\" (->block \"query\")]\n     [\"Latex export\" (->block \"export\" \"latex\")]\n     ;; FIXME: current page's format\n     (when (= :org (state/get-preferred-format))\n       [\"Properties\" (->properties)])\n     [\"Note\" (->block \"note\")]\n     [\"Tip\" (->block \"tip\")]\n     [\"Important\" (->block \"important\")]\n     [\"Caution\" (->block \"caution\")]\n     [\"Pinned\" (->block \"pinned\")]\n     [\"Warning\" (->block \"warning\")]\n     [\"Example\" (->block \"example\")]\n     [\"Export\" (->block \"export\")]\n     [\"Verse\" (->block \"verse\")]\n     [\"Ascii\" (->block \"export\" \"ascii\")]\n     [\"Center\" (->block \"center\")]\n     [\"Comment\" (->block \"comment\")]]\n\n    ;; Allow user to modify or extend, should specify how to extend.\n    (state/get-commands))\n   (remove nil?)\n   (util/distinct-by-last-wins first)))\n\n(defn commands-map\n  [get-page-ref-text]\n  (->>\n   (concat\n    ;; basic\n    [[\"Page reference\" [[:editor/input \"[[]]\" {:backward-pos 2}]\n                        [:editor/search-page]] \"Create a backlink to a page\"]\n     [\"Page embed\" (embed-page) \"Embed a page here\"]\n     [\"Block reference\" [[:editor/input \"(())\" {:backward-pos 2}]\n                         [:editor/search-block :reference]] \"Create a backlink to a block\"]\n     [\"Block embed\" (embed-block) \"Embed a block here\" \"Embed a block here\"]\n     [\"Link\" (link-steps) \"Create a HTTP link\"]\n     [\"Image link\" (image-link-steps) \"Create a HTTP link to a image\"]\n     (when (state/markdown?)\n       [\"Underline\" [[:editor/input \"<ins></ins>\"\n                      {:last-pattern (state/get-editor-command-trigger)\n                       :backward-pos 6}]] \"Create a underline text decoration\"])\n     [\"Template\" [[:editor/input (state/get-editor-command-trigger) nil]\n                  [:editor/search-template]] \"Insert a created template here\"]\n     (cond\n       (and (util/electron?) (config/local-db? (state/get-current-repo)))\n\n       [\"Upload an asset\" [[:editor/click-hidden-file-input :id]] \"Upload file types like image, pdf, docx, etc.)\"]\n\n       (state/deprecated-logged?)\n       [\"Upload an image\" [[:editor/click-hidden-file-input :id]]]\n       )]\n\n    (markdown-headings)\n\n    ;; time & date\n\n    [[\"Tomorrow\" #(get-page-ref-text (date/tomorrow)) \"Insert the date of tomorrow\"]\n     [\"Yesterday\" #(get-page-ref-text (date/yesterday)) \"Insert the date of yesterday\"]\n     [\"Today\" #(get-page-ref-text (date/today)) \"Insert the date of today\"]\n     [\"Current time\" #(date/get-current-time) \"Insert current time\"]\n     [\"Date picker\" [[:editor/show-date-picker]] \"Pick a date and insert here\"]]\n\n    ;; task management\n    (get-preferred-workflow)\n\n    [[\"DONE\" (->marker \"DONE\")]\n     [\"WAITING\" (->marker \"WAITING\")]\n     [\"CANCELED\" (->marker \"CANCELED\")]\n     [\"Deadline\" [[:editor/clear-current-slash]\n                  [:editor/show-date-picker :deadline]]]\n     [\"Scheduled\" [[:editor/clear-current-slash]\n                   [:editor/show-date-picker :scheduled]]]]\n\n    ;; priority\n    [[\"A\" (->priority \"A\")]\n     [\"B\" (->priority \"B\")]\n     [\"C\" (->priority \"C\")]]\n\n    ;; advanced\n\n    [[\"Query\" [[:editor/input \"{{query }}\" {:backward-pos 2}]] query-doc]\n     [\"Zotero\" (zotero-steps) \"Import Zotero journal article\"]\n     [\"Query table function\" [[:editor/input \"{{function }}\" {:backward-pos 2}]] \"Create a query table function\"]\n     [\"Calculator\" [[:editor/input \"```calc\\n\\n```\" {:backward-pos 4}]\n                    [:codemirror/focus]] \"Insert a calculator\"]\n     [\"Draw\" (fn []\n               (let [file (draw/file-name)\n                     path (str gp-config/default-draw-directory \"/\" file)\n                     text (util/format \"[[%s]]\" path)]\n                 (p/let [_ (draw/create-draw-with-default-content path)]\n                   (println \"draw file created, \" path))\n                 text)) \"Draw a graph with Excalidraw\"]\n     \n     [\"Embed HTML \" (->inline \"html\")]\n\n     [\"Embed Video URL\" [[:editor/input \"{{video }}\" {:last-pattern (state/get-editor-command-trigger)\n                                                    :backward-pos 2}]]]\n\n     [\"Embed Youtube timestamp\" [[:youtube/insert-timestamp]]]\n\n     [\"Embed Twitter tweet\" [[:editor/input \"{{tweet }}\" {:last-pattern (state/get-editor-command-trigger)\n                                                          :backward-pos 2}]]]]\n\n    @*extend-slash-commands\n    ;; Allow user to modify or extend, should specify how to extend.\n\n    (state/get-commands)\n    (state/get-plugins-commands))\n   (remove nil?)\n   (util/distinct-by-last-wins first)))\n\n(defn init-commands!\n  [get-page-ref-text]\n  (let [commands (commands-map get-page-ref-text)]\n    (reset! *initial-commands commands)\n    (reset! *matched-commands commands)))\n\n(defonce *matched-block-commands (atom (block-commands-map)))\n\n(defn restore-state\n  [restore-slash-caret-pos?]\n  (when restore-slash-caret-pos?\n    (reset! *slash-caret-pos nil))\n  (reset! *show-commands false)\n  (reset! *angle-bracket-caret-pos nil)\n  (reset! *show-block-commands false)\n  (reset! *matched-commands @*initial-commands)\n  (reset! *matched-block-commands (block-commands-map)))\n\n(defn insert!\n  [id value\n   {:keys [last-pattern postfix-fn backward-pos forward-pos end-pattern backward-truncate-number]\n    :as _option}]\n  (when-let [input (gdom/getElement id)]\n    (let [last-pattern (when-not backward-truncate-number\n                         (or last-pattern (state/get-editor-command-trigger)))\n          edit-content (gobj/get input \"value\")\n          current-pos (cursor/pos input)\n          current-pos (or\n                       (when (and end-pattern (string? end-pattern))\n                         (when-let [i (string/index-of (gp-util/safe-subs edit-content current-pos) end-pattern)]\n                           (+ current-pos i)))\n                       current-pos)\n          orig-prefix (subs edit-content 0 current-pos)\n          space? (when (and last-pattern orig-prefix)\n                   (let [s (when-let [last-index (string/last-index-of orig-prefix last-pattern)]\n                             (gp-util/safe-subs orig-prefix 0 last-index))]\n                     (not\n                      (or\n                       (and s\n                            (string/ends-with? s \"(\")\n                            (or (string/starts-with? last-pattern \"((\")\n                                (string/starts-with? last-pattern \"[[\")))\n                       (and s (string/starts-with? s \"{{embed\"))))))\n          space? (if (and space? (string/starts-with? last-pattern \"#[[\"))\n                   false\n                   space?)\n          prefix (cond\n                   (and backward-truncate-number (integer? backward-truncate-number))\n                   (str (gp-util/safe-subs orig-prefix 0 (- (count orig-prefix) backward-truncate-number))\n                        (when-not (zero? backward-truncate-number)\n                          value))\n\n                   (string/blank? last-pattern)\n                   (if space?\n                     (util/concat-without-spaces orig-prefix value)\n                     (str orig-prefix value))\n\n                   :else\n                   (util/replace-last last-pattern orig-prefix value space?))\n          postfix (subs edit-content current-pos)\n          postfix (if postfix-fn (postfix-fn postfix) postfix)\n          new-value (cond\n                      (string/blank? postfix)\n                      prefix\n\n                      space?\n                      (util/concat-without-spaces prefix postfix)\n\n                      :else\n                      (str prefix postfix))\n          new-pos (- (count prefix)\n                     (or backward-pos 0))]\n      (state/set-block-content-and-last-pos! id new-value new-pos)\n      (cursor/move-cursor-to input\n                             (if (and (or backward-pos forward-pos)\n                                      (not= end-pattern \"]]\"))\n                               new-pos\n                               (inc new-pos))))))\n\n(defn simple-insert!\n  [id value\n   {:keys [backward-pos forward-pos check-fn]\n    :as _option}]\n  (let [input (gdom/getElement id)\n        edit-content (gobj/get input \"value\")\n        current-pos (cursor/pos input)\n        prefix (subs edit-content 0 current-pos)\n        new-value (str prefix\n                       value\n                       (subs edit-content current-pos))\n        new-pos (- (+ (count prefix)\n                      (count value)\n                      (or forward-pos 0))\n                   (or backward-pos 0))]\n    (state/set-block-content-and-last-pos! id new-value new-pos)\n    (cursor/move-cursor-to input new-pos)\n    (when check-fn\n      (check-fn new-value (dec (count prefix)) new-pos))))\n\n(defn simple-replace!\n  [id value selected\n   {:keys [backward-pos forward-pos check-fn]\n    :as _option}]\n  (let [selected? (not (string/blank? selected))\n        input (gdom/getElement id)\n        edit-content (gobj/get input \"value\")\n        current-pos (cursor/pos input)\n        prefix (subs edit-content 0 current-pos)\n        postfix (if selected?\n                  (string/replace-first (subs edit-content current-pos)\n                                        selected\n                                        \"\")\n                  (subs edit-content current-pos))\n        new-value (str prefix value postfix)\n        new-pos (- (+ (count prefix)\n                      (count value)\n                      (or forward-pos 0))\n                   (or backward-pos 0))]\n    (state/set-block-content-and-last-pos! id new-value new-pos)\n    (cursor/move-cursor-to input new-pos)\n    (when selected?\n      (.setSelectionRange input new-pos (+ new-pos (count selected))))\n    (when check-fn\n      (check-fn new-value (dec (count prefix))))))\n\n(defn delete-pair!\n  [id]\n  (let [input (gdom/getElement id)\n        edit-content (gobj/get input \"value\")\n        current-pos (cursor/pos input)\n        prefix (subs edit-content 0 (dec current-pos))\n        new-value (str prefix\n                       (subs edit-content (inc current-pos)))\n        new-pos (count prefix)]\n    (state/set-block-content-and-last-pos! id new-value new-pos)\n    (cursor/move-cursor-to input new-pos)))\n\n(defn get-matched-commands\n  ([text]\n   (get-matched-commands text @*initial-commands))\n  ([text commands]\n   (search/fuzzy-search commands text\n                        :extract-fn first\n                        :limit 50)))\n\n(defmulti handle-step first)\n\n(defmethod handle-step :editor/hook [[_ event {:keys [pid uuid] :as payload}] format]\n  (plugin-handler/hook-plugin-editor event (merge payload {:format format :uuid (or uuid (:block/uuid (state/get-edit-block)))}) pid))\n\n(defmethod handle-step :editor/input [[_ value option]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (let [type (:type option)\n          input (gdom/getElement input-id)\n          beginning-of-line? (or (cursor/beginning-of-line? input)\n                                 (= 1 (:pos @*angle-bracket-caret-pos)))\n          value (if (and (contains? #{\"block\" \"properties\"} type)\n                         (not beginning-of-line?))\n                  (str \"\\n\" value)\n                  value)]\n      (insert! input-id value option)\n      (reset! *show-commands false))))\n\n(defmethod handle-step :editor/cursor-back [[_ n]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (cursor/move-cursor-backward current-input n))))\n\n(defmethod handle-step :editor/cursor-forward [[_ n]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (cursor/move-cursor-forward current-input n))))\n\n(defmethod handle-step :editor/move-cursor-to-end [[_]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (cursor/move-cursor-to-end current-input))))\n\n(defmethod handle-step :editor/restore-saved-cursor [[_]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (cursor/move-cursor-to current-input (state/get-editor-last-pos)))))\n\n(defmethod handle-step :editor/clear-current-slash [[_ space?]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (let [edit-content (gobj/get current-input \"value\")\n            current-pos (cursor/pos current-input)\n            prefix (subs edit-content 0 current-pos)\n            prefix (util/replace-last (state/get-editor-command-trigger) prefix \"\" (boolean space?))\n            new-value (str prefix\n                           (subs edit-content current-pos))]\n        (state/set-block-content-and-last-pos! input-id\n                                               new-value\n                                               (count prefix))))))\n\n(defmethod handle-step :editor/clear-current-bracket [[_ space?]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (let [edit-content (gobj/get current-input \"value\")\n            current-pos (cursor/pos current-input)\n            prefix (subs edit-content 0 current-pos)\n            prefix (util/replace-last angle-bracket prefix \"\" (boolean space?))\n            new-value (str prefix\n                           (subs edit-content current-pos))]\n        (state/set-block-content-and-last-pos! input-id\n                                               new-value\n                                               (count prefix))))))\n\n(defn compute-pos-delta-when-change-marker\n  [edit-content marker pos]\n  (let [old-marker (some->> (first (util/safe-re-find marker/bare-marker-pattern edit-content))\n                            (string/trim))\n        pos-delta (- (count marker)\n                     (count old-marker))\n        pos-delta (cond (string/blank? old-marker)\n                        (inc pos-delta)\n                        (string/blank? marker)\n                        (dec pos-delta)\n\n                        :else\n                        pos-delta)]\n    (max (+ pos pos-delta) 0)))\n\n(defmethod handle-step :editor/set-marker [[_ marker] format]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (let [edit-content (gobj/get current-input \"value\")\n            slash-pos (:pos @*slash-caret-pos)\n            [re-pattern new-line-re-pattern] (if (= :org format)\n                                               [#\"\\*+\\s\" #\"\\n\\*+\\s\"]\n                                               [#\"#+\\s\" #\"\\n#+\\s\"])\n            pos (let [prefix (subs edit-content 0 (dec slash-pos))]\n                  (if-let [matches (seq (util/re-pos new-line-re-pattern prefix))]\n                    (let [[start-pos content] (last matches)]\n                      (+ start-pos (count content)))\n                    (count (util/safe-re-find re-pattern prefix))))\n            new-value (str (subs edit-content 0 pos)\n                           (string/replace-first (subs edit-content pos)\n                                                 (marker/marker-pattern format)\n                                                 (str marker \" \")))]\n        (state/set-edit-content! input-id new-value)\n        (let [new-pos (compute-pos-delta-when-change-marker\n                       edit-content marker (dec slash-pos))]\n          ;; TODO: any performance issue?\n          (js/setTimeout #(cursor/move-cursor-to current-input new-pos) 10))))))\n\n(defmethod handle-step :editor/set-priority [[_ priority] _format]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (let [format (or (db/get-page-format (state/get-current-page)) (state/get-preferred-format))\n            edit-content (gobj/get current-input \"value\")\n            new-priority (util/format \"[#%s]\" priority)\n            new-value (string/trim (priority/add-or-update-priority edit-content format new-priority))]\n        (state/set-edit-content! input-id new-value)))))\n\n(defmethod handle-step :editor/insert-properties [[_ _] _format]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n        (let [format (or (db/get-page-format (state/get-current-page)) (state/get-preferred-format))\n              edit-content (gobj/get current-input \"value\")\n              new-value (property/insert-property format edit-content \"\" \"\")]\n          (state/set-edit-content! input-id new-value)))))\n\n(defmethod handle-step :editor/move-cursor-to-properties [[_]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (let [format (or (db/get-page-format (state/get-current-page)) (state/get-preferred-format))]\n        (property/goto-properties-end format current-input)\n        (cursor/move-cursor-backward current-input 3)))))\n\n(defmethod handle-step :editor/set-heading [[_ heading]]\n  (when-let [input-id (state/get-edit-input-id)]\n    (when-let [current-input (gdom/getElement input-id)]\n      (let [edit-content (gobj/get current-input \"value\")\n            heading-pattern #\"^#+\\s+\"\n            new-value (cond\n                        (util/safe-re-find heading-pattern edit-content)\n                        (string/replace-first edit-content\n                                              heading-pattern\n                                              (str heading \" \"))\n                        :else\n                        (str heading \" \" (string/triml edit-content)))]\n        (state/set-edit-content! input-id new-value)))))\n\n(defmethod handle-step :editor/search-page [[_]]\n  (state/set-editor-show-page-search! true))\n\n(defmethod handle-step :editor/search-page-hashtag [[_]]\n  (state/set-editor-show-page-search-hashtag! true))\n\n(defmethod handle-step :editor/search-block [[_ _type]]\n  (state/set-editor-show-block-search! true))\n\n(defmethod handle-step :editor/search-template [[_]]\n  (state/set-editor-show-template-search! true))\n\n(defmethod handle-step :editor/show-input [[_ option]]\n  (state/set-editor-show-input! option))\n\n(defmethod handle-step :editor/show-zotero [[_]]\n  (state/set-editor-show-zotero! true))\n\n(defn insert-youtube-timestamp\n  []\n  (let [input-id (state/get-edit-input-id)\n        macro (youtube/gen-youtube-ts-macro)]\n    (when-let [input (gdom/getElement input-id)]\n      (when macro\n       (util/insert-at-current-position! input (str macro \" \"))))))\n\n(defmethod handle-step :youtube/insert-timestamp [[_]]\n  (let [input-id (state/get-edit-input-id)\n        macro (youtube/gen-youtube-ts-macro)]\n    (insert! input-id macro {})))\n\n(defmethod handle-step :editor/show-date-picker [[_ type]]\n  (if (and\n       (contains? #{:scheduled :deadline} type)\n       (when-let [value (gobj/get (state/get-input) \"value\")]\n         (string/blank? value)))\n    (do\n      (notification/show! [:div \"Please add some content first.\"] :warning)\n      (restore-state false))\n    (state/set-editor-show-date-picker! true)))\n\n(defmethod handle-step :editor/click-hidden-file-input [[_ _input-id]]\n  (when-let [input-file (gdom/getElement \"upload-file\")]\n    (.click input-file)))\n\n(defmethod handle-step :default [[type & _args]]\n  (prn \"No handler for step: \" type))\n\n(defn handle-steps\n  [vector format]\n  (doseq [step vector]\n    (handle-step step format)))\n\n(defn exec-plugin-simple-command!\n  [pid {:keys [block-id] :as cmd} action]\n  (let [format (and block-id (:block/format (db-util/pull [:block/uuid block-id])))\n        inputs (vector (conj action (assoc cmd :pid pid)))]\n    (handle-steps inputs format)))\n"]}