{
"version":3,
"file":"module$node_modules$codemirror$mode$dockerfile$dockerfile.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/dockerfile/dockerfile.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$dockerfile$dockerfile\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\n  var others = [\n    \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n    \"add\", \"copy\", \"volume\", \"user\",\n    \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n  ];\n\n  // Collect all Dockerfile directives\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n      // Block comment: This is a line starting with a comment\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: fromRegex,\n        token: [null, \"keyword\"],\n        sol: true,\n        next: \"from\"\n      },\n      // Highlight an instruction without any arguments (for convenience)\n      {\n        regex: instructionOnlyLine,\n        token: [null, \"keyword\", null, \"error\"],\n        sol: true\n      },\n      {\n        regex: shellsAsArrayRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"array\"\n      },\n      {\n        regex: exposeRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"expose\"\n      },\n      // Highlight an instruction followed by arguments\n      {\n        regex: instructionWithArguments,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"arguments\"\n      },\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    from: [\n      {\n        regex: /\\s*$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        // Line comment without instruction arguments is an error\n        regex: /(\\s*)(#.*)$/,\n        token: [null, \"error\"],\n        next: \"start\"\n      },\n      {\n        regex: /(\\s*\\S+\\s+)(as)/i,\n        token: [null, \"keyword\"],\n        next: \"start\"\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    single: [\n      {\n        regex: /(?:[^\\\\']|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    double: [\n      {\n        regex: /(?:[^\\\\\"]|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    array: [\n      {\n        regex: /\\]/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n        token: \"string\"\n      }\n    ],\n    expose: [\n      {\n        regex: /\\d+$/,\n        token: \"number\",\n        next: \"start\"\n      },\n      {\n        regex: /[^\\d]+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\\d+/,\n        token: \"number\"\n      },\n      {\n        regex: /[^\\d]+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    arguments: [\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        push: \"double\"\n      },\n      {\n        regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        push: \"single\"\n      },\n      {\n        regex: /[^#\"']+[\\\\`]$/,\n        token: null\n      },\n      {\n        regex: /[^#\"']+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /[^#\"']+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","fromRegex","RegExp","shells","shellsAsArrayRegex","join","exposeRegex","instructionRegex","from","expose","concat","instructions","others","defineSimpleMode","start","regex","sol","token","next","instructionOnlyLine","instructionWithArguments","single","pop","double","array","arguments","push","meta","lineComment","defineMIME"]
}
