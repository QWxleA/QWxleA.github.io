shadow$provide.module$node_modules$jsonfile$index=function(global,require,module,exports){let _fs;try{_fs=require("module$node_modules$graceful_fs$graceful_fs")}catch(_){_fs=require("shadow$empty")}const universalify=require("module$node_modules$universalify$index"),{stringify,stripBom}=require("module$node_modules$jsonfile$utils");global=universalify.fromPromise(async function(file,options={}){"string"===typeof options&&(options={encoding:options});const shouldThrow="throws"in options?options.throws:
!0;let data=await universalify.fromCallback((options.fs||_fs).readFile)(file,options);data=stripBom(data);let obj;try{obj=JSON.parse(data,options?options.reviver:null)}catch(err){if(shouldThrow)throw err.message=`${file}: ${err.message}`,err;return null}return obj});require=universalify.fromPromise(async function(file,obj,options={}){const fs=options.fs||_fs;obj=stringify(obj,options);await universalify.fromCallback(fs.writeFile)(file,obj,options)});module.exports={readFile:global,readFileSync:function(file,
options={}){"string"===typeof options&&(options={encoding:options});const fs=options.fs||_fs,shouldThrow="throws"in options?options.throws:!0;try{let content=fs.readFileSync(file,options);content=stripBom(content);return JSON.parse(content,options.reviver)}catch(err){if(shouldThrow)throw err.message=`${file}: ${err.message}`,err;return null}},writeFile:require,writeFileSync:function(file,obj,options={}){const fs=options.fs||_fs;obj=stringify(obj,options);return fs.writeFileSync(file,obj,options)}}}
//# sourceMappingURL=module$node_modules$jsonfile$index.js.map
