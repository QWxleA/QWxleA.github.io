{"version":3,"sources":["rewrite_cljc/zip.cljc"],"mappings":"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","names":["rewrite-cljc.zip/right","rewrite-cljc.zip/whitespace?","rewrite-cljc.zip/edn*","rewrite-cljc.zip/left","rewrite-cljc.zip/replace","rewrite-cljc.zip/seq?","rewrite-cljc.zip/linebreak?","rewrite-cljc.zip/down","rewrite-cljc.zip/prewalk","rewrite-cljc.zip/list?","rewrite-cljc.zip/up","rewrite-cljc.zip/edn","rewrite-cljc.zip/insert-right","rewrite-cljc.zip/vector?","rewrite-cljc.zip/edit","rewrite-cljc.zip/next","rewrite-cljc.zip/remove","rewrite-cljc.zip/find","rewrite-cljc.zip/set?","rewrite-cljc.zip/whitespace-or-comment?","rewrite-cljc.zip/edit-node","rewrite-cljc.zip/insert-left","rewrite-cljc.zip/map?","rewrite-cljc.zip/end?","rewrite-cljc.zip/splice","rewrite-cljc.zip/skip","rewrite-cljc.zip/tag","rewrite-cljc.zip/rightmost?","rewrite-cljc.zip/insert-child","rewrite-cljc.zip/find-last-by-pos","rewrite-cljc.zip/sexpr","rewrite-cljc.zip/leftmost?","rewrite-cljc.zip/skip-whitespace","rewrite-cljc.zip/postwalk","rewrite-cljc.zip/remove-preserve-newline","rewrite-cljc.zip/node","rewrite-cljc.zip/child-sexprs","rewrite-cljc.zip/append-child","rewrite-cljc.zip/prev","rewrite-cljc.zip/map-vals","rewrite-cljc.zip/subzip","rewrite-cljc.zip/skip-whitespace-left","rewrite-cljc.zip/length","rewrite-cljc.zip/find-depth-first","rewrite-cljc.zip/leftmost","rewrite-cljc.zip/value","rewrite-cljc.zip/subedit-node","rewrite-cljc.zip/insert-space-left","rewrite-cljc.zip/find-next","rewrite-cljc.zip/rightmost","rewrite-cljc.zip/of-string","rewrite-cljc.zip/map-keys","rewrite-cljc.zip/insert-space-right","rewrite-cljc.zip/position","rewrite-cljc.zip/prefix","rewrite-cljc.zip/find-next-depth-first","rewrite-cljc.zip/find-tag","rewrite-cljc.zip/insert-newline-left","rewrite-cljc.zip/map","rewrite-cljc.zip/position-span","rewrite-cljc.zip/suffix","rewrite-cljc.zip/insert-newline-right","rewrite-cljc.zip/find-next-tag","rewrite-cljc.zip/string","rewrite-cljc.zip/down*","rewrite-cljc.zip/get","rewrite-cljc.zip/root-string","rewrite-cljc.zip/prepend-space","rewrite-cljc.zip/find-tag-by-pos","rewrite-cljc.zip/append-space","rewrite-cljc.zip/find-token","rewrite-cljc.zip/prepend-newline","rewrite-cljc.zip/assoc","rewrite-cljc.zip/up*","rewrite-cljc.zip/print","rewrite-cljc.zip/append-newline","rewrite-cljc.zip/find-next-token","rewrite-cljc.zip/print-root","rewrite-cljc.zip/root","rewrite-cljc.zip/find-value","rewrite-cljc.zip/right*","rewrite-cljc.zip/find-next-value","rewrite-cljc.zip/rightmost*","rewrite-cljc.zip/left*","rewrite-cljc.custom-zipper.core/node","rewrite-cljc.custom-zipper.core/position","rewrite-cljc.custom-zipper.core/position-span","rewrite-cljc.custom-zipper.core/root","rewrite-cljc.zip.base/child-sexprs","rewrite-cljc.zip.base/edn*","rewrite-cljc.zip.base/edn","rewrite-cljc.zip.base/tag","rewrite-cljc.zip.base/sexpr","rewrite-cljc.zip.base/length","rewrite-cljc.zip.base/value","rewrite-cljc.zip.base/of-string","rewrite-cljc.zip.base/string","rewrite-cljc.zip.base/root-string","rewrite-cljc.zip.base/print","rewrite-cljc.zip.base/print-root","rewrite-cljc.zip.editz/replace","rewrite-cljc.zip.editz/edit","rewrite-cljc.zip.editz/splice","rewrite-cljc.zip.editz/prefix","rewrite-cljc.zip.editz/suffix","rewrite-cljc.zip.findz/find","rewrite-cljc.zip.findz/find-next","rewrite-cljc.zip.findz/find-depth-first","rewrite-cljc.zip.findz/find-next-depth-first","rewrite-cljc.zip.findz/find-tag","rewrite-cljc.zip.findz/find-next-tag","rewrite-cljc.zip.findz/find-value","rewrite-cljc.zip.findz/find-next-value","rewrite-cljc.zip.findz/find-token","rewrite-cljc.zip.findz/find-next-token","rewrite-cljc.zip.findz/find-last-by-pos","rewrite-cljc.zip.findz/find-tag-by-pos","rewrite-cljc.zip.insert/insert-right","rewrite-cljc.zip.insert/insert-left","rewrite-cljc.zip.insert/insert-child","rewrite-cljc.zip.insert/append-child","rewrite-cljc.zip.move/left","rewrite-cljc.zip.move/right","rewrite-cljc.zip.move/up","rewrite-cljc.zip.move/down","rewrite-cljc.zip.move/prev","rewrite-cljc.zip.move/next","rewrite-cljc.zip.move/leftmost","rewrite-cljc.zip.move/rightmost","rewrite-cljc.zip.move/leftmost?","rewrite-cljc.zip.move/rightmost?","rewrite-cljc.zip.move/end?","rewrite-cljc.zip.removez/remove","rewrite-cljc.zip.removez/remove-preserve-newline","rewrite-cljc.zip.seqz/seq?","rewrite-cljc.zip.seqz/list?","rewrite-cljc.zip.seqz/vector?","rewrite-cljc.zip.seqz/set?","rewrite-cljc.zip.seqz/map?","rewrite-cljc.zip.seqz/map","rewrite-cljc.zip.seqz/map-keys","rewrite-cljc.zip.seqz/map-vals","rewrite-cljc.zip.seqz/get","rewrite-cljc.zip.seqz/assoc","rewrite-cljc.zip.subedit/edit-node","rewrite-cljc.zip.subedit/subedit-node","rewrite-cljc.zip.subedit/subzip","rewrite-cljc.zip.walk/prewalk","rewrite-cljc.zip.walk/postwalk","rewrite-cljc.zip.whitespace/whitespace?","rewrite-cljc.zip.whitespace/linebreak?","rewrite-cljc.zip.whitespace/whitespace-or-comment?","rewrite-cljc.zip.whitespace/skip","rewrite-cljc.zip.whitespace/skip-whitespace","rewrite-cljc.zip.whitespace/skip-whitespace-left","rewrite-cljc.zip.whitespace/insert-space-left","rewrite-cljc.zip.whitespace/insert-space-right","rewrite-cljc.zip.whitespace/insert-newline-left","rewrite-cljc.zip.whitespace/insert-newline-right","rewrite-cljc.zip.whitespace/prepend-space","rewrite-cljc.zip.whitespace/append-space","rewrite-cljc.zip.whitespace/prepend-newline","rewrite-cljc.zip.whitespace/append-newline","rewrite-cljc.zip/leftmost*","rewrite-cljc.zip/insert-left*","rewrite-cljc.zip/insert-right*","rewrite-cljc.zip/replace*","rewrite-cljc.zip/edit*","rewrite-cljc.zip/insert-child*","rewrite-cljc.zip/append-child*","rewrite-cljc.zip/next*","rewrite-cljc.custom-zipper.core/right","rewrite-cljc.custom-zipper.core/left","rewrite-cljc.custom-zipper.core/up","rewrite-cljc.custom-zipper.core/down","rewrite-cljc.custom-zipper.core/next","rewrite-cljc.custom-zipper.core/prev","rewrite-cljc.custom-zipper.core/rightmost","rewrite-cljc.custom-zipper.core/leftmost","rewrite-cljc.custom-zipper.core/replace","rewrite-cljc.custom-zipper.core/edit","rewrite-cljc.custom-zipper.core/remove","rewrite-cljc.custom-zipper.core/insert-left","rewrite-cljc.custom-zipper.core/insert-right","rewrite-cljc.custom-zipper.core/insert-child","rewrite-cljc.custom-zipper.core/append-child","rewrite-cljc.zip/prev*","rewrite-cljc.zip/->string","zloc","rewrite-cljc.zip/->root-string","rewrite-cljc.zip/remove*"],"sourcesContent":["(ns rewrite-cljc.zip\n  \"A rich API for navigating and updating Clojure/ClojureScripti/EDN source code via a zipper tree.\n\n  The zipper holds a tree of nodes representing source code. It also holds your current location while navigating\n  through the tree and any pending changes you have made. Changes are applied back into the tree\n  when invoking root functions.\n\n  Although they are preserved, whitespace and comment nodes are normally skipped when navigating through the tree.\n  There are times when you will want to include whitespace and comment nodes, and as you see below, provisions are\n  available to do so.\n\n  It is good to remember that while some function names convey mutation, we are never changing anything, we are\n  instead returning modified copies.\n\n  Some conventions in the code and docstrings:\n  - `zloc` is the used as the argument name for our zipper\n  - \\\"current node in `zloc`\\\" is shorthand for: node at current location in zipper `zloc`\n\n  Because this API contains many functions, we offer the following categorized listing:\n\n  **Create a zipper**\n  [[edn]]\n  [[edn*]]\n  [[of-string]]\n  [[of-file]]\n\n  **Move**\n  [[left]]\n  [[right]]\n  [[up]]\n  [[down]]\n  [[prev]]\n  [[next]]\n  [[leftmost]]\n  [[rightmost]]\n\n  **Move without skipping whitespace and comments**\n  [[left*]]\n  [[right*]]\n  [[up*]]\n  [[down*]]\n  [[prev*]]\n  [[next*]]\n  [[leftmost*]]\n  [[rightmost*]]\n\n  **Whitespace/comment aware skip**\n  [[skip]]\n  [[skip-whitespace]]\n  [[skip-whitespace-left]]\n\n  **Test for whitespace**\n  [[whitespace?]]\n  [[linebreak?]]\n  [[whitespace-or-comment?]]\n\n  **Test location**\n  [[leftmost?]]\n  [[rightmost?]]\n  [[end?]]\n\n  **Test data type**\n  [[seq?]]\n  [[list?]]\n  [[vector?]]\n  [[set?]]\n  [[map?]]\n\n  **Find**\n  [[find]]\n  [[find-next]]\n  [[find-depth-first]]\n  [[find-next-depth-first]]\n  [[find-tag]]\n  [[find-next-tag]]\n  [[find-value]]\n  [[find-next-value]]\n  [[find-token]]\n  [[find-next-token]]\n  [[find-last-by-pos]]\n  [[find-tag-by-pos]]\n\n  **Inspect**\n  [[node]]\n  [[position]]\n  [[position-span]]\n  [[tag]]\n  [[length]]\n\n  **Convert**\n  [[sexpr]]\n  [[child-sexpr]]\n\n  **Update**\n  [[replace]]\n  [[edit]]\n  [[splice]]\n  [[prefix]]\n  [[suffix]]\n  [[insert-right]]\n  [[insert-left]]\n  [[insert-child]]\n  [[insert-space-left]]\n  [[insert-space-right]]\n  [[insert-newline-left]]\n  [[insert-newline-right]]\n  [[append-child]]\n  [[remove]]\n  [[remove-preserve-newline]]\n  [[root]]\n\n  **Update without whitespace treatment**\n  [[replace*]]\n  [[edit*]]\n  [[insert-left*]]\n  [[insert-right*]]\n  [[insert-child*]]\n  [[append-child*]]\n  [[remove*]]\n\n  **Isolated update without changing location**\n  [[edit-node]]\n  [[subedit-node]]\n  [[subzip]]\n  [[prewalk]]\n  [[postwalk]]\n  [[edit->]]\n  [[edit->>]]\n  [[subedit->]]\n  [[subedit->>]]\n\n  **Sequence operations**\n  [[map]]\n  [[map-keys]]\n  [[map-vals]]\n  [[get]]\n  [[assoc]]\n\n  **Stringify**\n  [[string]]\n  [[root-string]]\n\n  **Output**\n  [[print]]\n  [[print-root]]\"\n  (:refer-clojure :exclude [next find replace remove\n                            seq? map? vector? list? set?\n                            print map get assoc])\n  (:require [rewrite-cljc.custom-zipper.core]\n            #?(:clj [rewrite-cljc.potemkin.clojure :refer [import-vars import-vars-with-mods]])\n            [rewrite-cljc.zip.base]\n            [rewrite-cljc.zip.editz]\n            [rewrite-cljc.zip.findz]\n            [rewrite-cljc.zip.insert]\n            [rewrite-cljc.zip.move]\n            [rewrite-cljc.zip.removez]\n            [rewrite-cljc.zip.seqz]\n            [rewrite-cljc.zip.subedit #?@(:cljs [:include-macros true])]\n            [rewrite-cljc.zip.walk]\n            [rewrite-cljc.zip.whitespace])\n  #?(:cljs (:require-macros [rewrite-cljc.potemkin.cljs :refer [import-vars import-vars-with-mods]]\n                            [rewrite-cljc.zip])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(import-vars\n [rewrite-cljc.custom-zipper.core\n  node position position-span root]\n\n [rewrite-cljc.zip.base\n  child-sexprs\n  edn* edn\n  tag sexpr\n  length\n  value\n  #?(:clj of-file)\n  of-string\n  string root-string\n  print print-root]\n\n [rewrite-cljc.zip.editz\n  replace edit splice\n  prefix suffix]\n\n [rewrite-cljc.zip.findz\n  find find-next\n  find-depth-first\n  find-next-depth-first\n  find-tag find-next-tag\n  find-value find-next-value\n  find-token find-next-token\n  find-last-by-pos\n  find-tag-by-pos]\n\n [rewrite-cljc.zip.insert\n  insert-right insert-left\n  insert-child append-child]\n\n [rewrite-cljc.zip.move\n  left right up down prev next\n  leftmost rightmost\n  leftmost? rightmost? end?]\n\n [rewrite-cljc.zip.removez\n  remove\n  remove-preserve-newline]\n\n [rewrite-cljc.zip.seqz\n  seq? list? vector? set? map?\n  map map-keys map-vals\n  get assoc]\n\n [rewrite-cljc.zip.subedit\n  edit-node\n  subedit-node\n  subzip\n  edit-> edit->>\n  subedit-> subedit->>]\n\n [rewrite-cljc.zip.walk\n  prewalk\n  postwalk]\n\n [rewrite-cljc.zip.whitespace\n  whitespace? linebreak?\n  whitespace-or-comment?\n  skip skip-whitespace\n  skip-whitespace-left\n  insert-space-left insert-space-right\n  insert-newline-left insert-newline-right\n  prepend-space append-space\n  prepend-newline append-newline])\n\n(import-vars-with-mods\n {:sym-to-pattern \"@@orig-name@@*\"\n  :doc-to-pattern \"Raw version of [[@@orig-name@@]].\\n\\n@@orig-doc@@\\n\\nNOTE: This function does not skip, nor provide any special handling for whitespace/comment nodes.\"}\n [rewrite-cljc.custom-zipper.core\n  right left up down\n  next prev\n  rightmost leftmost\n  replace edit remove\n  insert-left insert-right\n  insert-child\n  append-child])\n\n;; ## DEPRECATED\n\n(defn ^{:deprecated \"0.4.0\"} ->string\n  \"DEPRECATED. Renamed to [[string]].\"\n  [zloc]\n  (rewrite-cljc.zip.base/string zloc))\n\n(defn ^{:deprecated \"0.4.0\"} ->root-string\n  \"DEPRECATED. Renamed to [[root-string]].\"\n  [zloc]\n  (rewrite-cljc.zip.base/root-string zloc))\n"]}