{"version":3,"sources":["frontend/extensions/srs.cljs"],"mappings":"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","names":["js/frontend","js/frontend.extensions","js/frontend.extensions.srs","js/frontend.extensions.srs.global-cards-mode?","frontend.extensions.srs/global-cards-mode?","cljs.core.atom","frontend.extensions.srs/card-hash-tag","frontend.extensions.srs/card-last-interval-property","frontend.extensions.srs/card-repeats-property","frontend.extensions.srs/card-last-reviewed-property","frontend.extensions.srs/card-next-schedule-property","frontend.extensions.srs/card-last-easiness-factor-property","frontend.extensions.srs/card-last-score-property","frontend.extensions.srs/default-card-properties-map","frontend.extensions.srs/cloze-macro-name","frontend.extensions.srs/query-macro-name","frontend.extensions.srs/learning-fraction-default","frontend.extensions.srs/learning-fraction","temp__5718__auto__","learning-fraction","frontend.state.get_config","frontend.extensions.srs/of-matrix","frontend.util.persist-var/persist-var","frontend.extensions.srs/initial-interval-default","frontend.extensions.srs/initial-interval","initial-interval","frontend.extensions.srs/get-block-card-properties","block","temp__5720__auto__","properties","cljs.core.merge","cljs.core/select-keys","frontend.extensions.srs/save-block-card-properties!","props","frontend.handler.editor.save_block_if_changed_BANG_","frontend.util.property/insert-properties","frontend.extensions.srs/reset-block-card-properties!","frontend.extensions.srs/card-block?","card-entity","G__50995","frontend.db/entity","refs","cljs.core.into","cljs.core/contains?","frontend.extensions.srs/fix-2f","n","Math/round","frontend.extensions.srs/get-of","of-matrix","ef","or__5043__auto__","cljs.core.get_in","frontend.extensions.srs/set-of","of","cljs.core/assoc-in","frontend.extensions.srs/interval","G__50998","G__50999","G__51000","frontend.extensions.srs/next-ef","quality","ef*","frontend.extensions.srs/next-of-matrix","fraction","of*","of**","frontend.extensions.srs/next-interval","_last-interval","repeats","js/Error","next-ef","next-of-matrix","next-interval","frontend$extensions$srs$ICard$get_root_block$dyn","x__5390__auto__","m__5391__auto__","frontend.extensions.srs/get-root-block","goog/typeOf","m__5389__auto__","cljs.core/missing-protocol","frontend.extensions.srs/ICard","this","frontend$extensions$srs$ICardShow$show_cycle$dyn","frontend.extensions.srs/show-cycle","frontend$extensions$srs$ICardShow$show_cycle_config$dyn","frontend.extensions.srs/show-cycle-config","frontend.extensions.srs/ICardShow","phase","frontend.extensions.srs/has-cloze?","blocks","cljs.core.map","p1__51006#","cljs.core/some","clojure.string/includes?","frontend.extensions.srs/clear-collapsed-property","result","cljs.core.dissoc","medley.core.dissoc_in","cljs.core/PROTOCOL_SENTINEL","this__5327__auto__","writer__5328__auto__","opt__5329__auto__","cljs.core/-write","frontend.extensions.srs/Sided-Cloze-Card","frontend.extensions.srs/->Sided-Cloze-Card","_this","G__51007","frontend.db/pull","G__51008","G__51009","frontend.db/get-block-and-children","frontend.state/get-current-repo","cloze?","G__51010","blocks-count","cljs.core/count","G__51011","frontend.extensions.srs/->card","cljs.core/map?","var_args","G__51013","frontend.extensions.srs/query","p__51014","map__51015","cljs.core/--destructure-map","cljs.core.get","repo","query-string","frontend.extensions.srs.query","disable-reactive?","use-cache?","map__51016","frontend.template/resolve-dynamic-template!","query","sort-by","rules","frontend.db.query-dsl/parse","query*","cljs.core.concat","cljs.core/coll?","cljs.core/first","frontend.db.query-dsl/query-wrapper","frontend.db.query-react/react-query","cljs.core/with-meta","G__51017","cljs.core.assoc","cljs.core/flatten","frontend.util/react","frontend.extensions.srs/query-scheduled","_repo","time","filtered-result","cljs.core/filterv","b","next-sched","next-sched*","cljs-time.coerce/from-string","cljs-time.core/before?","sort-by-next-shedule","cljs.core.sort_by","frontend.extensions.srs/get-next-interval","card","score","cljs.core/native-satisfies?","vec__51019","cljs.core.nth","last-interval","frontend.util/safe-parse-float","frontend.util/safe-parse-int","last-ef","next-repeats","of-matrix*","cljs.core/deref","next-interval*","next-schedule","cljs-time.coerce/to-string","cljs_time.core.plus","cljs-time.local/local-now","cljs_time.core.hours","now","frontend.extensions.srs/operation-score!","cljs.core/reset!","G__51023","frontend.extensions.srs/operation-reset!","G__51025","frontend.extensions.srs/operation-card-info-summary!","review-records","review-cards","card-query-block","review-count","cljs.core/vals","review-cards-count","score-5-count","score-1-count","frontend.handler.editor/insert-block-tree-after-target","frontend.util.format","frontend.date/today","frontend.extensions.srs/dec-cards-due-count!","frontend.state/update-state!","frontend.extensions.srs/review-finished?","cards","frontend.extensions.srs/score-and-next-card","*card-index","*phase","*review-records","cb","p1__51026#","cljs.core.swap_BANG_","cljs.core.update","ov","cljs.core.conj","G__51027","cljs.core/inc","frontend.extensions.srs/skip-card","p1__51028#","G__51029","frontend.extensions.srs/review-finished","p__51030","map__51031","frontend.extensions.srs/btn-with-shortcut","shortcut","id","btn-text","background","on-click","frontend.ui.button","frontend.ui/render-keyboard-shortcut","e","elem","frontend.extensions.srs.goog$module$goog$object.get","js/console.log","js/setTimeout","rum.core/lazy-build","rum.core/build-defcs","p__51033","map__51034","cljs.core/not","daiquiri.interpreter/interpret","map__51035","daiquiri.core/create-element","daiquiri.util/join-classes","attrs51038","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","attrs51039","daiquiri.core/fragment","attrs51040","attrs51041","frontend.extensions.srs/view","rum.core/reactive","frontend.db-mixins/query","rum.core.local","state","frontend.state/set-state!","preview?","modal?","card-index","frontend.util/nth-safe","next-phase","root-block","root-block-id","frontend.util/hiccup->class","frontend.components.block/breadcrumb","frontend.components.block/blocks-container","frontend.components.editor/box","cljs.core._EQ_","G__51042","and__5041__auto__","tomorrow","cljs-time.core/today","cljs_time.core.days","frontend.handler.editor/set-block-property!","frontend.util/mobile?","frontend.ui/tippy","rum.core/build-defc","frontend.extensions.srs/view-modal","frontend.modules.shortcut.core/mixin","option","v","frontend.util/atom?","cljs.core/fn?","cljs.core/shuffle","cljs.core/seq","frontend.extensions.srs/preview-cp","block-id","blocks-f","G__51060","G__51061","G__51062","frontend.db/get-paginated-blocks","frontend.extensions.srs/preview","frontend.state.set_modal_BANG_","frontend.extensions.srs/cloze-macro-show","config","shown?","options","shown?*","rum.core/react","toggle!","clojure.string.join","frontend.components.macro/register","frontend.extensions.srs/cards-total","frontend.extensions.srs/get-srs-cards-total","e51084","map__51085","count","js/console.error","map__51090","attrs51092","attrs51093","attrs51094","attrs51100","attrs51124","frontend.extensions.srs/cards","*random-mode?","*preview-mode?","query-result","global?","total","G__51091","filtered-total","callback-fn","frontend.util.persist-var/persist-save","frontend.ui.icon","clojure.string/blank?","frontend.util/stop","G__51117","G__51121","view-fn","blocks-fn","frontend.extensions.srs/global-cards","frontend.util.property/register-built-in-properties","frontend.commands/register-slash-command","frontend.extensions.srs/make-block-a-card!","G__51140","content","frontend.util.property/remove-built-in-properties","frontend.util.drawer/remove-logbook","frontend.handler.editor.save_block_BANG_","clojure.string/trim","frontend.extensions.srs/update-cards-due-count!"],"sourcesContent":["(ns frontend.extensions.srs\n  (:require [frontend.template :as template]\n            [frontend.db.query-dsl :as query-dsl]\n            [frontend.db.query-react :as query-react]\n            [frontend.util :as util]\n            [frontend.util.property :as property]\n            [frontend.util.drawer :as drawer]\n            [frontend.util.persist-var :as persist-var]\n            [frontend.db :as db]\n            [frontend.db-mixins :as db-mixins]\n            [frontend.state :as state]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.components.block :as component-block]\n            [frontend.components.macro :as component-macro]\n            [frontend.ui :as ui]\n            [frontend.date :as date]\n            [frontend.commands :as commands]\n            [frontend.components.editor :as editor]\n            [cljs-time.core :as t]\n            [cljs-time.local :as tl]\n            [cljs-time.coerce :as tc]\n            [clojure.string :as string]\n            [goog.object :as gobj]\n            [rum.core :as rum]\n            [frontend.modules.shortcut.core :as shortcut]\n            [medley.core :as medley]))\n\n;;; ================================================================\n;;; Commentary\n;;; - One block with tag \"#card\" or \"[[card]]\" is treated as a card.\n;;; - {{cloze content}} show as \"[...]\" when reviewing cards\n\n;;; ================================================================\n;;; const & vars\n\n;; TODO: simplify state\n\n(defonce global-cards-mode? (atom false))\n\n(def card-hash-tag \"card\")\n\n(def card-last-interval-property        :card-last-interval)\n(def card-repeats-property              :card-repeats)\n(def card-last-reviewed-property        :card-last-reviewed)\n(def card-next-schedule-property        :card-next-schedule)\n(def card-last-easiness-factor-property :card-ease-factor)\n(def card-last-score-property           :card-last-score)\n\n(def default-card-properties-map {card-last-interval-property -1\n                                  card-repeats-property 0\n                                  card-last-easiness-factor-property 2.5})\n\n(def cloze-macro-name\n  \"cloze syntax: {{cloze: ...}}\"\n  \"cloze\")\n\n(def query-macro-name\n  \"{{cards ...}}\"\n  \"cards\")\n\n(def learning-fraction-default\n  \"any number between 0 and 1 (the greater it is the faster the changes of the OF matrix)\"\n  0.5)\n\n(defn- learning-fraction []\n  (if-let [learning-fraction (:srs/learning-fraction (state/get-config))]\n    (if (and (number? learning-fraction)\n             (< learning-fraction 1)\n             (> learning-fraction 0))\n      learning-fraction\n      learning-fraction-default)\n    learning-fraction-default))\n\n(def of-matrix (persist-var/persist-var nil \"srs-of-matrix\"))\n\n(def initial-interval-default 4)\n\n(defn- initial-interval []\n  (if-let [initial-interval (:srs/initial-interval (state/get-config))]\n    (if (and (number? initial-interval)\n             (> initial-interval 0))\n      initial-interval\n      initial-interval-default)\n    initial-interval-default))\n\n;;; ================================================================\n;;; utils\n\n(defn- get-block-card-properties\n  [block]\n  (when-let [properties (:block/properties block)]\n    (merge\n     default-card-properties-map\n     (select-keys properties  [card-last-interval-property\n                               card-repeats-property\n                               card-last-reviewed-property\n                               card-next-schedule-property\n                               card-last-easiness-factor-property\n                               card-last-score-property]))))\n\n(defn- save-block-card-properties!\n  [block props]\n  (editor-handler/save-block-if-changed!\n   block\n   (property/insert-properties (:block/format block) (:block/content block) props)\n   {:force? true}))\n\n(defn- reset-block-card-properties!\n  [block]\n  (save-block-card-properties! block {card-last-interval-property -1\n                                      card-repeats-property 0\n                                      card-last-easiness-factor-property 2.5\n                                      card-last-reviewed-property \"nil\"\n                                      card-next-schedule-property \"nil\"\n                                      card-last-score-property \"nil\"}))\n\n\n;;; used by other ns\n\n\n(defn card-block?\n  [block]\n  (let [card-entity (db/entity [:block/name card-hash-tag])\n        refs (into #{} (:block/refs block))]\n    (contains? refs card-entity)))\n\n(declare get-root-block)\n\n;;; ================================================================\n;;; sr algorithm (sm-5)\n;;; https://www.supermemo.com/zh/archives1990-2015/english/ol/sm5\n\n(defn- fix-2f\n  [n]\n  (/ (Math/round (* 100 n)) 100))\n\n(defn- get-of [of-matrix n ef]\n  (or (get-in of-matrix [n ef])\n      (if (<= n 1)\n        (initial-interval)\n        ef)))\n\n(defn- set-of [of-matrix n ef of]\n  (->>\n   (fix-2f of)\n   (assoc-in of-matrix [n ef])))\n\n(defn- interval\n  [n ef of-matrix]\n  (if (<= n 1)\n    (get-of of-matrix 1 ef)\n    (* (get-of of-matrix n ef)\n       (interval (- n 1) ef of-matrix))))\n\n(defn- next-ef\n  [ef quality]\n  (let [ef* (+ ef (- 0.1 (* (- 5 quality) (+ 0.08 (* 0.02 (- 5 quality))))))]\n    (if (< ef* 1.3) 1.3 ef*)))\n\n(defn- next-of-matrix\n  [of-matrix n quality fraction ef]\n  (let [of (get-of of-matrix n ef)\n        of* (* of (+ 0.72 (* quality 0.07)))\n        of** (+ (* (- 1 fraction) of) (* of* fraction))]\n    (set-of of-matrix n ef of**)))\n\n(defn next-interval\n  \"return [next-interval repeats next-ef of-matrix]\"\n  [_last-interval repeats ef quality of-matrix]\n  (assert (and (<= quality 5) (>= quality 0)))\n  (let [ef (or ef 2.5)\n        next-ef (next-ef ef quality)\n        next-of-matrix (next-of-matrix of-matrix repeats quality (learning-fraction) ef)\n        next-interval (interval repeats next-ef next-of-matrix)]\n\n    (if (< quality 3)\n      ;; If the quality response was lower than 3\n      ;; then start repetitions for the item from\n      ;; the beginning without changing the E-Factor\n      [-1 1 ef next-of-matrix]\n      [(fix-2f next-interval) (+ 1 repeats) (fix-2f next-ef) next-of-matrix])))\n\n\n;;; ================================================================\n;;; card protocol\n\n\n(defprotocol ICard\n  (get-root-block [this]))\n\n(defprotocol ICardShow\n  ;; return {:value blocks :next-phase next-phase}\n  (show-cycle [this phase])\n\n  (show-cycle-config [this phase]))\n\n\n(defn- has-cloze?\n  [blocks]\n  (->> (map :block/content blocks)\n       (some #(string/includes? % \"{{cloze \"))))\n\n(defn- clear-collapsed-property\n  \"Clear block's collapsed property if exists\"\n  [blocks]\n  (let [result (map (fn [block]\n                      (-> block\n                          (dissoc :block/collapsed?)\n                          (medley/dissoc-in [:block/properties :collapsed]))) blocks)]\n    result))\n\n;;; ================================================================\n;;; card impl\n\n(deftype Sided-Cloze-Card [block]\n  ICard\n  (get-root-block [_this] (db/pull [:block/uuid (:block/uuid block)]))\n  ICardShow\n  (show-cycle [_this phase]\n    (let [blocks (-> (db/get-block-and-children (state/get-current-repo) (:block/uuid block))\n                     clear-collapsed-property)\n          cloze? (has-cloze? blocks)]\n      (case phase\n        1\n        (let [blocks-count (count blocks)]\n          {:value [block] :next-phase (if (or (> blocks-count 1) (nil? cloze?)) 2 3)})\n        2\n        {:value blocks :next-phase (if cloze? 3 1)}\n        3\n        {:value blocks :next-phase 1})))\n\n  (show-cycle-config [_this phase]\n    (case phase\n      1\n      {}\n      2\n      {}\n      3\n      {:show-cloze? true})))\n\n(defn- ->card [block]\n  {:pre [(map? block)]}\n  (->Sided-Cloze-Card block))\n\n;;; ================================================================\n;;;\n\n(defn- query\n  \"Use same syntax as frontend.db.query-dsl.\n  Add an extra condition: block's :block/refs contains `#card or [[card]]'\"\n  ([repo query-string]\n   (query repo query-string {}))\n  ([repo query-string {:keys [disable-reactive? use-cache?]\n                       :or {use-cache? true}}]\n   (when (string? query-string)\n     (let [query-string (template/resolve-dynamic-template! query-string)\n           {:keys [query sort-by rules]} (query-dsl/parse query-string)\n           query* (concat [['?b :block/refs '?bp] ['?bp :block/name card-hash-tag]]\n                          (if (coll? (first query))\n                            query\n                            [query]))]\n       (when-let [query (query-dsl/query-wrapper query* true)]\n         (let [result (query-react/react-query repo\n                                               {:query (with-meta query {:cards-query? true})\n                                                :rules (or rules [])}\n                                               (merge\n                                                {:use-cache? use-cache?}\n                                                (cond->\n                                                 (when sort-by\n                                                   {:transform-fn sort-by})\n                                                  disable-reactive?\n                                                  (assoc :disable-reactive? true))))]\n           (when result\n             (flatten (util/react result)))))))))\n\n(defn- query-scheduled\n  \"Return blocks scheduled to 'time' or before\"\n  [_repo blocks time]\n  (let [filtered-result (filterv (fn [b]\n                                   (let [props (:block/properties b)\n                                         next-sched (get props card-next-schedule-property)\n                                         next-sched* (tc/from-string next-sched)\n                                         repeats (get props card-repeats-property)]\n                                     (or (nil? repeats)\n                                         (< repeats 1)\n                                         (nil? next-sched)\n                                         (nil? next-sched*)\n                                         (t/before? next-sched* time))))\n                                 blocks),\n        sort-by-next-shedule   (sort-by (fn [b]\n                                (get (get b :block/properties) card-next-schedule-property)) filtered-result)]\n    {:total (count blocks)\n     :result sort-by-next-shedule}))\n\n\n;;; ================================================================\n;;; operations\n\n\n(defn- get-next-interval\n  [card score]\n  {:pre [(and (<= score 5) (>= score 0))\n         (satisfies? ICard card)]}\n  (let [block (.-block card)\n        props (get-block-card-properties block)\n        last-interval (or (util/safe-parse-float (get props card-last-interval-property)) 0)\n        repeats (or (util/safe-parse-int (get props card-repeats-property)) 0)\n        last-ef (or (util/safe-parse-float (get props card-last-easiness-factor-property)) 2.5)\n        [next-interval next-repeats next-ef of-matrix*]\n        (next-interval last-interval repeats last-ef score @of-matrix)\n        next-interval* (if (< next-interval 0) 0 next-interval)\n        next-schedule (tc/to-string (t/plus (tl/local-now) (t/hours (* 24 next-interval*))))\n        now (tc/to-string (tl/local-now))]\n    {:next-of-matrix of-matrix*\n     card-last-interval-property next-interval\n     card-repeats-property next-repeats\n     card-last-easiness-factor-property next-ef\n     card-next-schedule-property next-schedule\n     card-last-reviewed-property now\n     card-last-score-property score}))\n\n(defn- operation-score!\n  [card score]\n  {:pre [(and (<= score 5) (>= score 0))\n         (satisfies? ICard card)]}\n  (let [block (.-block card)\n        result (get-next-interval card score)\n        next-of-matrix (:next-of-matrix result)]\n    (reset! of-matrix next-of-matrix)\n    (save-block-card-properties! (db/pull [:block/uuid (:block/uuid block)])\n                                 (select-keys result\n                                              [card-last-interval-property\n                                               card-repeats-property\n                                               card-last-easiness-factor-property\n                                               card-next-schedule-property\n                                               card-last-reviewed-property\n                                               card-last-score-property]))))\n\n(defn- operation-reset!\n  [card]\n  {:pre [(satisfies? ICard card)]}\n  (let [block (.-block card)]\n    (reset-block-card-properties! (db/pull [:block/uuid (:block/uuid block)]))))\n\n(defn- operation-card-info-summary!\n  [review-records review-cards card-query-block]\n  (when card-query-block\n    (let [review-count (count (flatten (vals review-records)))\n          review-cards-count (count review-cards)\n          score-5-count (count (get review-records 5))\n          score-1-count (count (get review-records 1))]\n      (editor-handler/insert-block-tree-after-target\n       (:db/id card-query-block) false\n       [{:content (util/format \"Summary: %d items, %d review counts [[%s]]\"\n                               review-cards-count review-count (date/today))\n         :children [{:content\n                     (util/format \"Remembered:   %d (%d%%)\" score-5-count (* 100 (/ score-5-count review-count)))}\n                    {:content\n                     (util/format \"Forgotten :   %d (%d%%)\" score-1-count (* 100 (/ score-1-count review-count)))}]}]\n       (:block/format card-query-block)))))\n\n;;; ================================================================\n;;; UI\n\n(defn- dec-cards-due-count!\n  []\n  (state/update-state! :srs/cards-due-count\n                       (fn [n]\n                         (if (> n 0)\n                           (dec n)\n                           n))))\n\n(defn- review-finished?\n  [cards]\n  (<= (count cards) 1))\n\n(defn- score-and-next-card [score card *card-index cards *phase *review-records cb]\n  (operation-score! card score)\n  (swap! *review-records #(update % score (fn [ov] (conj ov card))))\n  (if (review-finished? cards)\n    (when cb (cb @*review-records))\n    (reset! *phase 1))\n  (swap! *card-index inc)\n  (when @global-cards-mode?\n    (dec-cards-due-count!)))\n\n(defn- skip-card [card *card-index cards *phase *review-records cb]\n  (swap! *review-records #(update % \"skip\" (fn [ov] (conj ov card))))\n  (swap! *card-index inc)\n  (if (review-finished? cards)\n    (when cb (cb @*review-records))\n    (reset! *phase 1)))\n\n(def review-finished\n  [:p.p-2 \"Congrats, you've reviewed all the cards for this query, see you next time! \ud83d\udcaf\"])\n\n(defn- btn-with-shortcut [{:keys [shortcut id btn-text background on-click]}]\n  (ui/button [:span btn-text \" \" (ui/render-keyboard-shortcut shortcut)]\n             :id id\n             :background background\n             :on-click (fn [e]\n                         (when-let [elem (gobj/get e \"target\")]\n                           (js/console.log (.-classList elem))\n                           (.add (.-classList elem) \"opacity-25\"))\n                         (js/setTimeout #(on-click) 10))))\n\n(rum/defcs view\n  < rum/reactive\n  db-mixins/query\n  (rum/local 1 ::phase)\n  (rum/local {} ::review-records)\n  {:will-mount (fn [state]\n                 (state/set-state! :srs/mode? true)\n                 state)\n   :will-unmount (fn [state]\n                   (state/set-state! :srs/mode? false)\n                   state)}\n  [state blocks {preview? :preview?\n                 modal? :modal?\n                 cb :callback}\n   card-index]\n  (let [cards (map ->card blocks)\n        review-records (::review-records state)\n        ;; TODO: needs refactor\n        card (if preview?\n               (when card-index (util/nth-safe cards @card-index))\n               (first cards))]\n    (if-not card\n      review-finished\n      (let [phase (::phase state)\n            {blocks :value next-phase :next-phase} (show-cycle card @phase)\n            root-block (.-block card)\n            root-block-id (:block/uuid root-block)]\n        [:div.ls-card.content\n         {:class (when (or preview? modal?)\n                   (util/hiccup->class \".flex.flex-col.resize.overflow-y-auto\"))}\n         (let [repo (state/get-current-repo)]\n           [:div {:style {:margin-top 20}}\n            (component-block/breadcrumb {} repo root-block-id {})])\n         (component-block/blocks-container\n          blocks\n          (merge (show-cycle-config card @phase)\n                 {:id (str root-block-id)\n                  :editor-box editor/box\n                  :review-cards? true}))\n         (if (or preview? modal?)\n           [:div.flex.my-4.justify-between\n            (when-not (and (not preview?) (= next-phase 1))\n              (ui/button [:span (case next-phase\n                                  1 \"Hide answers\"\n                                  2 \"Show answers\"\n                                  3 \"Show clozes\")\n                          (ui/render-keyboard-shortcut [:s])]\n                         :id \"card-answers\"\n                         :class \"mr-2\"\n                         :on-click #(reset! phase next-phase)))\n\n            (when (and (> (count cards) 1) preview?)\n              (ui/button [:span \"Next \" (ui/render-keyboard-shortcut [:n])]\n                         :id \"card-next\"\n                         :class \"mr-2\"\n                         :on-click #(skip-card card card-index cards phase review-records cb)))\n\n            (when (and (not preview?) (= 1 next-phase))\n              [:<>\n               (btn-with-shortcut {:btn-text   \"Forgotten\"\n                                   :shortcut   \"f\"\n                                   :id         \"card-forgotten\"\n                                   :background \"red\"\n                                   :on-click   (fn []\n                                                 (score-and-next-card 1 card card-index cards phase review-records cb)\n                                                 (let [tomorrow (tc/to-string (t/plus (t/today) (t/days 1)))]\n                                                   (editor-handler/set-block-property! root-block-id card-next-schedule-property tomorrow)))})\n\n               (btn-with-shortcut {:btn-text (if (util/mobile?) \"Hard\" \"Took a while to recall\")\n                                   :shortcut \"t\"\n                                   :id       \"card-recall\"\n                                   :on-click #(score-and-next-card 3 card card-index cards phase review-records cb)})\n\n               (btn-with-shortcut {:btn-text   \"Remembered\"\n                                   :shortcut   \"r\"\n                                   :id         \"card-remembered\"\n                                   :background \"green\"\n                                   :on-click   #(score-and-next-card 5 card card-index cards phase review-records cb)})])\n\n            (when preview?\n              (ui/tippy {:html [:div.text-sm\n                                \"Reset this card so that you can review it immediately.\"]\n                         :class \"tippy-hover\"\n                         :interactive true}\n                        (ui/button [:span \"Reset\"]\n                                   :id \"card-reset\"\n                                   :class (util/hiccup->class \"opacity-60.hover:opacity-100\")\n                                   :on-click #(operation-reset! card))))]\n           [:div.my-3 (ui/button \"Review cards\" :small? true)])]))))\n\n(rum/defc view-modal <\n  (shortcut/mixin :shortcut.handler/cards)\n  rum/reactive\n  db-mixins/query\n  [blocks option card-index]\n  (let [option (update option :random-mode? (fn [v] (if (util/atom? v) @v v)))\n        blocks (if (fn? blocks) (blocks) blocks)\n        blocks (if (:random-mode? option)\n                 (shuffle blocks)\n                 blocks)]\n    (if (seq blocks)\n      (view blocks option card-index)\n      review-finished)))\n\n(rum/defc preview-cp\n  [block-id]\n  (let [blocks-f (fn [] (db/get-paginated-blocks (state/get-current-repo) block-id\n                                                 {:scoped-block-id block-id}))]\n    (view-modal blocks-f {:preview? true} (atom 0))))\n\n(defn preview\n  [block-id]\n  (state/set-modal! #(preview-cp block-id) {:id :srs}))\n\n;;; ================================================================\n;;; register some external vars & related UI\n\n;;; register cloze macro\n\n\n(rum/defcs cloze-macro-show < rum/reactive\n  {:init (fn [state]\n           (let [config (first (:rum/args state))\n                 shown? (atom (:show-cloze? config))]\n             (assoc state :shown? shown?)))}\n  [state config options]\n  (let [shown?* (:shown? state)\n        shown? (rum/react shown?*)\n        toggle! #(swap! shown?* not)]\n    (if (or shown? (:show-cloze? config))\n      [:a.cloze-revealed {:on-click toggle!}\n       (util/format \"[%s]\" (string/join \", \" (:arguments options)))]\n      [:a.cloze {:on-click toggle!}\n       \"[...]\"])))\n\n(component-macro/register cloze-macro-name cloze-macro-show)\n\n(def cards-total (atom 0))\n\n(defn get-srs-cards-total\n  []\n  (try\n    (let [repo (state/get-current-repo)\n          query-string \"\"\n          blocks (query repo query-string {:use-cache?        false\n                                           :disable-reactive? true})]\n      (when (seq blocks)\n        (let [{:keys [result]} (query-scheduled repo blocks (tl/local-now))\n              count (count result)]\n          (reset! cards-total count)\n          count)))\n    (catch js/Error e\n      (js/console.error e) 0)))\n\n;;; register cards macro\n(rum/defcs ^:large-vars/cleanup-todo cards < rum/reactive db-mixins/query\n  (rum/local 0 ::card-index)\n  (rum/local false ::random-mode?)\n  (rum/local false ::preview-mode?)\n  [state config options]\n  (let [*random-mode? (::random-mode? state)\n        *preview-mode? (::preview-mode? state)\n        repo (state/get-current-repo)\n        query-string (string/join \", \" (:arguments options))\n        query-result (query repo query-string)\n        *card-index (::card-index state)\n        global? (:global? config)]\n    (if (seq query-result)\n      (let [{:keys [total result]} (query-scheduled repo query-result (tl/local-now))\n            review-cards result\n            card-query-block (db/entity [:block/uuid (:block/uuid config)])\n            filtered-total (count result)\n            ;; FIXME: It seems that model? is always true?\n            modal? (:modal? config)\n            callback-fn (fn [review-records]\n                          (when-not @*preview-mode?\n                            (operation-card-info-summary!\n                             review-records review-cards card-query-block)\n                            (persist-var/persist-save of-matrix)))]\n        [:div.flex-1.cards-review {:style (when modal? {:height \"100%\"})\n                                   :class (if global? \"\" \"shadow-xl\")}\n         [:div.flex.flex-row.items-center.justify-between.cards-title\n          [:div.flex.flex-row.items-center\n           (if @*preview-mode?\n             (ui/icon \"book\" {:style {:font-size 20}})\n             (ui/icon \"infinity\" {:style {:font-size 20}}))\n           [:div.ml-1.text-sm.font-medium (if (string/blank? query-string) \"All\" query-string)]]\n\n          [:div.flex.flex-row.items-center\n\n           ;; FIXME: CSS issue\n           (if @*preview-mode?\n             (ui/tippy {:html [:div.text-sm \"current/total\"]\n                        :interactive true}\n                       [:div.opacity-60.text-sm.mr-3\n                        @*card-index\n                        [:span \"/\"]\n                        total])\n             (ui/tippy {:html [:div.text-sm \"overdue/total\"]\n                      ;; :class \"tippy-hover\"\n                        :interactive true}\n                       [:div.opacity-60.text-sm.mr-3\n                        filtered-total\n                        [:span \"/\"]\n                        total]))\n\n           (ui/tippy\n            {:html [:div.text-sm \"Toggle preview mode\"]\n             :delay [1000, 100]\n             :class \"tippy-hover\"\n             :interactive true\n             :disabled false}\n            [:a.opacity-60.hover:opacity-100.svg-small.inline.font-bold\n             {:id \"preview-all-cards\"\n              :style (when @*preview-mode? {:color \"orange\"})\n              :on-click (fn [e]\n                          (util/stop e)\n                          (swap! *preview-mode? not)\n                          (reset! *card-index 0))}\n             \"A\"])\n\n           (ui/tippy\n            {:html [:div.text-sm \"Toggle random mode\"]\n             :delay [1000, 100]\n             :class \"tippy-hover\"\n             :interactive true}\n            [:a.mt-1.ml-2.block.opacity-60.hover:opacity-100\n             {:on-mouse-down (fn [e]\n                               (util/stop e)\n                               (swap! *random-mode? not))}\n             (ui/icon \"arrows-shuffle\" {:style (cond->\n                                                {:font-size 18\n                                                 :font-weight 600}\n                                                 @*random-mode?\n                                                 (assoc :color \"orange\"))})])]]\n         (if (seq review-cards)\n           [:div.px-1\n            (when-not modal?\n              {:on-click (fn []\n                           (let [blocks-f (if @*preview-mode?\n                                            (fn [] (query repo query-string))\n                                            (fn []\n                                              (let [query-result (query repo query-string)]\n                                                (:result (query-scheduled repo query-result (tl/local-now))))))]\n                             (state/set-modal! #(view-modal\n                                                 blocks-f\n                                                 {:modal? true\n                                                  :random-mode? *random-mode?\n                                                  :preview? @*preview-mode?\n                                                  :callback callback-fn}\n                                                 *card-index)\n                                               {:id :srs})))})\n            (let [view-fn (if modal? view-modal view)\n                  blocks-fn (if @*preview-mode?\n                              (fn [] (query repo query-string))\n                              review-cards)]\n              (view-fn blocks-fn\n               (merge config\n                      {:global? global?\n                       :random-mode? @*random-mode?\n                       :preview? @*preview-mode?\n                       :callback callback-fn})\n               *card-index))]\n           review-finished)])\n      (if global?\n        [:div.ls-card.content\n         [:h1.title \"Time to create a card!\"]\n\n         [:div\n          [:p \"You can add \\\"#card\\\" to any block to turn it into a card or trigger \\\"/cloze\\\" to add some clozes.\"]\n          [:img.my-4 {:src \"https://docs.logseq.com/assets/2021-07-22_22.28.02_1626964258528_0.gif\"}]\n          [:p \"You can \"\n           [:a {:href \"https://docs.logseq.com/#/page/cards\" :target \"_blank\"}\n            \"click this link\"]\n           \" to check the documentation.\"]]]\n        [:div.opacity-60.custom-query-title.ls-card.content\n         [:div.w-full.flex-1\n          [:code.p-1 (str \"Cards: \" query-string)]]\n         [:div.mt-2.ml-2.font-medium \"No matched cards\"]]))))\n\n(rum/defc global-cards <\n  {:will-mount (fn [state]\n                 (reset! global-cards-mode? true)\n                 state)\n   :will-unmount (fn [state]\n                   (reset! global-cards-mode? false)\n                   state)}\n  []\n  (cards {:modal? true\n          :global? true} {}))\n\n(component-macro/register query-macro-name cards)\n\n;;; register builtin properties\n(property/register-built-in-properties #{card-last-interval-property\n                                         card-repeats-property\n                                         card-last-reviewed-property\n                                         card-next-schedule-property\n                                         card-last-easiness-factor-property\n                                         card-last-score-property})\n\n;;; register slash commands\n(commands/register-slash-command [\"Cards\"\n                                  [[:editor/input \"{{cards }}\" {:backward-pos 2}]]\n                                  \"Create a cards query\"])\n\n(commands/register-slash-command [\"Cloze\"\n                                  [[:editor/input \"{{cloze }}\" {:backward-pos 2}]]\n                                  \"Create a cloze\"])\n\n;; handlers\n(defn make-block-a-card!\n  [block-id]\n  (when-let [block (db/entity [:block/uuid block-id])]\n    (when-let [content (:block/content block)]\n      (let [content (-> (property/remove-built-in-properties (:block/format block) content)\n                        (drawer/remove-logbook))]\n        (editor-handler/save-block!\n         (state/get-current-repo)\n         block-id\n         (str (string/trim content) \" #\" card-hash-tag))))))\n\n(defn update-cards-due-count!\n  []\n  (js/setTimeout\n   (fn []\n     (let [total (get-srs-cards-total)]\n       (state/set-state! :srs/cards-due-count total)))\n   200))\n"]}