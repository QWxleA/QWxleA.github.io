shadow$provide.module$node_modules$chrono_node$dist$locales$en$constants=function(global,require,module,exports){function parseNumberPattern(match){match=match.toLowerCase();return void 0!==exports.INTEGER_WORD_DICTIONARY[match]?exports.INTEGER_WORD_DICTIONARY[match]:"a"===match||"an"===match?1:match.match(/few/)?3:match.match(/half/)?.5:match.match(/couple/)?2:match.match(/several/)?7:parseFloat(match)}Object.defineProperty(exports,"__esModule",{value:!0});exports.parseTimeUnits=exports.TIME_UNITS_PATTERN=
exports.parseYear=exports.YEAR_PATTERN=exports.parseOrdinalNumberPattern=exports.ORDINAL_NUMBER_PATTERN=exports.parseNumberPattern=exports.NUMBER_PATTERN=exports.TIME_UNIT_DICTIONARY=exports.ORDINAL_WORD_DICTIONARY=exports.INTEGER_WORD_DICTIONARY=exports.MONTH_DICTIONARY=exports.FULL_MONTH_NAME_DICTIONARY=exports.WEEKDAY_DICTIONARY=void 0;global=require("module$node_modules$chrono_node$dist$utils$pattern");const years_1=require("module$node_modules$chrono_node$dist$calculation$years");exports.WEEKDAY_DICTIONARY=
{sunday:0,sun:0,"sun.":0,monday:1,mon:1,"mon.":1,tuesday:2,tue:2,"tue.":2,wednesday:3,wed:3,"wed.":3,thursday:4,thurs:4,"thurs.":4,thur:4,"thur.":4,thu:4,"thu.":4,friday:5,fri:5,"fri.":5,saturday:6,sat:6,"sat.":6};exports.FULL_MONTH_NAME_DICTIONARY={january:1,february:2,march:3,april:4,may:5,june:6,july:7,august:8,september:9,october:10,november:11,december:12};exports.MONTH_DICTIONARY=Object.assign(Object.assign({},exports.FULL_MONTH_NAME_DICTIONARY),{jan:1,"jan.":1,feb:2,"feb.":2,mar:3,"mar.":3,
apr:4,"apr.":4,jun:6,"jun.":6,jul:7,"jul.":7,aug:8,"aug.":8,sep:9,"sep.":9,sept:9,"sept.":9,oct:10,"oct.":10,nov:11,"nov.":11,dec:12,"dec.":12});exports.INTEGER_WORD_DICTIONARY={one:1,two:2,three:3,four:4,five:5,six:6,seven:7,eight:8,nine:9,ten:10,eleven:11,twelve:12};exports.ORDINAL_WORD_DICTIONARY={first:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eighth:8,ninth:9,tenth:10,eleventh:11,twelfth:12,thirteenth:13,fourteenth:14,fifteenth:15,sixteenth:16,seventeenth:17,eighteenth:18,nineteenth:19,
twentieth:20,"twenty first":21,"twenty-first":21,"twenty second":22,"twenty-second":22,"twenty third":23,"twenty-third":23,"twenty fourth":24,"twenty-fourth":24,"twenty fifth":25,"twenty-fifth":25,"twenty sixth":26,"twenty-sixth":26,"twenty seventh":27,"twenty-seventh":27,"twenty eighth":28,"twenty-eighth":28,"twenty ninth":29,"twenty-ninth":29,thirtieth:30,"thirty first":31,"thirty-first":31};exports.TIME_UNIT_DICTIONARY={sec:"second",second:"second",seconds:"second",min:"minute",mins:"minute",minute:"minute",
minutes:"minute",h:"hour",hr:"hour",hrs:"hour",hour:"hour",hours:"hour",day:"d",days:"d",week:"week",weeks:"week",month:"month",months:"month",y:"year",yr:"year",year:"year",years:"year"};exports.NUMBER_PATTERN=`(?:${global.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s*an?)?|an?(?:\\s*few)?|few|several|a?\\s*couple\\s*(?:of)?)`;exports.parseNumberPattern=parseNumberPattern;exports.ORDINAL_NUMBER_PATTERN=`(?:${global.matchAnyPattern(exports.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;
exports.parseOrdinalNumberPattern=function(match){match=match.toLowerCase();if(void 0!==exports.ORDINAL_WORD_DICTIONARY[match])return exports.ORDINAL_WORD_DICTIONARY[match];match=match.replace(/(?:st|nd|rd|th)$/i,"");return parseInt(match)};exports.YEAR_PATTERN="(?:[1-9][0-9]{0,3}\\s*(?:BE|AD|BC)|[1-2][0-9]{3}|[5-9][0-9])";exports.parseYear=function(match){if(/BE/i.test(match))return match=match.replace(/BE/i,""),parseInt(match)-543;if(/BC/i.test(match))return match=match.replace(/BC/i,""),-parseInt(match);
if(/AD/i.test(match))return match=match.replace(/AD/i,""),parseInt(match);match=parseInt(match);return years_1.findMostLikelyADYear(match)};require=`(${exports.NUMBER_PATTERN})\\s{0,5}(${global.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})\\s{0,5}`;const SINGLE_TIME_UNIT_REGEX=new RegExp(require,"i");exports.TIME_UNITS_PATTERN=global.repeatedTimeunitPattern("(?:(?:about|around)\\s*)?",require);exports.parseTimeUnits=function(timeunitText){const fragments={};let match=SINGLE_TIME_UNIT_REGEX.exec(timeunitText);
for(;match;){var fragments$jscomp$0=fragments,match$jscomp$0=match;const num=parseNumberPattern(match$jscomp$0[1]);match$jscomp$0=exports.TIME_UNIT_DICTIONARY[match$jscomp$0[2].toLowerCase()];fragments$jscomp$0[match$jscomp$0]=num;timeunitText=timeunitText.substring(match[0].length);match=SINGLE_TIME_UNIT_REGEX.exec(timeunitText)}return fragments}}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$en$constants.js.map
