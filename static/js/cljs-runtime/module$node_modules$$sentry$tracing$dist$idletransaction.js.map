{
"version":3,
"file":"module$node_modules$$sentry$tracing$dist$idletransaction.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/@sentry/tracing/dist/idletransaction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$tracing$dist$idletransaction\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils_1 = require(\"@sentry/utils\");\nvar constants_1 = require(\"./constants\");\nvar span_1 = require(\"./span\");\nvar transaction_1 = require(\"./transaction\");\nexports.DEFAULT_IDLE_TIMEOUT = 1000;\nexports.HEARTBEAT_INTERVAL = 5000;\n/**\n * @inheritDoc\n */\nvar IdleTransactionSpanRecorder = /** @class */ (function (_super) {\n    tslib_1.__extends(IdleTransactionSpanRecorder, _super);\n    function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {\n        if (transactionSpanId === void 0) { transactionSpanId = ''; }\n        var _this = _super.call(this, maxlen) || this;\n        _this._pushActivity = _pushActivity;\n        _this._popActivity = _popActivity;\n        _this.transactionSpanId = transactionSpanId;\n        return _this;\n    }\n    /**\n     * @inheritDoc\n     */\n    IdleTransactionSpanRecorder.prototype.add = function (span) {\n        var _this = this;\n        // We should make sure we do not push and pop activities for\n        // the transaction that this span recorder belongs to.\n        if (span.spanId !== this.transactionSpanId) {\n            // We patch span.finish() to pop an activity after setting an endTimestamp.\n            span.finish = function (endTimestamp) {\n                span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : utils_1.timestampWithMs();\n                _this._popActivity(span.spanId);\n            };\n            // We should only push new activities if the span does not have an end timestamp.\n            if (span.endTimestamp === undefined) {\n                this._pushActivity(span.spanId);\n            }\n        }\n        _super.prototype.add.call(this, span);\n    };\n    return IdleTransactionSpanRecorder;\n}(span_1.SpanRecorder));\nexports.IdleTransactionSpanRecorder = IdleTransactionSpanRecorder;\n/**\n * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.\n * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will\n * put itself on the scope on creation.\n */\nvar IdleTransaction = /** @class */ (function (_super) {\n    tslib_1.__extends(IdleTransaction, _super);\n    function IdleTransaction(transactionContext, _idleHub, \n    /**\n     * The time to wait in ms until the idle transaction will be finished.\n     * @default 1000\n     */\n    _idleTimeout, \n    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends\n    _onScope) {\n        if (_idleTimeout === void 0) { _idleTimeout = exports.DEFAULT_IDLE_TIMEOUT; }\n        if (_onScope === void 0) { _onScope = false; }\n        var _this = _super.call(this, transactionContext, _idleHub) || this;\n        _this._idleHub = _idleHub;\n        _this._idleTimeout = _idleTimeout;\n        _this._onScope = _onScope;\n        // Activities store a list of active spans\n        _this.activities = {};\n        // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.\n        _this._heartbeatCounter = 0;\n        // We should not use heartbeat if we finished a transaction\n        _this._finished = false;\n        _this._beforeFinishCallbacks = [];\n        if (_idleHub && _onScope) {\n            // There should only be one active transaction on the scope\n            clearActiveTransaction(_idleHub);\n            // We set the transaction here on the scope so error events pick up the trace\n            // context and attach it to the error.\n            utils_1.logger.log(\"Setting idle transaction on scope. Span ID: \" + _this.spanId);\n            _idleHub.configureScope(function (scope) { return scope.setSpan(_this); });\n        }\n        _this._initTimeout = setTimeout(function () {\n            if (!_this._finished) {\n                _this.finish();\n            }\n        }, _this._idleTimeout);\n        return _this;\n    }\n    /** {@inheritDoc} */\n    IdleTransaction.prototype.finish = function (endTimestamp) {\n        var e_1, _a;\n        var _this = this;\n        if (endTimestamp === void 0) { endTimestamp = utils_1.timestampWithMs(); }\n        this._finished = true;\n        this.activities = {};\n        if (this.spanRecorder) {\n            utils_1.logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);\n            try {\n                for (var _b = tslib_1.__values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var callback = _c.value;\n                    callback(this, endTimestamp);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {\n                // If we are dealing with the transaction itself, we just return it\n                if (span.spanId === _this.spanId) {\n                    return true;\n                }\n                // We cancel all pending spans with status \"cancelled\" to indicate the idle transaction was finished early\n                if (!span.endTimestamp) {\n                    span.endTimestamp = endTimestamp;\n                    span.setStatus('cancelled');\n                    utils_1.logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));\n                }\n                var keepSpan = span.startTimestamp < endTimestamp;\n                if (!keepSpan) {\n                    utils_1.logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));\n                }\n                return keepSpan;\n            });\n            utils_1.logger.log('[Tracing] flushing IdleTransaction');\n        }\n        else {\n            utils_1.logger.log('[Tracing] No active IdleTransaction');\n        }\n        // if `this._onScope` is `true`, the transaction put itself on the scope when it started\n        if (this._onScope) {\n            clearActiveTransaction(this._idleHub);\n        }\n        return _super.prototype.finish.call(this, endTimestamp);\n    };\n    /**\n     * Register a callback function that gets excecuted before the transaction finishes.\n     * Useful for cleanup or if you want to add any additional spans based on current context.\n     *\n     * This is exposed because users have no other way of running something before an idle transaction\n     * finishes.\n     */\n    IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {\n        this._beforeFinishCallbacks.push(callback);\n    };\n    /**\n     * @inheritDoc\n     */\n    IdleTransaction.prototype.initSpanRecorder = function (maxlen) {\n        var _this = this;\n        if (!this.spanRecorder) {\n            var pushActivity = function (id) {\n                if (_this._finished) {\n                    return;\n                }\n                _this._pushActivity(id);\n            };\n            var popActivity = function (id) {\n                if (_this._finished) {\n                    return;\n                }\n                _this._popActivity(id);\n            };\n            this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);\n            // Start heartbeat so that transactions do not run forever.\n            utils_1.logger.log('Starting heartbeat');\n            this._pingHeartbeat();\n        }\n        this.spanRecorder.add(this);\n    };\n    /**\n     * Start tracking a specific activity.\n     * @param spanId The span id that represents the activity\n     */\n    IdleTransaction.prototype._pushActivity = function (spanId) {\n        if (this._initTimeout) {\n            clearTimeout(this._initTimeout);\n            this._initTimeout = undefined;\n        }\n        utils_1.logger.log(\"[Tracing] pushActivity: \" + spanId);\n        this.activities[spanId] = true;\n        utils_1.logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n    };\n    /**\n     * Remove an activity from usage\n     * @param spanId The span id that represents the activity\n     */\n    IdleTransaction.prototype._popActivity = function (spanId) {\n        var _this = this;\n        if (this.activities[spanId]) {\n            utils_1.logger.log(\"[Tracing] popActivity \" + spanId);\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete this.activities[spanId];\n            utils_1.logger.log('[Tracing] new activities count', Object.keys(this.activities).length);\n        }\n        if (Object.keys(this.activities).length === 0) {\n            var timeout = this._idleTimeout;\n            // We need to add the timeout here to have the real endtimestamp of the transaction\n            // Remember timestampWithMs is in seconds, timeout is in ms\n            var end_1 = utils_1.timestampWithMs() + timeout / 1000;\n            setTimeout(function () {\n                if (!_this._finished) {\n                    _this.setTag(constants_1.FINISH_REASON_TAG, constants_1.IDLE_TRANSACTION_FINISH_REASONS[1]);\n                    _this.finish(end_1);\n                }\n            }, timeout);\n        }\n    };\n    /**\n     * Checks when entries of this.activities are not changing for 3 beats.\n     * If this occurs we finish the transaction.\n     */\n    IdleTransaction.prototype._beat = function () {\n        // We should not be running heartbeat if the idle transaction is finished.\n        if (this._finished) {\n            return;\n        }\n        var heartbeatString = Object.keys(this.activities).join('');\n        if (heartbeatString === this._prevHeartbeatString) {\n            this._heartbeatCounter += 1;\n        }\n        else {\n            this._heartbeatCounter = 1;\n        }\n        this._prevHeartbeatString = heartbeatString;\n        if (this._heartbeatCounter >= 3) {\n            utils_1.logger.log('[Tracing] Transaction finished because of no change for 3 heart beats');\n            this.setStatus('deadline_exceeded');\n            this.setTag(constants_1.FINISH_REASON_TAG, constants_1.IDLE_TRANSACTION_FINISH_REASONS[0]);\n            this.finish();\n        }\n        else {\n            this._pingHeartbeat();\n        }\n    };\n    /**\n     * Pings the heartbeat\n     */\n    IdleTransaction.prototype._pingHeartbeat = function () {\n        var _this = this;\n        utils_1.logger.log(\"pinging Heartbeat -> current counter: \" + this._heartbeatCounter);\n        setTimeout(function () {\n            _this._beat();\n        }, exports.HEARTBEAT_INTERVAL);\n    };\n    return IdleTransaction;\n}(transaction_1.Transaction));\nexports.IdleTransaction = IdleTransaction;\n/**\n * Reset transaction on scope to `undefined`\n */\nfunction clearActiveTransaction(hub) {\n    if (hub) {\n        var scope = hub.getScope();\n        if (scope) {\n            var transaction = scope.getTransaction();\n            if (transaction) {\n                scope.setSpan(undefined);\n            }\n        }\n    }\n}\n//# sourceMappingURL=idletransaction.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","clearActiveTransaction","hub","scope","getScope","getTransaction","transaction","setSpan","undefined","Object","defineProperty","value","tslib_1","utils_1","constants_1","span_1","transaction_1","DEFAULT_IDLE_TIMEOUT","HEARTBEAT_INTERVAL","IdleTransactionSpanRecorder","_super","_pushActivity","_popActivity","transactionSpanId","maxlen","_this","call","__extends","prototype","add","IdleTransactionSpanRecorder.prototype.add","span","spanId","finish","span.finish","endTimestamp","timestampWithMs","SpanRecorder","IdleTransaction","transactionContext","_idleHub","_idleTimeout","_onScope","activities","_heartbeatCounter","_finished","_beforeFinishCallbacks","logger","log","configureScope","_initTimeout","setTimeout","IdleTransaction.prototype.finish","_a","spanRecorder","toISOString","Date","op","_b","__values","_c","next","done","callback","e_1_1","e_1","error","return","spans","filter","setStatus","JSON","stringify","keepSpan","startTimestamp","registerBeforeFinishCallback","IdleTransaction.prototype.registerBeforeFinishCallback","push","initSpanRecorder","IdleTransaction.prototype.initSpanRecorder","pushActivity","id","popActivity","_pingHeartbeat","IdleTransaction.prototype._pushActivity","clearTimeout","keys","length","IdleTransaction.prototype._popActivity","timeout","end_1","setTag","FINISH_REASON_TAG","IDLE_TRANSACTION_FINISH_REASONS","_beat","IdleTransaction.prototype._beat","heartbeatString","join","_prevHeartbeatString","IdleTransaction.prototype._pingHeartbeat","Transaction"]
}
