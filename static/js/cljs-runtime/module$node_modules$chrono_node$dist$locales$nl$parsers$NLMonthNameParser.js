shadow$provide.module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const constants_1=require("module$node_modules$chrono_node$dist$locales$nl$constants"),years_1=require("module$node_modules$chrono_node$dist$calculation$years");global=require("module$node_modules$chrono_node$dist$utils$pattern");const constants_2=require("module$node_modules$chrono_node$dist$locales$nl$constants");
require=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const PATTERN=new RegExp(`(${global.matchAnyPattern(constants_1.MONTH_DICTIONARY)})`+"\\s*(?:"+`[,-]?\\s*(${constants_2.YEAR_PATTERN})?`+")?(?\x3d[^\\s\\w]|\\s+[^0-9]|\\s+$|$)","i");class NLMonthNameParser extends require.AbstractParserWithWordBoundaryChecking{innerPattern(){return PATTERN}innerExtract(context,match){const components=context.createParsingComponents();components.imply("day",1);const month=
constants_1.MONTH_DICTIONARY[match[1].toLowerCase()];components.assign("month",month);match[2]?(context=constants_2.parseYear(match[2]),components.assign("year",context)):(context=years_1.findYearClosestToRef(context.refDate,1,month),components.imply("year",context));return components}}exports.default=NLMonthNameParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameParser.js.map
