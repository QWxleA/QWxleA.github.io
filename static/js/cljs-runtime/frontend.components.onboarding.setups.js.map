{"version":3,"sources":["frontend/components/onboarding/setups.cljs"],"mappings":"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","names":["js/frontend","js/frontend.components","js/frontend.components.onboarding","js/frontend.components.onboarding.setups","js/frontend.components.onboarding.setups.DEVICE","frontend.components.onboarding.setups/DEVICE","frontend.util/mobile?","rum.core/lazy-build","rum.core/build-defc","attrs61698","daiquiri.core/create-element","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","frontend.components.onboarding.setups/setups-container","flag","content","picker?","cljs.core._EQ_","frontend.ui.icon","attrs61699","frontend.components.onboarding.setups/mobile-intro","frontend.mobile.util/native-ios?","frontend.mobile.util/native-android?","rum.core/build-defcs","frontend.components.onboarding.setups/picker","rum.core/reactive","_state","parsing?","frontend.state/sub","frontend.mobile.util/native-platform?","or__5043__auto__","frontend.handler.web.nfs/supported?","frontend.handler.page/ls-dir-files!","frontend.modules.shortcut.core/refresh!","frontend.ui/loading","frontend.ui/admonition","iter__5520__auto__","s__61711","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__61713","cljs.core/chunk-buffer","i__61712","vec__61714","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61710","cljs.core/chunk-rest","vec__61717","cljs.core/first","cljs.core/cons","cljs.core/rest","title","label","icon","cljs.core/not","clojure.string/ends-with?","js/frontend.components.onboarding.setups.*roam-importing?","frontend.components.onboarding.setups/*roam-importing?","cljs.core.atom","js/frontend.components.onboarding.setups.*opml-importing?","frontend.components.onboarding.setups/*opml-importing?","js/frontend.components.onboarding.setups.*opml-imported-pages","frontend.components.onboarding.setups/*opml-imported-pages","p__61720","map__61721","cljs.core/--destructure-map","cljs.core.get","frontend.components.onboarding.setups/importer","query-params","roam-importing?","rum.core/react","opml-importing?","finished-cb","frontend.handler.notification.show_BANG_","frontend.handler.route.redirect_to_home_BANG_","frontend.components.svg.roam_research","e","file","cljs.core.array_seq","file-name","frontend.components.onboarding.setups.goog$module$goog$object.get","cljs.core/reset!","reader","js/FileReader","text","frontend.handler.external/import-from-roam-json!","frontend.handler.external/import-from-opml!","pages","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.components.onboarding.setups\n  (:require [frontend.state :as state]\n            [rum.core :as rum]\n            [frontend.ui :as ui]\n            [frontend.components.svg :as svg]\n            [frontend.handler.page :as page-handler]\n            [frontend.handler.route :as route-handler]\n            [frontend.util :as util]\n            [frontend.handler.web.nfs :as nfs]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.external :as external-handler]\n            [frontend.modules.shortcut.core :as shortcut]\n            [clojure.string :as string]\n            [goog.object :as gobj]))\n\n(defonce DEVICE (if (util/mobile?) \"phone\" \"computer\"))\n\n(rum/defc setups-container\n  [flag content]\n\n  [:div.cp__onboarding-setups.flex.flex-1\n   (let [picker? (= flag :picker)]\n     [:div.inner-card.flex.flex-col.items-center\n\n      [:h1.text-xl\n       (if picker?\n         [:span [:strong (ui/icon \"heart\")] \"Welcome to \" [:strong \"Logseq!\"]]\n         [:span [:strong (ui/icon \"file-import\")] \"Import existing notes\"])]\n\n      [:h2\n       (if picker?\n         \"First you need to choose a folder where Logseq will store your thoughts, ideas, notes.\"\n         \"You can also do this later in the app.\")]\n\n      content])])\n\n(rum/defc mobile-intro\n  []\n  [:div.mobile-intro\n   (cond\n     (mobile-util/native-ios?)\n     [:div\n      [:ul\n       [:li \"Save them in \" [:span.font-bold \"iCloud Drive's Logseq directory\"] \", and sync them across devices using iCloud.\"]\n       [:li \"Save them in Logseq's directory of your device's local storage.\"]]]\n\n     (mobile-util/native-android?)\n     [:div\n      \"You can save them in your local storage, and use any third-party sync service to keep your notes sync with other devices. \"\n      \"If you prefer to use Dropbox to sync your notes, you can use \"\n      [:a {:href \"https://play.google.com/store/apps/details?id=com.ttxapps.dropsync\"\n           :target \"_blank\"}\n       \"Dropsync\"]\n      \". Or you can use \"\n      [:a {:href \"https://play.google.com/store/apps/details?id=dk.tacit.android.foldersync.lite\"\n           :target \"_blank\"}\n       \"FolderSync\"]\n      \".\"]\n\n     :else\n     nil)])\n\n(rum/defcs picker < rum/reactive\n  [_state]\n  (let [parsing? (state/sub :repo/parsing-files?)]\n\n    (setups-container\n     :picker\n     [:article.flex\n      [:section.a\n       [:strong \"Let\u2019s get you set up.\"]\n       [:small (str \"Where on your \" DEVICE \" do you want to save your work?\")\n        (when (mobile-util/native-platform?)\n          (mobile-intro))]\n\n       (if (or (nfs/supported?) (mobile-util/native-platform?))\n         [:div.choose.flex.flex-col.items-center\n          {:on-click #(page-handler/ls-dir-files!\n                       (fn []\n                         (shortcut/refresh!)))}\n          [:i]\n          [:div.control\n           [:label.action-input.flex.items-center.justify-center.flex-col\n            {:disabled parsing?}\n\n            (if parsing?\n              (ui/loading \"\")\n              [[:strong \"Choose a folder\"]\n               [:small \"Open existing directory or Create a new one\"]])]]]\n         [:div.px-5\n          (ui/admonition :warning\n                         [:p \"It seems that your browser doesn't support the \"\n                          [:a {:href   \"https://web.dev/file-system-access/\"\n                               :target \"_blank\"}\n                           \"new native filesystem API\"]\n                          [:span \", please use any Chromium 86+ based browser like Chrome, Vivaldi, Edge, etc. Notice that the API doesn't support mobile browsers at the moment.\"]])])]\n      [:section.b.flex.items-center.flex-col\n       [:p.flex\n        [:i.as-flex-center (ui/icon \"zoom-question\" {:style {:fontSize \"22px\"}})]\n        [:span.flex-1.flex.flex-col\n         [:strong \"How Logseq saves your work\"]\n         [:small.opacity-60 \"Inside the directory you choose, Logseq will create 4 folders.\"]]]\n\n       [:p.text-sm.pt-5.tracking-wide\n        [:span (str \"Each page is a file stored only on your \" DEVICE \".\")]\n        [:br]\n        [:span \"You may choose to sync it later.\"]]\n\n       [:ul\n        (for [[title label icon]\n              [[\"Graphics & Documents\" \"/assets\" \"artboard\"]\n               [\"Daily notes\" \"/journals\" \"calendar-plus\"]\n               [\"PAGES\" \"/pages\" \"file-text\"]\n               []\n               [\"APP Internal\" \"/logseq\" \"tool\"]\n               [\"Config File\" \"/logseq/config.edn\"]]]\n          (if-not title\n            [:li.hr]\n            [:li\n             {:key title}\n             [:i.as-flex-center\n              {:class (when (string/ends-with? label \".edn\") \"is-file\")}\n              (when icon (ui/icon icon))]\n             [:span\n              [:strong.uppercase title]\n              [:small.opacity-50 label]]]))]]])))\n\n(defonce *roam-importing? (atom nil))\n(defonce *opml-importing? (atom nil))\n(defonce *opml-imported-pages (atom nil))\n\n(rum/defc importer < rum/reactive\n  [{:keys [query-params]}]\n  (let [roam-importing? (rum/react *roam-importing?)\n        opml-importing? (rum/react *opml-importing?)\n        finished-cb     (fn []\n                          (notification/show! \"Finished!\" :success)\n                          (route-handler/redirect-to-home!))]\n\n    (setups-container\n     :importer\n     [:article.flex.flex-col.items-center.importer.py-16.px-8\n      [:section.c.text-center\n       [:h1 \"Do you already have notes that you want to import?\"]\n       [:h2 \"If they are in a JSON or Markdown format Logseq can work with them.\"]]\n      [:section.d.md:flex\n       [:label.action-input.flex.items-center.mx-2.my-2\n        {:disabled (or roam-importing? opml-importing?)}\n        [:span.as-flex-center [:i (svg/roam-research 28)]]\n        [:div.flex.flex-col\n         (if roam-importing?\n           (ui/loading \"Importing ...\")\n           [\n            [:strong \"RoamResearch\"]\n            [:small \"Import a JSON Export of your Roam graph\"]])]\n        [:input.absolute.hidden\n         {:id        \"import-roam\"\n          :type      \"file\"\n          :on-change (fn [e]\n                       (let [file      (first (array-seq (.-files (.-target e))))\n                             file-name (gobj/get file \"name\")]\n                         (if (string/ends-with? file-name \".json\")\n                           (do\n                             (reset! *roam-importing? true)\n                             (let [reader (js/FileReader.)]\n                               (set! (.-onload reader)\n                                     (fn [e]\n                                       (let [text (.. e -target -result)]\n                                         (external-handler/import-from-roam-json! text\n                                                                                  #(do (reset! *roam-importing? false) (finished-cb))))))\n                               (.readAsText reader file)))\n                           (notification/show! \"Please choose a JSON file.\"\n                                               :error))))}]]\n\n       [:label.action-input.flex.items-center.mx-2.my-2\n        {:disabled (or roam-importing? opml-importing?)}\n        [:span.as-flex-center (ui/icon \"sitemap\" {:style {:fontSize \"26px\"}})]\n        [:span.flex.flex-col\n         (if opml-importing?\n           (ui/loading \"Importing ...\")\n           [[:strong \"OPML\"]\n            [:small \" Import OPML files\"]])]\n\n        [:input.absolute.hidden\n         {:id        \"import-opml\"\n          :type      \"file\"\n          :on-change (fn [e]\n                       (let [file      (first (array-seq (.-files (.-target e))))\n                             file-name (gobj/get file \"name\")]\n                         (if (string/ends-with? file-name \".opml\")\n                           (do\n                             (reset! *opml-importing? true)\n                             (let [reader (js/FileReader.)]\n                               (set! (.-onload reader)\n                                     (fn [e]\n                                       (let [text (.. e -target -result)]\n                                         (external-handler/import-from-opml! text\n                                                                             (fn [pages]\n                                                                               (reset! *opml-imported-pages pages)\n                                                                               (reset! *opml-importing? false)\n                                                                               (finished-cb))))))\n                               (.readAsText reader file)))\n                           (notification/show! \"Please choose a OPML file.\"\n                                               :error))))}]]]\n\n      (when (= \"picker\" (:from query-params))\n        [:section.e\n         [:a.button {:on-click #(route-handler/redirect-to-home!)} \"Skip\"]])])))\n"]}