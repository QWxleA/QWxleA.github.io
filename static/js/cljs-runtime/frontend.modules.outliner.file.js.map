{"version":3,"sources":["frontend/modules/outliner/file.cljs"],"mappings":"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","names":["js/frontend","js/frontend.modules","js/frontend.modules.outliner","js/frontend.modules.outliner.file","js/frontend.modules.outliner.file.write-chan","frontend.modules.outliner.file/write-chan","cljs.core.async.chan","js/frontend.modules.outliner.file.write-chan-batch-buf","frontend.modules.outliner.file/write-chan-batch-buf","cljs.core.atom","frontend.modules.outliner.file/batch-write-interval","frontend.modules.outliner.file/writes-finished?","cljs.core/deref","cljs.core/empty?","frontend.modules.outliner.file/do-write-file!","repo","page-db-id","page-block","G__50360","G__50361","G__50362","frontend.db/pull","blocks","frontend.db.model.get_page_blocks_no_cache","cljs.core._EQ_","cljs.core/count","clojure.string/blank?","cljs.core/first","tree","frontend.modules.outliner.tree.blocks__GT_vec_tree","frontend.modules.file.core/save-tree","js/console.error","frontend.modules.outliner.file/write-files!","pages","cljs.core/seq","frontend.config/publishing?","seq__50368","chunk__50369","count__50370","i__50371","vec__50384","cljs.core.nth","temp__5720__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__50391","cljs.core/next","page-id","cljs.core/set","e50387","e50394","js/Error","e","frontend.handler.notification.show_BANG_","frontend.modules.outliner.file.goog$module$goog$object.get","lambdaisland.glogi.log","cljs.core/identity","p__50406","map__50407","cljs.core/--destructure-map","cljs.core.get","frontend.modules.outliner.file/sync-to-file","frontend.state/get-current-repo","cljs.core.async.put_BANG_","frontend.util/batch"],"sourcesContent":["(ns frontend.modules.outliner.file\n  (:require [clojure.core.async :as async]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.db.model :as model]\n            [frontend.handler.notification :as notification]\n            [frontend.modules.file.core :as file]\n            [frontend.modules.outliner.tree :as tree]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [frontend.state :as state]))\n\n(defonce write-chan (async/chan 100))\n(defonce write-chan-batch-buf (atom []))\n\n(def batch-write-interval 1000)\n\n(defn writes-finished?\n  []\n  (empty? @write-chan-batch-buf))\n\n(defn do-write-file!\n  [repo page-db-id]\n  (let [page-block (db/pull repo '[*] page-db-id)\n        page-db-id (:db/id page-block)\n        blocks (model/get-page-blocks-no-cache repo (:block/name page-block))]\n    (when-not (and (= 1 (count blocks))\n                   (string/blank? (:block/content (first blocks)))\n                   (nil? (:block/file page-block)))\n      (let [tree (tree/blocks->vec-tree repo blocks (:block/name page-block))]\n        (if page-block\n          (file/save-tree page-block tree)\n          (js/console.error (str \"can't find page id: \" page-db-id)))))))\n\n(defn write-files!\n  [pages]\n  (when (seq pages)\n    (when-not config/publishing?\n      (doseq [[repo page-id] (set pages)]\n        (try (do-write-file! repo page-id)\n             (catch js/Error e\n               (notification/show!\n                [:div\n                 [:p \"Write file failed, please copy the changes to other editors in case of losing data.\"]\n                 \"Error: \" (str (gobj/get e \"stack\"))]\n                :error)\n               (log/error :file/write-file-error {:error e})))))))\n\n(defn sync-to-file\n  [{page-db-id :db/id}]\n  (if (nil? page-db-id)\n    (notification/show!\n     \"Write file failed, can't find the current page!\"\n     :error)\n    (when-let [repo (state/get-current-repo)]\n      (async/put! write-chan [repo page-db-id]))))\n\n(util/batch write-chan\n            batch-write-interval\n            write-files!\n            write-chan-batch-buf)\n"]}