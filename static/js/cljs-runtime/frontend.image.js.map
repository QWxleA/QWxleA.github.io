{"version":3,"sources":["frontend/image.cljs"],"mappings":"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","names":["frontend.image/reverse?","exif-orientation","cljs.core/contains?","frontend.image/re-scale","width","height","max-width","max-height","vec__50181","cljs.core.nth","vec__50184","ratio","to-width","to-height","new-ratio","w","h","frontend.image/fix-orientation","img","cb","vec__50189","off-canvas","js/document.createElement","ctx","frontend.image.goog$module$goog$object.get","frontend.image.goog$module$goog$object.set","vec__50192","G__50195","frontend.image/get-orientation","js/module$frontend$exif.getEXIFOrientation","orientation","frontend.image/create-object-url","file","or__5043__auto__","js/window","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.image/upload","p__50212","map__50214","cljs.core/--destructure-map","cljs.core.get","seq50204","G__50205","cljs.core/first","cljs.core/next","G__50206","self__5751__auto__","files","file-handler","files-limit","seq__50215","cljs.core/seq","chunk__50216","count__50217","i__50218","temp__5720__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core.take","cljs.core.array_seq","file-type","ymd","cljs.core/vals","frontend.date.year_month_day_padded","clojure.string.join","file-name","cljs.core._EQ_"],"sourcesContent":["(ns frontend.image\n  (:require [\"/frontend/exif\" :as exif]\n            [clojure.string :as string]\n            [frontend.date :as date]\n            [goog.object :as gobj]))\n\n(defn reverse?\n  [exif-orientation]\n  (contains? #{5 6 7 8} exif-orientation))\n\n(defn re-scale\n  [exif-orientation width height max-width max-height]\n  (let [[width height]\n        (if (reverse? exif-orientation)\n          [height width]\n          [width height])\n        ratio (/ width height)\n        to-width (if (> width max-width) max-width width)\n        to-height (if (> height max-height) max-height height)\n        new-ratio (/ to-width to-height)\n        [w h] (cond\n                (> new-ratio ratio)\n                [(* ratio to-height) to-height]\n\n                (< new-ratio ratio)\n                [to-width (/ to-width ratio)]\n\n                :else\n                [to-width to-height])]\n    [(int w) (int h)]))\n\n(defn fix-orientation\n  \"Given image and exif orientation, ensure the photo is displayed\n  rightside up\"\n  [img exif-orientation cb max-width max-height]\n  (let [off-canvas (js/document.createElement \"canvas\")\n        ctx ^js (.getContext off-canvas \"2d\")\n        width (gobj/get img \"width\")\n        height (gobj/get img \"height\")\n        [to-width to-height] (re-scale exif-orientation width height max-width max-height)]\n    (gobj/set ctx \"imageSmoothingEnabled\" false)\n    (set! (.-width off-canvas) to-width)\n    (set! (.-height off-canvas) to-height)\n    ;; rotate\n    (let [[width height] (if (reverse? exif-orientation)\n                           [to-height to-width]\n                           [to-width to-height])]\n      (case exif-orientation\n        2 (.transform ctx -1  0  0  1 width  0)\n        3 (.transform ctx -1  0  0 -1 width  height)\n        4 (.transform ctx  1  0  0 -1 0      height)\n        5 (.transform ctx  0  1  1  0 0      0)\n        6 (.transform ctx  0  1 -1  0 height 0)\n        7 (.transform ctx  0 -1 -1  0 height width)\n        8 (.transform ctx  0 -1  1  0 0      width)\n        (.transform ctx  1  0  0  1 0      0))\n      (.drawImage ctx img 0 0 width height))\n    (cb off-canvas)))\n\n(defn get-orientation\n  [img cb max-width max-height]\n  (exif/getEXIFOrientation\n   img\n   (fn [orientation]\n     (fix-orientation img orientation cb max-width max-height))))\n\n(defn create-object-url\n  [file]\n  (.createObjectURL (or (.-URL js/window)\n                        (.-webkitURL js/window))\n                    file))\n\n;; (defn build-image\n;;   []\n;;   (let [img (js/Image.)]\n;;     ))\n\n(defn upload\n  [files file-handler & {:keys [files-limit]\n                         :or {files-limit 1}}]\n  (doseq [file (take files-limit (array-seq files))]\n    (let [file-type (gobj/get file \"type\")\n          ymd (->> (vals (date/year-month-day-padded))\n                   (string/join \"_\"))\n          file-name (str ymd \"_\" (gobj/get file \"name\"))]\n      (when (= 0 (.indexOf file-type \"image/\"))\n        (file-handler file file-name file-type)\n        ;; (let [img (js/Image.)]\n        ;;   (set! (.-onload img)\n        ;;         (fn []\n        ;;           (get-orientation img\n        ;;                            (fn [^js off-canvas]\n        ;;                              (let [file-form-data ^js (js/FormData.)\n        ;;                                    data-url (.toDataURL off-canvas)\n        ;;                                    blob (blob/blob data-url)]\n        ;;                                (.append file-form-data \"file\" blob)\n        ;;                                (file-cb file file-form-data file-name file-type)))\n        ;;                            max-width\n        ;;                            max-height)))\n        ;;   (set! (.-src img)\n        ;;         (create-object-url file)))\n        ))))\n"]}