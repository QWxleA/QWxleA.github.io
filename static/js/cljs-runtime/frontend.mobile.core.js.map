{"version":3,"sources":["frontend/mobile/core.cljs"],"mappings":";;;AAYA,AAAKA,iCAAK,6CAAA,7CAACC;AAIX,AAAKC,6CAAiB,6CAAA,7CAACD;AACvB,AAAKE,iDAAqB,6CAAA,7CAACF;AAE3B;;;gCAAA,hCAAOG;AAAP,AAGE,IAAMC,aAAK,AAACC;AAAZ,AACE,yGAAA,zGAACC,gIAA+BF;;AAElC,wBAAA,xBAAmBG,+BAEA,WAAKC;AAAL,AACE,oBAAA,AAAAC,gBAAOV;AAAP,AACE,kBAAA,XAACW;AAAD,AAAgB,yCAAA,AAAAD,lCAACE,kDAAmBZ;GAApC;;AADF;;;;AAIrB,AAACa;;AAED,AAAqBC;;AAErB,kDAAA,3CAAcA,mDACA,WAAKC;AAAL,AACE,mBAAA,ZAACC,2BAAoBD;;;AAEvC;;;oCAAA,pCAAOE;AAAP,AAIE,mEAAA,aAAA,hFAAcC;AAAd,AACe,IAAMC,OAAKC;AAAX,AACE,GAAM,AAAO,mHAAA,+FAAA,2FAAA,AAAA,3RACE,AAACC,+CACD,2CAAA,3CAACC,oEAED,AAACC,uCACD,AAACC,wDAED,AAACC,sCACD,AAACC;;AARhB,AAYE,GAAI,kDAAA,hDAAI,qCAAA,rCAACC,gCAAkBR,kBACnB,qCAAA,rCAACQ,gCAAkBR,eACnB,GAAK,oCAAA,pCAACS,+BAAiBT;AAC7B,OAAUD;;AACV,OAACW;;;AAhBL;;;;AAkBjB,+BAAA,qBAAA,7CAAmBrB;AAAnB,AACsB,OAACsB;;;AAEzB;;;oCAAA,pCAAOC;AAAP,AAGE,mEAAA,nEAAcb,gFACA,WAASc;AAAT,AACE,IAAAC,qBAAe,AAAOD;AAAtB,AAAA,oBAAAC;AAAA,AAAA,UAAAA,NAAWC;AAAX,AACE,GAAA,GAAQ,iEAAA,jEAACC,6CAAE,AAAcC;AACvB,OAACC,sBAAOrC,+BAAKkC;;AACb,GAAU,EAAK,6CAAA,AAAAxB,7CAACyB,6DAAGjC,4CAAiBgC,UACrB,kGAAA,jGAAI,6BAAA,AAAAxB,5BAAG,AAAa,KAAA4B,uCAAanC;AADhD;;AAAA,AAEE,AAACkC,sBAAOnC,2CAAiBgC;;AACzB,AAACG,sBAAOlC,+CAAqB,AAAa,KAAAmC;;AAC1C,OAAC1B,kCAAkBsB;;;;AAPzB;;;;AAShB,4CAAA,5CAAcK,sDACA,WAAKxB;AAAL,AACE,sCAAA,mFAAA,lHAACyB,oMAAwCzB;;;AAEzD,6EAAA,7EAAc0B,gGACE,WAASC;AAAT,AACE,IAAMC,kBAAgB,AAAkBD;AAAxC,AACE,sCAAA,mFAAA,lHAACF,8MAA6CG;;;AAElE,6EAAA,7EAAcF,gGACE;AAAA,AACE,sCAAA,mFAAA,lHAACD;;;AAEnB,wBAAA,YAAA,pCAAmBhC;AAAnB,AACoB,iEAAA,1DAACoC;;;AAErB,0EAAA,nEAAc1B,oFACA,WAAS2B;AAAT,AACE,oBAAM,AAACC;AAAP,AACE,IAAMC,mBAAW,AAAYF;AAA7B,AACE,oBAAUE;AAAV;;AAAA,AACE,OAACC;;;AAHP;;;;AAKlB,kCAAA,lCAAMC;AAAN,AACE,oBAAM,AAACC;AAAP,AACE,AAACjC;;AADH;;AAGA,oBAAM,AAACkC;AAAP,AACE,AAAC/C;;AADH;;AAGA,oBAAM,AAACgD;AAAP,AACE,OAACrB;;AADH","names":["frontend.mobile.core/*url","cljs.core.atom","frontend.mobile.core/*last-shared-url","frontend.mobile.core/*last-shared-seconds","frontend.mobile.core/ios-init","path","frontend.fs.capacitor-fs/iOS-ensure-documents!","cljs.core.println","js/window","_event","cljs.core/deref","js/setTimeout","frontend.mobile.deeplink/deeplink","frontend.mobile.util/check-ios-zoomed-display","frontend.mobile.util/file-sync","event","js/console.log","frontend.mobile.core/android-init","js/module$node_modules$$capacitor$app$dist$plugin_cjs.App","href","js/window.location.href","frontend.state/get-left-sidebar-open?","frontend.state/set-left-sidebar-open!","frontend.state/settings-open?","frontend.state/close-settings!","frontend.state/modal-opened?","frontend.state/close-modal!","clojure.string/ends-with?","clojure.string/includes?","js/window.history.back","frontend.mobile.intent/handle-received","frontend.mobile.core/general-init","data","temp__5720__auto__","url","cljs.core._EQ_","js/document","cljs.core/reset!","js/Date","frontend.mobile.util/fs-watcher","frontend.state/pub-event!","js/module$node_modules$$capacitor$keyboard$dist$plugin_cjs.Keyboard","info","keyboard-height","frontend.util.scroll_to_top","state","frontend.state/get-current-repo","is-active?","frontend.handler.editor.save_current_block_BANG_","frontend.mobile.core/init!","frontend.mobile.util/native-android?","frontend.mobile.util/native-ios?","frontend.mobile.util/native-platform?"],"sourcesContent":["(ns frontend.mobile.core\n  (:require [\"@capacitor/app\" :refer [^js App]]\n            [\"@capacitor/keyboard\" :refer [^js Keyboard]]\n            [clojure.string :as string]\n            [frontend.fs.capacitor-fs :as fs]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.mobile.deeplink :as deeplink]\n            [frontend.mobile.intent :as intent]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.state :as state]\n            [frontend.util :as util]))\n\n(def *url (atom nil))\n;; FIXME: `appUrlOpen` are fired twice when receiving a same intent. \n;; The following two variable atoms are used to compare whether\n;; they are from the same intent share.\n(def *last-shared-url (atom nil))\n(def *last-shared-seconds (atom 0))\n\n(defn- ios-init\n  \"Initialize iOS-specified event listeners\"\n  []\n  (let [path (fs/iOS-ensure-documents!)]\n    (println \"iOS container path: \" path))\n  \n  (.addEventListener js/window\n                     \"load\"\n                     (fn [_event]\n                       (when @*url\n                         (js/setTimeout #(deeplink/deeplink @*url)\n                                        1000))))\n\n  (mobile-util/check-ios-zoomed-display)\n  \n  (.removeAllListeners mobile-util/file-sync)\n\n  (.addListener mobile-util/file-sync \"debug\"\n                (fn [event]\n                  (js/console.log \"\ud83d\udd04\" event))))\n\n(defn- android-init\n  \"Initialize Android-specified event listeners\"\n  []\n  ;; patch back navigation\n  (.addListener App \"backButton\"\n                #(let [href js/window.location.href]\n                   (when (true? (cond\n                                  (state/get-left-sidebar-open?)\n                                  (state/set-left-sidebar-open! false)\n\n                                  (state/settings-open?)\n                                  (state/close-settings!)\n\n                                  (state/modal-opened?)\n                                  (state/close-modal!)\n\n                                  :else true))\n\n                     (if (or (string/ends-with? href \"#/\")\n                             (string/ends-with? href \"/\")\n                             (not (string/includes? href \"#/\")))\n                       (.exitApp App)\n                       (js/window.history.back)))))\n\n  (.addEventListener js/window \"sendIntentReceived\"\n                       #(intent/handle-received)))\n\n(defn- general-init\n  \"Initialize event listeners used by both iOS and Android\"\n  []\n  (.addListener App \"appUrlOpen\"\n                (fn [^js data]\n                  (when-let [url (.-url data)]\n                    (if-not (= (.-readyState js/document) \"complete\")\n                      (reset! *url url)\n                      (when-not (and (= @*last-shared-url url)\n                                     (<= (- (.getSeconds (js/Date.)) @*last-shared-seconds) 1))\n                        (reset! *last-shared-url url)\n                        (reset! *last-shared-seconds (.getSeconds (js/Date.)))\n                        (deeplink/deeplink url))))))\n\n  (.addListener mobile-util/fs-watcher \"watcher\"\n                (fn [event]\n                  (state/pub-event! [:file-watcher/changed event])))\n\n  (.addListener Keyboard \"keyboardWillShow\"\n                  (fn [^js info]\n                    (let [keyboard-height (.-keyboardHeight info)]\n                      (state/pub-event! [:mobile/keyboard-will-show keyboard-height]))))\n\n  (.addListener Keyboard \"keyboardWillHide\"\n                  (fn []\n                    (state/pub-event! [:mobile/keyboard-will-hide])))\n\n  (.addEventListener js/window \"statusTap\"\n                     #(util/scroll-to-top true))\n\n  (.addListener App \"appStateChange\"\n                (fn [^js state]\n                  (when (state/get-current-repo)\n                    (let [is-active? (.-isActive state)]\n                      (when-not is-active?\n                        (editor-handler/save-current-block!)))))))\n\n(defn init! []\n  (when (mobile-util/native-android?)\n    (android-init))\n\n  (when (mobile-util/native-ios?)\n    (ios-init))\n  \n  (when (mobile-util/native-platform?)\n    (general-init)))\n"]}