{"version":3,"sources":["frontend/components/search.cljs"],"mappings":"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","names":["frontend.components.search/highlight-exact-query","content","q","clojure.string/blank?","and__5041__auto__","q-words","clojure.string.split","lc-content","frontend.util/search-normalize","lc-q","clojure.string/includes?","cljs.core/not","frontend.util/safe-re-find","vec__60239","cljs.core.nth","i","clojure.string.index_of","before","after","cljs.core.subs","cljs.core/count","elements","words","result","cljs.core/seq","word","cljs.core/first","lc-word","temp__5718__auto__","cljs.core/rest","cljs.core/vec","cljs.core.concat","cljs.core.conj","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","daiquiri.interpreter/interpret","frontend.components.search/search-result-item","type","cljs.core.get","attrs60258","cljs.core/map?","daiquiri.interpreter/element-attributes","frontend.components.search/block-search-result-item","repo","uuid","format","search-mode","frontend.handler.search/sanity-search-content","cljs.core.not_EQ_","frontend.components.block/breadcrumb","cljs.core/uuid","js/frontend","js/frontend.components","js/frontend.components.search","js/frontend.components.search.search-timeout","frontend.components.search/search-timeout","cljs.core.atom","p__60267","map__60271","cljs.core/--destructure-map","frontend.components.search/search-on-chosen-open-link","search-q","data","alias","frontend.handler.search/add-search-to-recent!","frontend.handler.search.clear_search_BANG_","G__60277","cljs.core/Keyword","block-uuid","block","G__60291","frontend.db/entity","link","cljs.core/re-find","frontend.handler.editor/url-regex","js/window.open","frontend.handler.notification.show_BANG_","or__5043__auto__","page","G__60303","frontend.util/page-name-sanity-lc","p1__60262#","cljs.core/some","cljs.core/val","frontend.state/close-modal!","p__60308","map__60309","frontend.components.search/search-on-chosen","G__60310","frontend.state/add-graph-search-filter!","frontend.handler.page.create_BANG_","frontend.handler.route.redirect_to_page_BANG_","frontend.handler.route/redirect!","collapsed?","frontend.db/parents-collapsed?","G__60311","long-page?","frontend.handler.block/long-page?","cljs.core.println","G__60313","frontend.db/pull","p__60318","map__60319","frontend.components.search/search-on-shift-chosen","G__60323","G__60324","frontend.state/sidebar-add-block!","G__60329","p__60333","map__60334","frontend.components.search/search-item-render","frontend.state/get-search-mode","frontend.extensions.pdf.assets/fix-local-asset-filename","G__60339","frontend.context.i18n.t","target-original-name","frontend.db.model/get-page-original-name","map__60346","frontend.util/get-page-original-name","frontend.state/sub","frontend.db/get-page-format","frontend.db.model/query-block-by-uuid","lambdaisland.glogi.log","cljs.core/identity","p__60361","map__60362","frontend.components.search/search-auto-complete","pages","files","blocks","has-more?","all?","cljs.core.map","frontend.db.model.get_redirect_page_name","G__60366","cljs.core.assoc","cljs.core.remove","cljs.core/nil?","file","new-page","cljs.core._EQ_","frontend.util/safe-page-name-sanity-lc","frontend.config/publishing?","frontend.state/get-current-repo","p1__60350#","p1__60351#","p1__60352#","p1__60353#","frontend.ui/auto-complete","frontend.util/electron?","reitit.frontend.easy.href","frontend.handler.search.search","frontend.components.search/recent-search-and-pages","in-page-search?","frontend.ui/with-shortcut","frontend.ui.toggle","_value","frontend.state/set-search-mode!","frontend.ui/tippy","frontend.util/->platform-shortcut","frontend.state/toggle!","frontend.ui.icon","recent-search","cljs.core.mapv","frontend.db/get-key-value","cljs.core.filter","cljs.core/string?","p1__60391#","clojure.string/lower-case","cljs.core.take","p__60413","map__60414","G__60415","frontend.state/set-q!","opts","current-page","frontend.state/get-current-page","frontend.date/today","G__60416","p__60417","map__60418","G__60419","temp__5720__auto__","G__60420","p__60421","map__60422","G__60423","frontend.components.svg/search","original-name","frontend.components.search/default-placeholder","rum.core/build-defcs","rum.core/mark-sync-update","attrs60424","daiquiri.normalize.merge_with_class","frontend.components.search/search-modal","rum.core/reactive","frontend.modules.shortcut.core/disable-all-shortcuts","frontend.mixins.event_mixin","state","frontend.mixins.hide_when_esc_or_outside","search-result","timeout","G__60425","frontend.util/chrome?","e","cljs.core/deref","js/clearTimeout","value","frontend.util/evalue","is-composing?","frontend.util/onchange-event-is-composing?","G__60426","cljs.core/reset!","js/setTimeout","attrs60427","attrs60428","attrs60429","attrs60430","frontend.components.search/more","route","cljs.core.get_in"],"sourcesContent":["(ns frontend.components.search\n  (:require [rum.core :as rum]\n            [lambdaisland.glogi :as log]\n            [frontend.util :as util]\n            [frontend.components.block :as block]\n            [frontend.components.svg :as svg]\n            [frontend.handler.route :as route]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.page :as page-handler]\n            [frontend.handler.block :as block-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.db :as db]\n            [frontend.db.model :as model]\n            [frontend.handler.search :as search-handler]\n            [frontend.extensions.pdf.assets :as pdf-assets]\n            [frontend.ui :as ui]\n            [frontend.state :as state]\n            [frontend.mixins :as mixins]\n            [frontend.config :as config]\n            [clojure.string :as string]\n            [frontend.context.i18n :refer [t]]\n            [frontend.date :as date]\n            [reitit.frontend.easy :as rfe]\n            [frontend.modules.shortcut.core :as shortcut]))\n\n(defn highlight-exact-query\n  [content q]\n  (if (or (string/blank? content) (string/blank? q))\n    content\n    (when (and content q)\n      (let [q-words (string/split q #\" \")\n            lc-content (util/search-normalize content)\n            lc-q (util/search-normalize q)]\n        (if (and (string/includes? lc-content lc-q)\n                 (not (util/safe-re-find #\" \" q)))\n          (let [i (string/index-of lc-content lc-q)\n                [before after] [(subs content 0 i) (subs content (+ i (count q)))]]\n            [:div\n             (when-not (string/blank? before)\n               [:span before])\n             [:mark.p-0.rounded-none (subs content i (+ i (count q)))]\n             (when-not (string/blank? after)\n               [:span after])])\n          (let [elements (loop [words q-words\n                                content content\n                                result []]\n                           (if (and (seq words) content)\n                             (let [word (first words)\n                                   lc-word (util/search-normalize word)\n                                   lc-content (util/search-normalize content)]\n                               (if-let [i (string/index-of lc-content lc-word)]\n                                 (recur (rest words)\n                                        (subs content (+ i (count word)))\n                                        (vec\n                                         (concat result\n                                                 [[:span (subs content 0 i)]\n                                                  [:mark.p-0.rounded-none (subs content i (+ i (count word)))]])))\n                                 (recur nil\n                                        content\n                                        result)))\n                             (conj result [:span content])))]\n            [:p {:class \"m-0\"} elements]))))))\n\n(rum/defc search-result-item\n  [type content]\n  [:.text-sm.font-medium.flex.items-baseline\n   [:.text-xs.rounded.border.mr-2.px-1 {:title type}\n    (get type 0)]\n   content])\n\n(rum/defc block-search-result-item\n  [repo uuid format content q search-mode]\n  (let [content (search-handler/sanity-search-content format content)]\n    [:div\n     (when (not= search-mode :page)\n       [:div {:class \"mb-1\" :key \"parents\"}\n        (block/breadcrumb {:id \"block-search-block-parent\"\n                           :block? true\n                           :search? true}\n                          repo\n                          (clojure.core/uuid uuid)\n                          {:indent? false})])\n     [:div {:class \"font-medium\" :key \"content\"}\n      (highlight-exact-query content q)]]))\n\n(defonce search-timeout (atom nil))\n\n(defn- search-on-chosen-open-link\n  [repo search-q {:keys [data type alias]}]\n  (search-handler/add-search-to-recent! repo search-q)\n  (search-handler/clear-search!)\n  (case type\n    :block\n    ;; Open the first link in a block's content\n    (let [block-uuid (uuid (:block/uuid data))\n          block (:block/content (db/entity [:block/uuid block-uuid]))\n          link (re-find editor-handler/url-regex block)]\n      (if link\n        (js/window.open link)\n        (notification/show! \"No link found on this block.\" :warning)))\n\n    :page\n    ;; Open the first link found in a page's properties\n    (let [data (or alias data)\n          page (when data (db/entity [:block/name (util/page-name-sanity-lc data)]))\n          link (some #(re-find editor-handler/url-regex (val %)) (:block/properties page))]\n      (if link\n        (js/window.open link)\n        (notification/show! \"No link found on this page's properties.\" :warning)))\n\n    nil)\n  (state/close-modal!))\n\n(defn- search-on-chosen\n  [repo search-q {:keys [type data alias]}]\n  (search-handler/add-search-to-recent! repo search-q)\n  (search-handler/clear-search!)\n  (case type\n    :graph-add-filter\n    (state/add-graph-search-filter! search-q)\n\n    :new-page\n    (page-handler/create! search-q)\n\n    :page\n    (let [data (or alias data)]\n      (route/redirect-to-page! data))\n\n    :file\n    (route/redirect! {:to :file\n                      :path-params {:path data}})\n\n    :block\n    (let [block-uuid (uuid (:block/uuid data))\n          collapsed? (db/parents-collapsed? repo block-uuid)\n          page (:block/page (db/entity [:block/uuid block-uuid]))\n          long-page? (block-handler/long-page? repo (:db/id page))]\n      (if page\n        (if (or collapsed? long-page?)\n          (route/redirect-to-page! block-uuid)\n          (route/redirect-to-page! (:block/name page) (str \"ls-block-\" (:block/uuid data))))\n        ;; search indice outdated\n        (println \"[Error] Block page missing: \"\n                 {:block-id block-uuid\n                  :block (db/pull [:block/uuid block-uuid])})))\n    nil)\n  (state/close-modal!))\n\n(defn- search-on-shift-chosen\n  [repo search-q {:keys [type data alias]}]\n  (search-handler/add-search-to-recent! repo search-q)\n  (case type\n    :page\n    (let [data (or alias data)\n          page (when data (db/entity [:block/name (util/page-name-sanity-lc data)]))]\n      (when page\n        (state/sidebar-add-block!\n         repo\n         (:db/id page)\n         :page)))\n\n    :block\n    (let [block-uuid (uuid (:block/uuid data))\n          block (db/entity [:block/uuid block-uuid])]\n      (state/sidebar-add-block!\n       repo\n       (:db/id block)\n       :block))\n\n    :new-page\n    (page-handler/create! search-q)\n\n    :file\n    (route/redirect! {:to :file\n                      :path-params {:path data}})\n\n    nil)\n  (state/close-modal!))\n\n(defn- search-item-render\n  [search-q {:keys [type data alias]}]\n  (let [search-mode (state/get-search-mode)\n        data (if (string? data) (pdf-assets/fix-local-asset-filename data) data)]\n    [:div {:class \"py-2\"}\n     (case type\n       :graph-add-filter\n       [:b search-q]\n\n       :new-page\n       [:div.text.font-bold (str (t :new-page) \": \")\n        [:span.ml-1 (str \"\\\"\" search-q \"\\\"\")]]\n\n       :page\n       [:span {:data-page-ref data}\n        (when alias\n          (let [target-original-name (model/get-page-original-name alias)]\n            [:span.mr-2.text-sm.font-medium.mb-2 (str \"Alias -> \" target-original-name)]))\n        (search-result-item \"Page\" (highlight-exact-query data search-q))]\n\n       :file\n       (search-result-item \"File\" (highlight-exact-query data search-q))\n\n       :block\n       (let [{:block/keys [page uuid]} data  ;; content here is normalized\n             page (util/get-page-original-name page)\n             repo (state/sub :git/current-repo)\n             format (db/get-page-format page)\n             block (model/query-block-by-uuid uuid)\n             content (:block/content block)]\n         [:span {:data-block-ref uuid}\n          (search-result-item \"Block\"  (if block\n                                         (block-search-result-item repo uuid format content search-q search-mode)\n                                         (do (log/error \"search result with non-existing uuid: \" data)\n                                             (str \"Cache is outdated. Please click the 'Re-index' button in the graph's dropdown menu.\"))))])\n\n       nil)]))\n\n(rum/defc search-auto-complete\n  [{:keys [pages files blocks has-more?] :as result} search-q all?]\n  (let [pages (when-not all? (map (fn [page]\n                                    (let [alias (model/get-redirect-page-name page)]\n                                      (cond->\n                                        {:type :page\n                                         :data page}\n                                        (and alias\n                                             (not= (util/page-name-sanity-lc page)\n                                                   (util/page-name-sanity-lc alias)))\n                                        (assoc :alias alias))))\n                               (remove nil? pages)))\n        files (when-not all? (map (fn [file] {:type :file :data file}) files))\n        blocks (map (fn [block] {:type :block :data block}) blocks)\n        search-mode (state/sub :search/mode)\n        new-page (if (or\n                      (and (seq pages)\n                           (= (util/safe-page-name-sanity-lc search-q)\n                              (util/safe-page-name-sanity-lc (:data (first pages)))))\n                      (nil? result)\n                      all?)\n                   []\n                   [{:type :new-page}])\n        result (if config/publishing?\n                 (concat pages files blocks)\n                 (concat new-page pages files blocks))\n        result (if (= search-mode :graph)\n                 [{:type :graph-add-filter}]\n                 result)\n        repo (state/get-current-repo)]\n    [:div\n     (ui/auto-complete\n      result\n      {:class \"search-results\"\n       :on-chosen #(search-on-chosen repo search-q %)\n       :on-shift-chosen #(search-on-shift-chosen repo search-q %)\n       :item-render #(search-item-render search-q %)\n       :on-chosen-open-link #(search-on-chosen-open-link repo search-q %)})\n     (when (and has-more? (util/electron?) (not all?))\n       [:div.px-2.py-4.search-more\n        [:a.text-sm.font-medium {:href (rfe/href :search {:q search-q})\n                                 :on-click (fn []\n                                             (when-not (string/blank? search-q)\n                                               (search-handler/search (state/get-current-repo) search-q {:limit 1000\n                                                                                                         :more? true})\n                                               (search-handler/clear-search!)))}\n         (t :more)]])]))\n\n(rum/defc recent-search-and-pages\n  [in-page-search?]\n  [:div.recent-search\n   [:div.px-4.py-2.text-sm.opacity-70.flex.flex-row.justify-between.align-items\n    [:div \"Recent search:\"]\n    (ui/with-shortcut :go/search-in-page \"bottom\"\n      [:div.flex-row.flex.align-items\n       [:div.mr-2 \"Search in page:\"]\n       [:div {:style {:margin-top 3}}\n        (ui/toggle in-page-search?\n                   (fn [_value]\n                     (state/set-search-mode! (if in-page-search? :global :page)))\n                   true)]\n       (ui/tippy {:html [:div\n                         ;; TODO: fetch from config\n                         \"Tip: \" [:code (util/->platform-shortcut \"Ctrl + Shift + p\")] \" to open the commands palette\"]\n                  :interactive     true\n                  :arrow           true\n                  :theme       \"monospace\"}\n                 [:a.inline-block.fade-link\n                  {:style {:margin-left 12}\n                   :on-click #(state/toggle! :ui/command-palette-open?)}\n                  (ui/icon \"command\" {:style {:font-size 20}})])])]\n   (let [recent-search (mapv (fn [q] {:type :search :data q}) (db/get-key-value :recent/search))\n         pages (->> (db/get-key-value :recent/pages)\n                    (remove nil?)\n                    (filter string?)\n                    (remove #(= (string/lower-case %) \"contents\"))\n                    (mapv (fn [page] {:type :page :data page})))\n         result (concat (take 5 recent-search) pages)]\n     (ui/auto-complete\n      result\n      {:on-chosen (fn [{:keys [type data]}]\n                    (case type\n                      :page\n                      (do (route/redirect-to-page! data)\n                          (state/close-modal!))\n                      :search\n                      (let [q data]\n                        (state/set-q! q)\n                        (let [search-mode (state/get-search-mode)\n                              opts (if (= :page search-mode)\n                                     (let [current-page (or (state/get-current-page)\n                                                            (date/today))]\n                                       {:page-db-id (:db/id (db/entity [:block/name (util/page-name-sanity-lc current-page)]))})\n                                     {})]\n                          (if (= :page search-mode)\n                            (search-handler/search (state/get-current-repo) q opts)\n                            (search-handler/search (state/get-current-repo) q))))\n\n                      nil))\n       :on-shift-chosen (fn [{:keys [type data]}]\n                          (case type\n                            :page\n                            (let [page data]\n                              (when (string? page)\n                                (when-let [page (db/pull [:block/name (util/page-name-sanity-lc page)])]\n                                 (state/sidebar-add-block!\n                                  (state/get-current-repo)\n                                  (:db/id page)\n                                  :page))))\n\n                            nil))\n       :item-render (fn [{:keys [type data]}]\n                      (case type\n                        :search [:div.flex-row.flex.search-item.font-medium\n                                 svg/search\n                                 [:span.ml-2 data]]\n                        :page (when-let [original-name (model/get-page-original-name data)] ;; might be block reference\n                                (search-result-item \"Page\" original-name))\n                        nil))}))])\n\n(def default-placeholder\n  (if config/publishing? (t :search/publishing) (t :search)))\n\n(rum/defcs search-modal < rum/reactive\n  (shortcut/disable-all-shortcuts)\n  (mixins/event-mixin\n   (fn [state]\n     (mixins/hide-when-esc-or-outside\n      state\n      :on-hide (fn []\n                 (search-handler/clear-search!)))))\n  [state]\n  (let [search-result (state/sub :search/result)\n        search-q (state/sub :search/q)\n        search-mode (state/sub :search/mode)\n        timeout 300\n        in-page-search? (= search-mode :page)]\n    [:div.cp__palette.cp__palette-main\n     [:div.input-wrap\n      [:input.cp__palette-input.w-full\n       {:type          \"text\"\n        :auto-focus    true\n        :placeholder   (case search-mode\n                         :graph\n                         (t :graph-search)\n                         :page\n                         (t :page-search)\n                         default-placeholder)\n        :auto-complete (if (util/chrome?) \"chrome-off\" \"off\") ; off not working here\n        :value         search-q\n        :on-change     (fn [e]\n                         (when @search-timeout\n                           (js/clearTimeout @search-timeout))\n                         (let [value (util/evalue e)\n                               is-composing? (util/onchange-event-is-composing? e)] ;; #3199\n                           (if (and (string/blank? value) (not is-composing?))\n                             (search-handler/clear-search! false)\n                             (let [search-mode (state/get-search-mode)\n                                   opts (if (= :page search-mode)\n                                          (when-let [current-page (or (state/get-current-page)\n                                                                      (date/today))]\n                                            {:page-db-id (:db/id (db/entity [:block/name (util/page-name-sanity-lc current-page)]))})\n                                          {})]\n                               (state/set-q! value)\n                               (reset! search-timeout\n                                       (js/setTimeout\n                                        (fn []\n                                          (if (= :page search-mode)\n                                            (search-handler/search (state/get-current-repo) value opts)\n                                            (search-handler/search (state/get-current-repo) value)))\n                                        timeout))))))}]]\n     [:div.search-results-wrap\n      (if (seq search-result)\n        (search-auto-complete search-result search-q false)\n        (recent-search-and-pages in-page-search?))]]))\n\n(rum/defc more < rum/reactive\n  [route]\n  (let [search-q (get-in route [:path-params :q])\n        search-result (state/sub :search/more-result)]\n    [:div#search.flex-1.flex\n     [:div.inner\n      [:h1.title (t :search/result-for) [:i search-q]]\n      [:p.font-medium.tx-sm (str (count (:blocks search-result)) \" \" (t :search/items))]\n      [:div#search-wrapper.relative.w-full.text-gray-400.focus-within:text-gray-600\n       (when-not (string/blank? search-q)\n         (search-auto-complete search-result search-q true))]]]))\n"]}