shadow$provide.module$node_modules$chrono_node$dist$locales$de$constants=function(global,require,module,exports){function parseNumberPattern(match){match=match.toLowerCase();return void 0!==exports.INTEGER_WORD_DICTIONARY[match]?exports.INTEGER_WORD_DICTIONARY[match]:"a"===match||"an"===match?1:match.match(/few/)?3:match.match(/half/)?.5:match.match(/couple/)?2:match.match(/several/)?7:parseFloat(match)}Object.defineProperty(exports,"__esModule",{value:!0});exports.parseTimeUnits=exports.TIME_UNITS_PATTERN=
exports.parseYear=exports.YEAR_PATTERN=exports.parseNumberPattern=exports.NUMBER_PATTERN=exports.TIME_UNIT_DICTIONARY=exports.INTEGER_WORD_DICTIONARY=exports.MONTH_DICTIONARY=exports.WEEKDAY_DICTIONARY=void 0;global=require("module$node_modules$chrono_node$dist$utils$pattern");const years_1=require("module$node_modules$chrono_node$dist$calculation$years");exports.WEEKDAY_DICTIONARY={sonntag:0,so:0,montag:1,mo:1,dienstag:2,di:2,mittwoch:3,mi:3,donnerstag:4,"do":4,freitag:5,fr:5,samstag:6,sa:6};exports.MONTH_DICTIONARY=
{januar:1,jan:1,"jan.":1,februar:2,feb:2,"feb.":2,"märz":3,maerz:3,"mär":3,"mär.":3,mrz:3,"mrz.":3,april:4,apr:4,"apr.":4,mai:5,juni:6,jun:6,"jun.":6,juli:7,jul:7,"jul.":7,august:8,aug:8,"aug.":8,september:9,sep:9,"sep.":9,sept:9,"sept.":9,oktober:10,okt:10,"okt.":10,november:11,nov:11,"nov.":11,dezember:12,dez:12,"dez.":12};exports.INTEGER_WORD_DICTIONARY={eins:1,zwei:2,drei:3,vier:4,"fünf":5,fuenf:5,sechs:6,sieben:7,acht:8,neun:9,zehn:10,elf:11,"zwölf":12,zwoelf:12};exports.TIME_UNIT_DICTIONARY=
{sec:"second",second:"second",seconds:"second",min:"minute",mins:"minute",minute:"minute",minutes:"minute",h:"hour",hr:"hour",hrs:"hour",hour:"hour",hours:"hour",day:"d",days:"d",week:"week",weeks:"week",month:"month",months:"month",y:"year",yr:"year",year:"year",years:"year"};exports.NUMBER_PATTERN=`(?:${global.matchAnyPattern(exports.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s*an?)?|an?(?:\\s*few)?|few|several|a?\\s*couple\\s*(?:of)?)`;exports.parseNumberPattern=parseNumberPattern;
exports.YEAR_PATTERN="(?:[0-9]{1,4}(?:\\s*[vn]\\.?\\s*C(?:hr)?\\.?)?)";exports.parseYear=function(match){if(/v/i.test(match))return-parseInt(match.replace(/[^0-9]+/gi,""));if(/n/i.test(match))return parseInt(match.replace(/[^0-9]+/gi,""));match=parseInt(match);return years_1.findMostLikelyADYear(match)};require=`(${exports.NUMBER_PATTERN})\\s{0,5}(${global.matchAnyPattern(exports.TIME_UNIT_DICTIONARY)})\\s{0,5}`;const SINGLE_TIME_UNIT_REGEX=new RegExp(require,"i");exports.TIME_UNITS_PATTERN=global.repeatedTimeunitPattern("",
require);exports.parseTimeUnits=function(timeunitText){const fragments={};let match=SINGLE_TIME_UNIT_REGEX.exec(timeunitText);for(;match;){var fragments$jscomp$0=fragments,match$jscomp$0=match;const num=parseNumberPattern(match$jscomp$0[1]);match$jscomp$0=exports.TIME_UNIT_DICTIONARY[match$jscomp$0[2].toLowerCase()];fragments$jscomp$0[match$jscomp$0]=num;timeunitText=timeunitText.substring(match[0].length);match=SINGLE_TIME_UNIT_REGEX.exec(timeunitText)}return fragments}}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$de$constants.js.map
