{"version":3,"sources":["frontend/modules/instrumentation/posthog.cljs"],"mappings":";;AAQA,iDAAA,jDAAaA;AACb,kDAAA,lDAAaC;AAEb,oDAAA,pDAAMC;AAAN,AACE,OAACC,oDACA,qBAAA,2CAAA,hEAACC,6HACW,iBAAMC,WAAS,AAACC;AAAhB,AACE,oBACE,AAACC;AADH;;AAAA,oBAIEF;AACAA;;AALF,AAAA;;;;KAFd,qIAAA,qFAAA,iEAAA,IAAA,8EAAA,lTAWW,8CAAA,cAAA,1CAAIG,oHACJC,mKAGKR,AAAA,wEACHA,AAAA;;AAEhB,kDAAA,2CAAA,4DAAA,0BAAA,mEAAA,eAAA,mEAAA,MAAA,8FAAA,KAAA,sEAAA,KAAA,mGAAA,KAAA,pmBAAKS,8pBAOM,WAAKC;AAAL,AAAQ,OAACT;;AAEpB,gDAAA,hDAAMU;AAAN,AACE,OAACC,gDAAab,AAAA,8CAAM,AAACI,qBAAQM;;AAE/B,mDAAA,nDAAMI,8GAASC;AAAf,AACE,oBAAIA;AACF,OAACC;;AACD,AACE,AAACJ;;AACD,OAACK;;;AAEP,mDAAA,nDAAMC,8GAASC,GAAGC;AAAlB,AACE,IAAA,AACE,OAACE,mDAAgB,4CAAKH,IAAI,AAACI,uBAAUH;gBADvC,GAAA,CAAAC,kBAESG;AAFT,QAAAH,JAEkBI;AAFlB,AAGI,AAACC,cAAiBD;;AAHtB;;AAAA,AAAA,MAAAJ;;;;AAOF","names":["frontend.modules.instrumentation.posthog/token","frontend.modules.instrumentation.posthog/masked","frontend.modules.instrumentation.posthog/register","js/module$node_modules$posthog_js$dist$module.register","cljs.core/clj->js","platform","frontend.mobile.util/platform","frontend.util/electron?","frontend.config/dev?","frontend.version/version","frontend.modules.instrumentation.posthog/config","_","frontend.modules.instrumentation.posthog/init","js/module$node_modules$posthog_js$dist$module.init","frontend.modules.instrumentation.posthog/opt-out","opt-out?","js/module$node_modules$posthog_js$dist$module.opt_out_capturing","js/module$node_modules$posthog_js$dist$module.opt_in_capturing","frontend.modules.instrumentation.posthog/capture","id","data","e60880","js/module$node_modules$posthog_js$dist$module.capture","cljs-bean.core/->js","js/Error","e","js/console.error"],"sourcesContent":["(ns frontend.modules.instrumentation.posthog\n  (:require [frontend.config :as config]\n            [frontend.util :as util]\n            [frontend.mobile.util :as mobile]\n            [frontend.version :refer [version]]\n            [\"posthog-js\" :as posthog]\n            [cljs-bean.core :as bean]))\n\n(def ^:const token \"qUumrWobEk2dKiKt1b32CMEZy8fgNS94rb_Bq4WutPA\")\n(def ^:const masked \"masked\")\n\n(defn register []\n  (posthog/register\n   (clj->js\n    {:app_type (let [platform (mobile/platform)]\n                 (cond\n                   (util/electron?)\n                   \"electron\"\n\n                   platform\n                   platform\n\n                   :else\n                   \"web\"))\n     :app_env (if config/dev? \"development\" \"production\")\n     :app_ver version\n     :schema_ver 0\n     ;; hack, did not find ways to hack data on-the-fly with posthog-js\n     :$current_url masked\n     :$pathname masked})))\n\n(def config\n  {:api_host \"https://app.posthog.com\"\n   :persistence \"localStorage\"\n   :autocapture false\n   :disable_session_recording true\n   :mask_all_text true\n   :mask_all_element_attributes true\n   :loaded (fn [_] (register))})\n\n(defn init []\n  (posthog/init token (clj->js config)))\n\n(defn opt-out [opt-out?]\n  (if opt-out?\n    (posthog/opt_out_capturing)\n    (do\n      (init)\n      (posthog/opt_in_capturing))))\n\n(defn capture [id data]\n  (try\n    (posthog/capture (str id) (bean/->js data))\n    (catch js/Error e\n      (js/console.error e)\n      ;; opt out or network issues\n      nil)))\n\n(comment\n  (posthog/debug))\n"]}