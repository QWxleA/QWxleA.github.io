{
"version":3,
"file":"module$node_modules$fs_extra$lib$ensure$symlink_paths.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGlH,MAAMC,KAAOH,OAAA,CAAQ,2CAAR,CAAb,CACMI,GAAKJ,OAAA,CAAQ,6CAAR,CADX,CAEMK,WAAaL,OAAA,CAAQ,oDAAR,CAA0BK,CAAAA,UA2F7CJ,OAAOC,CAAAA,OAAP,CAAiB,CACfI,aApEFA,QAAsB,CAACC,OAAD,CAAUC,OAAV,CAAmBC,QAAnB,CAA6B,CACjD,GAAIN,IAAKO,CAAAA,UAAL,CAAgBH,OAAhB,CAAJ,CACE,MAAOH,GAAGO,CAAAA,KAAH,CAASJ,OAAT,CAAmBK,GAAD,EACnBA,GAAJ,EACEA,GAAIC,CAAAA,OACG,CADOD,GAAIC,CAAAA,OAAQC,CAAAA,OAAZ,CAAoB,OAApB,CAA6B,eAA7B,CACP,CAAAL,QAAA,CAASG,GAAT,CAFT;AAIOH,QAAA,CAAS,IAAT,CAAe,CACpBM,MAAOR,OADa,CAEpBS,MAAOT,OAFa,CAAf,CALF,CAWP,OAAMU,OAASd,IAAKe,CAAAA,OAAL,CAAaV,OAAb,CAAf,CACMW,cAAgBhB,IAAKiB,CAAAA,IAAL,CAAUH,MAAV,CAAkBV,OAAlB,CACtB,OAAOF,WAAA,CAAWc,aAAX,CAA0B,CAACP,YAAD,CAAMS,MAAN,CAAA,EAC3BT,YAAJ,CAAgBH,QAAA,CAASG,YAAT,CAAhB,CACIS,MAAJ,CACSZ,QAAA,CAAS,IAAT,CAAe,CACpBM,MAAOI,aADa,CAEpBH,MAAOT,OAFa,CAAf,CADT,CAMSH,EAAGO,CAAAA,KAAH,CAASJ,OAAT,CAAmBK,GAAD,EACnBA,GAAJ,EACEA,GAAIC,CAAAA,OACG,CADOD,GAAIC,CAAAA,OAAQC,CAAAA,OAAZ,CAAoB,OAApB,CAA6B,eAA7B,CACP,CAAAL,QAAA,CAASG,GAAT,CAFT,EAIOH,QAAA,CAAS,IAAT,CAAe,CACpBM,MAAOR,OADa,CAEpBS,MAAOb,IAAKmB,CAAAA,QAAL,CAAcL,MAAd,CAAsBV,OAAtB,CAFa,CAAf,CALF,CARJ,CAfwC,CAmElC,CAEfgB,iBA/BFA,QAA0B,CAAChB,OAAD,CAAUC,OAAV,CAAmB,CAE3C,GAAIL,IAAKO,CAAAA,UAAL,CAAgBH,OAAhB,CAAJ,CAA8B,CAC5Bc,OAAA;AAASjB,EAAGoB,CAAAA,UAAH,CAAcjB,OAAd,CACT,IAAI,CAACc,OAAL,CAAa,KAAUI,MAAJ,CAAU,iCAAV,CAAN,CACb,MAAO,CACLV,MAAOR,OADF,CAELS,MAAOT,OAFF,CAHqB,CAQ5B,MAAMU,OAASd,IAAKe,CAAAA,OAAL,CAAaV,OAAb,CAAf,CACMW,cAAgBhB,IAAKiB,CAAAA,IAAL,CAAUH,MAAV,CAAkBV,OAAlB,CAEtB,IADAc,OACA,CADSjB,EAAGoB,CAAAA,UAAH,CAAcL,aAAd,CACT,CACE,MAAO,CACLJ,MAAOI,aADF,CAELH,MAAOT,OAFF,CAKPc,QAAA,CAASjB,EAAGoB,CAAAA,UAAH,CAAcjB,OAAd,CACT,IAAI,CAACc,OAAL,CAAa,KAAUI,MAAJ,CAAU,iCAAV,CAAN,CACb,MAAO,CACLV,MAAOR,OADF,CAELS,MAAOb,IAAKmB,CAAAA,QAAL,CAAcL,MAAd,CAAsBV,OAAtB,CAFF,CArBgC,CA6B5B,CAhGiG;",
"sources":["node_modules/fs-extra/lib/ensure/symlink-paths.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fs_extra$lib$ensure$symlink_paths\"] = function(global,require,module,exports) {\n'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        toCwd: srcpath,\n        toDst: srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          toCwd: relativeToDst,\n          toDst: srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            toCwd: srcpath,\n            toDst: path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        toCwd: relativeToDst,\n        toDst: srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        toCwd: srcpath,\n        toDst: path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","path","fs","pathExists","symlinkPaths","srcpath","dstpath","callback","isAbsolute","lstat","err","message","replace","toCwd","toDst","dstdir","dirname","relativeToDst","join","exists","relative","symlinkPathsSync","existsSync","Error"]
}
