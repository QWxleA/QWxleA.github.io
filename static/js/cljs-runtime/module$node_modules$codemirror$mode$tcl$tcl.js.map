{
"version":3,
"file":"module$node_modules$codemirror$mode$tcl$tcl.js",
"lineCount":6,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAMvG,SAAQ,CAACC,GAAD,CAAM,CACS,QAAtB,EAAI,MAAOD,QAAX,EAAmD,QAAnD,EAAkC,MAAOD,OAAzC,CACEE,GAAA,CAAIH,OAAA,CAAQ,+CAAR,CAAJ,CADF,CAE0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAOC,CAAAA,GAA1C,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAP,CAAiCD,GAAjC,CADG,CAGHA,GAAA,CAAIG,UAAJ,CANW,CAAd,CAAD,CAOG,QAAQ,CAACA,UAAD,CAAa,CAGxBA,UAAWC,CAAAA,UAAX,CAAsB,KAAtB,CAA6B,QAAQ,EAAG,CACtCC,QAASA,WAAU,CAACC,GAAD,CAAM,CAAA,IACnBC,IAAM,EAAIC,IAAAA,CAAQF,GAAIG,CAAAA,KAAJ,CAAU,GAAV,CACtB,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBF,GAAMG,CAAAA,MAA1B,CAAkC,EAAED,CAApC,CAAuCH,GAAA,CAAIC,GAAA,CAAME,CAAN,CAAJ,CAAA,CAAgB,CAAA,CACvD,OAAOH,IAHgB,CAoBvBK,QAASA,MAAK,CAACC,MAAD;AAASC,KAAT,CAAgBC,CAAhB,CAAmB,CAC/BD,KAAME,CAAAA,QAAN,CAAiBD,CACjB,OAAOA,EAAA,CAAEF,MAAF,CAAUC,KAAV,CAFwB,CAIjCG,QAASA,UAAS,CAACJ,MAAD,CAASC,KAAT,CAAgB,CAChC,IAAII,aAAeJ,KAAMI,CAAAA,YACzBJ,MAAMI,CAAAA,YAAN,CAAqB,CAAA,CACrB,KAAIC,GAAKN,MAAOO,CAAAA,IAAP,EACT,IAAW,GAAX,EAAKD,EAAL,EAAwB,GAAxB,EAAkBA,EAAlB,EAAsCE,CAANP,KAAMO,CAAAA,QAAtC,CAEO,CAAA,GAAI,kBAAmBC,CAAAA,IAAnB,CAAwBH,EAAxB,CAAJ,CAGH,MAFQ,GAAV,EAAIA,EAAJ,EAAiBD,YAAjB,CAA+BJ,KAAMO,CAAAA,QAArC,CAAgD,CAAA,CAAhD,CACe,GADf,EACSF,EADT,GACoBL,KAAMO,CAAAA,QAD1B,CACqC,CAAA,CADrC,CAES,CAAA,IACJ,IAAI,IAAKC,CAAAA,IAAL,CAAUH,EAAV,CAAJ,CAEL,MADAN,OAAOU,CAAAA,QAAP,CAAgB,QAAhB,CACO,CAAA,QACF,IAAU,GAAV,EAAIJ,EAAJ,CAAe,CACpB,GAAIN,MAAOW,CAAAA,GAAP,CAAW,GAAX,CAAJ,CACE,MAAOZ,MAAA,CAAMC,MAAN,CAAcC,KAAd,CAAqBW,YAArB,CACT,IAAU,GAAV,EAAIN,EAAJ,EAAiBN,MAAOa,CAAAA,KAAP,CAAa,UAAb,CAAjB,CACE,MAAOd,MAAA,CAAMC,MAAN,CAAcC,KAAd;AAAqBa,aAArB,CACTd,OAAOe,CAAAA,SAAP,EACA,OAAO,SANa,CAOf,GAAU,GAAV,EAAIT,EAAJ,CAEL,MADAN,OAAOgB,CAAAA,MAAP,CAAc,GAAd,CACO,CAAA,SACF,IAAU,GAAV,EAAIV,EAAJ,CAIL,MAHAN,OAAOU,CAAAA,QAAP,CAAgB,mBAAhB,CAGO,CAFPV,MAAOU,CAAAA,QAAP,CAAgB,GAAhB,CAEO,CADPT,KAAMI,CAAAA,YACC,CADc,CAAA,CACd,CAAA,SACF,IAAIY,cAAeR,CAAAA,IAAf,CAAoBH,EAApB,CAAJ,CAEL,MADAN,OAAOU,CAAAA,QAAP,CAAgBO,cAAhB,CACO,CAAA,SAEPjB,OAAOU,CAAAA,QAAP,CAAgB,sBAAhB,CACIQ,OAAAA,CAAOlB,MAAOmB,CAAAA,OAAP,EAAiBC,CAAAA,WAAjB,EACX,OAAIC,SAAJ,EAAgBA,QAASC,CAAAA,oBAAT,CAA8BJ,MAA9B,CAAhB,CACS,SADT,CAEIK,SAAJ,EAAiBA,SAAUD,CAAAA,oBAAV,CAA+BJ,MAA/B,CAAjB,EACEjB,KAAMI,CAAAA,YACC,CADc,CAAA,CACd,CAAA,SAFT;AAIO,IAlCF,CADL,MAAON,MAAA,CAAMC,MAAN,CAAcC,KAAd,CAAqBuB,WAAA,CAAYlB,EAAZ,CAArB,CALuB,CA2ClCkB,QAASA,YAAW,CAACC,KAAD,CAAQ,CAC1B,MAAO,SAAQ,CAACzB,MAAD,CAASC,KAAT,CAAgB,CAE/B,IAF+B,IAC3ByB,QAAU,CAAA,CADiB,CACVnB,IADU,CACJoB,IAAM,CAAA,CACjC,CAAiC,IAAjC,GAAQpB,IAAR,CAAeP,MAAOO,CAAAA,IAAP,EAAf,EAAA,CAAuC,CACrC,GAAIA,IAAJ,EAAYkB,KAAZ,EAAqB,CAACC,OAAtB,CAA+B,CAC7BC,GAAA,CAAM,CAAA,CACN,MAF6B,CAI/BD,OAAA,CAAU,CAACA,OAAX,EAA8B,IAA9B,EAAsBnB,IALe,CAOnCoB,GAAJ,GAAS1B,KAAME,CAAAA,QAAf,CAA0BC,SAA1B,CACE,OAAO,QAVsB,CADL,CAc5BQ,QAASA,aAAY,CAACZ,MAAD,CAASC,KAAT,CAAgB,CAEnC,IAFmC,IAC/B2B,SAAW,CAAA,CADoB,CACbtB,EACtB,CAAOA,EAAP,CAAYN,MAAOO,CAAAA,IAAP,EAAZ,CAAA,CAA2B,CACzB,GAAU,GAAV,EAAID,EAAJ,EAAiBsB,QAAjB,CAA2B,CACzB3B,KAAME,CAAAA,QAAN,CAAiBC,SACjB,MAFyB,CAI3BwB,QAAA,CAAkB,GAAlB,EAAYtB,EALa,CAO3B,MAAO,SAT4B,CAWrCQ,QAASA,cAAa,CAACd,MAAD,CAASC,KAAT,CAAgB,CAEpC,IAFoC,IAChC2B,SAAW,CADqB;AAClBtB,EAClB,CAAOA,EAAP,CAAYN,MAAOO,CAAAA,IAAP,EAAZ,CAAA,CAA2B,CACzB,GAAU,GAAV,EAAID,EAAJ,EAA6B,CAA7B,EAAiBsB,QAAjB,CAAgC,CAC9B3B,KAAME,CAAAA,QAAN,CAAiBC,SACjB,MAF8B,CAItB,GAAV,EAAIE,EAAJ,CACEsB,QAAA,EADF,CAEe,GAFf,EAEStB,EAFT,GAGEsB,QAHF,CAGa,CAHb,CALyB,CAU3B,MAAO,MAZ6B,CAvFxC,IAAIP,SAAW7B,UAAA,CAAW,6zBAAX,CAAf;AAaM+B,UAAY/B,UAAA,CAAW,gEAAX,CAblB,CAcMyB,eAAiB,oBAuFrB,OAAO,CACLY,WAAYA,QAAQ,EAAG,CACrB,MAAO,CACL1B,SAAUC,SADL,CAELC,aAAc,CAAA,CAFT,CAGLG,SAAU,CAAA,CAHL,CADc,CADlB,CAQLsB,MAAOA,QAAQ,CAAC9B,MAAD,CAASC,KAAT,CAAgB,CAC7B,MAAID,OAAO+B,CAAAA,QAAP,EAAJ,CAA8B,IAA9B,CACO9B,KAAME,CAAAA,QAAN,CAAeH,MAAf,CAAuBC,KAAvB,CAFsB,CAR1B,CAYL+B,YAAa,GAZR,CA3G6B,CAAxC,CA0HA1C,WAAW2C,CAAAA,UAAX,CAAsB,YAAtB,CAAoC,KAApC,CA7HwB,CAPxB,CANwG;",
"sources":["node_modules/codemirror/mode/tcl/tcl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$tcl$tcl\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n//tcl mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"tcl\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n        \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n        \"binary break catch cd close concat continue dde eof encoding error \" +\n        \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n        \"filename flush for foreach format gets glob global history http if \" +\n        \"incr info interp join lappend lindex linsert list llength load lrange \" +\n        \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n        \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n        \"registry regsub rename resource return scan seek set socket source split \" +\n        \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n        \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n        \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n    \"vwait\");\n    var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n    var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n    function chain(stream, state, f) {\n      state.tokenize = f;\n      return f(stream, state);\n    }\n    function tokenBase(stream, state) {\n      var beforeParams = state.beforeParams;\n      state.beforeParams = false;\n      var ch = stream.next();\n      if ((ch == '\"' || ch == \"'\") && state.inParams) {\n        return chain(stream, state, tokenString(ch));\n      } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n        if (ch == \"(\" && beforeParams) state.inParams = true;\n        else if (ch == \")\") state.inParams = false;\n          return null;\n      } else if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      } else if (ch == \"#\") {\n        if (stream.eat(\"*\"))\n          return chain(stream, state, tokenComment);\n        if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n          return chain(stream, state, tokenUnparsed);\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (ch == '\"') {\n        stream.skipTo(/\"/);\n        return \"comment\";\n      } else if (ch == \"$\") {\n        stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n        stream.eatWhile(/}/);\n        state.beforeParams = true;\n        return \"builtin\";\n      } else if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"comment\";\n      } else {\n        stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n        var word = stream.current().toLowerCase();\n        if (keywords && keywords.propertyIsEnumerable(word))\n          return \"keyword\";\n        if (functions && functions.propertyIsEnumerable(word)) {\n          state.beforeParams = true;\n          return \"keyword\";\n        }\n        return null;\n      }\n    }\n    function tokenString(quote) {\n      return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end) state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n    function tokenComment(stream, state) {\n      var maybeEnd = false, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        maybeEnd = (ch == \"*\");\n      }\n      return \"comment\";\n    }\n    function tokenUnparsed(stream, state) {\n      var maybeEnd = 0, ch;\n      while (ch = stream.next()) {\n        if (ch == \"#\" && maybeEnd == 2) {\n          state.tokenize = tokenBase;\n          break;\n        }\n        if (ch == \"]\")\n          maybeEnd++;\n        else if (ch != \" \")\n          maybeEnd = 0;\n      }\n      return \"meta\";\n    }\n    return {\n      startState: function() {\n        return {\n          tokenize: tokenBase,\n          beforeParams: false,\n          inParams: false\n        };\n      },\n      token: function(stream, state) {\n        if (stream.eatSpace()) return null;\n        return state.tokenize(stream, state);\n      },\n      lineComment: \"#\"\n    };\n});\nCodeMirror.defineMIME(\"text/x-tcl\", \"tcl\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","parseWords","str","obj","words","split","i","length","chain","stream","state","f","tokenize","tokenBase","beforeParams","ch","next","inParams","test","eatWhile","eat","tokenComment","match","tokenUnparsed","skipToEnd","skipTo","isOperatorChar","word","current","toLowerCase","keywords","propertyIsEnumerable","functions","tokenString","quote","escaped","end","maybeEnd","startState","token","eatSpace","lineComment","defineMIME"]
}
