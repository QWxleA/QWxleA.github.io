{"version":3,"sources":["frontend/extensions/excalidraw.cljs"],"mappings":"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","names":["frontend.extensions.excalidraw/excalidraw","frontend.rum.adapt_class","frontend.extensions.excalidraw.goog$module$goog$object.get","js/module$node_modules$$excalidraw$excalidraw$dist$excalidraw_production_min","frontend.extensions.excalidraw/serialize-as-json","frontend.extensions.excalidraw/from-json","text","clojure.string/blank?","e73628","js/JSON.parse","js/Error","e","cljs.core.println","js/console.dir","frontend.handler.notification.show_BANG_","frontend.util/format","frontend.extensions.excalidraw/update-draw-content-width","state","temp__5720__auto__","el","rum.core/dom-node","width","cljs.core/reset!","rum.core/lazy-build","rum.core/build-defcs","map__73629","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","daiquiri.interpreter/interpret","cljs.core/deref","frontend.extensions.excalidraw/draw-inner","rum.core/reactive","rum.core.local","data","option","*draw-width","*zen-mode?","*view-mode?","*grid-mode?","wide-mode?","frontend.state/sub","*elements","file","block-uuid","frontend.util/stop","frontend.handler.ui/toggle-wide-mode!","frontend.util.format","cljs.core.swap_BANG_","cljs.core/not","block","G__73630","frontend.db/pull","frontend.handler.editor.edit_block_BANG_","frontend.state/set-block-component-editing-mode!","G__73638","cljs.core.merge","elements","app-state","or__4253__auto__","cljs.core._EQ_","elements->clj","cljs-bean.core/->clj","cljs.core/seq","cljs.core.not_EQ_","frontend.handler.draw/save-excalidraw!","attrs73644","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","frontend.extensions.excalidraw/draw-container","vec__73649","cljs.core.nth","*data","cljs.core.atom","*loading?","frontend.handler.draw/load-excalidraw-file","cljs.core.assoc","loading?","rum.core/react","db-restoring?","frontend.ui/loading","rum.core/build-defc","frontend.extensions.excalidraw/draw","repo","frontend.state/get-current-repo","granted?","frontend.config/local-db?","frontend.util/electron?","frontend.mobile.util/is-native-platform?"],"sourcesContent":["(ns frontend.extensions.excalidraw\n  (:require [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            ;; NOTE: Always use production build of excalidraw\n            ;; See-also: https://github.com/excalidraw/excalidraw/pull/3330\n            [\"@excalidraw/excalidraw/dist/excalidraw.production.min\" :as Excalidraw]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.draw :as draw]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.rum :as r]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [rum.core :as rum]\n            [frontend.mobile.util :as mobile-util]))\n\n(def excalidraw (r/adapt-class (gobj/get Excalidraw \"default\")))\n(def serialize-as-json (gobj/get Excalidraw \"serializeAsJSON\"))\n\n(defn from-json\n  [text]\n  (when-not (string/blank? text)\n    (try\n      (js/JSON.parse text)\n      (catch js/Error e\n        (println \"from json error:\")\n        (js/console.dir e)\n        (notification/show!\n         (util/format \"Could not load this invalid excalidraw file\")\n         :error)))))\n\n(defn- update-draw-content-width\n  [state]\n  (when-let [el ^js (rum/dom-node state)]\n    (loop [el (.querySelector el \".draw-wrap\")]\n      (cond\n        (or (nil? el) (undefined? el) (undefined? (.-classList el)))\n        nil\n\n        (..  el -classList (contains \"block-content\"))\n        (let [width (.-clientWidth el)]\n          (reset! (::draw-width state) width))\n\n        :else\n        (recur (.-parentNode el))))\n    state))\n\n(rum/defcs draw-inner < rum/reactive\n  (rum/local 800 ::draw-width)\n  (rum/local true ::zen-mode?)\n  (rum/local false ::view-mode?)\n  (rum/local false ::grid-mode?)\n  (rum/local nil ::elements)\n  {:did-mount update-draw-content-width\n   :did-update update-draw-content-width}\n  [state data option]\n  (let [*draw-width (get state ::draw-width)\n        *zen-mode? (get state ::zen-mode?)\n        *view-mode? (get state ::view-mode?)\n        *grid-mode? (get state ::grid-mode?)\n        wide-mode? (state/sub :ui/wide-mode?)\n        *elements (get state ::elements)\n        {:keys [file block-uuid]} option]\n    (when data\n      [:div.overflow-hidden {:on-mouse-down (fn [e] (util/stop e))}\n       [:div.my-1 {:style {:font-size 10}}\n        [:a.mr-2 {:on-click ui-handler/toggle-wide-mode!}\n         (util/format \"Wide Mode (%s)\" (if wide-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *zen-mode? not)}\n         (util/format \"Zen Mode (%s)\" (if @*zen-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *view-mode? not)}\n         (util/format \"View Mode (%s)\" (if @*view-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *grid-mode? not)}\n         (util/format \"Grid Mode (%s)\" (if @*view-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(when-let [block (db/pull [:block/uuid block-uuid])]\n                               (editor-handler/edit-block! block :max block-uuid))}\n         \"Edit Block\"]]\n       [:div.draw-wrap\n        {:on-mouse-down (fn [e]\n                          (util/stop e)\n                          (state/set-block-component-editing-mode! true))\n         :on-blur #(state/set-block-component-editing-mode! false)\n         :style {:width  @*draw-width\n                 :height (if wide-mode? 650 500)}}\n        (excalidraw\n         (merge\n          {:on-change (fn [elements app-state]\n                        (when-not (or (= \"down\" (gobj/get app-state \"cursorButton\"))\n                                      (gobj/get app-state \"draggingElement\")\n                                      (gobj/get app-state \"editingElement\")\n                                      (gobj/get app-state \"editingGroupId\")\n                                      (gobj/get app-state \"editingLinearElement\"))\n                          (let [elements->clj (bean/->clj elements)]\n                            (when (and (seq elements->clj)\n                                       (not= elements->clj @*elements)) ;; not= requires clj collections\n                              (reset! *elements elements->clj)\n                              (draw/save-excalidraw!\n                               file\n                               (serialize-as-json elements app-state))))))\n           \n           :zen-mode-enabled @*zen-mode?\n           :view-mode-enabled @*view-mode?\n           :grid-mode-enabled @*grid-mode?\n           :initial-data data}))]])))\n\n(rum/defcs draw-container < rum/reactive\n  {:init (fn [state]\n           (let [[option] (:rum/args state)\n                 file (:file option)\n                 *data (atom nil)\n                 *loading? (atom true)]\n             (when file\n               (draw/load-excalidraw-file\n                file\n                (fn [data]\n                  (let [data (from-json data)]\n                    (reset! *data data)\n                    (reset! *loading? false)))))\n             (assoc state\n                    ::data *data\n                    ::loading? *loading?)))}\n  [state option]\n  (let [*data (get state ::data)\n        *loading? (get state ::loading?)\n        loading? (rum/react *loading?)\n        data (rum/react *data)\n        db-restoring? (state/sub :db/restoring?)]\n    (when (:file option)\n      (cond\n        db-restoring?\n        [:div.ls-center\n         (ui/loading \"Loading\")]\n\n        (false? loading?)\n        (draw-inner data option)\n\n        :else\n        nil))))\n\n(rum/defc draw < rum/reactive\n  [option]\n  (let [repo (state/get-current-repo)\n        granted? (state/sub [:nfs/user-granted? repo])]\n    ;; Web granted\n    (when-not (and (config/local-db? repo)\n                   (not granted?)\n                   (not (util/electron?))\n                   (not (mobile-util/is-native-platform?)))\n      (draw-container option))))\n"]}