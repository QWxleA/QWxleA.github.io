{
"version":3,
"file":"module$node_modules$pako$lib$inflate.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/pako/lib/inflate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pako$lib$inflate\"] = function(global,require,module,exports) {\n'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Inflate","options","opt","utils","assign","chunkSize","windowBits","to","raw","err","msg","ended","chunks","strm","ZStream","avail_out","status","zlib_inflate","inflateInit2","c","Z_OK","Error","header","GZheader","inflateGetHeader","dictionary","strings","string2buf","toString","call","Uint8Array","inflateSetDictionary","inflate","input","inflator","push","result","Object","prototype","Inflate.prototype.push","data","mode","allowBufError","_mode","Z_FINISH","Z_NO_FLUSH","binstring2buf","next_in","avail_in","length","output","Buf8","next_out","Z_NEED_DICT","Z_BUF_ERROR","Z_STREAM_END","onEnd","Z_SYNC_FLUSH","next_out_utf8","utf8border","tail","utf8str","buf2string","arraySet","onData","shrinkBuf","inflateEnd","Inflate.prototype.onData","chunk","Inflate.prototype.onEnd","join","flattenChunks","inflateRaw","ungzip"]
}
