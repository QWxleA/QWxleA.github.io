{"version":3,"sources":["frontend/fs/capacitor_fs.cljs"],"mappings":"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","names":["frontend.mobile.util/native-ios?","frontend.fs.capacitor-fs/iOS-ensure-documents!","frontend.mobile.util/ios-file-container","frontend.fs.capacitor-fs/check-permission-android","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","permission","js/module$node_modules$$capacitor$filesystem$dist$plugin_cjs.Filesystem","cljs-bean.core/->clj","cljs.core._EQ_","___42616__auto__","frontend.fs.capacitor-fs/clean-uri","uri","frontend.util/url-decode","frontend.fs.capacitor-fs/read-file-utf8","path","clojure.string/blank?","cljs.core/clj->js","js/module$node_modules$$capacitor$filesystem$dist$plugin_cjs.Encoding","frontend.fs.capacitor-fs/readdir","result","result56843","dirs56844","promesa.core.then","promesa.core/all","p__56857","vec__56858","cljs.core.nth","internal-loop-fn-name42653","dirs","cljs.core/empty?","d","cljs.core/first","files","cljs.core.js__GT_clj","cljs.core.get","cljs.core.remove","file","or__4253__auto__","clojure.string/starts-with?","and__4251__auto__","frontend.mobile.util/native-android?","clojure.string/includes?","cljs.core.map","clojure.string/replace","frontend.util/url-encode","files-with-stats","cljs.core.mapv","p1__56839#","promesa.core.chain","files-dir","cljs.core/filterv","p__56863","map__56864","cljs.core/--destructure-map","type","cljs.core/contains?","files-result","cljs.core.filter","p__56869","map__56870","p__56867","map__56868","p1__56840#","cljs.core/some","clojure.string/ends-with?","p__56865","map__56866","file-result","p1__56841#","p1__56842#","cljs.core.assoc","cljs.core.concat","cljs.core/rest","cljs.core.update","frontend.fs.capacitor-fs/contents-matched?","disk-content","db-content","frontend.encrypt/encrypted-db?","frontend.state/get-current-repo","decrypted-content","frontend.encrypt.decrypt","clojure.string/trim","promesa.core/resolved","p__56872","map__56873","frontend.fs.capacitor-fs/write-file-impl!","_this","repo","_dir","content","ok-handler","error-handler","old-content","skip-compare?","stat","promesa.core.catch$","error","lambdaisland.glogi.log","cljs.core/identity","p1__56871#","js/console.error","ext","clojure.string/lower-case","frontend.util/get-file-ext","G__56875","G__56876","frontend.db/get-file","js/decodeURI","contents-matched?","pending-writes","frontend.state/get-write-chan-length","cljs.core.not_EQ_","cljs.core/not","frontend.state/pub-event!","G__56877","G__56878","G__56879","frontend.db/set-file-content!","frontend.fs.capacitor-fs/get-file-path","dir","vec__56881","p1__56880#","G__56884","G__56885","js/encodeURI","frontend.fs.capacitor-fs/local-container-path?","localDocumentsPath","frontend.fs.capacitor-fs/iCloud-container-path?","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","frontend.fs.capacitor-fs/instruction","this__4502__auto__","k__4503__auto__","this__4504__auto__","k56906","else__4505__auto__","G__56911","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__56917","vec__56920","k__4526__auto__","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","G__56905","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this56907","other56908","this__4512__auto__","k__4513__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","this__4510__auto__","k__4511__auto__","pred__56928","cljs.core/keyword-identical?","expr__56929","this__4515__auto__","cljs.core/seq","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","cljs.core/PROTOCOL_SENTINEL","p__57001","map__57002","frontend.fs.capacitor-fs/Capacitorfs","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__56909","extmap__4542__auto__","G__57003","cljs.core/record?","frontend.fs.capacitor-fs/->Capacitorfs","frontend.fs.capacitor-fs/map->Capacitorfs","js/console.log","_repo","_path","_opts","_options","this","opts","_e","old-path","new-path","vec__56945","p1__56903#","_","_ok-handler","p__56956","map__56957","frontend.mobile.util/platform","p1__56904#","frontend.mobile.util/folder-picker","frontend.mobile.util/sync-icloud-repo","path-or-handle","___42615__auto__","frontend.mobile.util/fs-watcher"],"sourcesContent":["(ns frontend.fs.capacitor-fs\n  (:require [\"@capacitor/filesystem\" :refer [Encoding Filesystem]]\n            [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            [frontend.fs.protocol :as protocol]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.util :as util]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.state :as state]\n            [frontend.db :as db]\n            [frontend.encrypt :as encrypt]))\n\n(when (mobile-util/native-ios?)\n  (defn iOS-ensure-documents!\n    []\n    (.ensureDocuments mobile-util/ios-file-container)))\n\n(defn check-permission-android []\n  (p/let [permission (.checkPermissions Filesystem)\n          permission (-> permission\n                         bean/->clj\n                         :publicStorage)]\n    (when-not (= permission \"granted\")\n      (p/do!\n       (.requestPermissions Filesystem)))))\n\n(defn- clean-uri\n  [uri]\n  (when (string? uri)\n    (util/url-decode uri)))\n\n(defn- read-file-utf8\n  [path]\n  (when-not (string/blank? path)\n    (.readFile Filesystem\n               (clj->js\n                {:path path\n                 :encoding (.-UTF8 Encoding)}))))\n\n(defn readdir\n  \"readdir recursively\"\n  [path]\n  (p/let [result (p/loop [result []\n                          dirs [path]]\n                   (if (empty? dirs)\n                     result\n                     (p/let [d (first dirs)\n                             files (.readdir Filesystem (clj->js {:path d}))\n                             files (-> files\n                                       js->clj\n                                       (get \"files\" []))\n                             files (->> files\n                                        (remove (fn [file]\n                                                  (or (string/starts-with? file \".\")\n                                                      (and (mobile-util/native-android?)\n                                                           (or (string/includes? file \"#\")\n                                                               (string/includes? file \"%\")))\n                                                      (= file \"bak\")))))\n                             files (->> files\n                                        (map (fn [file]\n                                               (str (string/replace d #\"/+$\" \"\")\n                                                    \"/\"\n                                                    (if (mobile-util/native-ios?)\n                                                      (util/url-encode file)\n                                                      file)))))\n                             files-with-stats (p/all\n                                               (mapv\n                                                (fn [file]\n                                                  (p/chain\n                                                   (.stat Filesystem (clj->js {:path file}))\n                                                   #(js->clj % :keywordize-keys true)))\n                                                files))\n                             files-dir (->> files-with-stats\n                                            (filterv\n                                             (fn [{:keys [type]}]\n                                               (contains? #{\"directory\" \"NSFileTypeDirectory\"} type)))\n                                            (mapv :uri))\n                             files-result\n                             (p/all\n                              (->> files-with-stats\n                                   (filter\n                                    (fn [{:keys [type]}]\n                                      (contains? #{\"file\" \"NSFileTypeRegular\"} type)))\n                                   (filter\n                                    (fn [{:keys [uri]}]\n                                      (some #(string/ends-with? uri %)\n                                            [\".md\" \".markdown\" \".org\" \".edn\" \".css\"])))\n                                   (mapv\n                                    (fn [{:keys [uri] :as file-result}]\n                                      (p/chain\n                                       (read-file-utf8 uri)\n                                       #(js->clj % :keywordize-keys true)\n                                       :data\n                                       #(assoc file-result :content %))))))]\n                       (p/recur (concat result files-result)\n                                (concat (rest dirs) files-dir)))))\n          result (js->clj result :keywordize-keys true)]\n    (map (fn [result] (update result :uri clean-uri)) result)))\n\n(defn- contents-matched?\n  [disk-content db-content]\n  (when (and (string? disk-content) (string? db-content))\n    (if (encrypt/encrypted-db? (state/get-current-repo))\n      (p/let [decrypted-content (encrypt/decrypt disk-content)]\n        (= (string/trim decrypted-content) (string/trim db-content)))\n      (p/resolved (= (string/trim disk-content) (string/trim db-content))))))\n\n(defn- write-file-impl!\n  [_this repo _dir path content {:keys [ok-handler error-handler old-content skip-compare?]} stat]\n  (if skip-compare?\n    (p/catch\n     (p/let [result (.writeFile Filesystem (clj->js {:path path\n                                                     :data content\n                                                     :encoding (.-UTF8 Encoding)\n                                                     :recursive true}))]\n       (when ok-handler\n         (ok-handler repo path result)))\n     (fn [error]\n       (if error-handler\n         (error-handler error)\n         (log/error :write-file-failed error))))\n\n    (p/let [disk-content (-> (p/chain (read-file-utf8 path)\n                                      #(js->clj % :keywordize-keys true)\n                                      :data)\n                             (p/catch (fn [error]\n                                        (js/console.error error)\n                                        nil)))\n            disk-content (or disk-content \"\")\n            ext (string/lower-case (util/get-file-ext path))\n            db-content (or old-content (db/get-file repo (js/decodeURI path)) \"\")\n            contents-matched? (contents-matched? disk-content db-content)\n            pending-writes (state/get-write-chan-length)]\n      (cond\n        (and\n         (not= stat :not-found)   ; file on the disk was deleted\n         (not contents-matched?)\n         (not (contains? #{\"excalidraw\" \"edn\" \"css\"} ext))\n         (not (string/includes? path \"/.recycle/\"))\n         (zero? pending-writes))\n        (p/let [disk-content (encrypt/decrypt disk-content)]\n          (state/pub-event! [:file/not-matched-from-disk path disk-content content]))\n\n        :else\n        (->\n         (p/let [result (.writeFile Filesystem (clj->js {:path path\n                                                         :data content\n                                                         :encoding (.-UTF8 Encoding)\n                                                         :recursive true}))]\n           (p/let [content (if (encrypt/encrypted-db? (state/get-current-repo))\n                             (encrypt/decrypt content)\n                             content)]\n             (db/set-file-content! repo (js/decodeURI path) content))\n           (when ok-handler\n             (ok-handler repo path result))\n           result)\n         (p/catch (fn [error]\n                    (if error-handler\n                      (error-handler error)\n                      (log/error :write-file-failed error)))))))))\n\n(defn get-file-path [dir path]\n  (let [[dir path] (map #(some-> %\n                                 js/decodeURI)\n                        [dir path])\n        dir (string/replace dir #\"/+$\" \"\")\n        path (some-> path (string/replace #\"^/+\" \"\"))\n        path (cond (nil? path)\n                   dir\n\n                   (string/starts-with? path dir)\n                   path\n\n                   :else\n                   (str dir \"/\" path))]\n    (if (mobile-util/native-ios?)\n      (js/encodeURI (js/decodeURI path))\n      path)))\n\n(defn- local-container-path?\n  \"Check whether `path' is logseq's container `localDocumentsPath' on iOS\"\n  [path localDocumentsPath]\n  (string/includes? path localDocumentsPath))\n\n(defn- iCloud-container-path?\n  \"Check whether `path' is logseq's iCloud container path on iOS\"\n  [path]\n  (string/includes? path \"iCloud~com~logseq~logseq\"))\n\n(rum/defc instruction\n  []\n  [:div.instruction\n   [:h1.title \"Please choose a valid directory!\"]\n   [:p.leading-6 \"Logseq app can only save or access your graphs stored in a specific directory with a \"\n    [:strong \"Logseq icon\"]\n    \" inside, located either in \\\"iCloud Drive\\\", \\\"On My iPhone\\\" or \\\"On My iPad\\\".\"]\n   [:p.leading-6 \"Please watch the following short instruction video. \"\n    [:small.text-gray-500 \"(may take few seconds to load...)\"]]\n   [:iframe\n    {:src \"https://www.loom.com/embed/dae612ae5fd94e508bd0acdf02efb888\"\n     :frame-border \"0\"\n     :position \"relative\"\n     :allow-full-screen \"allowfullscreen\"\n     :webkit-allow-full-screen \"webkitallowfullscreen\"\n     :height \"100%\"}]])\n\n(defrecord Capacitorfs []\n  protocol/Fs\n  (mkdir! [_this dir]\n    (p/let [result (.mkdir Filesystem\n                           (clj->js\n                            {:path dir\n                             ;; :directory (.-ExternalStorage Directory)\n                             }))]\n      (js/console.log result)\n      result))\n  (mkdir-recur! [_this dir]\n    (p/let [result (.mkdir Filesystem\n                           (clj->js\n                            {:path dir\n                             ;; :directory (.-ExternalStorage Directory)\n                             :recursive true}))]\n      (js/console.log result)\n      result))\n  (readdir [_this dir]                  ; recursive\n    (readdir dir))\n  (unlink! [_this _repo _path _opts]\n    nil)\n  (rmdir! [_this _dir]\n    ;; Too dangerious!!! We'll never implement this.\n    nil)\n  (read-file [_this dir path _options]\n    (let [path (get-file-path dir path)]\n      (->\n       (p/let [content (read-file-utf8 path)\n               content (-> (js->clj content :keywordize-keys true)\n                           :data\n                           clj->js)]\n         content)\n       (p/catch (fn [error]\n                  (log/error :read-file-failed error))))))\n  (delete-file! [_this repo dir path {:keys [ok-handler error-handler]}]\n    (let [path (get-file-path dir path)]\n      (p/catch\n       (p/let [result (.deleteFile Filesystem\n                                   (clj->js\n                                    {:path path}))]\n         (when ok-handler\n           (ok-handler repo path result)))\n       (fn [error]\n         (if error-handler\n           (error-handler error)\n           (log/error :delete-file-failed error))))))\n  (write-file! [this repo dir path content opts]\n    (let [path (get-file-path dir path)]\n      (p/let [stat (p/catch\n                    (.stat Filesystem (clj->js {:path path}))\n                    (fn [_e] :not-found))]\n        (write-file-impl! this repo dir path content opts stat))))\n  (rename! [_this _repo old-path new-path]\n    (let [[old-path new-path] (map #(get-file-path \"\" %) [old-path new-path])]\n      (p/catch\n       (p/let [_ (.rename Filesystem\n                          (clj->js\n                           {:from old-path\n                            :to new-path}))])\n       (fn [error]\n         (log/error :rename-file-failed error)))))\n  (stat [_this dir path]\n    (let [path (get-file-path dir path)]\n      (p/let [result (.stat Filesystem (clj->js\n                                        {:path path\n                                         ;; :directory (.-ExternalStorage Directory)\n                                         }))]\n        result)))\n  (open-dir [_this _ok-handler]\n    (p/let [_    (when (= (mobile-util/platform) \"android\") (check-permission-android))\n            {:keys [path localDocumentsPath]} (p/chain\n                                               (.pickFolder mobile-util/folder-picker)\n                                               #(js->clj % :keywordize-keys true))\n            _ (when (mobile-util/native-ios?)\n                (cond\n                  (not (or (local-container-path? path localDocumentsPath)\n                           (iCloud-container-path? path)))\n                  (state/pub-event! [:modal/show-instruction])\n\n                  (iCloud-container-path? path)\n                  (mobile-util/sync-icloud-repo path)\n\n                  :else nil))\n            files (readdir path)\n            files (js->clj files :keywordize-keys true)]\n      (into [] (concat [{:path path}] files))))\n  (get-files [_this path-or-handle _ok-handler]\n    (readdir path-or-handle))\n  (watch-dir! [_this dir]\n    (p/do!\n     (.unwatch mobile-util/fs-watcher)\n     (.watch mobile-util/fs-watcher #js {:path dir}))))\n"]}