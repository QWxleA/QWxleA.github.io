shadow$provide.module$node_modules$chrono_node$dist$locales$nl$parsers$NLCasualDateTimeParser=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});module=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const index_1=require("module$node_modules$chrono_node$dist$index"),dayjs_1=require("module$node_modules$chrono_node$dist$utils$dayjs"),
dayjs_2=global(require("module$node_modules$dayjs$dayjs_min"));class NLCasualDateTimeParser extends module.AbstractParserWithWordBoundaryChecking{innerPattern(context){return/(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\W|$)/i}innerExtract(context,match){const dateText=match[1].toLowerCase();match=match[2].toLowerCase();const component=context.createParsingComponents();context=dayjs_2.default(context.refDate);switch(dateText){case "gisteren":dayjs_1.assignSimilarDate(component,context.add(-1,
"day"));break;case "van":dayjs_1.assignSimilarDate(component,context);break;case "morgen":dayjs_1.assignTheNextDay(component,context)}switch(match){case "ochtend":component.imply("meridiem",index_1.Meridiem.AM);component.imply("hour",6);break;case "middag":component.imply("meridiem",index_1.Meridiem.AM);component.imply("hour",12);break;case "namiddag":component.imply("meridiem",index_1.Meridiem.PM);component.imply("hour",15);break;case "avond":component.imply("meridiem",index_1.Meridiem.PM),component.imply("hour",
20)}return component}}exports.default=NLCasualDateTimeParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$nl$parsers$NLCasualDateTimeParser.js.map
