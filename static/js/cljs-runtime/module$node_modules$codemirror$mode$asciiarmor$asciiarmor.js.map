{
"version":3,
"file":"module$node_modules$codemirror$mode$asciiarmor$asciiarmor.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/codemirror/mode/asciiarmor/asciiarmor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$asciiarmor$asciiarmor\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function errorIfNotEmpty(stream) {\n    var nonWS = stream.match(/^\\s*\\S/);\n    stream.skipToEnd();\n    return nonWS ? \"error\" : null;\n  }\n\n  CodeMirror.defineMode(\"asciiarmor\", function() {\n    return {\n      token: function(stream, state) {\n        var m;\n        if (state.state == \"top\") {\n          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n            state.state = \"headers\";\n            state.type = m[1];\n            return \"tag\";\n          }\n          return errorIfNotEmpty(stream);\n        } else if (state.state == \"headers\") {\n          if (stream.sol() && stream.match(/^\\w+:/)) {\n            state.state = \"header\";\n            return \"atom\";\n          } else {\n            var result = errorIfNotEmpty(stream);\n            if (result) state.state = \"body\";\n            return result;\n          }\n        } else if (state.state == \"header\") {\n          stream.skipToEnd();\n          state.state = \"headers\";\n          return \"string\";\n        } else if (state.state == \"body\") {\n          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n            if (m[1] != state.type) return \"error\";\n            state.state = \"end\";\n            return \"tag\";\n          } else {\n            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n              return null;\n            } else {\n              stream.next();\n              return \"error\";\n            }\n          }\n        } else if (state.state == \"end\") {\n          return errorIfNotEmpty(stream);\n        }\n      },\n      blankLine: function(state) {\n        if (state.state == \"headers\") state.state = \"body\";\n      },\n      startState: function() {\n        return {state: \"top\", type: null};\n      }\n    };\n  });\n\n  CodeMirror.defineMIME(\"application/pgp\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-encrypted\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-keys\", \"asciiarmor\");\n  CodeMirror.defineMIME(\"application/pgp-signature\", \"asciiarmor\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","errorIfNotEmpty","stream","nonWS","match","skipToEnd","defineMode","token","state","m","sol","type","result","eatWhile","next","blankLine","startState","defineMIME"]
}
