{"version":3,"sources":["instaparse/failure.cljc"],"mappings":"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","names":["instaparse.failure/index->line-column","index","text","line","col","counter","cljs.core._EQ_","cljs.core.get","instaparse.failure/get-line","n","chars","cljs.core/seq","clojure.string/replace","cljs.core/empty?","cljs.core.apply","cljs.core/str","cljs.core.take_while","cljs.core/complement","cljs.core/first","cljs.core/next","instaparse.failure/marker","cljs.core/integer?","cljs.core.concat","cljs.core.repeat","instaparse.failure/augment-failure","failure","lc","cljs.core.merge","instaparse.failure/print-reason","r","cljs.core.print","instaparse.print/char-range->str","js/RegExp","instaparse.print/regexp->str","cljs.core.pr","p__109658","map__109659","cljs.core/--destructure-map","instaparse.failure/pprint-failure","column","reason","cljs.core.println","full-reasons","cljs.core.distinct","cljs.core.map","cljs.core.filter","partial-reasons","total","cljs.core/count","seq__109660","chunk__109661","count__109662","i__109663","temp__5720__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","seq__109664","chunk__109665","count__109666","i__109667","cljs.core/println"],"sourcesContent":["(ns instaparse.failure\r\n  \"Facilities for printing and manipulating error messages.\"\r\n  #?(:clj (:import java.io.BufferedReader java.io.StringReader))\r\n  (:require [instaparse.print :as print]))\r\n\r\n(defn index->line-column\r\n  \"Takes an index into text, and determines the line and column info\"\r\n  [index text]\r\n  (loop [line 1, col 1, counter 0]\r\n    (cond\r\n      (= index counter) {:line line :column col}\r\n      (= \\newline (get text counter)) (recur (inc line) 1 (inc counter))\r\n      :else (recur line (inc col) (inc counter)))))\r\n\r\n#?(:clj\r\n   (defn get-line\r\n     \"Returns nth line of text, 1-based\"\r\n     [n text]\r\n     (try (nth (line-seq (BufferedReader. (StringReader. (str text)))) (dec n))\r\n          (catch Exception e \"\")))\r\n   :cljs\r\n   (defn get-line\r\n     [n text]\r\n     (loop [chars (seq (clojure.string/replace text \"\\r\\n\" \"\\n\"))\r\n            n n]\r\n       (cond\r\n         (empty? chars) \"\"\r\n         (= n 1) (apply str (take-while (complement #{\\newline}) chars))\r\n         (= \\newline (first chars)) (recur (next chars) (dec n))\r\n         :else (recur (next chars) n)))))\r\n\r\n(defn marker\r\n  \"Creates string with caret at nth position, 1-based\"\r\n  [n]\r\n  (when (integer? n)\r\n    (if (<= n 1) \"^\"\r\n      (apply str (concat (repeat (dec n) \\space) [\\^]))))) \r\n      \r\n(defn augment-failure\r\n  \"Adds text, line, and column info to failure object.\"\r\n  [failure text]  \r\n  (let [lc (index->line-column (:index failure) text)]\r\n    (merge failure \r\n           lc\r\n           {:text (get-line (:line lc) text)})))\r\n\r\n(defn print-reason\r\n  \"Provides special case for printing negative lookahead reasons\"\r\n  [r]\r\n  (cond\r\n    (:NOT r)\r\n    (do (print \"NOT \")\r\n        (print (:NOT r))),\r\n    (:char-range r)\r\n    (print (print/char-range->str r))\r\n    (instance? #?(:clj java.util.regex.Pattern\r\n                  :cljs js/RegExp)\r\n               r)\r\n    (print (print/regexp->str r))\r\n    :else\r\n    (pr r)))\r\n\r\n(defn pprint-failure\r\n  \"Takes an augmented failure object and prints the error message\"\r\n  [{:keys [line column text reason]}]\r\n  (println (str \"Parse error at line \" line \", column \" column \":\"))\r\n  (println text)\r\n  (println (marker column))\r\n  (let [full-reasons (distinct (map :expecting\r\n                                    (filter :full reason)))\r\n        partial-reasons (distinct (map :expecting\r\n                                       (filter (complement :full) reason)))\r\n        total (+ (count full-reasons) (count partial-reasons))]        \r\n    (cond (zero? total) nil\r\n          (= 1 total) (println \"Expected:\")\r\n          :else (println \"Expected one of:\"))\r\n    (doseq [r full-reasons]\r\n      (print-reason r)\r\n      (println \" (followed by end-of-string)\"))\r\n    (doseq [r partial-reasons]\r\n      (print-reason r)\r\n      (println))))\r\n  \r\n"]}