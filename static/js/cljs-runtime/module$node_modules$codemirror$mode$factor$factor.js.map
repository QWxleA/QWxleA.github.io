{
"version":3,
"file":"module$node_modules$codemirror$mode$factor$factor.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/factor/factor.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$factor$factor\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Factor syntax highlight - simple mode\n//\n// by Dimage Sapelkin (https://github.com/kerabromsmu)\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"factor\", {\n    // The start state contains the rules that are intially used\n    start: [\n      // comments\n      {regex: /#?!.*/, token: \"comment\"},\n      // strings \"\"\", multiline --\u003e state\n      {regex: /\"\"\"/, token: \"string\", next: \"string3\"},\n      {regex: /(STRING:)(\\s)/, token: [\"keyword\", null], next: \"string2\"},\n      {regex: /\\S*?\"/, token: \"string\", next: \"string\"},\n      // numbers: dec, hex, unicode, bin, fractional, complex\n      {regex: /(?:0x[\\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\\-?\\d+.?\\d*)(?=\\s)/, token: \"number\"},\n      //{regex: /[+-]?/} //fractional\n      // definition: defining word, defined word, etc\n      {regex: /((?:GENERIC)|\\:?\\:)(\\s+)(\\S+)(\\s+)(\\()/, token: [\"keyword\", null, \"def\", null, \"bracket\"], next: \"stack\"},\n      // method definition: defining word, type, defined word, etc\n      {regex: /(M\\:)(\\s+)(\\S+)(\\s+)(\\S+)/, token: [\"keyword\", null, \"def\", null, \"tag\"]},\n      // vocabulary using --\u003e state\n      {regex: /USING\\:/, token: \"keyword\", next: \"vocabulary\"},\n      // vocabulary definition/use\n      {regex: /(USE\\:|IN\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"tag\"]},\n      // definition: a defining word, defined word\n      {regex: /(\\S+\\:)(\\s+)(\\S+)(?=\\s|$)/, token: [\"keyword\", null, \"def\"]},\n      // \"keywords\", incl. ; t f . [ ] { } defining words\n      {regex: /(?:;|\\\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\\.|\\S*\\[|\\]|\\S*\\{|\\})(?=\\s|$)/, token: \"keyword\"},\n      // <constructors> and the like\n      {regex: /\\S+[\\)>\\.\\*\\?]+(?=\\s|$)/, token: \"builtin\"},\n      {regex: /[\\)><]+\\S+(?=\\s|$)/, token: \"builtin\"},\n      // operators\n      {regex: /(?:[\\+\\-\\=\\/\\*<>])(?=\\s|$)/, token: \"keyword\"},\n      // any id (?)\n      {regex: /\\S+/, token: \"variable\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    vocabulary: [\n      {regex: /;/, token: \"keyword\", next: \"start\"},\n      {regex: /\\S+/, token: \"tag\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    string: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string2: [\n      {regex: /^;/, token: \"keyword\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    string3: [\n      {regex: /(?:[^\\\\]|\\\\.)*?\"\"\"/, token: \"string\", next: \"start\"},\n      {regex: /.*/, token: \"string\"}\n    ],\n    stack: [\n      {regex: /\\)/, token: \"bracket\", next: \"start\"},\n      {regex: /--/, token: \"bracket\"},\n      {regex: /\\S+/, token: \"meta\"},\n      {regex: /\\s+|./, token: null}\n    ],\n    // The meta property contains global information about the mode. It\n    // can contain properties like lineComment, which are supported by\n    // all modes, and also directives like dontIndentStates, which are\n    // specific to simple modes.\n    meta: {\n      dontIndentStates: [\"start\", \"vocabulary\", \"string\", \"string3\", \"stack\"],\n      lineComment: [ \"!\", \"#!\" ]\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-factor\", \"factor\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineSimpleMode","start","regex","token","next","vocabulary","string","string2","string3","stack","meta","dontIndentStates","lineComment","defineMIME"]
}
