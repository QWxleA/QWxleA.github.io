{"version":3,"sources":["frontend/util/marker.cljs"],"mappings":";AAIA,sCAAA,tCAAMA,oFAAgBC;AAAtB,AACE,OAACC,qBACA,CAAA,oJAAA,hJAAS,qHAAA,YAAA,/HAAI,oDAAA,pDAACC,6CAAEF;;AAGnB,2CAAA,3CAAKG;AAGL,4CAAA,5CAAMC,gGACHC,QAAQL,OAAOM;AADlB,AAEE,IAAAC,aACM,wGAAA,mFAAA,QAAA,kBAAA,mFAAA,OAAA,7SAAI,6CAAA,7CAACL,6FAAOF;iBADlB,AAAAQ,4CAAAD,WAAA,IAAA,xEAAOE;0BAAP,AAAAD,4CAAAD,WAAA,IAAA,jFAAkBG;IAIZC,MACA,iBAAAC,qBAAiB,AAACE,cAAI,AAACC,qBAAYL,oBAAoBL;AAAvD,AAAA,GAAAO;AAAA,cAAAA,VAASC;AAAT,AACE,IAAAG,aAA0B,AAACE,eAAKL;gBAAhC,AAAAL,4CAAAQ,WAAA,IAAA,vEAAOC;kBAAP,AAAAT,4CAAAQ,WAAA,IAAA,zEAAiBX;AAAjB,AACE,QAAGY,YAAU,AAACE,gBAAMd;;AACtB,OAACc,gBAAM,AAACC,2BAAkBX,WAAWJ;;;IACvCgB,cACA,CAAK,qDAAA,rDAACC,6CAAKjB,YAAUM,KAChB,AAACY,6BAAqB,AAACD,6CAAKjB,QAAQM,KACd,AAACZ,oCAAeC,QAChB,6CAAKM,QAAO,kCAAA,GAAA,nCAAI,AAACkB,uBAAOlB;AAbzD,AAcEe;;AAEJ,0CAAA,1CAAMI,4FACHnB,OAAOoB;AADV,AAEE,IAAAC,WAAMrB;AAAN,AAAA,QAAAqB;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAgBE,GAAI,6CAAA,7CAACzB,iGAAOwB;AAAZ;;AAAA;;;;;AAEJ;;;;;;;;oCAAA,pCAAME,gFAOHvB,QAAQC,OAAOuB,WAAW7B,OAAO0B;AAPpC,AAQE,IAAMrB,cAAW,AAACyB,qBAAazB;IACzBwB,iBAAW,iBAAAE,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AACI,OAACN,wCAAmB,iBAAAM,uBAAIzB;AAAJ,AAAA,oBAAAyB;AAAAA;;AACI,OAACb,eAAK,AAACE,2BAAkB,AAACrB,oCAAeC,QAAQK;;KACrDqB;;;AAJzC,AAAA,0FAKG,AAACtB,0CAAqBC,YAAQL,OAAO6B,gBAAYA","names":["frontend.util.marker/marker-pattern","format","cljs.core/re-pattern","cljs.core._EQ_","frontend.util.marker/bare-marker-pattern","frontend.util.marker/add-or-update-marker","content","marker","vec__49227","cljs.core.nth","re-pattern","new-line-re-pattern","pos","temp__5718__auto__","matches","cljs.core/seq","frontend.util/re-pos","vec__49230","start-pos","cljs.core/last","cljs.core/count","frontend.util/safe-re-find","new-content","cljs.core.subs","clojure.string/replace-first","cljs.core/empty?","frontend.util.marker/cycle-marker-state","preferred-workflow","G__49233","frontend.util.marker/cycle-marker","new-marker","clojure.string/triml","or__5043__auto__"],"sourcesContent":["(ns frontend.util.marker\n  (:require [clojure.string :as string]\n            [frontend.util :as util]))\n\n(defn marker-pattern [format]\n  (re-pattern\n   (str \"^\" (if (= format :markdown) \"(#+\\\\s+)?\" \"(\\\\*+\\\\s+)?\")\n        \"(NOW|LATER|TODO|DOING|DONE|WAITING|WAIT|CANCELED|CANCELLED|STARTED|IN-PROGRESS)?\\\\s?\")))\n\n(def bare-marker-pattern\n  #\"(NOW|LATER|TODO|DOING|DONE|WAITING|WAIT|CANCELED|CANCELLED|STARTED|IN-PROGRESS){1}\\s+\")\n\n(defn add-or-update-marker\n  [content format marker]\n  (let [[re-pattern new-line-re-pattern]\n        (if (= :org format)\n          [#\"\\*+\\s\" #\"\\n\\*+\\s\"]\n          [#\"#+\\s\" #\"\\n#+\\s\"])\n        pos\n        (if-let [matches (seq (util/re-pos new-line-re-pattern content))]\n          (let [[start-pos content] (last matches)]\n            (+ start-pos (count content)))\n          (count (util/safe-re-find re-pattern content)))\n        new-content\n        (str (subs content 0 pos)\n             (string/replace-first (subs content pos)\n                                   (marker-pattern format)\n                                   (str marker (if (empty? marker) \"\" \" \"))))]\n    new-content))\n\n(defn cycle-marker-state\n  [marker preferred-workflow]\n  (case marker\n    \"TODO\"\n    \"DOING\"\n\n    \"DOING\"\n    \"DONE\"\n\n    \"LATER\"\n    \"NOW\"\n\n    \"NOW\"\n    \"DONE\"\n\n    \"DONE\"\n    nil\n\n    (if (= :now preferred-workflow) \"LATER\" \"TODO\")))\n\n(defn cycle-marker\n  \"The cycle-marker will cycle markers sequentially. You can find all its order in `cycle-marker-state`.\n\n  It also accepts the specified `marker` and `new-marker`.\n  If you don't specify it, it will automatically find it based on `content`.\n\n  Returns [new-content new-marker].\"\n  [content marker new-marker format preferred-workflow]\n  (let [content    (string/triml content)\n        new-marker (or new-marker\n                       (cycle-marker-state (or marker\n                                               (last (util/safe-re-find (marker-pattern format) content))) ; Returns the last matching group (last vec)\n                                           preferred-workflow))]\n    [(add-or-update-marker content format new-marker) new-marker]))\n"]}