{"version":3,"sources":["frontend/db/react.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha.tuple_impl","p1__32969#","cljs.core._EQ_","cljs.core/uuid?","p1__32975#","cljs.core/int?","p1__32985#","p1__32990#","p1__32992#","p1__33012#","p1__33017#","p1__33022#","p1__33024#","p1__33025#","cljs.core/any?","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha.every_impl","G__33027","cljs.core/coll?","js/frontend","js/frontend.db","js/frontend.db.react","js/frontend.db.react.query-state","frontend.db.react/query-state","cljs.core.atom","js/frontend.db.react.query-components","frontend.db.react/query-components","frontend.db.react/set-new-result!","k","new-result","temp__5720__auto__","result-atom","cljs.core/deref","cljs.core.get_in","cljs.core/reset!","frontend.db.react/swap-new-result!","f","cljs.core.swap_BANG_","frontend.db.react/kv","key","value","frontend.db.react/remove-key!","repo-url","frontend.db.utils.transact_BANG_","frontend.db.react/clear-query-state!","frontend.db.react/clear-query-state-without-refs-and-embeds!","state","cljs.core.filter","p__33041","vec__33042","vec__33045","cljs.core.nth","_repo","_v","cljs.core/contains?","cljs.core.into","frontend.db.react/add-q!","query","inputs","transform-fn","query-fn","inputs-fn","cljs.core/assoc","frontend.db.react/remove-q!","cljs.core/dissoc","frontend.db.react/add-query-component!","component","and__5041__auto__","frontend.db.react/remove-query-component!","cljs.core.get","matched-queries","p1__33073#","cljs.core/vals","cljs.core/count","frontend.db.react/remove-custom-query!","repo","var_args","G__33093","frontend.db.react/query-entity-in-component","js/Error","id-or-lookup-ref","frontend.db.utils.entity","frontend.state/get-current-repo","frontend.db.react/*query-component*","db","frontend.db.conn.get_db","result","datascript.core/entity","or__5043__auto__","cljs.core/identity","frontend.db.react/get-query-cached-result","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","frontend.db.react/q","p__33116","map__33117","cljs.core/--destructure-map","seq33109","G__33110","cljs.core/first","cljs.core/next","G__33111","G__33112","G__33113","self__5751__auto__","use-cache?","disable-reactive?","cljs.spec.alpha.valid_QMARK_","kv?","cljs.core/vector?","cljs.core/vec","cljs.core/cons","cljs.core.apply","datascript.core/q","G__33148","G__33149","cljs.core/last","cljs.core/seq","frontend.db.react/get-current-page","match","frontend.state/state","route-name","page","G__33153","cljs.core/Keyword","frontend.date.journal_name","page-name","frontend.util/page-name-sanity-lc","p__33160","map__33161","%","frontend.db.react/get-affected-queries-keys","tx-data","db-before","blocks","datom","cljs.core.map","cljs.core.distinct","refs","other-blocks","cljs.core/namespace","cljs.core.concat","affected-keys","cljs.core.mapcat","block-id","frontend.util/uuid-string?","block","page-id","others","db-after-parent-uuid","db-before-parent-uuid","G__33165","G__33166","cljs.core.not_EQ_","current-page-id","ref","entity","cljs.core/keys","ks","cljs.core/second","v","cljs.core/rest","frontend.util.concat_without_nil","cljs.core/set","p__33192","map__33193","frontend.db.react/execute-query!","graph","tx","G__33194","cljs.core.doall","frontend.db.utils.get_key_value","p__33195","map__33196","frontend.db.react/refresh!","tx-meta","cljs.core/not","seq__33197","chunk__33198","count__33199","i__33200","vec__33211","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__33216","cache","custom?","map__33214","map__33219","e33215","e33220","cljs.core/meta","frontend.state/edit-in-query-component","cljs.core.async.put_BANG_","frontend.state/get-reactive-custom-queries-chan","e","js/console.error","frontend.db.react/set-key-value","G__33222","frontend.db.react/sub-key-value","frontend.db.react.sub_key_value","m","G__33223","frontend.db.react.q","frontend.util/react","temp__5718__auto__","frontend.db.react/run-custom-queries-when-idle!","chan","c__27595__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27596__auto__","switch__27572__auto__","state_33314","state_val_33318","inst_33271","inst_33274","inst_33277","inst_33278","inst_33279","statearr-33320","statearr-33321","statearr-33322","inst_33267","inst_33270","statearr-33323","statearr-33324","inst_33303","statearr-33325","statearr-33326","inst_33308","cljs.core.async.impl.ioc-helpers/return-chan","inst_33293","inst_33295","cljs.core/PersistentVector","inst_33296","inst_33297","inst_33298","statearr-33327","statearr-33328","cljs.core.async.impl.ioc-helpers/take!","inst_33300","_","statearr-33331","statearr-33333","inst_33289","statearr-33335","statearr-33341","inst_33286","inst_33287","statearr-33342","statearr-33343","inst_33291","statearr-33344","ex33339","statearr-33345","statearr-33346","statearr-33355","state-machine__27573__auto__","ret-value__27574__auto__","result__27575__auto__","cljs.core/keyword-identical?","ex__27576__auto__","e33356","statearr-33358","statearr-33360","state__27597__auto__","statearr-33363","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","frontend.state/input-idle?","cljs.core.async/timeout"],"sourcesContent":["(ns frontend.db.react\n  \"Transact the tx with some specified relationship so that the components will\n  be refreshed when subscribed data changed.\n  It'll be great if we can find an automatically resolving and performant\n  solution.\n  \"\n  (:require [datascript.core :as d]\n            [frontend.date :as date]\n            [frontend.db.conn :as conn]\n            [frontend.db.utils :as db-utils]\n            [frontend.state :as state]\n            [frontend.util :as util :refer [react]]\n            [cljs.spec.alpha :as s]\n            [clojure.core.async :as async]))\n\n;;; keywords specs for reactive query, used by `react/q` calls\n;; ::block\n;; pull-block react-query\n(s/def ::block (s/tuple #(= ::block %) uuid?))\n;; ::page-blocks\n;; get page-blocks react-query\n(s/def ::page-blocks (s/tuple #(= ::page-blocks %) int?))\n;; ::block-and-children\n;; get block&children react-query\n(s/def ::block-and-children (s/tuple #(= ::block-and-children %) uuid?))\n\n(s/def ::block-direct-children (s/tuple #(= ::block-direct-children %) uuid?))\n;; ::journals\n;; get journal-list react-query\n(s/def ::journals (s/tuple #(= ::journals %)))\n;; ::page->pages\n;; get PAGES referenced by PAGE\n(s/def ::page->pages (s/tuple #(= ::page->pages %) int?))\n;; ::page<-pages\n;; get PAGES referencing PAGE\n(s/def ::page<-pages (s/tuple #(= ::page<-pages %) int?))\n;; ::page<-blocks-or-block<-blocks\n;; get BLOCKS referencing PAGE or BLOCK\n(s/def ::page<-blocks-or-block<-blocks\n  (s/tuple #(= ::page<-blocks-or-block<-blocks %) int?))\n;; FIXME: this react-query has performance issues\n(s/def ::page-unlinked-refs (s/tuple #(= ::page-unlinked-refs %) int?))\n;; ::block<-block-ids\n;; get BLOCK-IDS referencing BLOCK\n(s/def ::block<-block-ids (s/tuple #(= ::block<-block-ids %) int?))\n;; custom react-query\n(s/def ::custom any?)\n\n(s/def ::react-query-keys (s/or :block ::block\n                                :page-blocks ::page-blocks\n                                :block-and-children ::block-and-children\n                                :block-direct-children ::block-direct-children\n                                :journals ::journals\n                                :page->pages ::page->pages\n                                :page<-pages ::page<-pages\n                                :page<-blocks-or-block<-blocks ::page<-blocks-or-block<-blocks\n                                :page-unlinked-refs ::page-unlinked-refs\n                                :block<-block-ids ::block<-block-ids\n                                :custom ::custom))\n\n(s/def ::affected-keys (s/coll-of ::react-query-keys))\n\n;; Query atom of map of Key ([repo q inputs]) -> atom\n;; TODO: replace with LRUCache, only keep the latest 20 or 50 items?\n\n(defonce query-state (atom {}))\n\n(def ^:dynamic *query-component*)\n\n;; component -> query-key\n(defonce query-components (atom {}))\n\n(defn set-new-result!\n  [k new-result]\n  (when-let [result-atom (get-in @query-state [k :result])]\n    (reset! result-atom new-result)))\n\n(defn swap-new-result!\n  [k f]\n  (when-let [result-atom (get-in @query-state [k :result])]\n    (swap! result-atom f)))\n\n(defn kv\n  [key value]\n  {:db/id -1\n   :db/ident key\n   key value})\n\n(defn remove-key!\n  [repo-url key]\n  (db-utils/transact! repo-url [[:db.fn/retractEntity [:db/ident key]]])\n  (set-new-result! [repo-url :kv key] nil))\n\n(defn clear-query-state!\n  []\n  (reset! query-state {}))\n\n(defn clear-query-state-without-refs-and-embeds!\n  []\n  (let [state @query-state\n        state (->> (filter (fn [[[_repo k] _v]]\n                             (contains? #{:blocks :block/block :custom} k)) state)\n                   (into {}))]\n    (reset! query-state state)))\n\n(defn add-q!\n  [k query inputs result-atom transform-fn query-fn inputs-fn]\n  (swap! query-state assoc k {:query query\n                              :inputs inputs\n                              :result result-atom\n                              :transform-fn transform-fn\n                              :query-fn query-fn\n                              :inputs-fn inputs-fn})\n  result-atom)\n\n(defn remove-q!\n  [k]\n  (swap! query-state dissoc k))\n\n(defn add-query-component!\n  [key component]\n  (when (and key component)\n    (swap! query-components assoc component key)))\n\n(defn remove-query-component!\n  [component]\n  (when-let [query (get @query-components component)]\n    (let [matched-queries (filter #(= query %) (vals @query-components))]\n      (when (= 1 (count matched-queries))\n        (remove-q! query))))\n  (swap! query-components dissoc component))\n\n;; TODO: rename :custom to :query/custom\n(defn remove-custom-query!\n  [repo query]\n  (remove-q! [repo :custom query]))\n\n;; Reactive query\n\n\n(defn query-entity-in-component\n  ([id-or-lookup-ref]\n   (db-utils/entity (state/get-current-repo) id-or-lookup-ref))\n  ([repo id-or-lookup-ref]\n   (let [k [:entity id-or-lookup-ref]\n         result-atom (:result (get @query-state k))]\n     (when-let [component *query-component*]\n       (add-query-component! k component))\n     (when-let [db (conn/get-db repo)]\n       (let [result (d/entity db id-or-lookup-ref)\n             result-atom (or result-atom (atom nil))]\n         (set! (.-state result-atom) result)\n         (add-q! k nil nil result-atom identity identity identity))))))\n\n(defn get-query-cached-result\n  [k]\n  (:result (get @query-state k)))\n\n(defn q\n  [repo k {:keys [use-cache? transform-fn query-fn inputs-fn disable-reactive?]\n           :or {use-cache? true\n                transform-fn identity}} query & inputs]\n  {:pre [(s/valid? ::react-query-keys k)]}\n  (let [kv? (and (vector? k) (= :kv (first k)))\n        k (vec (cons repo k))]\n    (when-let [db (conn/get-db repo)]\n      (let [result-atom (get-query-cached-result k)]\n        (when-let [component *query-component*]\n          (add-query-component! k component))\n        (if (and use-cache? result-atom)\n          result-atom\n          (let [result (cond\n                         query-fn\n                         (query-fn db nil nil)\n\n                         inputs-fn\n                         (let [inputs (inputs-fn)]\n                           (apply d/q query db inputs))\n\n                         kv?\n                         (d/entity db (last k))\n\n                         (seq inputs)\n                         (apply d/q query db inputs)\n\n                         :else\n                         (d/q query db))\n                result (transform-fn result)\n                result-atom (or result-atom (atom nil))]\n            ;; Don't notify watches now\n            (set! (.-state result-atom) result)\n            (if disable-reactive?\n              result-atom\n              (add-q! k query inputs result-atom transform-fn query-fn inputs-fn))))))))\n\n\n;; TODO: Extract several parts to handlers\n\n\n(defn get-current-page\n  []\n  (let [match (:route-match @state/state)\n        route-name (get-in match [:data :name])\n        page (case route-name\n               :page\n               (get-in match [:path-params :name])\n\n               :file\n               (get-in match [:path-params :path])\n\n               (date/journal-name))]\n    (when page\n      (let [page-name (util/page-name-sanity-lc page)]\n        (db-utils/entity [:block/name page-name])))))\n\n(defn get-affected-queries-keys\n  \"Get affected queries through transaction datoms.\"\n  [{:keys [tx-data db-before]}]\n  {:post [(s/valid? ::affected-keys %)]}\n  (let [blocks (->> (filter (fn [datom] (contains? #{:block/left :block/parent :block/page} (:a datom))) tx-data)\n                    (map :v)\n                    (distinct))\n        refs (->> (filter (fn [datom] (= :block/refs (:a datom))) tx-data)\n                  (map :v)\n                  (distinct))\n        other-blocks (->> (filter (fn [datom] (= \"block\" (namespace (:a datom)))) tx-data)\n                          (map :e))\n        blocks (-> (concat blocks other-blocks) distinct)\n        affected-keys (concat\n                       (mapcat\n                        (fn [block-id]\n                          (let [block-id (if (and (string? block-id) (util/uuid-string? block-id))\n                                           [:block/uuid block-id]\n                                           block-id)]\n                            (when-let [block (db-utils/entity block-id)]\n                              (let [page-id (or\n                                             (when (:block/name block) (:db/id block))\n                                             (:db/id (:block/page block)))\n                                    blocks [[::block (:block/uuid block)]]\n                                    others (when page-id\n                                             (let [db-after-parent-uuid (:block/uuid (:block/parent block))\n                                                   db-before-parent-uuid (:block/uuid (:block/parent (d/entity db-before\n                                                                                                               [:block/uuid (:block/uuid block)])))]\n                                               [[::page-blocks page-id]\n                                                [::page->pages page-id]\n                                                [::block-direct-children db-after-parent-uuid]\n                                                (when (and db-before-parent-uuid\n                                                           (not= db-before-parent-uuid db-after-parent-uuid))\n                                                  [::block-direct-children db-before-parent-uuid])]))]\n                                (concat blocks others)))))\n                        blocks)\n\n                       (when-let [current-page-id (:db/id (get-current-page))]\n                         [[::page->pages current-page-id]\n                          [::page<-pages current-page-id]])\n\n                       (map (fn [ref]\n                              (let [entity (db-utils/entity ref)]\n                                (if (:block/name entity) ; page\n                                  [::page-blocks ref]\n                                  [::page-blocks (:db/id (:block/page entity))])))\n                         refs))\n        others (->>\n                (keys @query-state)\n                (filter (fn [ks]\n                          (contains? #{::block-and-children\n                                       ::page<-blocks-or-block<-blocks}\n                                     (second ks))))\n                (map (fn [v] (vec (rest v)))))]\n    (->>\n     (util/concat-without-nil\n      affected-keys\n      others)\n     set)))\n\n(defn- execute-query!\n  [graph db k tx {:keys [query inputs transform-fn query-fn inputs-fn result]}]\n  (let [new-result (->\n                    (cond\n                      query-fn\n                      (let [result (query-fn db tx result)]\n                        (if (coll? result)\n                          (doall result)\n                          result))\n\n                      inputs-fn\n                      (let [inputs (inputs-fn)]\n                        (apply d/q query db inputs))\n\n                      (keyword? query)\n                      (db-utils/get-key-value graph query)\n\n                      (seq inputs)\n                      (apply d/q query db inputs)\n\n                      :else\n                      (d/q query db))\n                    transform-fn)]\n    (when-not (= new-result result)\n      (set-new-result! k new-result))))\n\n(defn refresh!\n  \"Re-compute corresponding queries (from tx) and refresh the related react components.\"\n  [repo-url {:keys [tx-data tx-meta] :as tx}]\n  (when (and repo-url\n             (seq tx-data)\n             (not (:skip-refresh? tx-meta)))\n    (let [db (conn/get-db repo-url)\n          affected-keys (get-affected-queries-keys tx)]\n      (doseq [[k cache] @query-state]\n        (let [custom? (= :custom (second k))\n              kv? (= :kv (second k))]\n          (when (and\n                 (= (first k) repo-url)\n                 (or (get affected-keys (vec (rest k)))\n                     custom?\n                     kv?))\n            (let [{:keys [query query-fn]} cache]\n              (when (or query query-fn)\n                (try\n                  (let [f #(execute-query! repo-url db k tx cache)]\n                    ;; Detects whether user is editing in a custom query, if so, execute the query immediately\n                    (if (and custom?\n                             ;; modifying during cards review need to be executed immediately\n                             (not (:cards-query? (meta query)))\n                             (not (state/edit-in-query-component)))\n                      (async/put! (state/get-reactive-custom-queries-chan) [f query])\n                      (f)))\n                  (catch js/Error e\n                    (js/console.error e)))))))))))\n\n(defn set-key-value\n  [repo-url key value]\n  (if value\n    (db-utils/transact! repo-url [(kv key value)])\n    (remove-key! repo-url key)))\n\n(defn sub-key-value\n  ([key]\n   (sub-key-value (state/get-current-repo) key))\n  ([repo-url key]\n   (when (conn/get-db repo-url)\n     (let [m (some-> (q repo-url [:kv key] {} key key) react)]\n       (if-let [result (get m key)]\n         result\n         m)))))\n\n(defn run-custom-queries-when-idle!\n  []\n  (let [chan (state/get-reactive-custom-queries-chan)]\n    (async/go-loop []\n      (let [[f query] (async/<! chan)]\n        (try\n          (if (state/input-idle? (state/get-current-repo))\n            (f)\n            (do\n              (async/<! (async/timeout 2000))\n              (async/put! chan [f query])))\n          (catch js/Error error\n            (let [type :custom-query/failed]\n              (js/console.error (str type \"\\n\" query))\n              (js/console.error error)))))\n      (recur))\n    chan))\n"]}