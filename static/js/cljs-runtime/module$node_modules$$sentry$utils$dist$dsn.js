shadow$provide.module$node_modules$$sentry$utils$dist$dsn=function(global,require,module,exports){function dsnFromComponents(components){"user"in components&&!("publicKey"in components)&&(components.publicKey=components.user);return{user:components.publicKey||"",protocol:components.protocol,publicKey:components.publicKey||"",pass:components.pass||"",host:components.host,port:components.port||"",path:components.path||"",projectId:components.projectId}}function validateDsn(dsn){if(env_1.isDebugBuild()){var port=
dsn.port,projectId=dsn.projectId,protocol=dsn.protocol;["protocol","publicKey","host","projectId"].forEach(function(component){if(!dsn[component])throw new error_1.SentryError("Invalid Sentry Dsn: "+component+" missing");});if(!projectId.match(/^\d+$/))throw new error_1.SentryError("Invalid Sentry Dsn: Invalid projectId "+projectId);if("http"!==protocol&&"https"!==protocol)throw new error_1.SentryError("Invalid Sentry Dsn: Invalid protocol "+protocol);if(port&&isNaN(parseInt(port,10)))throw new error_1.SentryError("Invalid Sentry Dsn: Invalid port "+
port);return!0}}Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$$sentry$utils$node_modules$tslib$tslib"),env_1=require("module$node_modules$$sentry$utils$dist$env"),error_1=require("module$node_modules$$sentry$utils$dist$error"),DSN_REGEX=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;exports.dsnToString=function(dsn,withPassword){void 0===withPassword&&(withPassword=!1);var path=dsn.path,pass=dsn.pass,port=dsn.port;return dsn.protocol+
"://"+dsn.publicKey+(withPassword&&pass?":"+pass:"")+("@"+dsn.host+(port?":"+port:"")+"/"+(path?path+"/":path)+dsn.projectId)};exports.makeDsn=function(from){if("string"===typeof from){var match=DSN_REGEX.exec(from);if(!match)throw new error_1.SentryError("Invalid Sentry Dsn: "+from);var _a=tslib_1.__read(match.slice(1),6);from=_a[0];match=_a[1];var _b=_a[2];_b=void 0===_b?"":_b;var host=_a[3],_c=_a[4];_c=void 0===_c?"":_c;var path="";_a=_a[5];var split=_a.split("/");1<split.length&&(path=split.slice(0,
-1).join("/"),_a=split.pop());_a&&(split=_a.match(/^\d+/))&&(_a=split[0]);from=dsnFromComponents({host,pass:_b,path,projectId:_a,port:_c,protocol:from,publicKey:match})}else from=dsnFromComponents(from);validateDsn(from);return from}}
//# sourceMappingURL=module$node_modules$$sentry$utils$dist$dsn.js.map
