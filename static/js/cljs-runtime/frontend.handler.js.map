{"version":3,"sources":["frontend/handler.cljs"],"mappings":"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","names":["frontend.handler/set-global-error-notification!","js/window.onerror","message","_source","_lineno","_colno","error","frontend.error/ignored?","lambdaisland.glogi.log","cljs.core/identity","frontend.handler/watch-for-date!","f","repo","frontend.state/get-current-repo","frontend.state/nfs-refreshing?","frontend.handler.page/create-today-journal!","js/setInterval","frontend.handler/instrument!","total","frontend.extensions.srs/get-srs-cards-total","frontend.state/set-state!","frontend.state/pub-event!","or__4253__auto__","frontend.db/blocks-count","frontend.handler/store-schema!","frontend.storage/set","cljs.core.assoc","frontend.db-schema/schema","frontend.db-schema/version","frontend.handler/restore-and-setup!","repos","old-db-schema","frontend.db/restore!","frontend.handler.file.restore_config_BANG_","promesa.core.then","frontend.handler.ui/add-style-if-exists!","frontend.modules.shortcut.core/unlisten-all","frontend.modules.shortcut.core/refresh!","cljs.core/not","cljs.core/seq","frontend.db/get-files","frontend.config/local-repo","cljs.core/some","frontend.config/local-db?","cljs.core.map","frontend.mobile.util/is-native-platform?","frontend.handler.repo/setup-local-repo-if-not-exists!","frontend.state/set-db-restoring!","frontend.handler.page/init-commands!","frontend.handler.file/watch-for-current-graph-dir!","promesa.core.catch$","frontend.handler/handle-connection-change","e","online?","cljs.core._EQ_","frontend.handler.goog$module$goog$object.get","frontend.state/set-online!","frontend.handler/set-network-watcher!","js/window.addEventListener","frontend.handler/enable-datalog-console","js/document.documentElement.setAttribute","js/window","event","db","frontend.db.conn.get_db","temp__5720__auto__","devtool-message","frontend.handler.goog$module$goog$object.getValueByKeys","msg-type","cljs.reader.read_string","G__71197","cljs.core/Keyword","cljs.core.pr_str","frontend.handler/get-repos","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","nfs-dbs","frontend.db.persist/get-all-graphs","frontend.handler/clear-cache!","frontend.handler.notification.show_BANG_","_","frontend.util/electron?","electron.ipc.ipc","frontend.idb/clear-local-storage-and-idb!","js/setTimeout","js/window.location.reload","frontend.handler/register-components-fns!","frontend.state/set-page-blocks-cp!","frontend.components.page/page-blocks-cp","frontend.state/set-component!","frontend.components.reference/block-linked-references","frontend.handler.command-palette/register-global-shortcut-commands","frontend.handler/start!","render","db-schema","frontend.storage/get","frontend.context.i18n/start","frontend.modules.instrumentation.core/init","frontend.mobile.core/init!","frontend.util/indexeddb-check?","_error","frontend.state/set-indexedb-support!","frontend.db.react/run-custom-queries-when-idle!","frontend.handler.events/run!","frontend.state/set-repos!","___42616__auto__","frontend.mobile.util/hide-splash","cljs.core/reset!","frontend.db/*sync-search-indice-f","frontend.search/sync-search-indice!","frontend.db/run-batch-txs!","frontend.handler.file/run-writes-chan!","frontend.config/dev?","electron.listener/listen!","frontend.util.persist-var/load-vars","frontend.handler.user/refresh-tokens-loop","frontend.handler/stop!","cljs.core.prn","frontend.handler/quit-and-install-new-version!","electron.listener/persist-dbs!","electron.ipc.invoke"],"sourcesContent":["(ns frontend.handler\n  (:require [electron.ipc :as ipc]\n            [electron.listener :as el]\n            [frontend.components.page :as page]\n            [frontend.components.reference :as reference]\n            [frontend.config :as config]\n            [frontend.context.i18n :as i18n]\n            [frontend.db :as db]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.conn :as conn]\n            [frontend.db.react :as react]\n            [frontend.error :as error]\n            [frontend.handler.command-palette :as command-palette]\n            [frontend.handler.events :as events]\n            [frontend.handler.file :as file-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.page :as page-handler]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.handler.user :as user-handler]\n            [frontend.extensions.srs :as srs]\n            [frontend.mobile.core :as mobile]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.idb :as idb]\n            [frontend.modules.instrumentation.core :as instrument]\n            [frontend.modules.shortcut.core :as shortcut]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.storage :as storage]\n            [frontend.util :as util]\n            [frontend.util.persist-var :as persist-var]\n            [cljs.reader :refer [read-string]]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.db.persist :as db-persist]))\n\n(defn set-global-error-notification!\n  []\n  (set! js/window.onerror\n        (fn [message, _source, _lineno, _colno, error]\n          (when-not (error/ignored? message)\n            (log/error :exception error)\n            ;; (notification/show!\n            ;;  (str \"message=\" message \"\\nsource=\" source \"\\nlineno=\" lineno \"\\ncolno=\" colno \"\\nerror=\" error)\n            ;;  :error\n            ;;  ;; Don't auto-hide\n            ;;  false)\n            ))))\n\n(defn- watch-for-date!\n  []\n  (let [f (fn []\n            #_:clj-kondo/ignore\n            (let [repo (state/get-current-repo)]\n              (when-not (state/nfs-refreshing?)\n                ;; Don't create the journal file until user writes something\n                (page-handler/create-today-journal!))))]\n    (f)\n    (js/setInterval f 5000)))\n\n(defn- instrument!\n  []\n  (let [total (srs/get-srs-cards-total)]\n    (state/set-state! :srs/cards-due-count total)\n    (state/pub-event! [:instrument {:type :flashcards/count\n                                    :payload {:total (or total 0)}}])\n    (state/pub-event! [:instrument {:type :blocks/count\n                                    :payload {:total (db/blocks-count)}}])))\n\n(defn store-schema!\n  []\n  (storage/set :db-schema (assoc db-schema/schema\n                                 :db/version db-schema/version)))\n\n(defn restore-and-setup!\n  [repos old-db-schema]\n  (-> (db/restore!\n       {:repos repos}\n       old-db-schema\n       (fn [repo]\n         (file-handler/restore-config! repo false)))\n      (p/then\n       (fn []\n         ;; try to load custom css only for current repo\n         (ui-handler/add-style-if-exists!)\n\n         ;; install after config is restored\n         (shortcut/unlisten-all)\n         (shortcut/refresh!)\n\n         (cond\n           (and (not (seq (db/get-files config/local-repo)))\n                ;; Not native local directory\n                (not (some config/local-db? (map :url repos)))\n                (not (mobile-util/is-native-platform?)))\n           ;; will execute `(state/set-db-restoring! false)` inside\n           (repo-handler/setup-local-repo-if-not-exists!)\n\n           :else\n           (state/set-db-restoring! false))\n\n         (store-schema!)\n\n         (state/pub-event! [:modal/nfs-ask-permission])\n\n         (page-handler/init-commands!)\n\n         (watch-for-date!)\n         (file-handler/watch-for-current-graph-dir!)\n         (state/pub-event! [:graph/ready (state/get-current-repo)])))\n      (p/catch (fn [error]\n                 (log/error :exception error)))))\n\n(defn- handle-connection-change\n  [e]\n  (let [online? (= (gobj/get e \"type\") \"online\")]\n    (state/set-online! online?)))\n\n(defn set-network-watcher!\n  []\n  (js/window.addEventListener \"online\" handle-connection-change)\n  (js/window.addEventListener \"offline\" handle-connection-change))\n\n(defn enable-datalog-console\n  \"Enables datalog console in browser provided by https://github.com/homebaseio/datalog-console\"\n  []\n  (js/document.documentElement.setAttribute \"__datalog-console-remote-installed__\" true)\n  (.addEventListener js/window \"message\"\n                     (fn [event]\n                       (let [db (conn/get-db)]\n                         (when-let [devtool-message (gobj/getValueByKeys event \"data\" \":datalog-console.client/devtool-message\")]\n                           (let [msg-type (:type (read-string devtool-message))]\n                             (case msg-type\n\n                               :datalog-console.client/request-whole-database-as-string\n                               (.postMessage js/window #js {\":datalog-console.remote/remote-message\" (pr-str db)} \"*\")\n\n                               nil)))))))\n(defn- get-repos\n  []\n  (p/let [nfs-dbs (db-persist/get-all-graphs)\n          nfs-dbs (map (fn [db]\n                         {:url db :nfs? true}) nfs-dbs)]\n    (cond\n      (seq nfs-dbs)\n      nfs-dbs\n\n      :else\n      [{:url config/local-repo\n        :example? true}])))\n\n(defn clear-cache!\n  []\n  (notification/show! \"Clearing...\" :warning false)\n  (p/let [_ (when (util/electron?)\n              (ipc/ipc \"clearCache\"))\n          _ (idb/clear-local-storage-and-idb!)]\n    (js/setTimeout\n     (fn [] (if (util/electron?)\n              (ipc/ipc :reloadWindowPage)\n              (js/window.location.reload)))\n     2000)))\n\n(defn- register-components-fns!\n  []\n  (state/set-page-blocks-cp! page/page-blocks-cp)\n  (state/set-component! :block/linked-references reference/block-linked-references)\n  (command-palette/register-global-shortcut-commands))\n\n(defn start!\n  [render]\n  (set-global-error-notification!)\n  (let [db-schema (storage/get :db-schema)]\n    (register-components-fns!)\n    (state/set-db-restoring! true)\n    (render)\n    (i18n/start)\n    (instrument/init)\n    (set-network-watcher!)\n\n    (mobile/init!)\n\n    (util/indexeddb-check?\n     (fn [_error]\n       (notification/show! \"Sorry, it seems that your browser doesn't support IndexedDB, we recommend to use latest Chrome(Chromium) or Firefox(Non-private mode).\" :error false)\n       (state/set-indexedb-support! false)))\n\n    (react/run-custom-queries-when-idle!)\n\n    (events/run!)\n\n    (p/let [repos (get-repos)]\n      (state/set-repos! repos)\n      (restore-and-setup! repos db-schema)\n      (when (mobile-util/is-native-platform?)\n        (p/do! (mobile-util/hide-splash))))\n\n    (reset! db/*sync-search-indice-f search/sync-search-indice!)\n    (db/run-batch-txs!)\n    (file-handler/run-writes-chan!)\n    (when config/dev?\n      (enable-datalog-console))\n    (when (util/electron?)\n      (el/listen!))\n    (persist-var/load-vars)\n    (user-handler/refresh-tokens-loop)\n    (js/setTimeout instrument! (* 60 1000))))\n\n(defn stop! []\n  (prn \"stop!\"))\n\n(defn quit-and-install-new-version!\n  []\n  (p/let [_ (el/persist-dbs!)\n          _ (ipc/invoke \"set-quit-dirty-state\" false)]\n    (ipc/ipc :quitAndInstall)))\n"]}