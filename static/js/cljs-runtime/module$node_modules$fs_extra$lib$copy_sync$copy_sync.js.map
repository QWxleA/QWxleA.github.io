{
"version":3,
"file":"module$node_modules$fs_extra$lib$copy_sync$copy_sync.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/fs-extra/lib/copy-sync/copy-sync.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fs_extra$lib$copy_sync$copy_sync\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdirsSync = require('../mkdirs').mkdirsSync\nconst utimesMillisSync = require('../util/utimes').utimesMillisSync\nconst stat = require('../util/stat')\n\nfunction copySync (src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts = opts || {}\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`)\n  }\n\n  const { srcStat, destStat } = stat.checkPathsSync(src, dest, 'copy')\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy')\n  return handleFilterAndCopy(destStat, src, dest, opts)\n}\n\nfunction handleFilterAndCopy (destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return\n  const destParent = path.dirname(dest)\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent)\n  return startCopy(destStat, src, dest, opts)\n}\n\nfunction startCopy (destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return\n  return getStats(destStat, src, dest, opts)\n}\n\nfunction getStats (destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync\n  const srcStat = statSync(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isFile() ||\n           srcStat.isCharacterDevice() ||\n           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nfunction mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest)\n    return copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nfunction copyFile (srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest)\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest)\n  return setDestMode(dest, srcStat.mode)\n}\n\nfunction handleTimestamps (srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode)\n  return setDestTimestamps(src, dest)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return setDestMode(dest, srcMode | 0o200)\n}\n\nfunction setDestMode (dest, srcMode) {\n  return fs.chmodSync(dest, srcMode)\n}\n\nfunction setDestTimestamps (src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  const updatedSrcStat = fs.statSync(src)\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts)\n  if (destStat && !destStat.isDirectory()) {\n    throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n  }\n  return copyDir(src, dest, opts)\n}\n\nfunction mkDirAndCopy (srcMode, src, dest, opts) {\n  fs.mkdirSync(dest)\n  copyDir(src, dest, opts)\n  return setDestMode(dest, srcMode)\n}\n\nfunction copyDir (src, dest, opts) {\n  fs.readdirSync(src).forEach(item => copyDirItem(item, src, dest, opts))\n}\n\nfunction copyDirItem (item, src, dest, opts) {\n  const srcItem = path.join(src, item)\n  const destItem = path.join(dest, item)\n  const { destStat } = stat.checkPathsSync(srcItem, destItem, 'copy')\n  return startCopy(destStat, srcItem, destItem, opts)\n}\n\nfunction onLink (destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest)\n  } else {\n    let resolvedDest\n    try {\n      resolvedDest = fs.readlinkSync(dest)\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)\n      throw err\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest)\n    }\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (fs.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n    }\n    return copyLink(resolvedSrc, dest)\n  }\n}\n\nfunction copyLink (resolvedSrc, dest) {\n  fs.unlinkSync(dest)\n  return fs.symlinkSync(resolvedSrc, dest)\n}\n\nmodule.exports = copySync\n\n};"],
"names":["shadow$provide","global","require","module","exports","startCopy","destStat","src","dest","opts","filter","srcStat","dereference","statSync","fs","lstatSync","isDirectory","Error","copyDir","mode","mkdirSync","chmodSync","srcMode","overwrite","unlinkSync","copyFile","errorOnExist","resolvedSrc","readlinkSync","path","resolve","process","cwd","resolvedDest","err","code","symlinkSync","stat","isSrcSubdir","copyFileSync","preserveTimestamps","updatedSrcStat","utimesMillisSync","atime","mtime","readdirSync","forEach","item","srcItem","join","destItem","checkPathsSync","mkdirsSync","copySync","clobber","arch","console","warn","checkParentPathsSync","destParent","dirname","existsSync"]
}
