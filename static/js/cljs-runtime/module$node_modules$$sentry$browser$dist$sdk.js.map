{
"version":3,
"file":"module$node_modules$$sentry$browser$dist$sdk.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@sentry/browser/dist/sdk.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$browser$dist$sdk\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@sentry/core\");\nvar utils_1 = require(\"@sentry/utils\");\nvar client_1 = require(\"./client\");\nvar helpers_1 = require(\"./helpers\");\nvar integrations_1 = require(\"./integrations\");\nexports.defaultIntegrations = [\n    new core_1.Integrations.InboundFilters(),\n    new core_1.Integrations.FunctionToString(),\n    new integrations_1.TryCatch(),\n    new integrations_1.Breadcrumbs(),\n    new integrations_1.GlobalHandlers(),\n    new integrations_1.LinkedErrors(),\n    new integrations_1.Dedupe(),\n    new integrations_1.UserAgent(),\n];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nfunction init(options) {\n    if (options === void 0) { options = {}; }\n    if (options.defaultIntegrations === undefined) {\n        options.defaultIntegrations = exports.defaultIntegrations;\n    }\n    if (options.release === undefined) {\n        var window_1 = utils_1.getGlobalObject();\n        // This supports the variable that sentry-webpack-plugin injects\n        if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n            options.release = window_1.SENTRY_RELEASE.id;\n        }\n    }\n    if (options.autoSessionTracking === undefined) {\n        options.autoSessionTracking = true;\n    }\n    if (options.sendClientReports === undefined) {\n        options.sendClientReports = true;\n    }\n    core_1.initAndBind(client_1.BrowserClient, options);\n    if (options.autoSessionTracking) {\n        startSessionTracking();\n    }\n}\nexports.init = init;\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nfunction showReportDialog(options) {\n    if (options === void 0) { options = {}; }\n    var hub = core_1.getCurrentHub();\n    var scope = hub.getScope();\n    if (scope) {\n        options.user = tslib_1.__assign(tslib_1.__assign({}, scope.getUser()), options.user);\n    }\n    if (!options.eventId) {\n        options.eventId = hub.lastEventId();\n    }\n    var client = hub.getClient();\n    if (client) {\n        client.showReportDialog(options);\n    }\n}\nexports.showReportDialog = showReportDialog;\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nfunction lastEventId() {\n    return core_1.getCurrentHub().lastEventId();\n}\nexports.lastEventId = lastEventId;\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction forceLoad() {\n    // Noop\n}\nexports.forceLoad = forceLoad;\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction onLoad(callback) {\n    callback();\n}\nexports.onLoad = onLoad;\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nfunction flush(timeout) {\n    var client = core_1.getCurrentHub().getClient();\n    if (client) {\n        return client.flush(timeout);\n    }\n    if (utils_1.isDebugBuild()) {\n        utils_1.logger.warn('Cannot flush events. No client defined.');\n    }\n    return utils_1.resolvedSyncPromise(false);\n}\nexports.flush = flush;\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nfunction close(timeout) {\n    var client = core_1.getCurrentHub().getClient();\n    if (client) {\n        return client.close(timeout);\n    }\n    if (utils_1.isDebugBuild()) {\n        utils_1.logger.warn('Cannot flush events and disable SDK. No client defined.');\n    }\n    return utils_1.resolvedSyncPromise(false);\n}\nexports.close = close;\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrap(fn) {\n    return helpers_1.wrap(fn)();\n}\nexports.wrap = wrap;\nfunction startSessionOnHub(hub) {\n    hub.startSession({ ignoreDuration: true });\n    hub.captureSession();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n    var window = utils_1.getGlobalObject();\n    var document = window.document;\n    if (typeof document === 'undefined') {\n        if (utils_1.isDebugBuild()) {\n            utils_1.logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n        }\n        return;\n    }\n    var hub = core_1.getCurrentHub();\n    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n    // pinned at the same version in package.json, but there are edge cases where it's possible. See\n    // https://github.com/getsentry/sentry-javascript/issues/3207 and\n    // https://github.com/getsentry/sentry-javascript/issues/3234 and\n    // https://github.com/getsentry/sentry-javascript/issues/3278.\n    if (!hub.captureSession) {\n        return;\n    }\n    // The session duration for browser sessions does not track a meaningful\n    // concept that can be used as a metric.\n    // Automatically captured sessions are akin to page views, and thus we\n    // discard their duration.\n    startSessionOnHub(hub);\n    // We want to create a session for every navigation as well\n    utils_1.addInstrumentationHandler('history', function (_a) {\n        var from = _a.from, to = _a.to;\n        // Don't create an additional session for the initial route or if the location did not change\n        if (!(from === undefined || from === to)) {\n            startSessionOnHub(core_1.getCurrentHub());\n        }\n    });\n}\n//# sourceMappingURL=sdk.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","startSessionOnHub","hub","startSession","ignoreDuration","captureSession","startSessionTracking","utils_1","getGlobalObject","window","document","isDebugBuild","logger","warn","core_1","getCurrentHub","addInstrumentationHandler","_a","from","to","undefined","Object","defineProperty","value","tslib_1","client_1","helpers_1","integrations_1","defaultIntegrations","Integrations","InboundFilters","FunctionToString","TryCatch","Breadcrumbs","GlobalHandlers","LinkedErrors","Dedupe","UserAgent","init","options","release","window_1","SENTRY_RELEASE","id","autoSessionTracking","sendClientReports","initAndBind","BrowserClient","showReportDialog","scope","getScope","user","__assign","getUser","eventId","lastEventId","client","getClient","forceLoad","onLoad","callback","flush","timeout","resolvedSyncPromise","close","wrap","fn"]
}
