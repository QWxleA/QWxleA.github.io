{
"version":3,
"file":"module$node_modules$codemirror$mode$forth$forth.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/forth/forth.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$forth$forth\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Author: Aliaksei Chapyzhenka\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function toWordList(words) {\n    var ret = [];\n    words.split(' ').forEach(function(e){\n      ret.push({name: e});\n    });\n    return ret;\n  }\n\n  var coreWordList = toWordList(\n'INVERT AND OR XOR\\\n 2* 2/ LSHIFT RSHIFT\\\n 0= = 0< < > U< MIN MAX\\\n 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\\\n >R R> R@\\\n + - 1+ 1- ABS NEGATE\\\n S>D * M* UM*\\\n FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\\\n HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\\\n ALIGN ALIGNED +! ALLOT\\\n CHAR [CHAR] [ ] BL\\\n FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\\\n ; DOES> >BODY\\\n EVALUATE\\\n SOURCE >IN\\\n <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\\\n FILL MOVE\\\n . CR EMIT SPACE SPACES TYPE U. .R U.R\\\n ACCEPT\\\n TRUE FALSE\\\n <> U> 0<> 0>\\\n NIP TUCK ROLL PICK\\\n 2>R 2R@ 2R>\\\n WITHIN UNUSED MARKER\\\n I J\\\n TO\\\n COMPILE, [COMPILE]\\\n SAVE-INPUT RESTORE-INPUT\\\n PAD ERASE\\\n 2LITERAL DNEGATE\\\n D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\\\n M+ M*/ D. D.R 2ROT DU<\\\n CATCH THROW\\\n FREE RESIZE ALLOCATE\\\n CS-PICK CS-ROLL\\\n GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\\\n PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\\\n -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');\n\n  var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');\n\n  CodeMirror.defineMode('forth', function() {\n    function searchWordList (wordList, word) {\n      var i;\n      for (i = wordList.length - 1; i >= 0; i--) {\n        if (wordList[i].name === word.toUpperCase()) {\n          return wordList[i];\n        }\n      }\n      return undefined;\n    }\n  return {\n    startState: function() {\n      return {\n        state: '',\n        base: 10,\n        coreWordList: coreWordList,\n        immediateWordList: immediateWordList,\n        wordList: []\n      };\n    },\n    token: function (stream, stt) {\n      var mat;\n      if (stream.eatSpace()) {\n        return null;\n      }\n      if (stt.state === '') { // interpretation\n        if (stream.match(/^(\\]|:NONAME)(\\s|$)/i)) {\n          stt.state = ' compilation';\n          return 'builtin compilation';\n        }\n        mat = stream.match(/^(\\:)\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          stt.state = ' compilation';\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\\s+(\\S+)(\\s|$)+/i);\n        if (mat) {\n          stt.wordList.push({name: mat[2].toUpperCase()});\n          return 'def' + stt.state;\n        }\n        mat = stream.match(/^(\\'|\\[\\'\\])\\s+(\\S+)(\\s|$)+/);\n        if (mat) {\n          return 'builtin' + stt.state;\n        }\n        } else { // compilation\n        // ; [\n        if (stream.match(/^(\\;|\\[)(\\s)/)) {\n          stt.state = '';\n          stream.backUp(1);\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(\\;|\\[)($)/)) {\n          stt.state = '';\n          return 'builtin compilation';\n        }\n        if (stream.match(/^(POSTPONE)\\s+\\S+(\\s|$)+/)) {\n          return 'builtin';\n        }\n      }\n\n      // dynamic wordlist\n      mat = stream.match(/^(\\S+)(\\s+|$)/);\n      if (mat) {\n        if (searchWordList(stt.wordList, mat[1]) !== undefined) {\n          return 'variable' + stt.state;\n        }\n\n        // comments\n        if (mat[1] === '\\\\') {\n          stream.skipToEnd();\n            return 'comment' + stt.state;\n          }\n\n          // core words\n          if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {\n            return 'builtin' + stt.state;\n          }\n          if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {\n            return 'keyword' + stt.state;\n          }\n\n          if (mat[1] === '(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'comment' + stt.state;\n          }\n\n          // // strings\n          if (mat[1] === '.(') {\n            stream.eatWhile(function (s) { return s !== ')'; });\n            stream.eat(')');\n            return 'string' + stt.state;\n          }\n          if (mat[1] === 'S\"' || mat[1] === '.\"' || mat[1] === 'C\"') {\n            stream.eatWhile(function (s) { return s !== '\"'; });\n            stream.eat('\"');\n            return 'string' + stt.state;\n          }\n\n          // numbers\n          if (mat[1] - 0xfffffffff) {\n            return 'number' + stt.state;\n          }\n          // if (mat[1].match(/^[-+]?[0-9]+\\.[0-9]*/)) {\n          //     return 'number' + stt.state;\n          // }\n\n          return 'atom' + stt.state;\n        }\n      }\n    };\n  });\n  CodeMirror.defineMIME(\"text/x-forth\", \"forth\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","toWordList","words","ret","split","forEach","e","push","name","coreWordList","immediateWordList","defineMode","searchWordList","wordList","word","i","length","toUpperCase","startState","state","base","token","stream","stt","mat","eatSpace","match","backUp","undefined","skipToEnd","eatWhile","s","eat","defineMIME"]
}
