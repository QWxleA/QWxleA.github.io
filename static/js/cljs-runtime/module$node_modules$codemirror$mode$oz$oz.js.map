{
"version":3,
"file":"module$node_modules$codemirror$mode$oz$oz.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/codemirror/mode/oz/oz.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$oz$oz\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"oz\", function (conf) {\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\n  var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\n  var tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\n  var middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n    \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\n  var end = [\"end\"];\n\n  var atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\n  var commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n    \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\n  var openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n    \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\n  var middleKeywords = wordRegexp(middle);\n  var endKeywords = wordRegexp(end);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    // Brackets\n    if(stream.match(/[{}]/)) {\n      return \"bracket\";\n    }\n\n    // Special [] keyword\n    if (stream.match(/(\\[])/)) {\n        return \"keyword\"\n    }\n\n    // Operators\n    if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n      return \"operator\";\n    }\n\n    // Atoms\n    if(stream.match(atoms)) {\n      return 'atom';\n    }\n\n    // Opening keywords\n    var matched = stream.match(openingKeywords);\n    if (matched) {\n      if (!state.doInCurrentLine)\n        state.currentIndent++;\n      else\n        state.doInCurrentLine = false;\n\n      // Special matching for signatures\n      if(matched[0] == \"proc\" || matched[0] == \"fun\")\n        state.tokenize = tokenFunProc;\n      else if(matched[0] == \"class\")\n        state.tokenize = tokenClass;\n      else if(matched[0] == \"meth\")\n        state.tokenize = tokenMeth;\n\n      return 'keyword';\n    }\n\n    // Middle and other keywords\n    if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n      return \"keyword\"\n    }\n\n    // End keywords\n    if (stream.match(endKeywords)) {\n      state.currentIndent--;\n      return 'keyword';\n    }\n\n    // Eat the next char for next comparisons\n    var ch = stream.next();\n\n    // Strings\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n\n    // Numbers\n    if (/[~\\d]/.test(ch)) {\n      if (ch == \"~\") {\n        if(! /^[0-9]/.test(stream.peek()))\n          return null;\n        else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n          return \"number\";\n      }\n\n      if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n\n      return null;\n    }\n\n    // Comments\n    if (ch == \"%\") {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n    }\n\n    // Single operators\n    if(singleOperators.test(ch)) {\n      return \"operator\";\n    }\n\n    // If nothing match, we skip the entire alphanumerical block\n    stream.eatWhile(/\\w/);\n\n    return \"variable\";\n  }\n\n  function tokenClass(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"variable-3\"\n  }\n\n  function tokenMeth(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n    stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n\n  function tokenFunProc(stream, state) {\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n      state.hasPassedFirstStage = true;\n      return \"bracket\";\n    }\n    else if(state.hasPassedFirstStage) {\n      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n      state.hasPassedFirstStage = false;\n      state.tokenize = tokenBase;\n      return \"def\"\n    }\n    else {\n      state.tokenize = tokenBase;\n      return null;\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  function tokenString(quote) {\n    return function (stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {\n          end = true;\n          break;\n        }\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped)\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on [] or on a match of any of\n    // the block closing keywords, at the end of a line.\n    var allClosings = middle.concat(end);\n    return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n  }\n\n  return {\n\n    startState: function () {\n      return {\n        tokenize: tokenBase,\n        currentIndent: 0,\n        doInCurrentLine: false,\n        hasPassedFirstStage: false\n      };\n    },\n\n    token: function (stream, state) {\n      if (stream.sol())\n        state.doInCurrentLine = 0;\n\n      return state.tokenize(stream, state);\n    },\n\n    indent: function (state, textAfter) {\n      var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n      if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n        return conf.indentUnit * (state.currentIndent - 1);\n\n      if (state.currentIndent < 0)\n        return 0;\n\n      return state.currentIndent * conf.indentUnit;\n    },\n    fold: \"indent\",\n    electricInput: buildElectricInputRegEx(),\n    lineComment: \"%\",\n    blockCommentStart: \"/*\",\n    blockCommentEnd: \"*/\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-oz\", \"oz\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","conf","wordRegexp","words","RegExp","join","tokenBase","stream","state","eatSpace","match","tripleOperators","doubleOperators","atoms","matched","openingKeywords","doInCurrentLine","currentIndent","tokenize","tokenFunProc","tokenClass","tokenMeth","middleKeywords","commonKeywords","endKeywords","ch","next","tokenString","test","peek","skipToEnd","eat","tokenComment","singleOperators","eatWhile","hasPassedFirstStage","maybeEnd","quote","escaped","end","middle","startState","token","sol","indent","textAfter","trueText","replace","indentUnit","fold","electricInput","buildElectricInputRegEx","allClosings","concat","lineComment","blockCommentStart","blockCommentEnd","defineMIME"]
}
