{
"version":3,
"file":"module$node_modules$codemirror$mode$cypher$cypher.js",
"lineCount":8,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAO7G,SAAQ,CAACC,GAAD,CAAM,CACS,QAAtB,EAAI,MAAOD,QAAX,EAAmD,QAAnD,EAAkC,MAAOD,OAAzC,CACEE,GAAA,CAAIH,OAAA,CAAQ,+CAAR,CAAJ,CADF,CAE0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAOC,CAAAA,GAA1C,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAP,CAAiCD,GAAjC,CADG,CAGHA,GAAA,CAAIG,UAAJ,CANW,CAAd,CAAD,CAOG,QAAQ,CAACA,UAAD,CAAa,CAEtB,IAAIC,WAAaA,QAAQ,CAACC,KAAD,CAAQ,CAC/B,MAAO,KAAIC,MAAJ,CAAW,MAAX,CAAoBD,KAAME,CAAAA,IAAN,CAAW,GAAX,CAApB,CAAsC,IAAtC,CAA4C,GAA5C,CADwB,CAIjCJ,WAAWK,CAAAA,UAAX,CAAsB,QAAtB,CAAgC,QAAQ,CAACC,MAAD,CAAS,CAC/C,IAAIC,UAAYA,QAAQ,CAACC,MAAD,CAAoB,CAC1C,IAAIC;AAAKD,MAAOE,CAAAA,IAAP,EACT,IAAU,GAAV,GAAID,EAAJ,CAEE,MADAD,OAAOG,CAAAA,KAAP,CAAa,MAAb,CACO,CAAA,QAET,IAAW,GAAX,GAAIF,EAAJ,CAEE,MADAD,OAAOG,CAAAA,KAAP,CAAa,MAAb,CACO,CAAA,QAET,IAAI,kBAAmBC,CAAAA,IAAnB,CAAwBH,EAAxB,CAAJ,CAEE,MADAI,QACO,CADGJ,EACH,CAAA,MACF,IAAW,GAAX,GAAIA,EAAJ,EAAkBD,MAAOM,CAAAA,GAAP,CAAW,GAAX,CAAlB,CAEL,MADAN,OAAOO,CAAAA,SAAP,EACO,CAAA,SACF,IAAIC,aAAcJ,CAAAA,IAAd,CAAmBH,EAAnB,CAAJ,CAEL,MADAD,OAAOS,CAAAA,QAAP,CAAgBD,aAAhB,CACO,CAAA,IAEPR,OAAOS,CAAAA,QAAP,CAAgB,SAAhB,CACA,IAAIT,MAAOM,CAAAA,GAAP,CAAW,GAAX,CAAJ,CAEE,MADAN,OAAOS,CAAAA,QAAP,CAAgB,WAAhB,CACO,CAAA,MAELC,OAAAA,CAAOV,MAAOW,CAAAA,OAAP,EACX,OAAIC,MAAMR,CAAAA,IAAN,CAAWM,MAAX,CAAJ,CAA6B,SAA7B,CACIG,KAAMT,CAAAA,IAAN,CAAWM,MAAX,CAAJ,CAA6B,KAA7B,CACII,QAASV,CAAAA,IAAT,CAAcM,MAAd,CAAJ,EAA2BK,cAAeX,CAAAA,IAAf,CAAoBM,MAApB,CAA3B;AAA6D,SAA7D,CACO,UA7BiC,CAA5C,CAgCIM,YAAcA,QAAQ,CAACC,KAAD,CAAQC,IAAR,CAAcC,GAAd,CAAmB,CAC3C,MAAOF,MAAMG,CAAAA,OAAb,CAAuB,CACrBC,KAAMJ,KAAMG,CAAAA,OADS,CAErBE,OAAQL,KAAMK,CAAAA,MAFO,CAGhBH,GAHgB,CAIfD,IAJe,CADoB,CAhC7C,CAwCIK,WAAaA,QAAQ,CAACN,KAAD,CAAQ,CAC/BA,KAAMK,CAAAA,MAAN,CAAeL,KAAMG,CAAAA,OAAQE,CAAAA,MAC7B,OAAOL,MAAMG,CAAAA,OAAb,CAAuBH,KAAMG,CAAAA,OAAQC,CAAAA,IAFN,CAxCjC,CA4CIG,WAAa1B,MAAO0B,CAAAA,UA5CxB,CA6CInB,OA7CJ,CA8CIO,MAAQnB,UAAA,CAAW,0dAAA,CAAA,KAAA,CAAA,GAAA,CAAX,CA9CZ;AA+CIoB,MAAQpB,UAAA,CAAW,2DAAA,CAAA,KAAA,CAAA,GAAA,CAAX,CA/CZ,CAgDIqB,SAAWrB,UAAA,CAAW,0WAAA,CAAA,KAAA,CAAA,GAAA,CAAX,CAhDf,CAiDIsB,eAAiBtB,UAAA,CAAW,gdAAA,CAAA,KAAA,CAAA,GAAA,CAAX,CAjDrB;AAkDIe,cAAgB,gBAEpB,OAAO,CACLiB,WAAYA,QAAQ,EAAW,CAC7B,MAAO,CACLC,SAAU3B,SADL,CAELqB,QAAS,IAFJ,CAGLE,OAAQ,CAHH,CAILH,IAAK,CAJA,CADsB,CAD1B,CASLQ,MAAOA,QAAQ,CAAC3B,MAAD,CAASiB,KAAT,CAAgB,CACzBjB,MAAO4B,CAAAA,GAAP,EAAJ,GACMX,KAAMG,CAAAA,OAGV,EAH6C,IAG7C,EAHsBH,KAAMG,CAAAA,OAAQS,CAAAA,KAGpC,GAFEZ,KAAMG,CAAAA,OAAQS,CAAAA,KAEhB,CAFwB,CAAA,CAExB,EAAAZ,KAAMK,CAAAA,MAAN,CAAetB,MAAO8B,CAAAA,WAAP,EAJjB,CAMA,IAAI9B,MAAO+B,CAAAA,QAAP,EAAJ,CACE,MAAO,KAET,KAAIC,MAAQf,KAAMS,CAAAA,QAAN,CAAe1B,MAAf,CAAuBiB,KAAvB,CACE,UAAd,GAAIe,KAAJ,EAA2Bf,KAAMG,CAAAA,OAAjC,EAAoE,IAApE,EAA6CH,KAAMG,CAAAA,OAAQS,CAAAA,KAA3D,EAAoG,SAApG,GAA6EZ,KAAMG,CAAAA,OAAQF,CAAAA,IAA3F,GACED,KAAMG,CAAAA,OAAQS,CAAAA,KADhB,CACwB,CAAA,CADxB,CAGA,IAAgB,GAAhB,GAAIxB,OAAJ,CACEW,WAAA,CAAYC,KAAZ,CAAmB,GAAnB,CAAwBjB,MAAOiC,CAAAA,MAAP,EAAxB,CADF;IAEO,IAAgB,GAAhB,GAAI5B,OAAJ,CACLW,WAAA,CAAYC,KAAZ,CAAmB,GAAnB,CAAwBjB,MAAOiC,CAAAA,MAAP,EAAxB,CADK,KAEA,IAAgB,GAAhB,GAAI5B,OAAJ,CACLW,WAAA,CAAYC,KAAZ,CAAmB,GAAnB,CAAwBjB,MAAOiC,CAAAA,MAAP,EAAxB,CADK,KAEA,IAAI,UAAW7B,CAAAA,IAAX,CAAgBC,OAAhB,CAAJ,CAA8B,CACnC,IAAA,CAAOY,KAAMG,CAAAA,OAAb,EAA+C,SAA/C,GAAwBH,KAAMG,CAAAA,OAAQF,CAAAA,IAAtC,CAAA,CACEK,UAAA,CAAWN,KAAX,CAEEA,MAAMG,CAAAA,OAAV,EAAqBf,OAArB,GAAiCY,KAAMG,CAAAA,OAAQF,CAAAA,IAA/C,EACEK,UAAA,CAAWN,KAAX,CALiC,CAA9B,IAOgB,GAAhB,GAAIZ,OAAJ,EAAuBY,KAAMG,CAAAA,OAA7B,EAA+D,SAA/D,GAAwCH,KAAMG,CAAAA,OAAQF,CAAAA,IAAtD,CACLK,UAAA,CAAWN,KAAX,CADK,CAEI,sBAAuBb,CAAAA,IAAvB,CAA4B4B,KAA5B,CAFJ,EAE0Cf,KAAMG,CAAAA,OAFhD,GAGD,QAAShB,CAAAA,IAAT,CAAca,KAAMG,CAAAA,OAAQF,CAAAA,IAA5B,CAAJ,CACEF,WAAA,CAAYC,KAAZ,CAAmB,SAAnB,CAA8BjB,MAAOiC,CAAAA,MAAP,EAA9B,CADF;AAEkC,SAFlC,GAEWhB,KAAMG,CAAAA,OAAQF,CAAAA,IAFzB,EAEgDD,KAAMG,CAAAA,OAAQS,CAAAA,KAF9D,GAGEZ,KAAMG,CAAAA,OAAQS,CAAAA,KACd,CADsB,CAAA,CACtB,CAAAZ,KAAMG,CAAAA,OAAQD,CAAAA,GAAd,CAAoBnB,MAAOiC,CAAAA,MAAP,EAJtB,CAHK,CAUP,OAAOD,MArCsB,CAT1B,CAgDLV,OAAQA,QAAQ,CAACL,KAAD,CAAQiB,SAAR,CAAmB,CAC7BC,SAAAA,CAAYD,SAAZC,EAAyBD,SAAUE,CAAAA,MAAV,CAAiB,CAAjB,CACzBhB,MAAAA,CAAUH,KAAMG,CAAAA,OACpB,IAAI,QAAShB,CAAAA,IAAT,CAAc+B,SAAd,CAAJ,CACE,IAAA,CAAOf,KAAP,EAAmC,SAAnC,GAAkBA,KAAQF,CAAAA,IAA1B,CAAA,CACEE,KAAA,CAAUA,KAAQC,CAAAA,IAGlBgB,UAAAA,CAAUjB,KAAViB,EAAqBF,SAArBE,GAAmCjB,KAAQF,CAAAA,IAC/C,OAAKE,MAAL,CACqB,UAArB,GAAIA,KAAQF,CAAAA,IAAZ,CAAwC1B,UAAW8C,CAAAA,QAASC,CAAAA,gBAA5D,CACInB,KAAQS,CAAAA,KAAZ,CAA0BT,KAAQD,CAAAA,GAAlC,EAAyCkB,SAAA,CAAU,CAAV,CAAc,CAAvD,EACOjB,KAAQE,CAAAA,MADf,EACyBe,SAAA,CAAU,CAAV,CAAcb,UADvC,CAFA,CAAqB,CATY,CAhD9B,CArDwC,CAAjD,CAsHAhC,WAAWgD,CAAAA,cAAX,CAAA,MAAA;AAAsC,CACpCC,qBAAsBA,QAAQ,CAACC,IAAD,CAAO,CAEnC,IAAIC,MAAQD,IAAKE,CAAAA,KAAL,CAAW,IAAX,CACZ,KAAIC,mBAAqB,2EACzB,KAASC,IAAT,CAAa,CAAb,CAAgBA,IAAhB,CAAoBH,KAAMI,CAAAA,MAA1B,CAAkCD,IAAA,EAAlC,CACEH,KAAA,CAAMG,IAAN,CAAA,CAAWH,KAAA,CAAMG,IAAN,CAASE,CAAAA,OAAT,CAAiBH,kBAAjB,CAAqC,QAArC,CAA+CI,CAAAA,IAA/C,EACb,OAAON,MAAM/C,CAAAA,IAAN,CAAW,IAAX,CAN4B,CADD,CAWtCJ,WAAW0D,CAAAA,UAAX,CAAsB,4BAAtB,CAAoD,QAApD,CAvIsB,CAPxB,CAP8G;",
"sources":["node_modules/codemirror/mode/cypher/cypher.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$cypher$cypher\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// By the Neo4j Team and contributors.\n// https://github.com/neo4j-contrib/CodeMirror\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var wordRegexp = function(words) {\n    return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n  };\n\n  CodeMirror.defineMode(\"cypher\", function(config) {\n    var tokenBase = function(stream/*, state*/) {\n      var ch = stream.next();\n      if (ch ==='\"') {\n        stream.match(/.*?\"/);\n        return \"string\";\n      }\n      if (ch === \"'\") {\n        stream.match(/.*?'/);\n        return \"string\";\n      }\n      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n        curPunc = ch;\n        return \"node\";\n      } else if (ch === \"/\" && stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      } else if (operatorChars.test(ch)) {\n        stream.eatWhile(operatorChars);\n        return null;\n      } else {\n        stream.eatWhile(/[_\\w\\d]/);\n        if (stream.eat(\":\")) {\n          stream.eatWhile(/[\\w\\d_\\-]/);\n          return \"atom\";\n        }\n        var word = stream.current();\n        if (funcs.test(word)) return \"builtin\";\n        if (preds.test(word)) return \"def\";\n        if (keywords.test(word) || systemKeywords.test(word)) return \"keyword\";\n        return \"variable\";\n      }\n    };\n    var pushContext = function(state, type, col) {\n      return state.context = {\n        prev: state.context,\n        indent: state.indent,\n        col: col,\n        type: type\n      };\n    };\n    var popContext = function(state) {\n      state.indent = state.context.indent;\n      return state.context = state.context.prev;\n    };\n    var indentUnit = config.indentUnit;\n    var curPunc;\n    var funcs = wordRegexp([\"abs\", \"acos\", \"allShortestPaths\", \"asin\", \"atan\", \"atan2\", \"avg\", \"ceil\", \"coalesce\", \"collect\", \"cos\", \"cot\", \"count\", \"degrees\", \"e\", \"endnode\", \"exp\", \"extract\", \"filter\", \"floor\", \"haversin\", \"head\", \"id\", \"keys\", \"labels\", \"last\", \"left\", \"length\", \"log\", \"log10\", \"lower\", \"ltrim\", \"max\", \"min\", \"node\", \"nodes\", \"percentileCont\", \"percentileDisc\", \"pi\", \"radians\", \"rand\", \"range\", \"reduce\", \"rel\", \"relationship\", \"relationships\", \"replace\", \"reverse\", \"right\", \"round\", \"rtrim\", \"shortestPath\", \"sign\", \"sin\", \"size\", \"split\", \"sqrt\", \"startnode\", \"stdev\", \"stdevp\", \"str\", \"substring\", \"sum\", \"tail\", \"tan\", \"timestamp\", \"toFloat\", \"toInt\", \"toString\", \"trim\", \"type\", \"upper\"]);\n    var preds = wordRegexp([\"all\", \"and\", \"any\", \"contains\", \"exists\", \"has\", \"in\", \"none\", \"not\", \"or\", \"single\", \"xor\"]);\n    var keywords = wordRegexp([\"as\", \"asc\", \"ascending\", \"assert\", \"by\", \"case\", \"commit\", \"constraint\", \"create\", \"csv\", \"cypher\", \"delete\", \"desc\", \"descending\", \"detach\", \"distinct\", \"drop\", \"else\", \"end\", \"ends\", \"explain\", \"false\", \"fieldterminator\", \"foreach\", \"from\", \"headers\", \"in\", \"index\", \"is\", \"join\", \"limit\", \"load\", \"match\", \"merge\", \"null\", \"on\", \"optional\", \"order\", \"periodic\", \"profile\", \"remove\", \"return\", \"scan\", \"set\", \"skip\", \"start\", \"starts\", \"then\", \"true\", \"union\", \"unique\", \"unwind\", \"using\", \"when\", \"where\", \"with\", \"call\", \"yield\"]);\n    var systemKeywords = wordRegexp([\"access\", \"active\", \"assign\", \"all\", \"alter\", \"as\", \"catalog\", \"change\", \"copy\", \"create\", \"constraint\", \"constraints\", \"current\", \"database\", \"databases\", \"dbms\", \"default\", \"deny\", \"drop\", \"element\", \"elements\", \"exists\", \"from\", \"grant\", \"graph\", \"graphs\", \"if\", \"index\", \"indexes\", \"label\", \"labels\", \"management\", \"match\", \"name\", \"names\", \"new\", \"node\", \"nodes\", \"not\", \"of\", \"on\", \"or\", \"password\", \"populated\", \"privileges\", \"property\", \"read\", \"relationship\", \"relationships\", \"remove\", \"replace\", \"required\", \"revoke\", \"role\", \"roles\", \"set\", \"show\", \"start\", \"status\", \"stop\", \"suspended\", \"to\", \"traverse\", \"type\", \"types\", \"user\", \"users\", \"with\", \"write\"]);\n    var operatorChars = /[*+\\-<>=&|~%^]/;\n\n    return {\n      startState: function(/*base*/) {\n        return {\n          tokenize: tokenBase,\n          context: null,\n          indent: 0,\n          col: 0\n        };\n      },\n      token: function(stream, state) {\n        if (stream.sol()) {\n          if (state.context && (state.context.align == null)) {\n            state.context.align = false;\n          }\n          state.indent = stream.indentation();\n        }\n        if (stream.eatSpace()) {\n          return null;\n        }\n        var style = state.tokenize(stream, state);\n        if (style !== \"comment\" && state.context && (state.context.align == null) && state.context.type !== \"pattern\") {\n          state.context.align = true;\n        }\n        if (curPunc === \"(\") {\n          pushContext(state, \")\", stream.column());\n        } else if (curPunc === \"[\") {\n          pushContext(state, \"]\", stream.column());\n        } else if (curPunc === \"{\") {\n          pushContext(state, \"}\", stream.column());\n        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n          while (state.context && state.context.type === \"pattern\") {\n            popContext(state);\n          }\n          if (state.context && curPunc === state.context.type) {\n            popContext(state);\n          }\n        } else if (curPunc === \".\" && state.context && state.context.type === \"pattern\") {\n          popContext(state);\n        } else if (/atom|string|variable/.test(style) && state.context) {\n          if (/[\\}\\]]/.test(state.context.type)) {\n            pushContext(state, \"pattern\", stream.column());\n          } else if (state.context.type === \"pattern\" && !state.context.align) {\n            state.context.align = true;\n            state.context.col = stream.column();\n          }\n        }\n        return style;\n      },\n      indent: function(state, textAfter) {\n        var firstChar = textAfter && textAfter.charAt(0);\n        var context = state.context;\n        if (/[\\]\\}]/.test(firstChar)) {\n          while (context && context.type === \"pattern\") {\n            context = context.prev;\n          }\n        }\n        var closing = context && firstChar === context.type;\n        if (!context) return 0;\n        if (context.type === \"keywords\") return CodeMirror.commands.newlineAndIndent;\n        if (context.align) return context.col + (closing ? 0 : 1);\n        return context.indent + (closing ? 0 : indentUnit);\n      }\n    };\n  });\n\n  CodeMirror.modeExtensions[\"cypher\"] = {\n    autoFormatLineBreaks: function(text) {\n      var i, lines, reProcessedPortion;\n      var lines = text.split(\"\\n\");\n      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n      for (var i = 0; i < lines.length; i++)\n        lines[i] = lines[i].replace(reProcessedPortion, \" \\n$1 \").trim();\n      return lines.join(\"\\n\");\n    }\n  };\n\n  CodeMirror.defineMIME(\"application/x-cypher-query\", \"cypher\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","wordRegexp","words","RegExp","join","defineMode","config","tokenBase","stream","ch","next","match","test","curPunc","eat","skipToEnd","operatorChars","eatWhile","word","current","funcs","preds","keywords","systemKeywords","pushContext","state","type","col","context","prev","indent","popContext","indentUnit","startState","tokenize","token","sol","align","indentation","eatSpace","style","column","textAfter","firstChar","charAt","closing","commands","newlineAndIndent","modeExtensions","autoFormatLineBreaks","text","lines","split","reProcessedPortion","i","length","replace","trim","defineMIME"]
}
