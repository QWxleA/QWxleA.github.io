{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$nl$parsers$NLCasualYearMonthDayParser.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,CAAuG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE/IC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,YAAcN,OAAA,CAAQ,2DAAR,CACdO,OAAAA,CAAYP,OAAA,CAAQ,oDAAR,CACZQ,QAAAA,CAAmCR,OAAA,CAAQ,oFAAR,CACzC,OAAMS,QAAU,IAAIC,MAAJ,CAAY,uBAAZ,CACZ,OAAOH,MAAUI,CAAAA,eAAV,CAA0BL,WAAYM,CAAAA,gBAAtC,CAAP,4BADY;AAEX,0BAFW,CAGC,GAHD,CAQhB,MAAMC,2BAAN,QAAyCL,QAAiCM,CAAAA,sCAA1E,CACIC,YAAY,EAAG,CACX,MAAON,QADI,CAGfO,YAAY,CAACC,OAAD,CAAUC,KAAV,CAAiB,CACnBC,OAAAA,CAAQD,KAAA,CAPKE,CAOL,CAAA,CACRC,QAAA,CAASH,KAAA,CARIE,CAQJ,CAAT,CADQ,CAERd,WAAYM,CAAAA,gBAAZ,CAA6BM,KAAA,CAVlBI,CAUkB,CAAwBC,CAAAA,WAAxB,EAA7B,CACN,IAAY,CAAZ,CAAIJ,OAAJ,EAAyB,EAAzB,CAAiBA,OAAjB,CACI,MAAO,KAEX,OAAMK,KAAOH,QAAA,CAASH,KAAA,CAfJO,CAeI,CAAT,CAEb,OAAO,CACHC,IAFQL,QAAAK,CAASR,KAAA,CAbHS,CAaG,CAATD,CACL,CAEHP,MAAOA,OAFJ,CAGGK,IAHH,CATkB,CAJjC,CAoBAtB,OAAQ0B,CAAAA,OAAR,CAAkBf,0BAlC6H;",
"sources":["node_modules/chrono-node/dist/locales/nl/parsers/NLCasualYearMonthDayParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$nl$parsers$NLCasualYearMonthDayParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst pattern_1 = require(\"../../../utils/pattern\");\nconst AbstractParserWithWordBoundary_1 = require(\"../../../common/parsers/AbstractParserWithWordBoundary\");\nconst PATTERN = new RegExp(`([0-9]{4})[\\\\.\\\\/\\\\s]` +\n    `(?:(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` +\n    `([0-9]{1,2})` +\n    \"(?=\\\\W|$)\", \"i\");\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\nclass NLCasualYearMonthDayParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const month = match[MONTH_NUMBER_GROUP]\n            ? parseInt(match[MONTH_NUMBER_GROUP])\n            : constants_1.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        if (month < 1 || month > 12) {\n            return null;\n        }\n        const year = parseInt(match[YEAR_NUMBER_GROUP]);\n        const day = parseInt(match[DATE_NUMBER_GROUP]);\n        return {\n            day: day,\n            month: month,\n            year: year,\n        };\n    }\n}\nexports.default = NLCasualYearMonthDayParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","constants_1","pattern_1","AbstractParserWithWordBoundary_1","PATTERN","RegExp","matchAnyPattern","MONTH_DICTIONARY","NLCasualYearMonthDayParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","month","MONTH_NUMBER_GROUP","parseInt","MONTH_NAME_GROUP","toLowerCase","year","YEAR_NUMBER_GROUP","day","DATE_NUMBER_GROUP","default"]
}
