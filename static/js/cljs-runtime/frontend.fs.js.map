{"version":3,"sources":["frontend/fs.cljs"],"mappings":"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","names":["js/frontend","js/frontend.fs","js/frontend.fs.nfs-record","frontend.fs/nfs-record","frontend.fs.nfs/->Nfs","js/frontend.fs.bfs-record","frontend.fs/bfs-record","frontend.fs.bfs/->Bfs","js/frontend.fs.node-record","frontend.fs/node-record","frontend.fs.node/->Node","js/frontend.fs.mobile-record","frontend.fs/mobile-record","frontend.fs.capacitor-fs/->Capacitorfs","frontend.fs/local-db?","dir","frontend.config/local-db?","cljs.core.subs","frontend.fs/get-fs","bfs-local?","clojure.string/starts-with?","and__5041__auto__","frontend.util/electron?","frontend.mobile.util/native-platform?","frontend.fs/mkdir!","frontend.fs.protocol/mkdir!","frontend.fs/mkdir-recur!","frontend.fs.protocol/mkdir-recur!","frontend.fs/readdir","frontend.fs.protocol/readdir","frontend.fs/unlink!","repo","path","opts","frontend.fs.protocol/unlink!","frontend.fs/rmdir!","temp__5720__auto__","fs","cljs.core._EQ_","frontend.fs.protocol/rmdir!","frontend.fs/delete-file!","fs-record","frontend.fs.protocol/delete-file!","frontend.fs/write-file!","content","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","md-or-org?","cljs.core/contains?","frontend.util/get-file-ext","cljs.core/not","frontend.encrypt.encrypt","_","frontend.fs.protocol/write-file!","G__43828","G__43829","G__43830","frontend.db/set-file-last-modified-at!","frontend.config/get-file-path","js/Date","promesa.core.catch$","error","lambdaisland.glogi.log","cljs.core/identity","var_args","G__43832","frontend.fs/read-file","js/Error","options","frontend.fs.read_file","frontend.fs.protocol/read-file","frontend.fs/rename!","old-path","new-path","promesa.core/resolved","vec__43834","cljs.core.nth","p1__43833#","cljs.core.map","or__5043__auto__","frontend.config/get-repo-dir","frontend.fs.protocol/rename!","frontend.fs/stat","frontend.fs.protocol/stat","frontend.fs/get-record","frontend.fs/open-dir","ok-handler","record","result","frontend.fs.protocol/open-dir","vec__43837","seq__43838","cljs.core/seq","first__43839","cljs.core/first","cljs.core/next","paths","cljs-bean.core/->clj","frontend.fs/get-files","path-or-handle","electron?","mobile?","frontend.fs.protocol/get-files","cljs.core/rest","frontend.fs/watch-dir!","frontend.fs.protocol/watch-dir!","frontend.fs/mkdir-if-not-exists","frontend.util.p_handle","_stat","_error","js/console.error","G__43841","frontend.fs/create-if-not-exists","frontend.fs.create_if_not_exists","initial-content","frontend.util/absolute-path?","frontend.util/starts-with?","frontend.fs/file-exists?","_e"],"sourcesContent":["(ns frontend.fs\n  (:require [cljs-bean.core :as bean]\n            [frontend.config :as config]\n            [frontend.fs.nfs :as nfs]\n            [frontend.fs.node :as node]\n            [frontend.fs.capacitor-fs :as mobile]\n            [frontend.fs.bfs :as bfs]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.fs.protocol :as protocol]\n            [frontend.util :as util]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.db :as db]\n            [clojure.string :as string]\n            [frontend.encrypt :as encrypt]))\n\n(defonce nfs-record (nfs/->Nfs))\n(defonce bfs-record (bfs/->Bfs))\n(defonce node-record (node/->Node))\n(defonce mobile-record (mobile/->Capacitorfs))\n\n(defn local-db?\n  [dir]\n  (and (string? dir)\n       (config/local-db? (subs dir 1))))\n\n(defn get-fs\n  [dir]\n  (let [bfs-local? (or (string/starts-with? dir \"/local\")\n                       (string/starts-with? dir \"local\"))]\n    (cond\n      (and (util/electron?) (not bfs-local?))\n      node-record\n\n      (mobile-util/native-platform?)\n      mobile-record\n\n      (local-db? dir)\n      nfs-record\n\n      :else\n      bfs-record)))\n\n(defn mkdir!\n  [dir]\n  (protocol/mkdir! (get-fs dir) dir))\n\n(defn mkdir-recur!\n  [dir]\n  (protocol/mkdir-recur! (get-fs dir) dir))\n\n(defn readdir\n  [dir]\n  (protocol/readdir (get-fs dir) dir))\n\n(defn unlink!\n  \"Should move the path to logseq/recycle instead of deleting it.\"\n  [repo path opts]\n  (protocol/unlink! (get-fs path) repo path opts))\n\n(defn rmdir!\n  \"Remove the directory recursively.\n   Warning: only run it for browser cache.\"\n  [dir]\n  (when-let [fs (get-fs dir)]\n    (when (= fs bfs-record)\n      (protocol/rmdir! fs dir))))\n\n(defn delete-file!\n  [repo dir path opts]\n  (let [fs-record (get-fs dir)]\n    (when (= fs-record mobile-record)\n      (protocol/delete-file! fs-record repo dir path opts))))\n\n(defn write-file!\n  [repo dir path content opts]\n  (when content\n    (let [fs-record (get-fs dir)]\n      (p/let [md-or-org? (contains? #{\"md\" \"markdown\" \"org\"} (util/get-file-ext path))\n              content (if-not md-or-org? content (encrypt/encrypt content))]\n        (->\n         (p/let [_ (protocol/write-file! (get-fs dir) repo dir path content opts)]\n           (when (= bfs-record fs-record)\n             (db/set-file-last-modified-at! repo (config/get-file-path repo path) (js/Date.))))\n         (p/catch (fn [error]\n                    (log/error :file/write-failed {:dir dir\n                                                   :path path\n                                                   :error error})\n                    ;; Disable this temporarily\n                    ;; (js/alert \"Current file can't be saved! Please copy its content to your local file system and click the refresh button.\")\n                    )))))))\n\n(defn read-file\n  ([dir path]\n   (let [fs (get-fs dir)\n         options (if (= fs bfs-record)\n                   {:encoding \"utf8\"}\n                   {})]\n     (read-file dir path options)))\n  ([dir path options]\n   (protocol/read-file (get-fs dir) dir path options)))\n\n(defn rename!\n  [repo old-path new-path]\n  (cond\n                                        ; See https://github.com/isomorphic-git/lightning-fs/issues/41\n    (= old-path new-path)\n    (p/resolved nil)\n\n    :else\n    (let [[old-path new-path]\n          (map #(if (or (util/electron?) (mobile-util/native-platform?))\n                  %\n                  (str (config/get-repo-dir repo) \"/\" %))\n               [old-path new-path])]\n      (protocol/rename! (get-fs old-path) repo old-path new-path))))\n\n(defn stat\n  [dir path]\n  (protocol/stat (get-fs dir) dir path))\n\n(defn- get-record\n  []\n  (cond\n    (util/electron?)\n    node-record\n\n    (mobile-util/native-platform?)\n    mobile-record\n\n    :else\n    nfs-record))\n\n(defn open-dir\n  [ok-handler]\n  (let [record (get-record)]\n    (p/let [result (protocol/open-dir record ok-handler)]\n      (if (or (util/electron?)\n              (mobile-util/native-platform?))\n        (let [[dir & paths] (bean/->clj result)]\n          [(:path dir) paths])\n        result))))\n\n(defn get-files\n  [path-or-handle ok-handler]\n  (let [record (get-record)\n        electron? (util/electron?)\n        mobile? (mobile-util/native-platform?)]\n    (p/let [result (protocol/get-files record path-or-handle ok-handler)]\n      (if (or electron? mobile?)\n        (let [result (bean/->clj result)]\n          (if electron? (rest result) result))\n        result))))\n\n(defn watch-dir!\n  [dir]\n  (protocol/watch-dir! (get-record) dir))\n\n(defn mkdir-if-not-exists\n  [dir]\n  (->\n   (when dir\n     (util/p-handle\n      (stat dir nil)\n      (fn [_stat])\n      (fn [_error]\n        (mkdir! dir))))\n   (p/catch (fn [error] (js/console.error error)))))\n\n(defn create-if-not-exists\n  ([repo dir path]\n   (create-if-not-exists repo dir path \"\"))\n  ([repo dir path initial-content]\n   (let [path (if (util/absolute-path? path) path\n                  (if (util/starts-with? path \"/\")\n                    path\n                    (str \"/\" path)))]\n     (->\n      (p/let [_stat (stat dir path)]\n        true)\n      (p/catch\n       (fn [_error]\n         (p/let [_ (write-file! repo dir path initial-content nil)]\n           false)))))))\n\n(defn file-exists?\n  [dir path]\n  (util/p-handle\n   (stat dir path)\n   (fn [_stat] true)\n   (fn [_e] false)))\n"]}