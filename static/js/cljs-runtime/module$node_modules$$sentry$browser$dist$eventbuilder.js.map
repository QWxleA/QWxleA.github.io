{
"version":3,
"file":"module$node_modules$$sentry$browser$dist$eventbuilder.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/@sentry/browser/dist/eventbuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$browser$dist$eventbuilder\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar types_1 = require(\"@sentry/types\");\nvar utils_1 = require(\"@sentry/utils\");\nvar stack_parsers_1 = require(\"./stack-parsers\");\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nfunction exceptionFromError(ex) {\n    // Get the frames first since Opera can lose the stack if we touch anything else first\n    var frames = parseStackFrames(ex);\n    var exception = {\n        type: ex && ex.name,\n        value: extractMessage(ex),\n    };\n    if (frames.length) {\n        exception.stacktrace = { frames: frames };\n    }\n    if (exception.type === undefined && exception.value === '') {\n        exception.value = 'Unrecoverable error caught';\n    }\n    return exception;\n}\nexports.exceptionFromError = exceptionFromError;\n/**\n * @hidden\n */\nfunction eventFromPlainObject(exception, syntheticException, isUnhandledRejection) {\n    var event = {\n        exception: {\n            values: [\n                {\n                    type: utils_1.isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n                    value: \"Non-Error \" + (isUnhandledRejection ? 'promise rejection' : 'exception') + \" captured with keys: \" + utils_1.extractExceptionKeysForMessage(exception),\n                },\n            ],\n        },\n        extra: {\n            __serialized__: utils_1.normalizeToSize(exception),\n        },\n    };\n    if (syntheticException) {\n        var frames_1 = parseStackFrames(syntheticException);\n        if (frames_1.length) {\n            event.stacktrace = { frames: frames_1 };\n        }\n    }\n    return event;\n}\nexports.eventFromPlainObject = eventFromPlainObject;\n/**\n * @hidden\n */\nfunction eventFromError(ex) {\n    return {\n        exception: {\n            values: [exceptionFromError(ex)],\n        },\n    };\n}\nexports.eventFromError = eventFromError;\n/** Parses stack frames from an error */\nfunction parseStackFrames(ex) {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    var stacktrace = ex.stacktrace || ex.stack || '';\n    var popSize = getPopSize(ex);\n    try {\n        return utils_1.createStackParser(stack_parsers_1.opera10StackParser, stack_parsers_1.opera11StackParser, stack_parsers_1.chromeStackParser, stack_parsers_1.winjsStackParser, stack_parsers_1.geckoStackParser)(stacktrace, popSize);\n    }\n    catch (e) {\n        // no-empty\n    }\n    return [];\n}\nexports.parseStackFrames = parseStackFrames;\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nvar reactMinifiedRegexp = /Minified React error #\\d+;/i;\nfunction getPopSize(ex) {\n    if (ex) {\n        if (typeof ex.framesToPop === 'number') {\n            return ex.framesToPop;\n        }\n        if (reactMinifiedRegexp.test(ex.message)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex) {\n    var message = ex && ex.message;\n    if (!message) {\n        return 'No error message';\n    }\n    if (message.error && typeof message.error.message === 'string') {\n        return message.error.message;\n    }\n    return message;\n}\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nfunction eventFromException(exception, hint, attachStacktrace) {\n    var syntheticException = (hint && hint.syntheticException) || undefined;\n    var event = eventFromUnknownInput(exception, syntheticException, attachStacktrace);\n    utils_1.addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n    event.level = types_1.Severity.Error;\n    if (hint && hint.event_id) {\n        event.event_id = hint.event_id;\n    }\n    return utils_1.resolvedSyncPromise(event);\n}\nexports.eventFromException = eventFromException;\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(message, level, hint, attachStacktrace) {\n    if (level === void 0) { level = types_1.Severity.Info; }\n    var syntheticException = (hint && hint.syntheticException) || undefined;\n    var event = eventFromString(message, syntheticException, attachStacktrace);\n    event.level = level;\n    if (hint && hint.event_id) {\n        event.event_id = hint.event_id;\n    }\n    return utils_1.resolvedSyncPromise(event);\n}\nexports.eventFromMessage = eventFromMessage;\n/**\n * @hidden\n */\nfunction eventFromUnknownInput(exception, syntheticException, attachStacktrace, isUnhandledRejection) {\n    var event;\n    if (utils_1.isErrorEvent(exception) && exception.error) {\n        // If it is an ErrorEvent with `error` property, extract it to get actual Error\n        var errorEvent = exception;\n        return eventFromError(errorEvent.error);\n    }\n    // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n    // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n    // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n    //\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n    if (utils_1.isDOMError(exception) || utils_1.isDOMException(exception)) {\n        var domException = exception;\n        if ('stack' in exception) {\n            event = eventFromError(exception);\n        }\n        else {\n            var name_1 = domException.name || (utils_1.isDOMError(domException) ? 'DOMError' : 'DOMException');\n            var message = domException.message ? name_1 + \": \" + domException.message : name_1;\n            event = eventFromString(message, syntheticException, attachStacktrace);\n            utils_1.addExceptionTypeValue(event, message);\n        }\n        if ('code' in domException) {\n            event.tags = tslib_1.__assign(tslib_1.__assign({}, event.tags), { 'DOMException.code': \"\" + domException.code });\n        }\n        return event;\n    }\n    if (utils_1.isError(exception)) {\n        // we have a real Error object, do nothing\n        return eventFromError(exception);\n    }\n    if (utils_1.isPlainObject(exception) || utils_1.isEvent(exception)) {\n        // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n        // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n        // group on any key/value change.\n        var objectException = exception;\n        event = eventFromPlainObject(objectException, syntheticException, isUnhandledRejection);\n        utils_1.addExceptionMechanism(event, {\n            synthetic: true,\n        });\n        return event;\n    }\n    // If none of previous checks were valid, then it means that it's not:\n    // - an instance of DOMError\n    // - an instance of DOMException\n    // - an instance of Event\n    // - an instance of Error\n    // - a valid ErrorEvent (one with an error property)\n    // - a plain Object\n    //\n    // So bail out and capture it as a simple message:\n    event = eventFromString(exception, syntheticException, attachStacktrace);\n    utils_1.addExceptionTypeValue(event, \"\" + exception, undefined);\n    utils_1.addExceptionMechanism(event, {\n        synthetic: true,\n    });\n    return event;\n}\nexports.eventFromUnknownInput = eventFromUnknownInput;\n/**\n * @hidden\n */\nfunction eventFromString(input, syntheticException, attachStacktrace) {\n    var event = {\n        message: input,\n    };\n    if (attachStacktrace && syntheticException) {\n        var frames_2 = parseStackFrames(syntheticException);\n        if (frames_2.length) {\n            event.stacktrace = { frames: frames_2 };\n        }\n    }\n    return event;\n}\nexports.eventFromString = eventFromString;\n//# sourceMappingURL=eventbuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","exceptionFromError","ex","frames","parseStackFrames","name","message","error","exception","type","value","length","stacktrace","undefined","eventFromPlainObject","syntheticException","isUnhandledRejection","event","values","utils_1","isEvent","constructor","extractExceptionKeysForMessage","extra","__serialized__","normalizeToSize","frames_1","eventFromError","stack","framesToPop","reactMinifiedRegexp","test","createStackParser","stack_parsers_1","opera10StackParser","opera11StackParser","chromeStackParser","winjsStackParser","geckoStackParser","popSize","e","eventFromUnknownInput","attachStacktrace","isErrorEvent","isDOMError","isDOMException","name_1","eventFromString","addExceptionTypeValue","tags","tslib_1","__assign","code","isError","isPlainObject","addExceptionMechanism","synthetic","input","frames_2","Object","defineProperty","types_1","eventFromException","hint","level","Severity","Error","event_id","resolvedSyncPromise","eventFromMessage","Info"]
}
