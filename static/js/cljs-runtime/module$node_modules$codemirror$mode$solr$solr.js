shadow$provide.module$node_modules$codemirror$mode$solr$solr=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("solr",function(){function tokenString(quote){return function(stream,state){for(var escaped=!1,next;null!=(next=stream.next())&&(next!=quote||
escaped);)escaped=!escaped&&"\\"==next;escaped||(state.tokenize=tokenBase);return"string"}}function tokenOperator(operator){return function(stream,state){var style="operator";"+"==operator?style+=" positive":"-"==operator?style+=" negative":"|"==operator?stream.eat(/\|/):"\x26"==operator?stream.eat(/&/):"^"==operator&&(style+=" boost");state.tokenize=tokenBase;return style}}function tokenWord(ch){return function(stream,state){for(var word=ch;(ch=stream.peek())&&null!=ch.match(isStringChar);)word+=
stream.next();state.tokenize=tokenBase;if(isOperatorString.test(word))return"operator";state=word;return parseFloat(state).toString()===state?"number":":"==stream.peek()?"field":"string"}}function tokenBase(stream,state){var ch=stream.next();'"'==ch?state.tokenize=tokenString(ch):isOperatorChar.test(ch)?state.tokenize=tokenOperator(ch):isStringChar.test(ch)&&(state.tokenize=tokenWord(ch));return state.tokenize!=tokenBase?state.tokenize(stream,state):null}var isStringChar=/[^\s\|!\+\-\*\?~\^&:\(\)\[\]\{\}"\\]/,
isOperatorChar=/[\|!\+\-\*\?~\^&]/,isOperatorString=/^(OR|AND|NOT|TO)$/i;return{startState:function(){return{tokenize:tokenBase}},token:function(stream,state){return stream.eatSpace()?null:state.tokenize(stream,state)}}});CodeMirror.defineMIME("text/x-solr","solr")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$solr$solr.js.map
