{"version":3,"sources":["frontend/extensions/latex.cljs"],"mappings":"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","names":["frontend.extensions.latex/loaded?","js/window.katex","js/frontend","js/frontend.extensions","js/frontend.extensions.latex","js/frontend.extensions.latex.*loading?","frontend.extensions.latex/*loading?","cljs.core.atom","frontend.extensions.latex/render!","state","vec__48796","cljs.core.nth","id","s","display?","e48799","js/katex.render","goog.dom/getElement","js/Error","e","js/console.error","frontend.extensions.latex/load-and-render!","cljs.core/reset!","cljs.core/deref","frontend.loader.load","frontend.config/asset-uri","promesa.core.finally$","promesa.core/all","temp__5720__auto__","enhancers","and__5041__auto__","frontend.handler.plugin/lsp-enabled?","cljs.core/seq","frontend.handler.plugin/hook-extensions-enhancer-by-type","iter__5520__auto__","s__48812","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__48814","cljs.core/chunk-buffer","i__48813","map__48815","cljs.core/-nth","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48811","cljs.core/chunk-rest","map__48819","cljs.core/first","cljs.core/cons","cljs.core/rest","f","cljs.core/fn?","frontend.extensions.latex/state-&-load-and-render!","js/setTimeout","rum.core/lazy-build","rum.core/build-defc","daiquiri.interpreter/interpret","attrs48835","daiquiri.core/create-element","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","frontend.extensions.latex/latex","rum.core/reactive","block?","_display?","loading?","rum.core/react","frontend.ui/loading","element","frontend.extensions.latex/html-export","or__5043__auto__","frontend.util.format","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.extensions.latex\n  (:require [rum.core :as rum]\n            [frontend.loader :as loader]\n            [frontend.ui :as ui]\n            [frontend.config :as config]\n            [frontend.util :as util]\n            [frontend.handler.plugin :refer [lsp-enabled? hook-extensions-enhancer-by-type] :as plugin-handler]\n            [promesa.core :as p]\n            [goog.dom :as gdom]))\n\n;; TODO: extracted to a rum mixin\n(defn loaded? []\n  js/window.katex)\n\n(defonce *loading? (atom false))\n\n(defn render!\n  [state]\n  (let [[id s display?] (:rum/args state)]\n    (try\n      (js/katex.render s (gdom/getElement id)\n                      #js {:displayMode display?\n                           :throwOnError false\n                           :strict false})\n      (catch js/Error e\n        (js/console.error e)))))\n\n(defn- load-and-render!\n  [state]\n  (if (loaded?)\n    (do\n      (reset! *loading? false)\n      (render! state))\n    (when-not @*loading?\n      (reset! *loading? true)\n      (loader/load\n       (config/asset-uri \"/static/js/katex.min.js\")\n       (fn []\n         (loader/load\n          (config/asset-uri \"/static/js/mhchem.min.js\")\n          (fn []\n            (p/finally\n              (p/all (when-let [enhancers (and lsp-enabled? (seq (hook-extensions-enhancer-by-type :katex)))]\n                       (for [{f :enhancer} enhancers]\n                         (when (fn? f) (f js/window.katex)))))\n              (fn []\n                (reset! *loading? false)\n                (render! state))))))\n       state))))\n\n(defn- state-&-load-and-render!\n  [state]\n  (js/setTimeout #(load-and-render! state) 10)\n  state)\n\n(rum/defc latex < rum/reactive\n  {:did-mount  state-&-load-and-render!\n   :did-update state-&-load-and-render!}\n  [id s block? _display?]\n  (let [loading? (rum/react *loading?)]\n    (if loading?\n      (ui/loading \"Loading\")\n      (let [element (if block?\n                      :div.latex\n                      :span.latex-inline)]\n        [element {:id    id\n                  :class \"initial\"}\n         [:span.opacity-0 s]]))))\n\n(defn html-export\n  [s block? display?]\n  (let [element (if block?\n                  :div.latex\n                  :span.latex-inline)]\n    [element (if (or block? display?)\n               (util/format \"$$%s$$\" s)\n               ;; inline\n               (util/format \"$%s$\" s))]))\n"]}