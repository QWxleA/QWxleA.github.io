{"version":3,"sources":["frontend/date.cljs"],"mappings":"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","names":["frontend.date/nld-parse","s","fexpr__73111","frontend.date.goog$module$goog$object.get","js/module$node_modules$chrono_node$dist$index","frontend.date/format","date","temp__5720__auto__","formatter-string","frontend.state/get-date-formatter","cljs-time.format/unparse","cljs_time.format.formatter","frontend.date/custom-formatter","frontend.date/journal-title-formatters","cljs.core.conj","frontend.date/safe-journal-title-formatters","cljs.core.remove","clojure.string/blank?","cljs.core.distinct","var_args","G__73117","frontend.date/get-date-time-string","js/Error","frontend.date.get_date_time_string","cljs-time.core/now","date-time","frontend.date/get-locale-string","e73128","cljs_time.format.parse","cljs-time.format/formatters","cljs-time.core/to-default-time-zone","_e","frontend.date/custom-formatter-2","frontend.date/get-date-time-string-2","cljs-time.local/local-now","frontend.date/custom-formatter-3","frontend.date/get-date-time-string-3","frontend.date/custom-formatter-4","frontend.date/get-date-time-string-4","frontend.date/get-weekday","cljs.core/clj->js","G__73146","frontend.date/get-date","frontend.date.get_date","js/Date","G__73156","frontend.date/year-month-day-padded","frontend.date.year_month_day_padded","map__73158","cljs.core/--destructure-map","cljs.core.get","year","month","day","frontend.util/zero-pad","G__73164","frontend.date/journal-name","frontend.date.journal_name","frontend.date/journal-name-s","e73166","lambdaisland.glogi.log","cljs.core/identity","frontend.date/today","frontend.date/tomorrow","cljs_time.core.plus","cljs-time.core/today","cljs_time.core.days","frontend.date/yesterday","cljs_time.core.minus","G__73178","frontend.date/ymd","frontend.date.ymd","sep","map__73196","frontend.date/get-local-date","hour","minute","frontend.date/get-current-time","d","js/window.navigator","cljs-bean.core/->js","frontend.date/valid?","cljs.core/some","formatter","e73207","frontend.date/valid-journal-title?","title","and__4251__auto__","frontend.util/capitalize-all","G__73223","frontend.date/journal-title->","journal-title","then-fn","frontend.date.journal_title__GT_","formatters","time","cljs.core.map","e73231","cljs.core.filter","cljs.core/some?","cljs.core/first","frontend.date/journal-title->int","p1__73234#","frontend.util/parse-int","frontend.date/int->journal-title","frontend.date/journal-day->ts","cljs-time.coerce/to-long","frontend.date/journal-title->long","p1__73238#","frontend.date/default-journal-title-formatter","frontend.date/journal-title->default","temp__5718__auto__","format","frontend.state/get-journal-file-name-format","p1__73239#","frontend.date/date->file-name","frontend.date/journal-title->custom-format","frontend.date/int->local-time-2","n","cljs-time.coerce/from-long"],"sourcesContent":["(ns frontend.date\n  (:require [\"chrono-node\" :as chrono]\n            [cljs-bean.core :as bean]\n            [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [cljs-time.format :as tf]\n            [cljs-time.local :as tl]\n            [clojure.string :as string]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]))\n\n(defn nld-parse\n  [s]\n  (when (string? s)\n    ((gobj/get chrono \"parseDate\") s)))\n\n(defn format\n  [date]\n  (when-let [formatter-string (state/get-date-formatter)]\n    (tf/unparse (tf/formatter formatter-string) date)))\n\n(def custom-formatter (tf/formatter \"yyyy-MM-dd'T'HH:mm:ssZZ\"))\n\n(defn journal-title-formatters\n  []\n  (conj\n   #{\"do MMM yyyy\"\n     \"do MMMM yyyy\"\n     \"MMM do, yyyy\"\n     \"MMMM do, yyyy\"\n     \"E, dd-MM-yyyy\"\n     \"E, dd.MM.yyyy\"\n     \"E, MM/dd/yyyy\"\n     \"E, yyyy/MM/dd\"\n     \"EEE, dd-MM-yyyy\"\n     \"EEE, dd.MM.yyyy\"\n     \"EEE, MM/dd/yyyy\"\n     \"EEE, yyyy/MM/dd\"\n     \"EEEE, dd-MM-yyyy\"\n     \"EEEE, dd.MM.yyyy\"\n     \"EEEE, MM/dd/yyyy\"\n     \"EEEE, yyyy/MM/dd\"\n     \"dd-MM-yyyy\"\n     \"dd.MM.yyyy\"\n     \"MM/dd/yyyy\"\n     \"MM-dd-yyyy\"\n     \"MM_dd_yyyy\"\n     \"yyyy/MM/dd\"\n     \"yyyy-MM-dd\"\n     \"yyyy-MM-dd EEEE\"\n     \"yyyy_MM_dd\"\n     \"yyyyMMdd\"\n     \"yyyy\u5e74MM\u6708dd\u65e5\"}\n   (state/get-date-formatter)))\n\n;; (tf/parse (tf/formatter \"dd.MM.yyyy\") \"2021Q4\") => 20040120T000000\n(defn safe-journal-title-formatters\n  []\n  (->> [(state/get-date-formatter) \"yyyy-MM-dd\" \"yyyy_MM_dd\"]\n       (remove string/blank?)\n       distinct))\n\n(defn get-date-time-string\n  ([]\n   (get-date-time-string (t/now)))\n  ([date-time]\n   (tf/unparse custom-formatter date-time)))\n\n(defn get-locale-string\n  [s]\n  (try\n    (->> (tf/parse (tf/formatters :date-time-no-ms) s)\n        (t/to-default-time-zone)\n        (tf/unparse (tf/formatter \"MMM do, yyyy\")))\n    (catch js/Error _e\n      nil)))\n\n(def custom-formatter-2 (tf/formatter \"yyyy-MM-dd-HH-mm-ss\"))\n(defn get-date-time-string-2 []\n  (tf/unparse custom-formatter-2 (tl/local-now)))\n\n(def custom-formatter-3 (tf/formatter \"yyyy-MM-dd E HH:mm\"))\n(defn get-date-time-string-3 []\n  (tf/unparse custom-formatter-3 (tl/local-now)))\n\n(def custom-formatter-4 (tf/formatter \"yyyy-MM-dd E HH:mm:ss\"))\n(defn get-date-time-string-4 []\n  (tf/unparse custom-formatter-4 (tl/local-now)))\n\n(defn get-weekday\n  [date]\n  (.toLocaleString date \"en-us\" (clj->js {:weekday \"long\"})))\n\n(defn get-date\n  ([]\n   (get-date (js/Date.)))\n  ([date]\n   {:year (.getFullYear date)\n    :month (inc (.getMonth date))\n    :day (.getDate date)\n    :weekday (get-weekday date)}))\n\n(defn year-month-day-padded\n  ([]\n   (year-month-day-padded (get-date)))\n  ([date]\n   (let [{:keys [year month day]} date]\n     {:year year\n      :month (util/zero-pad month)\n      :day (util/zero-pad day)})))\n\n(defn journal-name\n  ([]\n   (journal-name (tl/local-now)))\n  ([date]\n   (format date)))\n\n(defn journal-name-s [s]\n  (try\n    (journal-name (tf/parse (tf/formatter \"yyyy-MM-dd\") s))\n    (catch js/Error _e\n      (log/info :parse-journal-date {:message  \"Unable to parse date to journal name, skipping.\"\n                                     :date-str s})\n      nil)))\n\n(defn today\n  []\n  (journal-name))\n\n(defn tomorrow\n  []\n  (journal-name (t/plus (t/today) (t/days 1))))\n\n(defn yesterday\n  []\n  (journal-name (t/minus (t/today) (t/days 1))))\n\n(defn ymd\n  ([]\n   (ymd (js/Date.)))\n  ([date]\n   (ymd date \"/\"))\n  ([date sep]\n   (let [{:keys [year month day]} (year-month-day-padded (get-date date))]\n     (str year sep month sep day))))\n\n(defn get-local-date\n  []\n  (let [date (js/Date.)\n        year (.getFullYear date)\n        month (inc (.getMonth date))\n        day (.getDate date)\n        hour (.getHours date)\n        minute (.getMinutes date)]\n    {:year year\n     :month month\n     :day day\n     :hour hour\n     :minute minute}))\n\n(defn get-current-time\n  []\n  (let [d (js/Date.)]\n    (.toLocaleTimeString\n     d\n     (gobj/get js/window.navigator \"language\")\n     (bean/->js {:hour \"2-digit\"\n                 :minute \"2-digit\"\n                 :hourCycle \"h23\"}))))\n\n(defn valid?\n  [s]\n  (some\n   (fn [formatter]\n     (try\n       (tf/parse (tf/formatter formatter) s)\n       (catch js/Error _e\n         false)))\n   (journal-title-formatters)))\n\n(defn valid-journal-title?\n  [title]\n  (and title\n       (valid? (util/capitalize-all title))))\n\n(defn journal-title->\n  ([journal-title then-fn]\n   (journal-title-> journal-title then-fn (safe-journal-title-formatters)))\n  ([journal-title then-fn formatters]\n   (when-not (string/blank? journal-title)\n     (when-let [time (->> (map\n                            (fn [formatter]\n                              (try\n                                (tf/parse (tf/formatter formatter) (util/capitalize-all journal-title))\n                                (catch js/Error _e\n                                  nil)))\n                            formatters)\n                          (filter some?)\n                          first)]\n       (then-fn time)))))\n\n(defn journal-title->int\n  [journal-title]\n  (when journal-title\n    (let [journal-title (util/capitalize-all journal-title)]\n      (journal-title-> journal-title #(util/parse-int (tf/unparse (tf/formatter \"yyyyMMdd\") %))))))\n\n(defn int->journal-title\n  [day]\n  (when day\n    (format (tf/parse (tf/formatter \"yyyyMMdd\") (str day)))))\n\n(defn journal-day->ts\n  [day]\n  (when day\n    (-> (tf/parse (tf/formatter \"yyyyMMdd\") (str day))\n        (tc/to-long))))\n\n(defn journal-title->long\n  [journal-title]\n  (journal-title-> journal-title #(tc/to-long %)))\n\n(def default-journal-title-formatter (tf/formatter \"yyyy_MM_dd\"))\n\n(defn journal-title->default\n  [journal-title]\n  (let [formatter (if-let [format (state/get-journal-file-name-format)]\n                    (tf/formatter format)\n                    default-journal-title-formatter)]\n    (journal-title-> journal-title #(tf/unparse formatter %))))\n\n(defn date->file-name\n  [date]\n  (let [formatter (if-let [format (state/get-journal-file-name-format)]\n                    (tf/formatter format)\n                    default-journal-title-formatter)]\n    (tf/unparse formatter date)))\n\n(defn journal-title->custom-format\n  [journal-title]\n  (journal-title-> journal-title format))\n\n(defn int->local-time-2\n  [n]\n  (tf/unparse\n   (tf/formatter \"yyyy-MM-dd HH:mm\")\n   (t/to-default-time-zone (tc/from-long n))))\n\n(comment\n  (def default-formatter (tf/formatter \"MMM do, yyyy\"))\n  (def zh-formatter (tf/formatter \"YYYY\u5e74MM\u6708dd\u65e5\"))\n\n  (tf/show-formatters)\n\n  ;; :date 2020-05-31\n  ;; :rfc822 Sun, 31 May 2020 03:00:57 Z\n)\n"]}