{"version":3,"sources":["frontend/handler/file.cljs"],"mappings":"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","names":["frontend.handler.file/load-file","repo-url","path","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","content","frontend.fs.read_file","frontend.config/get-repo-dir","promesa.core.catch$","e","cljs.core.println","js/console.error","frontend.handler.file/load-multiple-files","paths","cljs.core.doall","p1__48994#","cljs.core.mapv","frontend.handler.file/keep-formats","files","formats","cljs.core.filter","file","format","logseq.graph-parser.util/get-format","cljs.core/contains?","frontend.handler.file/only-text-formats","frontend.config/text-formats","frontend.handler.file/only-image-formats","frontend.config/img-formats","var_args","G__48999","frontend.handler.file/restore-config!","js/Error","project-changed-check?","frontend.handler.file.restore_config_BANG_","config-content","_project-changed-check?","frontend.handler.common/get-config","frontend.handler.common/reset-config!","frontend.handler.file/load-files-contents!","ok-handler","images","promesa.core/all","promesa.core.then","contents","file-contents","G__49000","cljs.core/zipmap","cljs.core/seq","cljs.core.merge","cljs.core.repeat","cljs.core/count","iter__5520__auto__","s__49004","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__49006","cljs.core/chunk-buffer","i__49005","vec__49010","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49003","cljs.core/chunk-rest","vec__49017","cljs.core/first","cljs.core/cons","cljs.core/rest","logseq.graph-parser.util/path-normalize","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.file/page-exists-in-another-file","page","page-name","current-file","frontend.db/get-page-file","cljs.core.not_EQ_","G__49023","frontend.handler.file/reset-file!","p__49024","map__49026","cljs.core/--destructure-map","cljs.core.get","frontend.handler.file.reset_file_BANG_","new-graph?","from-disk?","electron-local-repo?","and__5041__auto__","frontend.util/electron?","frontend.config/local-db?","frontend.util/win32?","js/module$frontend$utils.win32","or__5043__auto__","frontend.mobile.util/native-android?","frontend.mobile.util/native-ios?","new?","G__49029","frontend.db/entity","frontend.db/set-file-content!","file-content","tx","logseq.graph-parser.config/mldoc-support-formats","vec__49030","pages","blocks","logseq.graph-parser.extract/extract-blocks-pages","frontend.state.get_config","frontend.state/get-date-formatter","frontend.state/page-name-order","frontend.config/get-block-pattern","frontend.config/supported-formats","G__49034","frontend.db/get-db","frontend.state/get-current-repo","first-page","delete-blocks","cljs.core.concat","frontend.db/delete-file-blocks!","G__49036","G__49037","frontend.db/delete-page-blocks","cljs.core.distinct","_","frontend.state/pub-event!","block-ids","cljs.core.map","block","block-refs-ids","cljs.core.mapcat","ref","cljs.core/vector?","cljs.core._EQ_","cljs.core/second","clojure.set.union","cljs.core/set","logseq.graph-parser.extract/with-ref-pages","pages-index","p1__49021#","cljs.core/select-keys","t","cljs-time.coerce/to-long","cljs-time.core/now","G__49048","cljs.core.assoc","G__49049","G__49050","G__49051","frontend.db/transact!","p__49052","map__49053","frontend.handler.file/alter-file","repo","reset?","re-render-root?","skip-compare?","original-content","frontend.db/get-file","write-file!","promesa.core/resolved","frontend.fs/write-file!","page-id","frontend.db/get-file-page-id","G__49054","G__49055","frontend.util.p_handle","frontend.config.get_config_path","frontend.config.get_custom_css_path","frontend.handler.ui/add-style-if-exists!","frontend.handler.ui.re_render_root_BANG_","frontend.handler.file/set-file-content!","new-content","p__49059","map__49060","frontend.handler.file/alter-files","update-db?","opts","file->content","seq__49061","chunk__49062","count__49063","i__49064","vec__49074","c__5565__auto__","cljs.core/chunk-first","vec__49077","cljs.core/next","chan","frontend.state/get-file-write-chan","chan-callback","cljs.core.async.put_BANG_","p__49084","map__49085","frontend.handler.file/alter-files-handler!","finish-handler","write-file-f","p__49086","vec__49087","frontend.fs.nfs/check-directory-permission!","frontend.handler.ui/re-render-file!","frontend.handler.file/run-writes-chan!","c__27595__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__27596__auto__","switch__27572__auto__","state_49132","state_val_49133","inst_49093","inst_49094","inst_49095","inst_49096","cljs.core/PersistentHashMap","inst_49097","inst_49098","statearr-49142","statearr-49150","inst_49092","statearr-49152","statearr-49153","inst_49120","statearr-49154","statearr-49155","inst_49107","inst_49117","statearr-49157","inst_49127","statearr-49170","statearr-49171","inst_49130","cljs.core.async.impl.ioc-helpers/return-chan","inst_49115","statearr-49172","statearr-49173","cljs.core.async.impl.ioc-helpers/take!","inst_49108","statearr-49178","cljs.core/ExceptionInfo","statearr-49179","statearr-49180","statearr-49181","statearr-49182","inst_49104","inst_49105","cljs.core.async.interop/p->c","statearr-49184","inst_49110","cljs.core/ex-data","inst_49111","inst_49112","statearr-49185","statearr-49186","ex49183","statearr-49190","statearr-49191","statearr-49192","state-machine__27573__auto__","ret-value__27574__auto__","result__27575__auto__","cljs.core/keyword-identical?","ex__27576__auto__","e49193","statearr-49194","statearr-49195","state__27597__auto__","statearr-49196","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.apply","frontend.handler.file/watch-for-current-graph-dir!","dir","frontend.fs/watch-dir!","frontend.handler.file/create-metadata-file","encrypted?","repo-dir","frontend.config/app-name","frontend.config/metadata-file","file-path","default-content","frontend.fs/mkdir-if-not-exists","file-exists?","frontend.fs.create_if_not_exists","frontend.handler.file/create-pages-metadata-file","frontend.config/pages-metadata-file","frontend.handler.file/edn-file-set-key-value","k","v","frontend.handler.common/read-config","result","frontend.handler.common/parse-config","ks","new-result","borkdude.rewrite-edn/assoc-in"],"sourcesContent":["(ns frontend.handler.file\n  (:refer-clojure :exclude [load-file])\n  (:require [\"/frontend/utils\" :as utils]\n            [borkdude.rewrite-edn :as rewrite]\n            [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [cljs.core.async.interop :refer [<p!]]\n            [clojure.core.async :as async]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.fs.nfs :as nfs]\n            [frontend.handler.common :as common-handler]\n            [logseq.graph-parser.extract :as extract]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.mobile.util :as mobile]\n            [clojure.set :as set]))\n\n;; TODO: extract all git ops using a channel\n\n(defn load-file\n  [repo-url path]\n  (->\n   (p/let [content (fs/read-file (config/get-repo-dir repo-url) path)]\n     content)\n   (p/catch\n       (fn [e]\n         (println \"Load file failed: \" path)\n         (js/console.error e)))))\n\n(defn load-multiple-files\n  [repo-url paths]\n  (doall\n   (mapv #(load-file repo-url %) paths)))\n\n(defn- keep-formats\n  [files formats]\n  (filter\n   (fn [file]\n     (let [format (gp-util/get-format file)]\n       (contains? formats format)))\n   files))\n\n(defn- only-text-formats\n  [files]\n  (keep-formats files (config/text-formats)))\n\n(defn- only-image-formats\n  [files]\n  (keep-formats files (config/img-formats)))\n\n(defn restore-config!\n  ([repo-url project-changed-check?]\n   (restore-config! repo-url nil project-changed-check?))\n  ([repo-url config-content _project-changed-check?]\n   (let [config-content (if config-content config-content\n                            (common-handler/get-config repo-url))]\n     (when config-content\n       (common-handler/reset-config! repo-url config-content)))))\n\n(defn load-files-contents!\n  [repo-url files ok-handler]\n  (let [images (only-image-formats files)\n        files (only-text-formats files)]\n    (-> (p/all (load-multiple-files repo-url files))\n        (p/then (fn [contents]\n                  (let [file-contents (cond->\n                                        (zipmap files contents)\n\n                                        (seq images)\n                                        (merge (zipmap images (repeat (count images) \"\"))))\n                        file-contents (for [[file content] file-contents]\n                                        {:file/path (gp-util/path-normalize file)\n                                         :file/content content})]\n                    (ok-handler file-contents))))\n        (p/catch (fn [error]\n                   (log/error :nfs/load-files-error repo-url)\n                   (log/error :exception error))))))\n\n(defn- page-exists-in-another-file\n  \"Conflict of files towards same page\"\n  [repo-url page file]\n  (when-let [page-name (:block/name page)]\n    (let [current-file (:file/path (db/get-page-file repo-url page-name))]\n      (when (not= file current-file)\n       current-file))))\n\n(defn reset-file!\n  ([repo-url file content]\n   (reset-file! repo-url file content {}))\n  ([repo-url file content {:keys [new-graph? from-disk?]}]\n   (let [electron-local-repo? (and (util/electron?)\n                                   (config/local-db? repo-url))\n         file (cond\n                (and electron-local-repo?\n                     util/win32?\n                     (utils/win32 file))\n                file\n\n                (and electron-local-repo? (or\n                                           util/win32?\n                                           (not= \"/\" (first file))))\n                (str (config/get-repo-dir repo-url) \"/\" file)\n\n                (and (mobile/native-android?) (not= \"/\" (first file)))\n                file\n\n                (and (mobile/native-ios?) (not= \"/\" (first file)))\n                file\n\n                :else\n                file)\n         file (gp-util/path-normalize file)\n         new? (nil? (db/entity [:file/path file]))]\n     (db/set-file-content! repo-url file content)\n     (let [format (gp-util/get-format file)\n           file-content [{:file/path file}]\n           tx (if (contains? gp-config/mldoc-support-formats format)\n                (let [[pages blocks]\n                      (extract/extract-blocks-pages\n                       file\n                       content\n                       {:user-config (state/get-config)\n                        :date-formatter (state/get-date-formatter)\n                        :page-name-order (state/page-name-order)\n                        :block-pattern (config/get-block-pattern format)\n                        :supported-formats (config/supported-formats)\n                        :db (db/get-db (state/get-current-repo))})\n                      first-page (first pages)\n                      delete-blocks (->\n                                     (concat\n                                      (db/delete-file-blocks! repo-url file)\n                                      (when first-page (db/delete-page-blocks repo-url (:block/name first-page))))\n                                     (distinct))\n                      _ (when-let [current-file (page-exists-in-another-file repo-url first-page file)]\n                          (when (not= file current-file)\n                            (let [error (str \"Page already exists with another file: \" current-file \", current file: \" file)]\n                              (state/pub-event! [:notification/show\n                                                 {:content error\n                                                  :status :error\n                                                  :clear? false}]))))\n                      block-ids (map (fn [block] {:block/uuid (:block/uuid block)}) blocks)\n                      block-refs-ids (->> (mapcat :block/refs blocks)\n                                          (filter (fn [ref] (and (vector? ref)\n                                                                 (= :block/uuid (first ref)))))\n                                          (map (fn [ref] {:block/uuid (second ref)}))\n                                          (seq))\n                      ;; To prevent \"unique constraint\" on datascript\n                      block-ids (set/union (set block-ids) (set block-refs-ids))\n                      pages (extract/with-ref-pages pages blocks)\n                      pages-index (map #(select-keys % [:block/name]) pages)]\n                  ;; does order matter?\n                  (concat file-content pages-index delete-blocks pages block-ids blocks))\n                file-content)\n           tx (concat tx [(let [t (tc/to-long (t/now))] ;; TODO: use file system timestamp?\n                            (cond->\n                              {:file/path file}\n                              new?\n                              (assoc :file/created-at t)))])]\n       (db/transact! repo-url tx {:new-graph? new-graph?\n                                  :from-disk? from-disk?})))))\n\n;; TODO: Remove this function in favor of `alter-files`\n(defn alter-file\n  [repo path content {:keys [reset? re-render-root? from-disk? skip-compare? new-graph?]\n                      :or {reset? true\n                           re-render-root? false\n                           from-disk? false\n                           skip-compare? false}}]\n  (let [original-content (db/get-file repo path)\n        write-file! (if from-disk?\n                      #(p/resolved nil)\n                      #(fs/write-file! repo (config/get-repo-dir repo) path content\n                                       (assoc (when original-content {:old-content original-content})\n                                              :skip-compare? skip-compare?)))]\n    (if reset?\n      (do\n        (when-let [page-id (db/get-file-page-id path)]\n          (db/transact! repo\n            [[:db/retract page-id :block/alias]\n             [:db/retract page-id :block/tags]]))\n        (reset-file! repo path content {:new-graph? new-graph?\n                                        :from-disk? from-disk?}))\n      (db/set-file-content! repo path content))\n    (util/p-handle (write-file!)\n                   (fn [_]\n                     (when (= path (config/get-config-path repo))\n                       (restore-config! repo true))\n                     (when (= path (config/get-custom-css-path repo))\n                       (ui-handler/add-style-if-exists!))\n                     (when re-render-root? (ui-handler/re-render-root!)))\n                   (fn [error]\n                     (println \"Write file failed, path: \" path \", content: \" content)\n                     (log/error :write/failed error)))))\n\n(defn set-file-content!\n  [repo path new-content]\n  (alter-file repo path new-content {:reset? false\n                                     :re-render-root? false}))\n\n(defn alter-files\n  [repo files {:keys [reset? update-db?]\n               :or {reset? false\n                    update-db? true}\n               :as opts}]\n  ;; old file content\n  (let [file->content (let [paths (map first files)]\n                        (zipmap paths\n                                (map (fn [path] (db/get-file repo path)) paths)))]\n    ;; update db\n    (when update-db?\n      (doseq [[path content] files]\n        (if reset?\n          (reset-file! repo path content)\n          (db/set-file-content! repo path content))))\n\n    (when-let [chan (state/get-file-write-chan)]\n      (let [chan-callback (:chan-callback opts)]\n        (async/put! chan [repo files opts file->content])\n        (when chan-callback\n          (chan-callback))))))\n\n(defn alter-files-handler!\n  [repo files {:keys [finish-handler chan]} file->content]\n  (let [write-file-f (fn [[path content]]\n                       (when path\n                         (let [original-content (get file->content path)]\n                          (-> (p/let [_ (or\n                                         (util/electron?)\n                                         (nfs/check-directory-permission! repo))]\n                                (fs/write-file! repo (config/get-repo-dir repo) path content\n                                                {:old-content original-content}))\n                              (p/catch (fn [error]\n                                         (state/pub-event! [:notification/show\n                                                            {:content (str \"Failed to save the file \" path \". Error: \"\n                                                                           (str error))\n                                                             :status :error\n                                                             :clear? false}])\n                                         (state/pub-event! [:instrument {:type :write-file/failed\n                                                                         :payload {:path path\n                                                                                   :content-length (count content)\n                                                                                   :error-str (str error)\n                                                                                   :error error}}])\n                                         (log/error :write-file/failed {:path path\n                                                                        :content content\n                                                                        :error error})))))))\n        finish-handler (fn []\n                         (when finish-handler\n                           (finish-handler))\n                         (ui-handler/re-render-file!))]\n    (-> (p/all (map write-file-f files))\n        (p/then (fn []\n                  (finish-handler)\n                  (when chan\n                    (async/put! chan true))))\n        (p/catch (fn [error]\n                   (println \"Alter files failed:\")\n                   (js/console.error error)\n                   (async/put! chan false))))))\n\n(defn run-writes-chan!\n  []\n  (let [chan (state/get-file-write-chan)]\n    (async/go-loop []\n      (let [args (async/<! chan)]\n        ;; return a channel\n        (try\n          (<p! (apply alter-files-handler! args))\n          (catch js/Error e\n            (log/error :file/write-failed e))))\n      (recur))\n    chan))\n\n(defn watch-for-current-graph-dir!\n  []\n  (when-let [repo (state/get-current-repo)]\n    (when-let [dir (config/get-repo-dir repo)]\n      (fs/watch-dir! dir))))\n\n(defn create-metadata-file\n  [repo-url encrypted?]\n  (let [repo-dir (config/get-repo-dir repo-url)\n        path (str config/app-name \"/\" config/metadata-file)\n        file-path (str \"/\" path)\n        default-content (if encrypted? \"{:db/encrypted? true}\" \"{}\")]\n    (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name))\n            file-exists? (fs/create-if-not-exists repo-url repo-dir file-path default-content)]\n      (when-not file-exists?\n        (reset-file! repo-url path default-content)))))\n\n(defn create-pages-metadata-file\n  [repo-url]\n  (let [repo-dir (config/get-repo-dir repo-url)\n        path (str config/app-name \"/\" config/pages-metadata-file)\n        file-path (str \"/\" path)\n        default-content \"{}\"]\n    (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name))\n            file-exists? (fs/create-if-not-exists repo-url repo-dir file-path default-content)]\n      (when-not file-exists?\n        (reset-file! repo-url path default-content)))))\n\n(defn edn-file-set-key-value\n  [path k v]\n  (when-let [repo (state/get-current-repo)]\n    (when-let [content (db/get-file path)]\n      (common-handler/read-config content)\n      (let [result (common-handler/parse-config content)\n            ks (if (vector? k) k [k])\n            new-result (rewrite/assoc-in result ks v)\n            new-content (str new-result)]\n        (set-file-content! repo path new-content)))))\n"]}