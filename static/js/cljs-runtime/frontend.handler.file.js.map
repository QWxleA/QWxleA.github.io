{"version":3,"sources":["frontend/handler/file.cljs"],"mappings":"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","names":["frontend.handler.file/load-file","repo-url","path","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","content","frontend.fs.read_file","frontend.config/get-repo-dir","promesa.core.catch$","e","cljs.core.println","js/console.error","frontend.handler.file/load-multiple-files","paths","cljs.core.doall","p1__94309#","cljs.core.mapv","frontend.handler.file/keep-formats","files","formats","cljs.core.filter","file","format","frontend.format/get-format","cljs.core/contains?","frontend.handler.file/only-text-formats","frontend.config/text-formats","frontend.handler.file/only-image-formats","frontend.config/img-formats","var_args","G__94311","frontend.handler.file/restore-config!","js/Error","project-changed-check?","frontend.handler.file.restore_config_BANG_","config-content","_project-changed-check?","frontend.handler.common/get-config","frontend.handler.common/reset-config!","frontend.handler.file/load-files-contents!","ok-handler","images","promesa.core/all","promesa.core.then","contents","file-contents","G__94312","cljs.core/zipmap","cljs.core/seq","cljs.core.merge","cljs.core.repeat","cljs.core/count","iter__4652__auto__","s__94314","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__94316","cljs.core/chunk-buffer","i__94315","vec__94317","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__94313","cljs.core/chunk-rest","vec__94320","cljs.core/first","cljs.core/cons","cljs.core/rest","logseq.graph-parser.util/path-normalize","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.file/page-exists-in-another-file","page","page-name","current-file","frontend.db/get-page-file","cljs.core.not_EQ_","G__94345","frontend.handler.file/reset-file!","frontend.handler.file.reset_file_BANG_","new-graph?","electron-local-repo?","and__4251__auto__","frontend.util/electron?","frontend.config/local-db?","frontend.util/win32?","js/module$frontend$utils.win32","or__4253__auto__","frontend.mobile.util/native-android?","frontend.mobile.util/native-ios?","new?","G__94346","frontend.db/entity","frontend.db/set-file-content!","file-content","tx","frontend.config/mldoc-support-formats","vec__94347","pages","blocks","frontend.handler.extract/extract-blocks-pages","first-page","delete-blocks","cljs.core.concat","frontend.db/delete-file-blocks!","G__94350","G__94351","frontend.db/delete-page-blocks","cljs.core.distinct","_","frontend.state/pub-event!","block-ids","cljs.core.map","block","block-refs-ids","cljs.core.mapcat","ref","cljs.core/vector?","cljs.core._EQ_","cljs.core/second","clojure.set.union","cljs.core/set","frontend.handler.extract/with-ref-pages","pages-index","p1__94328#","cljs.core/select-keys","t","cljs-time.coerce/to-long","cljs-time.core/now","G__94357","cljs.core.assoc","G__94358","G__94359","G__94360","frontend.db/transact!","p__94364","map__94365","cljs.core/--destructure-map","cljs.core.get","frontend.handler.file/alter-file","repo","reset?","re-render-root?","from-disk?","skip-compare?","original-content","frontend.db/get-file","write-file!","promesa.core/resolved","frontend.fs/write-file!","page-id","frontend.db/get-file-page-id","G__94366","G__94367","frontend.util.p_handle","frontend.config.get_config_path","frontend.config.get_custom_css_path","frontend.handler.ui/add-style-if-exists!","frontend.handler.ui.re_render_root_BANG_","frontend.handler.file/set-file-content!","new-content","p__94368","map__94369","frontend.handler.file/alter-files","update-db?","opts","file->content","seq__94370","chunk__94371","count__94372","i__94373","vec__94380","c__4679__auto__","cljs.core/chunk-first","vec__94383","cljs.core/next","chan","frontend.state/get-file-write-chan","chan-callback","cljs.core.async.put_BANG_","p__94386","map__94387","frontend.handler.file/alter-files-handler!","finish-handler","write-file-f","p__94388","vec__94389","frontend.fs.nfs/check-directory-permission!","frontend.handler.ui/re-render-file!","frontend.handler.file/run-writes-chan!","c__41861__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41862__auto__","switch__41838__auto__","state_94430","state_val_94431","inst_94395","inst_94396","inst_94397","inst_94398","cljs.core/PersistentHashMap","inst_94399","inst_94400","statearr-94432","statearr-94433","inst_94394","statearr-94434","statearr-94435","inst_94422","statearr-94436","statearr-94437","inst_94409","inst_94419","statearr-94438","inst_94425","statearr-94439","statearr-94440","inst_94428","cljs.core.async.impl.ioc-helpers/return-chan","inst_94417","statearr-94441","statearr-94442","cljs.core.async.impl.ioc-helpers/take!","inst_94410","statearr-94443","cljs.core/ExceptionInfo","statearr-94444","statearr-94445","statearr-94446","statearr-94451","inst_94406","inst_94407","cljs.core.async.interop/p->c","statearr-94462","inst_94412","cljs.core/ex-data","inst_94413","inst_94414","statearr-94466","statearr-94467","ex94458","statearr-94468","statearr-94469","statearr-94470","state-machine__41839__auto__","ret-value__41840__auto__","result__41841__auto__","cljs.core/keyword-identical?","ex__41842__auto__","e94471","statearr-94472","statearr-94473","state__41863__auto__","statearr-94474","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.apply","frontend.handler.file/watch-for-current-graph-dir!","frontend.state/get-current-repo","dir","frontend.fs/watch-dir!","frontend.handler.file/create-metadata-file","encrypted?","repo-dir","frontend.config/app-name","frontend.config/metadata-file","file-path","default-content","frontend.fs/mkdir-if-not-exists","file-exists?","frontend.fs.create_if_not_exists","frontend.handler.file/create-pages-metadata-file","frontend.config/pages-metadata-file","frontend.handler.file/edn-file-set-key-value","k","v","frontend.handler.common/read-config","result","frontend.handler.common/parse-config","ks","new-result","borkdude.rewrite-edn/assoc-in"],"sourcesContent":["(ns frontend.handler.file\n  (:refer-clojure :exclude [load-file])\n  (:require [\"/frontend/utils\" :as utils]\n            [borkdude.rewrite-edn :as rewrite]\n            [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [cljs.core.async.interop :refer [<p!]]\n            [clojure.core.async :as async]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.format :as format]\n            [frontend.fs :as fs]\n            [frontend.fs.nfs :as nfs]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.extract :as extract-handler]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.mobile.util :as mobile]\n            [clojure.set :as set]))\n\n;; TODO: extract all git ops using a channel\n\n(defn load-file\n  [repo-url path]\n  (->\n   (p/let [content (fs/read-file (config/get-repo-dir repo-url) path)]\n     content)\n   (p/catch\n       (fn [e]\n         (println \"Load file failed: \" path)\n         (js/console.error e)))))\n\n(defn load-multiple-files\n  [repo-url paths]\n  (doall\n   (mapv #(load-file repo-url %) paths)))\n\n(defn- keep-formats\n  [files formats]\n  (filter\n   (fn [file]\n     (let [format (format/get-format file)]\n       (contains? formats format)))\n   files))\n\n(defn- only-text-formats\n  [files]\n  (keep-formats files (config/text-formats)))\n\n(defn- only-image-formats\n  [files]\n  (keep-formats files (config/img-formats)))\n\n(defn restore-config!\n  ([repo-url project-changed-check?]\n   (restore-config! repo-url nil project-changed-check?))\n  ([repo-url config-content _project-changed-check?]\n   (let [config-content (if config-content config-content\n                            (common-handler/get-config repo-url))]\n     (when config-content\n       (common-handler/reset-config! repo-url config-content)))))\n\n(defn load-files-contents!\n  [repo-url files ok-handler]\n  (let [images (only-image-formats files)\n        files (only-text-formats files)]\n    (-> (p/all (load-multiple-files repo-url files))\n        (p/then (fn [contents]\n                  (let [file-contents (cond->\n                                        (zipmap files contents)\n\n                                        (seq images)\n                                        (merge (zipmap images (repeat (count images) \"\"))))\n                        file-contents (for [[file content] file-contents]\n                                        {:file/path (gp-util/path-normalize file)\n                                         :file/content content})]\n                    (ok-handler file-contents))))\n        (p/catch (fn [error]\n                   (log/error :nfs/load-files-error repo-url)\n                   (log/error :exception error))))))\n\n(defn- page-exists-in-another-file\n  \"Conflict of files towards same page\"\n  [repo-url page file]\n  (when-let [page-name (:block/name page)]\n    (let [current-file (:file/path (db/get-page-file repo-url page-name))]\n      (when (not= file current-file)\n       current-file))))\n\n(defn reset-file!\n  ([repo-url file content]\n   (reset-file! repo-url file content false))\n  ([repo-url file content new-graph?]\n   (let [electron-local-repo? (and (util/electron?)\n                                   (config/local-db? repo-url))\n         file (cond\n                (and electron-local-repo?\n                     util/win32?\n                     (utils/win32 file))\n                file\n\n                (and electron-local-repo? (or\n                                           util/win32?\n                                           (not= \"/\" (first file))))\n                (str (config/get-repo-dir repo-url) \"/\" file)\n\n                (and (mobile/native-android?) (not= \"/\" (first file)))\n                file\n\n                (and (mobile/native-ios?) (not= \"/\" (first file)))\n                file\n\n                :else\n                file)\n         file (gp-util/path-normalize file)\n         new? (nil? (db/entity [:file/path file]))]\n     (db/set-file-content! repo-url file content)\n     (let [format (format/get-format file)\n           file-content [{:file/path file}]\n           tx (if (contains? config/mldoc-support-formats format)\n                (let [[pages blocks] (extract-handler/extract-blocks-pages repo-url file content)\n                      first-page (first pages)\n                      delete-blocks (->\n                                     (concat\n                                      (db/delete-file-blocks! repo-url file)\n                                      (when first-page (db/delete-page-blocks repo-url (:block/name first-page))))\n                                     (distinct))\n                      _ (when-let [current-file (page-exists-in-another-file repo-url first-page file)]\n                          (when (not= file current-file)\n                            (let [error (str \"Page already exists with another file: \" current-file \", current file: \" file)]\n                              (state/pub-event! [:notification/show\n                                                 {:content error\n                                                  :status :error\n                                                  :clear? false}]))))\n                      block-ids (map (fn [block] {:block/uuid (:block/uuid block)}) blocks)\n                      block-refs-ids (->> (mapcat :block/refs blocks)\n                                          (filter (fn [ref] (and (vector? ref)\n                                                                 (= :block/uuid (first ref)))))\n                                          (map (fn [ref] {:block/uuid (second ref)}))\n                                          (seq))\n                      ;; To prevent \"unique constraint\" on datascript\n                      block-ids (set/union (set block-ids) (set block-refs-ids))\n                      pages (extract-handler/with-ref-pages pages blocks)\n                      pages-index (map #(select-keys % [:block/name]) pages)]\n                  ;; does order matter?\n                  (concat file-content pages-index delete-blocks pages block-ids blocks))\n                file-content)\n           tx (concat tx [(let [t (tc/to-long (t/now))] ;; TODO: use file system timestamp?\n                            (cond->\n                              {:file/path file}\n                              new?\n                              (assoc :file/created-at t)))])]\n       (db/transact! repo-url tx (when new-graph? {:new-graph? true}))))))\n\n;; TODO: Remove this function in favor of `alter-files`\n(defn alter-file\n  [repo path content {:keys [reset? re-render-root? from-disk? skip-compare? new-graph?]\n                      :or {reset? true\n                           re-render-root? false\n                           from-disk? false\n                           skip-compare? false}}]\n  (let [original-content (db/get-file repo path)\n        write-file! (if from-disk?\n                      #(p/resolved nil)\n                      #(fs/write-file! repo (config/get-repo-dir repo) path content\n                                       (assoc (when original-content {:old-content original-content})\n                                              :skip-compare? skip-compare?)))]\n    (if reset?\n      (do\n        (when-let [page-id (db/get-file-page-id path)]\n          (db/transact! repo\n            [[:db/retract page-id :block/alias]\n             [:db/retract page-id :block/tags]]))\n        (reset-file! repo path content new-graph?))\n      (db/set-file-content! repo path content))\n    (util/p-handle (write-file!)\n                   (fn [_]\n                     (when (= path (config/get-config-path repo))\n                       (restore-config! repo true))\n                     (when (= path (config/get-custom-css-path repo))\n                       (ui-handler/add-style-if-exists!))\n                     (when re-render-root? (ui-handler/re-render-root!)))\n                   (fn [error]\n                     (println \"Write file failed, path: \" path \", content: \" content)\n                     (log/error :write/failed error)))))\n\n(defn set-file-content!\n  [repo path new-content]\n  (alter-file repo path new-content {:reset? false\n                                     :re-render-root? false}))\n\n(defn alter-files\n  [repo files {:keys [reset? update-db?]\n               :or {reset? false\n                    update-db? true}\n               :as opts}]\n  ;; old file content\n  (let [file->content (let [paths (map first files)]\n                        (zipmap paths\n                                (map (fn [path] (db/get-file repo path)) paths)))]\n    ;; update db\n    (when update-db?\n      (doseq [[path content] files]\n        (if reset?\n          (reset-file! repo path content)\n          (db/set-file-content! repo path content))))\n\n    (when-let [chan (state/get-file-write-chan)]\n      (let [chan-callback (:chan-callback opts)]\n        (async/put! chan [repo files opts file->content])\n        (when chan-callback\n          (chan-callback))))))\n\n(defn alter-files-handler!\n  [repo files {:keys [finish-handler chan]} file->content]\n  (let [write-file-f (fn [[path content]]\n                       (when path\n                         (let [original-content (get file->content path)]\n                          (-> (p/let [_ (or\n                                         (util/electron?)\n                                         (nfs/check-directory-permission! repo))]\n                                (fs/write-file! repo (config/get-repo-dir repo) path content\n                                                {:old-content original-content}))\n                              (p/catch (fn [error]\n                                         (state/pub-event! [:notification/show\n                                                            {:content (str \"Failed to save the file \" path \". Error: \"\n                                                                           (str error))\n                                                             :status :error\n                                                             :clear? false}])\n                                         (state/pub-event! [:instrument {:type :write-file/failed\n                                                                         :payload {:path path\n                                                                                   :content-length (count content)\n                                                                                   :error-str (str error)\n                                                                                   :error error}}])\n                                         (log/error :write-file/failed {:path path\n                                                                        :content content\n                                                                        :error error})))))))\n        finish-handler (fn []\n                         (when finish-handler\n                           (finish-handler))\n                         (ui-handler/re-render-file!))]\n    (-> (p/all (map write-file-f files))\n        (p/then (fn []\n                  (finish-handler)\n                  (when chan\n                    (async/put! chan true))))\n        (p/catch (fn [error]\n                   (println \"Alter files failed:\")\n                   (js/console.error error)\n                   (async/put! chan false))))))\n\n(defn run-writes-chan!\n  []\n  (let [chan (state/get-file-write-chan)]\n    (async/go-loop []\n      (let [args (async/<! chan)]\n        ;; return a channel\n        (try\n          (<p! (apply alter-files-handler! args))\n          (catch js/Error e\n            (log/error :file/write-failed e))))\n      (recur))\n    chan))\n\n(defn watch-for-current-graph-dir!\n  []\n  (when-let [repo (state/get-current-repo)]\n    (when-let [dir (config/get-repo-dir repo)]\n      (fs/watch-dir! dir))))\n\n(defn create-metadata-file\n  [repo-url encrypted?]\n  (let [repo-dir (config/get-repo-dir repo-url)\n        path (str config/app-name \"/\" config/metadata-file)\n        file-path (str \"/\" path)\n        default-content (if encrypted? \"{:db/encrypted? true}\" \"{}\")]\n    (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name))\n            file-exists? (fs/create-if-not-exists repo-url repo-dir file-path default-content)]\n      (when-not file-exists?\n        (reset-file! repo-url path default-content)))))\n\n(defn create-pages-metadata-file\n  [repo-url]\n  (let [repo-dir (config/get-repo-dir repo-url)\n        path (str config/app-name \"/\" config/pages-metadata-file)\n        file-path (str \"/\" path)\n        default-content \"{}\"]\n    (p/let [_ (fs/mkdir-if-not-exists (str repo-dir \"/\" config/app-name))\n            file-exists? (fs/create-if-not-exists repo-url repo-dir file-path default-content)]\n      (when-not file-exists?\n        (reset-file! repo-url path default-content)))))\n\n(defn edn-file-set-key-value\n  [path k v]\n  (when-let [repo (state/get-current-repo)]\n    (when-let [content (db/get-file path)]\n      (common-handler/read-config content)\n      (let [result (common-handler/parse-config content)\n            ks (if (vector? k) k [k])\n            new-result (rewrite/assoc-in result ks v)\n            new-content (str new-result)]\n        (set-file-content! repo path new-content)))))\n"]}