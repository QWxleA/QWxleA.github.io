{
"version":3,
"file":"module$node_modules$chrono_node$dist$common$refiners$AbstractMergeDateRangeRefiner.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/chrono-node/dist/common/refiners/AbstractMergeDateRangeRefiner.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$common$refiners$AbstractMergeDateRangeRefiner\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abstractRefiners_1 = require(\"../abstractRefiners\");\nclass AbstractMergeDateRangeRefiner extends abstractRefiners_1.MergingRefiner {\n    shouldMergeResults(textBetween, currentResult, nextResult) {\n        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;\n    }\n    mergeResults(textBetween, fromResult, toResult) {\n        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {\n            toResult.start.getCertainComponents().forEach((key) => {\n                if (!fromResult.start.isCertain(key)) {\n                    fromResult.start.assign(key, toResult.start.get(key));\n                }\n            });\n            fromResult.start.getCertainComponents().forEach((key) => {\n                if (!toResult.start.isCertain(key)) {\n                    toResult.start.assign(key, fromResult.start.get(key));\n                }\n            });\n        }\n        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {\n            let fromMoment = fromResult.start.dayjs();\n            let toMoment = toResult.start.dayjs();\n            if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, \"days\").isBefore(toMoment)) {\n                fromMoment = fromMoment.add(-7, \"days\");\n                fromResult.start.imply(\"day\", fromMoment.date());\n                fromResult.start.imply(\"month\", fromMoment.month() + 1);\n                fromResult.start.imply(\"year\", fromMoment.year());\n            }\n            else if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, \"days\").isAfter(fromMoment)) {\n                toMoment = toMoment.add(7, \"days\");\n                toResult.start.imply(\"day\", toMoment.date());\n                toResult.start.imply(\"month\", toMoment.month() + 1);\n                toResult.start.imply(\"year\", toMoment.year());\n            }\n            else {\n                [toResult, fromResult] = [fromResult, toResult];\n            }\n        }\n        const result = fromResult.clone();\n        result.start = fromResult.start;\n        result.end = toResult.start;\n        result.index = Math.min(fromResult.index, toResult.index);\n        if (fromResult.index < toResult.index) {\n            result.text = fromResult.text + textBetween + toResult.text;\n        }\n        else {\n            result.text = toResult.text + textBetween + fromResult.text;\n        }\n        return result;\n    }\n}\nexports.default = AbstractMergeDateRangeRefiner;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","abstractRefiners_1","AbstractMergeDateRangeRefiner","MergingRefiner","shouldMergeResults","textBetween","currentResult","nextResult","end","match","patternBetween","mergeResults","fromResult","toResult","start","isOnlyWeekdayComponent","getCertainComponents","forEach","key","isCertain","assign","get","date","getTime","fromMoment","dayjs","toMoment","add","isBefore","imply","month","year","isAfter","result","clone","index","Math","min","text","default"]
}
