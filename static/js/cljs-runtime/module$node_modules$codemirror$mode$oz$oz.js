shadow$provide.module$node_modules$codemirror$mode$oz$oz=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){CodeMirror.defineMode("oz",function(conf){function wordRegexp(words){return new RegExp("^(("+words.join(")|(")+"))\\b")}function tokenBase(stream,state){if(stream.eatSpace())return null;
if(stream.match(/[{}]/))return"bracket";if(stream.match(/(\[])/))return"keyword";if(stream.match(tripleOperators)||stream.match(doubleOperators))return"operator";if(stream.match(atoms))return"atom";var matched=stream.match(openingKeywords);if(matched)return state.doInCurrentLine?state.doInCurrentLine=!1:state.currentIndent++,"proc"==matched[0]||"fun"==matched[0]?state.tokenize=tokenFunProc:"class"==matched[0]?state.tokenize=tokenClass:"meth"==matched[0]&&(state.tokenize=tokenMeth),"keyword";if(stream.match(middleKeywords)||
stream.match(commonKeywords))return"keyword";if(stream.match(endKeywords))return state.currentIndent--,"keyword";matched=stream.next();if('"'==matched||"'"==matched)return state.tokenize=tokenString(matched),state.tokenize(stream,state);if(/[~\d]/.test(matched)){if("~"==matched){if(!/^[0-9]/.test(stream.peek()))return null;if("0"==stream.next()&&stream.match(/^[xX][0-9a-fA-F]+/)||stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))return"number"}return"0"==matched&&stream.match(/^[xX][0-9a-fA-F]+/)||
stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/)?"number":null}if("%"==matched)return stream.skipToEnd(),"comment";if("/"==matched&&stream.eat("*"))return state.tokenize=tokenComment,tokenComment(stream,state);if(singleOperators.test(matched))return"operator";stream.eatWhile(/\w/);return"variable"}function tokenClass(stream,state){if(stream.eatSpace())return null;stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);state.tokenize=tokenBase;return"variable-3"}function tokenMeth(stream,state){if(stream.eatSpace())return null;
stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);state.tokenize=tokenBase;return"def"}function tokenFunProc(stream,state){if(stream.eatSpace())return null;if(!state.hasPassedFirstStage&&stream.eat("{"))return state.hasPassedFirstStage=!0,"bracket";if(state.hasPassedFirstStage)return stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/),state.hasPassedFirstStage=!1,state.tokenize=tokenBase,"def";state.tokenize=tokenBase;return null}function tokenComment(stream,state){for(var maybeEnd=!1,ch;ch=stream.next();){if("/"==
ch&&maybeEnd){state.tokenize=tokenBase;break}maybeEnd="*"==ch}return"comment"}function tokenString(quote){return function(stream,state){for(var escaped=!1,next,end=!1;null!=(next=stream.next());){if(next==quote&&!escaped){end=!0;break}escaped=!escaped&&"\\"==next}if(end||!escaped)state.tokenize=tokenBase;return"string"}}var singleOperators=/[\^@!\|<>#~\.\*\-\+\\/,=]/,doubleOperators=/(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/,tripleOperators=/(:::)|(\.\.\.)|(=<:)|(>=:)/,
middle="in then else of elseof elsecase elseif catch finally with require prepare import export define do".split(" "),end$jscomp$0=["end"],atoms=wordRegexp(["true","false","nil","unit"]),commonKeywords=wordRegexp("andthen at attr declare feat from lex mod div mode orelse parser prod prop scanner self syn token".split(" ")),openingKeywords=wordRegexp("local proc fun case class if cond or dis choice not thread try raise lock for suchthat meth functor".split(" ")),middleKeywords=wordRegexp(middle),endKeywords=
wordRegexp(end$jscomp$0);return{startState:function(){return{tokenize:tokenBase,currentIndent:0,doInCurrentLine:!1,hasPassedFirstStage:!1}},token:function(stream,state){stream.sol()&&(state.doInCurrentLine=0);return state.tokenize(stream,state)},indent:function(state,textAfter){textAfter=textAfter.replace(/^\s+|\s+$/g,"");return textAfter.match(endKeywords)||textAfter.match(middleKeywords)||textAfter.match(/(\[])/)?conf.indentUnit*(state.currentIndent-1):0>state.currentIndent?0:state.currentIndent*
conf.indentUnit},fold:"indent",electricInput:function(){var allClosings=middle.concat(end$jscomp$0);return new RegExp("[\\[\\]]|("+allClosings.join("|")+")$")}(),lineComment:"%",blockCommentStart:"/*",blockCommentEnd:"*/"}});CodeMirror.defineMIME("text/x-oz","oz")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$oz$oz.js.map
