{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$fr$parsers$FRSpecificTimeExpressionParser.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/chrono-node/dist/locales/fr/parsers/FRSpecificTimeExpressionParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$fr$parsers$FRSpecificTimeExpressionParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"../../../index\");\nconst FIRST_REG_PATTERN = new RegExp(\"(^|\\\\s|T)\" +\n    \"(?:(?:[\u00e0a])\\\\s*)?\" +\n    \"(\\\\d{1,2})(?:h|:)?\" +\n    \"(?:(\\\\d{1,2})(?:m|:)?)?\" +\n    \"(?:(\\\\d{1,2})(?:s|:)?)?\" +\n    \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" +\n    \"(?=\\\\W|$)\", \"i\");\nconst SECOND_REG_PATTERN = new RegExp(\"^\\\\s*(\\\\-|\\\\\u2013|\\\\~|\\\\\u301c|[\u00e0a]|\\\\?)\\\\s*\" +\n    \"(\\\\d{1,2})(?:h|:)?\" +\n    \"(?:(\\\\d{1,2})(?:m|:)?)?\" +\n    \"(?:(\\\\d{1,2})(?:s|:)?)?\" +\n    \"(?:\\\\s*(A\\\\.M\\\\.|P\\\\.M\\\\.|AM?|PM?))?\" +\n    \"(?=\\\\W|$)\", \"i\");\nconst HOUR_GROUP = 2;\nconst MINUTE_GROUP = 3;\nconst SECOND_GROUP = 4;\nconst AM_PM_HOUR_GROUP = 5;\nclass FRSpecificTimeExpressionParser {\n    pattern(context) {\n        return FIRST_REG_PATTERN;\n    }\n    extract(context, match) {\n        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));\n        if (result.text.match(/^\\d{4}$/)) {\n            match.index += match[0].length;\n            return null;\n        }\n        result.start = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);\n        if (!result.start) {\n            match.index += match[0].length;\n            return null;\n        }\n        const remainingText = context.text.substring(match.index + match[0].length);\n        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);\n        if (secondMatch) {\n            result.end = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);\n            if (result.end) {\n                result.text += secondMatch[0];\n            }\n        }\n        return result;\n    }\n    static extractTimeComponent(extractingComponents, match) {\n        let hour = 0;\n        let minute = 0;\n        let meridiem = null;\n        hour = parseInt(match[HOUR_GROUP]);\n        if (match[MINUTE_GROUP] != null) {\n            minute = parseInt(match[MINUTE_GROUP]);\n        }\n        if (minute >= 60 || hour > 24) {\n            return null;\n        }\n        if (hour >= 12) {\n            meridiem = index_1.Meridiem.PM;\n        }\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12)\n                return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = index_1.Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                }\n            }\n            if (ampm == \"p\") {\n                meridiem = index_1.Meridiem.PM;\n                if (hour != 12) {\n                    hour += 12;\n                }\n            }\n        }\n        extractingComponents.assign(\"hour\", hour);\n        extractingComponents.assign(\"minute\", minute);\n        if (meridiem !== null) {\n            extractingComponents.assign(\"meridiem\", meridiem);\n        }\n        else {\n            if (hour < 12) {\n                extractingComponents.imply(\"meridiem\", index_1.Meridiem.AM);\n            }\n            else {\n                extractingComponents.imply(\"meridiem\", index_1.Meridiem.PM);\n            }\n        }\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60)\n                return null;\n            extractingComponents.assign(\"second\", second);\n        }\n        return extractingComponents;\n    }\n}\nexports.default = FRSpecificTimeExpressionParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","index_1","FIRST_REG_PATTERN","RegExp","SECOND_REG_PATTERN","FRSpecificTimeExpressionParser","pattern","context","extract","match","result","createParsingResult","index","length","substring","text","start","extractTimeComponent","clone","remainingText","secondMatch","exec","end","extractingComponents","hour","minute","meridiem","parseInt","HOUR_GROUP","MINUTE_GROUP","Meridiem","PM","AM_PM_HOUR_GROUP","ampm","toLowerCase","AM","assign","imply","SECOND_GROUP","second","default"]
}
