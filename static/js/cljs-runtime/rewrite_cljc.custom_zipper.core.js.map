{"version":3,"sources":["rewrite_cljc/custom_zipper/core.cljc"],"mappings":"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","names":["rewrite-cljc.custom-zipper.core/custom-zipper","root","rewrite-cljc.custom-zipper.core/zipper","clojure.zip/zipper","rewrite-cljc.node.protocols/inner?","cljs.core.comp","cljs.core/seq","rewrite-cljc.node.protocols/children","rewrite-cljc.node.protocols/replace-children","rewrite-cljc.custom-zipper.core/custom-zipper?","value","G__92738","rewrite-cljc.custom-zipper.switchable/custom-zipper?","clojure.zip/node","rewrite-cljc.custom-zipper.core/node","zloc","G__92739","clojure.zip/branch?","rewrite-cljc.custom-zipper.core/branch?","G__92740","map__92741","cljs.core/--destructure-map","cljs.core.get","clojure.zip/children","rewrite-cljc.custom-zipper.core/children","node","cljs.core.ex_info","G__92742","G__92743","G__92744","clojure.zip/make-node","rewrite-cljc.custom-zipper.core/make-node","_zloc","children","rewrite-cljc.custom-zipper.core/position","rewrite-cljc.custom-zipper.core/position-span","start-pos","rewrite-cljc.node.protocols/+extent","rewrite-cljc.node.protocols/extent","G__92745","clojure.zip/lefts","rewrite-cljc.custom-zipper.core/lefts","cljs.core.map","cljs.core/first","G__92746","clojure.zip/down","rewrite-cljc.custom-zipper.core/down","map__92747","vec__92748","cljs.core.nth","vec__92751","seq__92752","first__92753","cljs.core/next","row","col","c","cnext","cs","rewrite-cljc.node.protocols/leader-length","G__92754","clojure.zip/up","rewrite-cljc.custom-zipper.core/up","map__92755","parent","left","right","changed?","cljs.core.assoc","cljs.core.concat","cljs.core/cons","G__92758","map__92759","clojure.zip/root","rewrite-cljc.custom-zipper.core/root","end?","p","G__92760","clojure.zip/right","rewrite-cljc.custom-zipper.core/right","map__92761","vec__92762","seq__92763","first__92764","position","r","rnext","and__4251__auto__","cljs.core.conj","G__92771","clojure.zip/rightmost","rewrite-cljc.custom-zipper.core/rightmost","temp__5718__auto__","next","G__92778","clojure.zip/left","rewrite-cljc.custom-zipper.core/left","map__92779","vec__92780","lnode","lpos","cljs.core/peek","cljs.core/pop","G__92783","clojure.zip/leftmost","rewrite-cljc.custom-zipper.core/leftmost","map__92784","vec__92785","cljs.core/rest","G__92788","G__92789","clojure.zip/insert-left","rewrite-cljc.custom-zipper.core/insert-left","item","map__92790","cljs.core/not","G__92794","G__92795","clojure.zip/insert-right","rewrite-cljc.custom-zipper.core/insert-right","map__92796","G__92801","G__92802","clojure.zip/replace","rewrite-cljc.custom-zipper.core/replace","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rewrite-cljc.custom-zipper.core/edit","seq92803","G__92804","G__92805","self__4851__auto__","f","args","cljs.core.apply","clojure.zip/edit","G__92806","G__92807","clojure.zip/insert-child","rewrite-cljc.custom-zipper.core/insert-child","G__92811","G__92812","clojure.zip/append-child","rewrite-cljc.custom-zipper.core/append-child","G__92813","map__92814","clojure.zip/next","rewrite-cljc.custom-zipper.core/next","or__4253__auto__","G__92815","clojure.zip/prev","rewrite-cljc.custom-zipper.core/prev","lloc","child","G__92816","clojure.zip/end?","rewrite-cljc.custom-zipper.core/end?","G__92818","clojure.zip/remove","rewrite-cljc.custom-zipper.core/remove","map__92819","vec__92834"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n;functional hierarchical zipper, with navigation, editing and enumeration\n;see Huet\n\n(ns ^:no-doc ^{:doc \"Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet.\n  Modified to optionally support row col position tracking.\"\n       :author \"Rich Hickey\"}\n  rewrite-cljc.custom-zipper.core\n  (:refer-clojure :exclude (replace remove next))\n  (:require [clojure.zip :as clj-zip]\n            [rewrite-cljc.custom-zipper.switchable :refer [defn-switchable]]\n            [rewrite-cljc.node.protocols :as node])\n  #?(:cljs (:require-macros [rewrite-cljc.custom-zipper.switchable :refer [defn-switchable]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Switch\n;;\n;; To not force users into using this custom zipper, the following flag\n;; is used to dispatch to `clojure.zip` when set to `false`.\n\n(defn ^:no-doc custom-zipper\n  [root]\n  {::custom? true\n   :node     root\n   :position [1 1]\n   :parent   nil\n   :left     []\n   :right   '()})\n\n(defn ^:no-doc zipper\n  [root]\n  (clj-zip/zipper\n    node/inner?\n    (comp seq node/children)\n    node/replace-children\n    root))\n\n(defn ^:no-doc custom-zipper?\n  [value]\n  (::custom? value))\n\n;; ## Implementation\n\n(defn-switchable node\n  \"Returns the current node in `zloc`.\"\n  [zloc]\n  (:node zloc))\n\n(defn-switchable branch?\n  \"Returns true if the current node in `zloc` is a branch.\"\n  [zloc]\n  (node/inner? (:node zloc)))\n\n(defn-switchable children\n  \"Returns a seq of the children of current node in `zloc`, which must be a branch.\"\n  [{:keys [node] :as zloc}]\n  (if (branch? zloc)\n    (seq (node/children node))\n    (throw (ex-info \"called children on a leaf node\" {}))))\n\n(defn-switchable ^:no-doc make-node\n  \"Returns a new branch node, given an existing `node` and new\n  `children`. \"\n  [_zloc node children]\n  (node/replace-children node children))\n\n(defn position\n  \"Returns the ones-based `[row col]` of the start of the current node in `zloc`.\"\n  [zloc]\n  (if (custom-zipper? zloc)\n    (:position zloc)\n    (throw\n     (ex-info\n      (str \"to use position functions, please construct your zipper with \"\n           \"':track-position?'  set to true.\") {}))))\n\n(defn position-span\n  \"Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\"\n  [zloc]\n  (let [start-pos (position zloc)]\n    [start-pos (node/+extent start-pos (node/extent (node zloc)))]))\n\n\n(defn-switchable lefts\n  \"Returns a seq of the left siblings of current node in `zloc`.\"\n  [zloc]\n  (map first (:left zloc)))\n\n(defn-switchable down\n  \"Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children.\"\n  [zloc]\n  (when (branch? zloc)\n    (let [{:keys [node] [row col] :position} zloc\n          [c & cnext :as cs] (children zloc)]\n      (when cs\n        {::custom? true\n         :node     c\n         :position [row (+ col (node/leader-length node))]\n         :parent   zloc\n         :left     []\n         :right    cnext}))))\n\n(defn-switchable up\n  \"Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top.\"\n  [zloc]\n  (let [{:keys [node parent left right changed?]} zloc]\n    (when parent\n      (if changed?\n        (assoc parent\n               :changed? true\n               :node (make-node zloc\n                                (:node parent)\n                                (concat (map first left) (cons node right))))\n        parent))))\n\n(defn-switchable root\n  \"Zips all the way up `zloc` and returns zipper at the root node, reflecting any changes.\"\n  [{:keys [end?] :as zloc}]\n  (if end?\n    (node zloc)\n    (let [p (up zloc)]\n      (if p\n        (recur p)\n        (node zloc)))))\n\n(defn-switchable right\n  \"Returns zipper with location at the right sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent position left] [r & rnext :as right] :right} zloc]\n    (when (and parent right)\n      (assoc zloc\n             :node r\n             :left (conj left [node position])\n             :right rnext\n             :position (node/+extent position (node/extent node))))))\n\n(defn-switchable rightmost\n  \"Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (if-let [next (right zloc)]\n    (recur next)\n    zloc))\n\n(defn-switchable left\n  \"Returns zipper with location at the left sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (when (and parent (seq left))\n      (let [[lnode lpos] (peek left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left (pop left)\n               :right (cons node right))))))\n\n(defn-switchable leftmost\n  \"Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (if (and parent (seq left))\n      (let [[lnode lpos] (first left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left []\n               :right (concat (map first (rest left)) [node] right)))\n      zloc)))\n\n(defn-switchable insert-left\n  \"Returns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location.\"\n  [zloc item]\n  (let [{:keys [parent position left]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert left at top\" {}))\n      (assoc zloc\n             :changed? true\n             :left (conj left [item position])\n             :position (node/+extent position (node/extent item))))))\n\n(defn-switchable insert-right\n  \"Returns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (let [{:keys [parent right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert right at top\" {}))\n      (assoc zloc\n             :changed? true\n             :right (cons item right)))))\n\n(defn-switchable replace\n  \"Returns zipper with `node` replacing current node in `zloc`, without moving location.\"\n  [zloc node]\n  (assoc zloc :changed? true :node node))\n\n(defn edit\n  \"Returns zipper with value of `(f current-node args)` replacing current node in `zloc`\"\n  [zloc f & args]\n  (if (custom-zipper? zloc)\n    (replace zloc (apply f (node zloc) args))\n    (apply clj-zip/edit zloc f args)))\n\n(defn-switchable insert-child\n  \"Returns zipper with `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (cons item (children zloc)))))\n\n(defn-switchable append-child\n  \"Returns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (concat (children zloc) [item]))))\n\n(defn-switchable next\n  \"Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there.\"\n  [{:keys [end?] :as zloc}]\n  (if end?\n    zloc\n    (or\n     (and (branch? zloc) (down zloc))\n     (right zloc)\n     (loop [p zloc]\n       (if (up p)\n         (or (right (up p)) (recur (up p)))\n         (assoc p :end? true))))))\n\n(defn-switchable prev\n  \"Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil.\"\n  [zloc]\n  (if-let [lloc (left zloc)]\n    (loop [zloc lloc]\n      (if-let [child (and (branch? zloc) (down zloc))]\n        (recur (rightmost child))\n        zloc))\n    (up zloc)))\n\n(defn-switchable end?\n  \"Returns true if at end of depth-first walk in `zloc`.\"\n  [zloc]\n  (:end? zloc))\n\n(defn-switchable remove\n  \"Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk.\"\n  [zloc]\n  (let [{:keys [parent left right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot remove at top\" {}))\n      (if (seq left)\n        (loop [zloc (let [[lnode lpos] (peek left)]\n                     (assoc zloc\n                            :changed? true\n                            :position lpos\n                            :node lnode\n                            :left (pop left)))]\n          (if-let [child (and (branch? zloc) (down zloc))]\n            (recur (rightmost child))\n            zloc))\n        (assoc parent\n               :changed? true\n               :node (make-node zloc (:node parent) right))))))\n"]}