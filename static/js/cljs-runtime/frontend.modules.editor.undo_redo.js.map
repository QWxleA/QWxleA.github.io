{"version":3,"sources":["frontend/modules/editor/undo_redo.cljs"],"mappings":"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","names":["frontend.modules.editor.undo-redo/undo-redo-states","cljs.core.atom","frontend.modules.editor.undo-redo/get-state","repo","frontend.state/get-current-repo","js/Error","temp__5718__auto__","state","cljs.core/deref","cljs.core.get","new-state","cljs.core.swap_BANG_","cljs.core/assoc","frontend.modules.editor.undo-redo/get-undo-stack","frontend.modules.editor.undo-redo/get-redo-stack","frontend.modules.editor.undo-redo/push-undo","txs","undo-stack","cljs.core/conj","frontend.modules.editor.undo-redo/pop-undo","temp__5720__auto__","stack","cljs.core/seq","removed-e","cljs.core/peek","popped-stack","cljs.core/pop","prev-e","cljs.core/reset!","frontend.modules.editor.undo-redo/push-redo","redo-stack","frontend.modules.editor.undo-redo/pop-redo","frontend.modules.editor.undo-redo/reset-redo","frontend.modules.editor.undo-redo/get-txs","redo?","cljs.core/reverse","cljs.core.mapv","p__50491","vec__50492","cljs.core.nth","id","attr","value","tx","add?","op","and__5041__auto__","cljs.core/not","frontend.modules.editor.undo-redo/transact!","conn","frontend.db.conn.get_db","db-report","datascript.core.transact_BANG_","frontend.modules.outliner.pipeline/invoke-hooks","frontend.modules.editor.undo-redo/undo","vec__50498","e","map__50501","cljs.core/--destructure-map","new-txs","editor-cursor","cljs.core._EQ_","cljs.core.get_in","cljs.core.assoc","frontend.modules.editor.undo-redo/redo","map__50507","p__50510","map__50512","frontend.modules.editor.undo-redo/listen-outliner-operation","tx-data","tx-meta","tx-report","cljs.core/empty?","updated-blocks","frontend.modules.datascript-report.core/get-blocks","entity"],"sourcesContent":["(ns frontend.modules.editor.undo-redo\n  (:require [datascript.core :as d]\n            [frontend.db.conn :as conn]\n            [frontend.modules.datascript-report.core :as db-report]\n            [frontend.state :as state]\n            [frontend.modules.outliner.pipeline :as pipelines]))\n\n;;;; APIs\n\n(def ^:private undo-redo-states (atom {}))\n\n(defn- get-state\n  []\n  (let [repo (state/get-current-repo)]\n    (assert (string? repo) \"Repo should satisfy string?\")\n    (if-let [state (get @undo-redo-states repo)]\n      state\n      (let [new-state {:undo-stack (atom [])\n                       :redo-stack (atom [])}]\n        (swap! undo-redo-states assoc repo new-state)\n        new-state))))\n\n(defn- get-undo-stack\n  []\n  (-> (get-state) :undo-stack))\n\n(defn- get-redo-stack\n  []\n  (-> (get-state) :redo-stack))\n\n(defn push-undo\n  [txs]\n  (let [undo-stack (get-undo-stack)]\n    (swap! undo-stack conj txs)))\n\n(comment\n  (defn get-content-from-txs\n    \"For test.\"\n    [txs]\n    (filterv (fn [[_ a & y]]\n               (= :block/content a))\n      txs))\n\n  (defn get-content-from-stack\n    \"For test.\"\n    [stack]\n    (mapv #(get-content-from-txs (:txs %)) stack))\n\n  (debug/pprint \"pop entity\" (get-content-from-txs (:txs removed-e)))\n  (debug/pprint \"undo-stack\" (get-content-from-stack @undo-stack)))\n\n(defn pop-undo\n  []\n  (let [undo-stack (get-undo-stack)]\n    (when-let [stack @undo-stack]\n      (when (seq stack)\n        (let [removed-e (peek stack)\n              popped-stack (pop stack)\n              prev-e (peek popped-stack)]\n          (reset! undo-stack popped-stack)\n          [removed-e prev-e])))))\n\n(defn push-redo\n  [txs]\n  (let [redo-stack (get-redo-stack)]\n   (swap! redo-stack conj txs)))\n\n(defn pop-redo\n  []\n  (let [redo-stack (get-redo-stack)]\n   (when-let [removed-e (peek @redo-stack)]\n     (swap! redo-stack pop)\n     removed-e)))\n\n(defn reset-redo\n  []\n  (let [redo-stack (get-redo-stack)]\n    (reset! redo-stack [])))\n\n(defn get-txs\n  [redo? txs]\n  (let [txs (if redo? txs (reverse txs))]\n    (mapv (fn [[id attr value tx add?]]\n            (let [op (cond\n                       (and redo? add?) :db/add\n                       (and (not redo?) add?) :db/retract\n                       (and redo? (not add?)) :db/retract\n                       (and (not redo?) (not add?)) :db/add)]\n              [op id attr value tx]))\n      txs)))\n\n;;;; Invokes\n\n(defn- transact!\n  [txs]\n  (let [conn (conn/get-db false)\n        db-report (d/transact! conn txs)]\n    (pipelines/invoke-hooks db-report)))\n\n(defn undo\n  []\n  (let [[e prev-e] (pop-undo)]\n    (when e\n      (let [{:keys [txs]} e\n            new-txs (get-txs false txs)\n            editor-cursor (if (= (get-in e [:editor-cursor :last-edit-block :block/uuid])\n                                 (get-in prev-e [:editor-cursor :last-edit-block :block/uuid])) ; same block\n                            (:editor-cursor prev-e)\n                            (:editor-cursor e))]\n        (push-redo e)\n        (transact! new-txs)\n        (assoc e\n               :txs-op new-txs\n               :editor-cursor editor-cursor)))))\n\n(defn redo\n  []\n  (when-let [{:keys [txs]:as e} (pop-redo)]\n    (let [new-txs (get-txs true txs)]\n      (push-undo e)\n      (transact! new-txs)\n      (assoc e :txs-op new-txs))))\n\n(defn listen-outliner-operation\n  [{:keys [tx-data tx-meta] :as tx-report}]\n  (when-not (empty? tx-data)\n    (reset-redo)\n    (let [updated-blocks (db-report/get-blocks tx-report)\n          entity {:blocks updated-blocks :txs tx-data\n                  :editor-cursor (:editor-cursor tx-meta)}]\n      (push-undo entity))))\n"]}