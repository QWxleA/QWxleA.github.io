{"version":3,"sources":["frontend/db/conn.cljs"],"mappings":";AAaA,GAAA,QAAAA,qCAAAC,wCAAAC,6CAAAC;AAAA;AAAA,AAAA,AAASC,yBAAM,6CAAA,7CAACC;;AAEhB,iCAAA,jCAAMC,0EACHC;AADH,AAEE,GAAI,qCAAA,rCAACC,iCAAkBD;6DAChB,oBAAA,pBAACE,wBAAY,uDAAA,vDAACC,mDAAaH,xIAC3B,yDAAA,lDAACI;;AACNJ;;;AAEJ,iCAAA,jCAAMK,0EACHC;AADH,AAEE,oBACE,AAACC;AACD,OAACC,kDAA8BF;;AAFjC,GAIE,AAACG,gCAAiBH;AAClB,OAACI,8BAAqBJ;;AALxB,AAQE,OAACP,+BAAcO;;;;;AAEnB;;;uCAAA,vCAAMK,sFAEHC;AAFH,AAGE,oBAAI,iBAAAC,mBAAI,AAACC;AAAL,AAAA,oBAAAD;AAAAA;;AACI,OAACN;;;AACP,OAACQ,2CAAuBH;;AACxBA;;;AAEJ,iCAAA,jCAAMI,0EACHV;AADH,AAEE,oBAAMA;AAAN,AACE,IAAMW,OAAK,AAAClB,+BAAcO;AAA1B,AACE,QAAK,mDAAA,jCAAI,AAACQ,oCAAmBI,2EACxBD;;AAHT;;;AAKF,AAAA,0BAAA,kCAAAE,5DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMD;AAAN,AAEG,+FAAA,xFAACE,sDAAO,AAACC;;;AAFZ,CAAA,wDAAA,xDAAMH,mEAGFI;AAHJ,AAIG,GAAI,AAACC,yBAASD;AACZ,OAACF,sDAAO,AAACC,kCAAwBC;;AACjC,kFAAA,3EAACF,sDAAOE;;;;AANb,CAAA,wDAAA,xDAAMJ,mEAOFf,KAAKqB;AAPT,AAQG,IAAMrB,WAAK,kBAAIA,MAAKA,KAAK,AAACkB;AAA1B,AACE,IAAAI,qBAAgB,4CAAA,AAAAE,5CAACC,4DAAKlC,wBAAM,AAACmB,+BAAcV;AAA3C,AAAA,oBAAAsB;AAAA,AAAA,WAAAA,PAAWC;AAAX,AACE,oBAAIF;AAAJ,OAAAG,gBACGD;;AACDA;;;AAHJ;;;;AATL,CAAA,kDAAA,lDAAMR;;AAAN,AAcA,oCAAA,pCAAMW,gFAAaH,KAAKI;AAAxB,AACE,OAACC,sBAAOL,KAAKI;;AAEf,qCAAA,rCAAME,kFACH7B;AADH,AAEE,OAAC8B,mDAAMvC,uBAAMwC,iBAAO,AAACrB,+BAAcV;;AAErC,yBAAA,qCAAAgC,9DAAMG,0DACHC;AADH,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAR,4CAAAQ,eAAA,lEACeI;YADf,AAAAZ,4CAAAQ,eAAA,nEACoBK;aADpB,AAAAb,4CAAAQ,eAAA,pEAC0BM;AAD1B,AAEE,4CAAA,2CAAA,6DAAA,gEAAA,7MAACC,wIAA8BH,+DACFC,mEACCC;;AAEhC,AAAA,+BAAA,uCAAA1B,tEAAM6B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAM0B,wEACFG,OAAG7C;AADP,AAEG,8EAAA,vEAAC8C,2DAAOD,OAAG7C;;;AAFd,CAAA,6DAAA,uBAAA2C,pFAAMD,wEAGFG,OAAG7C;AAHP,AAAA,IAAA4C,aAAAD;IAAAC,iBAAA,AAAAV,4BAAAU;cAAA,AAAAnB,4CAAAmB,eAAA,rEAGoBG;qBAHpB,AAAAtB,4CAAAmB,eAAA,5EAG4BI;AAH5B,AAIG,IAAMC,UAAQ,AAACvC,+BAAcV;IACvBkD,UAAQ,AAACC,0DAAcC;AAD7B,AAEE,AAACtB,mDAAMvC,uBAAM8D,gBAAMJ,QAAQC;;AAC3B,qEAAA,rEAACI,6DAAYJ,2FAAS,iBAAAK,WAAA,2CAAA,sEAAyBC;AAAzB,AAAA,oBACET;AACA,qDAAAQ,SAAA,vDAACE,+GAAeV;;AAFlBQ;;KAAtB,2CAAA,8DAAA,OAAA,iFAAA,OAAA,+DAKmC,AAACG;;AACpC,oBAAMb;AAAN,AACE,qEAAA,rEAACS,6DAAYJ,2FAAS,AAACf,uBAAM,AAACwB,mBAAKT,SAASL;;AAD9C;;AAGA,AAACS,6DAAYJ,QAAQU;;AAErB,oBAAMZ;AAAN,AACE,QAACA,+CAAAA,qDAAAA,RAAehD,iCAAAA;;AADlB;;;;AAlBL,CAAA,uDAAA,vDAAM0C;;AAAN,AAqBA,qCAAA,rCAAMmB;AAAN,AAEE,oDAAA,7CAACjC,sBAAOrC","names":["js/frontend","js/frontend.db","js/frontend.db.conn","js/frontend.db.conn.conns","frontend.db.conn/conns","cljs.core.atom","frontend.db.conn/get-repo-path","url","frontend.util/starts-with?","cljs.core/take-last","clojure.string.split","clojure.string.join","frontend.db.conn/get-repo-name","repo","frontend.mobile.util/is-native-platform?","logseq.graph-parser.text/get-graph-name-from-path","frontend.config/local-db?","frontend.config/get-local-dir","frontend.db.conn/get-short-repo-name","repo-path","or__4253__auto__","frontend.util/electron?","logseq.graph-parser.text/get-file-basename","frontend.db.conn/datascript-db","path","frontend.config/idb-db-prefix","var_args","G__93488","frontend.db.conn/get-db","js/Error","frontend.db.conn.get_db","frontend.state/get-current-repo","repo-or-deref?","cljs.core/boolean?","deref?","temp__5720__auto__","conn","cljs.core/deref","cljs.core.get","frontend.db.conn/reset-conn!","db","cljs.core/reset!","frontend.db.conn/remove-conn!","cljs.core.swap_BANG_","cljs.core/dissoc","p__93493","map__93494","cljs.core/--destructure-map","frontend.db.conn/me-tx","_db","name","email","avatar","logseq.graph-parser.util/remove-nils","G__93496","frontend.db.conn/start!","p__93497","map__93498","me","frontend.db.conn.start_BANG_","db-type","listen-handler","db-name","db-conn","datascript.core.create_conn","frontend.db-schema/schema","cljs.core/assoc","datascript.core.transact_BANG_","G__93499","frontend.db-schema/version","cljs.core.assoc","datascript.core.squuid","datascript.core/db","frontend.db.default/built-in-pages","frontend.db.conn/destroy-all!"],"sourcesContent":["(ns frontend.db.conn\n  \"Contains db connections.\"\n  (:require [clojure.string :as string]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.default :as default-db]\n            [frontend.util :as util]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.state :as state]\n            [frontend.config :as config]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.util :as gp-util]\n            [datascript.core :as d]))\n\n(defonce conns (atom {}))\n\n(defn get-repo-path\n  [url]\n  (if (util/starts-with? url \"http\")\n    (->> (take-last 2 (string/split url #\"/\"))\n         (string/join \"/\"))\n    url))\n\n(defn get-repo-name\n  [repo]\n  (cond\n    (mobile-util/is-native-platform?)\n    (text/get-graph-name-from-path repo)\n\n    (config/local-db? repo)\n    (config/get-local-dir repo)\n\n    :else\n    (get-repo-path repo)))\n\n(defn get-short-repo-name\n  \"repo-path: output of `get-repo-name`\"\n  [repo-path]\n  (if (or (util/electron?)\n          (mobile-util/is-native-platform?))\n    (text/get-file-basename repo-path)\n    repo-path))\n\n(defn datascript-db\n  [repo]\n  (when repo\n    (let [path (get-repo-path repo)]\n      (str (if (util/electron?) \"\" config/idb-db-prefix)\n           path))))\n\n(defn get-db\n  ([]\n   (get-db (state/get-current-repo) true))\n  ([repo-or-deref?]\n   (if (boolean? repo-or-deref?)\n     (get-db (state/get-current-repo) repo-or-deref?)\n     (get-db repo-or-deref? true)))\n  ([repo deref?]\n   (let [repo (if repo repo (state/get-current-repo))]\n     (when-let [conn (get @conns (datascript-db repo))]\n       (if deref?\n         @conn\n         conn)))))\n\n(defn reset-conn! [conn db]\n  (reset! conn db))\n\n(defn remove-conn!\n  [repo]\n  (swap! conns dissoc (datascript-db repo)))\n\n(defn me-tx\n  [_db {:keys [name email avatar]}]\n  (gp-util/remove-nils {:me/name name\n                     :me/email email\n                     :me/avatar avatar}))\n\n(defn start!\n  ([me repo]\n   (start! me repo {}))\n  ([me repo {:keys [db-type listen-handler]}]\n   (let [db-name (datascript-db repo)\n         db-conn (d/create-conn db-schema/schema)]\n     (swap! conns assoc db-name db-conn)\n     (d/transact! db-conn [(cond-> {:schema/version db-schema/version}\n                             db-type\n                             (assoc :db/type db-type))\n                           {:block/name \"card\"\n                            :block/original-name \"card\"\n                            :block/uuid (d/squuid)}])\n     (when me\n       (d/transact! db-conn [(me-tx (d/db db-conn) me)]))\n\n     (d/transact! db-conn default-db/built-in-pages)\n\n     (when listen-handler\n       (listen-handler repo)))))\n\n(defn destroy-all!\n  []\n  (reset! conns {}))\n"]}