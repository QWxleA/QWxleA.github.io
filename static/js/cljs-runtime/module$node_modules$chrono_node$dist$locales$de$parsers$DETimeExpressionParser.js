shadow$provide.module$node_modules$chrono_node$dist$locales$de$parsers$DETimeExpressionParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$chrono_node$dist$common$parsers$AbstractTimeExpressionParser");const index_1=require("module$node_modules$chrono_node$dist$index");class DETimeExpressionParser extends global.AbstractTimeExpressionParser{primaryPrefix(){return"(?:(?:um|von)\\s*)?"}followingPhase(){return"\\s*(?:\\-|\\–|\\~|\\〜|bis)\\s*"}primarySuffix(){return"(?:\\s*uhr)?(?:\\s*(?:morgens|vormittags|nachmittags|abends|nachts))?(?\x3d\\W|$)"}extractPrimaryTimeComponents(context,
match){if(context=super.extractPrimaryTimeComponents(context,match)){if(match[0].endsWith("morgens")||match[0].endsWith("vormittags"))context.assign("meridiem",index_1.Meridiem.AM),12>context.get("hour")&&context.assign("hour",context.get("hour"));if(match[0].endsWith("nachmittags")||match[0].endsWith("abends")||match[0].endsWith("nachts"))context.assign("meridiem",index_1.Meridiem.PM),12>context.get("hour")&&context.assign("hour",context.get("hour")+12)}return context}}exports.default=DETimeExpressionParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$de$parsers$DETimeExpressionParser.js.map
