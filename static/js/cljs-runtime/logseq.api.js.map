{"version":3,"sources":["logseq/api.cljs"],"mappings":"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","names":["logseq.api/normalize-keyword-for-json","input","clojure.walk/postwalk","a","cljs.core/Keyword","camel-snake-kebab.core/->camelCase","cljs.core/name","cljs.core/uuid?","logseq.api/parse-hiccup-ui","e62657","sci.core.eval_string","js/Error","e","js/console.error","logseq.api/install-plugin-hook","pid","hook","frontend.state/install-plugin-hook","logseq.api/uninstall-plugin-hook","hook-or-all","frontend.state/uninstall-plugin-hook","logseq.api/should-exec-plugin-hook","hooks","cljs.core/deref","frontend.state/state","cljs.core/seq","cljs.core/contains?","cljs.core.get","cljs.core.keyword","logseq.api/get_state_from_store","path","temp__5720__auto__","cljs-bean.core/->clj","p1__62658#","cljs.core.map","clojure.string/starts-with?","cljs.core.subs","cljs.core.get_in","logseq.api/get_app_info","cljs-bean.core/->js","frontend.version/version","logseq.api/get_user_configs","frontend.state.get_preferred_format","frontend.state/get-preferred-workflow","frontend.state/get-preferred-todo","frontend.state/get-date-formatter","frontend.state/get-start-of-week","frontend.state/get-current-repo","frontend.state/show-brackets?","frontend.state/get-me","logseq.api/get_current_graph","repo","cljs.core._EQ_","frontend.config/local-repo","frontend.util/node-path","frontend.config/get-repo-dir","logseq.api/show_themes","frontend.components.plugins/open-select-theme!","logseq.api/set_theme_mode","mode","frontend.state/set-theme-mode!","logseq.api/load_plugin_config","frontend.fs.read_file","logseq.api/load_plugin_readme","logseq.api/save_plugin_config","data","frontend.fs/write-file!","js/JSON.stringify","logseq.api/write_dotdir_file","file","content","sub-root","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","frontend.handler.plugin/get-ls-dotdir-root","exist?","frontend.fs/file-exists?","_","frontend.fs/mkdir-recur!","user-path","sub-dir?","lambdaisland.glogi.log","cljs.core/identity","user-path-root","logseq.api/read_dotdir_file","logseq.api/unlink_dotdir_file!","frontend.fs/unlink!","logseq.api/write_user_tmp_file","logseq.api/write_plugin_storage_file","plugin-id","logseq.api/read_plugin_storage_file","logseq.api/unlink_plugin_storage_file","logseq.api/exist_plugin_storage_file","root","logseq.api/clear_plugin_storage_files","frontend.fs/rmdir!","logseq.api/load_user_preferences","frontend.fs.create_if_not_exists","json","clojure.string/blank?","js/JSON.parse","logseq.api/save_user_preferences","logseq.api/load_plugin_user_settings","frontend.handler.plugin/make-fn-to-load-dotdir-json","logseq.api/save_plugin_user_settings","key","frontend.handler.plugin/make-fn-to-save-dotdir-json","logseq.api/unlink_plugin_user_settings","frontend.handler.plugin/make-fn-to-unlink-dotdir-json","logseq.api/register_plugin_slash_command","cmd-actions","vec__62660","cljs.core.nth","cmd","actions","frontend.handler.plugin/register-plugin-slash-command","p1__62659#","cljs.core.mapv","cljs.core.into","cljs.core/first","cljs.core/rest","logseq.api/register_plugin_simple_command","cmd-action","palette?","vec__62663","action","cljs.core.assoc","clojure.string/replace","keybinding","palette-cmd","and__5041__auto__","frontend.handler.plugin/simple-cmd->palette-cmd","action'","frontend.state/pub-event!","cljs.core/type","frontend.handler.plugin/register-plugin-simple-command","frontend.handler.command-palette/register","shortcut-args","frontend.handler.plugin/simple-cmd-keybinding->shortcut-args","vec__62666","dispatch-cmd","_e","frontend.handler.command-palette/invoke-command","handler-id","id","shortcut-map","cljs.core.update","cljs.core/assoc","js/console.debug","frontend.modules.shortcut.core.register_shortcut_BANG_","logseq.api/unregister_plugin_simple_command","frontend.handler.plugin/unregister-plugin-simple-command","palette-matched","frontend.handler.command-palette/get-commands","p1__62669#","cljs.core.filter","clojure.string/includes?","seq__62670","chunk__62671","count__62672","i__62673","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","frontend.handler.command-palette/unregister","frontend.modules.shortcut.core/unregister-shortcut!","logseq.api/register_plugin_ui_item","type","opts","frontend.handler.plugin/register-plugin-ui-item","logseq.api/relaunch","electron.ipc.ipc","logseq.api/quit","logseq.api/open_external_link","url","cljs.core/re-find","js/apis.openExternal","logseq.api/invoke_external_command","args","frontend.util/safe-lower-case","frontend.handler.command-palette/get-commands-unique","cljs.core.apply","logseq.api/set_left_sidebar_visible","flag","frontend.state/toggle-left-sidebar!","frontend.state/set-state!","cljs.core/boolean","logseq.api/set_right_sidebar_visible","frontend.state/toggle-sidebar-open?!","logseq.api/push_state","k","params","query","reitit.frontend.easy.push_state","logseq.api/replace_state","reitit.frontend.easy.replace_state","logseq.api/check_editing","frontend.state/get-edit-input-id","frontend.state/get-edit-block","logseq.api/exit_editing_mode","select?","frontend.handler.editor.escape_editing","logseq.api/insert_at_editing_cursor","input-id","frontend.commands/simple-insert!","goog.dom/getElement","logseq.api/restore_editing_cursor","logseq.api/get_editing_cursor_position","frontend.util.cursor.get_caret_pos","logseq.api/get_editing_block_content","frontend.state/get-edit-content","logseq.api/get_selected_blocks","blocks","frontend.state/in-selection-mode?","frontend.state/get-selection-blocks","el","G__62674","frontend.db.model/query-block-by-uuid","logseq.api/get_current_page","page","frontend.state/get-current-page","frontend.db.model/get-page","frontend.db.utils.pull","logseq.api/get_page","id-or-page-name","logseq.api/get_all_pages","pages","frontend.handler.page/get-all-pages","logseq.api/create_page","name","properties","G__62675","temp__5718__auto__","map__62676","cljs.core/--destructure-map","redirect","createFirstBlock","format","journal","frontend.handler.page.create_BANG_","cljs.core/boolean?","logseq.api/delete_page","promesa.core.create","ok","frontend.handler.page/delete!","logseq.api/rename_page","frontend.handler.page/rename!","logseq.api/open_in_right_sidebar","block-uuid","frontend.handler.editor/open-block-in-sidebar!","cljs.core/uuid","logseq.api/edit_block","block","map__62677","pos","frontend.handler.editor.edit_block_BANG_","logseq.api/insert_block","block-uuid-or-page-name","map__62678","vec__62679","before","sibling","isPageBlock","page-name","block-uuid'","cljs.core/not","G__62682","frontend.db/entity","first-child","frontend.db.model/get-by-parent-&-left","frontend.db/get-db","insert-at-first-child?","cljs.core.not_EQ_","sibling?","before?","new-block","frontend.handler.editor/api-insert-new-block!","logseq.api/insert_batch_block","batch-blocks","bb","map__62683","cljs.core/vector?","cljs.core/PersistentVector","frontend.handler.editor/insert-block-tree-after-target","logseq.api/remove_block","_opts","includeChildren","frontend.handler.editor/delete-block-aux!","logseq.api/update_block","edit-input","editing?","clojure.string/ends-with?","frontend.state.set_edit_content_BANG_","frontend.handler.editor.save_block_BANG_","logseq.api/move_block","src-block-uuid","target-block-uuid","map__62684","children","move-to","src-block","target-block","frontend.handler.dnd/move-blocks","logseq.api/get_block","id-or-uuid","uuid","map__62686","frontend.modules.outliner.tree.blocks__GT_vec_tree","frontend.db.model/get-block-and-children","p1__62685#","cljs.core/List","frontend.db/get-block-immediate-children","logseq.api/get_current_block","or__5043__auto__","G__62687","frontend.db.model/get-block-by-uuid","logseq.api/get_previous_sibling_block","map__62688","parent","left","logseq.api/get_next_sibling_block","right-siblings","frontend.modules.outliner.core/get-right-siblings","frontend.modules.outliner.core/->Block","logseq.api/set_block_collapsed","map__62689","frontend.util/collapsed?","frontend.handler.editor/collapse-block!","frontend.handler.editor/expand-block!","logseq.api/upsert_block_property","value","frontend.handler.editor/set-block-property!","logseq.api/remove_block_property","frontend.handler.editor/remove-block-property!","logseq.api/get_block_property","logseq.api/get_block_properties","logseq.api/get_current_page_blocks_tree","frontend.db.model.get_page_blocks_no_cache","logseq.api/get_page_blocks_tree","logseq.api/get_page_linked_references","page-name-or-uuid","ref-blocks","frontend.db.model.get_page_referenced_blocks","frontend.db.model/get-block-referenced-blocks","logseq.api/get_pages_from_namespace","ns","frontend.db.model/get-namespace-pages","logseq.api/get_pages_tree_from_namespace","frontend.db.model/get-namespace-hierarchy","logseq.api/first-child-of-block","frontend.db.model.sort_by_left","logseq.api/second-child-of-block","cljs.core/second","logseq.api/last-child-of-block","cljs.core/last","logseq.api/prepend_block_in_page","uuid-or-page-name","page?","frontend.util/uuid-string?","page-not-exist?","block'","cljs.core.merge","src","logseq.api/append_block_in_page","logseq.api/__install_plugin","manifest","map__62690","mft","frontend.handler.plugin/install-marketplace-plugin","logseq.api/q","query-string","result","frontend.db.query-dsl/query","cljs.core/flatten","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","logseq.api/datascript_query","seq62691","G__62692","self__5751__auto__","inputs","db","cljs.reader.read_string","resolved-inputs","cljs.core.comp","frontend.db.query-react/resolve-input","cljs.reader/read-string","datascript.core/q","cljs.core/clj->js","logseq.api/custom_query","frontend.db/custom-query","logseq.api/download_graph_db","db-str","frontend.db/db->string","data-str","js/encodeURIComponent","anchor","logseq.api/download_graph_pages","frontend.handler.export/export-repo-as-zip!","logseq.api/exec_git_command","frontend.handler.shell/run-git-command!","logseq.api/git_exec_command","frontend.handler.shell/run-git-command2!","logseq.api/git_load_ignore_file","dir","logseq.api/git_save_ignore_file","G__62694","logseq.api/show_msg","logseq.api.show_msg","status","map__62695","timeout","hiccup?","clojure.string/triml","uid","clear?","key'","frontend.handler.notification.show_BANG_","logseq.api/ui_show_msg","seq62696","self__5752__auto__","logseq.api/ui_close_msg","frontend.handler.notification/clear!","logseq.api/assets_list_files_of_current_graph","exts","files","logseq.api/exper_load_scripts","seq62698","G__62699","scripts","_pl","frontend.handler.plugin/get-plugin-inst","seq__62700","chunk__62702","count__62703","i__62704","p1__62697#","s","upt-status","frontend.state/upt-plugin-resource","init?","frontend.handler.plugin/register-plugin-resources","promesa.core.catch$","promesa.core.then","frontend.loader.load","logseq.api/exper_register_fenced_code_renderer","frontend.handler.plugin/register-fenced-code-renderer","p1__62706#","p2__62707#","cljs.core.reduce","logseq.api/exper_register_extensions_enhancer","enhancer","cljs.core/fn?","frontend.handler.plugin/register-extensions-enhancer","logseq.api/query_element_by_id","logseq.api/query_element_rect","selector","js/document.querySelector","logseq.api/set_focused_settings","plugin","frontend.state/get-plugin-by-id","logseq.api/force_save_graph","electron.listener/persist-dbs!","logseq.api/__debug_state"],"sourcesContent":["(ns ^:no-doc logseq.api\n  (:require [camel-snake-kebab.core :as csk]\n            [cljs-bean.core :as bean]\n            [cljs.reader]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [datascript.core :as d]\n            [electron.ipc :as ipc]\n            [frontend.commands :as commands]\n            [frontend.components.plugins :as plugins]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.db.model :as db-model]\n            [frontend.db.query-dsl :as query-dsl]\n            [frontend.db.utils :as db-utils]\n            [frontend.db.query-react :as query-react]\n            [frontend.fs :as fs]\n            [frontend.handler.dnd :as editor-dnd-handler]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.export :as export-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.page :as page-handler]\n            [frontend.handler.plugin :as plugin-handler]\n            [frontend.modules.outliner.core :as outliner]\n            [frontend.modules.outliner.tree :as outliner-tree]\n            [frontend.handler.command-palette :as palette-handler]\n            [frontend.modules.shortcut.core :as st]\n            [electron.listener :as el]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [frontend.loader :as loader]\n            [goog.dom :as gdom]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [reitit.frontend.easy :as rfe]\n            [sci.core :as sci]\n            [frontend.version :as fv]\n            [frontend.handler.shell :as shell]\n            [frontend.modules.layout.core]))\n\n;; helpers\n(defn- normalize-keyword-for-json\n  [input]\n  (when input\n    (walk/postwalk\n      (fn [a]\n        (cond\n          (keyword? a) (csk/->camelCase (name a))\n          (uuid? a) (str a)\n          :else a)) input)))\n\n(defn- parse-hiccup-ui\n  [input]\n  (when (string? input)\n    (try\n      (sci/eval-string input {:preset :termination-safe})\n      (catch js/Error e\n        (js/console.error \"[parse hiccup error]\" e) input))))\n\n(defn ^:export install-plugin-hook\n  [pid hook]\n  (state/install-plugin-hook pid hook))\n\n(defn ^:export uninstall-plugin-hook\n  [pid hook-or-all]\n  (state/uninstall-plugin-hook pid hook-or-all))\n\n(defn ^:export should-exec-plugin-hook\n  [pid hook]\n  (let [hooks (:plugin/installed-hooks @state/state)]\n    (or (nil? (seq hooks))\n        (contains? (get hooks hook) (keyword pid)))))\n\n;; base\n(defn ^:export get_state_from_store\n  [^js path]\n  (when-let [path (if (string? path) [path] (bean/->clj path))]\n    (->> path\n         (map #(if (string/starts-with? % \"@\")\n                 (subs % 1)\n                 (keyword %)))\n         (get-in @state/state))))\n\n(defn ^:export get_app_info\n  ;; get app base info\n  []\n  (bean/->js\n    (normalize-keyword-for-json\n      {:version fv/version})))\n\n(def ^:export get_user_configs\n  (fn []\n    (bean/->js\n      (normalize-keyword-for-json\n        {:preferred-language    (:preferred-language @state/state)\n         :preferred-theme-mode  (:ui/theme @state/state)\n         :preferred-format      (state/get-preferred-format)\n         :preferred-workflow    (state/get-preferred-workflow)\n         :preferred-todo        (state/get-preferred-todo)\n         :preferred-date-format (state/get-date-formatter)\n         :preferred-start-of-week (state/get-start-of-week)\n         :current-graph         (state/get-current-repo)\n         :show-brackets         (state/show-brackets?)\n         :me                    (state/get-me)}))))\n\n(def ^:export get_current_graph\n  (fn []\n    (when-let [repo (state/get-current-repo)]\n      (when-not (= config/local-repo repo)\n        (bean/->js {:url  repo\n                    :name (util/node-path.basename repo)\n                    :path (config/get-repo-dir repo)})))))\n\n(def ^:export show_themes\n  (fn []\n    (plugins/open-select-theme!)))\n\n(def ^:export set_theme_mode\n  (fn [mode]\n    (state/set-theme-mode! mode)))\n\n(def ^:export load_plugin_config\n  (fn [path]\n    (fs/read-file \"\" (util/node-path.join path \"package.json\"))))\n\n(def ^:export load_plugin_readme\n  (fn [path]\n    (fs/read-file \"\" (util/node-path.join path \"readme.md\"))))\n\n(def ^:export save_plugin_config\n  (fn [path ^js data]\n    (let [repo \"\"\n          path (util/node-path.join path \"package.json\")]\n      (fs/write-file! repo \"\" path (js/JSON.stringify data nil 2) {:skip-compare? true}))))\n\n(defn ^:private write_dotdir_file\n  [file content sub-root]\n  (p/let [repo \"\"\n          path (plugin-handler/get-ls-dotdir-root)\n          path (util/node-path.join path sub-root)\n          exist? (fs/file-exists? path \"\")\n          _ (when-not exist? (fs/mkdir-recur! path))\n          user-path (util/node-path.join path file)\n          sub-dir? (string/starts-with? user-path path)\n          _ (when-not sub-dir?\n              (log/info :debug user-path)\n              (throw \"write file denied\"))\n          user-path-root (util/node-path.dirname user-path)\n          exist? (fs/file-exists? user-path-root \"\")\n          _ (when-not exist? (fs/mkdir-recur! user-path-root))\n          _ (fs/write-file! repo \"\" user-path content {:skip-compare? true})]\n    user-path))\n\n(defn ^:private read_dotdir_file\n  [file sub-root]\n  (p/let [path (plugin-handler/get-ls-dotdir-root)\n          path (util/node-path.join path sub-root)\n          user-path (util/node-path.join path file)\n          sub-dir? (string/starts-with? user-path path)\n          _ (when-not sub-dir? (log/info :debug user-path) (throw \"read file denied\"))\n          exist? (fs/file-exists? \"\" user-path)\n          _ (when-not exist? (log/info :debug user-path) (throw \"file not existed\"))\n          content (fs/read-file \"\" user-path)]\n    content))\n\n(defn ^:private unlink_dotdir_file!\n  [file sub-root]\n  (p/let [repo \"\"\n          path (plugin-handler/get-ls-dotdir-root)\n          path (util/node-path.join path sub-root)\n          user-path (util/node-path.join path file)\n          sub-dir? (string/starts-with? user-path path)\n          _ (when-not sub-dir? (log/info :debug user-path) (throw \"access file denied\"))\n          exist? (fs/file-exists? \"\" user-path)\n          _ (when-not exist? (log/info :debug user-path) (throw \"file not existed\"))\n          _ (fs/unlink! repo user-path {})]))\n\n(def ^:export write_user_tmp_file\n  (fn [file content]\n    (write_dotdir_file file content \"tmp\")))\n\n(def ^:export write_plugin_storage_file\n  (fn [plugin-id file content]\n    (write_dotdir_file\n      file content\n      (let [plugin-id (util/node-path.basename plugin-id)]\n        (util/node-path.join \"storages\" plugin-id)))))\n\n(def ^:export read_plugin_storage_file\n  (fn [plugin-id file]\n    (let [plugin-id (util/node-path.basename plugin-id)]\n      (read_dotdir_file\n        file (util/node-path.join \"storages\" plugin-id)))))\n\n(def ^:export unlink_plugin_storage_file\n  (fn [plugin-id file]\n    (let [plugin-id (util/node-path.basename plugin-id)]\n      (unlink_dotdir_file!\n        file (util/node-path.join \"storages\" plugin-id)))))\n\n(def ^:export exist_plugin_storage_file\n  (fn [plugin-id file]\n    (p/let [root (plugin-handler/get-ls-dotdir-root)\n            plugin-id (util/node-path.basename plugin-id)\n            exist? (fs/file-exists?\n                     (util/node-path.join root \"storages\" plugin-id)\n                     file)]\n      exist?)))\n\n(def ^:export clear_plugin_storage_files\n  (fn [plugin-id]\n    (p/let [root (plugin-handler/get-ls-dotdir-root)\n            plugin-id (util/node-path.basename plugin-id)]\n      (fs/rmdir! (util/node-path.join root \"storages\" plugin-id)))))\n\n(def ^:export load_user_preferences\n  (fn []\n    (p/let [repo \"\"\n            path (plugin-handler/get-ls-dotdir-root)\n            path (util/node-path.join path \"preferences.json\")\n            _ (fs/create-if-not-exists repo \"\" path)\n            json (fs/read-file \"\" path)\n            json (if (string/blank? json) \"{}\" json)]\n      (js/JSON.parse json))))\n\n(def ^:export save_user_preferences\n  (fn [^js data]\n    (when data\n      (p/let [repo \"\"\n              path (plugin-handler/get-ls-dotdir-root)\n              path (util/node-path.join path \"preferences.json\")]\n             (fs/write-file! repo \"\" path (js/JSON.stringify data nil 2) {:skip-compare? true})))))\n\n(def ^:export load_plugin_user_settings\n  ;; results [path data]\n  (plugin-handler/make-fn-to-load-dotdir-json \"settings\" \"{}\"))\n\n(def ^:export save_plugin_user_settings\n  (fn [key ^js data]\n    ((plugin-handler/make-fn-to-save-dotdir-json \"settings\")\n     key (js/JSON.stringify data nil 2))))\n\n(def ^:export unlink_plugin_user_settings\n  (plugin-handler/make-fn-to-unlink-dotdir-json \"settings\"))\n\n(def ^:export register_plugin_slash_command\n  (fn [pid ^js cmd-actions]\n    (when-let [[cmd actions] (bean/->clj cmd-actions)]\n      (plugin-handler/register-plugin-slash-command\n        pid [cmd (mapv #(into [(keyword (first %))]\n                              (rest %)) actions)]))))\n\n(def ^:export register_plugin_simple_command\n  (fn [pid ^js cmd-action palette?]\n    (when-let [[cmd action] (bean/->clj cmd-action)]\n      (let [action (assoc action 0 (keyword (first action)))\n            cmd (assoc cmd :key (string/replace (:key cmd) \":\" \"-\"))\n            key (:key cmd)\n            keybinding (:keybinding cmd)\n            palette-cmd (and palette? (plugin-handler/simple-cmd->palette-cmd pid cmd action))\n            action' #(state/pub-event! [:exec-plugin-cmd {:type type :key key :pid pid :cmd cmd :action action}])]\n\n        ;; handle simple commands\n        (plugin-handler/register-plugin-simple-command pid cmd action)\n\n        ;; handle palette commands\n        (when palette?\n          (palette-handler/register palette-cmd))\n\n        ;; handle keybinding commands\n        (when-let [shortcut-args (and keybinding (plugin-handler/simple-cmd-keybinding->shortcut-args pid key keybinding))]\n          (let [dispatch-cmd (fn [_e]\n                               (if palette?\n                                 (palette-handler/invoke-command palette-cmd)\n                                 (action')))\n                [handler-id id shortcut-map] (update shortcut-args 2 assoc :fn dispatch-cmd)]\n            (js/console.debug :shortcut/register-shortcut [handler-id id shortcut-map])\n            (st/register-shortcut! handler-id id shortcut-map)))))))\n\n(defn ^:export unregister_plugin_simple_command\n  [pid]\n  ;; remove simple commands\n  (plugin-handler/unregister-plugin-simple-command pid)\n\n  ;; remove palette commands\n  (let [palette-matched (->> (palette-handler/get-commands)\n                             (filter #(string/includes? (str (:id %)) (str \"plugin.\" pid))))]\n    (when (seq palette-matched)\n      (doseq [cmd palette-matched]\n        (palette-handler/unregister (:id cmd))\n        ;; remove keybinding commands\n        (when (seq (:shortcut cmd))\n          (js/console.debug :shortcut/unregister-shortcut cmd)\n          (st/unregister-shortcut! (:handler-id cmd) (:id cmd)))))))\n\n(def ^:export register_plugin_ui_item\n  (fn [pid type ^js opts]\n    (when-let [opts (bean/->clj opts)]\n      (plugin-handler/register-plugin-ui-item\n        pid (assoc opts :type type)))))\n\n;; app\n(def ^:export relaunch\n  (fn []\n    (ipc/ipc \"relaunchApp\")))\n\n(def ^:export quit\n  (fn []\n    (ipc/ipc \"quitApp\")))\n\n(def ^:export open_external_link\n  (fn [url]\n    (when (re-find #\"https?://\" url)\n      (js/apis.openExternal url))))\n\n(def ^:export invoke_external_command\n  (fn [type & args]\n    (when-let [id (and (string/starts-with? type \"logseq.\")\n                       (-> (string/replace type #\"^logseq.\" \"\")\n                           (util/safe-lower-case)\n                           (keyword)))]\n      (when-let [action (get-in (palette-handler/get-commands-unique) [id :action])]\n        (apply action args)))))\n\n;; flag - boolean | 'toggle'\n(def ^:export set_left_sidebar_visible\n  (fn [flag]\n    (if (= flag \"toggle\")\n      (state/toggle-left-sidebar!)\n      (state/set-state! :ui/left-sidebar-open? (boolean flag)))\n    nil))\n\n;; flag - boolean | 'toggle'\n(def ^:export set_right_sidebar_visible\n  (fn [flag]\n    (if (= flag \"toggle\")\n      (state/toggle-sidebar-open?!)\n      (state/set-state! :ui/sidebar-open? (boolean flag)))\n    nil))\n\n(def ^:export push_state\n  (fn [^js k ^js params ^js query]\n    (rfe/push-state\n      (keyword k)\n      (bean/->clj params)\n      (bean/->clj query))))\n\n(def ^:export replace_state\n  (fn [^js k ^js params ^js query]\n    (rfe/replace-state\n      (keyword k)\n      (bean/->clj params)\n      (bean/->clj query))))\n\n;; editor\n(def ^:export check_editing\n  (fn []\n    (if (state/get-edit-input-id)\n      (str (:block/uuid (state/get-edit-block))) false)))\n\n(def ^:export exit_editing_mode\n  (fn [select?]\n    (editor-handler/escape-editing select?)\n    nil))\n\n(def ^:export insert_at_editing_cursor\n  (fn [content]\n    (when-let [input-id (state/get-edit-input-id)]\n      (commands/simple-insert! input-id content {})\n      (.focus (gdom/getElement input-id)))))\n\n(def ^:export restore_editing_cursor\n  (fn []\n    (when-let [input-id (state/get-edit-input-id)]\n      (.focus (gdom/getElement input-id)))))\n\n(def ^:export get_editing_cursor_position\n  (fn []\n    (when-let [input-id (state/get-edit-input-id)]\n      (bean/->js (normalize-keyword-for-json (cursor/get-caret-pos (gdom/getElement input-id)))))))\n\n(def ^:export get_editing_block_content\n  (fn []\n    (state/get-edit-content)))\n\n(def ^:export get_selected_blocks\n  (fn []\n    (when-let [blocks (and (state/in-selection-mode?)\n                           (seq (state/get-selection-blocks)))]\n      (let [blocks (->> blocks\n                        (map (fn [^js el] (some-> (.getAttribute el \"blockid\")\n                                                  (db-model/query-block-by-uuid)))))]\n        (bean/->js (normalize-keyword-for-json blocks))))))\n\n(def ^:export get_current_page\n  (fn []\n    (when-let [page (state/get-current-page)]\n      (when-let [page (db-model/get-page page)]\n        (bean/->js (normalize-keyword-for-json (db-utils/pull (:db/id page))))))))\n\n(def ^:export get_page\n  (fn [id-or-page-name]\n    (when-let [page (cond\n                      (number? id-or-page-name) (db-utils/pull id-or-page-name)\n                      (string? id-or-page-name) (db-model/get-page id-or-page-name))]\n      (when-not (contains? page :block/left)\n        (bean/->js (normalize-keyword-for-json (db-utils/pull (:db/id page))))))))\n\n(def ^:export get_all_pages\n  (fn [repo]\n    (let [pages (page-handler/get-all-pages repo)]\n      (bean/->js (normalize-keyword-for-json pages)))))\n\n(def ^:export create_page\n  (fn [name ^js properties ^js opts]\n    (some-> (if-let [page (db-model/get-page name)]\n              page\n              (let [properties (bean/->clj properties)\n                    {:keys [redirect createFirstBlock format journal]} (bean/->clj opts)\n                    name (page-handler/create!\n                           name\n                           {:redirect?           (if (boolean? redirect) redirect true)\n                            :journal?            journal\n                            :create-first-block? (if (boolean? createFirstBlock) createFirstBlock true)\n                            :format              format\n                            :properties          properties})]\n                (db-model/get-page name)))\n            (:db/id)\n            (db-utils/pull)\n            (normalize-keyword-for-json)\n            (bean/->js))))\n\n(def ^:export delete_page\n  (fn [name]\n    (p/create (fn [ok] (page-handler/delete! name ok)))))\n\n(def ^:export rename_page\n  page-handler/rename!)\n\n(defn ^:export open_in_right_sidebar\n  [block-uuid]\n  (editor-handler/open-block-in-sidebar! (uuid block-uuid)))\n\n(def ^:export edit_block\n  (fn [block-uuid ^js opts]\n    (when-let [block-uuid (and block-uuid (uuid block-uuid))]\n      (when-let [block (db-model/query-block-by-uuid block-uuid)]\n        (let [{:keys [pos] :or {pos :max}} (bean/->clj opts)]\n          (editor-handler/edit-block! block pos block-uuid))))))\n\n(def ^:export insert_block\n  (fn [block-uuid-or-page-name content ^js opts]\n    (let [{:keys [before sibling isPageBlock properties]} (bean/->clj opts)\n          page-name (and isPageBlock block-uuid-or-page-name)\n          block-uuid (if isPageBlock nil (uuid block-uuid-or-page-name))\n          block-uuid' (if (and (not sibling) before block-uuid)\n                        (let [block (db/entity [:block/uuid block-uuid])\n                              first-child (db-model/get-by-parent-&-left (db/get-db)\n                                                                         (:db/id block)\n                                                                         (:db/id block))]\n                          (if first-child\n                            (:block/uuid first-child)\n                            block-uuid))\n                        block-uuid)\n          insert-at-first-child? (not= block-uuid' block-uuid)\n          [sibling? before?] (if insert-at-first-child?\n                               [true true]\n                               [sibling before])\n          before? (if (and (false? sibling?) before? (not insert-at-first-child?))\n                    false\n                    before?)\n          new-block (editor-handler/api-insert-new-block!\n                      content\n                      {:block-uuid block-uuid'\n                       :sibling?   sibling?\n                       :before?    before?\n                       :page       page-name\n                       :properties properties})]\n      (bean/->js (normalize-keyword-for-json new-block)))))\n\n(def ^:export insert_batch_block\n  (fn [block-uuid ^js batch-blocks ^js opts]\n    (when-let [block (db-model/query-block-by-uuid block-uuid)]\n      (when-let [bb (bean/->clj batch-blocks)]\n        (let [bb (if-not (vector? bb) (vector bb) bb)\n              {:keys [sibling]} (bean/->clj opts)\n              _ (editor-handler/insert-block-tree-after-target\n                  (:db/id block) sibling bb (:block/format block))]\n          nil)))))\n\n(def ^:export remove_block\n  (fn [block-uuid ^js _opts]\n    (let [includeChildren true\n          repo (state/get-current-repo)]\n      (editor-handler/delete-block-aux!\n        {:block/uuid (uuid block-uuid) :repo repo} includeChildren)\n      nil)))\n\n(def ^:export update_block\n  (fn [block-uuid content ^js _opts]\n    (let [repo (state/get-current-repo)\n          edit-input (state/get-edit-input-id)\n          editing? (and edit-input (string/ends-with? edit-input block-uuid))]\n      (if editing?\n        (state/set-edit-content! edit-input content)\n        (editor-handler/save-block! repo (uuid block-uuid) content))\n      nil)))\n\n(def ^:export move_block\n  (fn [src-block-uuid target-block-uuid ^js opts]\n    (let [{:keys [before children]} (bean/->clj opts)\n          move-to (cond\n                    (boolean before)\n                    :top\n\n                    (boolean children)\n                    :nested\n\n                    :else\n                    nil)\n          src-block (db-model/query-block-by-uuid (uuid src-block-uuid))\n          target-block (db-model/query-block-by-uuid (uuid target-block-uuid))]\n      (editor-dnd-handler/move-blocks nil [src-block] target-block move-to) nil)))\n\n(def ^:export get_block\n  (fn [id-or-uuid ^js opts]\n    (when-let [block (cond\n                       (number? id-or-uuid) (db-utils/pull id-or-uuid)\n                       (string? id-or-uuid) (db-model/query-block-by-uuid id-or-uuid))]\n      (when-not (contains? block :block/name)\n        (when-let [uuid (:block/uuid block)]\n          (let [{:keys [includeChildren]} (bean/->clj opts)\n                repo (state/get-current-repo)\n                block (if includeChildren\n                        ;; nested children results\n                        (first (outliner-tree/blocks->vec-tree\n                                       (db-model/get-block-and-children repo uuid) uuid))\n                        ;; attached shallow children\n                        (assoc block :block/children\n                          (map #(list :uuid (get-in % [:data :block/uuid]))\n                            (db/get-block-immediate-children repo uuid))))]\n            (bean/->js (normalize-keyword-for-json block))))))))\n\n(def ^:export get_current_block\n  (fn [^js opts]\n    (let [block (state/get-edit-block)\n          block (or block (some-> (first (state/get-selection-blocks))\n                            (.getAttribute \"blockid\")\n                            (db-model/get-block-by-uuid)))]\n      (get_block (:db/id block) opts))))\n\n(def ^:export get_previous_sibling_block\n  (fn [block-uuid]\n    (when-let [block (db-model/query-block-by-uuid block-uuid)]\n      (let [{:block/keys [parent left]} block\n            block (when-not (= parent left) (db-utils/pull (:db/id left)))]\n        (and block (bean/->js (normalize-keyword-for-json block)))))))\n\n(def ^:export get_next_sibling_block\n  (fn [block-uuid]\n    (when-let [block (db-model/query-block-by-uuid block-uuid)]\n      (when-let [right-siblings (outliner/get-right-siblings (outliner/->Block block))]\n        (bean/->js (normalize-keyword-for-json (:data (first right-siblings))))))))\n\n(def ^:export set_block_collapsed\n  (fn [block-uuid ^js opts]\n    (when-let [block (db-model/get-block-by-uuid block-uuid)]\n      (let [opts       (bean/->clj opts)\n            opts       (if (or (string? opts) (boolean? opts)) {:flag opts} opts)\n            {:keys [flag]} opts\n            block-uuid (uuid block-uuid)\n            flag       (if (= \"toggle\" flag)\n                         (not (util/collapsed? block))\n                         (boolean flag))]\n        (if flag (editor-handler/collapse-block! block-uuid)\n          (editor-handler/expand-block! block-uuid))\n        nil))))\n\n(def ^:export upsert_block_property\n  (fn [block-uuid key value]\n    (editor-handler/set-block-property! (uuid block-uuid) key value)))\n\n(def ^:export remove_block_property\n  (fn [block-uuid key]\n    (editor-handler/remove-block-property! (uuid block-uuid) key)))\n\n(def ^:export get_block_property\n  (fn [block-uuid key]\n    (when-let [block (db-model/query-block-by-uuid block-uuid)]\n      (get (:block/properties block) (keyword key)))))\n\n(def ^:export get_block_properties\n  (fn [block-uuid]\n    (when-let [block (db-model/query-block-by-uuid block-uuid)]\n      (bean/->js (normalize-keyword-for-json (:block/properties block))))))\n\n(def ^:export get_current_page_blocks_tree\n  (fn []\n    (when-let [page (state/get-current-page)]\n      (let [blocks (db-model/get-page-blocks-no-cache page)\n            blocks (outliner-tree/blocks->vec-tree blocks page)\n            ;; clean key\n            blocks (normalize-keyword-for-json blocks)]\n        (bean/->js blocks)))))\n\n(def ^:export get_page_blocks_tree\n  (fn [page-name]\n    (when-let [_ (db-model/get-page page-name)]\n      (let [blocks (db-model/get-page-blocks-no-cache page-name)\n            blocks (outliner-tree/blocks->vec-tree blocks page-name)\n            blocks (normalize-keyword-for-json blocks)]\n        (bean/->js blocks)))))\n\n(defn ^:export get_page_linked_references\n  [page-name-or-uuid]\n  (when-let [page (and page-name-or-uuid (db-model/get-page page-name-or-uuid))]\n    (let [page-name (:block/name page)\n          ref-blocks (if page-name\n                       (db-model/get-page-referenced-blocks page-name)\n                       (db-model/get-block-referenced-blocks (:block/uuid page)))\n          ref-blocks (and (seq ref-blocks) (into [] ref-blocks))]\n      (bean/->js (normalize-keyword-for-json ref-blocks)))))\n\n(defn ^:export get_pages_from_namespace\n  [ns]\n  (when-let [repo (and ns (state/get-current-repo))]\n    (when-let [pages (db-model/get-namespace-pages repo ns)]\n      (bean/->js (normalize-keyword-for-json pages)))))\n\n(defn ^:export get_pages_tree_from_namespace\n  [ns]\n  (when-let [repo (and ns (state/get-current-repo))]\n    (when-let [pages (db-model/get-namespace-hierarchy repo ns)]\n      (bean/->js (normalize-keyword-for-json pages)))))\n\n(defn first-child-of-block\n  [block]\n  (when-let [children (:block/_parent block)]\n    (first (db-model/sort-by-left children block))))\n\n(defn second-child-of-block\n  [block]\n  (when-let [children (:block/_parent block)]\n    (second (db-model/sort-by-left children block))))\n\n(defn last-child-of-block\n  [block]\n  (when-let [children (:block/_parent block)]\n    (last (db-model/sort-by-left children block))))\n\n(defn ^:export prepend_block_in_page\n  [uuid-or-page-name content ^js opts]\n  (let [page? (not (util/uuid-string? uuid-or-page-name))\n        page-not-exist? (and page? (nil? (db-model/get-page uuid-or-page-name)))\n        _ (and page-not-exist? (page-handler/create! uuid-or-page-name\n                                 {:redirect? false\n                                  :create-first-block? true\n                                  :format (state/get-preferred-format)}))]\n    (when-let [block (db-model/get-page uuid-or-page-name)]\n      (let [block'   (if page? (second-child-of-block block) (first-child-of-block block))\n            sibling? (and page? (not (nil? block')))\n            opts     (bean/->clj opts)\n            opts     (merge opts {:isPageBlock (and page? (not sibling?)) :sibling sibling? :before sibling?})\n            src      (if sibling? (str (:block/uuid block')) uuid-or-page-name)]\n        (insert_block src content (bean/->js opts))))))\n\n(defn ^:export append_block_in_page\n  [uuid-or-page-name content ^js opts]\n  (let [page? (not (util/uuid-string? uuid-or-page-name))\n        page-not-exist? (and page? (nil? (db-model/get-page uuid-or-page-name)))\n        _ (and page-not-exist? (page-handler/create! uuid-or-page-name\n                                 {:redirect? false\n                                  :create-first-block? true\n                                  :format (state/get-preferred-format)}))]\n    (when-let [block (db-model/get-page uuid-or-page-name)]\n      (let [block'   (last-child-of-block block)\n            sibling? (not (nil? block'))\n            opts     (bean/->clj opts)\n            opts     (merge opts {:isPageBlock (and page? (not sibling?)) :sibling sibling?}\n                       (when sibling? {:before false}))\n            src      (if sibling? (str (:block/uuid block')) uuid-or-page-name)]\n        (insert_block src content (bean/->js opts))))))\n\n;; plugins\n(def ^:export __install_plugin\n  (fn [^js manifest]\n    (when-let [{:keys [repo id] :as mft} (bean/->clj manifest)]\n      (if-not (and repo id)\n        (throw (js/Error. \"[required] :repo :id\"))\n        (plugin-handler/install-marketplace-plugin mft)))))\n\n;; db\n(defn ^:export q\n  [query-string]\n  (when-let [repo (state/get-current-repo)]\n    (when-let [result (query-dsl/query repo query-string)]\n      (bean/->js (normalize-keyword-for-json (flatten @result))))))\n\n(defn ^:export datascript_query\n  [query & inputs]\n  (when-let [repo (state/get-current-repo)]\n    (when-let [db (db/get-db repo)]\n      (let [query (cljs.reader/read-string query)\n            resolved-inputs (map (comp query-react/resolve-input cljs.reader/read-string) inputs)\n            result (apply d/q query db resolved-inputs)]\n        (clj->js result)))))\n\n(def ^:export custom_query db/custom-query)\n\n(defn ^:export download_graph_db\n  []\n  (when-let [repo (state/get-current-repo)]\n    (when-let [db (db/get-db repo)]\n      (let [db-str (if db (db/db->string db) \"\")\n            data-str (str \"data:text/edn;charset=utf-8,\" (js/encodeURIComponent db-str))]\n        (when-let [anchor (gdom/getElement \"download\")]\n          (.setAttribute anchor \"href\" data-str)\n          (.setAttribute anchor \"download\" (str (string/replace repo \"/\" \" \") \".transit\"))\n          (.click anchor))))))\n\n(defn ^:export download_graph_pages\n  []\n  (when-let [repo (state/get-current-repo)]\n    (export-handler/export-repo-as-zip! repo)))\n\n(defn ^:export exec_git_command\n  [^js args]\n  (when-let [args (and args (seq (bean/->clj args)))]\n    (shell/run-git-command! args)))\n\n;; git\n(defn ^:export git_exec_command\n  [^js args]\n  (when-let [args (and args (seq (bean/->clj args)))]\n    (shell/run-git-command2! args)))\n\n(defn ^:export git_load_ignore_file\n  []\n  (when-let [repo (state/get-current-repo)]\n    (p/let [file \".gitignore\"\n            dir (config/get-repo-dir repo)\n            _ (fs/create-if-not-exists repo dir file)\n            content (fs/read-file dir file)]\n           content)))\n\n(defn ^:export git_save_ignore_file\n  [content]\n  (when-let [repo (and (string? content) (state/get-current-repo))]\n    (p/let [file \".gitignore\"\n            dir (config/get-repo-dir repo)\n            _ (fs/write-file! repo dir file content {:skip-compare? true})])))\n\n;; ui\n(defn ^:export show_msg\n  ([content] (show_msg content :success nil))\n  ([content status] (show_msg content status nil))\n  ([content status ^js opts]\n   (let [{:keys [key timeout]} (bean/->clj opts)\n         hiccup? (and (string? content) (string/starts-with? (string/triml content) \"[:\"))\n         content (if hiccup? (parse-hiccup-ui content) content)\n         uid (when (string? key) (keyword key))\n         clear? (not= timeout 0)\n         key' (notification/show! content (keyword status) clear? uid timeout)]\n     (name key'))))\n\n(defn ^:export ui_show_msg\n  [& args]\n  (apply show_msg args))\n\n(defn ^:export ui_close_msg\n  [key]\n  (when (string? key)\n    (notification/clear! (keyword key)) nil))\n\n;; assets\n(defn ^:export assets_list_files_of_current_graph\n  [^js exts]\n  (p/let [files (ipc/ipc :getAssetsFiles {:exts exts})]\n         (bean/->js files)))\n\n;; experiments\n(defn ^:export exper_load_scripts\n  [pid & scripts]\n  (when-let [^js _pl (plugin-handler/get-plugin-inst pid)]\n    (doseq [s scripts\n            :let [upt-status #(state/upt-plugin-resource pid :scripts s :status %)\n                  init? (plugin-handler/register-plugin-resources pid :scripts {:key s :src s})]]\n      (when init?\n        (p/catch\n          (p/then\n            (do\n              (upt-status :pending)\n              (loader/load s nil {:attributes {:data-ref (name pid)}}))\n            #(upt-status :done))\n          #(upt-status :error))))))\n\n(defn ^:export exper_register_fenced_code_renderer\n  [pid type ^js opts]\n  (when-let [^js _pl (plugin-handler/get-plugin-inst pid)]\n    (plugin-handler/register-fenced-code-renderer\n      (keyword pid) type (reduce #(assoc %1 %2 (aget opts (name %2))) {}\n                                 [:edit :before :subs :render]))))\n\n(defn ^:export exper_register_extensions_enhancer\n  [pid type enhancer]\n  (when-let [^js _pl (and (fn? enhancer) (plugin-handler/get-plugin-inst pid))]\n    (plugin-handler/register-extensions-enhancer\n      (keyword pid) type {:enhancer enhancer})))\n\n;; helpers\n(defn ^:export query_element_by_id\n  [id]\n  (when-let [^js el (gdom/getElement id)]\n    (if el (str (.-tagName el) \"#\" id) false)))\n\n(defn ^:export query_element_rect\n  [selector]\n  (when-let [^js el (js/document.querySelector selector)]\n    (bean/->js (.toJSON (.getBoundingClientRect el)))))\n\n(defn ^:export set_focused_settings\n  [pid]\n  (when-let [plugin (state/get-plugin-by-id pid)]\n    (state/set-state! :plugin/focused-settings pid)\n    (state/pub-event! [:go/plugins-settings pid false (or (:name plugin) (:title plugin))])))\n\n(defn ^:export force_save_graph\n  []\n  (p/let [_ (el/persist-dbs!)]\n         true))\n\n(defn ^:export __debug_state\n  [path]\n  (-> (if (string? path)\n        (get @state/state (keyword path))\n        @state/state)\n      (bean/->js)))\n"]}