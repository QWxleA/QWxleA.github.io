{
"version":3,
"file":"module$node_modules$codemirror$mode$webidl$webidl.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/codemirror/mode/webidl/webidl.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$webidl$webidl\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n};\n\nvar builtinArray = [\n  \"Clamp\",\n  \"Constructor\",\n  \"EnforceRange\",\n  \"Exposed\",\n  \"ImplicitThis\",\n  \"Global\", \"PrimaryGlobal\",\n  \"LegacyArrayClass\",\n  \"LegacyUnenumerableNamedProperties\",\n  \"LenientThis\",\n  \"NamedConstructor\",\n  \"NewObject\",\n  \"NoInterfaceObject\",\n  \"OverrideBuiltins\",\n  \"PutForwards\",\n  \"Replaceable\",\n  \"SameObject\",\n  \"TreatNonObjectAsNull\",\n  \"TreatNullAs\",\n    \"EmptyString\",\n  \"Unforgeable\",\n  \"Unscopeable\"\n];\nvar builtins = wordRegexp(builtinArray);\n\nvar typeArray = [\n  \"unsigned\", \"short\", \"long\",                  // UnsignedIntegerType\n  \"unrestricted\", \"float\", \"double\",            // UnrestrictedFloatType\n  \"boolean\", \"byte\", \"octet\",                   // Rest of PrimitiveType\n  \"Promise\",                                    // PromiseType\n  \"ArrayBuffer\", \"DataView\", \"Int8Array\", \"Int16Array\", \"Int32Array\",\n  \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\",\n  \"Float32Array\", \"Float64Array\",               // BufferRelatedType\n  \"ByteString\", \"DOMString\", \"USVString\", \"sequence\", \"object\", \"RegExp\",\n  \"Error\", \"DOMException\", \"FrozenArray\",       // Rest of NonAnyType\n  \"any\",                                        // Rest of SingleType\n  \"void\"                                        // Rest of ReturnType\n];\nvar types = wordRegexp(typeArray);\n\nvar keywordArray = [\n  \"attribute\", \"callback\", \"const\", \"deleter\", \"dictionary\", \"enum\", \"getter\",\n  \"implements\", \"inherit\", \"interface\", \"iterable\", \"legacycaller\", \"maplike\",\n  \"partial\", \"required\", \"serializer\", \"setlike\", \"setter\", \"static\",\n  \"stringifier\", \"typedef\",                     // ArgumentNameKeyword except\n                                                // \"unrestricted\"\n  \"optional\", \"readonly\", \"or\"\n];\nvar keywords = wordRegexp(keywordArray);\n\nvar atomArray = [\n  \"true\", \"false\",                              // BooleanLiteral\n  \"Infinity\", \"NaN\",                            // FloatLiteral\n  \"null\"                                        // Rest of ConstValue\n];\nvar atoms = wordRegexp(atomArray);\n\nCodeMirror.registerHelper(\"hintWords\", \"webidl\",\n    builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray));\n\nvar startDefArray = [\"callback\", \"dictionary\", \"enum\", \"interface\"];\nvar startDefs = wordRegexp(startDefArray);\n\nvar endDefArray = [\"typedef\"];\nvar endDefs = wordRegexp(endDefArray);\n\nvar singleOperators = /^[:<=>?]/;\nvar integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;\nvar floats = /^-?(([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;\nvar identifiers = /^_?[A-Za-z][0-9A-Z_a-z-]*/;\nvar identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\\s*;)/;\nvar strings = /^\"[^\"]*\"/;\nvar multilineComments = /^\\/\\*.*?\\*\\//;\nvar multilineCommentsStart = /^\\/\\*.*/;\nvar multilineCommentsEnd = /^.*?\\*\\//;\n\nfunction readToken(stream, state) {\n  // whitespace\n  if (stream.eatSpace()) return null;\n\n  // comment\n  if (state.inComment) {\n    if (stream.match(multilineCommentsEnd)) {\n      state.inComment = false;\n      return \"comment\";\n    }\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(\"//\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  if (stream.match(multilineComments)) return \"comment\";\n  if (stream.match(multilineCommentsStart)) {\n    state.inComment = true;\n    return \"comment\";\n  }\n\n  // integer and float\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    if (stream.match(integers) || stream.match(floats)) return \"number\";\n  }\n\n  // string\n  if (stream.match(strings)) return \"string\";\n\n  // identifier\n  if (state.startDef && stream.match(identifiers)) return \"def\";\n\n  if (state.endDef && stream.match(identifiersEnd)) {\n    state.endDef = false;\n    return \"def\";\n  }\n\n  if (stream.match(keywords)) return \"keyword\";\n\n  if (stream.match(types)) {\n    var lastToken = state.lastToken;\n    var nextToken = (stream.match(/^\\s*(.+?)\\b/, false) || [])[1];\n\n    if (lastToken === \":\" || lastToken === \"implements\" ||\n        nextToken === \"implements\" || nextToken === \"=\") {\n      // Used as identifier\n      return \"builtin\";\n    } else {\n      // Used as type\n      return \"variable-3\";\n    }\n  }\n\n  if (stream.match(builtins)) return \"builtin\";\n  if (stream.match(atoms)) return \"atom\";\n  if (stream.match(identifiers)) return \"variable\";\n\n  // other\n  if (stream.match(singleOperators)) return \"operator\";\n\n  // unrecognized\n  stream.next();\n  return null;\n};\n\nCodeMirror.defineMode(\"webidl\", function() {\n  return {\n    startState: function() {\n      return {\n        // Is in multiline comment\n        inComment: false,\n        // Last non-whitespace, matched token\n        lastToken: \"\",\n        // Next token is a definition\n        startDef: false,\n        // Last token of the statement is a definition\n        endDef: false\n      };\n    },\n    token: function(stream, state) {\n      var style = readToken(stream, state);\n\n      if (style) {\n        var cur = stream.current();\n        state.lastToken = cur;\n        if (style === \"keyword\") {\n          state.startDef = startDefs.test(cur);\n          state.endDef = state.endDef || endDefs.test(cur);\n        } else {\n          state.startDef = false;\n        }\n      }\n\n      return style;\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-webidl\", \"webidl\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","wordRegexp","words","RegExp","join","readToken","stream","state","eatSpace","inComment","match","multilineCommentsEnd","skipToEnd","multilineComments","multilineCommentsStart","integers","floats","strings","startDef","identifiers","endDef","identifiersEnd","keywords","types","lastToken","nextToken","builtins","atoms","singleOperators","next","builtinArray","typeArray","keywordArray","atomArray","registerHelper","concat","startDefs","startDefArray","endDefs","endDefArray","defineMode","startState","token","style","cur","current","test","defineMIME"]
}
