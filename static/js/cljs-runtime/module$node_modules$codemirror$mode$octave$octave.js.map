{
"version":3,
"file":"module$node_modules$codemirror$mode$octave$octave.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/codemirror/mode/octave/octave.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$octave$octave\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"octave\", function() {\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/&|\\\\^~<>!@'\\\\\\\\]\");\n  var singleDelimiters = new RegExp('^[\\\\(\\\\[\\\\{\\\\},:=;\\\\.]');\n  var doubleOperators = new RegExp(\"^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\\\.[\\\\+\\\\-\\\\*/\\\\^\\\\\\\\]))\");\n  var doubleDelimiters = new RegExp(\"^((!=)|(\\\\+=)|(\\\\-=)|(\\\\*=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n  var tripleDelimiters = new RegExp(\"^((>>=)|(<<=))\");\n  var expressionEnd = new RegExp(\"^[\\\\]\\\\)]\");\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  var builtins = wordRegexp([\n    'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',\n    'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',\n    'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',\n    'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',\n    'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',\n    'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',\n    'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'\n  ]);\n\n  var keywords = wordRegexp([\n    'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',\n    'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',\n    'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',\n    'continue', 'pkg'\n  ]);\n\n\n  // tokenizers\n  function tokenTranspose(stream, state) {\n    if (!stream.sol() && stream.peek() === '\\'') {\n      stream.next();\n      state.tokenize = tokenBase;\n      return 'operator';\n    }\n    state.tokenize = tokenBase;\n    return tokenBase(stream, state);\n  }\n\n\n  function tokenComment(stream, state) {\n    if (stream.match(/^.*%}/)) {\n      state.tokenize = tokenBase;\n      return 'comment';\n    };\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n  function tokenBase(stream, state) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match('%{')){\n      state.tokenize = tokenComment;\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    if (stream.match(/^[%#]/)){\n      stream.skipToEnd();\n      return 'comment';\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {\n        stream.tokenize = tokenBase;\n        return 'number'; };\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?[ij]?/)) { return 'number'; };\n    }\n    if (stream.match(wordRegexp(['nan','NaN','inf','Inf']))) { return 'number'; };\n\n    // Handle Strings\n    var m = stream.match(/^\"(?:[^\"]|\"\")*(\"|$)/) || stream.match(/^'(?:[^']|'')*('|$)/)\n    if (m) { return m[1] ? 'string' : \"string error\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return 'keyword'; } ;\n    if (stream.match(builtins)) { return 'builtin'; } ;\n    if (stream.match(identifiers)) { return 'variable'; } ;\n\n    if (stream.match(singleOperators) || stream.match(doubleOperators)) { return 'operator'; };\n    if (stream.match(singleDelimiters) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) { return null; };\n\n    if (stream.match(expressionEnd)) {\n      state.tokenize = tokenTranspose;\n      return null;\n    };\n\n\n    // Handle non-detected items\n    stream.next();\n    return 'error';\n  };\n\n\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase\n      };\n    },\n\n    token: function(stream, state) {\n      var style = state.tokenize(stream, state);\n      if (style === 'number' || style === 'variable'){\n        state.tokenize = tokenTranspose;\n      }\n      return style;\n    },\n\n    lineComment: '%',\n\n    fold: 'indent'\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-octave\", \"octave\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","wordRegexp","words","RegExp","join","tokenTranspose","stream","state","sol","peek","next","tokenize","tokenBase","tokenComment","match","skipToEnd","eatSpace","m","keywords","builtins","identifiers","singleOperators","doubleOperators","singleDelimiters","doubleDelimiters","tripleDelimiters","expressionEnd","startState","token","style","lineComment","fold","defineMIME"]
}
