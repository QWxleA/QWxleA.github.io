{
"version":3,
"file":"module$node_modules$jszip$lib$compressedObject.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAkB3GC,QAASA,iBAAgB,CAACC,cAAD,CAAiBC,gBAAjB,CAAmCC,KAAnC,CAA0CC,WAA1C,CAAuDC,IAAvD,CAA6D,CAClF,IAAKJ,CAAAA,cAAL,CAAsBA,cACtB,KAAKC,CAAAA,gBAAL,CAAwBA,gBACxB,KAAKC,CAAAA,KAAL,CAAaA,KACb,KAAKC,CAAAA,WAAL,CAAmBA,WACnB,KAAKE,CAAAA,iBAAL,CAAyBD,IALyD,CAftF,IAAIE,SAAWV,OAAA,CAAQ,wCAAR,CAAf,CACIW,WAAaX,OAAA,CAAQ,iDAAR,CADjB,CAEIY,gBAAkBZ,OAAA,CAAQ,sDAAR,CAFtB;AAGIa,WAAab,OAAA,CAAQ,iDAAR,CACbY,gBAAJ,CAAsBZ,OAAA,CAAQ,sDAAR,CAmBtBG,iBAAiBW,CAAAA,SAAjB,CAA6B,CAKzBC,iBAAmBA,QAAS,EAAG,CAC3B,IAAIC,OACHC,CADY,IAAIN,UAAJ,CAAeD,QAASQ,CAAAA,OAAQC,CAAAA,OAAjB,CAAyB,IAAKV,CAAAA,iBAA9B,CAAf,CACZQ,EAAAA,IADY,CACP,IAAKV,CAAAA,WAAYa,CAAAA,gBAAjB,EADO,CAEZH,CAAAA,IAFY,CAEP,IAAIL,eAAJ,CAAoB,aAApB,CAFO,CAAb,CAIIS,KAAO,IACXL,OAAOM,CAAAA,EAAP,CAAU,KAAV,CAAiB,QAAS,EAAG,CACzB,GAAG,IAAKC,CAAAA,UAAL,CAAA,WAAH,GAAsCF,IAAKhB,CAAAA,gBAA3C,CACI,KAAUmB,MAAJ,CAAU,uCAAV,CAAN;AAFqB,CAA7B,CAKA,OAAOR,OAXoB,CALN,CAsBzBS,oBAAsBA,QAAS,EAAG,CAC9B,MACCC,CADM,IAAIf,UAAJ,CAAeD,QAASQ,CAAAA,OAAQC,CAAAA,OAAjB,CAAyB,IAAKV,CAAAA,iBAA9B,CAAf,CACNiB,EAAAA,cADM,CACS,gBADT,CAC2B,IAAKtB,CAAAA,cADhC,CAENsB,CAAAA,cAFM,CAES,kBAFT,CAE6B,IAAKrB,CAAAA,gBAFlC,CAGNqB,CAAAA,cAHM,CAGS,OAHT,CAGkB,IAAKpB,CAAAA,KAHvB,CAINoB,CAAAA,cAJM,CAIS,aAJT,CAIwB,IAAKnB,CAAAA,WAJ7B,CADuB,CAtBT,CAwC7BJ,iBAAiBwB,CAAAA,gBAAjB,CAAoCC,QAAS,CAACC,kBAAD,CAAqBtB,WAArB,CAAkCuB,kBAAlC,CAAsD,CAC/F,MAAOD,mBACNZ,CAAAA,IADM,CACD,IAAIJ,UADH,CAENI,CAAAA,IAFM,CAED,IAAIL,eAAJ,CAAoB,kBAApB,CAFC,CAGNK,CAAAA,IAHM,CAGDV,WAAYwB,CAAAA,cAAZ,CAA2BD,kBAA3B,CAHC,CAINb,CAAAA,IAJM,CAID,IAAIL,eAAJ,CAAoB,gBAApB,CAJC,CAKNc,CAAAA,cALM,CAKS,aALT;AAKwBnB,WALxB,CADwF,CASnGN,OAAOC,CAAAA,OAAP,CAAiBC,gBA3E0F;",
"sources":["node_modules/jszip/lib/compressedObject.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$compressedObject\"] = function(global,require,module,exports) {\n'use strict';\n\nvar external = require(\"./external\");\nvar DataWorker = require('./stream/DataWorker');\nvar DataLengthProbe = require('./stream/DataLengthProbe');\nvar Crc32Probe = require('./stream/Crc32Probe');\nvar DataLengthProbe = require('./stream/DataLengthProbe');\n\n/**\n * Represent a compressed object, with everything needed to decompress it.\n * @constructor\n * @param {number} compressedSize the size of the data compressed.\n * @param {number} uncompressedSize the size of the data after decompression.\n * @param {number} crc32 the crc32 of the decompressed file.\n * @param {object} compression the type of compression, see lib/compressions.js.\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.\n */\nfunction CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n    this.compressedSize = compressedSize;\n    this.uncompressedSize = uncompressedSize;\n    this.crc32 = crc32;\n    this.compression = compression;\n    this.compressedContent = data;\n}\n\nCompressedObject.prototype = {\n    /**\n     * Create a worker to get the uncompressed content.\n     * @return {GenericWorker} the worker.\n     */\n    getContentWorker : function () {\n        var worker = new DataWorker(external.Promise.resolve(this.compressedContent))\n        .pipe(this.compression.uncompressWorker())\n        .pipe(new DataLengthProbe(\"data_length\"));\n\n        var that = this;\n        worker.on(\"end\", function () {\n            if(this.streamInfo['data_length'] !== that.uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n        });\n        return worker;\n    },\n    /**\n     * Create a worker to get the compressed content.\n     * @return {GenericWorker} the worker.\n     */\n    getCompressedWorker : function () {\n        return new DataWorker(external.Promise.resolve(this.compressedContent))\n        .withStreamInfo(\"compressedSize\", this.compressedSize)\n        .withStreamInfo(\"uncompressedSize\", this.uncompressedSize)\n        .withStreamInfo(\"crc32\", this.crc32)\n        .withStreamInfo(\"compression\", this.compression)\n        ;\n    }\n};\n\n/**\n * Chain the given worker with other workers to compress the content with the\n * given compression.\n * @param {GenericWorker} uncompressedWorker the worker to pipe.\n * @param {Object} compression the compression object.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {GenericWorker} the new worker compressing the content.\n */\nCompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n    return uncompressedWorker\n    .pipe(new Crc32Probe())\n    .pipe(new DataLengthProbe(\"uncompressedSize\"))\n    .pipe(compression.compressWorker(compressionOptions))\n    .pipe(new DataLengthProbe(\"compressedSize\"))\n    .withStreamInfo(\"compression\", compression);\n};\n\nmodule.exports = CompressedObject;\n\n};"],
"names":["shadow$provide","global","require","module","exports","CompressedObject","compressedSize","uncompressedSize","crc32","compression","data","compressedContent","external","DataWorker","DataLengthProbe","Crc32Probe","prototype","getContentWorker","worker","pipe","Promise","resolve","uncompressWorker","that","on","streamInfo","Error","getCompressedWorker","withStreamInfo","createWorkerFrom","CompressedObject.createWorkerFrom","uncompressedWorker","compressionOptions","compressWorker"]
}
