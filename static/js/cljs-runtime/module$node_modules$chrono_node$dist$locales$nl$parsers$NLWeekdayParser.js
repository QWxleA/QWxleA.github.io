shadow$provide.module$node_modules$chrono_node$dist$locales$nl$parsers$NLWeekdayParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const constants_1=require("module$node_modules$chrono_node$dist$locales$nl$constants");global=require("module$node_modules$chrono_node$dist$utils$pattern");module=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const weeks_1=require("module$node_modules$chrono_node$dist$calculation$weeks"),
PATTERN=new RegExp("(?:(?:\\,|\\(|\\ï¼ˆ)\\s*)?(?:op\\s*?)?(?:(deze|vorige|volgende)\\s*(?:week\\s*)?)?"+`(${global.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})`+"(?\x3d\\W|$)","i");class NLWeekdayParser extends module.AbstractParserWithWordBoundaryChecking{innerPattern(){return PATTERN}innerExtract(context,match){var dayOfWeek=match[2].toLowerCase();dayOfWeek=constants_1.WEEKDAY_DICTIONARY[dayOfWeek];var postfix=match[3];match=match[1]||postfix||"";match=match.toLowerCase();postfix=null;"vorige"==
match?postfix="last":"volgende"==match?postfix="next":"deze"==match&&(postfix="this");match=weeks_1.toDayJSWeekday(context.refDate,dayOfWeek,postfix);return context.createParsingComponents().assign("weekday",dayOfWeek).imply("day",match.date()).imply("month",match.month()+1).imply("year",match.year())}}exports.default=NLWeekdayParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$nl$parsers$NLWeekdayParser.js.map
