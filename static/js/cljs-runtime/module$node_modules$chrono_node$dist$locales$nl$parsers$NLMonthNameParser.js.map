{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameParser.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,CAA8F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEtIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,OAAMC,YAAcN,OAAA,CAAQ,2DAAR,CAApB,CACMO,QAAUP,OAAA,CAAQ,wDAAR,CACVQ,OAAAA,CAAYR,OAAA,CAAQ,oDAAR,CAClB,OAAMS,YAAcT,OAAA,CAAQ,2DAAR,CACdU;OAAAA,CAAmCV,OAAA,CAAQ,oFAAR,CACzC,OAAMW,QAAU,IAAIC,MAAJ,CAAY,IAAGJ,MAAUK,CAAAA,eAAV,CAA0BP,WAAYQ,CAAAA,gBAAtC,CAAH,GAAZ,CACX,SADW,CAGX,aAAYL,WAAYM,CAAAA,YAAxB,IAHW,CAIZ,uCAJY,CAKwB,GALxB,CAQhB,MAAMC,kBAAN,QAAgCN,QAAiCO,CAAAA,sCAAjE,CACIC,YAAY,EAAG,CACX,MAAOP,QADI,CAGfQ,YAAY,CAACC,OAAD,CAAUC,KAAV,CAAiB,CACzB,MAAMC,WAAaF,OAAQG,CAAAA,uBAAR,EACnBD,WAAWE,CAAAA,KAAX,CAAiB,KAAjB,CAAwB,CAAxB,CAEA,OAAMC;AAAQnB,WAAYQ,CAAAA,gBAAZ,CADIO,KAAAK,CATDC,CASCD,CACmCE,CAAAA,WAAV,EAA7B,CACdN,WAAWO,CAAAA,MAAX,CAAkB,OAAlB,CAA2BJ,KAA3B,CACIJ,MAAA,CAXOS,CAWP,CAAJ,EACUC,OACN,CADatB,WAAYuB,CAAAA,SAAZ,CAAsBX,KAAA,CAZ5BS,CAY4B,CAAtB,CACb,CAAAR,UAAWO,CAAAA,MAAX,CAAkB,MAAlB,CAA0BE,OAA1B,CAFJ,GAKUA,OACN,CADaxB,OAAQ0B,CAAAA,oBAAR,CAA6Bb,OAAQc,CAAAA,OAArC,CAA8C,CAA9C,CAAiDT,KAAjD,CACb,CAAAH,UAAWE,CAAAA,KAAX,CAAiB,MAAjB,CAAyBO,OAAzB,CANJ,CAQA,OAAOT,WAdkB,CAJjC,CAqBApB,OAAQiC,CAAAA,OAAR,CAAkBnB,iBArCoH;",
"sources":["node_modules/chrono-node/dist/locales/nl/parsers/NLMonthNameParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst years_1 = require(\"../../../calculation/years\");\nconst pattern_1 = require(\"../../../utils/pattern\");\nconst constants_2 = require(\"../constants\");\nconst AbstractParserWithWordBoundary_1 = require(\"../../../common/parsers/AbstractParserWithWordBoundary\");\nconst PATTERN = new RegExp(`(${pattern_1.matchAnyPattern(constants_1.MONTH_DICTIONARY)})` +\n    `\\\\s*` +\n    `(?:` +\n    `[,-]?\\\\s*(${constants_2.YEAR_PATTERN})?` +\n    \")?\" +\n    \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\", \"i\");\nconst MONTH_NAME_GROUP = 1;\nconst YEAR_GROUP = 2;\nclass NLMonthNameParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const components = context.createParsingComponents();\n        components.imply(\"day\", 1);\n        const monthName = match[MONTH_NAME_GROUP];\n        const month = constants_1.MONTH_DICTIONARY[monthName.toLowerCase()];\n        components.assign(\"month\", month);\n        if (match[YEAR_GROUP]) {\n            const year = constants_2.parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        }\n        else {\n            const year = years_1.findYearClosestToRef(context.refDate, 1, month);\n            components.imply(\"year\", year);\n        }\n        return components;\n    }\n}\nexports.default = NLMonthNameParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","constants_1","years_1","pattern_1","constants_2","AbstractParserWithWordBoundary_1","PATTERN","RegExp","matchAnyPattern","MONTH_DICTIONARY","YEAR_PATTERN","NLMonthNameParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","components","createParsingComponents","imply","month","monthName","MONTH_NAME_GROUP","toLowerCase","assign","YEAR_GROUP","year","parseYear","findYearClosestToRef","refDate","default"]
}
