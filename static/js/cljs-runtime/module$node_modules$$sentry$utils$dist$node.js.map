{
"version":3,
"file":"module$node_modules$$sentry$utils$dist$node.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0BxGC,QAASA,eAAc,CAACC,GAAD,CAAMC,OAAN,CAAe,CAElC,MAAOD,IAAIJ,CAAAA,OAAJ,CAAYK,OAAZ,CAF2B,CAzBtC,IAAIC,QAAUN,OAAA,CAAQ,qCAAR,CAKdO,OAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAAEO,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIC,MAAQV,OAAA,CAAQ,4CAAR,CAYZE,QAAQS,CAAAA,SAAR,CANAA,QAAkB,EAAG,CAGjB,MAAQ,CAACD,KAAME,CAAAA,eAAN,EAAT,EACqF,kBADrF,GACIL,MAAOM,CAAAA,SAAUC,CAAAA,QAASC,CAAAA,IAA1B,CAAkD,WAAnB,GAAA,MAAOT,QAAP,CAAiCA,OAAjC,CAA2C,CAA1E,CAJa,CAiBrBJ,QAAQC,CAAAA,cAAR;AAAyBA,cA+BzBD,QAAQc,CAAAA,UAAR,CAjBAA,QAAmB,CAACC,UAAD,CAAa,CAE5B,GAAI,CACA,IAAAb,IAAqBH,MAnBdD,CAAAA,OAAJ,CAmB0BiB,UAnB1B,CAkBH,CAGJ,MAAOC,CAAP,CAAU,EAGV,GAAI,CACA,IAAIC,IAAqBlB,MAzBlBD,CAAAA,OAAJ,CAyB8BK,SAzB9B,CAyByCc,CAAAA,GAC5Cf,IAAA,CAAMD,cAAA,CAAeF,MAAf,CAAuBkB,GAAA,EAAvB,CAA+B,gBAA/B,CAAkDF,UAAlD,CAFN,CAIJ,MAAOC,CAAP,CAAU,EAGV,MAAOd,IAfqB,CA5CwE;",
"sources":["node_modules/@sentry/utils/dist/node.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$utils$dist$node\"] = function(global,require,module,exports) {\nvar process = require('process');\n/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar env_1 = require(\"./env\");\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nfunction isNodeEnv() {\n    // explicitly check for browser bundles as those can be optimized statically\n    // by terser/rollup.\n    return (!env_1.isBrowserBundle() &&\n        Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]');\n}\nexports.isNodeEnv = isNodeEnv;\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nfunction dynamicRequire(mod, request) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return mod.require(request);\n}\nexports.dynamicRequire = dynamicRequire;\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nfunction loadModule(moduleName) {\n    var mod;\n    try {\n        mod = dynamicRequire(module, moduleName);\n    }\n    catch (e) {\n        // no-empty\n    }\n    try {\n        var cwd = dynamicRequire(module, 'process').cwd;\n        mod = dynamicRequire(module, cwd() + \"/node_modules/\" + moduleName);\n    }\n    catch (e) {\n        // no-empty\n    }\n    return mod;\n}\nexports.loadModule = loadModule;\n//# sourceMappingURL=node.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","dynamicRequire","mod","request","process","Object","defineProperty","value","env_1","isNodeEnv","isBrowserBundle","prototype","toString","call","loadModule","moduleName","e","cwd"]
}
