{"version":3,"sources":["logseq/graph_parser/block.cljc"],"mappings":";AAkBA,iDAAA,jDAAMA,0GACHC;AADH,AAEE,SACC,AAACC,wBAAQD,YACT,6CAAA,7CAACE,uDAAY,AAACC,gBAAMH;;AAEvB,oCAAA,pCAAMI,gFACHJ;AADH,AAEE,IAAAK,qBAAqB,iBAAAE,oBAAK,AAACN,wBAAQD;AAAd,AAAA,GAAAO;AAAA,IAAAA,wBACK,6CAAA,7CAACL,mDAAQ,AAACC,gBAAMH;AADrB,AAAA,GAAAO;AAEK,OAACC,iBAAOR;;AAFbO;;;AAAAA;;;AAArB,AAAA,oBAAAF;AAAA,AAAA,gBAAAA,ZAAWC;AAAX,yDAIO,AAACG,4CAAI,WAAAC,hHAML,OAACM;AANI,AAAA,IAAAL,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAME;YAAN,AAAAD,4CAAAD,WAAA,IAAA,nEAAWG;AAAX,AACE,IAAAC,WAAMF;AAAN,AAAA,QAAAE;KAAA;AACUD;;;KADV;AAES,OAAA,6FAAYA;;;KAFrB;AAGgB,OAAA,uFAAUA;;;;AAH1B;;;GAFPR;;AAHP;;;AAYF,+CAAA,/CAAOW,sGACJjB,MAAMkB;AADT,AAEE,IAAMC,OAAK,EACE,EAAK,AAAClB,wBAAQD,YAAO,6CAAA,7CAACE,oDAAS,AAACC,gBAAMH,WACtC,iBAAMoB,MAAI,AAACjB,gBAAM,AAAA,gFAAM,AAACK,iBAAOR;IACzBc,QAAM,AAACN,iBAAO,AAAA,gFAAM,AAACA,iBAAOR;AADlC,AAGE,IAAAqB,mBACC,iBAAAd,oBACC,iDAAA,jDAACL,6CAAEkB;AADJ,AAAA,GAAAb;AAAA,IAAAA,wBAEC,EAAK,OAASO,wBACT,AAACQ,cAAI,iBAAAD,mBAAI,AAACE,8CAAuBT;AAA5B,AAAA,oBAAAO;AAAAA;;AACI,OAACG,uCAAgBV;;;AAJhC,AAAA,GAAAP;AAKCO;;AALDP;;;AAAAA;;;AADD,AAAA,oBAAAc;AAAAA;;AAAA,IAAAA,uBAQC,iBAAAd,oBACC,iDAAA,jDAACL,6CAAEkB;AADJ,AAAA,GAAAb;AAAA,IAAAA,wBAEC,AAACkB,yCAAeX;AAFjB,AAAA,GAAAP;AAGC,OAACmB,oDAA2BZ;;AAH7BP;;;AAAAA;;;AARD,AAAA,oBAAAc;AAAAA;;AAAA,IAAAA,uBAaC,iBAAAd,oBACC,iDAAA,jDAACL,6CAAEkB;AADJ,AAAA,GAAAb;AAAA,IAAAA,wBAEC,GAAK,0BAAA,iFAAA,SAAA,SAAA,SAAA,tIAACoB,8JAAyB,AAACxB,gBAAMW;AAFvC,AAAA,GAAAP;AAGC,IAAMqB,MAAI,iBAAAC,WAAQ,AAACC,sCAAqBhB;AAA9B,AAAA,GAAA,CAAAe,YAAA;AAAA;;AAAA,uDAAAA,hDAAqCE;;;AAA/C,AACE,GAAM,6DAAA,8DAAA,6DAAA,tLAAK,GAAK,wCAAA,xCAACC,kCAAoBlB,wBAC1B,GAAK,wCAAA,xCAACkB,kCAAoBlB,yBAC1B,GAAK,wCAAA,xCAACkB,kCAAoBlB,wBAC1B,AAACQ,cAAI,AAACC,8CAAuBT,aAC7B,EAAI,iDAAA,jDAACZ,6CAAE0B,2EACH,GAAK,AAACD,0BAAUT,kBAAkBU;AALjD,AAMEd;;AANF;;;AAJHP;;;AAAAA;;;AAbD,AAAA,oBAAAc;AAAAA;;AAAA,IAAAA,uBAyBC,iBAAAd,oBACC,iDAAA,jDAACL,6CAAEkB;AADJ,AAAA,GAAAb;AAAA,IAAAA,wBAEC,8IAAA,9IAACL,6CAAE,AAAA,0FAAWY;AAFf,AAAA,GAAAP;AAGC,OAAA,oFAAOO;;AAHRP;;;AAAAA;;;AAzBD,AAAA,oBAAAc;AAAAA;;AA8BC,IAAAd,oBACC,iDAAA,jDAACL,6CAAEkB;AADJ,AAAA,GAAAb;AAEC,OAACC,iBAAO,AAACL,gBAAM,AAAA,qFAAQ,AAACK,iBAAOR;;AAFhCO;;;;;;KAnCL,EAuCE,EAAK,AAACN,wBAAQD,YAAO,6CAAA,7CAACE,2DAAgB,AAACC,gBAAMH,WAC7C,iBAAMiC,UAAQ,AAAA,uFAAU,AAACC,eAAKlC;AAA9B,AACE,4DAAA,rDAACmC,6CAAKF,YAAU,4BAAA,3BAAG,AAACG,gBAAMH;KAzC9B,EA2CE,EAAK,AAAChC,wBAAQD,YACT,6CAAA,7CAACE,qDAAU,AAACC,gBAAMH,WACvB,iBAAAqC,aAA+B,AAAC7B,iBAAOR;IAAvCqC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAcG;iBAAd,AAAAD,4CAAAF,eAAA,xEAAmBI;IACbC,WAAS,kDAAA,lDAAC1B,uDAAiByB;AADjC,AAEI,GAAM,kDAAA,lDAACvC,6CAAEsC;AAAT,AACE,OAACd,oDAA2BgB;;AAD9B;;KA/CN,EAkDE,EAAK,AAACzC,wBAAQD,YACT,6CAAA,7CAACE,mDAAQ,AAACC,gBAAMH,WACrB,iBAAM2C,OAAK,AAACvC,kCAAQJ;AAApB,AACE,OAAC0B,oDAA2BiB;KArDhC,AAAA;;AAAX,AAyDE,OAACC,qDAA4BzB;;AAEjC,gDAAA,hDAAO0B,wGACJ7C;AADH,AAEE,IAAAK,qBAAoB,wJAAA,seAAA,5nBACE,EAAK,AAACJ,wBAAQD,YACT,6CAAA,7CAACE,+DAAoB,AAACC,gBAAMH,WACjC,AAACkC,eAAKlC,SAEN,sCAAA,mFAAA,vHAAK,AAACC,wBAAQD,cACT,6CAAA,7CAACE,oDAAS,AAACC,gBAAMH,eACjB,AAAC+C,qBAAK,AAACvC,iBAAOR,aACd,6CAAA,7CAACE,yDAAc,AAACC,gBAAM,AAAA,gFAAM,AAACK,iBAAOR,iBACzC,AAACQ,iBAAO,AAAA,gFAAM,AAACA,iBAAOR,WAEtB,EAAK,AAACC,wBAAQD,YACT,6CAAA,7CAACE,qDAAU,AAACC,gBAAMH,WACvB,iBAAAgD,aAA+B,AAACxC,iBAAOR;IAAvCgD,iBAAA,AAAAV,4BAAAU;WAAA,AAAAT,4CAAAS,eAAA,lEAAcR;iBAAd,AAAAD,4CAAAS,eAAA,xEAAmBP;AAAnB,AACE,GAAM,kEAAA,uDAAA,vHAAK,kDAAA,lDAACvC,6CAAEsC,qBACH,OAAS,AAACrC,gBAAMsC,gCAChB,8DAAA,9DAACT,kCAAoB,AAAC7B,gBAAMsC,uBAC5B,4DAAA,5DAACQ,gCAAkB,AAAC9C,gBAAMsC;AAHrC,AAIE,gFAAA,zEAACN,6CAAK,AAAChC,gBAAMsC,gBAAa,gDAAA,/CAAG,AAACL,gBAAM,AAACjC,gBAAMsC;;AAJ7C;;KAdJ,EAoBE,sCAAA,pCAAK,AAACxC,wBAAQD,cACT,6CAAA,7CAACE,oDAAS,AAACC,gBAAMH,aACjB,AAAC+C,qBAAK,AAACvC,iBAAOR,aACnB,EAAI,6CAAA,7CAACE,kDAAO,AAAA,0FAAW,AAACM,iBAAO,AAAA,gFAAM,AAACA,iBAAOR,YAC3C,AAAA,oFAAO,AAACQ,iBAAO,AAAA,gFAAM,AAACA,iBAAOR,UAC7B,iBAAMkD,KAAG,AAAC1C,iBAAO,AAAA,gFAAM,AAACA,iBAAOR;AAA/B,AACE,OAAC4C,qDAA4BM;MA1BnC,AAAA;;AAApB,AAAA,oBAAA7C;AAAA,AAAA,eAAAA,XAAWyC;AAAX,AA8BE,oBAAM,iBAAAvC,oBAAKuC;AAAL,AAAA,oBAAAvC;AACK,OAAC4C,4CAAqBL;;AAD3BvC;;;AAAN,AAEEuC;;AAFF;;;AA9BF;;;AAkCF,mDAAA,nDAAOM,8GACJpD;AADH,AAEE,SACC,AAACC,wBAAQD,YACT,6CAAA,7CAACE,yDAAc,AAACC,gBAAMH;;AAEzB,mDAAA,nDAAMqD,8GACHrD;AADH,AAEE,SACC,AAACC,wBAAQD,YACT,6CAAA,7CAACE,yDAAc,AAACC,gBAAMH;;AAGzB,+CAAA,/CAAMsD,sGACHC,OAAOC,WAAWC;AADrB,AAEE,GAAM,AAACC,cAAIF;AAAX,AACE,IAAMA,iBAAW,AAACE,cAAIF;IAChBG,sJAKW,AAAClD,4CAAI,WAAKwD,tHAQV,AAACM,8CAAMC,zHACP,AAACZ,+CAAOa;AATH,AACE,GAAM,EAAK,OAASR,oBACT,AAAC3C,cAAI,AAAC4C,sCAAeX,OAAOU;AADvC,AAEE,IAAMA,QAAE,AAACE,oBAAYF;IACfG,SAAO,8FAAA,2CAAA,oEAAA,7MAACC,wFAAsCJ;AADpD,AAEE,GAAI,AAACK,sBAAMF;AACT,OAAC3D,4CAAIiB,oDAA2B0C;;AADlC;;;AAJJ;;8DAJP,AAACR,+CAAO,WAAAC,rHAER,AAACpD,4CAAIyB;AAFG,AAAA,IAAA4B,aAAAD;QAAA,AAAAjD,4CAAAkD,WAAA,IAAA,/DAAMC;QAAN,AAAAnD,4CAAAkD,WAAA,IAAA,/DAAQE;AAAR,AACE,iCAAA,iFAAA,mFAAA,9LAACrC,8RAAiD,AAACI,gDAAQgC;GAFrEP;IAcXA,iBAqBgB,+CAAA,WAAAyB,1DAACrB;AAAD,AAAS,8CAAA,tCAAM,iBAAAqB,jBAACzE;GApBhB,AAACC,4CAAI,WAAAiE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA9D,4CAAA+D,WAAA,IAAA,/DAAMZ;QAAN,AAAAnD,4CAAA+D,WAAA,IAAA,/DAAQV;AAAR,AACE,IAAMF,sDAAM,AAACa,0BAAkB,AAACC,eAAKd,hEACzB,oEAAA,IAAA,xEAACe,vBACD,oGAAA,IAAA,xGAACA;IACPf,QAAE,sKAAA,pKAAI,0BAAA,iFAAA,iBAAA,5HAACpC,4JAAqCoC,aAExCA;IACJE,QAAE,EAAI,AAACK,sBAAML,IACT,AAACL,+CAAOa,4BAAcR,GACtB,kCAAA,hCAAI,AAACQ,4BAAcR,SAEjB,AAACc,sEAAoBxB,OAAOQ,MAAEE,EAAER;IACtCM,QAAE,AAAChC,gDAAQgC;IACXE,QAAE,EAAI,EACC,OAASA,wBACT,0BAAA,iFAAA,0DAAA,6DAAA,lOAACtC,iTAAmCoC,UACvC,cAAA,dAACiB,iGAAKf,eACNA;IACJA,QAAE,EAAI,AAACK,sBAAML,QAAG,AAACe,cAAIf,OAAGA;AAjB9B,AAAA,0FAkBGF,MAAEE;GApBZT;AAhBtB,AAAA,kDAAA,gKAAA,yJAAA,zPAsCe,6CAAA,7CAAC0B,gFAAQ1B,6FACH,AAAC/C,4CAAIN,gBAAMqD,+EAClBG;;AAzChB;;;AA2CF,6DAAA,7DAAOwB,kIACJnF;AADH,AAEE,SAAK,AAACoD,iDAAiBpD,YAClB,EAAI,AAACqD,iDAAiB,AAAClD,gBAAM,AAACK,iBAAOR,cACjC,AAACqD,iDAAiB,AAAC7C,iBAAO,AAACA,iBAAOR;;AAE7C,+CAAA,/CAAOoF,sGACJpF;AADH,AAEE,IAAAqF,WACC,AAAC7E,iBAAOR;IADTqF,eAAA,EAAA,CAAAA,YAAA,OAAA,KAEC,gGAAAA,hGAACC,+CAAOjC;IAFTgC,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAGC,2DAAAA,3DAAC5E,4CAAIyB;AAHN,AAAA,GAAA,CAAAmD,gBAAA;AAAA;;AAIC,oDAAA,mCAAAA,hFAACH;;;AAGJ,kEAAA,lEAAMK,4IACHC;AADH,AAEE,IAAMA,iBAAW,AAACC,kCAAiB,AAACC,6CAAKC,kBAAQf,2BAAmBY;IAC9DI,IAAE,iBAAAC,WAAS,qCAAA,mFAAA,8DAAA,tLAACC,sBAAYN;AAAtB,AAAA,GAAA,CAAAK,YAAA;AAAA;;AACS,OAACpF,4CAAI,WAAAsF;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAnF,4CAAAoF,WAAA,IAAA,/DAAMjC;QAAN,AAAAnD,4CAAAoF,WAAA,IAAA,/DAAQ/B;AAAR,AACE,IAAAgC,aAAgChC;IAAhCgC,iBAAA,AAAA3D,4BAAA2D;WAAA,AAAA1D,4CAAA0D,eAAA,lEAAcE;iBAAd,AAAA5D,4CAAA0D,eAAA,xEAAmBG;IAAnBF,aAC+BC;IAD/BD,iBAAA,AAAA5D,4BAAA4D;WAAA,AAAA3D,4CAAA2D,eAAA,lEACcG;YADd,AAAA9D,4CAAA2D,eAAA,nEACmBI;UADnB,AAAA/D,4CAAA2D,eAAA,jEACyBK;IACnBA,UAAI,AAACC,SAAY,6CAAKH,MAAK,AAACI,kCAAiBH,OAAO,AAACG,kCAAiBF;AAF5E,AAGE,IAAAG,WACC,iBAAAC,WAAM5C;IAAN4C,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,8DAEcJ;;;KAFd;AAAA,kDAAA,4DAIaA;;;;AAJb,MAAA,KAAAM,MAAA,CAAA,mEAAAF;;;;AADD,AAAA,oBAMEP;AACA,qDAAAM,SAAA,gEAAA,vHAACI;;AAPHJ;;GAJTb;;;AAFjB,AAcE,OAACtB,8CAAMwC,gBAAMnB;;AAEjB;;;oDAAA,pDAAMoB,gHAEHC,mBAAmBC;AAFtB,AAGE,oBAAMD;AAAN,AACE,IAAME,YAAU,AAACC,6CAA4BH;IACvCV,MAAI,AAACc,yDAAkCF,UAAU,AAACG,iEAA6CJ;AADrG,AAEC,oBAAIX;AACF,IAAMU,yBAAmB,AAACM,yDAAkChB,IAAIW;AAAhE,AAAA,0FACGD,uBAAmB,AAACG,6CAA4BH,wBAAoBV;;AAFzE,0FAGGU,mBAAmBE,UAAUZ;;;AANnC;;;AAQF;;;;;;;8CAAA,9CAAMiB,oGAMHP,mBAAmBQ,eAASC,GAAGC,sBAAgBT;AANlD,AAOE,oBACE,iBAAA3G,oBAAK0G;AAAL,AAAA,oBAAA1G;AAAwB,cAAS0G;;AAAjC1G;;;AACA,IAAM0G,yBAAmB,AAACY,iDAAgCZ;IAA1DW,aACiD,AAACZ,kDAAwBC,uBAAmBC;6BAD7F,AAAAtG,4CAAAgH,WAAA,IAAA,pFACOX;gBADP,AAAArG,4CAAAgH,WAAA,IAAA,vEAC0BT;kBAD1B,AAAAvG,4CAAAgH,WAAA,IAAA,zEACoCE;IAC9BC,mBAAW,EAAK,GAAK,AAACC,mBAAQ,AAACC,8CAA0BhB,gCACzC,AAACiB,+CAAqBjB;IACtCkB,cAAY,iBAAAC,WAAQV;AAAR,AAAA,GAAA,CAAAU,YAAA;AAAA;;AAAW,IAAAC,WAAAD;IAAAE,WAAA,mFAAA,8DAAuBnB;AAAvB,AAAA,oHAAAkB,SAAAC,6CAAAD,SAAAC,3KAACC,uDAAAA,0EAAAA;;;IACxBtB,yBAAmB,iBAAA5F,mBAAI,AAAA,+GAAsB8G;AAA1B,AAAA,oBAAA9G;AAAAA;;AAAuC4F;;;AALhE,AAME,8GAAA,2CAAA,wEAAA,1NAACuB,gNACarB,2FACSF,+BACtB,kCAAA,qaAAA,rbAAMQ,gBACJ,+BAAA,2CAAA,iLAAA,2CAAA,pRAAIU,uHACW,AAAA,6FAAaA,+HACb,AAACM,sEAClB,oBAAA,lBAAMV,kBACJ,iBAAMW,YAAU,AAACvI,gBAAM,oCAAA,pCAACwI,wCAAuB1B;AAA/C,AACE,GAAU,AAACxC,4BAAciE;AAAzB;;AAAA,AAAA,kDAAA,wEAAA,2CAAA,8DACiC,AAACtB,6CAA4BsB;;KAHlE,MAIA,kBAAM,iBAAAnI,oBAAKoH;AAAL,AAAA,oBAAApH;AAAqB,OAACe,cAAI6G;;AAA1B5H;;MAAN,AACE,iBAAMqI,aAAW,AAACC;AAAlB,AAAA,kDAAA,kFAAA,XACqBD,sFACAA;KAHvB,MAIA,+BAAA,2CAAA,sEAAA,KAAA,gGAAA,2CAAA,sEAAA,pVAAId,+MAEkBA;;AAzB3B,oBA4BE,iBAAAvH,oBAAK,AAACwC,qBAAKkE;AAAX,AAAA,GAAA1G;AAA+B,OAAA,6FAAa0G;;AAA5C1G;;;AACA0G;;AA7BF,oBA+BE,iBAAA1G,oBAAK,AAACwC,qBAAKkE;AAAX,AAAA,GAAA1G;AAA+BkH;;AAA/BlH;;;AACA,wEAAA,jEAACuG,8CAAMG,kFAA+B,AAACwB;;AAhCzC,AAAA;;;;;;AAqCF,2CAAA,mDAAAK,9FAAOE,uGACqDvB,eAASvG,kBAAkBwG,GAAGR;AAD1F,AAAA,IAAA6B,aAAAD;IAAAC,iBAAA,AAAAzG,4BAAAyG;YAAAA,RACqD/I;YADrD,AAAAuC,4CAAAwG,eAAA,nEACWE;WADX,AAAA1G,4CAAAwG,eAAA,lEACiBG;WADjB,AAAA3G,4CAAAwG,eAAA,lEACsBI;WADtB,AAAA5G,4CAAAwG,eAAA,lEAC2BK;aAD3B,AAAA7G,4CAAAwG,eAAA,pEACgCM;eADhC,AAAA9G,4CAAAwG,eAAA,tEACuCO;AADvC,AAEE,IAAMF,uIAAU,kHAAA,lHAACG,sDAAOJ,KAAKC,0IAAMC,OAAOC,vRAC1B,AAAC1F,+CAAOa,hGACR,AAAC+E;IACXJ,WAAK,AAACK,6CAAKL;AAHjB,AAIE,AAACM,qBACA,WAAKC;AAAL,AAEE,GAAU,qCAAA,nCAAK,AAAC1J,wBAAQ0J,aACT,mEAAA,nEAACzJ,6CAAE,AAACC,gBAAMwJ,qBACV,oEAAA,pEAACzJ,6CAAE,AAACM,iBAAOmJ;AAF1B;;AAAA,AAGE,IAAAtJ,2BAAgB,AAACY,6CAAmB0I,KAAKzI;AAAzC,AAAA,oBAAAb;AAAA,AAAA,iBAAAA,bAAWc;AAAX,AACE,AAACyI,mDAAMR,SAAKS,eAAK1I;;AADnB;;AAEA,IAAAd,2BAAe,AAACD,kCAAQuJ;AAAxB,AAAA,oBAAAtJ;AAAA,AAAA,gBAAAA,ZAAWyJ;AAAX,AACE,IAAMA,gBAAI,AAACpI,oDAA2BoI;AAAtC,AACE,oBAAM,AAACC,0CAAmBD;AAA1B,AACE,AAACF,mDAAMR,SAAKS,eAAKC;;AADnB;;AAFJ;;AAIAH;;GACJ,AAACJ,+CAAON,MAAMC;;AACf,IAAME,WAAK,2EAAA,AAAAY,3EAACpG,+CAAOa,4CAAe2E;IAC5Ba,6IAAoB,AAACC,sDAAO,WAAKC,5IASb,AAACvG,+CAAOa,hGACR,AAAC+E;AAVO,AACE,IAAMW,QAAE,EAAI,AAACpH,qBAAKoH,IACR,AAAA,+GAAsBA,GACtBA;AAFV,AAGE,GAAM,OAASA;AAAf,AACE,IAAMA,QAAE,iBAAA9I,mBAAI,AAAC4G,8CAA0BkC;AAA/B,AAAA,oBAAA9I;AAAAA;;AAAkC8I;;;AAA1C,AACE,GAAM,AAACjC,+CAAqBiC;AAA5B,AACE,OAACC,+CAA8BD;;AADjC;;;AAFJ;;qDAIJf;IAG5BA,+EAAU,AAACI,iDAAS,AAACD,+CAAOH,SAAKa,7KACvB,AAACrG,+CAAOyG;IAClBjB,WAAK,AAAC3I,4CAAI,WAAK6J;AAAL,AAAU,yEAAA,lEAAC9C,4CAAe8C,IAAI7C,eAASC,QAAQR;GAAiBkC;AAdhF,AAeE,2DAAA,pDAACtC,8CAAM9G,4DAAYoJ;;AAEzB,4CAAA,oDAAAmB,hGAAOE;AAAP,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAlI,4BAAAkI;YAAAA,RAC2BxK;YAD3B,AAAAuC,4CAAAiI,eAAA,nEACWvB;WADX,AAAA1G,4CAAAiI,eAAA,lEACiBtB;AADjB,AAEE,IAAMwB,aAAW,6CAAA,7CAACjB;AAAlB,AACE,AAACkB,sBACA,WAAKhB;AAAL,AACE,IAAAtJ,2BAAiB,AAACwC,8CAAoB8G;AAAtC,AAAA,oBAAAtJ;AAAA,AAAA,sBAAAA,lBAAWL;AAAX,AACE,AAAC4J,mDAAMc,WAAWb,eAAK7J;;AADzB;;AAEA2J;GACF,AAACJ,+CAAON,MAAMC;;AACf,IAAMwB,4HAAiBA,3GACD,2FAAA,AAAAV,3FAAC1E,+CAAOnC;IACxBuH,iBAAW,AAACjK,4CACC,WAAKyC;AAAL,AAAA,0FAAA,+DACe,AAAC0H,eAAK1H;GACrBwH;IACbtB,OAAK,AAACI,iDAAS,AAACD,+CAAO,AAAA,oFAAOvJ,OAAO0K;AAN3C,AAOE,2DAAA,pDAAC5D,8CAAM9G,4DAAYoJ;;AAEzB,6CAAA,7CAAOyB,kGACJ7K;AADH,AAEE,OAACyF,kCACA,WAAK1B;AAAL,AACE,oBAAI,AAAC+G,oBAAU/G;AACbA;;AACA,uDAAA,hDAAChC,wDAAgBgC;;GACrB/D;;AAEH,+CAAA,/CAAO+K,sGACJC;AADH,AAEE,OAACvK,4CAAI,WAAKT;AAAL,AACE,GAAI,AAAC+C,qBAAK/C;AACR,OAAC6K,2CAAiB,AAACI,qCAAoBjL;;AACvCA;;GACJgL;;AAEP,2CAAA,3CAAOE,8FACJF;AADH,AAEE,IAAOA,aAAOA;UAAd,NACOG;cADP,VAEOC;;AAFP,AAGE,GAAI,AAACC,uBAAOL;AACVG;;AACA,IAAMnL,QAAM,AAACG,gBAAM6K;IACbO,YAAU,AAAA,8FAAcvL;IACxBwL,aAAW,CAAGD,YACA,oEAAA,gEAAA,pIAAChJ,4CAAI,AAACL,eAAKkJ;IAH/BE,aAKM,EACE,gBAAA,fAAOE,qBACP,iBAAMC,YAAU,sDAAA,tDAACvB,uKAAmB,AAACwB,kDAAUN;IACzCA,cAAQ,AAACO,6CAAK,AAACC,cAAI,AAACC,kBAAQT,UAAUpL;AAD5C,AAAA,0FAEGyL,UAAUL;KAJf,EAME,cAAA,bAAGI,mBACH,iBAAMC,YAAU,sDAAA,tDAACvB,uKAAmBkB;AAApC,AAAA,0FACGK,UAAU,AAACE,6CAAKP,QAAQpL;KAR7B,EAUE,cAAA,bAAGwL,mBACH,iBAAMJ,cAAQ,AAACQ,cAAI,AAACE,mDAAW;kBAAK3B;AAAL,AAAQ,QAAG,AAAA,8FAAcA,KAAGoB;;CAAYH;IACjEK,YAAU,sDAAA,tDAACvB,uKAAmBkB;AADpC,AAAA,0FAEGK,UAAU,AAACE,6CAAKP,YAAQpL;KAb7B;gBALN,AAAAY,4CAAA0K,WAAA,IAAA,vEAIOG;kBAJP,AAAA7K,4CAAA0K,WAAA,IAAA,zEAIiBF;IAeXW,6MAUoB,AAACtL,4CAAI,nHAIL,AAACmD,+CAAO3D,nHACR,AAAC2D,+CAAOyG,hGACR,AAACb;kBANSc;AAAL,AACE,GAAI,OAASA;AAAb,kDAAA,8DACe,AAAClD,6CAA4BkD;;AAC1CA;;;4EAXT,AAAC7J,4CAAI,vHAOL,AAACmD,+CAAOa;kBAPE6F;AAAL,AACE,GACE,AAACvH,qBAAKuH;AACN,OAAA,4FAAaA;;AAFf,AAKEA;;;;oJARTmB,nJACA,AAAClC,+CAAO,AAAA,6FAAavJ;AApB/C,AAoCE,eAAO,AAACgM,eAAKhB;eACN,AAACW,6CAAKR,IAAI,oDAAA,pDAACrE,8CAAM9G,+EAAuB+L;eACxCX;;;;;;;;;AAEf,iDAAA,yDAAAa,1GAAOE;AAAP,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA5J,4BAAA4J;YAAAA,RACqBlM;WADrB,AAAAuC,4CAAA2J,eAAA,lEACW/C;AADX,AAEE,GAAI,AAACzF,cAAIyF;AACP,2DAAA,pDAACrC,8CAAM9G,2DAAY,AAACS,4CAAI,WAAKqJ;AAAL,AACE,IAAMA,UAAI,AAACpI,oDAA2BoI;AAAtC,AAAA,0FAAA,8DACe,AAAC1C,6CAA4B0C;GAAQX;;AAC9EnJ;;;AAEJ,8CAAA,9CAAOoM,oGACJC,aAAarM,MAAMuD,OAAO+I,KAAKC;AADlC,AAEE,IAAMtK,UAAQ,iBAAAuK,qBAAiB,AAAA,uFAAUF;AAA3B,AAAA,oBAAAE;AAAA,cAAAA,VAASC;AAAT,AACE,OAACC,iEAAeL,aACA,AAAA,4FAAYC,MACZG;;AAChB,OAACC,iEAAeL,aACA,AAAA,4FAAYC;;;IACtCrK,cAAQ,2BAAA,TAAMA,SACJ,iBAAMA,cAAQ,AAAC0K,2EAAyB1K,QAAQsB,OAAOgJ;AAAvD,AACE,oBAAI,iBAAAlL,mBAAI,AAAA,gGAAarB;AAAjB,AAAA,oBAAAqB;AAAAA;;AACI,mJAAA,5IAACnB,6CAAE,AAAA,wFAASF;;;AAClBiC;;AACA,2KAAA,pKAAC2K,oDAAmC3K,YAAQ,+FAAA,9FAAK,AAAA,qFAAQjC;;KAL/D;AANd,AAYE,GAAI,oDAAA,pDAACE,6CAAEqD;AACLtB;;AACA,OAAC4K,iDAA6B5K;;;AAEpC,oDAAA,pDAAO6K,gHACJtJ;AADH,AAEE,IAAAnC,mBAAI,iBAAAhB,qBAAqB,iBAAAgB,mBAAI,0DAAA,mFAAA,gEAAA,7MAAC2L,+CAAOxJ;AAAZ,AAAA,oBAAAnC;AAAAA;;AAAA,IAAAA,uBACI,0DAAA,mFAAA,gEAAA,7MAAC2L,+CAAOxJ;AADZ,AAAA,oBAAAnC;AAAAA;;AAEI,iEAAA,mFAAA,gEAAA,7MAAC2L,+CAAOxJ;;;;AAFjC,AAAA,oBAAAnD;AAAA,AAAA,gBAAAA,ZAAW0M;AAAX,AAGE,IAAMA,gBAAU,iBAAAxM,oBAAK,OAASwM;AAAd,AAAA,GAAAxM;AAAyB,OAAC4D,oBAAY4I;;AAAtCxM;;;AAAhB,AACE,oBAAM,iBAAAA,oBAAKwM;AAAL,AAAA,oBAAAxM;AAAe,OAAC4C,4CAAqB4J;;AAArCxM;;;AAAN,AACE,OAACqK,eAAKmC;;AADR;;;AAJJ;;;AAAJ,AAAA,oBAAA1L;AAAAA;;AAMI,OAACoH;;;AAEP,0DAAA,1DAAMwE,4HACHzJ,WAAWkE,GAAGR;AADjB,AAEE,IAAMvD,YAAU,AAACuG,sDAAO,WAAKjG;AAAL,AAAQ,GACC,AAACK,sBAAML;AACPA;;AAFD,GAIC,AAACxC,yCAAewC;AAJjB,0FAKE,AAACvC,oDAA2BuC;;AAL9B,AAAA;;;;qDAQO,AAACiJ,eAAK1J;IACvCG,gBAAU,AAACC,+CAAOa,4BAAcd;AATtC,AAUE,OAAClD,4CAAI,WAAKU;AAAL,AAAW,wDAAA,QAAA,zDAACqG,4CAAerG,UAAUuG,QAAQR;GAAiBvD;;AAEvE,iDAAA,jDAAOwJ,0GACJnN,MAAMyH,eAASvG,kBAAkBwG,GAAGR;AADvC,AAEE,IAAAkG,WAAQpN;IAARoN,eAAA,EAAA,CAAAA,YAAA,OAAA,KACQ,yCAAAA,zCAACpE,kDAAevB,eAASvG,kBAAkBwG,GAAGR;IADtDkG,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,0CAAAA,1CAEQ3C;IAFR2C,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,+CAAAA,/CAGQjB;AAHR,AAAA,GAAA,CAAAiB,gBAAA;AAAA;;AAIQ,sDAAAA,aAAA,5DAACC,kHAAa,WAAKC;AAAL,AAAU,OAAC1J,+CAAOyG,qBAAKiD;;;;AAE/C,qDAAA,8GAAAC,nKAAOE,kHACJzC,OAAO9B,KAAKwE,qBAAqBC;AADpC,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAlL,4BAAAkL;wBAAA,AAAAjL,4CAAAiL,eAAA,/EAC4DtM;SAD5D,AAAAqB,4CAAAiL,eAAA,hEAC8E9F;qBAD9E,AAAAnF,4CAAAiL,eAAA,5EACiFtG;AADjF,AAEE,IAAM0G,cAAY,AAACzN,gBAAM6K;IACnB6C,wBAAsB,2DAAA,mFAAA,8DAAA,5MAACb,+CAAOY;IAG9B5C,aAAO,EAAI,EAAI,yBAAA,xBAAG6C,kCACH,AAACxC,uBAAOL,WACd,AAAC8C,eACA,AAACtF,uGACA,iBAAMvG,UAAQ,iFAAA,jFAACyK,iEAAeiB,oBAAkBE;IAAhDE,aAC4CL;IAD5CK,iBAAA,AAAAzL,4BAAAyL;iBAAA,AAAAxL,4CAAAwL,eAAA,xEACcvK;uBADd,AAAAjB,4CAAAwL,eAAA,9EACyBC;IACnB9K,KAAG,kDAAA,2CAAA,7FAAC4J,6JAAqCtJ;IACzCyK,6IAAmB,AAAChB,wDAA8BzJ,WAAWkE,GAAGR,nMAC7C,4CAAA,5CAACzG;YAJ1B,wCAAA,gEAAA,+DAAA,yDAAA,sDAAA,uDAAA,kEAAA,sDAAA,sDAAA,0FAAA,2BAAA,IAAA,5nBAKMT,ioBAAakD,/BACGjB,hBAEGuB,uDACMwK,/BACZC,0BAGA/E;IACblJ,YAAM,qDAAA,rDAACmN,+CAAqBnN,YAAYkB,kBAAkBwG,GAAGR;AAdnE,AAeE,OAAC2D,2CAAiB7K;KACpB,kCAAA,mFAAA,mEAAA,xLAAC8F,sBAAY8H,8OACd5C,QACDA;AA1Bf,AA2BE,OAACE,yCAAeF;;AAEpB,4CAAA,oIAAAkD,hLAAOE,gGACJpO,MAAMwD,WAAWgC,WAAW0D,KAAKyE,gBAAgBpK,OAAO8K,SAAS5G;AADpE,AAAA,IAAA0G,aAAAD;IAAAC,iBAAA,AAAA7L,4BAAA6L;oBAAA,AAAA5L,4CAAA4L,eAAA,3EACqF5B;wBADrF,AAAAhK,4CAAA4L,eAAA,/EACmGjN;SADnG,AAAAqB,4CAAA4L,eAAA,hEACqHzG;qBADrH,AAAAnF,4CAAA4L,eAAA,5EACwHjH;AADxH,AAEE,IAAMhE,KAAG,AAAC4J,kDAAwBtJ;IAC5B+K,qGAA6B,AAAA,6FAAY/K,xKACZ,AAACI,+CAAOa;IACrCzE,YAAM,AAACQ,iBAAOR;IACdwO,mBAAW,AAAA,6FAAYxO;IACvByO,0BAAkB,iBAAAlO,oBAAK,AAAA,mFAAOP;AAAZ,AAAA,oBAAAO;AAAmB,oDAAA,7CAACL,0GAAYqD;;AAAhChD;;;IAClBP,YAAM,kBAAIyO,yBACF,+DAAA,qDAAA,8GAAA,gMAAA,laAAC3H,qDAAM9G,oOAEO,oIAAA,lHAAIwO,kBAAW,AAAA,qFAAQxO,sFACf,iBAAAqB,mBAAI,AAAA,mFAAOrB;AAAX,AAAA,oBAAAqB;AAAAA;;AAAA;;WACtBrB;IACRA,YAAM,iBAAA0O,WACE,+DAAA,2GAAA,8EAAA,iEAAA,zTAAC5H,qDAAM9G,gEACMkD,2GACAqL,kFACEhL,4DACF8K;IALfK,eAAA,8VAAAA,5VAME,AAAChL,cAAI,AAAA,8FAAaF,cAClB,8CAAAkL,SAAA,vDAAC5H,uHAAkB,AAAA,8FAAatD;AAPlC,AAAA,GASE,AAACE,cAAI,AAAA,2GAAmBF;AACxB,qDAAAkL,aAAA,3DAAC5H,wIAAwB,AAAA,2GAAmBtD;;AAV9CkL;;;IAWN1O,YAAM,kBAAI,yDAAA,mFAAA,gEAAA,5MAACgN,+CAAOhN,sOACV,wDAAA,kEAAA,1HAAC8G,8CAAM9G,kFACPA;IACRA,YAAM,wDAAA,xDAAC8G,8CAAM9G,mEACS,AAACoM,4CAAkBuB,gBAAgB3N,UAAMuD,OAAO8K,SAAS9B;IAC/EvM,YAAM,EAAI,AAAC0D,cAAI8B,aACP,AAACgD,uGAAMxI,UAAM,AAACuF,gEAAmCC,kBACjDxF;IACRA,YAAM,wDAAA,xDAAC8G,8CAAM9G,gEAAYkJ;IACzBlJ,YAAM,AAACmN,+CAAqBnN,UAAMyH,eAASvG,kBAAkBwG,GAAGR;IAhCtEoH,aAiCsC,AAAA,8FAAa9K;IAjCnD8K,iBAAA,AAAAhM,4BAAAgM;iBAAA,AAAA/L,4CAAA+L,eAAA,xEAiCcK;iBAjCd,AAAApM,4CAAA+L,eAAA,xEAiCyBM;IACnB5O,YAAM,iBAAA6O,WAAQ7O;IAAR6O,eAAA,kBACE,iBAAAtO,oBAAKoO;AAAL,AAAA,oBAAApO;AAAgB,OAACuO,yBAASH;;AAA1BpO;;gJADFsO,1IAEE,8CAAAA,SAAA,vDAAC/H,8HAAwB6H;AAF3B,AAAA,oBAIE,iBAAApO,oBAAKqO;AAAL,AAAA,oBAAArO;AAAgB,OAACuO,yBAASF;;AAA1BrO;;;AACA,qDAAAsO,aAAA,3DAAC/H,sIAAwB8H;;AAL3BC;;;AAlCZ,AAwCE,uEAAA,wGAAA,sDAAA,9NAACE,sDAAO/O;;AAEZ;;;;;;;;;;2CAAA,wFAAAgP,nIAAME,8FASHlE,OAAO/I,QAAQwF,eAASlE;AAT3B,AAAA,IAAA0L,aAAAD;IAAAC,iBAAA,AAAA3M,4BAAA2M;cAAAA,VAS2DE;kBAT3D,AAAA5M,4CAAA0M,eAAA,zEAS0CxL;AAT1C,AAAA,GAUS,AAACC,cAAIsH;AAVd;AAAA,AAAA,MAAA,KAAAnE,MAAA;;;AAAA,GAUsB,OAAS5E;AAV/B;AAAA,AAAA,MAAA,KAAA4E,MAAA;;;AAAA,GAUwC,AAACuI,yBAAS3H;AAVlD;AAAA,AAAA,MAAA,KAAAZ,MAAA;;;AAAA,GAU4D,0BAAA,iFAAA,kEAAA,7KAAClF,iPAA4B4B;AAVzF;AAAA,AAAA,MAAA,KAAAsD,MAAA;;;AAWE,IAAA,AACE,IAAM8G,kBAAgB,AAAC4B,gCAAYtN;IAAnCqN,aAEM,4BAAA,XAAOE;IACAxE,aAAO,AAACyE,kBAAQzE;iBADvB,bAEOxF;iBAFP,bAGOhC;WAHP,PAIO0F;;AAJP,AAKE,GAAI,AAACxF,cAAIsH;AACP,IAAA0E,aAAuB,AAACvP,gBAAM6K;YAA9B,AAAApK,4CAAA8O,WAAA,IAAA,nEAAO1P;eAAP,AAAAY,4CAAA8O,WAAA,IAAA,tEAAarB;IAEPA,eAAS,uDAAA,vDAACvH,8CAAMuH,kEACA,kTAAA,hTAAI,AAAC3K,cAAI8L,WACP,wEAAA,mFAAA,qDAAA,hNAACxC,+CAAO,AAAC9K,eAAKsN;AAJtC,AAME,GACE,AAACrK,2DAA2BnF;AAC5B,IAAMwF,iBAAW,AAACJ,6CAAmBpF;IAC/B2P,0BAAY,AAACnH,uGAAMhD,eAAWA;AADpC,AAEE,eAAOgK;eAAS,AAACxD,eAAKhB;eAAQ2E;eAAYnM;eAAW0F;;;;;;;;AAJzD,GAME,AAAC0G,mDAA4B5P;AAC7B,IAAMwD,iBAAW,AAACF,6CAAmBC,OAAO,AAAC/C,iBAAOR,OAAOyD;AAA3D,AACE,eAAO+L;eAAS,AAACxD,eAAKhB;eAAQxF;eAAWhC;eAAW0F;;;;;;;;AARxD,GAUE,AAACnJ,+CAAeC;AAChB,IAAMA,YAAM,AAACoO,0CAAgBpO,MAAMwD,WAAWgC,WAAW0D,KAAKyE,gBAAgBpK,OAAO8K,aAAS5G,eAAS0H;AAAvG,AACE,eAAO,AAACxD,6CAAK6D,SAASxP;eAAO,AAACgM,eAAKhB;eAAnC;eAAA;eAAA;;;;;;;;AAZJ,AAeE,eAAOwE;eAAS,AAACxD,eAAKhB;eAAQxF;eAAWhC;eAAW,AAACmI,6CAAKzC,KAAKlJ;;;;;;;;;;;;AAtBrE,0FAuBG,6CAAI,AAACyP,kBAAQD,/DACTzE,0EACJ7B,KACA1F;;;;;iBAjCX,AAAA5C,4CAAA0O,WAAA,IAAA,xEACOtE;WADP,AAAApK,4CAAA0O,WAAA,IAAA,lEACcpG;2BADd,AAAAtI,4CAAA0O,WAAA,IAAA,lFACmB5B;IAiCbtJ,SAAO,AAACqJ,mDAAyBzC,WAAO9B,KAAKwE,qBAAqBC,gBAAgBwB;AAlCxF,AAmCE,mDAAA,WAAAU,vDAACpP;AAAD,AAAM,sDAAAoP,iBAAA,hEAACd;GAAsB3K;gBApCjC,QAAAiL,JAqCkBS;AArClB,AAsCI,OAAAC,qDAAA,4BAAA,uDAAA,AAAAC,mBAAA,2CAAA,2FAAA,oDAAA,aAAA,nEAAmCF;;AAEzC,iDAAA,jDAAMG,0GACHC,QAAQlF;AADX,AAEE,IAAOA,aAAO,AAACvK,4CAAI,WAAKT;AAAL,AAAY,2DAAA,pDAAC8G,8CAAM9G,oFAA0B,AAAA,8FAAcA;GAASgL;cAAvF,mFAAA,2CAAA,iEAAA,gEAAA,IAAA,8EAAA,3VACOI,iMAAmB8E;aAD1B,TAIO9L;;AAJP,AAKE,GAAI,AAACiH,uBAAOL;AACV,mDAAA,5CAACvK;kBAAD0P;AAAA,AAAM,sDAAAA,iBAAA,hEAACpB;;CAA8B3K;;AACrC,IAAAgM,aAAuBpF;IAAvBqF,aAAA,AAAA3M,cAAA0M;IAAAE,eAAA,AAAAnQ,gBAAAkQ;IAAAA,iBAAA,AAAAE,eAAAF;YAAAC,RAAOtQ;aAAPqQ,TAAeK;IACTC,eAAa,AAAA,4GAAqB3Q;IADxCwQ,aAEwD,AAACtO,eAAKkJ;IAF9DoF,iBAAA,AAAAlO,4BAAAkO;kBAAAA,dAE2CO;WAF3C,AAAAxO,4CAAAiO,eAAA,lEAEoBI;YAFpB,AAAArO,4CAAAiO,eAAA,nEAEyBK;aAFzB,AAAAtO,4CAAAiO,eAAA,pEAE+BM;IACzBE,gBAAc,AAAA,4GAAqBD;IAHzCN,aAKM,EACE,AAACvQ,6CAAEyQ,aAAaK,gBAChB,iBAAMhR,YAAM,2DAAA,2HAAA,8DAAA,mFAAA,4EAAA,nZAAC8G,qDAAM9G,wEACc8Q,yQACWF,6EACZC;IAC1BI,uBAAS,AAACtF,6CAAK,AAACC,cAAI,AAACC,kBAAQT,UAAUpL;IACvCkR,sBAAQ,AAACvF,6CAAKvH,OAAOpE;AAL3B,AAAA,0FAMG0Q,OAAOO,qBAASC;KARrB,EAUE,CAAGP,eAAaK,gBAChB,iBAAMF,aAAO,wBAAA,mFAAA,zFAAIF,wJAAkBA,aAAM,AAAA,uFAAUG;IAC7C/Q,YAAM,iBAAAmR,WACE,2DAAA,+HAAA,1LAACrK,qDAAM9G,wEACa8Q,2HACFA;AAHpB,AAAA,GASE,mCAAA,lCAAI,CAAGH,eAAaK;AACpB,qDAAAG,SAAA,vDAACrK,uHAAmB,SAAA,RAAK+J;;AAV3BM;;;IAWNF,uBAAS,AAACtF,6CAAKP,QAAQpL;IACvBkR,sBAAQ,AAACvF,6CAAKvH,OAAOpE;AAb3B,AAAA,0FAcG0Q,OAAOO,qBAASC;KAzBrB,EA2BE,CAAGP,eAAaK,gBAChB,kBACE,eAAA,fAACK;kBAADD;AAAA,AAAO,OAAClR,6CAAE,AAAA,4GAAAkR,kBAAwB,AAAA,4GAAqBpR;;CAAQoL,UAC/D,iBAAM6F,uBAAS,AAACrF,cAAI,AAACtG,+CAAO;kBAAK6E;AAAL,AAAQ,QAAI,AAAA,4GAAqBA,MAAGwG;;CAAevF;IACzEkG,OAAK,AAACpP,eAAK+O;IACXjG,aAAO,AAAC8C,eAAK,iFAAA,gIAAA,8DAAA,mFAAA,lWAAChH,qDAAM,AAAC3G,gBAAM6K,4EACM,SAAA,RAAK6F,+QACO,AAAA,6FAAaS,oBAC7C,AAACtF,eAAKhB;AALzB,AAAA,0FAMGA,WAAOiG,qBAAS7M;KARrB,AAWE,iBAAAmN,aAAY,AAACG,qBAAW;kBAAKvH;AAAL,AAAQ,QAAI,AAAA,4GAAqBA,MAAGwG;;CAAevF;QAA3E,AAAAxK,4CAAA2Q,WAAA,IAAA,/DAAOC;QAAP,AAAA5Q,4CAAA2Q,WAAA,IAAA,/DAASE;IACHH,OAAK,AAACnR,gBAAMsR;IACZE,YAAU,iBAAAnF,qBAAkB,AAAA,6FAAa,AAACtK,eAAKsP;AAArC,AAAA,oBAAAhF;AAAA,eAAAA,XAAS1J;AAAT,AAAA,0FAAA,+DACeA;;AACboN;;;IACZlQ,YAAM,iBAAA4R,WACE,2DAAA,8HAAA,8DAAA,mFAAA,0KAAA,oKAAA,xpBAAC9K,qDAAM9G,wEACc2R,4QACW,AAAA,6FAAaL,8EACzB,AAAA,8FAAcA,oFACP,AAAA,4GAAqBA;AALlD,AAAAM;;IAONX,uBAAS,cAAK,iDAAA,jDAAC1H,+CAAOiI,qFAAGxR,lJAAQ4L;IACjCsF,sBAAQ,AAACvF,6CAAKvH,OAAOpE;AAb3B,AAAA,0FAcG0Q,OAAOO,qBAASC;;EArDvB;iBALN,AAAAtQ,4CAAA6P,WAAA,IAAA,xEAIOzF;kBAJP,AAAApK,4CAAA6P,WAAA,IAAA,zEAIcrF;iBAJd,AAAAxK,4CAAA6P,WAAA,IAAA,xEAIsBrM;AAJtB,AA2DE,eAAO4G;eAAOI;eAAQhH","names":["logseq.graph-parser.block/heading-block?","block","cljs.core/vector?","cljs.core._EQ_","cljs.core/first","logseq.graph-parser.block/get-tag","temp__5720__auto__","tag-value","and__4251__auto__","cljs.core/second","cljs.core.map","p__62787","vec__62788","cljs.core.nth","elem","value","G__62791","clojure.string.join","logseq.graph-parser.block/get-page-reference","supported-formats","page","typ","or__4253__auto__","cljs.core/not","logseq.graph-parser.config/local-asset?","logseq.graph-parser.config/draw?","logseq.graph-parser.text/page-ref?","logseq.graph-parser.text/page-ref-un-brackets!","cljs.core/contains?","ext","G__62792","logseq.graph-parser.util/get-file-ext","cljs.core.keyword","clojure.string/starts-with?","content","cljs.core/last","cljs.core.subs","cljs.core/count","map__62793","cljs.core/--destructure-map","cljs.core.get","name","arguments","argument","text","logseq.graph-parser.text/block-ref-un-brackets!","logseq.graph-parser.block/get-block-reference","block-id","cljs.core/map?","map__62794","clojure.string/ends-with?","id","logseq.graph-parser.util/uuid-string?","logseq.graph-parser.block/paragraph-block?","logseq.graph-parser.block/timestamp-block?","logseq.graph-parser.block/extract-properties","format","properties","user-config","cljs.core/seq","page-refs","cljs.core.remove","p__62796","vec__62797","k","_","v","logseq.graph-parser.mldoc/link?","clojure.string/trim","result","logseq.graph_parser.text.split_page_refs_without_brackets","cljs.core/coll?","cljs.core.apply","cljs.core/concat","clojure.string/blank?","p__62800","vec__62801","clojure.string/lower-case","cljs.core/name","clojure.string/replace","logseq.graph_parser.text.parse_property","cljs.core/set","p1__62795#","cljs.core.into","logseq.graph-parser.block/paragraph-timestamp-block?","logseq.graph-parser.block/extract-timestamps","G__62804","cljs.core.filter","logseq.graph-parser.block/timestamps->scheduled-and-deadline","timestamps","logseq.graph-parser.util/map-keys","cljs.core.comp","cljs.core/keyword","m","G__62805","cljs.core/select-keys","p__62806","vec__62807","map__62810","map__62811","date","repetition","year","month","day","js/parseInt","logseq.graph-parser.util/zero-pad","G__62812","G__62813","cljs.core/Keyword","js/Error","cljs.core.assoc","cljs.core/merge","logseq.graph-parser.block/convert-page-if-journal","original-page-name","date-formatter","page-name","logseq.graph-parser.util/page-name-sanity-lc","logseq.graph-parser.date-time-util/journal-title->int","logseq.graph-parser.date-time-util/safe-journal-title-formatters","logseq.graph-parser.date-time-util/int->journal-title","logseq.graph-parser.block/page-name->map","with-id?","db","with-timestamp?","vec__62814","logseq.graph-parser.util/remove-boundary-slashes","journal-day","namespace?","cljs.core/boolean","logseq.graph-parser.text/get-nested-page-name","logseq.graph-parser.text/namespace-page?","page-entity","G__62817","G__62818","G__62819","datascript.core/entity","cljs.core.merge","datascript.core.squuid","namespace","logseq.graph-parser.util/split-last","current-ms","logseq.graph-parser.date-time-util/time-ms","p__62827","map__62828","logseq.graph-parser.block/with-page-refs","title","body","tags","refs","marker","priority","cljs.core.concat","cljs.core.distinct","cljs.core.atom","clojure.walk/prewalk","form","cljs.core.swap_BANG_","cljs.core/conj","tag","logseq.graph-parser.util/tag-valid?","cljs.core/deref","children-pages","cljs.core.mapcat","p","logseq.graph-parser.util/split-namespace-pages","cljs.core/nil?","ref","p__62832","map__62833","logseq.graph-parser.block/with-block-refs","ref-blocks","clojure.walk/postwalk","cljs.core/uuid","logseq.graph-parser.block/block-keywordize","cljs.core/namespace","logseq.graph-parser.block/sanity-blocks-data","blocks","logseq.graph-parser.util/remove-nils","logseq.graph-parser.block/with-path-refs","acc","parents","cljs.core/empty?","vec__62851","cur-level","level-diff","path-refs","cljs.core.drop_last","cljs.core.conj","cljs.core/vec","cljs.core/butlast","cljs.core.take_while","path-ref-pages","cljs.core/rest","p__62860","map__62861","logseq.graph-parser.block/block-tags->pages","logseq.graph-parser.block/get-block-content","utf8-content","meta","block-pattern","temp__5718__auto__","end-pos","logseq.graph_parser.utf8.substring","logseq.graph_parser.text.remove_level_spaces","logseq.graph-parser.mldoc/remove-indentation-spaces","logseq.graph-parser.property/->new-properties","logseq.graph-parser.block/get-custom-id-or-new-id","custom-id","cljs.core.get_in","logseq.graph-parser.block/get-page-refs-from-properties","cljs.core/vals","logseq.graph-parser.block/with-page-block-refs","G__62882","cljs.core.update","col","p__62898","map__62899","logseq.graph-parser.block/with-pre-block-if-exists","pre-block-properties","encoded-content","first-block","first-block-start-pos","cljs.core/cons","map__62901","properties-order","property-refs","p__62908","map__62909","logseq.graph-parser.block/construct-block","pos-meta","map__62910","ref-pages-in-properties","unordered?","markdown-heading?","G__62911","created-at","updated-at","G__62914","cljs.core/integer?","cljs.core.dissoc","p__62922","map__62923","logseq.graph-parser.block/extract-blocks","options","cljs.core/boolean?","e62932","vec__62933","logseq.graph-parser.utf8/encode","headings","cljs.core/reverse","vec__62945","timestamps'","logseq.graph-parser.property/properties-ast?","p1__62920#","e","lambdaisland.glogi.log","cljs.core/identity","logseq.graph-parser.block/with-parent-and-left","page-id","p1__62953#","vec__62984","seq__62985","first__62986","cljs.core/next","map__62987","vec__62988","others","level-spaces","uuid","level","parent","last-parent","parent-spaces","parents'","result'","G__62995","p1__62955#","cljs.core/some","left","vec__62998","f","r","cljs.core/split-with","parent-id","G__63002"],"sourcesContent":["(ns ^:nbb-compatible logseq.graph-parser.block\n  ;; Disable clj linters since we don't support clj\n  #?(:clj {:clj-kondo/config {:linters {:unresolved-namespace {:level :off}\n                                        :unresolved-symbol {:level :off}}}})\n  \"Block related code needed for graph-parser\"\n  (:require [clojure.string :as string]\n            [clojure.walk :as walk]\n            [datascript.core :as d]\n            [logseq.graph-parser.text :as text]\n            [logseq.graph-parser.utf8 :as utf8]\n            [logseq.graph-parser.property :as gp-property]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.config :as gp-config]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.date-time-util :as date-time-util]\n            #?(:org.babashka/nbb [logseq.graph-parser.log :as log]\n               :default [lambdaisland.glogi :as log])))\n\n(defn heading-block?\n  [block]\n  (and\n   (vector? block)\n   (= \"Heading\" (first block))))\n\n(defn get-tag\n  [block]\n  (when-let [tag-value (and (vector? block)\n                            (= \"Tag\" (first block))\n                            (second block))]\n    (->> tag-value\n         (map (fn [[elem value]]\n                (case elem\n                  \"Plain\" value\n                  \"Link\" (:full_text value)\n                  \"Nested_link\" (:content value)\n                  \"\")))\n         (string/join))))\n\n(defn- get-page-reference\n  [block supported-formats]\n  (let [page (cond\n               (and (vector? block) (= \"Link\" (first block)))\n               (let [typ (first (:url (second block)))\n                     value (second (:url (second block)))]\n                 ;; {:url [\"File\" \"file:../pages/hello_world.org\"], :label [[\"Plain\" \"hello world\"]], :title nil}\n                 (or\n                  (and\n                   (= typ \"Page_ref\")\n                   (and (string? value)\n                        (not (or (gp-config/local-asset? value)\n                                 (gp-config/draw? value))))\n                   value)\n\n                  (and\n                   (= typ \"Search\")\n                   (text/page-ref? value)\n                   (text/page-ref-un-brackets! value))\n\n                  (and\n                   (= typ \"Search\")\n                   (not (contains? #{\\# \\* \\/ \\[} (first value)))\n                   (let [ext (some-> (gp-util/get-file-ext value) keyword)]\n                     (when (and (not (string/starts-with? value \"http:\"))\n                                (not (string/starts-with? value \"https:\"))\n                                (not (string/starts-with? value \"file:\"))\n                                (not (gp-config/local-asset? value))\n                                (or (= ext :excalidraw)\n                                    (not (contains? supported-formats ext))))\n                       value)))\n\n                  (and\n                   (= typ \"Complex\")\n                   (= (:protocol value) \"file\")\n                   (:link value))\n\n                  (and\n                   (= typ \"File\")\n                   (second (first (:label (second block)))))))\n\n               (and (vector? block) (= \"Nested_link\" (first block)))\n               (let [content (:content (last block))]\n                 (subs content 2 (- (count content) 2)))\n\n               (and (vector? block)\n                    (= \"Macro\" (first block)))\n               (let [{:keys [name arguments]} (second block)\n                     argument (string/join \", \" arguments)]\n                   (when (= name \"embed\")\n                     (text/page-ref-un-brackets! argument)))\n\n               (and (vector? block)\n                    (= \"Tag\" (first block)))\n               (let [text (get-tag block)]\n                 (text/page-ref-un-brackets! text))\n\n               :else\n               nil)]\n    (text/block-ref-un-brackets! page)))\n\n(defn- get-block-reference\n  [block]\n  (when-let [block-id (cond\n                        (and (vector? block)\n                             (= \"Block_reference\" (first block)))\n                        (last block)\n\n                        (and (vector? block)\n                             (= \"Link\" (first block))\n                             (map? (second block))\n                             (= \"Block_ref\" (first (:url (second block)))))\n                        (second (:url (second block)))\n\n                        (and (vector? block)\n                             (= \"Macro\" (first block)))\n                        (let [{:keys [name arguments]} (second block)]\n                          (when (and (= name \"embed\")\n                                     (string? (first arguments))\n                                     (string/starts-with? (first arguments) \"((\")\n                                     (string/ends-with? (first arguments) \"))\"))\n                            (subs (first arguments) 2 (- (count (first arguments)) 2))))\n\n                        (and (vector? block)\n                             (= \"Link\" (first block))\n                             (map? (second block)))\n                        (if (= \"id\" (:protocol (second (:url (second block)))))\n                          (:link (second (:url (second block))))\n                          (let [id (second (:url (second block)))]\n                            (text/block-ref-un-brackets! id)))\n\n                        :else\n                        nil)]\n    (when (and block-id\n               (gp-util/uuid-string? block-id))\n      block-id)))\n\n(defn- paragraph-block?\n  [block]\n  (and\n   (vector? block)\n   (= \"Paragraph\" (first block))))\n\n(defn timestamp-block?\n  [block]\n  (and\n   (vector? block)\n   (= \"Timestamp\" (first block))))\n\n;; TODO: we should move this to mldoc\n(defn extract-properties\n  [format properties user-config]\n  (when (seq properties)\n    (let [properties (seq properties)\n          page-refs (->>\n                     properties\n                     (remove (fn [[k _]]\n                               (contains? #{:background-color :background_color} (keyword k))))\n                     (map last)\n                     (map (fn [v]\n                            (when (and (string? v)\n                                       (not (gp-mldoc/link? format v)))\n                              (let [v (string/trim v)\n                                    result (text/split-page-refs-without-brackets v {:un-brackets? false})]\n                                (if (coll? result)\n                                  (map text/page-ref-un-brackets! result)\n                                  [])))))\n                     (apply concat)\n                     (remove string/blank?))\n          properties (->> properties\n                          (map (fn [[k v]]\n                                 (let [k (-> (string/lower-case (name k))\n                                             (string/replace \" \" \"-\")\n                                             (string/replace \"_\" \"-\"))\n                                       k (if (contains? #{\"custom_id\" \"custom-id\"} k)\n                                           \"id\"\n                                           k)\n                                       v (if (coll? v)\n                                           (remove string/blank? v)\n                                           (if (string/blank? v)\n                                             nil\n                                             (text/parse-property format k v user-config)))\n                                       k (keyword k)\n                                       v (if (and\n                                              (string? v)\n                                              (contains? #{:alias :aliases :tags} k))\n                                           (set [v])\n                                           v)\n                                       v (if (coll? v) (set v) v)]\n                                   [k v])))\n                          (remove #(nil? (second %))))]\n      {:properties (into {} properties)\n       :properties-order (map first properties)\n       :page-refs page-refs})))\n\n(defn- paragraph-timestamp-block?\n  [block]\n  (and (paragraph-block? block)\n       (or (timestamp-block? (first (second block)))\n           (timestamp-block? (second (second block))))))\n\n(defn- extract-timestamps\n  [block]\n  (some->>\n   (second block)\n   (filter timestamp-block?)\n   (map last)\n   (into {})))\n\n;; {\"Deadline\" {:date {:year 2020, :month 10, :day 20}, :wday \"Tue\", :time {:hour 8, :min 0}, :repetition [[\"DoublePlus\"] [\"Day\"] 1], :active true}}\n(defn timestamps->scheduled-and-deadline\n  [timestamps]\n  (let [timestamps (gp-util/map-keys (comp keyword string/lower-case) timestamps)\n        m (some->> (select-keys timestamps [:scheduled :deadline])\n                   (map (fn [[k v]]\n                          (let [{:keys [date repetition]} v\n                                {:keys [year month day]} date\n                                day (js/parseInt (str year (gp-util/zero-pad month) (gp-util/zero-pad day)))]\n                            (cond->\n                             (case k\n                               :scheduled\n                               {:scheduled day}\n                               :deadline\n                               {:deadline day})\n                              repetition\n                              (assoc :repeated? true))))))]\n    (apply merge m)))\n\n(defn convert-page-if-journal\n  \"Convert journal file name to user' custom date format\"\n  [original-page-name date-formatter]\n  (when original-page-name\n    (let [page-name (gp-util/page-name-sanity-lc original-page-name)\n          day (date-time-util/journal-title->int page-name (date-time-util/safe-journal-title-formatters date-formatter))]\n     (if day\n       (let [original-page-name (date-time-util/int->journal-title day date-formatter)]\n         [original-page-name (gp-util/page-name-sanity-lc original-page-name) day])\n       [original-page-name page-name day]))))\n\n(defn page-name->map\n  \"Create a page's map structure given a original page name (string).\n   map as input is supported for legacy compatibility.\n   with-timestamp?: assign timestampes to the map structure.\n    Useful when creating new pages from references or namespaces,\n    as there's no chance to introduce timestamps via editing in page\"\n  [original-page-name with-id? db with-timestamp? date-formatter]\n  (cond\n    (and original-page-name (string? original-page-name))\n    (let [original-page-name (gp-util/remove-boundary-slashes original-page-name)\n          [original-page-name page-name journal-day] (convert-page-if-journal original-page-name date-formatter)\n          namespace? (and (not (boolean (text/get-nested-page-name original-page-name)))\n                          (text/namespace-page? original-page-name))\n          page-entity (some-> db (d/entity [:block/name page-name]))\n          original-page-name (or (:block/original-name page-entity) original-page-name)]\n      (merge\n       {:block/name page-name\n        :block/original-name original-page-name}\n       (when with-id?\n         (if page-entity\n           {:block/uuid (:block/uuid page-entity)}\n           {:block/uuid (d/squuid)}))\n       (when namespace?\n         (let [namespace (first (gp-util/split-last \"/\" original-page-name))]\n           (when-not (string/blank? namespace)\n             {:block/namespace {:block/name (gp-util/page-name-sanity-lc namespace)}})))\n       (when (and with-timestamp? (not page-entity)) ;; Only assign timestamp on creating new entity\n         (let [current-ms (date-time-util/time-ms)]\n           {:block/created-at current-ms\n            :block/updated-at current-ms}))\n       (if journal-day\n         {:block/journal? true\n          :block/journal-day journal-day}\n         {:block/journal? false})))\n\n    (and (map? original-page-name) (:block/uuid original-page-name))\n    original-page-name\n\n    (and (map? original-page-name) with-id?)\n    (assoc original-page-name :block/uuid (d/squuid))\n\n    :else\n    nil))\n\n(defn- with-page-refs\n  [{:keys [title body tags refs marker priority] :as block} with-id? supported-formats db date-formatter]\n  (let [refs (->> (concat tags refs [marker priority])\n                  (remove string/blank?)\n                  (distinct))\n        refs (atom refs)]\n    (walk/prewalk\n     (fn [form]\n       ;; skip custom queries\n       (when-not (and (vector? form)\n                      (= (first form) \"Custom\")\n                      (= (second form) \"query\"))\n         (when-let [page (get-page-reference form supported-formats)]\n           (swap! refs conj page))\n         (when-let [tag (get-tag form)]\n           (let [tag (text/page-ref-un-brackets! tag)]\n             (when (gp-util/tag-valid? tag)\n               (swap! refs conj tag))))\n         form))\n     (concat title body))\n    (let [refs (remove string/blank? @refs)\n          children-pages (->> (mapcat (fn [p]\n                                        (let [p (if (map? p)\n                                                  (:block/original-name p)\n                                                  p)]\n                                          (when (string? p)\n                                            (let [p (or (text/get-nested-page-name p) p)]\n                                              (when (text/namespace-page? p)\n                                                (gp-util/split-namespace-pages p))))))\n                                      refs)\n                              (remove string/blank?)\n                              (distinct))\n          refs (->> (distinct (concat refs children-pages))\n                    (remove nil?))\n          refs (map (fn [ref] (page-name->map ref with-id? db true date-formatter)) refs)]\n      (assoc block :refs refs))))\n\n(defn- with-block-refs\n  [{:keys [title body] :as block}]\n  (let [ref-blocks (atom nil)]\n    (walk/postwalk\n     (fn [form]\n       (when-let [block (get-block-reference form)]\n         (swap! ref-blocks conj block))\n       form)\n     (concat title body))\n    (let [ref-blocks (->> @ref-blocks\n                          (filter gp-util/uuid-string?))\n          ref-blocks (map\n                       (fn [id]\n                         [:block/uuid (uuid id)])\n                       ref-blocks)\n          refs (distinct (concat (:refs block) ref-blocks))]\n      (assoc block :refs refs))))\n\n(defn- block-keywordize\n  [block]\n  (gp-util/map-keys\n   (fn [k]\n     (if (namespace k)\n       k\n       (keyword \"block\" k)))\n   block))\n\n(defn- sanity-blocks-data\n  [blocks]\n  (map (fn [block]\n         (if (map? block)\n           (block-keywordize (gp-util/remove-nils block))\n           block))\n       blocks))\n\n(defn- with-path-refs\n  [blocks]\n  (loop [blocks blocks\n         acc []\n         parents []]\n    (if (empty? blocks)\n      acc\n      (let [block (first blocks)\n            cur-level (:block/level block)\n            level-diff (- cur-level\n                          (get (last parents) :block/level 0))\n            [path-refs parents]\n            (cond\n              (zero? level-diff)            ; sibling\n              (let [path-refs (mapcat :block/refs (drop-last parents))\n                    parents (conj (vec (butlast parents)) block)]\n                [path-refs parents])\n\n              (> level-diff 0)              ; child\n              (let [path-refs (mapcat :block/refs parents)]\n                [path-refs (conj parents block)])\n\n              (< level-diff 0)              ; new parent\n              (let [parents (vec (take-while (fn [p] (< (:block/level p) cur-level)) parents))\n                    path-refs (mapcat :block/refs parents)]\n                [path-refs (conj parents block)]))\n            path-ref-pages (->> path-refs\n                                (concat (:block/refs block))\n                                (map (fn [ref]\n                                       (cond\n                                         (map? ref)\n                                         (:block/name ref)\n\n                                         :else\n                                         ref)))\n                                (remove string/blank?)\n                                (map (fn [ref]\n                                       (if (string? ref)\n                                         {:block/name (gp-util/page-name-sanity-lc ref)}\n                                         ref)))\n                                (remove vector?)\n                                (remove nil?)\n                                (distinct))]\n        (recur (rest blocks)\n               (conj acc (assoc block :block/path-refs path-ref-pages))\n               parents)))))\n\n(defn- block-tags->pages\n  [{:keys [tags] :as block}]\n  (if (seq tags)\n    (assoc block :tags (map (fn [tag]\n                              (let [tag (text/page-ref-un-brackets! tag)]\n                                [:block/name (gp-util/page-name-sanity-lc tag)])) tags))\n    block))\n\n(defn- get-block-content\n  [utf8-content block format meta block-pattern]\n  (let [content (if-let [end-pos (:end_pos meta)]\n                  (utf8/substring utf8-content\n                                  (:start_pos meta)\n                                  end-pos)\n                  (utf8/substring utf8-content\n                                  (:start_pos meta)))\n        content (when content\n                  (let [content (text/remove-level-spaces content format block-pattern)]\n                    (if (or (:pre-block? block)\n                            (= (:format block) :org))\n                      content\n                      (gp-mldoc/remove-indentation-spaces content (inc (:level block)) false))))]\n    (if (= format :org)\n      content\n      (gp-property/->new-properties content))))\n\n(defn- get-custom-id-or-new-id\n  [properties]\n  (or (when-let [custom-id (or (get-in properties [:properties :custom-id])\n                               (get-in properties [:properties :custom_id])\n                               (get-in properties [:properties :id]))]\n        (let [custom-id (and (string? custom-id) (string/trim custom-id))]\n          (when (and custom-id (gp-util/uuid-string? custom-id))\n            (uuid custom-id))))\n      (d/squuid)))\n\n(defn get-page-refs-from-properties\n  [properties db date-formatter]\n  (let [page-refs (mapcat (fn [v] (cond\n                                   (coll? v)\n                                   v\n\n                                   (text/page-ref? v)\n                                   [(text/page-ref-un-brackets! v)]\n\n                                   :else\n                                   nil)) (vals properties))\n        page-refs (remove string/blank? page-refs)]\n    (map (fn [page] (page-name->map page true db true date-formatter)) page-refs)))\n\n(defn- with-page-block-refs\n  [block with-id? supported-formats db date-formatter]\n  (some-> block\n          (with-page-refs with-id? supported-formats db date-formatter)\n          with-block-refs\n          block-tags->pages\n          (update :refs (fn [col] (remove nil? col)))))\n\n(defn- with-pre-block-if-exists\n  [blocks body pre-block-properties encoded-content {:keys [supported-formats db date-formatter]}]\n  (let [first-block (first blocks)\n        first-block-start-pos (get-in first-block [:block/meta :start_pos])\n\n        ;; Add pre-block\n        blocks (if (or (> first-block-start-pos 0)\n                       (empty? blocks))\n                 (cons\n                  (merge\n                   (let [content (utf8/substring encoded-content 0 first-block-start-pos)\n                         {:keys [properties properties-order]} pre-block-properties\n                         id (get-custom-id-or-new-id {:properties properties})\n                         property-refs (->> (get-page-refs-from-properties properties db date-formatter)\n                                            (map :block/original-name))\n                         block {:uuid id\n                                :content content\n                                :level 1\n                                :properties properties\n                                :properties-order properties-order\n                                :refs property-refs\n                                :pre-block? true\n                                :unordered true\n                                :body body}\n                         block (with-page-block-refs block false supported-formats db date-formatter)]\n                     (block-keywordize block))\n                   (select-keys first-block [:block/format :block/page]))\n                  blocks)\n                 blocks)]\n    (with-path-refs blocks)))\n\n(defn- construct-block\n  [block properties timestamps body encoded-content format pos-meta with-id? {:keys [block-pattern supported-formats db date-formatter]}]\n  (let [id (get-custom-id-or-new-id properties)\n        ref-pages-in-properties (->> (:page-refs properties)\n                                     (remove string/blank?))\n        block (second block)\n        unordered? (:unordered block)\n        markdown-heading? (and (:size block) (= :markdown format))\n        block (if markdown-heading?\n                (assoc block\n                       :type :heading\n                       :level (if unordered? (:level block) 1)\n                       :heading-level (or (:size block) 6))\n                block)\n        block (cond->\n                (assoc block\n                       :uuid id\n                       :refs ref-pages-in-properties\n                       :format format\n                       :meta pos-meta)\n                (seq (:properties properties))\n                (assoc :properties (:properties properties))\n\n                (seq (:properties-order properties))\n                (assoc :properties-order (:properties-order properties)))\n        block (if (get-in block [:properties :collapsed])\n                (assoc block :collapsed? true)\n                block)\n        block (assoc block\n                     :content (get-block-content encoded-content block format pos-meta block-pattern))\n        block (if (seq timestamps)\n                (merge block (timestamps->scheduled-and-deadline timestamps))\n                block)\n        block (assoc block :body body)\n        block (with-page-block-refs block with-id? supported-formats db date-formatter)\n        {:keys [created-at updated-at]} (:properties properties)\n        block (cond-> block\n                (and created-at (integer? created-at))\n                (assoc :block/created-at created-at)\n\n                (and updated-at (integer? updated-at))\n                (assoc :block/updated-at updated-at))]\n    (dissoc block :title :body :anchor)))\n\n(defn extract-blocks\n  \"Extract headings from mldoc ast.\n  Args:\n    `blocks`: mldoc ast.\n    `content`: markdown or org-mode text.\n    `with-id?`: If `with-id?` equals to true, all the referenced pages will have new db ids.\n    `format`: content's format, it could be either :markdown or :org-mode.\n    `options`: Options supported are :user-config, :block-pattern :supported-formats,\n     :date-formatter and :db\"\n  [blocks content with-id? format {:keys [user-config] :as options}]\n  {:pre [(seq blocks) (string? content) (boolean? with-id?) (contains? #{:markdown :org} format)]}\n  (try\n    (let [encoded-content (utf8/encode content)\n          [blocks body pre-block-properties]\n          (loop [headings []\n                 blocks (reverse blocks)\n                 timestamps {}\n                 properties {}\n                 body []]\n            (if (seq blocks)\n              (let [[block pos-meta] (first blocks)\n                    ;; fix start_pos\n                    pos-meta (assoc pos-meta :end_pos\n                                    (if (seq headings)\n                                      (get-in (last headings) [:meta :start_pos])\n                                      nil))]\n                (cond\n                  (paragraph-timestamp-block? block)\n                  (let [timestamps (extract-timestamps block)\n                        timestamps' (merge timestamps timestamps)]\n                    (recur headings (rest blocks) timestamps' properties body))\n\n                  (gp-property/properties-ast? block)\n                  (let [properties (extract-properties format (second block) user-config)]\n                    (recur headings (rest blocks) timestamps properties body))\n\n                  (heading-block? block)\n                  (let [block (construct-block block properties timestamps body encoded-content format pos-meta with-id? options)]\n                    (recur (conj headings block) (rest blocks) {} {} []))\n\n                  :else\n                  (recur headings (rest blocks) timestamps properties (conj body block))))\n              [(-> (reverse headings)\n                   sanity-blocks-data)\n               body\n               properties]))\n          result (with-pre-block-if-exists blocks body pre-block-properties encoded-content options)]\n      (map #(dissoc % :block/meta) result))\n    (catch :default e\n      (log/error :extract-blocks-failure e))))\n\n(defn with-parent-and-left\n  [page-id blocks]\n  (loop [blocks (map (fn [block] (assoc block :block/level-spaces (:block/level block))) blocks)\n         parents [{:page/id page-id     ; db id or a map {:block/name \"xxx\"}\n                   :block/level 0\n                   :block/level-spaces 0}]\n         result []]\n    (if (empty? blocks)\n      (map #(dissoc % :block/level-spaces) result)\n      (let [[block & others] blocks\n            level-spaces (:block/level-spaces block)\n            {:block/keys [uuid level parent] :as last-parent} (last parents)\n            parent-spaces (:block/level-spaces last-parent)\n            [blocks parents result]\n            (cond\n              (= level-spaces parent-spaces)        ; sibling\n              (let [block (assoc block\n                                 :block/parent parent\n                                 :block/left [:block/uuid uuid]\n                                 :block/level level)\n                    parents' (conj (vec (butlast parents)) block)\n                    result' (conj result block)]\n                [others parents' result'])\n\n              (> level-spaces parent-spaces)         ; child\n              (let [parent (if uuid [:block/uuid uuid] (:page/id last-parent))\n                    block (cond->\n                            (assoc block\n                                  :block/parent parent\n                                  :block/left parent)\n                            ;; fix block levels with wrong order\n                            ;; For example:\n                            ;;   - a\n                            ;; - b\n                            ;; What if the input indentation is two spaces instead of 4 spaces\n                            (>= (- level-spaces parent-spaces) 1)\n                            (assoc :block/level (inc level)))\n                    parents' (conj parents block)\n                    result' (conj result block)]\n                [others parents' result'])\n\n              (< level-spaces parent-spaces)\n              (cond\n                (some #(= (:block/level-spaces %) (:block/level-spaces block)) parents) ; outdent\n                (let [parents' (vec (filter (fn [p] (<= (:block/level-spaces p) level-spaces)) parents))\n                      left (last parents')\n                      blocks (cons (assoc (first blocks)\n                                          :block/level (dec level)\n                                          :block/left [:block/uuid (:block/uuid left)])\n                                   (rest blocks))]\n                  [blocks parents' result])\n\n                :else\n                (let [[f r] (split-with (fn [p] (<= (:block/level-spaces p) level-spaces)) parents)\n                      left (first r)\n                      parent-id (if-let [block-id (:block/uuid (last f))]\n                                  [:block/uuid block-id]\n                                  page-id)\n                      block (cond->\n                              (assoc block\n                                     :block/parent parent-id\n                                     :block/left [:block/uuid (:block/uuid left)]\n                                     :block/level (:block/level left)\n                                     :block/level-spaces (:block/level-spaces left)))\n\n                      parents' (->> (concat f [block]) vec)\n                      result' (conj result block)]\n                  [others parents' result'])))]\n        (recur blocks parents result)))))\n"]}