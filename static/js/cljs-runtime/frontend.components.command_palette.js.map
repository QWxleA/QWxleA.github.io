{"version":3,"sources":["frontend/components/command_palette.cljs"],"mappings":"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","names":["p__71579","map__71580","cljs.core/--destructure-map","cljs.core.get","frontend.components.command-palette/translate","t","id","desc","desc-i18n","G__71581","frontend.modules.shortcut.data-helper/decorate-namespace","clojure.string/starts-with?","frontend.components.command-palette/get-matched-commands","commands","input","limit","frontend.search.fuzzy_search","cljs.core.partial","rum.core/lazy-build","rum.core/build-defc","p__71582","map__71583","daiquiri.core/create-element","daiquiri.util/join-classes","attrs71584","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","attrs71585","attrs71586","attrs71587","frontend.components.command-palette/render-command","shortcut","cmd","chosen?","first-shortcut","cljs.core/first","clojure.string.split","frontend.context.i18n/t","and__4251__auto__","cljs.core/Keyword","cljs.core/namespace","clojure.string/blank?","rum.core/build-defcs","p__71605","map__71607","cljs.core/deref","rum.core/mark-sync-update","frontend.components.command-palette/command-palette","frontend.modules.shortcut.core/disable-all-shortcuts","rum.core.local","state","frontend.state/set-state!","frontend.context.i18n.t","e","cljs.core/reset!","frontend.util/evalue","frontend.ui/auto-complete","frontend.handler.command-palette/top-commands","frontend.handler.command-palette/invoke-command","frontend.components.command-palette/command-palette-modal","rum.core/reactive","open?","frontend.state/sub","frontend.state.set_modal_BANG_","frontend.handler.command-palette/get-commands"],"sourcesContent":["(ns frontend.components.command-palette\n  (:require [frontend.handler.command-palette :as cp]\n            [frontend.modules.shortcut.core :as shortcut]\n            [frontend.modules.shortcut.data-helper :as shortcut-helper]\n            [frontend.context.i18n :refer [t]]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [rum.core :as rum]\n            [clojure.string :as string]))\n\n(defn translate [t {:keys [id desc]}]\n  (when id\n    (let [desc-i18n (t (shortcut-helper/decorate-namespace id))]\n      (if (string/starts-with? desc-i18n \"{Missing key\")\n        desc\n        desc-i18n))))\n\n(defn get-matched-commands [commands input limit t]\n  (search/fuzzy-search commands input :limit limit :extract-fn (partial translate t)))\n\n(rum/defc render-command\n  [{:keys [id shortcut] :as cmd} chosen?]\n  (let [first-shortcut (first (string/split shortcut #\" \\| \"))\n        desc (translate t cmd)]\n    [:div.inline-grid.grid-cols-4.gap-x-4.w-full\n     {:class (when chosen? \"chosen\")}\n     [:span.col-span-3 desc]\n     [:div.col-span-1.justify-end.tip.flex\n      (when (and (keyword? id) (namespace id))\n        [:code.opacity-20.bg-transparent (namespace id)])\n      (when-not (string/blank? first-shortcut)\n        [:code.ml-1 first-shortcut])]]))\n\n(rum/defcs command-palette <\n  (shortcut/disable-all-shortcuts)\n  (rum/local \"\" ::input)\n  {:will-unmount (fn [state]\n                   (state/set-state! :ui/command-palette-open? false)\n                   state)}\n  [state {:keys [commands limit]\n          :or {limit 100}}]\n  (let [input (::input state)]\n    [:div.cp__palette.cp__palette-main\n     [:div.input-wrap\n      [:input.cp__palette-input.w-full\n       {:type        \"text\"\n        :placeholder (t :command-palette/prompt)\n        :auto-focus  true\n        :value       @input\n        :on-change   (fn [e] (reset! input (util/evalue e)))}]]\n\n     [:div.command-results-wrap\n      (ui/auto-complete\n       (if (string/blank? @input)\n         (cp/top-commands limit)\n         (get-matched-commands commands @input limit t))\n       {:item-render render-command\n        :class       \"cp__palette-results\"\n        :on-chosen   (fn [cmd] (cp/invoke-command cmd))})]]))\n\n(rum/defc command-palette-modal < rum/reactive\n  []\n  (let [open? (state/sub :ui/command-palette-open?)]\n    (when open?\n      (state/set-modal!\n       #(command-palette {:commands (cp/get-commands)})\n       {:fullscreen? false\n        :close-btn?  false}))\n    nil))\n"]}