{"version":3,"sources":["frontend/util/clock.cljs"],"mappings":"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","names":["frontend.util.clock/minutes->hours:minutes","minutes","hours","cljs.core/quot","cljs.core/mod","frontend.util.format","frontend.util.clock/seconds->hours:minutes:seconds","seconds","frontend.util.clock/minutes->days:hours:minutes","days","frontend.util.clock/support-seconds?","cljs.core.get","frontend.state.get_config","frontend.util.clock/now","frontend.date/get-date-time-string-4","frontend.date/get-date-time-string-3","frontend.util.clock/clock-interval","stime","etime","vec__62521","cljs.core.nth","p1__62520#","cljs.core.map","cljs_time.format.parse","frontend.date/custom-formatter-4","frontend.date/custom-formatter-3","interval","cljs-time.core/interval","cljs-time.core/in-minutes","cljs-time.core/in-seconds","frontend.util.clock/clock-in","format","content","frontend.util.drawer/insert-drawer","frontend.util.clock/clock-out","e62524","or__4253__auto__","temp__5720__auto__","clock-in-log","cljs.core/last","frontend.util.drawer/get-drawer-ast","clojure.string/trim","clojure.string/starts-with?","clock-start","cljs.core.subs","clock-end","clock-span","clock-out-log","clojure.string/replace","js/Error","_e","frontend.util.clock/clock-summary","body","string?","logbook","frontend.util.drawer/get-logbook","logbook-lines","clock-lines","cljs.core/seq","p1__62525#","cljs.core.filter","vec__62528","cljs.core.apply","cljs.core/map","cljs.core/+","p1__62526#","clojure.string.split","p1__62527#","cljs.core/int","duration","cljs_time.core.period","duration-in-minutes","zero-minutes?","cljs-time.format/unparse-duration"],"sourcesContent":["(ns frontend.util.clock\n  (:require [frontend.state :as state]\n            [frontend.util.drawer :as drawer]\n            [frontend.util :as util]\n            [cljs-time.core :as t]\n            [cljs-time.format :as tf]\n            [frontend.date :as date]\n            [clojure.string :as string]))\n\n(defn minutes->hours:minutes\n  [minutes]\n  (let [hours (quot minutes 60)\n        minutes (mod minutes 60)]\n    (util/format \"%02d:%02d\" hours minutes)))\n\n(defn seconds->hours:minutes:seconds\n  [seconds]\n  (let [hours (quot seconds 3600)\n        minutes (quot (- seconds (* hours 3600)) 60)\n        seconds (mod seconds 60)]\n    (util/format \"%02d:%02d:%02d\" hours minutes seconds)))\n\n(defn minutes->days:hours:minutes\n  [minutes]\n  (let [days (quot (quot minutes 60) 24)\n        hours (quot (- minutes (* days 60 24)) 60)\n        minutes (mod minutes 60)]\n    (util/format \"%s%s%s\"\n                 (if (zero? days) \"\" (str days \"d\"))\n                 (if (zero? hours) \"\" (str hours \"h\"))\n                 (if (zero? minutes) \"\" (str minutes \"m\")))))\n\n(def support-seconds?\n  (get (state/get-config)\n       [:logbook/settings :with-second-support?] true))\n\n(defn- now []\n  (if support-seconds?\n    (date/get-date-time-string-4)\n    (date/get-date-time-string-3)))\n\n(defn- clock-interval\n  [stime etime]\n  (let [[stime etime] (map #(tf/parse\n                             (if support-seconds?\n                               date/custom-formatter-4\n                               date/custom-formatter-3)\n                             %)\n                           [stime etime])\n        interval (t/interval stime etime)\n        minutes (t/in-minutes interval)\n        seconds (t/in-seconds interval)]\n    (if support-seconds?\n      (seconds->hours:minutes:seconds seconds)\n      (minutes->hours:minutes minutes))))\n\n(defn clock-in\n  [format content]\n  (drawer/insert-drawer\n   format content \"logbook\"\n   (util/format \"CLOCK: [%s]\" (now))))\n\n(defn clock-out\n  [format content]\n  (try\n    (or\n     (when-let [clock-in-log (last (last (drawer/get-drawer-ast format content \"logbook\")))]\n       (let [clock-in-log (string/trim clock-in-log)]\n         (when (string/starts-with? clock-in-log \"CLOCK:\")\n           (let [clock-start (subs clock-in-log 8 (- (count clock-in-log) 1))\n                 clock-end (now)\n                 clock-span (clock-interval clock-start clock-end)\n                 clock-out-log (util/format \"CLOCK: [%s]--[%s] =>  %s\"\n                                            clock-start clock-end clock-span)]\n             (string/replace\n              content\n              (str clock-in-log \"\\n\")\n              (str clock-out-log \"\\n\"))))))\n     content)\n    (catch js/Error _e\n      content)))\n\n(defn clock-summary\n  [body string?]\n  (when-let [logbook (drawer/get-logbook body)]\n    (when-let [logbook-lines (last logbook)]\n      (when-let [clock-lines (seq (filter #(string/starts-with? % \"CLOCK:\") logbook-lines))]\n        (let [[hours minutes seconds] (apply map + (->> clock-lines\n                                                        (map #(string/split (string/trim (last (string/split % \"=>\"))) \":\"))\n                                                        (map #(map int %))))\n              duration (t/period :hours hours\n                                 :minutes minutes\n                                 :seconds seconds)\n              duration-in-minutes (t/in-minutes duration)\n              zero-minutes? (zero? duration-in-minutes)]\n          (if string?\n            (if zero-minutes?\n              (str seconds \"s\")\n              (-> (tf/unparse-duration duration)\n                  (string/replace #\"\\s+days?\\s+\" \"d\")\n                  (string/replace #\"\\s+hours?\\s+\" \"h\")\n                  (string/replace #\"\\s+minutes?$\" \"m\")))\n            (if zero-minutes?\n              seconds\n              duration-in-minutes)))))))\n"]}