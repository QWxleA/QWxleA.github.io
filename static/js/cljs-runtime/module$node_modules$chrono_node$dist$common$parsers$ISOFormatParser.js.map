{
"version":3,
"file":"module$node_modules$chrono_node$dist$common$parsers$ISOFormatParser.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mEAAA,CAAwF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEhIC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACMC,OAAAA,CAAmCN,OAAA,CAAQ,oFAAR,CACzC,OAAMO,QAAcC,MAAJ,CAAW,uJAAX,CAUC,GAVD,CAoBhB,MAAMC,gBAAN,QAA8BH,OAAiCI,CAAAA,sCAA/D,CACIC,YAAY,EAAG,CACX,MAAOJ,QADI,CAGfK,YAAY,CAACC,OAAD;AAAUC,KAAV,CAAiB,CACnBC,OAAAA,CAAa,EACnBA,QAAA,CAAA,IAAA,CAAqBC,QAAA,CAASF,KAAA,CAfZG,CAeY,CAAT,CACrBF,QAAA,CAAA,KAAA,CAAsBC,QAAA,CAASF,KAAA,CAfZI,CAeY,CAAT,CACtBH,QAAA,CAAA,GAAA,CAAoBC,QAAA,CAASF,KAAA,CAfXK,CAeW,CAAT,CACpB,IAAgC,IAAhC,EAAIL,KAAA,CAfcM,CAed,CAAJ,CASI,GARAL,OAAA,CAAA,IAQI,CARiBC,QAAA,CAASF,KAAA,CAhBhBM,CAgBgB,CAAT,CAQjB,CAPJL,OAAA,CAAA,MAOI,CAPmBC,QAAA,CAASF,KAAA,CAhBhBO,CAgBgB,CAAT,CAOnB,CAN8B,IAM9B,EANAP,KAAA,CAhBYQ,CAgBZ,CAMA,GALAP,OAAA,CAAA,MAKA,CALuBC,QAAA,CAASF,KAAA,CAjBpBQ,CAiBoB,CAAT,CAKvB,EAHmC,IAGnC,EAHAR,KAAA,CAlBiBS,CAkBjB,CAGA,GAFAR,OAAA,CAAA,WAEA,CAF4BC,QAAA,CAASF,KAAA,CAnBpBS,CAmBoB,CAAT,CAE5B,EAAgC,IAAhC,EAAAT,KAAA,CApBcU,CAoBd,CAAJ,CACIT,OAAA,CAAA,cAAA,CAA+B,CADnC,KAGK,CACD,MAAMU,WAAaT,QAAA,CAASF,KAAA,CAxBdU,CAwBc,CAAT,CACnB,KAAIE,aAAe,CACmB,KAAtC,EAAIZ,KAAA,CAzBYa,CAyBZ,CAAJ,GACID,YADJ,CACmBV,QAAA,CAASF,KAAA,CA1BZa,CA0BY,CAAT,CADnB,CAGIC,MAAAA,CAAsB,EAAtBA,CAASH,UAObV,QAAA,CAAA,cAAA;AANa,CAAba,CAAIA,KAAJA,CACIA,KADJA,CACcF,YADdE,CAIIA,KAJJA,CAIcF,YAXb,CAgBT,MAAOX,QAjCkB,CAJjC,CAwCAb,OAAQ2B,CAAAA,OAAR,CAAkBpB,eAhE8G;",
"sources":["node_modules/chrono-node/dist/common/parsers/ISOFormatParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$common$parsers$ISOFormatParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbstractParserWithWordBoundary_1 = require(\"./AbstractParserWithWordBoundary\");\nconst PATTERN = new RegExp(\"([0-9]{4})\\\\-([0-9]{1,2})\\\\-([0-9]{1,2})\" +\n    \"(?:T\" +\n    \"([0-9]{1,2}):([0-9]{1,2})\" +\n    \"(?:\" +\n    \":([0-9]{1,2})(?:\\\\.(\\\\d{1,4}))?\" +\n    \")?\" +\n    \"(?:\" +\n    \"Z|([+-]\\\\d{2}):?(\\\\d{2})?\" +\n    \")?\" +\n    \")?\" +\n    \"(?=\\\\W|$)\", \"i\");\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NUMBER_GROUP = 2;\nconst DATE_NUMBER_GROUP = 3;\nconst HOUR_NUMBER_GROUP = 4;\nconst MINUTE_NUMBER_GROUP = 5;\nconst SECOND_NUMBER_GROUP = 6;\nconst MILLISECOND_NUMBER_GROUP = 7;\nconst TZD_HOUR_OFFSET_GROUP = 8;\nconst TZD_MINUTE_OFFSET_GROUP = 9;\nclass ISOFormatParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const components = {};\n        components[\"year\"] = parseInt(match[YEAR_NUMBER_GROUP]);\n        components[\"month\"] = parseInt(match[MONTH_NUMBER_GROUP]);\n        components[\"day\"] = parseInt(match[DATE_NUMBER_GROUP]);\n        if (match[HOUR_NUMBER_GROUP] != null) {\n            components[\"hour\"] = parseInt(match[HOUR_NUMBER_GROUP]);\n            components[\"minute\"] = parseInt(match[MINUTE_NUMBER_GROUP]);\n            if (match[SECOND_NUMBER_GROUP] != null) {\n                components[\"second\"] = parseInt(match[SECOND_NUMBER_GROUP]);\n            }\n            if (match[MILLISECOND_NUMBER_GROUP] != null) {\n                components[\"millisecond\"] = parseInt(match[MILLISECOND_NUMBER_GROUP]);\n            }\n            if (match[TZD_HOUR_OFFSET_GROUP] == null) {\n                components[\"timezoneOffset\"] = 0;\n            }\n            else {\n                const hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);\n                let minuteOffset = 0;\n                if (match[TZD_MINUTE_OFFSET_GROUP] != null) {\n                    minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);\n                }\n                let offset = hourOffset * 60;\n                if (offset < 0) {\n                    offset -= minuteOffset;\n                }\n                else {\n                    offset += minuteOffset;\n                }\n                components[\"timezoneOffset\"] = offset;\n            }\n        }\n        return components;\n    }\n}\nexports.default = ISOFormatParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","AbstractParserWithWordBoundary_1","PATTERN","RegExp","ISOFormatParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","components","parseInt","YEAR_NUMBER_GROUP","MONTH_NUMBER_GROUP","DATE_NUMBER_GROUP","HOUR_NUMBER_GROUP","MINUTE_NUMBER_GROUP","SECOND_NUMBER_GROUP","MILLISECOND_NUMBER_GROUP","TZD_HOUR_OFFSET_GROUP","hourOffset","minuteOffset","TZD_MINUTE_OFFSET_GROUP","offset","default"]
}
