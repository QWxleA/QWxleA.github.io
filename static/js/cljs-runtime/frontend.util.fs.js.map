{"version":3,"sources":["frontend/util/fs.cljs"],"mappings":";;AAWA;;;uCAAA,vCAAMA,sFAEHC,IAAIC;AAFP,AAGE,GAAM,OAASA;AAAf,AACE,IAAAC,mBACC,eAAA,WAAAC,1BAACC;AAAD,AAAO,OAACC,kCAAoBJ,KAAK,kDAAA,gDAAAE,rDAAKH;GAAtC,mFAAA,IAAA,WAAA,SAAA,eAAA,aAAA;AADD,AAAA,oBAAAE;AAAAA;;AAAA,IAAAA,uBAGC,eAAA,WAAAI,1BAACF;AAAD,AAAO,OAACG,+BAAiBN,KAAK,CAAA,gDAAAK,kBAAA;GAA9B,mFAAA,IAAA,WAAA,SAAA,eAAA,aAAA;AAHD,AAAA,oBAAAJ;AAAAA;;AAAA,IAAAA,uBAKC,eAAA,WAAAM,1BAACJ;AAAD,AAAO,4CAAAI,rCAACC,gCAAkBR;GAA1B,mFAAA,YAAA,yBAAA;AALD,AAAA,oBAAAC;AAAAA;;AAAA,IAAAA,uBAQC,iBAAMQ,UAAQ,AAACC,uCAAcX,IAAIC;AAAjC,AACE,IAAAC,uBAAI,kBAAA,lBAACU,8BAAoBF;AAAzB,AAAA,oBAAAR;AAAAA;;AACI,yBAAA,lBAACU,6BAAoBF;;;AAV5B,AAAA,oBAAAR;AAAAA;;AAWC,IAAMD,WAAK,AAACY,0BAAkBZ;AAA9B,AACE,SACC,GAAK,AAACa,4BAAc,AAACC,sCAAad,kBAClC,AAACe,cACA,eAAA,WAAAC,1BAACb;AAAD,AAAO,gDAAAa,zCAACR,gCAAkBR;GAA1B,mFAAA,MAAA,YAAA,OAAA,MAAA,OAAA;;;;;;AAhBP","names":["frontend.util.fs/ignored-path?","dir","path","or__5043__auto__","p1__83557#","cljs.core/some","clojure.string/starts-with?","p1__83558#","clojure.string/includes?","p1__83559#","clojure.string/ends-with?","relpath","js/module$node_modules$path$path.relative","cljs.core/re-find","clojure.string/lower-case","clojure.string/blank?","js/module$node_modules$path$path.extname","cljs.core/not","p1__83560#"],"sourcesContent":["(ns frontend.util.fs\n  (:require [clojure.string :as string]\n            [\"path\" :as path]))\n\n;; TODO: move all file path related util functions to here\n\n;; NOTE: This is not the same ignored-path? as src/electron/electron/utils.cljs.\n;;       The assets directory is ignored.\n;;\n;; When in nfs-mode, dir is \"\", path is relative path to graph dir.\n;; When in native-mode, dir and path are absolute paths.\n(defn ignored-path?\n  \"Ignore path for ls-dir-files-with-handler! and reload-dir!\"\n  [dir path]\n  (when (string? path)\n    (or\n     (some #(string/starts-with? path (str dir \"/\" %))\n           [\".\" \".recycle\" \"assets\" \"node_modules\" \"logseq/bak\" \"version-files\"])\n     (some #(string/includes? path (str \"/\" % \"/\"))\n           [\".\" \".recycle\" \"assets\" \"node_modules\" \"logseq/bak\" \"version-files\"])\n     (some #(string/ends-with? path %)\n           [\".DS_Store\" \"logseq/graphs-txid.edn\" \"logseq/broken-config.edn\"])\n     ;; hidden directory or file\n     (let [relpath (path/relative dir path)]\n       (or (re-find #\"/\\.[^.]+\" relpath)\n           (re-find #\"^\\.[^.]+\" relpath)))\n     (let [path (string/lower-case path)]\n       (and\n        (not (string/blank? (path/extname path)))\n        (not\n         (some #(string/ends-with? path %)\n               [\".md\" \".markdown\" \".org\" \".js\" \".edn\" \".css\"])))))))\n"]}