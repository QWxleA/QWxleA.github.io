{"version":3,"sources":["frontend/handler/route.cljs"],"mappings":"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","names":["p__46899","map__46900","cljs.core/--destructure-map","cljs.core.get","frontend.handler.route/redirect!","to","path-params","query-params","push","route-fn","reitit.frontend.easy/push-state","reitit.frontend.easy/replace-state","var_args","G__46902","frontend.handler.route/redirect-to-home!","js/Error","frontend.handler.route.redirect_to_home_BANG_","pub-event?","frontend.state/pub-event!","frontend.handler.route/redirect-to-all-pages!","frontend.handler.route/redirect-to-graph-view!","G__46904","frontend.handler.route/redirect-to-page!","page-name","frontend.handler.recent/add-page-to-recent!","frontend.state/get-current-repo","anchor","frontend.handler.route/get-title","name","G__46905","cljs.core/Keyword","block?","frontend.util/uuid-string?","temp__5718__auto__","block","G__46906","frontend.db/entity","cljs.core/uuid","content","logseq.graph_parser.text.remove_level_spaces","frontend.config/get-block-pattern","cljs.core/count","cljs.core.subs","page","G__46907","frontend.db/pull","frontend.util/page-name-sanity-lc","or__5043__auto__","frontend.util/get-page-original-name","frontend.handler.route/update-page-title!","route","map__46908","data","title","frontend.util/set-title!","frontend.handler.route/update-page-label!","map__46909","temp__5720__auto__","data-name","js/document.body.dataset","cljs.core/name","frontend.handler.route/jump-to-anchor!","anchor-text","js/setTimeout","frontend.handler.ui/highlight-element!","frontend.handler.route/set-route-match!","cljs.core.swap_BANG_","frontend.state/state","cljs.core/assoc","cljs.core.get_in","frontend.util.scroll_to","frontend.util/app-scroll-container-node","frontend.state.get_saved_scroll_position","frontend.handler.route/go-to-search!","search-mode","frontend.handler.search.clear_search_BANG_","frontend.state/set-search-mode!","frontend.handler.route/go-to-journals!","frontend.state/set-journals-length!","frontend.state/custom-home-page?","frontend.util.scroll_to_top","frontend.handler.route/redirect-to-file!","path","G__46911","frontend.db/get-page-file","clojure.string/lower-case","G__46910","frontend.handler.route/toggle-between-page-and-file!","_e","current-route","frontend.state/get-current-route","G__46914","frontend.date/today","frontend.state/get-route-match","frontend.db/get-file-page","frontend.handler.route.redirect_to_page_BANG_"],"sourcesContent":["(ns frontend.handler.route\n  (:require [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.handler.recent :as recent-handler]\n            [frontend.handler.search :as search-handler]\n            [frontend.state :as state]\n            [logseq.graph-parser.text :as text]\n            [frontend.util :as util]\n            [reitit.frontend.easy :as rfe]))\n\n(defn redirect!\n  \"If `push` is truthy, previous page will be left in history.\"\n  [{:keys [to path-params query-params push]\n    :or {push true}}]\n  (let [route-fn (if push rfe/push-state rfe/replace-state)]\n    (route-fn to path-params query-params))\n  ;; force return nil for usage in render phase of React\n  nil)\n\n(defn redirect-to-home!\n  ([]\n   (redirect-to-home! true))\n  ([pub-event?]\n   (when pub-event? (state/pub-event! [:redirect-to-home]))\n   (redirect! {:to :home})))\n\n(defn redirect-to-all-pages!\n  []\n  (redirect! {:to :all-pages}))\n\n(defn redirect-to-graph-view!\n  []\n  (redirect! {:to :graph}))\n\n(defn redirect-to-page!\n  \"Must ensure `page-name` is dereferenced (not an alias), or it will create a wrong new page with that name (#3511).\"\n  ([page-name]\n   (recent-handler/add-page-to-recent! (state/get-current-repo) page-name)\n   (redirect! {:to :page\n               :path-params {:name (str page-name)}}))\n  ([page-name anchor]\n   (recent-handler/add-page-to-recent! (state/get-current-repo) page-name)\n   (redirect! {:to :page\n               :path-params {:name (str page-name)}\n               :query-params {:anchor anchor}}))\n  ([page-name anchor push]\n   (recent-handler/add-page-to-recent! (state/get-current-repo) page-name)\n   (redirect! {:to :page\n               :path-params {:name (str page-name)}\n               :query-params {:anchor anchor}\n               :push push})))\n\n(defn get-title\n  [name path-params]\n  (case name\n    :home\n    \"Logseq\"\n    :repos\n    \"Repos\"\n    :repo-add\n    \"Add another repo\"\n    :graph\n    \"Graph\"\n    :all-files\n    \"All files\"\n    :all-pages\n    \"All pages\"\n    :all-journals\n    \"All journals\"\n    :file\n    (str \"File \" (:path path-params))\n    :new-page\n    \"Create a new page\"\n    :page\n    (let [name (:name path-params)\n          block? (util/uuid-string? name)]\n      (if block?\n        (if-let [block (db/entity [:block/uuid (uuid name)])]\n          (let [content (text/remove-level-spaces (:block/content block)\n                                                  (:block/format block) (config/get-block-pattern (:block/format block)))]\n            (if (> (count content) 48)\n              (str (subs content 0 48) \"...\")\n              content))\n          \"Page no longer exists!!\")\n        (let [page (db/pull [:block/name (util/page-name-sanity-lc name)])]\n          (or (util/get-page-original-name page)\n              \"Logseq\"))))\n    :tag\n    (str \"#\"  (:name path-params))\n    :diff\n    \"Git diff\"\n    :draw\n    \"Draw\"\n    :settings\n    \"Settings\"\n    :import\n    \"Import data into Logseq\"\n    \"Logseq\"))\n\n(defn update-page-title!\n  [route]\n  (let [{:keys [data path-params]} route\n        title (get-title (:name data) path-params)]\n    (util/set-title! title)))\n\n(defn update-page-label!\n  [route]\n  (let [{:keys [data]} route]\n    (when-let [data-name (:name data)]\n      (set! (. js/document.body.dataset -page) (name data-name)))))\n\n(defn jump-to-anchor!\n  [anchor-text]\n  (when anchor-text\n    (js/setTimeout #(ui-handler/highlight-element! anchor-text) 200)))\n\n(defn set-route-match!\n  [route]\n  (let [route route]\n    (swap! state/state assoc :route-match route)\n    (update-page-title! route)\n    (update-page-label! route)\n    (if-let [anchor (get-in route [:query-params :anchor])]\n      (jump-to-anchor! anchor)\n      (js/setTimeout #(util/scroll-to (util/app-scroll-container-node)\n                                      (state/get-saved-scroll-position)\n                                      false)\n                     100))))\n\n(defn go-to-search!\n  [search-mode]\n  (search-handler/clear-search! false)\n  (when search-mode\n    (state/set-search-mode! search-mode))\n  (state/pub-event! [:go/search]))\n\n(defn go-to-journals!\n  []\n  (state/set-journals-length! 3)\n  (let [route (if (state/custom-home-page?)\n                :all-journals\n                :home)]\n    (redirect! {:to route}))\n  (util/scroll-to-top))\n\n(defn- redirect-to-file!\n  [page]\n  (when-let [path (-> (db/get-page-file (string/lower-case page))\n                      :db/id\n                      (db/entity)\n                      :file/path)]\n    (redirect! {:to :file\n                :path-params {:path path}})))\n\n(defn toggle-between-page-and-file!\n  [_e]\n  (let [current-route (state/get-current-route)]\n    (case current-route\n      :home\n      (redirect-to-file! (date/today))\n\n      :all-journals\n      (redirect-to-file! (date/today))\n\n      :page\n      (when-let [page-name (get-in (state/get-route-match) [:path-params :name])]\n        (redirect-to-file! page-name))\n\n      :file\n      (when-let [path (get-in (state/get-route-match) [:path-params :path])]\n        (when-let [page (db/get-file-page path)]\n          (redirect-to-page! page)))\n\n      nil)))\n"]}