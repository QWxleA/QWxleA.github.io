{"version":3,"sources":["frontend/handler/draw.cljs"],"mappings":";AAYA,qDAAA,rDAAMA,kHACHC;AADH,AAEE,oBAAMA;AAAN,AACE,IAAMC,WAAS,AAACC,6BAAoBF;AAApC,AACE,OAACG,qDACA,AAACC,wBAAU,CAAKH,SAAS,CAAA,IAASI,uEAClC,WAAKC;AAAL,AAAA;GACA,WAAKC;AAAL,AAAA;;;AALL;;;AAOF,8CAAA,9CAAMC,oGACHC,KAAKC;AADR,AAEE,IAAMC,OAAKF;IACLT,OAAK,AAACY;AADZ,AAEE,oBAAMZ;AAAN,AACE,IAAMC,WAAS,AAACC,6BAAoBF;AAApC,yDAEG,AAAAa,gDAAA,KAAA,WAAAC,zHAQA,OAACQ;AARD,AAAA,OAAAT,yGAAA,WAAAE,pEACC,AAAChB,mDAAwBC;AAD1B,AAAA,OAAAa,2GAAA,WAAAE,tEAEC,qDAAA,rDAACE,6BAAejB,KAAKC,SAASU,KAAKD;AAFpC,AAAA,OAAAM,2BAGC,iBAAAE,WAAclB;IAAdmB,WAAA,mFAAA,2CAAA,iEAAA,4PAAA,6DAAA,2CAAA,yEAAA,sEAAA,xfAC2BR,mEACC,CAACU,kEAAAA,wEAAAA,RAAyBZ,oDAAAA,2KACdE;AAHxC,AAAA,4HAAAO,SAAAC,iDAAAD,SAAAC,vLAACC,2DAAAA,8EAAAA;;;;IAKO,WAAKG;AAAL,AACE,qGAAA,iCAAA,tIAACC,iIAAgCb,gBAAgBD;;AACjD,OAACe,YAAeF;;;AAbhC;;;AAeJ,6CAAA,7CAAMG,kGACHjB,KAAKkB;AADR,AAEE,IAAAC,qBAAgB,AAAChB;AAAjB,AAAA,oBAAAgB;AAAA,AAAA,WAAAA,PAAW5B;AAAX,AACE,OAACG,qDACA,AAAC0B,gCAAuB7B,KAAKS,MAC7B,WAAKqB;AAAL,AACE,QAACH,2CAAAA,oDAAAA,XAAWG,gCAAAA;GACd,WAAKP;AAAL,AACE,gHAAA,sBAAA,/HAACQ,0HAAyBtB,UACjBc;;;AAPd;;;AASF,GAAA,QAAAS,qCAAAC,6CAAAC,kDAAAC;AAAA;AAAA,AAAA,AAASC,wCACP,0DAAA,1DAACC,uSAEAC;;AAEH,kCAAA,lCAAMC;AAAN,AAEE,4FAAA,xCAAK,AAACC;;AAER,yDAAA,zDAAMC,0HACHC;AADH,AAEE,IAAAd,qBAAgB,AAAChB;AAAjB,AAAA,oBAAAgB;AAAA,AAAA,WAAAA,PAAW5B;AAAX,AACE,OAAAa,gDAAA,KAAA,WAAA8B;AAAA,AAAA,OAAA9B,0OAAA,WAAQ+B,rMAAQ,AAACC,+BAAgB,AAAC3C,6BAAoBF,MACrB,CAAKK,8FAAiCqC;AADvE,AAAA,OAAA1B,2BAAA,AAEE,iCAAA,KAAA,pBAAU4B,oBACR,AAACpC,4CAAiBkC,aAAaN;;;;AAJrC","names":["frontend.handler.draw/create-draws-directory!","repo","repo-dir","frontend.config/get-repo-dir","frontend.util.p_handle","frontend.fs/mkdir!","logseq.graph-parser.config/default-draw-directory","_result","_error","frontend.handler.draw/save-excalidraw!","file","data","path","frontend.state/get-current-repo","promesa.core.bind","___28350__auto__","___28349__auto__","promesa.protocols/-promise","frontend.fs/write-file!","G__49641","G__49642","frontend.db/transact!","frontend.util/page-name-sanity-lc","promesa.core.catch$","error","cljs.core.prn","js/console.dir","frontend.handler.draw/load-excalidraw-file","ok-handler","temp__5720__auto__","frontend.handler.file/load-file","content","cljs.core.println","js/frontend","js/frontend.handler","js/frontend.handler.draw","js/frontend.handler.draw.default-content","frontend.handler.draw/default-content","frontend.util.format","frontend.config/website","frontend.handler.draw/file-name","frontend.date/get-date-time-string-2","frontend.handler.draw/create-draw-with-default-content","current-file","___28360__auto__","exists?","frontend.fs/file-exists?"],"sourcesContent":["(ns frontend.handler.draw\n  (:refer-clojure :exclude [load-file])\n  (:require [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.handler.file :as file-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [logseq.graph-parser.config :as gp-config]\n            [promesa.core :as p]))\n\n(defn create-draws-directory!\n  [repo]\n  (when repo\n    (let [repo-dir (config/get-repo-dir repo)]\n      (util/p-handle\n       (fs/mkdir! (str repo-dir (str \"/\" gp-config/default-draw-directory)))\n       (fn [_result] nil)\n       (fn [_error] nil)))))\n\n(defn save-excalidraw!\n  [file data]\n  (let [path file\n        repo (state/get-current-repo)]\n    (when repo\n      (let [repo-dir (config/get-repo-dir repo)]\n        (->\n         (p/do!\n          (create-draws-directory! repo)\n          (fs/write-file! repo repo-dir path data nil)\n          (db/transact! repo\n                        [{:file/path path\n                          :block/name (util/page-name-sanity-lc file)\n                          :block/file {:file/path path}\n                          :block/journal? false}]))\n         (p/catch (fn [error]\n                    (prn \"Write file failed, path: \" path \", data: \" data)\n                    (js/console.dir error))))))))\n\n(defn load-excalidraw-file\n  [file ok-handler]\n  (when-let [repo (state/get-current-repo)]\n    (util/p-handle\n     (file-handler/load-file repo file)\n     (fn [content]\n       (ok-handler content))\n     (fn [error]\n       (println \"Error loading \" file \": \"\n                error)))))\n\n(defonce default-content\n  (util/format\n   \"{\\n  \\\"type\\\": \\\"excalidraw\\\",\\n  \\\"version\\\": 2,\\n  \\\"source\\\": \\\"%s\\\",\\n  \\\"elements\\\": [],\\n  \\\"appState\\\": {\\n    \\\"viewBackgroundColor\\\": \\\"#FFF\\\",\\n    \\\"gridSize\\\": null\\n  }\\n}\"\n   config/website))\n\n(defn file-name\n  []\n  (str (date/get-date-time-string-2) \".excalidraw\"))\n\n(defn create-draw-with-default-content\n  [current-file]\n  (when-let [repo (state/get-current-repo)]\n    (p/let [exists? (fs/file-exists? (config/get-repo-dir repo)\n                                     (str gp-config/default-draw-directory current-file))]\n      (when-not exists?\n        (save-excalidraw! current-file default-content)))))\n"]}