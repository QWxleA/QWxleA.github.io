{"version":3,"sources":["frontend/components/content.cljs"],"mappings":"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","names":["frontend.components.content/set-format-js-loading!","format","value","cljs.core.swap_BANG_","frontend.state/state","cljs.core/assoc-in","frontend.components.content/lazy-load","frontend.format/normalize","temp__5720__auto__","record","frontend.format/get-format-record","frontend.format.protocol/loaded?","frontend.format.protocol/lazyLoad","_result","frontend.components.content/lazy-load-js","state","cljs.core/last","loader?","cljs.core/contains?","frontend.config/html-render-formats","frontend.format/loaded?","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","frontend.components.content/custom-context-menu-content","frontend.ui/menu-link","frontend.handler.editor/cut-selection-blocks","frontend.handler.editor/copy-selection-blocks","_","block-uuids","frontend.handler.editor/get-selected-toplevel-block-uuids","frontend.state.set_modal_BANG_","frontend.components.export/export-blocks","frontend.handler.editor/copy-block-refs","frontend.handler.editor/copy-block-embeds","frontend.handler.editor/cycle-todos!","frontend.components.content/block-background-colors","js/frontend","js/frontend.components","js/frontend.components.content","js/frontend.components.content.*template-including-parent?","frontend.components.content/*template-including-parent?","cljs.core.atom","daiquiri.interpreter/interpret","frontend.components.content/template-checkbox","template-including-parent?","frontend.ui.toggle","cljs.core/not","rum.core/build-defcs","cljs.core/deref","rum.core/mark-sync-update","frontend.components.content/block-template","rum.core/reactive","rum.core.local","cljs.core/reset!","block-id","edit?","cljs.core.get","input","rum.core/react","cljs.core/uuid","block","G__70503","frontend.db/entity","has-children?","cljs.core/seq","frontend.state/clear-edit!","e","frontend.util/stop","frontend.util/evalue","frontend.ui.button","title","clojure.string/trim","clojure.string/blank?","frontend.handler.page/template-exists?","frontend.handler.notification.show_BANG_","frontend.handler.editor/set-block-property!","frontend.state/hide-custom-context-menu!","frontend.components.content/block-context-menu-content","_target","*el-ref","rum.core/use-ref","rum.core.use_effect_BANG_","js/setTimeout","map__70518","cljs.core/--destructure-map","el","rum.core/deref","x","y","frontend.util/calc-delta-rect-offset","js/document.documentElement","G__70552","properties","heading?","iter__4652__auto__","s__70554","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__70556","cljs.core/chunk-buffer","i__70555","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__70553","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","color","_e","frontend.context.i18n.t","frontend.handler.editor/remove-block-property!","frontend.handler.editor/open-block-in-sidebar!","p1__70514#","frontend.handler.editor.copy_block_ref_BANG_","p1__70515#","frontend.util.format","frontend.util/electron?","current-repo","frontend.state/get-current-repo","tap-f","frontend.util.url.get_logseq_graph_uuid_url","frontend.extensions.srs/card-block?","frontend.extensions.srs/preview","frontend.extensions.srs/make-block-a-card!","frontend.handler.editor/cut-block!","frontend.handler.editor.expand_all_BANG_","frontend.handler.editor.collapse_all_BANG_","frontend.state/sub","cmds","frontend.state/get-plugins-commands-with-type","s__70558","b__70560","i__70559","vec__70561","cljs.core.nth","map__70564","iter__70557","vec__70565","map__70568","key","label","cmd","action","pid","frontend.commands/exec-plugin-simple-command!","cljs.core.assoc","block-data","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__70569","cljs.core/*print-newline*","*print-fn*-orig-val__70570","cljs.core/*print-fn*","*print-newline*-temp-val__70571","*print-fn*-temp-val__70572","x__4796__auto__","cljs.pprint.pprint","G__70573","frontend.db/pull","cljs.core.println","js/navigator.clipboard","frontend.components.content/block-ref-custom-context-menu-content","block-ref-id","and__4251__auto__","frontend.state/sidebar-add-block!","frontend.handler.editor/copy-current-ref","frontend.handler.editor/delete-current-ref!","frontend.handler.editor/replace-ref-with-text!","frontend.handler.editor/replace-ref-with-embed!","cljs.core.into_array","s__70575","b__70577","i__70576","map__70578","iter__70574","map__70579","frontend.components.content/page-title-custom-context-menu-content","page","page-menu-options","frontend.components.page-menu/page-menu","options","cljs.core.merge","p__70580","map__70581","frontend.components.content/hiccup-content","rum.core/static","frontend.mixins.event_mixin","frontend.mixins/listen","js/window","map__70584","map__70585","target","frontend.components.content.goog$module$goog$object.get","dommy.core/attr","block-ref","frontend.handler.common/show-custom-context-menu!","frontend.state/set-state!","frontend.state/selection?","logseq.graph-parser.util/uuid-string?","frontend.util/select-highlight!","id","hiccup","frontend.components.content/non-hiccup-content","content","on-click","on-hide","config","loading","frontend.components.editor/box","loading?","markup?","frontend.util/link?","frontend.handler.editor/reset-cursor-range!","goog.dom/getElement","frontend.state.set_edit_content_BANG_","frontend.state/set-edit-input-id!","frontend.components.content/set-draw-iframe-style!","width","draws","dommy.utils/->Array","js/document","seq__70592","chunk__70593","count__70594","i__70595","c__4679__auto__","cljs.core/chunk-first","cljs.core/next","draw","dommy.core.set_style_BANG_","height","x__4336__auto__","y__4337__auto__","p__70600","map__70601","frontend.components.content/content","frontend.handler.image/render-local-images!","option"],"sourcesContent":["(ns frontend.components.content\n  (:require [cljs.pprint :as pprint]\n            [clojure.string :as string]\n            [dommy.core :as d]\n            [frontend.commands :as commands]\n            [frontend.components.editor :as editor]\n            [frontend.components.page-menu :as page-menu]\n            [frontend.components.export :as export]\n            [frontend.config :as config]\n            [frontend.context.i18n :refer [t]]\n            [frontend.db :as db]\n            [frontend.extensions.srs :as srs]\n            [frontend.format :as format]\n            [frontend.format.protocol :as protocol]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.image :as image-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.page :as page-handler]\n            [frontend.mixins :as mixins]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [frontend.util.url :as url-util]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [rum.core :as rum]))\n\n;; TODO i18n support\n\n(defn- set-format-js-loading!\n  [format value]\n  (when format\n    (swap! state/state assoc-in [:format/loading format] value)))\n\n(defn- lazy-load\n  [format]\n  (let [format (format/normalize format)]\n    (when-let [record (format/get-format-record format)]\n      (when-not (protocol/loaded? record)\n        (set-format-js-loading! format true)\n        (protocol/lazyLoad record\n                           (fn [_result]\n                             (set-format-js-loading! format false)))))))\n\n(defn lazy-load-js\n  [state]\n  (when-let [format (:format (last (:rum/args state)))]\n    (let [loader? (contains? config/html-render-formats format)]\n      (when loader?\n        (when-not (format/loaded? format)\n          (lazy-load format))))))\n\n(rum/defc custom-context-menu-content\n  []\n  [:div#custom-context-menu\n   [:div.py-1.rounded-md.bg-base-3.shadow-xs\n    (ui/menu-link\n     {:key \"cut\"\n      :on-click #(editor-handler/cut-selection-blocks true)}\n     \"Cut\")\n    (ui/menu-link\n     {:key \"copy\"\n      :on-click editor-handler/copy-selection-blocks}\n     \"Copy\")\n    (ui/menu-link\n     {:key \"copy as\"\n      :on-click (fn [_]\n                  (let [block-uuids (editor-handler/get-selected-toplevel-block-uuids)]\n                    (state/set-modal!\n                     #(export/export-blocks block-uuids))))}\n     \"Copy as\")\n    (ui/menu-link\n     {:key \"copy block refs\"\n      :on-click editor-handler/copy-block-refs}\n     \"Copy block refs\")\n    (ui/menu-link\n     {:key \"copy block embeds\"\n      :on-click editor-handler/copy-block-embeds}\n     \"Copy block embeds\")\n    (ui/menu-link\n     {:key \"cycle todos\"\n      :on-click editor-handler/cycle-todos!}\n     \"Cycle todos\")]])\n\n;; FIXME: Make it configurable\n(def block-background-colors\n  [\"#533e7d\"\n   \"#497d46\"\n   \"#787f97\"\n   \"#978626\"\n   \"#49767b\"\n   \"#264c9b\"\n   \"#793e3e\"])\n\n(defonce *template-including-parent? (atom nil))\n\n(rum/defc template-checkbox\n  [template-including-parent?]\n  [:div.flex.flex-row\n   [:span.text-medium.mr-2 \"Including the parent block in the template?\"]\n   (ui/toggle template-including-parent?\n              #(swap! *template-including-parent? not))])\n\n(rum/defcs block-template < rum/reactive\n  (rum/local false ::edit?)\n  (rum/local \"\" ::input)\n  {:will-unmount (fn [state]\n                   (reset! *template-including-parent? nil)\n                   state)}\n  [state block-id]\n  (let [edit? (get state ::edit?)\n        input (get state ::input)\n        template-including-parent? (rum/react *template-including-parent?)\n        block-id (if (string? block-id) (uuid block-id) block-id)\n        block (db/entity [:block/uuid block-id])\n        has-children? (seq (:block/_parent block))]\n    (when (and (nil? template-including-parent?) has-children?)\n      (reset! *template-including-parent? true))\n\n    (if @edit?\n      (do\n        (state/clear-edit!)\n        [:div.px-4.py-2 {:on-click (fn [e] (util/stop e))}\n         [:p \"What's the template's name?\"]\n         [:input#new-template.form-input.block.w-full.sm:text-sm.sm:leading-5.my-2\n          {:auto-focus true\n           :on-change (fn [e]\n                        (reset! input (util/evalue e)))}]\n         (when has-children?\n           (template-checkbox template-including-parent?))\n         (ui/button \"Submit\"\n                    :on-click (fn []\n                                (let [title (string/trim @input)]\n                                  (when (not (string/blank? title))\n                                    (if (page-handler/template-exists? title)\n                                      (notification/show!\n                                       [:p \"Template already exists!\"]\n                                       :error)\n                                      (do\n                                        (editor-handler/set-block-property! block-id :template title)\n                                        (when (false? template-including-parent?)\n                                          (editor-handler/set-block-property! block-id :template-including-parent false))\n                                        (state/hide-custom-context-menu!)))))))])\n      (ui/menu-link\n       {:key \"Make template\"\n        :on-click (fn [e]\n                    (util/stop e)\n                    (reset! edit? true))}\n       \"Make template\"))))\n\n(rum/defc ^:large-vars/cleanup-todo block-context-menu-content\n  [_target block-id]\n\n  (let [*el-ref (rum/use-ref nil)]\n\n    (rum/use-effect!\n     (fn []\n       (js/setTimeout\n        (fn []\n          (let [^js el (rum/deref *el-ref)\n               {:keys [x y]} (util/calc-delta-rect-offset el js/document.documentElement)]\n           (set! (.. el -style -transform)\n                 (str \"translate3d(\" (if (neg? x) x 0) \"px,\" (if (neg? y) (- y 10) 0) \"px\" \",0)\"))))\n        10)\n       #())\n     [])\n\n    (when-let [block (db/entity [:block/uuid block-id])]\n      (let [properties (:block/properties block)\n            heading? (true? (:heading properties))]\n        [:div#custom-context-menu\n         {:ref *el-ref}\n         [:div.py-1.rounded-md.bg-base-3.shadow-xs\n          [:div.flex-row.flex.justify-between.py-4.pl-2\n           [:div.flex-row.flex.justify-between\n            (for [color block-background-colors]\n              [:a.m-2.shadow-sm\n               {:on-click (fn [_e]\n                            (editor-handler/set-block-property! block-id \"background-color\" color))}\n               [:div.heading-bg {:style {:background-color color}}]])]\n           [:a.text-sm\n            {:title    (t :remove-background)\n             :style    {:margin-right 14\n                        :margin-top   4}\n             :on-click (fn [_e]\n                         (editor-handler/remove-block-property! block-id \"background-color\"))}\n            \"Clear\"]]\n\n          (ui/menu-link\n           {:key      \"Convert heading\"\n            :on-click (fn [_e]\n                        (if heading?\n                          (editor-handler/remove-block-property! block-id :heading)\n                          (editor-handler/set-block-property! block-id :heading true)))}\n           (if heading?\n             \"Convert back to a block\"\n             \"Convert to a heading\"))\n\n          (ui/menu-link\n           {:key      \"Open in sidebar\"\n            :on-click (fn [_e]\n                        (editor-handler/open-block-in-sidebar! block-id))}\n           \"Open in sidebar\")\n\n          (ui/menu-link\n           {:key      \"Copy block ref\"\n            :on-click (fn [_e]\n                        (editor-handler/copy-block-ref! block-id #(str \"((\" % \"))\")))}\n           \"Copy block ref\")\n\n          (ui/menu-link\n           {:key      \"Copy block embed\"\n            :on-click (fn [_e]\n                        (editor-handler/copy-block-ref! block-id #(util/format \"{{embed ((%s))}}\" %)))}\n           \"Copy block embed\")\n\n          ;; TODO Logseq protocol mobile support\n          (when (util/electron?)\n            (ui/menu-link\n             {:key      \"Copy block URL\"\n              :on-click (fn [_e]\n                          (let [current-repo (state/get-current-repo)\n                                tap-f (fn [block-id]\n                                        (url-util/get-logseq-graph-uuid-url nil current-repo block-id))]\n                            (editor-handler/copy-block-ref! block-id tap-f)))}\n             \"Copy block URL\"))\n\n          (block-template block-id)\n\n          (ui/menu-link\n           {:key      \"Copy as\"\n            :on-click (fn [_]\n                        (state/set-modal! #(export/export-blocks [block-id])))}\n           \"Copy as\")\n\n          (if (srs/card-block? block)\n            (ui/menu-link\n             {:key      \"Preview Card\"\n              :on-click #(srs/preview block-id)}\n             \"Preview Card\")\n            (ui/menu-link\n             {:key      \"Make a Card\"\n              :on-click #(srs/make-block-a-card! block-id)}\n             \"Make a Card\"))\n\n          (ui/menu-link\n           {:key      \"Cut\"\n            :on-click (fn [_e]\n                        (editor-handler/cut-block! block-id))}\n           \"Cut\")\n\n          (ui/menu-link\n           {:key      \"Expand all\"\n            :on-click (fn [_e]\n                        (editor-handler/expand-all! block-id))}\n           \"Expand all\")\n\n          (ui/menu-link\n           {:key      \"Collapse all\"\n            :on-click (fn [_e]\n                        (editor-handler/collapse-all! block-id))}\n           \"Collapse all\")\n\n          (when (state/sub [:plugin/simple-commands])\n            (when-let [cmds (state/get-plugins-commands-with-type :block-context-menu-item)]\n              (for [[_ {:keys [key label] :as cmd} action pid] cmds]\n                (ui/menu-link\n                 {:key      key\n                  :on-click #(commands/exec-plugin-simple-command!\n                              pid (assoc cmd :uuid block-id) action)}\n                 label))))\n\n          (when (state/sub [:ui/developer-mode?])\n            (ui/menu-link\n             {:key      \"(Dev) Show block data\"\n              :on-click (fn []\n                          (let [block-data (with-out-str (pprint/pprint (db/pull [:block/uuid block-id])))]\n                            (println block-data)\n                            (notification/show!\n                             [:div\n                              [:pre.code block-data]\n                              [:br]\n                              (ui/button \"Copy to clipboard\"\n                                :on-click #(.writeText js/navigator.clipboard block-data))]\n                             :success\n                             false)))}\n             \"(Dev) Show block data\"))]]))))\n\n(rum/defc block-ref-custom-context-menu-content\n  [block block-ref-id]\n  (when (and block block-ref-id)\n    [:div#custom-context-menu\n     [:div.py-1.rounded-md.bg-base-3.shadow-xs\n      (ui/menu-link\n       {:key \"open-in-sidebar\"\n        :on-click (fn []\n                    (state/sidebar-add-block!\n                     (state/get-current-repo)\n                     block-ref-id\n                     :block-ref))}\n       \"Open in sidebar\")\n      (ui/menu-link\n       {:key \"copy\"\n        :on-click (fn [] (editor-handler/copy-current-ref block-ref-id))}\n       \"Copy this reference\")\n      (ui/menu-link\n       {:key \"delete\"\n        :on-click (fn [] (editor-handler/delete-current-ref! block block-ref-id))}\n       \"Delete this reference\")\n      (ui/menu-link\n       {:key \"replace-with-text\"\n        :on-click (fn [] (editor-handler/replace-ref-with-text! block block-ref-id))}\n       \"Replace with text\")\n      (ui/menu-link\n       {:key \"replace-with-embed\"\n        :on-click (fn [] (editor-handler/replace-ref-with-embed! block block-ref-id))}\n       \"Replace with embed\")]]))\n\n(rum/defc page-title-custom-context-menu-content\n  [page]\n  (when-not (string/blank? page)\n    (let [page-menu-options (page-menu/page-menu page)]\n      [:div#custom-context-menu\n       [:div.py-1.rounded-md.bg-base-3.shadow-xs\n        (for [{:keys [title options]} page-menu-options]\n          (ui/menu-link\n           (merge\n            {:key title}\n            options)\n           title))]])))\n\n;; TODO: content could be changed\n;; Also, keyboard bindings should only be activated after\n;; blocks were already selected.\n(rum/defc hiccup-content < rum/static\n  (mixins/event-mixin\n   (fn [state]\n     (mixins/listen state js/window \"contextmenu\"\n                    (fn [e]\n                      (let [target (gobj/get e \"target\")\n                            block-id (d/attr target \"blockid\")\n                            {:keys [block block-ref]} (state/sub :block-ref/context)\n                            {:keys [page]} (state/sub :page-title/context)]\n                        (cond\n                          page\n                          (do\n                            (common-handler/show-custom-context-menu!\n                             e\n                             (page-title-custom-context-menu-content page))\n                            (state/set-state! :page-title/context nil))\n\n                          block-ref\n                          (do\n                            (common-handler/show-custom-context-menu!\n                             e\n                             (block-ref-custom-context-menu-content block block-ref))\n                            (state/set-state! :block-ref/context nil))\n\n                          (state/selection?)\n                          (common-handler/show-custom-context-menu!\n                           e\n                           (custom-context-menu-content))\n\n                          (and block-id (gp-util/uuid-string? block-id))\n                          (let [block (.closest target \".ls-block\")]\n                            (when block\n                              (util/select-highlight! [block]))\n                            (common-handler/show-custom-context-menu!\n                            e\n                            (block-context-menu-content target (cljs.core/uuid block-id))))\n\n                          :else\n                          nil))))))\n  [id {:keys [hiccup]}]\n  [:div {:id id}\n   (if hiccup\n     hiccup\n     [:div.text-gray-500.cursor \"Click to edit\"])])\n\n(rum/defc non-hiccup-content < rum/reactive\n  [id content on-click on-hide config format]\n  (let [edit? (state/sub [:editor/editing? id])\n        loading (state/sub :format/loading)]\n    (if edit?\n      (editor/box {:on-hide on-hide\n                   :format format}\n                  id\n                  config)\n      (let [format (format/normalize format)\n            loading? (get loading format)\n            markup? (contains? config/html-render-formats format)\n            on-click (fn [e]\n                       (when-not (util/link? (gobj/get e \"target\"))\n                         (util/stop e)\n                         (editor-handler/reset-cursor-range! (gdom/getElement (str id)))\n                         (state/set-edit-content! id content)\n                         (state/set-edit-input-id! id)\n                         (when on-click\n                           (on-click e))))]\n        (cond\n          (and markup? loading?)\n          [:div \"loading ...\"]\n\n          :else                       ; other text formats\n          [:pre.cursor.content.pre-white-space\n           {:id id\n            :on-click on-click}\n           (if (string/blank? content)\n             [:div.text-gray-500.cursor \"Click to edit\"]\n             content)])))))\n\n(defn- set-draw-iframe-style!\n  []\n  (let [width (gobj/get js/window \"innerWidth\")]\n    (when (>= width 1024)\n      (let [draws (d/by-class \"draw-iframe\")\n            width (- width 200)]\n        (doseq [draw draws]\n          (d/set-style! draw :width (str width \"px\"))\n          (let [height (max 700 (/ width 2))]\n            (d/set-style! draw :height (str height \"px\")))\n          (d/set-style! draw :margin-left (str (- (/ (- width 570) 2)) \"px\")))))))\n\n(rum/defcs content < rum/reactive\n  {:will-mount (fn [state]\n                 (lazy-load-js state)\n                 state)\n   :did-mount (fn [state]\n                (set-draw-iframe-style!)\n                (image-handler/render-local-images!)\n                state)\n   :did-update (fn [state]\n                 (set-draw-iframe-style!)\n                 (lazy-load-js state)\n                 (image-handler/render-local-images!)\n                 state)}\n  [state id {:keys [format\n                    config\n                    hiccup\n                    content\n                    on-click\n                    on-hide]\n             :as option}]\n  (if hiccup\n    [:div\n     (hiccup-content id option)]\n    (let [format (format/normalize format)]\n      (non-hiccup-content id content on-click on-hide config format))))\n"]}