{"version":3,"sources":["rewrite_cljc/parser.cljc"],"mappings":";AAgBA;;;4BAAA,5BAAeA,gEAESC;AAFxB,AAGE,OAACC,oCAAaD;;AAEhB;;;gCAAA,hCAAeE,wEAESF;AAFxB,AAGE,IAAMG,4HAAW,mDAAA,nDAACC,tEACD,AAACC,mDAAWC,jGACZ,AAACC;AAFD,AAAa,OAACR,0BAAMC;;AAArC,AAGE,OAACQ,oBACC,AAACC,6BAAgBN,OACjB,AAACO,eAAK,AAACC,gBAAMR;;AAInB;;;mCAAA,nCAAMS,8EAEHC;AAFH,AAGE,OAACd,0BAAM,AAACe,kCAAqBD;;AAE/B;;;uCAAA,vCAAME,sFAEHF;AAFH,AAGE,OAACX,8BAAU,AAACY,kCAAqBD","names":["rewrite-cljc.parser/parse","reader","rewrite-cljc.parser.core/parse-next","rewrite-cljc.parser/parse-all","nodes","cljs.core.repeatedly","cljs.core.take_while","cljs.core/identity","cljs.core.doall","cljs.core/with-meta","rewrite-cljc.node/forms-node","cljs.core/meta","cljs.core/first","rewrite-cljc.parser/parse-string","s","rewrite-cljc.reader/string-reader","rewrite-cljc.parser/parse-string-all"],"sourcesContent":["(ns rewrite-cljc.parser\n  \"Parse Clojure/ClojureScript/EDN source code to nodes.\n\n  Parsing includes all source code elements including whitespace.\n\n  After parsing, the typical next step is [[rewrite-cljc.zip/edn]] to create zipper.\n\n  Alternatively consider parsing and zipping in one step from [[rewrite-cljc.zip/of-string]] or [[rewrite-cljc.zip/of-file]].\"\n  (:require [rewrite-cljc.node :as node]\n            [rewrite-cljc.parser.core :as p]\n            [rewrite-cljc.reader :as reader]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Parser Core\n\n(defn ^:no-doc parse\n  \"Parse next form from the given reader.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (p/parse-next reader))\n\n(defn ^:no-doc parse-all\n  \"Parse all forms from the given reader.\"\n  [#?(:cljs ^not-native reader :default reader)]\n  (let [nodes (->> (repeatedly #(parse reader))\n                   (take-while identity)\n                   (doall))]\n    (with-meta\n      (node/forms-node nodes)\n      (meta (first nodes)))))\n\n;; ## Specialized Parsers\n\n(defn parse-string\n  \"Return a node for first source code element in string `s`.\"\n  [s]\n  (parse (reader/string-reader s)))\n\n(defn parse-string-all\n  \"Return forms node for all source code elements in string `s`.\"\n  [s]\n  (parse-all (reader/string-reader s)))\n\n#?(:clj\n   (defn parse-file\n     \"Return node for first source code element in file `f`.\"\n     [f]\n     (let [r (reader/file-reader f)]\n       (with-open [_ ^java.io.Closeable (.-rdr r)]\n         (parse r)))))\n\n#?(:clj\n   (defn parse-file-all\n     \"Return forms node for all source code elements in file `f`.\"\n     [f]\n     (let [r (reader/file-reader f)]\n       (with-open [_ ^java.io.Closeable (.-rdr r)]\n         (parse-all r)))))\n"]}