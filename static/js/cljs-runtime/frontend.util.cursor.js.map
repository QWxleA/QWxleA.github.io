{"version":3,"sources":["frontend/util/cursor.cljs"],"mappings":"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","names":["frontend.util.cursor/closer","a","b","c","a-left","or__5043__auto__","b-left","c-left","js/Number.MAX_SAFE_INTEGER","frontend.util.cursor/mock-char-pos","e","clojure.string.split","cljs.core/second","var_args","G__32963","frontend.util.cursor/get-caret-pos","js/Error","input","frontend.util.cursor.get_caret_pos","frontend.util/get-selection-start","pos","rect","cljs-bean.core/->clj","e32964","G__32965","goog.dom/getElement","goog.dom/getChildren","cljs.core.array_seq","frontend.util/nth-safe","cljs.core.assoc","_e","js/console.log","frontend.util.cursor/pos","frontend.util.cursor/start?","and__5041__auto__","frontend.util.cursor/end?","cljs.core._EQ_","cljs.core/count","frontend.util.cursor/set-selection-to","n","m","frontend.util.cursor/move-cursor-to","G__32967","frontend.util.cursor/move-cursor-forward","frontend.util.cursor.move_cursor_forward","map__32968","cljs.core/--destructure-map","cljs.core.get","frontend.util/safe-inc-current-pos-from-start","G__32970","frontend.util.cursor/move-cursor-backward","frontend.util.cursor.move_cursor_backward","map__32975","frontend.util/safe-dec-current-pos-from-end","x__5128__auto__","y__5129__auto__","frontend.util.cursor/get-input-content&pos","frontend.util.cursor.goog$module$goog$object.get","frontend.util.cursor/line-beginning-pos","vec__32979","cljs.core.nth","content","last-newline-pos","clojure.string.last_index_of","frontend.util.cursor/line-end-pos","vec__32985","clojure.string.index_of","frontend.util.cursor/beginning-of-line?","vec__32989","temp__5720__auto__","pre-char","cljs.core.subs","frontend.util.cursor/move-cursor-to-line-end","frontend.util.cursor/move-cursor-to-line-beginning","frontend.util.cursor/move-cursor-to-end","G__32998","frontend.util.cursor/move-cursor-to-thing","thing","frontend.util.cursor.move_cursor_to_thing","from","vec__32999","_pos","frontend.util.cursor/move-cursor-forward-by-word","val","current","idx","G__33005","fexpr__33004","cljs.core.remove","cljs.core/nil?","cljs.core.apply","cljs.core/min","frontend.util.cursor/move-cursor-backward-by-word","prev","cljs.core/max","G__33009","fexpr__33008","frontend.util.cursor/textarea-cursor-rect-first-row?","cursor","elms","tops","cljs.core.map","cljs.core.distinct","cljs.core/first","frontend.util.cursor/textarea-cursor-first-row?","frontend.util.cursor/textarea-cursor-rect-last-row?","cljs.core/last","frontend.util.cursor/textarea-cursor-last-row?","frontend.util.cursor/next-cursor-pos-up-down","direction","chars","cljs.core/group-by","cljs.core.sort","cljs.core/keys","tops-p","p1__33010#","cljs.core.partition_by","line-next","lefts","char-pos","left-a","left-c","closer","frontend.util.cursor/move-cursor-up-down","frontend.util.cursor/move-cursor-up","frontend.util.cursor/move-cursor-down","frontend.util.cursor/select-up-down","anchor","cursor-rect","next-cursor"],"sourcesContent":["(ns frontend.util.cursor\n  (:require [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            [frontend.util :as util]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]))\n\n(defn- closer [a b c]\n  (let [a-left (or (:left a) 0)\n        b-left (:left b)\n        c-left (or (:left c) js/Number.MAX_SAFE_INTEGER)]\n    (if (< (- b-left a-left) (- c-left b-left))\n      a\n      c)))\n\n(defn mock-char-pos [e]\n  {:left (.-offsetLeft e)\n   :top  (.-offsetTop e)\n   :pos  (-> (.-id e)\n             (string/split \"_\")\n             second\n             int)})\n\n(defn get-caret-pos\n  \"Get caret offset position as well as input element rect.\n\n  This function is only used by autocomplete command or up/down command\n  where offset position is needed.\n\n  If you only need character position, use `pos` instead. Do NOT call this.\"\n  ([input] (get-caret-pos input (util/get-selection-start input)))\n  ([input pos]\n   (when input\n     (let [rect (bean/->clj (.. input (getBoundingClientRect) (toJSON)))]\n       (try\n         (some-> (gdom/getElement \"mock-text\")\n                 gdom/getChildren\n                 array-seq\n                 (util/nth-safe pos)\n                 mock-char-pos\n                 (assoc :rect rect))\n         (catch :default _e\n           (js/console.log \"index error\" _e)\n           {:pos pos\n            :rect rect\n            :left js/Number.MAX_SAFE_INTEGER\n            :top js/Number.MAX_SAFE_INTEGER}))))))\n\n\n(defn pos [input]\n  (when input\n    (util/get-selection-start input)))\n\n(defn start? [input]\n  (and input (zero? (util/get-selection-start input))))\n\n(defn end? [input]\n  (and input\n       (= (count (.-value input))\n          (util/get-selection-start input))))\n\n(defn set-selection-to [input n m]\n  (.setSelectionRange input n m))\n\n(defn move-cursor-to [input n]\n  (.setSelectionRange input n n))\n\n(defn move-cursor-forward\n  ([input]\n   (move-cursor-forward input 1))\n  ([input n]\n   (when input\n     (let [{:keys [pos]} (get-caret-pos input)\n           pos (if (and (= n 1) (not (zero? pos)))\n                 (or (util/safe-inc-current-pos-from-start (.-value input) pos)\n                     (inc pos))\n                 (+ pos n))]\n       (move-cursor-to input pos)))))\n\n(defn move-cursor-backward\n  ([input]\n   (move-cursor-backward input 1))\n  ([input n]\n   (when input\n     (let [{:keys [pos]} (get-caret-pos input)\n           pos (if (= n 1)\n                 (util/safe-dec-current-pos-from-end (.-value input) pos)\n                 (- pos n))\n           pos (max 0 (or pos (dec pos)))]\n       (move-cursor-to input pos)))))\n\n(defn- get-input-content&pos\n  [input]\n  [(gobj/get input \"value\")\n   (pos input)])\n\n(defn line-beginning-pos\n  [input]\n  (let [[content pos] (get-input-content&pos input)]\n    (if (zero? pos) 0\n        (let [last-newline-pos (string/last-index-of content \\newline (dec pos))]\n          (if (= nil last-newline-pos) 0 ;; no newline found (first line)\n              (inc last-newline-pos))))))\n\n(defn line-end-pos\n  [input]\n  (let [[content pos] (get-input-content&pos input)]\n    (or (string/index-of content \\newline pos)\n        (count content))))\n\n(defn beginning-of-line?\n  [input]\n  (let [[content pos] (get-input-content&pos input)]\n    (or (zero? pos)\n        (when-let [pre-char (subs content (dec pos) pos)]\n          (= pre-char \\newline)))))\n\n(defn move-cursor-to-line-end\n  [input]\n  (move-cursor-to input (line-end-pos input)))\n\n(defn move-cursor-to-line-beginning\n  [input]\n  (move-cursor-to input (line-beginning-pos input)))\n\n(defn move-cursor-to-end\n  [input]\n  (let [pos (count (gobj/get input \"value\"))]\n    (move-cursor-to input pos)))\n\n(defn move-cursor-to-thing\n  ([input thing]\n   (move-cursor-to-thing input thing (pos input)))\n  ([input thing from]\n   (let [[content _pos] (get-input-content&pos input)\n         pos (string/index-of content thing from)]\n     (move-cursor-to input pos))))\n\n(defn move-cursor-forward-by-word\n  [input]\n  (let [val   (.-value input)\n        current (util/get-selection-start input)\n        current (loop [idx current]\n                  (if (#{\\space \\newline} (util/nth-safe val idx))\n                    (recur (inc idx))\n                    idx))\n        idx (or (->> [(string/index-of val \\space current)\n                      (string/index-of val \\newline current)]\n                     (remove nil?)\n                     (apply min))\n                (count val))]\n    (move-cursor-to input idx)))\n\n(defn move-cursor-backward-by-word\n  [input]\n  (let [val     (.-value input)\n        current (util/get-selection-start input)\n        prev    (or\n                 (->> [(string/last-index-of val \\space (dec current))\n                       (string/last-index-of val \\newline (dec current))]\n                      (remove nil?)\n                      (apply max))\n                 0)\n        idx     (if (zero? prev)\n                  0\n                  (->\n                   (loop [idx prev]\n                     (if (#{\\space \\newline} (util/nth-safe val idx))\n                       (recur (dec idx))\n                       idx))\n                   inc))]\n    (move-cursor-to input idx)))\n\n(defn textarea-cursor-rect-first-row? [cursor]\n  (let [elms   (-> (gdom/getElement \"mock-text\")\n                   gdom/getChildren\n                   array-seq)\n        tops   (->> elms\n                    (map mock-char-pos)\n                    (map :top)\n                    (distinct))]\n    (= (first tops) (:top cursor))))\n\n(defn textarea-cursor-first-row? [input]\n  (textarea-cursor-rect-first-row? (get-caret-pos input)))\n\n\n(defn textarea-cursor-rect-last-row? [cursor]\n  (let [elms   (-> (gdom/getElement \"mock-text\")\n                   gdom/getChildren\n                   array-seq)\n        tops   (->> elms\n                    (map mock-char-pos)\n                    (map :top)\n                    (distinct))]\n    (= (last tops) (:top cursor))))\n\n(defn textarea-cursor-last-row? [input]\n  (textarea-cursor-rect-last-row? (get-caret-pos input)))\n\n(defn- next-cursor-pos-up-down [direction cursor]\n  (let [elms  (-> (gdom/getElement \"mock-text\")\n                  gdom/getChildren\n                  array-seq)\n        chars (->> elms\n                   (map mock-char-pos)\n                   (group-by :top))\n        tops  (sort (keys chars))\n        tops-p (partition-by #(== (:top cursor) %) tops)\n        line-next\n        (if (= :up direction)\n          (-> tops-p first last)\n          (-> tops-p last first))\n        lefts\n        (->> (get chars line-next)\n             (partition-by (fn [char-pos]\n                             (<= (:left char-pos) (:left cursor)))))\n        left-a (-> lefts first last)\n        left-c (-> lefts last first)\n        closer\n        (if (> 2 (count lefts))\n          left-a\n          (closer left-a cursor left-c))]\n    (:pos closer)))\n\n(defn- move-cursor-up-down\n  [input direction]\n    (move-cursor-to input (next-cursor-pos-up-down direction (get-caret-pos input))))\n\n(defn move-cursor-up [input]\n  (move-cursor-up-down input :up))\n\n(defn move-cursor-down [input]\n  (move-cursor-up-down input :down))\n\n(defn select-up-down [input direction anchor cursor-rect]\n  (let [next-cursor (next-cursor-pos-up-down direction cursor-rect)]\n    (if (<= anchor next-cursor)\n      (.setSelectionRange input anchor next-cursor \"forward\")\n      (.setSelectionRange input next-cursor anchor \"backward\"))))\n\n(comment\n  ;; previous implementation of up/down\n  (defn move-cursor-up\n    \"Move cursor up. If EOL, always move cursor to previous EOL.\"\n    [input]\n    (let [val (gobj/get input \"value\")\n          pos (util/get-selection-start input)\n          prev-idx (string/last-index-of val \\newline pos)\n          pprev-idx (or (string/last-index-of val \\newline (dec prev-idx)) -1)\n          cal-idx (+ pprev-idx pos (- prev-idx))]\n      (if (or (== pos (count val))\n              (> (- pos prev-idx) (- prev-idx pprev-idx)))\n        (move-cursor-to input prev-idx)\n        (move-cursor-to input cal-idx))))\n\n  (defn move-cursor-down\n    \"Move cursor down by calculating current cursor line pos.\n  If EOL, always move cursor to next EOL.\"\n    [input]\n    (let [val (gobj/get input \"value\")\n          pos (util/get-selection-start input)\n          prev-idx (or (string/last-index-of val \\newline pos) -1)\n          next-idx (or (string/index-of val \\newline (inc pos))\n                       (count val))\n          nnext-idx (or (string/index-of val \\newline (inc next-idx))\n                        (count val))\n          cal-idx (+ next-idx pos (- prev-idx))]\n      (if (> (- pos prev-idx) (- nnext-idx next-idx))\n        (move-cursor-to input nnext-idx)\n        (move-cursor-to input cal-idx)))))\n"]}