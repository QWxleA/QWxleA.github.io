{"version":3,"sources":["frontend/mobile/intent.cljs"],"mappings":"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","names":["frontend.mobile.intent/handle-received-text","result","map__61220","cljs.core/--destructure-map","cljs.core.get","vec__61221","cljs.core.nth","title","url","page","or__5043__auto__","frontend.state/get-current-page","clojure.string/lower-case","frontend.date.journal_name","format","frontend.db/get-page-format","time","frontend.date/get-current-time","and__5041__auto__","logseq.graph-parser.mldoc/link?","cljs.core/not","text","cljs.core._EQ_","clojure.string.split","G__61225","clojure.string/replace","cljs.core/boolean","logseq.graph-parser.text/get-matched-video","frontend.util.format","clojure.string/includes?","frontend.config/link-format","template","cljs.core.get_in","frontend.state.get_config","values","frontend.state/get-edit-block","frontend.state/append-current-edit-content!","frontend.handler.editor/api-insert-new-block!","frontend.mobile.intent/embed-asset-file","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","basename","js/module$node_modules$path$path.basename","label","frontend.util/node-path","path","frontend.handler.editor/get-asset-path","_file","promesa.core.catch$","js/module$node_modules$$capacitor$filesystem$dist$plugin_cjs.Filesystem","cljs.core/clj->js","error","lambdaisland.glogi.log","cljs.core/identity","frontend.handler.editor/get-asset-file-link","frontend.mobile.intent/embed-text-file","G__61233","js/decodeURIComponent","frontend.util/file-name-sanity","js/module$node_modules$path$path.join","frontend.config/get-repo-dir","frontend.state/get-current-repo","frontend.config/get-pages-directory","js/encodeURI","js/module$node_modules$path$path.extname","_","frontend.mobile.intent/handle-received-media","p__61234","map__61235","content","frontend.mobile.intent/handle-received-application","p__61236","map__61237","type","application-type","cljs.core/last","logseq.graph-parser.config/mldoc-support?","cljs.core/contains?","clojure.set.union","frontend.config/doc-formats","frontend.config/media-formats","cljs.core.keyword","frontend.handler.notification.show_BANG_","frontend.mobile.intent/decode-received-result","m","cljs.core.into","iter__5520__auto__","s__61239","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__61241","cljs.core/chunk-buffer","i__61240","vec__61242","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61238","cljs.core/chunk-rest","vec__61245","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","cljs.core/vector?","cljs.core/vec","cljs.core.map","clojure.string/blank?","frontend.mobile.util/native-ios?","frontend.mobile.intent/handle-result","clojure.string/starts-with?","sb__5687__auto__","goog.string/StringBuffer","*print-newline*-orig-val__61276","cljs.core/*print-newline*","*print-fn*-orig-val__61277","cljs.core/*print-fn*","*print-newline*-temp-val__61278","*print-fn*-temp-val__61279","x__5688__auto__","cljs.pprint.pprint","frontend.mobile.intent/handle-received","received","js/module$node_modules$send_intent$dist$esm$index.SendIntent","cljs.core.js__GT_clj","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.mobile.intent\n  (:require [\"@capacitor/filesystem\" :refer [Filesystem]]\n            [\"path\" :as path]\n            [\"send-intent\" :refer [^js SendIntent]]\n            [clojure.pprint :as pprint]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.notification :as notification]\n            [frontend.mobile.util :as mobile-util]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [lambdaisland.glogi :as log]\n            [logseq.graph-parser.config :as gp-config]\n            [logseq.graph-parser.mldoc :as gp-mldoc]\n            [logseq.graph-parser.text :as text]\n            [promesa.core :as p]))\n\n(defn- handle-received-text [result]\n  (let [{:keys [title url]} result\n        page (or (state/get-current-page)\n                 (string/lower-case (date/journal-name)))\n        format (db/get-page-format page)\n        time (date/get-current-time)\n        url (if (and (gp-mldoc/link? format title) (not url))\n              title\n              url)\n        text (if (= url title) nil title)\n        [text url] (if (or (gp-mldoc/link? format url) (not url))\n                     [text url]\n                     (string/split url \"\\\"\\n\"))\n        text (some-> text (string/replace #\"^\\\"\" \"\"))\n        url (and url\n                 (cond (boolean (text/get-matched-video url))\n                       (util/format \"{{video %s}}\" url)\n\n                       (and (string/includes? url \"twitter.com\")\n                            (string/includes? url \"status\"))\n                       (util/format \"{{twitter %s}}\" url)\n\n                       :else\n                       (if text\n                         (config/link-format format text url)\n                         url)))\n        template (get-in (state/get-config)\n                         [:quick-capture-templates :text]\n                         \"**{time}** [[quick capture]]: {text} {url}\")\n        values (-> (string/replace template \"{time}\" time)\n                   (string/replace \"{text}\" (or text \"\"))\n                   (string/replace \"{url}\" (or url \"\")))]\n    (if (state/get-edit-block)\n      (state/append-current-edit-content! values)\n      (editor-handler/api-insert-new-block! values {:page page\n                                                    :edit-block? false\n                                                    :replace-empty-target? true}))))\n\n(defn- embed-asset-file [url format]\n  (p/let [basename (path/basename url)\n          label (-> basename util/node-path.name)\n          time (date/get-current-time)\n          path (editor-handler/get-asset-path basename)\n          _file (p/catch\n                    (.copy Filesystem (clj->js {:from url :to path}))\n                    (fn [error]\n                      (log/error :copy-file-error {:error error})))\n          url (util/format \"../assets/%s\" basename)\n          url (editor-handler/get-asset-file-link format url label true)\n          template (get-in (state/get-config)\n                           [:quick-capture-templates :media]\n                           \"**{time}** [[quick capture]]: {url}\")]\n    (-> (string/replace template \"{time}\" time)\n        (string/replace \"{url}\" (or url \"\")))))\n\n(defn- embed-text-file [url title]\n  (p/let [time (date/get-current-time)\n          title (some-> (or title (path/basename url))\n                        js/decodeURIComponent\n                        util/node-path.name\n                        util/file-name-sanity\n                        (string/replace \".\" \"\"))\n          path (path/join (config/get-repo-dir (state/get-current-repo))\n                          (config/get-pages-directory)\n                          (str (js/encodeURI title) (path/extname url)))\n          _ (p/catch\n                (.copy Filesystem (clj->js {:from url :to path}))\n                (fn [error]\n                  (log/error :copy-file-error {:error error})))\n          url (util/format \"[[%s]]\" title)\n          template (get-in (state/get-config)\n                           [:quick-capture-templates :text]\n                           \"**{time}** [[quick capture]]: {url}\")]\n    (-> (string/replace template \"{time}\" time)\n        (string/replace \"{url}\" (or url \"\")))))\n\n(defn- handle-received-media [result]\n  (p/let [{:keys [url]} result\n          page (or (state/get-current-page) (string/lower-case (date/journal-name)))\n          format (db/get-page-format page)\n          content (embed-asset-file url format)]\n    (if (state/get-edit-block)\n      (state/append-current-edit-content! content)\n      (editor-handler/api-insert-new-block! content {:page page\n                                                     :edit-block? false\n                                                     :replace-empty-target? true}))))\n\n(defn- handle-received-application [result]\n  (p/let [{:keys [title url type]} result\n          page (or (state/get-current-page) (string/lower-case (date/journal-name)))\n          format (db/get-page-format page)\n          application-type (last (string/split type \"/\"))\n          content (cond\n                    (gp-config/mldoc-support? application-type)\n                    (embed-text-file url title)\n\n                    (contains? (set/union (config/doc-formats) config/media-formats)\n                               (keyword application-type))\n                    (embed-asset-file url format)\n\n                    :else\n                    (notification/show!\n                     [:div\n                      (str \"Import \" application-type \" file has not been supported. You can report it on \")\n                      [:a {:href \"https://github.com/logseq/logseq/issues\"\n                           :target \"_blank\"} \"Github\"]\n                      \". We will look into it soon.\"]\n                     :warning false))]\n    (if (state/get-edit-block)\n      (state/append-current-edit-content! content)\n      (editor-handler/api-insert-new-block! content {:page page\n                                                     :edit-block? false\n                                                     :replace-empty-target? true}))))\n\n(defn decode-received-result [m]\n  (into {} (for [[k v] m]\n             [k (cond (vector? v)\n                      (vec (map decode-received-result v))\n\n                      (string/blank? v)\n                      nil\n\n                      :else\n                      (if (mobile-util/native-ios?)\n                        (js/decodeURIComponent v)\n                        v))])))\n\n(defn handle-result [result]\n  (let [result (decode-received-result result)]\n    (when-let [type (:type result)]\n          (cond\n            (string/starts-with? type \"text/\")\n            (handle-received-text result)\n\n            (or (string/starts-with? type \"image/\")\n                (string/starts-with? type \"video/\")\n                (string/starts-with? type \"audio/\"))\n            (handle-received-media result)\n\n            (string/starts-with? type \"application/\")\n            (handle-received-application result)\n\n            :else\n            (notification/show!\n             [:div\n              \"Parsing current shared content are not supported. Please report the following codes on \"\n              [:a {:href \"https://github.com/logseq/logseq/issues/new?labels=from:in-app&template=bug_report.yaml\"\n                   :target \"_blank\"} \"Github\"]\n              \". We will look into it soon.\"\n              [:pre.code (with-out-str (pprint/pprint result))]] :warning false)))))\n\n(defn handle-received []\n  (p/let [received (p/catch\n                       (.checkSendIntentReceived SendIntent)\n                       (fn [error]\n                         (log/error :intent-received-error {:error error})))]\n    (when received\n      (let [result (js->clj received :keywordize-keys true)]\n        (handle-result result)))))\n"]}