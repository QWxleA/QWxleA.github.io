shadow$provide.module$node_modules$chrono_node$dist$locales$fr$parsers$FRWeekdayParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const constants_1=require("module$node_modules$chrono_node$dist$locales$fr$constants");global=require("module$node_modules$chrono_node$dist$utils$pattern");module=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const weeks_1=require("module$node_modules$chrono_node$dist$calculation$weeks"),
PATTERN=new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?(?:(?:ce)\\s*)?"+`(${global.matchAnyPattern(constants_1.WEEKDAY_DICTIONARY)})`+"(?:\\s*(?:\\,|\\)|\\）))?(?:\\s*(dernier|prochain)\\s*)?(?\x3d\\W|\\d|$)","i");class FRWeekdayParser extends module.AbstractParserWithWordBoundaryChecking{innerPattern(){return PATTERN}innerExtract(context,match){var dayOfWeek=match[1].toLowerCase();dayOfWeek=constants_1.WEEKDAY_DICTIONARY[dayOfWeek];if(void 0===dayOfWeek)return null;match=match[2];match=(match||"").toLowerCase();
let modifier=null;"dernier"==match?modifier="last":"prochain"==match&&(modifier="next");match=weeks_1.toDayJSWeekday(context.refDate,dayOfWeek,modifier);return context.createParsingComponents().assign("weekday",dayOfWeek).imply("day",match.date()).imply("month",match.month()+1).imply("year",match.year())}}exports.default=FRWeekdayParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$fr$parsers$FRWeekdayParser.js.map
