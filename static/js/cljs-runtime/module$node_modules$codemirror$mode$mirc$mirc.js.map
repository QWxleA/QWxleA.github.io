{
"version":3,
"file":"module$node_modules$codemirror$mode$mirc$mirc.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/codemirror/mode/mirc/mirc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$mirc$mirc\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n//mIRC mode by Ford_Lawnmower :: Based on Velocity mode by Steve O'Hara\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMIME(\"text/mirc\", \"mirc\");\nCodeMirror.defineMode(\"mirc\", function() {\n  function parseWords(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var specials = parseWords(\"$! $$ $& $? $+ $abook $abs $active $activecid \" +\n                            \"$activewid $address $addtok $agent $agentname $agentstat $agentver \" +\n                            \"$alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime \" +\n                            \"$asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind \" +\n                            \"$binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes \" +\n                            \"$chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color \" +\n                            \"$com $comcall $comchan $comerr $compact $compress $comval $cos $count \" +\n                            \"$cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight \" +\n                            \"$dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress \" +\n                            \"$deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll \" +\n                            \"$dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error \" +\n                            \"$eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir \" +\n                            \"$finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve \" +\n                            \"$fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt \" +\n                            \"$group $halted $hash $height $hfind $hget $highlight $hnick $hotline \" +\n                            \"$hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil \" +\n                            \"$inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect \" +\n                            \"$insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile \" +\n                            \"$isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive \" +\n                            \"$lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock \" +\n                            \"$lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer \" +\n                            \"$maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext \" +\n                            \"$menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode \" +\n                            \"$modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile \" +\n                            \"$nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly \" +\n                            \"$opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree \" +\n                            \"$pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo \" +\n                            \"$readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex \" +\n                            \"$reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline \" +\n                            \"$sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin \" +\n                            \"$site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname \" +\n                            \"$sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped \" +\n                            \"$syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp \" +\n                            \"$timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel \" +\n                            \"$ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver \" +\n                            \"$version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor\");\n  var keywords = parseWords(\"abook ajinvite alias aline ame amsg anick aop auser autojoin avoice \" +\n                            \"away background ban bcopy beep bread break breplace bset btrunc bunset bwrite \" +\n                            \"channel clear clearall cline clipboard close cnick color comclose comopen \" +\n                            \"comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver \" +\n                            \"debug dec describe dialog did didtok disable disconnect dlevel dline dll \" +\n                            \"dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace \" +\n                            \"drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable \" +\n                            \"events exit fclose filter findtext finger firewall flash flist flood flush \" +\n                            \"flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove \" +\n                            \"gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd \" +\n                            \"halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear \" +\n                            \"ialmark identd if ignore iline inc invite iuser join kick linesep links list \" +\n                            \"load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice \" +\n                            \"notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice \" +\n                            \"qme qmsg query queryn quit raw reload remini remote remove rename renwin \" +\n                            \"reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini \" +\n                            \"say scid scon server set showmirc signam sline sockaccept sockclose socklist \" +\n                            \"socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite \" +\n                            \"sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize \" +\n                            \"toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho \" +\n                            \"var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum \" +\n                            \"isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower \" +\n                            \"isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs \" +\n                            \"elseif else goto menu nicklist status title icon size option text edit \" +\n                            \"button check radio box scroll list combo link tab item\");\n  var functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\n  var isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\n  function chain(stream, state, f) {\n    state.tokenize = f;\n    return f(stream, state);\n  }\n  function tokenBase(stream, state) {\n    var beforeParams = state.beforeParams;\n    state.beforeParams = false;\n    var ch = stream.next();\n    if (/[\\[\\]{}\\(\\),\\.]/.test(ch)) {\n      if (ch == \"(\" && beforeParams) state.inParams = true;\n      else if (ch == \")\") state.inParams = false;\n      return null;\n    }\n    else if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    else if (ch == \"\\\\\") {\n      stream.eat(\"\\\\\");\n      stream.eat(/./);\n      return \"number\";\n    }\n    else if (ch == \"/\" && stream.eat(\"*\")) {\n      return chain(stream, state, tokenComment);\n    }\n    else if (ch == \";\" && stream.match(/ *\\( *\\(/)) {\n      return chain(stream, state, tokenUnparsed);\n    }\n    else if (ch == \";\" && !state.inParams) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    else if (ch == '\"') {\n      stream.eat(/\"/);\n      return \"keyword\";\n    }\n    else if (ch == \"$\") {\n      stream.eatWhile(/[$_a-z0-9A-Z\\.:]/);\n      if (specials && specials.propertyIsEnumerable(stream.current().toLowerCase())) {\n        return \"keyword\";\n      }\n      else {\n        state.beforeParams = true;\n        return \"builtin\";\n      }\n    }\n    else if (ch == \"%\") {\n      stream.eatWhile(/[^,\\s()]/);\n      state.beforeParams = true;\n      return \"string\";\n    }\n    else if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    else {\n      stream.eatWhile(/[\\w\\$_{}]/);\n      var word = stream.current().toLowerCase();\n      if (keywords && keywords.propertyIsEnumerable(word))\n        return \"keyword\";\n      if (functions && functions.propertyIsEnumerable(word)) {\n        state.beforeParams = true;\n        return \"keyword\";\n      }\n      return null;\n    }\n  }\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n  function tokenUnparsed(stream, state) {\n    var maybeEnd = 0, ch;\n    while (ch = stream.next()) {\n      if (ch == \";\" && maybeEnd == 2) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      if (ch == \")\")\n        maybeEnd++;\n      else if (ch != \" \")\n        maybeEnd = 0;\n    }\n    return \"meta\";\n  }\n  return {\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        beforeParams: false,\n        inParams: false\n      };\n    },\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    }\n  };\n});\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMIME","defineMode","parseWords","str","obj","words","split","i","length","tokenBase","stream","state","beforeParams","ch","next","test","inParams","eatWhile","eat","tokenComment","tokenize","f","match","tokenUnparsed","specials","propertyIsEnumerable","current","toLowerCase","isOperatorChar","word","keywords","functions","skipToEnd","maybeEnd","startState","token","eatSpace"]
}
