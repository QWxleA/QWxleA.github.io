shadow$provide.module$node_modules$element_resize_detector$src$element_resize_detector=function(global,require,module,exports){function isCollection(obj){return Array.isArray(obj)||void 0!==obj.length}function toArray(collection){if(Array.isArray(collection))return collection;var array=[];forEach(collection,function(obj){array.push(obj)});return array}function getOption(options,name,defaultValue){options=options[name];return void 0!==options&&null!==options||void 0===defaultValue?options:defaultValue}
var forEach=require("module$node_modules$element_resize_detector$src$collection_utils").forEach,elementUtilsMaker=require("module$node_modules$element_resize_detector$src$element_utils"),listenerHandlerMaker=require("module$node_modules$element_resize_detector$src$listener_handler"),idGeneratorMaker=require("module$node_modules$element_resize_detector$src$id_generator"),idHandlerMaker=require("module$node_modules$element_resize_detector$src$id_handler"),reporterMaker=require("module$node_modules$element_resize_detector$src$reporter"),
browserDetector=require("module$node_modules$element_resize_detector$src$browser_detector"),batchProcessorMaker=require("module$node_modules$batch_processor$src$batch_processor"),stateHandler=require("module$node_modules$element_resize_detector$src$state_handler"),objectStrategyMaker=require("module$node_modules$element_resize_detector$src$detection_strategy$object"),scrollStrategyMaker=require("module$node_modules$element_resize_detector$src$detection_strategy$scroll");module.exports=function(options$jscomp$0){options$jscomp$0=
options$jscomp$0||{};if(options$jscomp$0.idHandler)var idHandler={get:function(element){return options$jscomp$0.idHandler.get(element,!0)},set:options$jscomp$0.idHandler.set};else{var idGenerator=idGeneratorMaker();idHandler=idHandlerMaker({idGenerator,stateHandler})}var reporter=options$jscomp$0.reporter;reporter||=reporterMaker(!1===reporter);var batchProcessor=getOption(options$jscomp$0,"batchProcessor",batchProcessorMaker({reporter}));var JSCompiler_object_inline_callOnAdd_4497=!!getOption(options$jscomp$0,
"callOnAdd",!0);var JSCompiler_object_inline_debug_4498=!!getOption(options$jscomp$0,"debug",!1);var eventListenerHandler=listenerHandlerMaker(idHandler),elementUtils=elementUtilsMaker({stateHandler});idGenerator=getOption(options$jscomp$0,"strategy","object");var importantCssRules=getOption(options$jscomp$0,"important",!1);batchProcessor={reporter,batchProcessor,stateHandler,idHandler,important:importantCssRules};"scroll"===idGenerator&&(browserDetector.isLegacyOpera()?(reporter.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),
idGenerator="object"):browserDetector.isIE(9)&&(reporter.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),idGenerator="object"));if("scroll"===idGenerator)var detectionStrategy=scrollStrategyMaker(batchProcessor);else if("object"===idGenerator)detectionStrategy=objectStrategyMaker(batchProcessor);else throw Error("Invalid strategy name: "+idGenerator);var onReadyCallbacks={};return{listenTo:function(options,elements,listener$jscomp$0){function onResizeCallback(element){var listeners=
eventListenerHandler.get(element);forEach(listeners,function(listener){listener(element)})}function addListener(callOnAdd,element,listener){eventListenerHandler.add(element,listener);callOnAdd&&listener(element)}listener$jscomp$0||(listener$jscomp$0=elements,elements=options,options={});if(!elements)throw Error("At least one element required.");if(!listener$jscomp$0)throw Error("Listener required.");if(elements&&1===elements.nodeType)elements=[elements];else if(isCollection(elements))elements=toArray(elements);
else return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");var elementsReady=0,callOnAdd=getOption(options,"callOnAdd",JSCompiler_object_inline_callOnAdd_4497),onReadyCallback=getOption(options,"onReady",function(){}),debug=getOption(options,"debug",JSCompiler_object_inline_debug_4498);forEach(elements,function(element$jscomp$0){stateHandler.getState(element$jscomp$0)||(stateHandler.initState(element$jscomp$0),idHandler.set(element$jscomp$0));var id=idHandler.get(element$jscomp$0);
debug&&reporter.log("Attaching listener to element",id,element$jscomp$0);if(!elementUtils.isDetectable(element$jscomp$0)){debug&&reporter.log(id,"Not detectable.");if(elementUtils.isBusy(element$jscomp$0)){debug&&reporter.log(id,"System busy making it detectable");addListener(callOnAdd,element$jscomp$0,listener$jscomp$0);onReadyCallbacks[id]=onReadyCallbacks[id]||[];onReadyCallbacks[id].push(function(){elementsReady++;elementsReady===elements.length&&onReadyCallback()});return}debug&&reporter.log(id,
"Making detectable...");elementUtils.markBusy(element$jscomp$0,!0);return detectionStrategy.makeDetectable({debug,important:importantCssRules},element$jscomp$0,function(element){debug&&reporter.log(id,"onElementDetectable");if(stateHandler.getState(element)){elementUtils.markAsDetectable(element);elementUtils.markBusy(element,!1);detectionStrategy.addListener(element,onResizeCallback);addListener(callOnAdd,element,listener$jscomp$0);var state=stateHandler.getState(element);if(state&&state.startSize){var height=
element.offsetHeight;state.startSize.width===element.offsetWidth&&state.startSize.height===height||onResizeCallback(element)}onReadyCallbacks[id]&&forEach(onReadyCallbacks[id],function(callback){callback()})}else debug&&reporter.log(id,"Element uninstalled before being detectable.");delete onReadyCallbacks[id];elementsReady++;elementsReady===elements.length&&onReadyCallback()})}debug&&reporter.log(id,"Already detecable, adding listener.");addListener(callOnAdd,element$jscomp$0,listener$jscomp$0);
elementsReady++});elementsReady===elements.length&&onReadyCallback()},removeListener:eventListenerHandler.removeListener,removeAllListeners:eventListenerHandler.removeAllListeners,uninstall:function(elements){if(!elements)return reporter.error("At least one element is required.");if(elements&&1===elements.nodeType)elements=[elements];else if(isCollection(elements))elements=toArray(elements);else return reporter.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");forEach(elements,
function(element){eventListenerHandler.removeAllListeners(element);detectionStrategy.uninstall(element);stateHandler.cleanState(element)})},initDocument:function(targetDocument){detectionStrategy.initDocument&&detectionStrategy.initDocument(targetDocument)}}}}
//# sourceMappingURL=module$node_modules$element_resize_detector$src$element_resize_detector.js.map
