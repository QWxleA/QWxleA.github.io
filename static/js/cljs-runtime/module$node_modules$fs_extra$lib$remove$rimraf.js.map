{
"version":3,
"file":"module$node_modules$fs_extra$lib$remove$rimraf.js",
"lineCount":9,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAU3GC,QAASA,SAAS,CAACC,OAAD,CAAU,CACVC,uCAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAQRC,CAAAA,OAAR,CAAgBC,CAAA,EAAK,CACnBH,OAAA,CAAQG,CAAR,CAAA,CAAaH,OAAA,CAAQG,CAAR,CAAb,EAA2BC,EAAA,CAAGD,CAAH,CACvBA,EAAJ,EAAQ,MACRH,QAAA,CAAQG,CAAR,CAAA,CAAaH,OAAA,CAAQG,CAAR,CAAb,EAA2BC,EAAA,CAAGD,CAAH,CAHR,CAArB,CAMAH,QAAQK,CAAAA,YAAR,CAAuBL,OAAQK,CAAAA,YAA/B,EAA+C,CAfrB,CAkB5BC,QAASA,OAAO,CAACC,CAAD,CAAIP,OAAJ,CAAaQ,EAAb,CAAiB,CAC/B,IAAIC,UAAY,CAEO,WAAvB,GAAI,MAAOT,QAAX,GACEQ,EACA,CADKR,OACL,CAAAA,OAAA,CAAU,EAFZ,CAKAU,OAAA,CAAOH,CAAP,CAAU,sBAAV,CACAG,OAAOC,CAAAA,WAAP,CAAmB,MAAOJ,EAA1B,CAA6B,QAA7B,CAAuC,iCAAvC,CACAG;MAAOC,CAAAA,WAAP,CAAmB,MAAOH,GAA1B,CAA8B,UAA9B,CAA0C,oCAA1C,CACAE,OAAA,CAAOV,OAAP,CAAgB,2CAAhB,CACAU,OAAOC,CAAAA,WAAP,CAAmB,MAAOX,QAA1B,CAAmC,QAAnC,CAA6C,kCAA7C,CAEAD,SAAA,CAASC,OAAT,CAEAY,QAAA,CAAQL,CAAR,CAAWP,OAAX,CAAoBa,QAASA,GAAG,CAACC,EAAD,CAAK,CACnC,GAAIA,EAAJ,CAAQ,CACN,IAAiB,OAAjB,GAAKA,EAAGC,CAAAA,IAAR,EAAwC,WAAxC,GAA4BD,EAAGC,CAAAA,IAA/B,EAAmE,OAAnE,GAAuDD,EAAGC,CAAAA,IAA1D,GACIN,SADJ,CACgBT,OAAQK,CAAAA,YADxB,CAKE,MAHAI,UAAA,EAGO,CAAAO,UAAA,CAAW,EAAA,EAAMJ,OAAA,CAAQL,CAAR,CAAWP,OAAX,CAAoBa,EAApB,CAAjB,CAFkB,GAElB,CAFMJ,SAEN,CAIO,SAAhB,GAAIK,EAAGC,CAAAA,IAAP,GAA0BD,EAA1B,CAA+B,IAA/B,CAVM,CAaRN,EAAA,CAAGM,EAAH,CAdmC,CAArC,CAhB+B,CA6CjCF,QAASA,QAAQ,CAACL,CAAD;AAAIP,OAAJ,CAAaQ,EAAb,CAAiB,CAChCE,MAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CACAU,OAAA,CAAqB,UAArB,GAAO,MAAOF,GAAd,CAIAR,QAAQiB,CAAAA,KAAR,CAAcV,CAAd,CAAiB,CAACO,WAAD,CAAKI,EAAL,CAAA,EAAY,CAC3B,GAAIJ,WAAJ,EAAsB,QAAtB,GAAUA,WAAGC,CAAAA,IAAb,CACE,MAAOP,GAAA,CAAG,IAAH,CAIT,IAAIM,WAAJ,EAAsB,OAAtB,GAAUA,WAAGC,CAAAA,IAAb,EAAiCI,SAAjC,CACE,MAAOC,YAAA,CAAYb,CAAZ,CAAeP,OAAf,CAAwBc,WAAxB,CAA4BN,EAA5B,CAGT,IAAIU,EAAJ,EAAUA,EAAGG,CAAAA,WAAH,EAAV,CACE,MAAOC,MAAA,CAAMf,CAAN,CAASP,OAAT,CAAkBc,WAAlB,CAAsBN,EAAtB,CAGTR,QAAQuB,CAAAA,MAAR,CAAehB,CAAf,CAAkBO,EAAA,EAAM,CACtB,GAAIA,EAAJ,CAAQ,CACN,GAAgB,QAAhB,GAAIA,EAAGC,CAAAA,IAAP,CACE,MAAOP,GAAA,CAAG,IAAH,CAET,IAAgB,OAAhB,GAAIM,EAAGC,CAAAA,IAAP,CACE,MAAQI,UAAD,CACHC,WAAA,CAAYb,CAAZ,CAAeP,OAAf,CAAwBc,EAAxB,CAA4BN,EAA5B,CADG,CAEHc,KAAA,CAAMf,CAAN,CAASP,OAAT,CAAkBc,EAAlB,CAAsBN,EAAtB,CAEN,IAAgB,QAAhB,GAAIM,EAAGC,CAAAA,IAAP,CACE,MAAOO,MAAA,CAAMf,CAAN;AAASP,OAAT,CAAkBc,EAAlB,CAAsBN,EAAtB,CAVH,CAaR,MAAOA,GAAA,CAAGM,EAAH,CAde,CAAxB,CAd2B,CAA7B,CAPgC,CAwClCM,QAASA,YAAY,CAACb,CAAD,CAAIP,OAAJ,CAAac,EAAb,CAAiBN,EAAjB,CAAqB,CACxCE,MAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CACAU,OAAA,CAAqB,UAArB,GAAO,MAAOF,GAAd,CAEAR,QAAQwB,CAAAA,KAAR,CAAcjB,CAAd,CAAiB,GAAjB,CAAwBkB,GAAA,EAAO,CACzBA,GAAJ,CACEjB,EAAA,CAAgB,QAAb,GAAAiB,GAAIV,CAAAA,IAAJ,CAAwB,IAAxB,CAA+BD,EAAlC,CADF,CAGEd,OAAQ0B,CAAAA,IAAR,CAAanB,CAAb,CAAgB,CAACoB,GAAD,CAAMC,KAAN,CAAA,EAAgB,CAC1BD,GAAJ,CACEnB,EAAA,CAAgB,QAAb,GAAAmB,GAAIZ,CAAAA,IAAJ,CAAwB,IAAxB,CAA+BD,EAAlC,CADF,CAEWc,KAAMP,CAAAA,WAAN,EAAJ,CACLC,KAAA,CAAMf,CAAN,CAASP,OAAT,CAAkBc,EAAlB,CAAsBN,EAAtB,CADK,CAGLR,OAAQuB,CAAAA,MAAR,CAAehB,CAAf,CAAkBC,EAAlB,CAN4B,CAAhC,CAJ2B,CAA/B,CALwC,CAsB1CqB,QAASA,gBAAgB,CAACtB,CAAD,CAAIP,OAAJ,CAAac,EAAb,CAAiB,CACxC,IAAIc,KAEJlB,OAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CAEA,IAAI,CACFA,OAAQ8B,CAAAA,SAAR,CAAkBvB,CAAlB,CAAqB,GAArB,CADE,CAEF,MAAOkB,GAAP,CAAY,CACZ,GAAiB,QAAjB,GAAIA,GAAIV,CAAAA,IAAR,CACE,MAEA,MAAMD,GAAN,CAJU,CAQd,GAAI,CACFc,KAAA,CAAQ5B,OAAQ+B,CAAAA,QAAR,CAAiBxB,CAAjB,CADN,CAEF,MAAOoB,GAAP,CAAY,CACZ,GAAiB,QAAjB;AAAIA,GAAIZ,CAAAA,IAAR,CACE,MAEA,MAAMD,GAAN,CAJU,CAQVc,KAAMP,CAAAA,WAAN,EAAJ,CACEW,SAAA,CAAUzB,CAAV,CAAaP,OAAb,CAAsBc,EAAtB,CADF,CAGEd,OAAQiC,CAAAA,UAAR,CAAmB1B,CAAnB,CA7BsC,CAiC1Ce,QAASA,MAAM,CAACf,CAAD,CAAIP,OAAJ,CAAakC,UAAb,CAAyB1B,EAAzB,CAA6B,CAC1CE,MAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CACAU,OAAA,CAAqB,UAArB,GAAO,MAAOF,GAAd,CAKAR,QAAQsB,CAAAA,KAAR,CAAcf,CAAd,CAAiBO,EAAA,EAAM,CACjBA,CAAAA,EAAJ,EAAuB,WAAvB,GAAWA,EAAGC,CAAAA,IAAd,EAAkD,QAAlD,GAAsCD,EAAGC,CAAAA,IAAzC,EAA0E,OAA1E,GAA8DD,EAAGC,CAAAA,IAAjE,CAEWD,EAAJ,EAAsB,SAAtB,GAAUA,EAAGC,CAAAA,IAAb,CACLP,EAAA,CAAG0B,UAAH,CADK,CAGL1B,EAAA,CAAGM,EAAH,CALF,CACEqB,MAAA,CAAO5B,CAAP,CAAUP,OAAV,CAAmBQ,EAAnB,CAFmB,CAAvB,CAR0C,CAmB5C2B,QAASA,OAAO,CAAC5B,CAAD,CAAIP,OAAJ,CAAaQ,EAAb,CAAiB,CAC/BE,MAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CACAU,OAAA,CAAqB,UAArB,GAAO,MAAOF,GAAd,CAEAR,QAAQoC,CAAAA,OAAR,CAAgB7B,CAAhB,CAAmB,CAACO,WAAD,CAAKuB,KAAL,CAAA,EAAe,CAChC,GAAIvB,WAAJ,CAAQ,MAAON,GAAA,CAAGM,WAAH,CAEf;IAAIwB,EAAID,KAAME,CAAAA,MAAd,CACIC,QAEJ,IAAU,CAAV,GAAIF,CAAJ,CAAa,MAAOtC,QAAQsB,CAAAA,KAAR,CAAcf,CAAd,CAAiBC,EAAjB,CAEpB6B,MAAMnC,CAAAA,OAAN,CAAcuC,CAAA,EAAK,CACjBnC,MAAA,CAAOoC,IAAKC,CAAAA,IAAL,CAAUpC,CAAV,CAAakC,CAAb,CAAP,CAAwBzC,OAAxB,CAAiCc,EAAA,EAAM,CACrC,GAAI0B,CAAAA,QAAJ,CAAA,CAGA,GAAI1B,EAAJ,CAAQ,MAAON,GAAA,CAAGgC,QAAH,CAAc1B,EAAd,CACH,EAAZ,GAAI,EAAEwB,CAAN,EACEtC,OAAQsB,CAAAA,KAAR,CAAcf,CAAd,CAAiBC,EAAjB,CALF,CADqC,CAAvC,CADiB,CAAnB,CARgC,CAAlC,CAL+B,CA8BjCoC,QAASA,WAAW,CAACrC,CAAD,CAAIP,OAAJ,CAAa,CAC/B,IAAIkB,EAEJlB,QAAA,CAAUA,OAAV,EAAqB,EACrBD,SAAA,CAASC,OAAT,CAEAU,OAAA,CAAOH,CAAP,CAAU,sBAAV,CACAG,OAAOC,CAAAA,WAAP,CAAmB,MAAOJ,EAA1B,CAA6B,QAA7B,CAAuC,iCAAvC,CACAG,OAAA,CAAOV,OAAP,CAAgB,yBAAhB,CACAU,OAAOC,CAAAA,WAAP,CAAmB,MAAOX,QAA1B,CAAmC,QAAnC,CAA6C,kCAA7C,CAEA,IAAI,CACFkB,EAAA;AAAKlB,OAAQ6C,CAAAA,SAAR,CAAkBtC,CAAlB,CADH,CAEF,MAAOO,EAAP,CAAW,CACX,GAAgB,QAAhB,GAAIA,EAAGC,CAAAA,IAAP,CACE,MAIc,QAAhB,GAAID,EAAGC,CAAAA,IAAP,EAA2BI,SAA3B,EACEU,eAAA,CAAgBtB,CAAhB,CAAmBP,OAAnB,CAA4Bc,EAA5B,CAPS,CAWb,GAAI,CAEEI,EAAJ,EAAUA,EAAGG,CAAAA,WAAH,EAAV,CACEW,SAAA,CAAUzB,CAAV,CAAaP,OAAb,CAAsB,IAAtB,CADF,CAGEA,OAAQiC,CAAAA,UAAR,CAAmB1B,CAAnB,CALA,CAOF,MAAOO,EAAP,CAAW,CACX,GAAgB,QAAhB,GAAIA,EAAGC,CAAAA,IAAP,CAAA,CAEO,GAAgB,OAAhB,GAAID,EAAGC,CAAAA,IAAP,CACL,MAAOI,UAAA,CAAYU,eAAA,CAAgBtB,CAAhB,CAAmBP,OAAnB,CAA4Bc,EAA5B,CAAZ,CAA8CkB,SAAA,CAAUzB,CAAV,CAAaP,OAAb,CAAsBc,EAAtB,CAChD,IAAgB,QAAhB,GAAIA,EAAGC,CAAAA,IAAP,CACL,KAAMD,GAAN,CAEFkB,SAAA,CAAUzB,CAAV,CAAaP,OAAb,CAAsBc,EAAtB,CAPA,CADW,CA/BkB,CA2CjCkB,QAASA,UAAU,CAACzB,CAAD,CAAIP,OAAJ,CAAakC,UAAb,CAAyB,CAC1CxB,MAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CAEA,IAAI,CACFA,OAAQgC,CAAAA,SAAR,CAAkBzB,CAAlB,CADE,CAEF,MAAOO,EAAP,CAAW,CACX,GAAgB,SAAhB,GAAIA,EAAGC,CAAAA,IAAP,CACE,KAAMmB,WAAN;AACK,GAAgB,WAAhB,GAAIpB,EAAGC,CAAAA,IAAP,EAA2C,QAA3C,GAA+BD,EAAGC,CAAAA,IAAlC,EAAmE,OAAnE,GAAuDD,EAAGC,CAAAA,IAA1D,CACL+B,UAAA,CAAWvC,CAAX,CAAcP,OAAd,CADK,KAEA,IAAgB,QAAhB,GAAIc,EAAGC,CAAAA,IAAP,CACL,KAAMD,GAAN,CANS,CAN6B,CAiB5CgC,QAASA,WAAW,CAACvC,CAAD,CAAIP,OAAJ,CAAa,CAC/BU,MAAA,CAAOH,CAAP,CACAG,OAAA,CAAOV,OAAP,CACAA,QAAQ+C,CAAAA,WAAR,CAAoBxC,CAApB,CAAuBL,CAAAA,OAAvB,CAA+BuC,CAAA,EAAKG,UAAA,CAAWF,IAAKC,CAAAA,IAAL,CAAUpC,CAAV,CAAakC,CAAb,CAAX,CAA4BzC,OAA5B,CAApC,CAEA,IAAImB,SAAJ,CAAe,CAOb,MAAM6B,UAAYC,IAAKC,CAAAA,GAAL,EAClB,GACE,IAAI,CAEF,MADYlD,QAAQgC,CAAAA,SAARmB,CAAkB5C,CAAlB4C,CAAqBnD,OAArBmD,CADV,CAGF,KAAM,EAJV,MAKkC,GALlC,CAKSF,IAAKC,CAAAA,GAAL,EALT,CAKsBF,SALtB,CARa,CAAf,IAgBE,OADYhD,QAAQgC,CAAAA,SAARmB,CAAkB5C,CAAlB4C,CAAqBnD,OAArBmD,CApBiB,CApR7BC,MAAAA,CAAUxD,OAAA,CAAQ,qCAAR,CACd,aAEA,OAAMQ,GAAKR,OAAA,CAAQ,6CAAR,CAAX;AACM8C,KAAO9C,OAAA,CAAQ,2CAAR,CADb,CAEMc,OAASd,OAAA,CAAQ,mCAAR,CAFf,CAIMuB,UAAkC,OAAlCA,GAAaiC,MAAQC,CAAAA,QAsS3BxD,OAAOC,CAAAA,OAAP,CAAiBQ,MACjBA,OAAOgD,CAAAA,IAAP,CAAcV,UA/S6F;",
"sources":["node_modules/fs-extra/lib/remove/rimraf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fs_extra$lib$remove$rimraf\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst assert = require('assert')\n\nconst isWindows = (process.platform === 'win32')\n\nfunction defaults (options) {\n  const methods = [\n    'unlink',\n    'chmod',\n    'stat',\n    'lstat',\n    'rmdir',\n    'readdir'\n  ]\n  methods.forEach(m => {\n    options[m] = options[m] || fs[m]\n    m = m + 'Sync'\n    options[m] = options[m] || fs[m]\n  })\n\n  options.maxBusyTries = options.maxBusyTries || 3\n}\n\nfunction rimraf (p, options, cb) {\n  let busyTries = 0\n\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  assert(p, 'rimraf: missing path')\n  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string')\n  assert.strictEqual(typeof cb, 'function', 'rimraf: callback function required')\n  assert(options, 'rimraf: invalid options argument provided')\n  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object')\n\n  defaults(options)\n\n  rimraf_(p, options, function CB (er) {\n    if (er) {\n      if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&\n          busyTries < options.maxBusyTries) {\n        busyTries++\n        const time = busyTries * 100\n        // try again, with the same exact callback as this one.\n        return setTimeout(() => rimraf_(p, options, CB), time)\n      }\n\n      // already gone\n      if (er.code === 'ENOENT') er = null\n    }\n\n    cb(er)\n  })\n}\n\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nfunction rimraf_ (p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n  options.lstat(p, (er, st) => {\n    if (er && er.code === 'ENOENT') {\n      return cb(null)\n    }\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er && er.code === 'EPERM' && isWindows) {\n      return fixWinEPERM(p, options, er, cb)\n    }\n\n    if (st && st.isDirectory()) {\n      return rmdir(p, options, er, cb)\n    }\n\n    options.unlink(p, er => {\n      if (er) {\n        if (er.code === 'ENOENT') {\n          return cb(null)\n        }\n        if (er.code === 'EPERM') {\n          return (isWindows)\n            ? fixWinEPERM(p, options, er, cb)\n            : rmdir(p, options, er, cb)\n        }\n        if (er.code === 'EISDIR') {\n          return rmdir(p, options, er, cb)\n        }\n      }\n      return cb(er)\n    })\n  })\n}\n\nfunction fixWinEPERM (p, options, er, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.chmod(p, 0o666, er2 => {\n    if (er2) {\n      cb(er2.code === 'ENOENT' ? null : er)\n    } else {\n      options.stat(p, (er3, stats) => {\n        if (er3) {\n          cb(er3.code === 'ENOENT' ? null : er)\n        } else if (stats.isDirectory()) {\n          rmdir(p, options, er, cb)\n        } else {\n          options.unlink(p, cb)\n        }\n      })\n    }\n  })\n}\n\nfunction fixWinEPERMSync (p, options, er) {\n  let stats\n\n  assert(p)\n  assert(options)\n\n  try {\n    options.chmodSync(p, 0o666)\n  } catch (er2) {\n    if (er2.code === 'ENOENT') {\n      return\n    } else {\n      throw er\n    }\n  }\n\n  try {\n    stats = options.statSync(p)\n  } catch (er3) {\n    if (er3.code === 'ENOENT') {\n      return\n    } else {\n      throw er\n    }\n  }\n\n  if (stats.isDirectory()) {\n    rmdirSync(p, options, er)\n  } else {\n    options.unlinkSync(p)\n  }\n}\n\nfunction rmdir (p, options, originalEr, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n  options.rmdir(p, er => {\n    if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {\n      rmkids(p, options, cb)\n    } else if (er && er.code === 'ENOTDIR') {\n      cb(originalEr)\n    } else {\n      cb(er)\n    }\n  })\n}\n\nfunction rmkids (p, options, cb) {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.readdir(p, (er, files) => {\n    if (er) return cb(er)\n\n    let n = files.length\n    let errState\n\n    if (n === 0) return options.rmdir(p, cb)\n\n    files.forEach(f => {\n      rimraf(path.join(p, f), options, er => {\n        if (errState) {\n          return\n        }\n        if (er) return cb(errState = er)\n        if (--n === 0) {\n          options.rmdir(p, cb)\n        }\n      })\n    })\n  })\n}\n\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nfunction rimrafSync (p, options) {\n  let st\n\n  options = options || {}\n  defaults(options)\n\n  assert(p, 'rimraf: missing path')\n  assert.strictEqual(typeof p, 'string', 'rimraf: path should be a string')\n  assert(options, 'rimraf: missing options')\n  assert.strictEqual(typeof options, 'object', 'rimraf: options should be object')\n\n  try {\n    st = options.lstatSync(p)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return\n    }\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er.code === 'EPERM' && isWindows) {\n      fixWinEPERMSync(p, options, er)\n    }\n  }\n\n  try {\n    // sunos lets the root user unlink directories, which is... weird.\n    if (st && st.isDirectory()) {\n      rmdirSync(p, options, null)\n    } else {\n      options.unlinkSync(p)\n    }\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      return\n    } else if (er.code === 'EPERM') {\n      return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)\n    } else if (er.code !== 'EISDIR') {\n      throw er\n    }\n    rmdirSync(p, options, er)\n  }\n}\n\nfunction rmdirSync (p, options, originalEr) {\n  assert(p)\n  assert(options)\n\n  try {\n    options.rmdirSync(p)\n  } catch (er) {\n    if (er.code === 'ENOTDIR') {\n      throw originalEr\n    } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {\n      rmkidsSync(p, options)\n    } else if (er.code !== 'ENOENT') {\n      throw er\n    }\n  }\n}\n\nfunction rmkidsSync (p, options) {\n  assert(p)\n  assert(options)\n  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options))\n\n  if (isWindows) {\n    // We only end up here once we got ENOTEMPTY at least once, and\n    // at this point, we are guaranteed to have removed all the kids.\n    // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n    // try really hard to delete stuff on windows, because it has a\n    // PROFOUNDLY annoying habit of not closing handles promptly when\n    // files are deleted, resulting in spurious ENOTEMPTY errors.\n    const startTime = Date.now()\n    do {\n      try {\n        const ret = options.rmdirSync(p, options)\n        return ret\n      } catch {}\n    } while (Date.now() - startTime < 500) // give up after 500ms\n  } else {\n    const ret = options.rmdirSync(p, options)\n    return ret\n  }\n}\n\nmodule.exports = rimraf\nrimraf.sync = rimrafSync\n\n};"],
"names":["shadow$provide","global","require","module","exports","defaults","options","methods","forEach","m","fs","maxBusyTries","rimraf","p","cb","busyTries","assert","strictEqual","rimraf_","CB","er","code","setTimeout","lstat","st","isWindows","fixWinEPERM","isDirectory","rmdir","unlink","chmod","er2","stat","er3","stats","fixWinEPERMSync","chmodSync","statSync","rmdirSync","unlinkSync","originalEr","rmkids","readdir","files","n","length","errState","f","path","join","rimrafSync","lstatSync","rmkidsSync","readdirSync","startTime","Date","now","ret","process","platform","sync"]
}
