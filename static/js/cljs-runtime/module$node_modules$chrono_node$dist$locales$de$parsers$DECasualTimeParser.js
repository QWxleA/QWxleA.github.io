shadow$provide.module$node_modules$chrono_node$dist$locales$de$parsers$DECasualTimeParser=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});const dayjs_1=global(require("module$node_modules$dayjs$dayjs_min")),index_1=require("module$node_modules$chrono_node$dist$index");global=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");
const dayjs_2=require("module$node_modules$chrono_node$dist$utils$dayjs"),timeunits_1=require("module$node_modules$chrono_node$dist$utils$timeunits");class DECasualTimeParser extends global.AbstractParserWithWordBoundaryChecking{innerPattern(context){return/(diesen)?\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\W|$)/i}innerExtract(context,match){const targetDate=dayjs_1.default(context.refDate);match=match[2].toLowerCase();context=context.createParsingComponents();dayjs_2.implySimilarTime(context,
targetDate);return DECasualTimeParser.extractTimeComponents(context,match)}static extractTimeComponents(component,timeKeywordPattern){switch(timeKeywordPattern){case "morgen":component.imply("hour",6);component.imply("minute",0);component.imply("second",0);component.imply("meridiem",index_1.Meridiem.AM);break;case "vormittag":component.imply("hour",9);component.imply("minute",0);component.imply("second",0);component.imply("meridiem",index_1.Meridiem.AM);break;case "mittag":case "mittags":component.imply("hour",
12);component.imply("minute",0);component.imply("second",0);component.imply("meridiem",index_1.Meridiem.AM);break;case "nachmittag":component.imply("hour",15);component.imply("minute",0);component.imply("second",0);component.imply("meridiem",index_1.Meridiem.PM);break;case "abend":component.imply("hour",18);component.imply("minute",0);component.imply("second",0);component.imply("meridiem",index_1.Meridiem.PM);break;case "nacht":component.imply("hour",22);component.imply("minute",0);component.imply("second",
0);component.imply("meridiem",index_1.Meridiem.PM);break;case "mitternacht":1<component.get("hour")&&(component=timeunits_1.addImpliedTimeUnits(component,{day:1})),component.imply("hour",0),component.imply("minute",0),component.imply("second",0),component.imply("meridiem",index_1.Meridiem.AM)}return component}}exports.default=DECasualTimeParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$de$parsers$DECasualTimeParser.js.map
