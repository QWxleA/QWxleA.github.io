{"version":3,"sources":["frontend/db/query_dsl.cljs"],"mappings":"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","names":["frontend.db.query-dsl/->journal-day-int","input","clojure.string/lower-case","cljs.core/name","cljs.core._EQ_","frontend.db.utils/date->int","cljs-time.core/today","cljs-time.core/yesterday","cljs_time.core.plus","cljs_time.core.days","logseq.graph-parser.text/page-ref?","logseq.graph-parser.text/page-ref-un-brackets!","clojure.string/replace","clojure.string/capitalize","frontend.date/valid-journal-title?","frontend.date/journal-title->int","duration","frontend.util/parse-int","cljs.core.subs","kind","cljs.core/last","tf","G__77217","cljs-time.core/years","cljs-time.core/months","cljs-time.core/weeks","cljs-time.core/days","frontend.db.query-dsl/->timestamp","frontend.util/time-ms","cljs-time.coerce/to-long","frontend.date/journal-title->long","G__77222","cljs-time.core/hours","cljs-time.core/minutes","frontend.db.query-dsl/collect-vars","l","cljs.core/deref","vars","cljs.core.atom","clojure.walk/postwalk","f","cljs.core/Symbol","cljs.core/first","cljs.core.swap_BANG_","cljs.core/conj","frontend.db.query-dsl/build-and-or-not-result","fe","clauses","current-filter","nested-and?","cljs.core/every?","cljs.core/list?","cljs.core/cons","cljs.core/seq","cljs.core/coll?","cljs.core.apply","cljs.core/concat","cljs.core/count","cljs.core/ffirst","cljs.core/rest","or__4253__auto__","cljs.core.map","result","cljs.core/vector?","cljs.core/list","js/frontend","js/frontend.db","js/frontend.db.query-dsl","js/frontend.db.query-dsl.remove-nil?","frontend.db.query-dsl/remove-nil?","cljs.core.partial","cljs.core/remove","cljs.core/nil?","p__77231","map__77232","cljs.core/--destructure-map","cljs.core.get","frontend.db.query-dsl/build-and-or-not","e","env","level","raw-clauses","form","G__77233","G__77234","G__77235","frontend.db.query-dsl/build-query","cljs.core.assoc","cljs.core.distinct","vars'","clojure.set.union","cljs.core/set","query","cljs.core/contains?","cljs.core/reset!","cljs.core.mapcat","frontend.db.query-dsl/build-between-two-arg","vec__77236","cljs.core.nth","start","end","cljs.core.sort","cljs.core/List","frontend.db.query-dsl/build-between-three-arg","k","cljs.core/second","and__4251__auto__","vec__77240","sym","frontend.db.query-dsl/build-between","frontend.db.query-dsl/build-property-two-arg","v","logseq.graph_parser.text.parse_property","frontend.state.get_config","cljs.core.keyword","frontend.db.query-dsl/build-property-one-arg","frontend.db.query-dsl/build-property","frontend.db.query-dsl/build-task","markers","cljs.core.comp","clojure.string/upper-case","frontend.db.query-dsl/build-priority","priorities","frontend.db.query-dsl/build-page-property","vec__77247","v'","val","frontend.db.query-dsl/build-page-tags","tags","frontend.db.query-dsl/build-all-page-tags","frontend.db.query-dsl/build-sample","sample","temp__5720__auto__","num","cljs.core/integer?","frontend.db.query-dsl/build-sort-by","sort-by_","vec__77252","order","get-value","p1__77251#","cljs.core.get_in","comp","cljs.core/>=","cljs.core/<=","cljs.core/flatten","cljs.core.sort_by","frontend.db.query-dsl/build-page","page-name","frontend.util/page-name-sanity-lc","frontend.db.query-dsl/build-namespace","page","clojure.string/blank?","frontend.db.query-dsl/build-page-ref","G__77257","frontend.db.query-dsl/build-block-content","var_args","G__77259","js/Error","p__77260","map__77261","frontend.db.query_dsl.build_query","sort-by","blocks?","cljs.core.symbol","page-ref?","frontend.db.query-dsl/pre-transform","s","G__77264","logseq.graph-parser.text/page-ref-re","logseq.graph-parser.text/between-re","p__77265","vec__77266","_","x","clojure.string.split","cljs.core.remove","frontend.util/safe-re-find","p1__77263#","cljs.core/some","clojure.string/ends-with?","clojure.string.join","frontend.util.format","frontend.db.query-dsl/add-bindings!","q","vec__77269","forms","syms","b?","p?","not?","clojure.set.intersection","or?","cljs.core.concat","cljs.core/string?","frontend.db.query-dsl/parse","map__77272","G__77273","cljs.reader.read_string","rules","result'","key","cljs.core.mapv","frontend.db.rules/query-dsl-rules","cljs.core/boolean","frontend.db.query-dsl/query-wrapper","where","cljs.core/vec","cljs.core.sequence","frontend.db.model/block-attrs","cljs.core.conj","cljs.core.prn","frontend.db.query-dsl/query","repo","query-string","cljs.core.not_EQ_","map__77274","query-string'","frontend.template/resolve-dynamic-template!","query'","G__77275","cljs.core/identity","random-samples","col","cljs.core.take","cljs.core/shuffle","transform-fn","frontend.db.query-react/react-query","frontend.db.query-dsl/custom-query","query-m","query-opts","map__77276","cljs.core.pr_str","G__77277","cljs.core.merge"],"sourcesContent":["(ns frontend.db.query-dsl\n  \"Handles executing dsl queries a.k.a. simple queries\"\n  (:require [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [cljs.reader :as reader]\n            [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [frontend.state :as state]\n            [frontend.date :as date]\n            [frontend.db.model :as model]\n            [frontend.db.query-react :as query-react]\n            [frontend.db.utils :as db-utils]\n            [frontend.db.rules :as rules]\n            [frontend.template :as template]\n            [logseq.graph-parser.text :as text]\n            [frontend.util :as util]))\n\n\n;; Query fields:\n\n;; and\n;; or\n;; not\n;; between\n;;   Example: (between -7d +7d)\n;;            (between created-at -1d today)\n;;            (between last-modified-at -1d today)\n;; [[page-ref]]\n;; property (block)\n;; task (block)\n;; priority (block)\n;; page\n;; page-property (page)\n;; page-tags (page)\n;; all-page-tags\n;; project (block, TBD)\n\n;; Sort by (field, asc/desc):\n\n;; created_at\n;; last_modified_at\n\n;; (sort-by last_modified_at asc)\n\n;; (between -7d +7d)\n\n;; Time helpers\n;; ============\n(defn- ->journal-day-int [input]\n  (let [input (string/lower-case (name input))]\n    (cond\n      (= \"today\" input)\n      (db-utils/date->int (t/today))\n\n      (= \"yesterday\" input)\n      (db-utils/date->int (t/yesterday))\n\n      (= \"tomorrow\" input)\n      (db-utils/date->int (t/plus (t/today) (t/days 1)))\n\n      (text/page-ref? input)\n      (let [input (-> (text/page-ref-un-brackets! input)\n                      (string/replace \":\" \"\")\n                      (string/capitalize))]\n        (when (date/valid-journal-title? input)\n          (date/journal-title->int input)))\n\n      :else\n      (let [duration (util/parse-int (subs input 0 (dec (count input))))\n            kind (last input)\n            tf (case kind\n                 \"y\" t/years\n                 \"m\" t/months\n                 \"w\" t/weeks\n                 t/days)]\n        (db-utils/date->int (t/plus (t/today) (tf duration)))))))\n\n(defn- ->timestamp [input]\n  (let [input (string/lower-case (name input))]\n    (cond\n      (= \"now\" input)\n      (util/time-ms)\n\n      (= \"today\" input)\n      (tc/to-long (t/today))\n\n      (= \"yesterday\" input)\n      (tc/to-long (t/yesterday))\n\n      (= \"tomorrow\" input)\n      (tc/to-long (t/plus (t/today) (t/days 1)))\n\n      (text/page-ref? input)\n      (let [input (-> (text/page-ref-un-brackets! input)\n                      (string/replace \":\" \"\")\n                      (string/capitalize))]\n        (when (date/valid-journal-title? input)\n          (date/journal-title->long input)))\n\n      :else\n      (let [duration (util/parse-int (subs input 0 (dec (count input))))\n            kind (last input)\n            tf (case kind\n                 \"y\" t/years\n                 \"m\" t/months\n                 \"w\" t/weeks\n                 \"h\" t/hours\n                 \"n\" t/minutes          ; min\n                 t/days)]\n        (tc/to-long (t/plus (t/today) (tf duration)))))))\n\n;; Boolean operator utils: and, or, not\n;; ======================\n(defn- collect-vars\n  [l]\n  (let [vars (atom #{})]\n    (walk/postwalk\n     (fn [f]\n       (when (and (symbol? f) (= \\? (first (name f))))\n         (swap! vars conj f))\n       f)\n     l)\n    @vars))\n\n(defn- build-and-or-not-result\n  [fe clauses current-filter nested-and?]\n  (cond\n    (= fe 'not)\n    (if (every? list? clauses)\n      (cons fe (seq clauses))\n      (let [clauses (if (coll? (first clauses))\n                      (apply concat clauses)\n                      clauses)\n            clauses (if (and (= 1 (count clauses))\n                             (= 'and (ffirst clauses)))\n                      ;; unflatten\n                      (rest (first clauses))\n                      clauses)]\n        (cons fe (seq clauses))))\n\n    (coll? (first clauses))\n    (cond\n      (= current-filter 'not)\n      (cons 'and clauses)\n\n      (or (= current-filter 'or)\n          nested-and?)\n      (cons 'and clauses)\n\n      :else\n      (->> clauses\n           (map (fn [result]\n                  (if (list? result)\n                    result\n                    (let [result (if (vector? (ffirst result))\n                                   (apply concat result)\n                                   result)]\n                      (cons 'and (seq result))))))\n           (apply list fe)))\n\n    :else\n    (apply list fe clauses)))\n\n(declare build-query)\n\n(defonce remove-nil? (partial remove nil?))\n\n(defn- build-and-or-not\n  [e {:keys [current-filter vars] :as env} level fe]\n  (let [raw-clauses (map (fn [form]\n                           (build-query form (assoc env :current-filter fe) (inc level)))\n                         (rest e))\n        clauses (->> raw-clauses\n                     (map :query)\n                     remove-nil?\n                     (distinct))\n        nested-and? (and (= fe 'and) (= current-filter 'and))]\n    (when (seq clauses)\n      (let [result (build-and-or-not-result\n                    fe clauses current-filter nested-and?)\n            vars' (set/union (set @vars) (collect-vars result))\n            query (cond\n                    nested-and?\n                    result\n\n                    (and (zero? level) (contains? #{'and 'or} fe))\n                    result\n\n                    (and (= 'not fe) (some? current-filter))\n                    result\n\n                    :else\n                    [result])]\n        (reset! vars vars')\n        {:query query\n         :rules (distinct (mapcat :rules raw-clauses))}))))\n\n;; build-query fns\n;; ===============\n(defn- build-between-two-arg\n  [e]\n  (let [start (->journal-day-int (nth e 1))\n         end (->journal-day-int (nth e 2))\n         [start end] (sort [start end])]\n    {:query (list 'between '?b start end)\n     :rules [:between]}))\n\n(defn- build-between-three-arg\n  [e]\n  (let [k (-> (second e)\n              (name)\n              (string/lower-case)\n              (string/replace \"-\" \"_\"))]\n    (when (contains? #{\"created_at\" \"last_modified_at\"} k)\n      (let [start (->timestamp (nth e 2))\n             end (->timestamp (nth e 3))]\n        (when (and start end)\n          (let [[start end] (sort [start end])\n                sym '?v]\n            {:query [['?b :block/properties '?prop]\n                     [(list 'get '?prop k) sym]\n                     [(list '>= sym start)]\n                     [(list '< sym end)]]}))))))\n\n(defn- build-between\n  [e]\n  (cond\n    (= 3 (count e))\n    (build-between-two-arg e)\n\n    ;; (between created_at -1d today)\n    (= 4 (count e))\n    (build-between-three-arg e)))\n\n(defn- build-property-two-arg\n  [e]\n  (let [k (string/replace (name (nth e 1)) \"_\" \"-\")\n        v (nth e 2)\n        v (if-not (nil? v)\n            (text/parse-property k v (state/get-config))\n            v)\n        v (if (coll? v) (first v) v)]\n    {:query (list 'property '?b (keyword k) v)\n     :rules [:property]}))\n\n(defn- build-property-one-arg\n  [e]\n  (let [k (string/replace (name (nth e 1)) \"_\" \"-\")]\n    {:query (list 'has-property '?b (keyword k))\n     :rules [:has-property]}))\n\n(defn- build-property [e]\n  (cond\n    (= 3 (count e))\n    (build-property-two-arg e)\n\n    (= 2 (count e))\n    (build-property-one-arg e)))\n\n(defn- build-task\n  [e]\n  (let [markers (if (coll? (first (rest e)))\n                  (first (rest e))\n                  (rest e))]\n    (when (seq markers)\n      (let [markers (set (map (comp string/upper-case name) markers))]\n        {:query (list 'task '?b markers)\n         :rules [:task]}))))\n\n(defn- build-priority\n  [e]\n  (let [priorities (if (coll? (first (rest e)))\n                     (first (rest e))\n                     (rest e))]\n    (when (seq priorities)\n      (let [priorities (set (map (comp string/upper-case name) priorities))]\n        {:query (list 'priority '?b priorities)\n         :rules [:priority]}))))\n\n(defn- build-page-property\n  [e]\n  (let [[k v] (rest e)\n        k (string/replace (name k) \"_\" \"-\")]\n    (if (some? v)\n      (let [v' (text/parse-property k v (state/get-config))\n            val (if (coll? v') (first v') v')]\n        {:query (list 'page-property '?p (keyword k) val)\n         :rules [:page-property]})\n      {:query (list 'has-page-property '?p (keyword k))\n       :rules [:has-page-property]})))\n\n(defn- build-page-tags\n  [e]\n  (let [tags (if (coll? (first (rest e)))\n               (first (rest e))\n               (rest e))\n        tags (map (comp string/lower-case name) tags)]\n    (when (seq tags)\n      (let [tags (set (map (comp text/page-ref-un-brackets! string/lower-case name) tags))]\n        {:query (list 'page-tags '?p tags)\n         :rules [:page-tags]}))))\n\n(defn- build-all-page-tags\n  []\n  {:query (list 'all-page-tags '?p)\n   :rules [:all-page-tags]} )\n\n(defn- build-sample\n  [e sample]\n  (when-let [num (second e)]\n    (when (integer? num)\n      (reset! sample num)\n      {:query [['?p :block/uuid]]})))\n\n(defn- build-sort-by\n  [e sort-by_]\n  (let [[k order] (rest e)\n             order (if (and order (contains? #{:asc :desc}\n                                             (keyword (string/lower-case (name order)))))\n                     (keyword (string/lower-case (name order)))\n                     :desc)\n             k (-> (string/lower-case (name k))\n                   (string/replace \"_\" \"-\"))\n             get-value (cond\n                         (= k \"created-at\")\n                         :block/created-at\n\n                         (= k \"updated-at\")\n                         :block/updated-at\n\n                         :else\n                         #(get-in % [:block/properties k]))\n             comp (if (= order :desc) >= <=)]\n         (reset! sort-by_\n                 (fn [result]\n                   (->> result\n                        flatten\n                        (sort-by get-value comp))))\n         nil))\n\n(defn- build-page\n  [e]\n  (let [page-name (text/page-ref-un-brackets! (str (first (rest e))))\n        page-name (util/page-name-sanity-lc page-name)]\n    {:query (list 'page '?b page-name)\n     :rules [:page]}))\n\n(defn- build-namespace\n  [e]\n  (let [page-name (text/page-ref-un-brackets! (str (first (rest e))))\n        page (util/page-name-sanity-lc page-name)]\n    (when-not (string/blank? page)\n      {:query (list 'namespace '?p page)\n       :rules [:namespace]})))\n\n(defn- build-page-ref\n  [e]\n  (let [page-name (-> (text/page-ref-un-brackets! e)\n                      (util/page-name-sanity-lc))]\n    {:query (list 'page-ref '?b page-name)\n     :rules [:page-ref]}))\n\n(defn- build-block-content [e]\n  {:query (list 'block-content '?b e)\n   :rules [:block-content]})\n\n(defn build-query\n  \"This fn converts a form/list in a query e.g. `(operator arg1 arg2)` to its datalog\n  equivalent. This fn is called recursively on sublists for boolean operators\n  `and`, `or` and `not`. This fn should return a map with :query and :rules or nil.\n\nSome bindings in this fn:\n\n* e - the list being processed\n* fe - the query operator e.g. `property`\"\n  ([e env]\n   (build-query e (assoc env :vars (atom {})) 0))\n  ([e {:keys [sort-by blocks? sample] :as env :or {blocks? (atom nil)}} level]\n   ; {:post [(or (nil? %) (map? %))]}\n   (let [fe (first e)\n         fe (when fe (symbol (string/lower-case (name fe))))\n         page-ref? (text/page-ref? e)]\n     (when (or (and page-ref?\n                    (not (contains? #{'page-property 'page-tags} (:current-filter env))))\n               (contains? #{'between 'property 'todo 'task 'priority 'sort-by 'page} fe)\n               (and (not page-ref?) (string? e)))\n       (reset! blocks? true))\n     (cond\n       (nil? e)\n       nil\n\n       page-ref?\n       (build-page-ref e)\n\n       (string? e)                      ; block content full-text search, could be slow\n       (build-block-content e)\n\n       (contains? #{'and 'or 'not} fe)\n       (build-and-or-not e env level fe)\n\n       (= 'between fe)\n       (build-between e)\n\n       (= 'property fe)\n       (build-property e)\n\n       ;; task is the new name and todo is the old one\n       (or (= 'todo fe) (= 'task fe))\n       (build-task e)\n\n       (= 'priority fe)\n       (build-priority e)\n\n       (= 'sort-by fe)\n       (build-sort-by e sort-by)\n\n       (= 'page fe)\n       (build-page e)\n\n       (= 'namespace fe)\n       (build-namespace e)\n\n       (= 'page-property fe)\n       (build-page-property e)\n\n       (= 'page-tags fe)\n       (build-page-tags e)\n\n       (= 'all-page-tags fe)\n       (build-all-page-tags)\n\n       (= 'sample fe)\n       (build-sample e sample)\n\n       :else\n       nil))))\n\n;; parse fns\n;; =========\n\n(defn- pre-transform\n  [s]\n  (some-> s\n          (string/replace text/page-ref-re \"\\\"[[$1]]\\\"\")\n          (string/replace text/between-re (fn [[_ x]]\n                                            (->> (string/split x #\" \")\n                                                 (remove string/blank?)\n                                                 (map (fn [x]\n                                                        (if (or (contains? #{\"+\" \"-\"} (first x))\n                                                                (and (util/safe-re-find #\"\\d\" (first x))\n                                                                     (some #(string/ends-with? x %) [\"y\" \"m\" \"d\" \"h\" \"min\"])))\n                                                          (keyword (name x))\n                                                          x)))\n                                                 (string/join \" \")\n                                                 (util/format \"(between %s)\"))))))\n\n(defn- add-bindings!\n  [form q]\n  (let [forms (set (flatten q))\n        syms ['?b '?p 'not]\n        [b? p? not?] (-> (set/intersection (set syms) forms)\n                         (map syms))\n        or? (contains? (set (flatten form)) 'or)]\n    (cond\n      not?\n      (cond\n        (and b? p?)\n        (concat [['?b :block/uuid] ['?p :block/name] ['?b :block/page '?p]] q)\n\n        b?\n        (concat [['?b :block/uuid]] q)\n\n        p?\n        (concat [['?p :block/name]] q)\n\n        :else\n        q)\n\n      or?\n      (cond\n        (->> (flatten form)\n             (remove text/page-ref?)\n             (some string?))            ; block full-text search\n        (concat [['?b :block/content '?content]] [q])\n\n        :else\n        q)\n\n      (and b? p?)\n      (concat [['?b :block/page '?p]] q)\n\n      :else\n      q)))\n\n(defn parse\n  [s]\n  (when (and (string? s)\n             (not (string/blank? s)))\n    (let [s (if (= \\# (first s)) (util/format \"[[%s]]\" (subs s 1)) s)\n          form (some-> s\n                       (pre-transform)\n                       (reader/read-string))\n          sort-by (atom nil)\n          blocks? (atom nil)\n          sample (atom nil)\n          {result :query rules :rules}\n          (when form (build-query form {:sort-by sort-by\n                                        :blocks? blocks?\n                                        :sample sample}))\n          result' (when (seq result)\n                    (let [key (if (coll? (first result))\n                                ;; Only queries for this branch are not's like:\n                                ;; [(not (page-ref ?b \"page 2\"))]\n                                (keyword (ffirst result))\n                                (keyword (first result)))]\n                      (add-bindings! form\n                                     (if (= key :and) (rest result) result))))]\n      {:query result'\n       :rules (mapv rules/query-dsl-rules rules)\n       :sort-by @sort-by\n       :blocks? (boolean @blocks?)\n       :sample sample})))\n\n;; Main fns\n;; ========\n\n(defn query-wrapper\n  [where blocks?]\n  (let [q (if blocks?                   ; FIXME: it doesn't need to be either blocks or pages\n            `[:find (~'pull ~'?b ~model/block-attrs)\n              :in ~'$ ~'%\n              :where]\n            '[:find (pull ?p [*])\n              :in $ %\n              :where])\n        result (if (coll? (first where))\n                 (apply conj q where)\n                 (conj q where))]\n    (prn \"Datascript query: \" result)\n    result))\n\n(defn query\n  \"Runs a dsl query with query as a string. Primary use is from '{{query }}'\"\n  [repo query-string]\n  (when (and (string? query-string) (not= \"\\\"\\\"\" query-string))\n    (let [query-string' (template/resolve-dynamic-template! query-string)\n          {:keys [query rules sort-by blocks? sample]} (parse query-string')]\n      (when-let [query' (some-> query (query-wrapper blocks?))]\n        (let [sort-by (or sort-by identity)\n              random-samples (if @sample\n                               (fn [col]\n                                 (take @sample (shuffle col)))\n                               identity)\n              transform-fn (comp sort-by random-samples)]\n          (query-react/react-query repo\n                                   {:query query'\n                                    :query-string query-string\n                                    :rules rules}\n                                   {:use-cache? false\n                                    :transform-fn transform-fn}))))))\n\n(defn custom-query\n  \"Runs a dsl query with query as a seq. Primary use is from advanced query\"\n  [repo query-m query-opts]\n  (when (seq (:query query-m))\n    (let [query-string (template/resolve-dynamic-template! (pr-str (:query query-m)))\n          {:keys [query sort-by blocks? rules]} (parse query-string)]\n      (when-let [query' (some-> query (query-wrapper blocks?))]\n        (query-react/react-query repo\n                           (merge\n                            query-m\n                            {:query query'\n                             :rules rules})\n                           (merge\n                            query-opts\n                            (when sort-by\n                              {:transform-fn sort-by})))))))\n\n(comment\n  ;; {{query (and (page-property foo bar) [[hello]])}}\n\n  (query \"(and [[foo]] [[bar]])\")\n\n  (query \"(or [[foo]] [[bar]])\")\n\n  (query \"(not (or [[foo]] [[bar]]))\")\n\n  (query \"(between -7d +7d)\")\n\n  (query \"(between -7d today)\")\n\n  (query \"(between created_at yesterday today)\")\n\n  (query \"(and [[some page]] (property foo bar))\")\n\n  (query \"(and [[some page]] (task now later))\")\n\n  (query \"(and [[some page]] (priority A))\")\n\n  ;; nested query\n  (query \"(and [[baz]] (or [[foo]] [[bar]]))\")\n\n  (query \"(and [[some page]] (sort-by created-at))\")\n\n  (query \"(and (page-property foo bar) [[hello]])\"))\n"]}