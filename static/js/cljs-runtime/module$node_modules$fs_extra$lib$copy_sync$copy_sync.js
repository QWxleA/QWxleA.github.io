shadow$provide.module$node_modules$fs_extra$lib$copy_sync$copy_sync=function(global,require,module,exports){function startCopy(destStat,src,dest,opts){if(!opts.filter||opts.filter(src,dest)){{const srcStat=(opts.dereference?fs.statSync:fs.lstatSync)(src);if(srcStat.isDirectory())if(destStat){if(destStat&&!destStat.isDirectory())throw Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);dest=copyDir(src,dest,opts)}else destStat=srcStat.mode,fs.mkdirSync(dest),copyDir(src,dest,
opts),dest=fs.chmodSync(dest,destStat);else if(srcStat.isFile()||srcStat.isCharacterDevice()||srcStat.isBlockDevice()){var srcStat$jscomp$0=srcStat;if(destStat)if(opts.overwrite)fs.unlinkSync(dest),dest=copyFile(srcStat$jscomp$0,src,dest,opts);else{if(opts.errorOnExist)throw Error(`'${dest}' already exists`);dest=void 0}else dest=copyFile(srcStat$jscomp$0,src,dest,opts)}else if(srcStat.isSymbolicLink())b:if(src=fs.readlinkSync(src),opts.dereference&&(src=path.resolve(process.cwd(),src)),destStat){try{srcStat$jscomp$0=
fs.readlinkSync(dest)}catch(err){if("EINVAL"===err.code||"UNKNOWN"===err.code){dest=fs.symlinkSync(src,dest);break b}throw err;}opts.dereference&&(srcStat$jscomp$0=path.resolve(process.cwd(),srcStat$jscomp$0));if(stat.isSrcSubdir(src,srcStat$jscomp$0))throw Error(`Cannot copy '${src}' to a subdirectory of itself, '${srcStat$jscomp$0}'.`);if(fs.statSync(dest).isDirectory()&&stat.isSrcSubdir(srcStat$jscomp$0,src))throw Error(`Cannot overwrite '${srcStat$jscomp$0}' with '${src}'.`);opts=src;fs.unlinkSync(dest);
dest=fs.symlinkSync(opts,dest)}else dest=fs.symlinkSync(src,dest);else dest=void 0}return dest}}function copyFile(srcStat,src,dest,opts){fs.copyFileSync(src,dest);opts.preserveTimestamps&&(opts=srcStat.mode,0===(opts&128)&&fs.chmodSync(dest,opts|128),src=fs.statSync(src),utimesMillisSync(dest,src.atime,src.mtime));return fs.chmodSync(dest,srcStat.mode)}function copyDir(src,dest,opts){fs.readdirSync(src).forEach(item=>{const srcItem=path.join(src,item);item=path.join(dest,item);const {destStat}=stat.checkPathsSync(srcItem,
item,"copy");return startCopy(destStat,srcItem,item,opts)})}var process=require("module$node_modules$process$browser");"use strict";const fs=require("module$node_modules$graceful_fs$graceful_fs"),path=require("module$node_modules$path_browserify$index"),mkdirsSync=require("module$node_modules$fs_extra$lib$mkdirs$index").mkdirsSync,utimesMillisSync=require("module$node_modules$fs_extra$lib$util$utimes").utimesMillisSync,stat=require("module$node_modules$fs_extra$lib$util$stat");module.exports=function(src,
dest,opts){"function"===typeof opts&&(opts={filter:opts});opts=opts||{};opts.clobber="clobber"in opts?!!opts.clobber:!0;opts.overwrite="overwrite"in opts?!!opts.overwrite:opts.clobber;opts.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");const {srcStat,destStat}=stat.checkPathsSync(src,dest,"copy");stat.checkParentPathsSync(src,srcStat,dest,
"copy");if(opts.filter&&!opts.filter(src,dest))src=void 0;else{var destParent=path.dirname(dest);fs.existsSync(destParent)||mkdirsSync(destParent);src=startCopy(destStat,src,dest,opts)}return src}}
//# sourceMappingURL=module$node_modules$fs_extra$lib$copy_sync$copy_sync.js.map
