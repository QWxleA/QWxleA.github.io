{
"version":3,
"file":"module$node_modules$codemirror$mode$shell$shell.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/codemirror/mode/shell/shell.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$shell$shell\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('shell', function() {\n\n  var words = {};\n  function define(style, dict) {\n    for(var i = 0; i < dict.length; i++) {\n      words[dict[i]] = style;\n    }\n  };\n\n  var commonAtoms = [\"true\", \"false\"];\n  var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n    \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n  var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n    \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n    \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n    \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n    \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n    \"yes\", \"zsh\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n\n  define('atom', commonAtoms);\n  define('keyword', commonKeywords);\n  define('builtin', commonCommands);\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      stream.next();\n      return null;\n    }\n    if (ch === '\\'' || ch === '\"' || ch === '`') {\n      state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n      return tokenize(stream, state);\n    }\n    if (ch === '#') {\n      if (sol && stream.eat('!')) {\n        stream.skipToEnd();\n        return 'meta'; // 'comment'?\n      }\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (ch === '$') {\n      state.tokens.unshift(tokenDollar);\n      return tokenize(stream, state);\n    }\n    if (ch === '+' || ch === '=') {\n      return 'operator';\n    }\n    if (ch === '-') {\n      stream.eat('-');\n      stream.eatWhile(/\\w/);\n      return 'attribute';\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/\\d/);\n      if(stream.eol() || !/\\w/.test(stream.peek())) {\n        return 'number';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenString(quote, style) {\n    var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n    return function(stream, state) {\n      var next, escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === close && !escaped) {\n          state.tokens.shift();\n          break;\n        } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n          escaped = true;\n          stream.backUp(1);\n          state.tokens.unshift(tokenDollar);\n          break;\n        } else if (!escaped && quote !== close && next === quote) {\n          state.tokens.unshift(tokenString(quote, style))\n          return tokenize(stream, state)\n        } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n          state.tokens.unshift(tokenStringStart(next, \"string\"));\n          stream.backUp(1);\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      return style;\n    };\n  };\n\n  function tokenStringStart(quote, style) {\n    return function(stream, state) {\n      state.tokens[0] = tokenString(quote, style)\n      stream.next()\n      return tokenize(stream, state)\n    }\n  }\n\n  var tokenDollar = function(stream, state) {\n    if (state.tokens.length > 1) stream.eat('$');\n    var ch = stream.next()\n    if (/['\"({]/.test(ch)) {\n      state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n      return tokenize(stream, state);\n    }\n    if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n    state.tokens.shift();\n    return 'def';\n  };\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    },\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    lineComment: '#',\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-sh', 'shell');\n// Apache uses a slightly different Media Type for Shell scripts\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nCodeMirror.defineMIME('application/x-sh', 'shell');\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","style","dict","i","length","words","tokenBase","stream","state","eatSpace","sol","ch","next","tokens","unshift","tokenString","tokenize","eat","skipToEnd","tokenDollar","eatWhile","test","eol","peek","cur","current","hasOwnProperty","quote","close","escaped","tokenStringStart","backUp","shift","commonAtoms","commonKeywords","commonCommands","registerHelper","concat","startState","token","closeBrackets","lineComment","fold","defineMIME"]
}
