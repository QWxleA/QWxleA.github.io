{
"version":3,
"file":"module$node_modules$codemirror$mode$haml$haml.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/codemirror/mode/haml/haml.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$haml$haml\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"), require(\"../ruby/ruby\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\", \"../ruby/ruby\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\n  // full haml mode. This handled embedded ruby and html fragments too\n  CodeMirror.defineMode(\"haml\", function(config) {\n    var htmlMode = CodeMirror.getMode(config, {name: \"htmlmixed\"});\n    var rubyMode = CodeMirror.getMode(config, \"ruby\");\n\n    function rubyInQuote(endQuote) {\n      return function(stream, state) {\n        var ch = stream.peek();\n        if (ch == endQuote && state.rubyState.tokenize.length == 1) {\n          // step out of ruby context as it seems to complete processing all the braces\n          stream.next();\n          state.tokenize = html;\n          return \"closeAttributeTag\";\n        } else {\n          return ruby(stream, state);\n        }\n      };\n    }\n\n    function ruby(stream, state) {\n      if (stream.match(\"-#\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n      return rubyMode.token(stream, state.rubyState);\n    }\n\n    function html(stream, state) {\n      var ch = stream.peek();\n\n      // handle haml declarations. All declarations that cant be handled here\n      // will be passed to html mode\n      if (state.previousToken.style == \"comment\" ) {\n        if (state.indented > state.previousToken.indented) {\n          stream.skipToEnd();\n          return \"commentLine\";\n        }\n      }\n\n      if (state.startOfLine) {\n        if (ch == \"!\" && stream.match(\"!!\")) {\n          stream.skipToEnd();\n          return \"tag\";\n        } else if (stream.match(/^%[\\w:#\\.]+=/)) {\n          state.tokenize = ruby;\n          return \"hamlTag\";\n        } else if (stream.match(/^%[\\w:]+/)) {\n          return \"hamlTag\";\n        } else if (ch == \"/\" ) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n\n      if (state.startOfLine || state.previousToken.style == \"hamlTag\") {\n        if ( ch == \"#\" || ch == \".\") {\n          stream.match(/[\\w-#\\.]*/);\n          return \"hamlAttribute\";\n        }\n      }\n\n      // donot handle --\u003e as valid ruby, make it HTML close comment instead\n      if (state.startOfLine && !stream.match(\"--\u003e\", false) && (ch == \"=\" || ch == \"-\" )) {\n        state.tokenize = ruby;\n        return state.tokenize(stream, state);\n      }\n\n      if (state.previousToken.style == \"hamlTag\" ||\n          state.previousToken.style == \"closeAttributeTag\" ||\n          state.previousToken.style == \"hamlAttribute\") {\n        if (ch == \"(\") {\n          state.tokenize = rubyInQuote(\")\");\n          return state.tokenize(stream, state);\n        } else if (ch == \"{\") {\n          if (!stream.match(/^\\{%.*/)) {\n            state.tokenize = rubyInQuote(\"}\");\n            return state.tokenize(stream, state);\n          }\n        }\n      }\n\n      return htmlMode.token(stream, state.htmlState);\n    }\n\n    return {\n      // default to html mode\n      startState: function() {\n        var htmlState = CodeMirror.startState(htmlMode);\n        var rubyState = CodeMirror.startState(rubyMode);\n        return {\n          htmlState: htmlState,\n          rubyState: rubyState,\n          indented: 0,\n          previousToken: { style: null, indented: 0},\n          tokenize: html\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          htmlState : CodeMirror.copyState(htmlMode, state.htmlState),\n          rubyState: CodeMirror.copyState(rubyMode, state.rubyState),\n          indented: state.indented,\n          previousToken: state.previousToken,\n          tokenize: state.tokenize\n        };\n      },\n\n      token: function(stream, state) {\n        if (stream.sol()) {\n          state.indented = stream.indentation();\n          state.startOfLine = true;\n        }\n        if (stream.eatSpace()) return null;\n        var style = state.tokenize(stream, state);\n        state.startOfLine = false;\n        // dont record comment line as we only want to measure comment line with\n        // the opening comment block\n        if (style && style != \"commentLine\") {\n          state.previousToken = { style: style, indented: state.indented };\n        }\n        // if current state is ruby and the previous token is not `,` reset the\n        // tokenize to html\n        if (stream.eol() && state.tokenize == ruby) {\n          stream.backUp(1);\n          var ch = stream.peek();\n          stream.next();\n          if (ch && ch != \",\") {\n            state.tokenize = html;\n          }\n        }\n        // reprocess some of the specific style tag when finish setting previousToken\n        if (style == \"hamlTag\") {\n          style = \"tag\";\n        } else if (style == \"commentLine\") {\n          style = \"comment\";\n        } else if (style == \"hamlAttribute\") {\n          style = \"attribute\";\n        } else if (style == \"closeAttributeTag\") {\n          style = null;\n        }\n        return style;\n      }\n    };\n  }, \"htmlmixed\", \"ruby\");\n\n  CodeMirror.defineMIME(\"text/x-haml\", \"haml\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","config","rubyInQuote","endQuote","stream","state","peek","ch","rubyState","tokenize","length","next","html","ruby","match","skipToEnd","rubyMode","token","previousToken","style","indented","startOfLine","htmlMode","htmlState","getMode","name","startState","copyState","sol","indentation","eatSpace","eol","backUp","defineMIME"]
}
