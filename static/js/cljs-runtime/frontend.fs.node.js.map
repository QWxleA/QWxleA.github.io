{"version":3,"sources":["frontend/fs/node.cljs"],"mappings":"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","names":["frontend.fs.node/concat-path","dir","path","clojure.string/starts-with?","clojure.string/replace","frontend.fs.node/contents-matched?","disk-content","db-content","frontend.encrypt/encrypted-db?","frontend.state/get-current-repo","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","decrypted-content","frontend.encrypt.decrypt","cljs.core._EQ_","clojure.string/trim","promesa.core/resolved","p__57202","map__57204","cljs.core/--destructure-map","cljs.core.get","frontend.fs.node/write-file-impl!","this","repo","content","ok-handler","error-handler","old-content","skip-compare?","stat","promesa.core.catch$","result","electron.ipc.ipc","error","lambdaisland.glogi.log","cljs.core/identity","cljs.core.not_EQ_","frontend.fs.protocol/read-file","js/console.error","or__4253__auto__","ext","clojure.string/lower-case","frontend.util/get-file-ext","frontend.db/get-file","contents-matched?","pending-writes","frontend.state/get-write-chan-length","cljs.core/not","cljs.core/contains?","clojure.string/includes?","frontend.state/pub-event!","mtime","frontend.fs.node.goog$module$goog$object.get","frontend.db/set-file-last-modified-at!","frontend.db/set-file-content!","frontend.fs.node/open-dir","dir-path","frontend.util/mocked-open-dir-path","this__4502__auto__","k__4503__auto__","this__4504__auto__","k57219","else__4505__auto__","G__57231","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__57233","vec__57234","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__57218","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this57220","other57221","this__4512__auto__","k__4513__auto__","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","this__4510__auto__","k__4511__auto__","pred__57252","cljs.core/keyword-identical?","expr__57253","cljs.core.assoc","this__4515__auto__","cljs.core/seq","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","cljs.core/PROTOCOL_SENTINEL","frontend.fs.node/Node","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__57223","extmap__4542__auto__","G__57266","cljs.core/record?","frontend.fs.node/->Node","frontend.fs.node/map->Node","_this","_opts","frontend.config/get-repo-dir","_dir","_options","opts","_e","sub-dir","cljs.core/first","frontend.util/get-dir-and-basename","_","_repo","old-path","new-path","_ok-handler","path-or-handle"],"sourcesContent":["(ns frontend.fs.node\n  (:require [clojure.string :as string]\n            [electron.ipc :as ipc]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.fs.protocol :as protocol]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.encrypt :as encrypt]))\n\n(defn concat-path\n  [dir path]\n  (cond\n    (nil? path)\n    dir\n\n    (string/starts-with? path dir)\n    path\n\n    :else\n    (str (string/replace dir #\"/$\" \"\")\n         (when path\n           (str \"/\" (string/replace path #\"^/\" \"\"))))))\n\n(defn- contents-matched?\n  [disk-content db-content]\n  (when (and (string? disk-content) (string? db-content))\n    (if (encrypt/encrypted-db? (state/get-current-repo))\n      (p/let [decrypted-content (encrypt/decrypt disk-content)]\n        (= (string/trim decrypted-content) (string/trim db-content)))\n      (p/resolved (= (string/trim disk-content) (string/trim db-content))))))\n\n(defn- write-file-impl!\n  [this repo dir path content {:keys [ok-handler error-handler old-content skip-compare?]} stat]\n  (if skip-compare?\n    (p/catch\n        (p/let [result (ipc/ipc \"writeFile\" repo path content)]\n          (when ok-handler\n            (ok-handler repo path result)))\n        (fn [error]\n          (if error-handler\n            (error-handler error)\n            (log/error :write-file-failed error))))\n\n    (p/let [disk-content (when (not= stat :not-found)\n                           (-> (protocol/read-file this dir path nil)\n                               (p/catch (fn [error]\n                                          (js/console.error error)\n                                          nil))))\n            disk-content (or disk-content \"\")\n            ext (string/lower-case (util/get-file-ext path))\n            db-content (or old-content (db/get-file repo path) \"\")\n            contents-matched? (contents-matched? disk-content db-content)\n            pending-writes (state/get-write-chan-length)]\n      (cond\n        (and\n         (not= stat :not-found)         ; file on the disk was deleted\n         (not contents-matched?)\n         (not (contains? #{\"excalidraw\" \"edn\" \"css\"} ext))\n         (not (string/includes? path \"/.recycle/\"))\n         (zero? pending-writes))\n        (p/let [disk-content (encrypt/decrypt disk-content)]\n          (state/pub-event! [:file/not-matched-from-disk path disk-content content]))\n\n        :else\n        (->\n         (p/let [result (ipc/ipc \"writeFile\" repo path content)\n                 mtime (gobj/get result \"mtime\")]\n           (db/set-file-last-modified-at! repo path mtime)\n           (p/let [content (if (encrypt/encrypted-db? (state/get-current-repo))\n                             (encrypt/decrypt content)\n                             content)]\n             (db/set-file-content! repo path content))\n           (when ok-handler\n             (ok-handler repo path result))\n           result)\n         (p/catch (fn [error]\n                    (if error-handler\n                      (error-handler error)\n                      (log/error :write-file-failed error)))))))))\n\n(defn- open-dir []\n  (p/let [dir-path (util/mocked-open-dir-path)\n          result (if dir-path\n                   (ipc/ipc \"getFiles\" dir-path)\n                   (ipc/ipc \"openDir\" {}))]\n    result))\n\n(defrecord Node []\n  protocol/Fs\n  (mkdir! [_this dir]\n    (ipc/ipc \"mkdir\" dir))\n  (mkdir-recur! [_this dir]\n    (ipc/ipc \"mkdir-recur\" dir))\n  (readdir [_this dir]                   ; recursive\n    (ipc/ipc \"readdir\" dir))\n  (unlink! [_this repo path _opts]\n    (ipc/ipc \"unlink\"\n             (config/get-repo-dir repo)\n             path))\n  (rmdir! [_this _dir]\n    ;; Too dangerious!!! We'll never implement this.\n    nil)\n  (read-file [_this dir path _options]\n    (let [path (concat-path dir path)]\n      (ipc/ipc \"readFile\" path)))\n  (write-file! [this repo dir path content opts]\n    (let [path (concat-path dir path)]\n      (p/let [stat (p/catch\n                       (protocol/stat this dir path)\n                       (fn [_e] :not-found))\n              sub-dir (first (util/get-dir-and-basename path))\n              _ (protocol/mkdir-recur! this sub-dir)]\n        (write-file-impl! this repo dir path content opts stat))))\n  (rename! [_this _repo old-path new-path]\n    (ipc/ipc \"rename\" old-path new-path))\n  (stat [_this dir path]\n    (let [path (concat-path dir path)]\n      (ipc/ipc \"stat\" path)))\n  (open-dir [_this _ok-handler]\n    (open-dir))\n  (get-files [_this path-or-handle _ok-handler]\n    (ipc/ipc \"getFiles\" path-or-handle))\n  (watch-dir! [_this dir]\n    (ipc/ipc \"addDirWatcher\" dir)))\n"]}