{"version":3,"sources":["frontend/encrypt.cljs"],"mappings":"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","names":["js/frontend","js/frontend.encrypt","js/frontend.encrypt.age-pem-header-line","frontend.encrypt/age-pem-header-line","js/frontend.encrypt.age-version-line","frontend.encrypt/age-version-line","frontend.encrypt/content-encrypted?","content","clojure.string/starts-with?","frontend.encrypt/encrypted-db?","repo-url","frontend.db.utils.get_key_value","frontend.encrypt/get-key-pair","frontend.encrypt/save-key-pair!","keys","cljs.reader.read_string","frontend.db/set-key-value","frontend.encrypt/generate-key-pair","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","_","frontend.encrypt.goog$module$shadow$loader.load","lazy-keygen","js/frontend.extensions","js/frontend.extensions.age-encryption","js/frontend.extensions.age-encryption.keygen","cljs.core/Var","frontend.extensions.age-encryption/keygen","js-keys","cljs.core.array_seq","frontend.encrypt/generate-key-pair-and-save!","cljs.core.pr_str","frontend.encrypt/get-public-key","cljs.core/second","frontend.encrypt/get-secret-key","cljs.core/first","var_args","G__43603","frontend.encrypt/encrypt","js/Error","frontend.encrypt.encrypt","frontend.state/get-current-repo","lazy-encrypt-with-x25519","js/frontend.extensions.age-encryption.encrypt-with-x25519","frontend.extensions.age-encryption/encrypt-with-x25519","logseq.graph-parser.utf8/encode","public-key","encrypted","logseq.graph-parser.utf8/decode","promesa.core/resolved","G__43605","frontend.encrypt/decrypt","frontend.encrypt.decrypt","and__5041__auto__","temp__5718__auto__","secret-key","lazy-decrypt-with-x25519","js/frontend.extensions.age-encryption.decrypt-with-x25519","frontend.extensions.age-encryption/decrypt-with-x25519","decrypted","lambdaisland.glogi.log","cljs.core/identity","frontend.encrypt/encrypt-with-passphrase","passphrase","lazy-encrypt-with-user-passphrase","js/frontend.extensions.age-encryption.encrypt-with-user-passphrase","frontend.extensions.age-encryption/encrypt-with-user-passphrase","fexpr__43606","cljs.core/deref","frontend.encrypt/decrypt-with-passphrase","lazy-decrypt-with-user-passphrase","js/frontend.extensions.age-encryption.decrypt-with-user-passphrase","frontend.extensions.age-encryption/decrypt-with-user-passphrase"],"sourcesContent":["(ns frontend.encrypt\n  (:require [logseq.graph-parser.utf8 :as utf8]\n            [frontend.db.utils :as db-utils]\n            [frontend.db :as db]\n            [promesa.core :as p]\n            [frontend.state :as state]\n            [clojure.string :as str]\n            [cljs.reader :as reader]\n            [shadow.loader :as loader]\n            [lambdaisland.glogi :as log]))\n\n(defonce age-pem-header-line \"-----BEGIN AGE ENCRYPTED FILE-----\")\n(defonce age-version-line \"age-encryption.org/v1\")\n\n(defn content-encrypted?\n  [content]\n  (when content\n    (or (str/starts-with? content age-pem-header-line)\n        (str/starts-with? content age-version-line))))\n\n(defn encrypted-db?\n  [repo-url]\n  (db-utils/get-key-value repo-url :db/encrypted?))\n\n(defn get-key-pair\n  [repo-url]\n  (db-utils/get-key-value repo-url :db/encryption-keys))\n\n(defn save-key-pair!\n  [repo-url keys]\n  (let [keys (if (string? keys) (reader/read-string keys) keys)]\n    (db/set-key-value repo-url :db/encryption-keys keys)\n    (db/set-key-value repo-url :db/encrypted? true)))\n\n(defn generate-key-pair\n  []\n  (p/let [_ (loader/load :age-encryption)\n          lazy-keygen (resolve 'frontend.extensions.age-encryption/keygen)\n          js-keys (lazy-keygen)]\n    (array-seq js-keys)))\n\n(defn generate-key-pair-and-save!\n  [repo-url]\n  (when-not (get-key-pair repo-url)\n    (p/let [keys (generate-key-pair)]\n      (save-key-pair! repo-url keys)\n      (pr-str keys))))\n\n(defn get-public-key\n  [repo-url]\n  (second (get-key-pair repo-url)))\n\n(defn get-secret-key\n  [repo-url]\n  (first (get-key-pair repo-url)))\n\n(defn encrypt\n  ([content]\n   (encrypt (state/get-current-repo) content))\n  ([repo-url content]\n   (cond\n     (encrypted-db? repo-url)\n     (p/let [_ (loader/load :age-encryption)\n             lazy-encrypt-with-x25519 (resolve 'frontend.extensions.age-encryption/encrypt-with-x25519)\n             content (utf8/encode content)\n             public-key (get-public-key repo-url)\n             encrypted (lazy-encrypt-with-x25519 public-key content true)]\n       (utf8/decode encrypted))\n     :else\n     (p/resolved content))))\n\n(defn decrypt\n  ([content]\n   (decrypt (state/get-current-repo) content))\n  ([repo-url content]\n   (cond\n     (and (encrypted-db? repo-url)\n          (content-encrypted? content))\n     (let [content (utf8/encode content)]\n       (if-let [secret-key (get-secret-key repo-url)]\n         (p/let [_ (loader/load :age-encryption)\n                 lazy-decrypt-with-x25519 (resolve 'frontend.extensions.age-encryption/decrypt-with-x25519)\n                 decrypted (lazy-decrypt-with-x25519 secret-key content)]\n           (utf8/decode decrypted))\n         (log/error :encrypt/empty-secret-key (str \"Can't find the secret key for repo: \" repo-url))))\n     :else\n     (p/resolved content))))\n\n(defn encrypt-with-passphrase\n  [passphrase content]\n  (p/let [_ (loader/load :age-encryption)\n          lazy-encrypt-with-user-passphrase (resolve 'frontend.extensions.age-encryption/encrypt-with-user-passphrase)\n          content (utf8/encode content)\n          encrypted (@lazy-encrypt-with-user-passphrase passphrase content true)]\n    (utf8/decode encrypted)))\n\n;; ;; TODO: What if decryption failed\n(defn decrypt-with-passphrase\n  [passphrase content]\n  (p/let [_ (loader/load :age-encryption)\n          lazy-decrypt-with-user-passphrase (resolve 'frontend.extensions.age-encryption/decrypt-with-user-passphrase)\n          content (utf8/encode content)\n          decrypted (lazy-decrypt-with-user-passphrase passphrase content)]\n    (utf8/decode decrypted)))\n"]}