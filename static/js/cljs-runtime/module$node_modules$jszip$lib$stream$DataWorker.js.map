{
"version":3,
"file":"module$node_modules$jszip$lib$stream$DataWorker.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/jszip/lib/stream/DataWorker.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$stream$DataWorker\"] = function(global,require,module,exports) {\n'use strict';\n\nvar utils = require('../utils');\nvar GenericWorker = require('./GenericWorker');\n\n// the size of the generated chunks\n// TODO expose this as a public variable\nvar DEFAULT_BLOCK_SIZE = 16 * 1024;\n\n/**\n * A worker that reads a content and emits chunks.\n * @constructor\n * @param {Promise} dataP the promise of the data to split\n */\nfunction DataWorker(dataP) {\n    GenericWorker.call(this, \"DataWorker\");\n    var self = this;\n    this.dataIsReady = false;\n    this.index = 0;\n    this.max = 0;\n    this.data = null;\n    this.type = \"\";\n\n    this._tickScheduled = false;\n\n    dataP.then(function (data) {\n        self.dataIsReady = true;\n        self.data = data;\n        self.max = data && data.length || 0;\n        self.type = utils.getTypeOf(data);\n        if(!self.isPaused) {\n            self._tickAndRepeat();\n        }\n    }, function (e) {\n        self.error(e);\n    });\n}\n\nutils.inherits(DataWorker, GenericWorker);\n\n/**\n * @see GenericWorker.cleanUp\n */\nDataWorker.prototype.cleanUp = function () {\n    GenericWorker.prototype.cleanUp.call(this);\n    this.data = null;\n};\n\n/**\n * @see GenericWorker.resume\n */\nDataWorker.prototype.resume = function () {\n    if(!GenericWorker.prototype.resume.call(this)) {\n        return false;\n    }\n\n    if (!this._tickScheduled && this.dataIsReady) {\n        this._tickScheduled = true;\n        utils.delay(this._tickAndRepeat, [], this);\n    }\n    return true;\n};\n\n/**\n * Trigger a tick a schedule an other call to this function.\n */\nDataWorker.prototype._tickAndRepeat = function() {\n    this._tickScheduled = false;\n    if(this.isPaused || this.isFinished) {\n        return;\n    }\n    this._tick();\n    if(!this.isFinished) {\n        utils.delay(this._tickAndRepeat, [], this);\n        this._tickScheduled = true;\n    }\n};\n\n/**\n * Read and push a chunk.\n */\nDataWorker.prototype._tick = function() {\n\n    if(this.isPaused || this.isFinished) {\n        return false;\n    }\n\n    var size = DEFAULT_BLOCK_SIZE;\n    var data = null, nextIndex = Math.min(this.max, this.index + size);\n    if (this.index >= this.max) {\n        // EOF\n        return this.end();\n    } else {\n        switch(this.type) {\n            case \"string\":\n                data = this.data.substring(this.index, nextIndex);\n            break;\n            case \"uint8array\":\n                data = this.data.subarray(this.index, nextIndex);\n            break;\n            case \"array\":\n            case \"nodebuffer\":\n                data = this.data.slice(this.index, nextIndex);\n            break;\n        }\n        this.index = nextIndex;\n        return this.push({\n            data : data,\n            meta : {\n                percent : this.max ? this.index / this.max * 100 : 0\n            }\n        });\n    }\n};\n\nmodule.exports = DataWorker;\n\n};"],
"names":["shadow$provide","global","require","module","exports","DataWorker","dataP","GenericWorker","call","self","dataIsReady","max","index","data","type","_tickScheduled","then","length","utils","getTypeOf","isPaused","_tickAndRepeat","e","error","inherits","prototype","cleanUp","DataWorker.prototype.cleanUp","resume","DataWorker.prototype.resume","delay","DataWorker.prototype._tickAndRepeat","isFinished","_tick","DataWorker.prototype._tick","nextIndex","Math","min","DEFAULT_BLOCK_SIZE","end","substring","subarray","slice","push","meta","percent"]
}
