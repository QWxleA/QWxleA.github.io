{
"version":3,
"file":"module$node_modules$codemirror$mode$yaml$yaml.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/codemirror/mode/yaml/yaml.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$yaml$yaml\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match(/---/)) { return \"def\"; }\n        /* document end */\n        if (stream.match(/\\.\\.\\./)) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list seperator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs seperator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","keywordRegex","RegExp","token","stream","state","ch","peek","esc","escaped","pos","test","string","charAt","skipToEnd","match","literal","indentation","keyCol","sol","pair","pairStart","inlinePairs","inlineList","next","startState","lineComment","fold","defineMIME"]
}
