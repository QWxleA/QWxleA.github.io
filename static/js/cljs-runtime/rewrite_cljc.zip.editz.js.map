{"version":3,"sources":["rewrite_cljc/zip/editz.cljc"],"mappings":"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","names":["rewrite-cljc.zip.editz/replace","zloc","value","rewrite-cljc.custom-zipper.core/replace","rewrite-cljc.node/coerce","rewrite-cljc.zip.editz/edit-node","node","f","rewrite-cljc.node/sexpr","G__93011","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","rewrite-cljc.zip.editz/edit","seq93013","G__93014","cljs.core/first","cljs.core/next","G__93015","self__4851__auto__","args","p1__93012#","rewrite_cljc.custom_zipper.core.edit","cljs.core.apply","rewrite-cljc.zip.editz/splice","rewrite-cljc.custom-zipper.core/branch?","temp__5718__auto__","children","rewrite-cljc.custom-zipper.core/children","cljs.core.drop_while","rewrite-cljc.node/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce","rewrite-cljc.custom-zipper.core/insert-right","rewrite-cljc.custom-zipper.utils/remove-and-move-right","or__4253__auto__","rewrite_cljc.zip.whitespace.skip_whitespace","rewrite-cljc.zip.removez/remove","rewrite-cljc.zip.editz/edit-token","str-fn","e","rewrite-cljc.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword","cljs.core/namespace","G__93021","cljs.core/name","cljs.core/Symbol","cljs.core.symbol","G__93023","rewrite_cljc.node.token_node","rewrite-cljc.zip.editz/edit-multi-line","line-fn","n","rewrite-cljc.custom-zipper.core/node","cljs.core.update_in","cljs.core.comp","cljs.core/vec","rewrite-cljc.zip.editz/prefix","s","G__93030","js/Error","rewrite-cljc.zip.base/tag","p1__93028#","lines","cljs.core/empty?","p1__93029#","rewrite-cljc.zip.editz/suffix","G__93037","p1__93036#","cljs.core.concat","cljs.core/butlast","cljs.core/last"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-cljc.custom-zipper.core :as z]\n            [rewrite-cljc.custom-zipper.utils :as u]\n            [rewrite-cljc.node :as node]\n            [rewrite-cljc.zip.base :as base]\n            [rewrite-cljc.zip.removez :as r]\n            [rewrite-cljc.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Return zipper with the current node in `zloc` replaced with `value`\n   which will be coerced to a node if possible.\"\n  [zloc value]\n  (z/replace zloc (node/coerce value)))\n\n(defn- edit-node\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [node f]\n  (-> (node/sexpr node)\n      (f)\n      (node/coerce)))\n\n(defn edit\n  \"Return zipper with the current node in `zloc` replaced with the result of:\n\n   (`f` (s-expression node) `args`)\n\n   The result of `f` will be coerced to a node if possible.\"\n  [zloc f & args]\n  (z/edit zloc edit-node #(apply f % args)))\n\n;; ## Splice\n\n(defn splice\n  \"Return zipper with the children of the current node in `zloc` merged into itself.\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace child afterwards.\"\n  [zloc]\n  (if (z/branch? zloc)\n    (if-let [children (->> (z/children zloc)\n                           (drop-while node/whitespace?)\n                           (reverse)\n                           (drop-while node/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce z/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (z/replace zloc (node/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (z/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (z/replace zloc n)))\n\n(defn prefix\n  \"Return zipper with the current node in `zloc` prefixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, first line is prefixed.\"\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc))))\n\n(defn suffix\n  \"Return zipper with the current node in `zloc` suffixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, last line is suffixed.\"\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) [(str (last lines) s)])))\n                     (edit-multi-line zloc))))\n"]}