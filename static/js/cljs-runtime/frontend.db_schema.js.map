{"version":3,"sources":["frontend/db_schema.cljs"],"mappings":";AAEA,GAAA,QAAAA,qCAAAC,+CAAAC;AAAA;AAAA,AAAA,6BAAA,7BAASC;;AACT,GAAA,QAAAH,qCAAAC,+CAAAG;AAAA;AAAA,AAAA,iCAAA,jCAASC;;AAET,4BAAA,wCAAA,+DAAA,8EAAA,gEAAA,iEAAA,2EAAA,+DAAA,sEAAA,yEAAA,sEAAA,wEAAA,2EAAA,yEAAA,wDAAA,gEAAA,8DAAA,+DAAA,uEAAA,mEAAA,sFAAA,uEAAA,qEAAA,0EAAA,4EAAA,mEAAA,8DAAA,oEAAA,mEAAA,uDAAA,yEAAA,kEAAA,+EAAA,8DAAA,6DAAA,8DAAA,4DAAA,6DAAA,kEAAA,iFAAA,wEAAA,mCAAA,mCAAA,mCAAA,2CAAA,kEAAA,iEAAA,sEAAA,uFAAA,mCAAA,2CAAA,2DAAA,sFAAA,mCAAA,mCAAA,mCAAA,2CAAA,kEAAA,yEAAA,mCAAA,mCAAA,mCAAA,mCAAA,2CAAA,kEAAA,iEAAA,2DAAA,aAAA,2CAAA,kEAAA,iEAAA,sEAAA,uFAAA,mCAAA,mCAAA,mCAAA,mCAAA,mCAAA,2CAAA,2DAAA,aAAA,mCAAA,mCAAA,2CAAA,kEAAA,iEAAA,sEAAA,uFAAA,mCAAA,mCAAA,2CAAA,2DAAA,sFAAA,2CAAA,kEAAA,iEAAA,sEAAA,uFAAA,2CAAA,kEAAA,iEAAA,2DAAA,aAAA,mCAAA,mCAAA,2CAAA,kEAAA,iEAAA,2DAAA,aAAA,2CAAA,2DAAA,sFAAA,2CAAA,2DAAA,sFAAA,2CAAA,kEAAA,yEAAA,mCAAA,2CAAA,2DAAA,sFAAA,x2NAA2BC;AAgG3B,wCAAA,kFAAA,sEAAA,yEAAA,gFAAA,2EAAA,8EAAA,gFAAA,8EAAA,oEAAA,4EAAA,4EAAA,0EAAA,mEAAA,8EAAA,oFAAA,mEAAA,9tCAAKC;AAwBL,6CAAA,iFAAA,sEAAA,8EAAA,gFAAA,4EAAA,wEAAA,mEAAA,yEAAA,loBAAKC","names":["js/frontend","js/frontend.db-schema","js/frontend.db-schema.version","frontend.db-schema/version","js/frontend.db-schema.ast-version","frontend.db-schema/ast-version","frontend.db-schema/schema","frontend.db-schema/retract-attributes","frontend.db-schema/retract-page-attributes"],"sourcesContent":["(ns ^:nbb-compatible frontend.db-schema)\n\n(defonce version 1)\n(defonce ast-version 1)\n;; A page is a special block, a page can corresponds to multiple files with the same \":block/name\".\n(def ^:large-vars/data-var schema\n  {:schema/version  {}\n   :ast/version     {}\n   :db/type         {}\n   :db/ident        {:db/unique :db.unique/identity}\n   :db/encrypted?    {}\n   :db/encryption-keys {}\n\n   :recent/pages {}\n\n   :block/type {}\n   :block/uuid {:db/unique :db.unique/identity}\n   :block/parent {:db/valueType :db.type/ref\n                  :db/index true}\n   :block/left   {:db/valueType :db.type/ref\n                  :db/index true}\n   :block/collapsed? {:db/index true}\n\n   ;; :markdown, :org\n   :block/format {}\n\n   ;; belongs to which page\n   :block/page {:db/valueType :db.type/ref\n                :db/index true}\n   ;; reference blocks\n   :block/refs {:db/valueType :db.type/ref\n                :db/cardinality :db.cardinality/many}\n   ;; referenced pages inherited from the parents\n   :block/path-refs {:db/valueType   :db.type/ref\n                     :db/cardinality :db.cardinality/many}\n\n   ;; for pages\n   :block/tags {:db/valueType :db.type/ref\n                :db/cardinality :db.cardinality/many}\n\n   ;; for pages\n   :block/alias {:db/valueType :db.type/ref\n                 :db/cardinality :db.cardinality/many}\n\n   ;; full-text for current block\n   :block/content {}\n\n   ;; todo keywords, e.g. \"TODO\", \"DOING\", \"DONE\"\n   :block/marker {}\n\n   ;; \"A\", \"B\", \"C\"\n   :block/priority {}\n\n   ;; block key value properties\n   :block/properties {}\n   ;; vector\n   :block/properties-order {}\n\n   ;; first block that's not a heading or unordered list\n   :block/pre-block? {}\n\n   ;; heading's level (the block must be a heading)\n   :block/heading-level {}\n\n   ;; scheduled day\n   :block/scheduled {}\n\n   ;; deadline day\n   :block/deadline {}\n\n   ;; whether blocks is a repeated block (usually a task)\n   :block/repeated? {}\n\n   :block/created-at {}\n   :block/updated-at {}\n\n   ;; page additional attributes\n   ;; page's name, lowercase\n   :block/name {:db/unique :db.unique/identity}\n   ;; page's original name\n   :block/original-name {:db/unique :db.unique/identity}\n   ;; whether page's is a journal\n   :block/journal? {}\n   :block/journal-day {}\n   ;; page's namespace\n   :block/namespace {:db/valueType :db.type/ref}\n\n   ;; block's file\n   :block/file {:db/valueType :db.type/ref}\n\n   ;; file\n   :file/path {:db/unique :db.unique/identity}\n   ;; only store the content of logseq's files\n   :file/content {}\n   :file/handle {}\n   ;; :file/created-at {}\n   ;; :file/last-modified-at {}\n   ;; :file/size {}\n   ;; :file/handle {}\n   })\n\n(def retract-attributes\n  #{\n    :block/refs\n    :block/path-refs\n    :block/tags\n    :block/alias\n    :block/marker\n    :block/priority\n    :block/scheduled\n    :block/deadline\n    :block/repeated?\n    :block/pre-block?\n    :block/heading-level\n    :block/type\n    :block/properties\n    :block/created-at\n    :block/updated-at\n    :block/warning\n    }\n  )\n\n\n;;; use `(map [:db.fn/retractAttribute <id> <attr>] retract-page-attributes)`\n;;; to remove attrs to make the page as it's just created and no file attached to it\n(def retract-page-attributes\n  #{:block/created-at\n    :block/updated-at\n    :block/file\n    :block/format\n    :block/content\n    :block/properties\n    :block/alias\n    :block/tags})\n"]}