{"version":3,"sources":["frontend/db/model.cljs"],"mappings":"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","names":["frontend.db.model/initial-blocks-length","frontend.db.model/step-loading-blocks","frontend.db.model/block-attrs","var_args","G__33710","frontend.db.model/transact-files-db!","js/Error","tx-data","frontend.db.utils.transact_BANG_","frontend.state/get-current-repo","repo-url","frontend.config/publishing?","logseq.graph-parser.util/remove-nils","cljs.core.remove","cljs.core/nil?","p1__33708#","cljs.core.map","cljs.core.dissoc","cljs.core/seq","temp__5720__auto__","conn","frontend.db.conn.get_db","datascript.core.transact_BANG_","cljs.core/vec","frontend.db.model/pull-block","id","repo","frontend.db.react.q","frontend.util/react","cljs.core/first","frontend.db.model/get-tag-pages","tag-name","G__33753","G__33754","G__33755","datascript.core/q","frontend.util/page-name-sanity-lc","frontend.db.model/get-all-tagged-pages","G__33758","G__33759","frontend.db.model/get-all-namespace-relation","G__33762","G__33763","frontend.db.model/get-pages","G__33766","G__33767","frontend.db.model/get-all-pages","G__33774","G__33775","frontend.db.model/get-page-alias","page-name","db","and__5041__auto__","G__33779","G__33780","G__33781","G__33782","frontend.db.utils/seq-flatten","cljs.core.distinct","frontend.db.model/get-alias-source-page","alias","pages","G__33787","G__33788","G__33789","cljs.core/some","page","aliases","cljs.core.get_in","cljs.core/set","cljs.core/contains?","frontend.db.model/get-files","G__33799","G__33800","cljs.core/reverse","frontend.db.model/get-files-blocks","paths","pred","_db","e","G__33803","G__33804","G__33805","frontend.db.model/get-file-blocks","path","G__33809","G__33810","G__33811","frontend.db.model/get-file-pages","G__33812","G__33813","G__33814","frontend.db.model/set-file-last-modified-at!","last-modified-at","frontend.db.model/get-file-last-modified-at","G__33825","G__33826","datascript.core/entity","frontend.db.model/file-exists?","G__33830","G__33831","frontend.db.model/get-file-contents","G__33832","G__33833","cljs.core.into","frontend.db.model/get-files-full","G__33837","G__33838","cljs.core/flatten","G__33841","frontend.db.model/get-file","frontend.db.model.get_file","G__33845","G__33846","frontend.db.model/get-custom-css","frontend.config/get-file-path","frontend.db.model/get-block-by-uuid","frontend.db.utils.entity","cljs.core/uuid?","cljs.core/uuid","frontend.db.model/query-block-by-uuid","frontend.db.utils.pull","frontend.db.model/get-page-format","or__5043__auto__","frontend.util/safe-page-name-sanity-lc","file","logseq.graph-parser.util/get-format","frontend.state.get_preferred_format","frontend.db.model/page-alias-set","page-id","G__33860","G__33861","G__33862","G__33863","clojure.set.union","G__33865","frontend.db.model/get-entities-by-ids","ids","frontend.db.model.get_entities_by_ids","frontend.db.utils.pull_many","G__33867","frontend.db.model/get-page-names-by-ids","frontend.db.model.get_page_names_by_ids","frontend.db.model/get-page-alias-names","alias-ids","names","p1__33868#","cljs.core._EQ_","lookup-refs","name","m","frontend.db.model/with-pages","blocks","pages-ids","cljs.core.comp","pages-map","cljs.core.reduce","acc","p","cljs.core.assoc","block","cljs.core.get","frontend.db.model/get-page-properties","G__33871","frontend.db.model/sort-by-left","p__33872","map__33873","cljs.core/--destructure-map","parent","frontend.db.model.sort_by_left","check?","cljs.core.not_EQ_","cljs.core/count","duplicates","cljs.core/frequencies","cljs.core.filter","p__33878","vec__33879","cljs.core.nth","_k","v","p__33874","vec__33875","k","_v","left","p1__33869#","cljs.core/select-keys","left->blocks","b","result","temp__5718__auto__","next","cljs.core.conj","frontend.db.model/sort-by-left-recursive","form","clojure.walk/postwalk","f","cljs.core/map?","children","frontend.db.model/get-sorted-page-block-ids","root","child","cljs.core.concat","cljs.core/rest","frontend.db.model/sort-page-random-blocks","p1__33889#","cljs.core/every?","sorted-ids","blocks-map","cljs.core/zipmap","cljs.core.keep","G__33903","frontend.db.model/has-children?","block-id","frontend.db.model.has_children_QMARK_","G__33907","G__33908","frontend.db.model/collapsed-and-has-children?","frontend.db.model/get-by-parent-&-left","parent-id","left-id","lefts","node","frontend.db.model/get-next-outdented-block","parent-sibling","G__33923","G__33924","G__33929","frontend.db.model/get-block-parent","frontend.db.model.get_block_parent","G__33934","G__33935","frontend.db.model/top-block?","G__33945","frontend.db.model/get-block-parents","frontend.db.model.get_block_parents","depth","parents","d","frontend.db.model/get-block-parents-v2","G__33948","G__33949","G__33950","datascript.core/pull","G__33956","frontend.db.model/get-next-open-block","frontend.db.model.get_next_open_block","scoped-block-id","block-parent-id","next-block","p__33967","map__33968","frontend.db.model/get-paginated-blocks-no-cache","start-id","limit","include-start?","start","scoped-block-parents","cljs.core/cons","G__33979","frontend.db.model/get-block-last-direct-child","db-id","frontend.db.model.get_block_last_direct_child","not-collapsed?","cljs.core/not","all-left","all-ids","clojure.set.difference","frontend.db.model/get-block-last-child","last-child","prev","frontend.db.model/get-prev-open-block","frontend.util/collapsed?","frontend.db.model/recursive-child?","child-id","*last-node","cljs.core.atom","cljs.core/deref","cljs.core/reset!","frontend.db.model/get-prev-sibling","frontend.db.model/get-right-sibling","frontend.db.model/last-child-block?","G__33999","G__34000","G__34001","frontend.db.model/consecutive-block?","block-1","block-2","aux-fn","prev-sibling","frontend.db.model/get-non-consecutive-blocks","cljs.core.keep_indexed","i","_block","p__34008","map__34010","frontend.db.model/get-start-id-for-pagination-query","current-db","db-before","tx-meta","tx-report","outliner-op","tx-block-ids","cached-ids","cached-ids-set","first-changed-id","cljs.core/last","map__34018","move-blocks","target","from-page","to-page","match-ids","G__34034","vec__34036","seq__34037","first__34038","cljs.core/next","vec__34044","seq__34045","first__34046","others","insert?","p1__34006#","frontend.db.model/build-paginated-blocks-from-cache","map__34051","start-page?","previous-blocks","cljs.core.take_while","more","G__34062","frontend.db.model/get-paginated-blocks","p__34066","map__34067","frontend.db.model.get_paginated_blocks","pull-keys","start-block","use-cache?","cljs.core/integer?","entity","page?","page-entity","bare-page-map","query-key","G__34079","frontend.db.react/q","vec__34080","refs","G__34083","p1__34056#","tx-id->block","cached-id->block","cljs.core.mapv","x__5128__auto__","y__5129__auto__","block-eids","G__34106","frontend.db.model/get-page-blocks-no-cache","p__34112","map__34115","frontend.db.model.get_page_blocks_no_cache","datoms","datascript.core.datoms","frontend.db.model/get-page-blocks-count","frontend.db.model/page-exists?","frontend.db.model/page-empty?","frontend.db.model/page-empty-or-dummy?","frontend.db.model/parents-collapsed?","cljs.core/tree-seq","x","G__34139","frontend.db.model/block-collapsed?","frontend.db.model.block_collapsed_QMARK_","frontend.db.model/get-block-page","frontend.db.model/get-pages-by-name-partition","partition","clojure.string/blank?","G__34153","clojure.string/trim","datom","clojure.string/includes?","frontend.db.model/get-block-children-ids","block-uuid","eid","G__34159","G__34160","G__34161","G__34162","frontend.db.rules/rules","cljs.core.apply","cljs.core/concat","frontend.db.model/get-block-immediate-children","G__34245","G__34246","G__34247","frontend.db.model/sub-block-direct-children","frontend.db.model/get-block-children","frontend.db.model/flatten-tree","blocks-tree","cljs.core.mapcat","frontend.db.model/get-block-and-children","G__34361","G__34362","G__34363","G__34364","G__34365","G__34367","frontend.db.model/get-file-page","file-path","frontend.db.model.get_file_page","original-name?","G__34368","G__34369","G__34370","G__34371","G__34373","frontend.db.model/get-page-file","frontend.db.model.get_page_file","G__34374","frontend.db.model/get-block-file-path","frontend.db.model/get-file-page-id","G__34375","G__34376","G__34377","G__34378","frontend.db.model/get-page","cljs.core/parse-uuid","G__34380","frontend.db.model/get-redirect-page-name","frontend.db.model.get_redirect_page_name","alias?","page-name'","source-page","frontend.db.model/get-page-original-name","frontend.db.model/get-journals-length","today","frontend.db.utils/date->int","js/Date","G__34381","G__34382","G__34383","G__34385","frontend.db.model/get-latest-journals","n","frontend.db.model.get_latest_journals","date","_","cljs.core.sort_by","cljs.core.take","frontend.db.model/get-page-referenced-pages","ref-pages","G__34386","G__34387","G__34388","frontend.db.model/get-page-linked-refs-refed-pages","G__34389","G__34390","G__34391","G__34392","frontend.db.model/get-pages-relation","with-journal?","q","p__34393","vec__34394","ref-page-name","frontend.db.model/get-pages-that-mentioned-page","mentioned-pages","frontend.db.model/get-page-referenced-blocks-no-cache","G__34400","G__34401","G__34402","G__34404","frontend.db.model/get-page-referenced-blocks","frontend.db.model.get_page_referenced_blocks","query-result","cljs.core/butlast","frontend.db.utils/group-by-page","p__34405","vec__34406","G__34411","frontend.db.model/get-page-referenced-blocks-ids","frontend.db.model.get_page_referenced_blocks_ids","G__34420","G__34421","G__34422","frontend.db.model/get-date-scheduled-or-deadlines","journal-title","frontend.date/journal-title->int","future-days","frontend.state/get-scheduled-future-days","frontend.db.model/pattern","cljs.core/re-pattern","frontend.util/regex-escape","frontend.db.model/get-page-unlinked-references","alias-names","patterns","filter-fn","cljs.core/re-find","frontend.util.drawer/remove-logbook","_tx-report","_result","datascript.core/pull-many","frontend.db.model/get-block-referenced-blocks","frontend.db.model/get-block-referenced-blocks-ids","frontend.db.model/get-referenced-blocks-ids","page-name-or-block-uuid","frontend.db.model/get-matched-blocks","match-fn","content","G__34450","G__34451","G__34452","frontend.db.model/get-blocks-contents","block-uuids","frontend.db.model/journal-page?","frontend.db.model/get-db-type","frontend.db.utils.get_key_value","frontend.db.model/get-public-pages","G__34453","G__34454","frontend.db.model/get-public-false-pages","G__34457","G__34458","frontend.db.model/get-public-false-block-ids","G__34459","G__34460","frontend.db.model/get-all-templates","properties","G__34471","G__34472","G__34473","p__34466","vec__34467","frontend.db.model/get-template-by-name","G__34474","G__34475","G__34476","js/frontend","js/frontend.db","js/frontend.db.model","js/frontend.db.model.blocks-count-cache","frontend.db.model/blocks-count-cache","G__34482","frontend.db.model/blocks-count","frontend.db.model.blocks_count","cache?","frontend.db.model/get-all-block-contents","frontend.db.model/get-assets","matched","cljs.core/re-seq","clojure.string/ends-with?","frontend.db.model/clean-export!","p1__34501#","remove?","non-public-pages","non-public-datoms","non-public-datom-ids","filtered-db","datascript.core/filter","ns","cljs.core/namespace","assets","datascript.core.conn_from_datoms","frontend.db-schema/schema","frontend.db.model/filter-only-public-pages-and-blocks","public-pages","p1__34509#","exported-namespace?","G__34529","G__34530","frontend.db.model/delete-blocks","files","_delete-page?","frontend.db.model/delete-files","frontend.db.model/delete-file-blocks!","frontend.db.model/delete-page-blocks","frontend.db.model/delete-file-pages!","frontend.db.model/delete-file-tx","frontend.db.model/delete-file!","frontend.db.model/delete-pages-by-files","frontend.db.model/set-file-content!","frontend.db.model/get-pre-block","G__34633","G__34634","G__34635","cljs.core/ffirst","frontend.db.model/get-namespace-pages","namespace","G__34638","G__34639","G__34640","G__34641","frontend.db.model/tree","flat-col","p1__34663#","sort-fn","cljs.core/group-by","namespace-children","frontend.db.model/get-namespace-hierarchy","namespace-id","col","frontend.db.model/get-page-namespace","frontend.db.model/get-page-namespace-routes","G__34718","page-exist?","p__34747","map__34750","frontend.db.model/get-orphaned-pages","empty-ref-f","built-in-pages","clojure.string/lower-case","frontend.db.default/built-in-pages-names","orphaned-pages","first-child","cljs.core/false?","cljs.core/List"],"sourcesContent":["(ns frontend.db.model\n  \"Core db functions.\"\n  ;; TODO: Remove this config once how repos are passed to this ns are standardized\n  {:clj-kondo/config {:linters {:unused-binding {:level :off}}}}\n  (:require [clojure.set :as set]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [datascript.core :as d]\n            [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db-schema :as db-schema]\n            [frontend.db.conn :as conn]\n            [frontend.db.react :as react]\n            [frontend.db.utils :as db-utils]\n            [frontend.state :as state]\n            [frontend.util :as util :refer [react]]\n            [logseq.graph-parser.util :as gp-util]\n            [frontend.db.rules :refer [rules]]\n            [frontend.db.default :as default-db]\n            [frontend.util.drawer :as drawer]))\n\n;; lazy loading\n\n(def initial-blocks-length 100)\n\n(def step-loading-blocks 50)\n\n\n;; TODO: extract to specific models and move data transform logic to the\n;; corresponding handlers.\n\n;; Use it as an input argument for datalog queries\n(def block-attrs\n  '[:db/id\n    :block/uuid\n    :block/parent\n    :block/left\n    :block/collapsed?\n    :block/format\n    :block/refs\n    :block/_refs\n    :block/path-refs\n    :block/tags\n    :block/content\n    :block/marker\n    :block/priority\n    :block/properties\n    :block/pre-block?\n    :block/scheduled\n    :block/deadline\n    :block/repeated?\n    :block/created-at\n    :block/updated-at\n    :block/file\n    :block/heading-level\n    {:block/page [:db/id :block/name :block/original-name :block/journal-day]}\n    {:block/_parent ...}])\n\n(defn transact-files-db!\n  ([tx-data]\n   (db-utils/transact! (state/get-current-repo) tx-data))\n  ([repo-url tx-data]\n   (when-not config/publishing?\n     (let [tx-data (->> (gp-util/remove-nils tx-data)\n                        (remove nil?)\n                        (map #(dissoc % :file/handle :file/type)))]\n       (when (seq tx-data)\n         (when-let [conn (conn/get-db repo-url false)]\n           (d/transact! conn (vec tx-data))))))))\n\n(defn pull-block\n  [id]\n  (let [repo (state/get-current-repo)]\n    (when (conn/get-db repo)\n      (->\n       (react/q repo [:frontend.db.react/block id] {}\n         '[:find [(pull ?block ?block-attrs) ...]\n           :in $ ?id ?block-attrs\n           :where\n           [?block :block/uuid ?id]]\n         id\n         block-attrs)\n       react\n       first))))\n\n(defn get-tag-pages\n  [repo tag-name]\n  (when tag-name\n    (d/q '[:find ?original-name ?name\n           :in $ ?tag\n           :where\n           [?e :block/name ?tag]\n           [?page :block/tags ?e]\n           [?page :block/original-name ?original-name]\n           [?page :block/name ?name]]\n         (conn/get-db repo)\n         (util/page-name-sanity-lc tag-name))))\n\n(defn get-all-tagged-pages\n  [repo]\n  (d/q '[:find ?page-name ?tag\n         :where\n         [?page :block/tags ?e]\n         [?e :block/name ?tag]\n         [?page :block/name ?page-name]]\n    (conn/get-db repo)))\n\n(defn get-all-namespace-relation\n  [repo]\n  (d/q '[:find ?page-name ?parent\n         :where\n         [?page :block/name ?page-name]\n         [?page :block/namespace ?e]\n         [?e :block/name ?parent]]\n    (conn/get-db repo)))\n\n(defn get-pages\n  [repo]\n  (->> (d/q\n        '[:find ?page-original-name\n          :where\n          [?page :block/name ?page-name]\n          [(get-else $ ?page :block/original-name ?page-name) ?page-original-name]]\n        (conn/get-db repo))\n       (map first)))\n\n(defn get-all-pages\n  [repo]\n  (d/q\n    '[:find [(pull ?page [*]) ...]\n      :where\n      [?page :block/name]]\n    (conn/get-db repo)))\n\n(defn get-page-alias\n  [repo page-name]\n  (when-let [db (and repo (conn/get-db repo))]\n    (some->> (d/q '[:find ?alias\n                    :in $ ?page-name\n                    :where\n                    [?page :block/name ?page-name]\n                    [?page :block/alias ?alias]]\n                  db\n                  (util/page-name-sanity-lc page-name))\n             db-utils/seq-flatten\n             distinct)))\n\n(defn get-alias-source-page\n  [repo alias]\n  (when-let [db (and repo (conn/get-db repo))]\n    (let [alias (util/page-name-sanity-lc alias)\n          pages (->>\n                 (d/q '[:find (pull ?p [*])\n                        :in $ ?alias\n                        :where\n                        [?a :block/name ?alias]\n                        [?p :block/alias ?a]]\n                      db\n                      alias)\n                 (db-utils/seq-flatten))]\n      (when (seq pages)\n        (some (fn [page]\n                (let [aliases (->> (get-in page [:block/properties :alias])\n                                   (map util/page-name-sanity-lc)\n                                   set)]\n                  (when (contains? aliases alias)\n                    page)))\n              pages)))))\n\n(defn get-files\n  [repo]\n  (when-let [db (conn/get-db repo)]\n    (->> (d/q\n           '[:find ?path\n             ;; ?modified-at\n             :where\n             [?file :file/path ?path]\n             ;; [?file :file/last-modified-at ?modified-at]\n             ]\n           db)\n         (seq)\n         ;; (sort-by last)\n         (reverse))))\n\n(defn get-files-blocks\n  [repo-url paths]\n  (let [paths (set paths)\n        pred (fn [_db e]\n               (contains? paths e))]\n    (-> (d/q '[:find ?block\n               :in $ ?pred\n               :where\n               [?file :file/path ?path]\n               [(?pred $ ?path)]\n               [?p :block/file ?file]\n               [?block :block/page ?p]]\n             (conn/get-db repo-url) pred)\n        db-utils/seq-flatten)))\n\n(defn get-file-blocks\n  [repo-url path]\n  (-> (d/q '[:find ?block\n             :in $ ?path\n             :where\n             [?file :file/path ?path]\n             [?p :block/file ?file]\n             [?block :block/page ?p]]\n           (conn/get-db repo-url) path)\n      db-utils/seq-flatten))\n\n(defn get-file-pages\n  [repo-url path]\n  (-> (d/q '[:find ?page\n             :in $ ?path\n             :where\n             [?file :file/path ?path]\n             [?page :block/file ?file]]\n           (conn/get-db repo-url) path)\n      db-utils/seq-flatten))\n\n(defn set-file-last-modified-at!\n  [repo path last-modified-at]\n  (when (and repo path last-modified-at)\n    (when-let [conn (conn/get-db repo false)]\n      (d/transact! conn\n        [{:file/path path\n          :file/last-modified-at last-modified-at}]\n        {:skip-refresh? true}))))\n\n(defn get-file-last-modified-at\n  [repo path]\n  (when (and repo path)\n    (when-let [db (conn/get-db repo)]\n      (-> (d/entity db [:file/path path])\n          :file/last-modified-at))))\n\n(defn file-exists?\n  [repo path]\n  (when (and repo path)\n    (when-let [db (conn/get-db repo)]\n      (d/entity db [:file/path path]))))\n\n(defn get-file-contents\n  [repo]\n  (when-let [db (conn/get-db repo)]\n    (->>\n     (d/q\n      '[:find ?path ?content\n        :where\n        [?file :file/path ?path]\n        [?file :file/content ?content]]\n       db)\n     (into {}))))\n\n\n(defn get-files-full\n  [repo]\n  (when-let [db (conn/get-db repo)]\n    (->>\n     (d/q\n       '[:find (pull ?file [*])\n         :where\n         [?file :file/path]]\n       db)\n     (flatten))))\n\n(defn get-file\n  ([path]\n   (get-file (state/get-current-repo) path))\n  ([repo path]\n   (when (and repo path)\n     (when-let [db (conn/get-db repo)]\n       (:file/content (d/entity db [:file/path path]))))))\n\n(defn get-custom-css\n  []\n  (when-let [repo (state/get-current-repo)]\n    (get-file (config/get-file-path repo \"logseq/custom.css\"))))\n\n(defn get-block-by-uuid\n  [id]\n  (db-utils/entity [:block/uuid (if (uuid? id) id (uuid id))]))\n\n(defn query-block-by-uuid\n  [id]\n  (db-utils/pull [:block/uuid (if (uuid? id) id (uuid id))]))\n\n(defn get-page-format\n  [page-name]\n  (or\n   (let [page (db-utils/entity [:block/name (util/safe-page-name-sanity-lc page-name)])]\n     (or\n      (:block/format page)\n      (when-let [file (:block/file page)]\n        (when-let [path (:file/path (db-utils/entity (:db/id file)))]\n          (gp-util/get-format path)))))\n   (state/get-preferred-format)\n   :markdown))\n\n(defn page-alias-set\n  [repo-url page]\n  (when-let [page-id (:db/id (db-utils/entity repo-url [:block/name (util/safe-page-name-sanity-lc page)]))]\n    (->>\n     (d/q '[:find ?e\n            :in $ ?page-name %\n            :where\n            [?page :block/name ?page-name]\n            (alias ?page ?e)]\n          (conn/get-db repo-url)\n          (util/safe-page-name-sanity-lc page)\n          '[[(alias ?e2 ?e1)\n             [?e2 :block/alias ?e1]]\n            [(alias ?e2 ?e1)\n             [?e1 :block/alias ?e2]]\n            [(alias ?e1 ?e3)\n             [?e1 :block/alias ?e2]\n             [?e2 :block/alias ?e3]]\n            [(alias ?e3 ?e1)\n             [?e1 :block/alias ?e2]\n             [?e2 :block/alias ?e3]]])\n     db-utils/seq-flatten\n     (set)\n     (set/union #{page-id}))))\n\n(defn get-entities-by-ids\n  ([ids]\n   (get-entities-by-ids (state/get-current-repo) ids))\n  ([repo ids]\n   (when repo\n     (db-utils/pull-many repo '[*] ids))))\n\n(defn get-page-names-by-ids\n  ([ids]\n   (get-page-names-by-ids (state/get-current-repo) ids))\n  ([repo ids]\n   (when repo\n     (->> (db-utils/pull-many repo '[:block/name] ids)\n          (map :block/name)))))\n\n(defn get-page-alias-names\n  [repo page-name]\n  (let [alias-ids (page-alias-set repo page-name)]\n    (when (seq alias-ids)\n      (let [names (->> (get-page-names-by-ids repo alias-ids)\n                       distinct\n                       (remove #(= (util/page-name-sanity-lc %) (util/page-name-sanity-lc page-name))))\n            lookup-refs (map (fn [name]\n                               [:block/name (util/page-name-sanity-lc name)]) names)]\n        (->> (db-utils/pull-many repo '[:block/name :block/original-name] lookup-refs)\n             (map (fn [m]\n                    (or (:block/original-name m) (:block/name m)))))))))\n\n(defn with-pages\n  [blocks]\n  (let [pages-ids (->> (map (comp :db/id :block/page) blocks)\n                       (remove nil?))\n        pages (when (seq pages-ids)\n                (db-utils/pull-many '[:db/id :block/name :block/original-name :block/journal-day] pages-ids))\n        pages-map (reduce (fn [acc p] (assoc acc (:db/id p) p)) {} pages)\n        blocks (map\n                (fn [block]\n                  (assoc block :block/page\n                         (get pages-map (:db/id (:block/page block)))))\n                blocks)]\n    blocks))\n\n(defn get-page-properties\n  [page]\n  (when-let [page (db-utils/entity [:block/name (util/safe-page-name-sanity-lc page)])]\n    (:block/properties page)))\n\n;; FIXME: alert\n(defn sort-by-left\n  ([blocks parent]\n   (sort-by-left blocks parent {:check? true}))\n  ([blocks parent {:keys [check?]}]\n   (when check?\n     (when (not= (count blocks) (count (set (map :block/left blocks))))\n       (let [duplicates (->> (map (comp :db/id :block/left) blocks)\n                             frequencies\n                             (filter (fn [[_k v]] (> v 1)))\n                             (map (fn [[k _v]]\n                                    (let [left (db-utils/pull k)]\n                                      {:left left\n                                       :duplicates (->>\n                                                    (filter (fn [block]\n                                                              (= k (:db/id (:block/left block))))\n                                                            blocks)\n                                                    (map #(select-keys % [:db/id :block/level :block/content :block/file])))}))))]\n         #_(util/pprint duplicates)))\n     (assert (= (count blocks) (count (set (map :block/left blocks)))) \"Each block should have a different left node\"))\n\n   (let [left->blocks (reduce (fn [acc b] (assoc acc (:db/id (:block/left b)) b)) {} blocks)]\n     (loop [block parent\n            result []]\n       (if-let [next (get left->blocks (:db/id block))]\n         (recur next (conj result next))\n         (vec result))))))\n\n(defn sort-by-left-recursive\n  [form]\n  (walk/postwalk (fn [f]\n                   (if (and (map? f)\n                            (:block/_parent f))\n                     (let [children (:block/_parent f)]\n                       (-> f\n                           (dissoc :block/_parent)\n                           (assoc :block/children (sort-by-left children f))))\n                     f))\n                 form))\n\n(defn get-sorted-page-block-ids\n  [page-id]\n  (let [root (db-utils/entity page-id)]\n    (loop [result []\n           children (sort-by-left (:block/_parent root) root)]\n      (if (seq children)\n        (let [child (first children)]\n          (recur (conj result (:db/id child))\n                 (concat\n                  (sort-by-left (:block/_parent child) child)\n                  (rest children))))\n        result))))\n\n(defn sort-page-random-blocks\n  \"Blocks could be non consecutive.\"\n  [blocks]\n  (assert (every? #(= (:block/page %) (:block/page (first blocks))) blocks) \"Blocks must to be in a same page.\")\n  (let [page-id (:db/id (:block/page (first blocks)))\n        ;; TODO: there's no need to sort all the blocks\n        sorted-ids (get-sorted-page-block-ids page-id)\n        blocks-map (zipmap (map :db/id blocks) blocks)]\n    (keep blocks-map sorted-ids)))\n\n(defn has-children?\n  ([block-id]\n   (has-children? (conn/get-db) block-id))\n  ([db block-id]\n   (some? (:block/_parent (d/entity db [:block/uuid block-id])))))\n\n(defn- collapsed-and-has-children?\n  [db block]\n  (and (:block/collapsed? block) (has-children? db (:block/uuid block))))\n\n(defn get-by-parent-&-left\n  [db parent-id left-id]\n  (when (and parent-id left-id)\n    (let [lefts (:block/_left (d/entity db left-id))]\n      (some (fn [node] (when (and (= parent-id (:db/id (:block/parent node)))\n                                  (not= parent-id (:db/id node)))\n                         node)) lefts))))\n\n(defn- get-next-outdented-block\n  \"Get the next outdented block of the block that has the `id`.\n  e.g.\n  - a\n    - b\n      - c\n  - d\n\n  The next outdented block of `c` is `d`.\"\n  [db id]\n  (when-let [block (d/entity db id)]\n    (let [parent (:block/parent block)]\n      (if-let [parent-sibling (get-by-parent-&-left db\n                                                    (:db/id (:block/parent parent))\n                                                    (:db/id parent))]\n       parent-sibling\n       (get-next-outdented-block db (:db/id parent))))))\n\n(defn get-block-parent\n  ([block-id]\n   (get-block-parent (state/get-current-repo) block-id))\n  ([repo block-id]\n   (when-let [db (conn/get-db repo)]\n     (when-let [block (d/entity db [:block/uuid block-id])]\n       (:block/parent block)))))\n\n(defn top-block?\n  [block]\n  (= (:db/id (:block/parent block))\n     (:db/id (:block/page block))))\n\n;; non recursive query\n(defn get-block-parents\n  ([repo block-id]\n   (get-block-parents repo block-id 100))\n  ([repo block-id depth]\n   (loop [block-id block-id\n          parents (list)\n          d 1]\n     (if (> d depth)\n       parents\n       (if-let [parent (get-block-parent repo block-id)]\n         (recur (:block/uuid parent) (conj parents parent) (inc d))\n         parents)))))\n\n(comment\n  (defn get-immediate-children-v2\n    [repo block-id]\n    (d/pull (conn/get-db repo)\n            '[:block/_parent]\n            [:block/uuid block-id])))\n\n;; Use built-in recursive\n(defn get-block-parents-v2\n  [repo block-id]\n  (d/pull (conn/get-db repo)\n          '[:db/id :block/collapsed? :block/properties {:block/parent ...}]\n          [:block/uuid block-id]))\n\n(defn get-next-open-block\n  ([db block]\n   (get-next-open-block db block nil))\n  ([db block scoped-block-id]\n   (let [block-id (:db/id block)\n         block-parent-id (:db/id (:block/parent block))\n         next-block (or\n                     (if (and (collapsed-and-has-children? db block)\n                              (not= block-id scoped-block-id)) ; skips children\n                       ;; Sibling\n                       (get-by-parent-&-left db block-parent-id block-id)\n                       (or\n                        ;; Child\n                        (get-by-parent-&-left db block-id block-id)\n                        ;; Sibling\n                        (get-by-parent-&-left db block-parent-id block-id)))\n\n                     ;; Next outdented block\n                     (get-next-outdented-block db block-id))]\n     (if (and scoped-block-id next-block)\n       (let [parents (->> (get-block-parents (state/get-current-repo) (:block/uuid next-block))\n                          (map :db/id)\n                          (set))]\n         (when (contains? parents scoped-block-id)\n           next-block))\n       next-block))))\n\n(defn get-paginated-blocks-no-cache\n  \"Result should be sorted.\"\n  [db start-id {:keys [limit include-start? scoped-block-id]}]\n  (when-let [start (d/entity db start-id)]\n    (let [scoped-block-parents (when scoped-block-id\n                                 (let [block (d/entity db scoped-block-id)]\n                                   (->> (get-block-parents (state/get-current-repo) (:block/uuid block))\n                                        (map :db/id)\n                                        (set))))\n          result (loop [block start\n                        result []]\n                   (if (and limit (>= (count result) limit))\n                     result\n                     (let [next-block (get-next-open-block db block scoped-block-id)]\n                       (if next-block\n                         (if (and (seq scoped-block-parents)\n                                  (contains? scoped-block-parents (:db/id (:block/parent next-block))))\n                           result\n                           (recur next-block (conj result next-block)))\n                         result))))]\n      (if include-start?\n        (cons start result)\n        result))))\n\n(defn get-block-last-direct-child\n  \"Notice: if `not-collapsed?` is true, will skip searching for any collapsed block.\"\n  ([db db-id]\n   (get-block-last-direct-child db db-id true))\n  ([db db-id not-collapsed?]\n   (when-let [block (d/entity db db-id)]\n     (when (if not-collapsed?\n             (not (collapsed-and-has-children? db block))\n             true)\n       (let [children (:block/_parent block)\n             all-left (set (concat (map (comp :db/id :block/left) children) [db-id]))\n             all-ids (set (map :db/id children))]\n         (first (set/difference all-ids all-left)))))))\n\n(defn get-block-last-child\n  [db db-id]\n  (let [last-child (get-block-last-direct-child db db-id)]\n    (loop [prev last-child\n           last-child last-child]\n      (if last-child\n        (recur last-child (get-block-last-direct-child db last-child))\n        prev))))\n\n(defn get-prev-open-block\n  [db id]\n  (let [block (d/entity db id)\n        left (:block/left block)\n        left-id (:db/id left)]\n    (if (= (:db/id left) (:db/id (:block/parent block)))\n      left-id\n      (if (util/collapsed? left)\n        left-id\n        (or (get-block-last-child db (:db/id left)) left-id)))))\n\n(defn recursive-child?\n  [repo child-id parent-id]\n  (let [*last-node (atom nil)]\n    (loop [node (db-utils/entity repo child-id)]\n      (when-not (= @*last-node node)\n        (reset! *last-node node)\n        (if node\n          (let [parent (:block/parent node)]\n            (if (= (:db/id parent) parent-id)\n              true\n              (recur parent)))\n          false)))))\n\n(defn get-prev-sibling\n  [db id]\n  (when-let [e (d/entity db id)]\n    (let [left (:block/left e)]\n      (when (not= (:db/id left) (:db/id (:block/parent e)))\n        left))))\n\n(defn get-right-sibling\n  [db db-id]\n  (when-let [block (d/entity db db-id)]\n    (get-by-parent-&-left db\n                          (:db/id (:block/parent block))\n                          db-id)))\n\n(defn last-child-block?\n  \"The child block could be collapsed.\"\n  [db parent-id child-id]\n  (when-let [child (d/entity db child-id)]\n    (cond\n      (= parent-id child-id)\n      true\n\n      (get-right-sibling db child-id)\n      false\n\n      :else\n      (last-child-block? db parent-id (:db/id (:block/parent child))))))\n\n(defn- consecutive-block?\n  [block-1 block-2]\n  (let [db (conn/get-db)\n        aux-fn (fn [block-1 block-2]\n                 (and (= (:block/page block-1) (:block/page block-2))\n                      (or\n                       ;; sibling or child\n                       (= (:db/id (:block/left block-2)) (:db/id block-1))\n                       (when-let [prev-sibling (get-prev-sibling db (:db/id block-2))]\n                         (last-child-block? db (:db/id prev-sibling) (:db/id block-1))))))]\n    (or (aux-fn block-1 block-2) (aux-fn block-2 block-1))))\n\n(defn get-non-consecutive-blocks\n  [blocks]\n  (vec\n   (keep-indexed\n    (fn [i _block]\n      (when (< (inc i) (count blocks))\n        (when-not (consecutive-block? (nth blocks i)\n                                      (nth blocks (inc i)))\n          (nth blocks i))))\n    blocks)))\n\n(defn- get-start-id-for-pagination-query\n  [repo-url current-db {:keys [db-before tx-meta] :as tx-report}\n   result outliner-op page-id block-id tx-block-ids]\n  (let [db-before (or db-before current-db)\n        cached-ids (map :db/id @result)\n        cached-ids-set (set (conj cached-ids page-id))\n        first-changed-id (cond\n                           (= (:real-outliner-op tx-meta) :indent-outdent)\n                           (last (:move-blocks tx-meta))\n\n                           (= outliner-op :move-blocks)\n                           (let [{:keys [move-blocks target from-page to-page]} tx-meta]\n                             (cond\n                               (= page-id target) ; move to the first block\n                               nil\n\n                               (and from-page to-page (not= from-page to-page))\n                               (if (= page-id from-page)\n                                 (first move-blocks)\n                                 target)\n\n                               :else\n                               ;; same page, get the most top block before dragging\n                               (let [match-ids (set (conj move-blocks target))]\n                                 (loop [[id & others] cached-ids]\n                                   (if id\n                                     (if (contains? match-ids id)\n                                       id\n                                       (when (seq others)\n                                         (recur others)))\n                                     nil)))))\n                           :else\n                           (let [insert? (= :insert-blocks outliner-op)]\n                             (some #(when (and (or (and insert? (not (contains? cached-ids-set %)))\n                                                   true)\n                                               (recursive-child? repo-url % block-id))\n                                      %) tx-block-ids)))]\n    (when first-changed-id\n      (or (get-prev-open-block db-before first-changed-id)\n          (get-prev-open-block current-db first-changed-id)))))\n\n(defn- build-paginated-blocks-from-cache\n  \"Notice: tx-report could be nil.\"\n  [repo-url tx-report result outliner-op page-id block-id tx-block-ids scoped-block-id]\n  (let [{:keys [tx-meta]} tx-report\n        current-db (conn/get-db repo-url)]\n    (cond\n      (contains? #{:save-block :delete-blocks} outliner-op)\n      @result\n\n      (contains? #{:insert-blocks :collapse-expand-blocks :move-blocks} outliner-op)\n      (when-let [start-id (get-start-id-for-pagination-query\n                           repo-url current-db tx-report result outliner-op page-id block-id tx-block-ids)]\n        (let [start-page? (:block/name (db-utils/entity start-id))]\n          (when-not start-page?\n            (let [previous-blocks (take-while (fn [b] (not= start-id (:db/id b))) @result)\n                  limit 25\n                  more (get-paginated-blocks-no-cache current-db start-id {:limit limit\n                                                                           :include-start? true\n                                                                           :scoped-block-id scoped-block-id})]\n              (concat previous-blocks more)))))\n\n      :else\n      nil)))\n\n(defn get-paginated-blocks\n  \"Get paginated blocks for a page or a specific block.\n   `scoped-block-id`: if specified, returns its children only.\"\n  ([repo-url block-id]\n   (get-paginated-blocks repo-url block-id {}))\n  ([repo-url block-id {:keys [pull-keys start-block limit use-cache? scoped-block-id]\n                       :or {pull-keys '[* :block/_refs]\n                            limit initial-blocks-length\n                            use-cache? true\n                            scoped-block-id nil}}]\n   (when block-id\n     (assert (integer? block-id) (str \"wrong block-id: \" block-id))\n   (let [entity (db-utils/entity repo-url block-id)\n         page? (some? (:block/name entity))\n         page-entity (if page? entity (:block/page entity))\n         page-id (:db/id page-entity)\n         bare-page-map {:db/id page-id\n                        :block/name (:block/name page-entity)\n                        :block/original-name (:block/original-name page-entity)\n                        :block/journal-day (:block/journal-day page-entity)}\n         query-key (if page?\n                     :frontend.db.react/page-blocks\n                     :frontend.db.react/block-and-children)]\n     (some->\n      (react/q repo-url [query-key block-id]\n        {:use-cache? use-cache?\n         :query-fn (fn [db tx-report result]\n                     (let [tx-data (:tx-data tx-report)\n                           refs (some->> (filter #(= :block/refs (:a %)) tx-data)\n                                         (map :v))\n                           tx-block-ids (distinct (-> (map :e tx-data)\n                                                      (concat refs)))\n                           [tx-id->block cached-id->block] (when (and tx-report result)\n                                                             (let [blocks (->> (db-utils/pull-many repo-url pull-keys tx-block-ids)\n                                                                               (remove nil?))]\n                                                               [(zipmap (mapv :db/id blocks) blocks)\n                                                                (zipmap (mapv :db/id @result) @result)]))\n                           limit (if (and result @result)\n                                   (max (+ (count @result) 5) limit)\n                                   limit)\n                           outliner-op (get-in tx-report [:tx-meta :outliner-op])\n                           blocks (build-paginated-blocks-from-cache repo-url tx-report result outliner-op page-id block-id tx-block-ids scoped-block-id)\n                           blocks (or blocks\n                                      (get-paginated-blocks-no-cache (conn/get-db repo-url) block-id {:limit limit\n                                                                                                      :include-start? (not page?)\n                                                                                                      :scoped-block-id scoped-block-id}))\n                           block-eids (map :db/id blocks)\n                           blocks (if (and (seq tx-id->block)\n                                           (not (contains? #{:move-blocks} outliner-op)))\n                                    (map (fn [id]\n                                           (or (get tx-id->block id)\n                                               (get cached-id->block id)\n                                               (db-utils/pull repo-url pull-keys id))) block-eids)\n                                    (db-utils/pull-many repo-url pull-keys block-eids))\n                           blocks (remove (fn [b] (nil? (:block/content b))) blocks)]\n                       (map (fn [b] (assoc b :block/page bare-page-map)) blocks)))}\n        nil)\n      react)))))\n\n(defn get-page-blocks-no-cache\n  ([page]\n   (get-page-blocks-no-cache (state/get-current-repo) page nil))\n  ([repo-url page]\n   (get-page-blocks-no-cache repo-url page nil))\n  ([repo-url page {:keys [pull-keys]\n                   :or {pull-keys '[*]}}]\n   (when page\n     (let [page (util/page-name-sanity-lc page)\n           page-id (:db/id (db-utils/entity repo-url [:block/name page]))\n           db (conn/get-db repo-url)]\n       (when page-id\n         (let [datoms (d/datoms db :avet :block/page page-id)\n               block-eids (mapv :e datoms)]\n           (db-utils/pull-many repo-url pull-keys block-eids)))))))\n\n(defn get-page-blocks-count\n  [repo page-id]\n  (when-let [db (conn/get-db repo)]\n    (count (d/datoms db :avet :block/page page-id))))\n\n(defn page-exists?\n  \"Whether a page exists.\"\n  [page-name]\n  (when page-name\n    (db-utils/entity [:block/name (util/page-name-sanity-lc page-name)])))\n\n(defn page-empty?\n  \"Whether a page is empty. Does it has a non-page block?\n  `page-id` could be either a string or a db/id.\"\n  [repo page-id]\n  (when-let [db (conn/get-db repo)]\n    (let [page-id (if (string? page-id)\n                    [:block/name (util/safe-page-name-sanity-lc page-id)]\n                    page-id)\n          page (d/entity db page-id)]\n      (nil? (:block/_left page)))))\n\n(defn page-empty-or-dummy?\n  [repo page-id]\n  (or\n   (page-empty? repo page-id)\n   (when-let [db (conn/get-db repo)]\n     (let [datoms (d/datoms db :avet :block/page page-id)]\n       (and (= (count datoms) 1)\n            (= \"\" (:block/content (db-utils/pull (:e (first datoms))))))))))\n\n(defn parents-collapsed?\n  [repo block-id]\n  (when-let [block (:block/parent (get-block-parents-v2 repo block-id))]\n    (->> (tree-seq map? (fn [x] [(:block/parent x)]) block)\n         (some util/collapsed?))))\n\n(defn block-collapsed?\n  ([block-id]\n   (block-collapsed? (state/get-current-repo) block-id))\n  ([repo block-id]\n   (when-let [block (db-utils/entity repo [:block/uuid block-id])]\n     (util/collapsed? block))))\n\n(defn get-block-page\n  [repo block-id]\n  (when-let [block (db-utils/entity repo [:block/uuid block-id])]\n    (db-utils/entity repo (:db/id (:block/page block)))))\n\n(defn get-pages-by-name-partition\n  [repo partition]\n  (when-let [db (conn/get-db repo)]\n    (when-not (string/blank? partition)\n      (let [partition (util/page-name-sanity-lc (string/trim partition))\n            ids (->> (d/datoms db :aevt :block/name)\n                     (filter (fn [datom]\n                               (let [page (:v datom)]\n                                 (string/includes? page partition))))\n                     (map :e))]\n        (when (seq ids)\n          (db-utils/pull-many repo\n                              '[:db/id :block/name :block/original-name]\n                              ids))))))\n\n\n(defn get-block-children-ids\n  [repo block-uuid]\n  (when-let [db (conn/get-db repo)]\n    (let [eid (:db/id (db-utils/entity repo [:block/uuid block-uuid]))]\n      (->> (d/q\n            '[:find ?id\n              :in $ ?p %\n              :where\n              (child ?p ?c)\n              [?c :block/uuid ?id]]\n            db\n            eid\n            rules)\n           (apply concat)))))\n\n(defn get-block-immediate-children\n  \"Doesn't include nested children.\"\n  [repo block-uuid]\n  (when-let [db (conn/get-db repo)]\n    (-> (d/q\n          '[:find [(pull ?b [*]) ...]\n            :in $ ?parent-id\n            :where\n            [?parent :block/uuid ?parent-id]\n            [?b :block/parent ?parent]]\n          db\n          block-uuid)\n        (sort-by-left (db-utils/entity [:block/uuid block-uuid])))))\n\n(defn sub-block-direct-children\n  \"Doesn't include nested children.\"\n  [repo block-uuid]\n  (when-let [db (conn/get-db repo)]\n    (-> (react/q repo [:frontend.db.react/block-direct-children block-uuid] {}\n          '[:find [(pull ?b [*]) ...]\n            :in $ ?parent-id\n            :where\n            [?parent :block/uuid ?parent-id]\n            [?b :block/parent ?parent]]\n          block-uuid)\n        react\n        (sort-by-left (db-utils/entity [:block/uuid block-uuid])))))\n\n(defn get-block-children\n  \"Including nested children.\"\n  [repo block-uuid]\n  (let [ids (get-block-children-ids repo block-uuid)\n        ids (map (fn [id] [:block/uuid id]) ids)]\n    (when (seq ids)\n      (db-utils/pull-many repo '[*] ids))))\n\n;; TODO: use the tree directly\n(defn- flatten-tree\n  [blocks-tree]\n  (if-let [children (:block/_parent blocks-tree)]\n    (cons (dissoc blocks-tree :block/_parent) (mapcat flatten-tree children))\n    [blocks-tree]))\n\n(defn get-block-and-children\n  [repo block-uuid]\n  (some-> (d/q\n            '[:find [(pull ?block ?block-attrs) ...]\n              :in $ ?id ?block-attrs\n              :where\n              [?block :block/uuid ?id]]\n            (conn/get-db repo)\n            block-uuid\n            block-attrs)\n          first\n          flatten-tree))\n\n(defn get-file-page\n  ([file-path]\n   (get-file-page file-path true))\n  ([file-path original-name?]\n   (when-let [repo (state/get-current-repo)]\n     (when-let [db (conn/get-db repo)]\n       (some->\n        (d/q\n         (if original-name?\n           '[:find ?page-name\n             :in $ ?path\n             :where\n             [?file :file/path ?path]\n             [?page :block/file ?file]\n             [?page :block/original-name ?page-name]]\n           '[:find ?page-name\n             :in $ ?path\n             :where\n             [?file :file/path ?path]\n             [?page :block/file ?file]\n             [?page :block/name ?page-name]])\n         db file-path)\n        db-utils/seq-flatten\n        first)))))\n\n(defn get-page-file\n  ([page-name]\n   (get-page-file (state/get-current-repo) page-name))\n  ([repo page-name]\n   (some-> (or (db-utils/entity repo [:block/name page-name])\n               (db-utils/entity repo [:block/original-name page-name]))\n           :block/file)))\n\n(defn get-block-file-path\n  [block]\n  (when-let [page-id (:db/id (:block/page block))]\n    (:file/path (:block/file (db-utils/entity page-id)))))\n\n(defn get-file-page-id\n  [file-path]\n  (when-let [repo (state/get-current-repo)]\n    (when-let [db (conn/get-db repo)]\n      (some->\n       (d/q\n        '[:find ?page\n          :in $ ?path\n          :where\n          [?file :file/path ?path]\n          [?page :block/name]\n          [?page :block/file ?file]]\n        db file-path)\n       db-utils/seq-flatten\n       first))))\n\n(defn get-page\n  [page-name]\n  (if-let [id (parse-uuid page-name)]\n    (db-utils/entity [:block/uuid id])\n    (db-utils/entity [:block/name (util/page-name-sanity-lc page-name)])))\n\n(defn get-redirect-page-name\n  \"Given any readable page-name, return the exact page-name in db. If page\n   doesn't exists yet, will return the passed `page-name`. Accepts both\n   sanitized or unsanitized names.\n   alias?: if true, alias is allowed to be returned; otherwise, it would be deref.\"\n  ([page-name] (get-redirect-page-name page-name false))\n  ([page-name alias?]\n   (when page-name\n     (let [page-name' (util/page-name-sanity-lc page-name)\n           page-entity (db-utils/entity [:block/name page-name'])]\n       (cond\n         alias?\n         page-name'\n\n         (nil? page-entity)\n         page-name\n\n         (page-empty-or-dummy? (state/get-current-repo) (:db/id page-entity))\n         (let [source-page (get-alias-source-page (state/get-current-repo) page-name')]\n           (or (when source-page (:block/name source-page))\n               page-name'))\n\n         :else\n         page-name')))))\n\n(defn get-page-original-name\n  [page-name]\n  (when (string? page-name)\n    (let [page (db-utils/pull [:block/name (util/page-name-sanity-lc page-name)])]\n      (or (:block/original-name page)\n          (:block/name page)))))\n\n(defn get-journals-length\n  []\n  (let [today (db-utils/date->int (js/Date.))]\n    (d/q '[:find (count ?page) .\n           :in $ ?today\n           :where\n           [?page :block/journal? true]\n           [?page :block/journal-day ?journal-day]\n           [(<= ?journal-day ?today)]]\n         (conn/get-db (state/get-current-repo))\n         today)))\n\n(defn get-latest-journals\n  ([n]\n   (get-latest-journals (state/get-current-repo) n))\n  ([repo-url n]\n   (when (conn/get-db repo-url)\n     (let [date (js/Date.)\n           _ (.setDate date (- (.getDate date) (dec n)))\n           today (db-utils/date->int (js/Date.))]\n       (->>\n        (react/q repo-url [:frontend.db.react/journals] {:use-cache? false}\n          '[:find [(pull ?page [*]) ...]\n            :in $ ?today\n            :where\n            [?page :block/name ?page-name]\n            [?page :block/journal? true]\n            [?page :block/journal-day ?journal-day]\n            [(<= ?journal-day ?today)]]\n          today)\n        (react)\n        (sort-by :block/journal-day)\n        (reverse)\n        (take n))))))\n\n;; get pages that this page referenced\n(defn get-page-referenced-pages\n  [repo page]\n  (when-let [db (conn/get-db repo)]\n    (let [page-name (util/safe-page-name-sanity-lc page)\n          pages (page-alias-set repo page)\n          page-id (:db/id (db-utils/entity [:block/name page-name]))\n          ref-pages (d/q\n                      '[:find [?ref-page-name ...]\n                        :in $ ?pages\n                        :where\n                        [(untuple ?pages) [?page ...]]\n                        [?block :block/page ?page]\n                        [?block :block/refs ?ref-page]\n                        [?ref-page :block/name ?ref-page-name]]\n                      db\n                      pages)]\n      (mapv (fn [page] [page (get-page-alias repo page)]) ref-pages))))\n\n(defn get-page-linked-refs-refed-pages\n  [repo page]\n  (when-let [db (conn/get-db repo)]\n    (->\n     (d/q\n      '[:find [?ref-page ...]\n        :in $ % ?page\n        :where\n        [?p :block/name ?page]\n        [?b :block/path-refs ?p]\n        [?b :block/refs ?other-p]\n        [(not= ?p ?other-p)]\n        [?other-p :block/original-name ?ref-page]]\n      db\n      rules\n      (util/safe-page-name-sanity-lc page))\n     (distinct))))\n\n;; Ignore files with empty blocks for now\n(defn get-pages-relation\n  [repo with-journal?]\n  (when-let [db (conn/get-db repo)]\n    (let [q (if with-journal?\n              '[:find ?page ?ref-page-name\n                :where\n                [?p :block/name ?page]\n                [?block :block/page ?p]\n                [?block :block/refs ?ref-page]\n                [?ref-page :block/name ?ref-page-name]]\n              '[:find ?page ?ref-page-name\n                :where\n                [?p :block/journal? false]\n                [?p :block/name ?page]\n                [?block :block/page ?p]\n                [?block :block/refs ?ref-page]\n                [?ref-page :block/name ?ref-page-name]])]\n      (->>\n       (d/q q db)\n       (map (fn [[page ref-page-name]]\n              [page ref-page-name]))))))\n\n;; get pages who mentioned this page\n;; TODO: use :block/_refs\n(defn get-pages-that-mentioned-page\n  [repo page]\n  (when (conn/get-db repo)\n    (let [page-id (:db/id (db-utils/entity [:block/name (util/safe-page-name-sanity-lc page)]))\n          pages (page-alias-set repo page)\n          mentioned-pages (->> (react/q repo [:frontend.db.react/page<-pages page-id] {:use-cache? false}\n                                        '[:find ?mentioned-page-name\n                                          :in $ ?pages ?page-name\n                                          :where\n                                          [?block :block/refs ?p]\n                                          [(contains? ?pages ?p)]\n                                          [?block :block/page ?mentioned-page]\n                                          [?mentioned-page :block/name ?mentioned-page-name]]\n                                        pages\n                                        page)\n                               react\n                               db-utils/seq-flatten)]\n      (mapv (fn [page] [page (get-page-alias repo page)]) mentioned-pages))))\n\n(defn get-page-referenced-blocks-no-cache\n  [page-id]\n  (when-let [repo (state/get-current-repo)]\n    (->>\n     (d/q '[:find (pull ?b [*])\n            :in $ ?page-id\n            :where\n            [?b :block/refs ?page-id]]\n          (conn/get-db repo)\n          page-id)\n     (flatten))))\n\n(defn get-page-referenced-blocks\n  ([page]\n   (get-page-referenced-blocks (state/get-current-repo) page))\n  ([repo page]\n   (when repo\n     (when (conn/get-db repo)\n       (let [page-id (:db/id (db-utils/entity [:block/name (util/safe-page-name-sanity-lc page)]))\n             pages (page-alias-set repo page)\n             aliases (set/difference pages #{page-id})\n             query-result (react/q repo\n                            [:frontend.db.react/page<-blocks-or-block<-blocks page-id]\n                            {}\n                            '[:find [(pull ?block ?block-attrs) ...]\n                              :in $ [?ref-page ...] ?block-attrs\n                              :where\n                              [?block :block/refs ?ref-page]]\n                            pages\n                            (butlast block-attrs))\n             result (->> query-result\n                         react\n                         (remove (fn [block]\n                                   (= page-id (:db/id (:block/page block)))))\n                         (sort-by-left-recursive)\n                         db-utils/group-by-page\n                         (map (fn [[k blocks]]\n                                (let [k (if (contains? aliases (:db/id k))\n                                          (assoc k :block/alias? true)\n                                          k)]\n                                  [k blocks]))))]\n         result)))))\n\n(defn get-page-referenced-blocks-ids\n  \"Faster and can be used for pagination later.\"\n  ([page]\n   (get-page-referenced-blocks-ids (state/get-current-repo) page))\n  ([repo page]\n   (when repo\n     (when-let [db (conn/get-db repo)]\n       (let [pages (page-alias-set repo page)]\n         (d/q\n           '[:find ?block\n             :in $ [?ref-page ...]\n             :where\n             [?block :block/refs ?ref-page]]\n           db\n           pages))))))\n\n(defn get-date-scheduled-or-deadlines\n  [journal-title]\n  (when-let [date (date/journal-title->int journal-title)]\n    (let [future-days (state/get-scheduled-future-days)]\n      (when-let [repo (state/get-current-repo)]\n        (->> (react/q repo [:custom :scheduled-deadline journal-title] {}\n               '[:find [(pull ?block ?block-attrs) ...]\n                 :in $ ?day ?future ?block-attrs\n                 :where\n                 (or\n                  [?block :block/scheduled ?d]\n                  [?block :block/deadline ?d])\n                 [(get-else $ ?block :block/repeated? false) ?repeated]\n                 [(get-else $ ?block :block/marker \"NIL\") ?marker]\n                 [(not= ?marker \"DONE\")]\n                 [(not= ?marker \"CANCELED\")]\n                 [(not= ?marker \"CANCELLED\")]\n                 [(<= ?d ?future)]\n                 (or-join [?repeated ?d ?day]\n                          [(true? ?repeated)]\n                          [(>= ?d ?day)])]\n               date\n               (+ date future-days)\n               block-attrs)\n             react\n             (sort-by-left-recursive)\n             db-utils/group-by-page)))))\n\n(defn- pattern [name]\n  (re-pattern (str \"(?i)(^|[^\\\\[#0-9a-zA-Z]|((^|[^\\\\[])\\\\[))\"\n                   (util/regex-escape name)\n                   \"($|[^0-9a-zA-Z])\")))\n\n(defn get-page-unlinked-references\n  [page]\n  (when-let [repo (state/get-current-repo)]\n    (when (conn/get-db repo)\n      (let [page (util/safe-page-name-sanity-lc page)\n            page-id     (:db/id (db-utils/entity [:block/name page]))\n            alias-names (get-page-alias-names repo page)\n            patterns    (->> (conj alias-names page)\n                             (map pattern))\n            filter-fn   (fn [datom]\n                          (some (fn [p]\n                                  (re-find p (->> (:v datom)\n                                                  (drawer/remove-logbook))))\n                                patterns))]\n        (->> (react/q repo [:frontend.db.react/page-unlinked-refs page-id]\n                      {:query-fn (fn [db _tx-report _result]\n                                   (let [ids\n                                         (->> (d/datoms db :aevt :block/content)\n                                              (filter filter-fn)\n                                              (map :e))\n                                         result (d/pull-many db block-attrs ids)]\n                                     (remove (fn [block] (= page-id (:db/id (:block/page block)))) result)))}\n                      nil)\n             react\n             (sort-by-left-recursive)\n             db-utils/group-by-page)))))\n\n;; TODO: Replace recursive queries with datoms index implementation\n;; see https://github.com/tonsky/datascript/issues/130#issuecomment-169520434\n(defn get-block-referenced-blocks\n  [block-uuid]\n  (when-let [repo (state/get-current-repo)]\n    (when (conn/get-db repo)\n      (let [block (db-utils/entity [:block/uuid block-uuid])]\n        (->> (react/q repo [:frontend.db.react/page<-blocks-or-block<-blocks\n                            (:db/id block)]\n                      {:use-cache? false}\n                      '[:find [(pull ?ref-block ?block-attrs) ...]\n                        :in $ ?block-uuid ?block-attrs\n                        :where\n                        [?block :block/uuid ?block-uuid]\n                        [?ref-block :block/refs ?block]]\n                      block-uuid\n                      block-attrs)\n             react\n            (sort-by-left-recursive)\n            db-utils/group-by-page)))))\n\n(defn get-block-referenced-blocks-ids\n  [block-uuid]\n  (when-let [repo (state/get-current-repo)]\n    (let [block (db-utils/entity [:block/uuid block-uuid])]\n      (->> (react/q repo [:frontend.db.react/block<-block-ids\n                          (:db/id block)] {}\n             '[:find ?ref-block\n               :in $ ?block-uuid ?block-attrs\n               :where\n               [?block :block/uuid ?block-uuid]\n               [?ref-block :block/refs ?block]]\n             block-uuid\n             block-attrs)\n           react))))\n\n(defn get-referenced-blocks-ids\n  [page-name-or-block-uuid]\n  (if-let [id (parse-uuid (str page-name-or-block-uuid))]\n    (get-block-referenced-blocks-ids id)\n    (get-page-referenced-blocks-ids page-name-or-block-uuid)))\n\n(defn get-matched-blocks\n  [match-fn limit]\n  (when-let [repo (state/get-current-repo)]\n    (let [pred (fn [_db content]\n                 (match-fn content))]\n      (->> (d/q\n            '[:find ?block\n              :in $ ?pred\n              :where\n              [?block :block/content ?content]\n              [(?pred $ ?content)]]\n            (conn/get-db)\n            pred)\n           (take limit)\n           db-utils/seq-flatten\n           (db-utils/pull-many '[:block/uuid\n                                 :block/content\n                                 :block/properties\n                                 :block/format\n                                 {:block/page [:block/name]}])))))\n\n;; TODO: Does the result preserves the order of the arguments?\n(defn get-blocks-contents\n  [repo block-uuids]\n  (let [db (conn/get-db repo)]\n    (db-utils/pull-many repo '[:block/content]\n                        (mapv (fn [id] [:block/uuid id]) block-uuids))))\n\n(defn journal-page?\n  \"sanitized page-name only\"\n  [page-name]\n  (:block/journal? (db-utils/entity [:block/name page-name])))\n\n(defn get-db-type\n  [repo]\n  (db-utils/get-key-value repo :db/type))\n\n(defn get-public-pages\n  [db]\n  (-> (d/q\n       '[:find ?p\n         :where\n         [?p :block/name]\n         [?p :block/properties ?properties]\n         [(get ?properties :public) ?pub]\n         [(= true ?pub)]]\n       db)\n      (db-utils/seq-flatten)))\n\n(defn get-public-false-pages\n  [db]\n  (-> (d/q\n        '[:find ?p\n          :where\n          [?p :block/name]\n          [?p :block/properties ?properties]\n          [(get ?properties :public) ?pub]\n          [(= false ?pub)]]\n        db)\n      (db-utils/seq-flatten)))\n\n(defn get-public-false-block-ids\n  [db]\n  (-> (d/q\n        '[:find ?b\n          :where\n          [?p :block/name]\n          [?p :block/properties ?properties]\n          [(get ?properties :public) ?pub]\n          [(= false ?pub)]\n          [?b :block/page ?p]]\n        db)\n      (db-utils/seq-flatten)))\n\n(defn get-all-templates\n  []\n  (let [pred (fn [_db properties]\n               (some? (:template properties)))]\n    (->> (d/q\n          '[:find ?b ?p\n            :in $ ?pred\n            :where\n            [?b :block/properties ?p]\n            [(?pred $ ?p)]]\n          (conn/get-db)\n          pred)\n         (map (fn [[e m]]\n                [(get m :template) e]))\n         (into {}))))\n\n(defn get-template-by-name\n  [name]\n  (when (string? name)\n    (->> (d/q\n           '[:find [(pull ?b [*]) ...]\n             :in $ ?name\n             :where\n             [?b :block/properties ?p]\n             [(get ?p :template) ?t]\n             [(= ?t ?name)]]\n           (conn/get-db)\n           name)\n         (sort-by :block/name)\n         (first))))\n\n(defonce blocks-count-cache (atom nil))\n\n(defn blocks-count\n  ([]\n   (blocks-count true))\n  ([cache?]\n   (if (and cache? @blocks-count-cache)\n     @blocks-count-cache\n     (when-let [db (conn/get-db)]\n       (let [n (count (d/datoms db :avet :block/uuid))]\n         (reset! blocks-count-cache n)\n         n)))))\n\n;; block/uuid and block/content\n(defn get-all-block-contents\n  []\n  (when-let [db (conn/get-db)]\n    (->> (d/datoms db :avet :block/uuid)\n         (map :v)\n         (map (fn [id]\n                (let [e (db-utils/entity [:block/uuid id])]\n                  (when (and (not (:block/name e))\n                             (not (string/blank? (:block/content e))))\n                    {:db/id (:db/id e)\n                     :block/uuid id\n                     :block/page (:db/id (:block/page e))\n                     :block/content (:block/content e)\n                     :block/format (:block/format e)}))))\n         (remove nil?))))\n\n(defn get-assets\n  [datoms]\n  (keep\n   (fn [datom]\n     (when (= :block/content (:a datom))\n       (let [matched (re-seq #\"\\([./]*/assets/([^)]+)\\)\" (:v datom))\n             matched (get (into [] matched) 0)\n             path (get matched 1)]\n         (when (and (string? path)\n                    (not (string/ends-with? path \".js\")))\n           path))))\n   datoms))\n\n(defn clean-export!\n  [db]\n  (let [remove? #(contains? #{\"me\" \"recent\" \"file\"} %)\n        non-public-pages (get-public-false-pages db)\n        non-public-datoms (get-public-false-block-ids db)\n        non-public-datom-ids (set (concat non-public-pages non-public-datoms))\n        filtered-db (d/filter db\n                              (fn [_db datom]\n                                (let [ns (namespace (:a datom))]\n                                  (and (not (remove? ns))\n                                       (not (contains? #{:block/file} (:a datom)))\n                                       (not (contains? non-public-datom-ids (:e datom)))))))\n        datoms (d/datoms filtered-db :eavt)\n        assets (get-assets datoms)]\n    [@(d/conn-from-datoms datoms db-schema/schema) assets]))\n\n(defn filter-only-public-pages-and-blocks\n  [db]\n  (let [public-pages (get-public-pages db)]\n    (when (seq public-pages)\n      (let [public-pages (set public-pages)\n            exported-namespace? #(contains? #{\"block\" \"me\" \"recent\"} %)\n            filtered-db (d/filter db\n                                  (fn [db datom]\n                                    (let [ns (namespace (:a datom))]\n                                      (and\n                                       (not (contains? #{:block/file} (:a datom)))\n                                       (not= ns \"file\")\n                                       (or\n                                        (not (exported-namespace? ns))\n                                        (and (= ns \"block\")\n                                             (or\n                                              (contains? public-pages (:e datom))\n                                              (contains? public-pages (:db/id (:block/page (d/entity db (:e datom))))))))))))\n            datoms (d/datoms filtered-db :eavt)\n            assets (get-assets datoms)]\n        [@(d/conn-from-datoms datoms db-schema/schema) assets]))))\n\n(defn delete-blocks\n  [repo-url files _delete-page?]\n  (when (seq files)\n    (let [blocks (get-files-blocks repo-url files)]\n      (mapv (fn [eid] [:db.fn/retractEntity eid]) blocks))))\n\n(defn delete-files\n  [files]\n  (mapv (fn [path] [:db.fn/retractEntity [:file/path path]]) files))\n\n(defn delete-file-blocks!\n  [repo-url path]\n  (let [blocks (get-file-blocks repo-url path)]\n    (mapv (fn [eid] [:db.fn/retractEntity eid]) blocks)))\n\n(defn delete-page-blocks\n  [repo-url page]\n  (when page\n    (when-let [db (conn/get-db repo-url)]\n      (let [page (db-utils/pull [:block/name (util/page-name-sanity-lc page)])]\n        (when page\n          (let [datoms (d/datoms db :avet :block/page (:db/id page))\n                block-eids (mapv :e datoms)]\n            (mapv (fn [eid] [:db.fn/retractEntity eid]) block-eids)))))))\n\n(defn delete-file-pages!\n  [repo-url path]\n  (let [pages (get-file-pages repo-url path)]\n    (mapv (fn [eid] [:db.fn/retractEntity eid]) pages)))\n\n(defn delete-file-tx\n  [repo-url file-path]\n  (->>\n   (concat\n    (delete-file-blocks! repo-url file-path)\n    (delete-file-pages! repo-url file-path)\n    [[:db.fn/retractEntity [:file/path file-path]]])\n   (remove nil?)))\n\n(defn delete-file!\n  [repo-url file-path]\n  (db-utils/transact! repo-url (delete-file-tx repo-url file-path)))\n\n(defn delete-pages-by-files\n  [files]\n  (let [pages (->> (mapv get-file-page files)\n                   (remove nil?))]\n    (when (seq pages)\n      (mapv (fn [page] [:db.fn/retractEntity [:block/name page]]) (map util/page-name-sanity-lc pages)))))\n\n(defn set-file-content!\n  [repo path content]\n  (when (and repo path)\n    (let [tx-data {:file/path path\n                   :file/content content}]\n      (db-utils/transact! repo [tx-data] {:skip-refresh? true}))))\n\n(defn get-pre-block\n  [repo page-id]\n  (-> (d/q '[:find (pull ?b [*])\n             :in $ ?page\n             :where\n             [?b :block/page ?page]\n             [?b :block/pre-block? true]]\n           (conn/get-db repo)\n           page-id)\n      ffirst))\n\n(defn get-namespace-pages\n  \"Accepts both sanitized and unsanitized namespaces\"\n  [repo namespace]\n  (assert (string? namespace))\n  (let [namespace (util/page-name-sanity-lc namespace)]\n    (d/q\n      '[:find [(pull ?c [:db/id :block/name :block/original-name\n                         :block/namespace\n                         {:block/file [:db/id :file/path]}]) ...]\n        :in $ % ?namespace\n        :where\n        [?p :block/name ?namespace]\n        (namespace ?p ?c)]\n      (conn/get-db repo)\n      rules\n      namespace)))\n\n(defn- tree [flat-col root]\n  (let [sort-fn #(sort-by :block/name %)\n        children (group-by :block/namespace flat-col)\n        namespace-children (fn namespace-children [parent-id]\n                             (map (fn [m]\n                                    (assoc m :namespace/children\n                                           (sort-fn (namespace-children {:db/id (:db/id m)}))))\n                               (sort-fn (get children parent-id))))]\n    (namespace-children root)))\n\n(defn get-namespace-hierarchy\n  \"Unsanitized namespaces\"\n  [repo namespace]\n  (let [children (get-namespace-pages repo namespace)\n        namespace-id (:db/id (db-utils/entity [:block/name (util/page-name-sanity-lc namespace)]))\n        root {:db/id namespace-id}\n        col (conj children root)]\n    (tree col root)))\n\n(defn get-page-namespace\n  [repo page]\n  (:block/namespace (db-utils/entity repo [:block/name (util/page-name-sanity-lc page)])))\n\n(defn get-page-namespace-routes\n  [repo page]\n  (assert (string? page))\n  (when-let [db (conn/get-db repo)]\n    (when-not (string/blank? page)\n      (let [page (util/page-name-sanity-lc (string/trim page))\n            page-exist? (db-utils/entity repo [:block/name page])\n            ids (if page-exist?\n                  '()\n                  (->> (d/datoms db :aevt :block/name)\n                       (filter (fn [datom]\n                                 (string/ends-with? (:v datom) (str \"/\" page))))\n                       (map :e)))]\n        (when (seq ids)\n          (db-utils/pull-many repo\n                              '[:db/id :block/name :block/original-name\n                                {:block/file [:db/id :file/path]}]\n                              ids))))))\n\n(defn get-orphaned-pages\n  [{:keys [repo pages empty-ref-f]\n          :or {repo (state/get-current-repo)\n               empty-ref-f (fn [page] (zero? (count (:block/_refs page))))}}]\n  (let [pages (->> (or pages (get-pages repo))\n                   (remove nil?))\n        built-in-pages (set (map string/lower-case default-db/built-in-pages-names))\n        orphaned-pages (->>\n                        (map\n                          (fn [page]\n                            (let [name (util/page-name-sanity-lc page)]\n                              (when-let [page (db-utils/entity [:block/name name])]\n                                (and\n                                 (empty-ref-f page)\n                                 (or\n                                  (page-empty? repo (:db/id page))\n                                  (let [first-child (first (:block/_left page))\n                                        children (:block/_page page)]\n                                    (and\n                                     first-child\n                                     (= 1 (count children))\n                                     (contains? #{\"\" \"-\" \"*\"} (string/trim (:block/content first-child))))))\n                                 (not (contains? built-in-pages name))\n                                 (not (:block/_namespace page))\n                                 ;; a/b/c might be deleted but a/b/c/d still exists (for backward compatibility)\n                                 (not (and (string/includes? name \"/\")\n                                           (not (:block/journal? page))))\n                                 page))))\n                          pages)\n                        (remove false?)\n                        (remove nil?))]\n    orphaned-pages))\n"]}