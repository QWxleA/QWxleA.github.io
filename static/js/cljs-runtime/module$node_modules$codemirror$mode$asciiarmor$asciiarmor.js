shadow$provide.module$node_modules$codemirror$mode$asciiarmor$asciiarmor=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){function errorIfNotEmpty(stream){var nonWS=stream.match(/^\s*\S/);stream.skipToEnd();return nonWS?"error":null}CodeMirror.defineMode("asciiarmor",function(){return{token:function(stream,
state){var m;if("top"==state.state)return stream.sol()&&(m=stream.match(/^-----BEGIN (.*)?-----\s*$/))?(state.state="headers",state.type=m[1],"tag"):errorIfNotEmpty(stream);if("headers"==state.state){if(stream.sol()&&stream.match(/^\w+:/))return state.state="header","atom";if(stream=errorIfNotEmpty(stream))state.state="body";return stream}if("header"==state.state)return stream.skipToEnd(),state.state="headers","string";if("body"==state.state){if(stream.sol()&&(m=stream.match(/^-----END (.*)?-----\s*$/))){if(m[1]!=
state.type)return"error";state.state="end";return"tag"}if(stream.eatWhile(/[A-Za-z0-9+\/=]/))return null;stream.next();return"error"}if("end"==state.state)return errorIfNotEmpty(stream)},blankLine:function(state){"headers"==state.state&&(state.state="body")},startState:function(){return{state:"top",type:null}}}});CodeMirror.defineMIME("application/pgp","asciiarmor");CodeMirror.defineMIME("application/pgp-encrypted","asciiarmor");CodeMirror.defineMIME("application/pgp-keys","asciiarmor");CodeMirror.defineMIME("application/pgp-signature",
"asciiarmor")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$asciiarmor$asciiarmor.js.map
