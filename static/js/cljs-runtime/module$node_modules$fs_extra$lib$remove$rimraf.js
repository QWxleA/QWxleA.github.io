shadow$provide.module$node_modules$fs_extra$lib$remove$rimraf=function(global,require,module,exports){function defaults(options){"unlink chmod stat lstat rmdir readdir".split(" ").forEach(m=>{options[m]=options[m]||fs[m];m+="Sync";options[m]=options[m]||fs[m]});options.maxBusyTries=options.maxBusyTries||3}function rimraf(p,options,cb){let busyTries=0;"function"===typeof options&&(cb=options,options={});assert(p,"rimraf: missing path");assert.strictEqual(typeof p,"string","rimraf: path should be a string");
assert.strictEqual(typeof cb,"function","rimraf: callback function required");assert(options,"rimraf: invalid options argument provided");assert.strictEqual(typeof options,"object","rimraf: options should be object");defaults(options);rimraf_(p,options,function CB(er){if(er){if(("EBUSY"===er.code||"ENOTEMPTY"===er.code||"EPERM"===er.code)&&busyTries<options.maxBusyTries)return busyTries++,setTimeout(()=>rimraf_(p,options,CB),100*busyTries);"ENOENT"===er.code&&(er=null)}cb(er)})}function rimraf_(p,
options,cb){assert(p);assert(options);assert("function"===typeof cb);options.lstat(p,(er$jscomp$0,st)=>{if(er$jscomp$0&&"ENOENT"===er$jscomp$0.code)return cb(null);if(er$jscomp$0&&"EPERM"===er$jscomp$0.code&&isWindows)return fixWinEPERM(p,options,er$jscomp$0,cb);if(st&&st.isDirectory())return rmdir(p,options,er$jscomp$0,cb);options.unlink(p,er=>{if(er){if("ENOENT"===er.code)return cb(null);if("EPERM"===er.code)return isWindows?fixWinEPERM(p,options,er,cb):rmdir(p,options,er,cb);if("EISDIR"===er.code)return rmdir(p,
options,er,cb)}return cb(er)})})}function fixWinEPERM(p,options,er,cb){assert(p);assert(options);assert("function"===typeof cb);options.chmod(p,438,er2=>{er2?cb("ENOENT"===er2.code?null:er):options.stat(p,(er3,stats)=>{er3?cb("ENOENT"===er3.code?null:er):stats.isDirectory()?rmdir(p,options,er,cb):options.unlink(p,cb)})})}function fixWinEPERMSync(p,options,er){let stats;assert(p);assert(options);try{options.chmodSync(p,438)}catch(er2){if("ENOENT"===er2.code)return;throw er;}try{stats=options.statSync(p)}catch(er3){if("ENOENT"===
er3.code)return;throw er;}stats.isDirectory()?rmdirSync(p,options,er):options.unlinkSync(p)}function rmdir(p,options,originalEr,cb){assert(p);assert(options);assert("function"===typeof cb);options.rmdir(p,er=>{!er||"ENOTEMPTY"!==er.code&&"EEXIST"!==er.code&&"EPERM"!==er.code?er&&"ENOTDIR"===er.code?cb(originalEr):cb(er):rmkids(p,options,cb)})}function rmkids(p,options,cb){assert(p);assert(options);assert("function"===typeof cb);options.readdir(p,(er$jscomp$0,files)=>{if(er$jscomp$0)return cb(er$jscomp$0);
let n=files.length,errState;if(0===n)return options.rmdir(p,cb);files.forEach(f=>{rimraf(path.join(p,f),options,er=>{if(!errState){if(er)return cb(errState=er);0===--n&&options.rmdir(p,cb)}})})})}function rimrafSync(p,options){let st;options=options||{};defaults(options);assert(p,"rimraf: missing path");assert.strictEqual(typeof p,"string","rimraf: path should be a string");assert(options,"rimraf: missing options");assert.strictEqual(typeof options,"object","rimraf: options should be object");try{st=
options.lstatSync(p)}catch(er){if("ENOENT"===er.code)return;"EPERM"===er.code&&isWindows&&fixWinEPERMSync(p,options,er)}try{st&&st.isDirectory()?rmdirSync(p,options,null):options.unlinkSync(p)}catch(er){if("ENOENT"!==er.code){if("EPERM"===er.code)return isWindows?fixWinEPERMSync(p,options,er):rmdirSync(p,options,er);if("EISDIR"!==er.code)throw er;rmdirSync(p,options,er)}}}function rmdirSync(p,options,originalEr){assert(p);assert(options);try{options.rmdirSync(p)}catch(er){if("ENOTDIR"===er.code)throw originalEr;
if("ENOTEMPTY"===er.code||"EEXIST"===er.code||"EPERM"===er.code)rmkidsSync(p,options);else if("ENOENT"!==er.code)throw er;}}function rmkidsSync(p,options){assert(p);assert(options);options.readdirSync(p).forEach(f=>rimrafSync(path.join(p,f),options));if(isWindows){const startTime=Date.now();do try{return options.rmdirSync(p,options)}catch{}while(500>Date.now()-startTime)}else return options.rmdirSync(p,options)}global=require("module$node_modules$process$browser");"use strict";const fs=require("module$node_modules$graceful_fs$graceful_fs"),
path=require("module$node_modules$path_browserify$index"),assert=require("module$node_modules$assert$assert"),isWindows="win32"===global.platform;module.exports=rimraf;rimraf.sync=rimrafSync}
//# sourceMappingURL=module$node_modules$fs_extra$lib$remove$rimraf.js.map
