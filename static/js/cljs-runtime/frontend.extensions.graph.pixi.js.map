{"version":3,"sources":["frontend/extensions/graph/pixi.cljs"],"mappings":"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","names":["js/frontend","js/frontend.extensions","js/frontend.extensions.graph","js/frontend.extensions.graph.pixi","js/frontend.extensions.graph.pixi.*graph-instance","frontend.extensions.graph.pixi/*graph-instance","cljs.core.atom","js/frontend.extensions.graph.pixi.*simulation","frontend.extensions.graph.pixi/*simulation","frontend.extensions.graph.pixi/Graph","frontend.extensions.graph.pixi.goog$module$goog$object.get","js/module$node_modules$graphology$dist$graphology_umd_min","js/frontend.extensions.graph.pixi.colors","frontend.extensions.graph.pixi/colors","frontend.extensions.graph.pixi/default-style","dark?","node","or__4253__auto__","temp__5718__auto__","parent","temp__5720__auto__","cljs.core._EQ_","v","js/Math.abs","cljs.core/hash","cljs.core.nth","cljs.core/mod","cljs.core/count","js/module$node_modules$pixi_graph_fork$dist$pixi_graph_cjs","frontend.extensions.graph.pixi/default-hover-style","_dark?","frontend.extensions.graph.pixi/layout!","nodes","links","nodes-count","simulation","js/module$node_modules$d3_force$src$index.forceSimulation","js/module$node_modules$d3_force$src$index.forceLink","d","js/module$node_modules$d3_force$src$index.forceManyBody","js/module$node_modules$d3_force$src$index.forceCollide","js/module$node_modules$d3_force$src$index.forceX","js/module$node_modules$d3_force$src$index.forceY","js/module$node_modules$d3_force$src$index.forceCenter","cljs.core/reset!","frontend.extensions.graph.pixi/clear-nodes!","graph","frontend.extensions.graph.pixi/destroy-instance!","instance","cljs.core/deref","frontend.extensions.graph.pixi/update-position!","obj","frontend.extensions.graph.pixi/tick!","pixi","_graph","nodes-js","links-js","nodes-objects","edges-objects","seq__107057","cljs.core/seq","chunk__107058","count__107059","i__107060","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","node-object","seq__107086","chunk__107087","count__107088","i__107089","edge","edge-object","frontend.extensions.graph.pixi/set-up-listeners!","pixi-graph","*dragging?","on-drag-end","_node","event","s","node-key","js/setTimeout","frontend.extensions.graph.pixi/render!","state","e107103","map__107104","cljs.core/--destructure-map","cljs.core.get","style","hover-style","height","register-handlers-fn","nodes-set","cljs.core/set","cljs.core.map","cljs.core.filter","link","and__4251__auto__","G__107114","G__107115","cljs.core.distinct","cljs.core.remove","cljs.core/nil?","p__107116","map__107117","source","target","cljs-bean.core/->js","seq__107122","chunk__107123","count__107124","i__107125","e107137","e107140","js/Error","e","js/console.error","seq__107141","chunk__107142","count__107143","i__107144","e107148","e107149","container-ref"],"sourcesContent":["(ns frontend.extensions.graph.pixi\n  (:require [cljs-bean.core :as bean]\n            [\"d3-force\"\n             :refer [forceCenter forceCollide forceLink forceManyBody forceSimulation forceX forceY]\n             :as    force]\n            [goog.object :as gobj]\n            [\"graphology\" :as graphology]\n            [\"pixi-graph-fork\" :as Pixi-Graph]))\n\n(defonce *graph-instance (atom nil))\n(defonce *simulation (atom nil))\n\n(def Graph (gobj/get graphology \"Graph\"))\n\n(defonce colors\n  [\"#1f77b4\"\n   \"#ff7f0e\"\n   \"#2ca02c\"\n   \"#d62728\"\n   \"#9467bd\"\n   \"#8c564b\"\n   \"#e377c2\"\n   \"#7f7f7f\"\n   \"#bcbd22\"\n   \"#17becf\"])\n\n(defn default-style\n  [dark?]\n  {:node {:size   (fn [node]\n                    (or (.-size node) 8))\n          :border {:width 0}\n          :color  (fn [node]\n                    (if-let [parent (gobj/get node \"parent\")]\n                      (when-let [parent (if (= parent \"ls-selected-nodes\")\n                                          parent\n                                          (.-id node))]\n                        (let [v (js/Math.abs (hash parent))]\n                          (nth colors (mod v (count colors)))))\n                      (.-color node)))\n          :label  {:content  (fn [node] (.-id node))\n                   :type     (.-TEXT (.-TextType Pixi-Graph))\n                   :fontSize 12\n                   :color (if dark? \"rgba(255, 255, 255, 0.8)\" \"rgba(0, 0, 0, 0.8)\")\n                   :padding  4}}\n   :edge {:width 1\n          :color (if dark? \"#094b5a\" \"#cccccc\")}})\n\n(defn default-hover-style\n  [_dark?]\n  {:node {:color  \"#6366F1\"\n          :label  {:backgroundColor \"rgba(238, 238, 238, 1)\"\n                   :color           \"#333333\"}}\n   :edge {:color \"#A5B4FC\"}})\n\n(defn layout!\n  [nodes links]\n  (let [nodes-count (count nodes)\n        simulation (forceSimulation nodes)]\n    (-> simulation\n        (.force \"link\"\n                (-> (forceLink)\n                    (.id (fn [d] (.-id d)))\n                    (.distance 180)\n                    (.links links)))\n        (.force \"charge\"\n                (-> (forceManyBody)\n                    (.distanceMax (if (> nodes-count 500) 4000 600))\n                    (.theta 0.5)\n                    (.strength -600)))\n        (.force \"collision\"\n                (-> (forceCollide)\n                    (.radius (+ 8 18))\n                    (.iterations 2)))\n        (.force \"x\" (-> (forceX 0) (.strength 0.02)))\n        (.force \"y\" (-> (forceY 0) (.strength 0.02)))\n        (.force \"center\" (forceCenter))\n        (.velocityDecay 0.8))\n    (reset! *simulation simulation)\n    simulation))\n\n(defn- clear-nodes!\n  [graph]\n  (.forEachNode graph\n                (fn [node]\n                  (.dropNode graph node))))\n\n;; (defn- clear-edges!\n;;   [graph]\n;;   (.forEachEdge graph\n;;                 (fn [edge]\n;;                   (.dropEdge graph edge))))\n\n(defn destroy-instance!\n  []\n  (when-let [instance (:pixi @*graph-instance)]\n    (.destroy instance)\n    (reset! *graph-instance nil)\n    (reset! *simulation nil)))\n\n(defn- update-position!\n  [node obj]\n  (.updatePosition node #js {:x (.-x obj)\n                             :y (.-y obj)}))\n\n(defn- tick!\n  [pixi _graph nodes-js links-js]\n  (fn []\n    (let [nodes-objects (.getNodesObjects pixi)\n          edges-objects (.getEdgesObjects pixi)]\n      (doseq [node nodes-js]\n        (when-let [node-object (.get nodes-objects (.-id node))]\n          (update-position! node-object node)))\n      (doseq [edge links-js]\n        (when-let [edge-object (.get edges-objects (str (.-index edge)))]\n          (.updatePosition edge-object\n                           #js {:x (.-x (.-source edge))\n                                :y (.-y (.-source edge))}\n                           #js {:x (.-x (.-target edge))\n                                :y (.-y (.-target edge))}))))))\n\n(defn- set-up-listeners!\n  [pixi-graph]\n  (when pixi-graph\n    ;; drag start\n    (let [*dragging? (atom false)\n          nodes (.getNodesObjects pixi-graph)\n          on-drag-end (fn [_node event]\n                        (.stopPropagation event)\n                        (when-let [s @*simulation]\n                          (when-not (.-active event)\n                            (.alphaTarget s 0)))\n                        (reset! *dragging? false))]\n      (.on pixi-graph \"nodeMousedown\"\n           (fn [event node-key]\n             #_:clj-kondo/ignore\n             (when-let [node (.get nodes node-key)]\n               (when-let [s @*simulation]\n                 (when-not (.-active event)\n                   (-> (.alphaTarget s 0.3)\n                       (.restart))\n                   (js/setTimeout #(.alphaTarget s 0) 2000))\n                 (reset! *dragging? true)))))\n\n      (.on pixi-graph \"nodeMouseup\"\n           (fn [event node-key]\n             (when-let [node (.get nodes node-key)]\n               (on-drag-end node event))))\n\n      (.on pixi-graph \"nodeMousemove\"\n           (fn [event node-key]\n             (when-let [node (.get nodes node-key)]\n               (when @*dragging?\n                 (update-position! node event))))))))\n\n(defn render!\n  [state]\n  (try\n    (when @*graph-instance\n      (clear-nodes! (:graph @*graph-instance))\n      (destroy-instance!))\n    (let [{:keys [nodes links style hover-style height register-handlers-fn dark?]} (first (:rum/args state))\n          style                                                                     (or style (default-style dark?))\n          hover-style                                                               (or hover-style (default-hover-style dark?))\n          graph                                                                     (Graph.)\n          nodes-set                                                                 (set (map :id nodes))\n          links                                                                     (->>\n                                                                                     (filter\n                                                                                      (fn [link]\n                                                                                        (and (nodes-set (:source link)) (nodes-set (:target link))))\n                                                                                      links)\n                                                                                     (distinct)) ;; #3331 (@zhaohui0923) seems caused by duplicated links. Why distinct doesn't work?\n          nodes                                                                     (remove nil? nodes)\n          links                                                                     (remove (fn [{:keys [source target]}] (or (nil? source) (nil? target))) links)\n          nodes-js                                                                  (bean/->js nodes)\n          links-js                                                                  (bean/->js links)\n          simulation                                                                (layout! nodes-js links-js)]\n      (doseq [node nodes-js]\n        (try (.addNode graph (.-id node) node)\n          (catch js/Error e\n            (js/console.error e))))\n      (doseq [link links-js]\n        (let [source (.-id (.-source link))\n              target (.-id (.-target link))]\n          (try (.addEdge graph source target link)\n            (catch js/Error e\n              (js/console.error e)))))\n      (when-let [container-ref (:ref state)]\n        (let [pixi-graph (new (.-PixiGraph Pixi-Graph)\n                           (bean/->js\n                            {:container  @container-ref\n                             :graph      graph\n                             :style      style\n                             :hoverStyle hover-style\n                             :height     height}))]\n          (reset! *graph-instance\n                  {:graph graph\n                   :pixi  pixi-graph})\n          (when register-handlers-fn\n            (register-handlers-fn pixi-graph))\n          (set-up-listeners! pixi-graph)\n          (.on simulation \"tick\" (tick! pixi-graph graph nodes-js links-js)))))\n    (catch js/Error e\n      (js/console.error e)))\n  state)\n"]}