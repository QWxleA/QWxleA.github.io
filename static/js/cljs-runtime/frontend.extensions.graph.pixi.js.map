{"version":3,"sources":["frontend/extensions/graph/pixi.cljs"],"mappings":";;;;;;;AASA,GAAA,QAAAA,qCAAAC,gDAAAC,sDAAAC,2DAAAC;AAAA;AAAA,AAAA,AAASC,sDAAgB,6CAAA,7CAACC;;AAC1B,GAAA,QAAAN,qCAAAC,gDAAAC,sDAAAC,2DAAAI;AAAA;AAAA,AAAA,AAASC,kDAAY,6CAAA,7CAACF;;AAEtB,AAAKG,uCAAM,kHAAA,lHAACC,2DAASC;AAErB,GAAA,QAAAX,qCAAAC,gDAAAC,sDAAAC,2DAAAS;AAAA;AAAA,AAAA,wCAAA,oFAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,tNAASC;;AAYT,+CAAA,/CAAMC,sGACHC,YAAMC;AADT,AAEE,IAAMC,cAAY,AAACC,gBAAMF;AAAzB,AAAA,kDAAA,oDAAA,2CAAA,qDACgB,WAAKG;AAAL,AACE,IAAAC,mBAAI,AAAQD;AAAZ,AAAA,oBAAAC;AAAAA;;AAAA;;GAFlB,yDAAA,2CAAA,uDAAA,YAAA,uDAIgB,WAAKD;AAAL,AACE,IAAAE,qBAAgB,gEAAA,hEAACX,2DAASS;AAA1B,AAAA,oBAAAE;AAAA,aAAAA,TAASC;AAAT,AACE,IAAAC,qBAAkB,EAAI,oDAAA,pDAACC,6CAAEF,6BACLA,OACA,AAAMH;AAF1B,AAAA,oBAAAI;AAAA,AAAA,iBAAAA,bAAWD;AAAX,AAGE,IAAMG,IAAE,AAACC,SAAY,AAACC,eAAKL;AAA3B,AACE,OAACM,4CAAIf,sCAAO,AAACgB,cAAIJ,EAAE,AAACP,gBAAML;;AAJ9B;;;AAKA,OAASM;;GAX7B,uDAAA,2CAAA,yDAY2B,WAAKA;AAAL,AAAW,OAAMA;GAZ5C,2HAAA,gGAAA,uIAAA,2DAAA,oBAAA,oDAAA,2CAAA,yFAAA,pjBAa2B,AAAQ,AAAYW,kIACpB,yBAAA,KAAA,5BAAI,eAAA,dAAGb,wFACV,+BAAA,2BAAA,xCAAIF,mSAEb,yBAAA,IAAA,3BAAI,eAAA,dAAGE,sFACP,+BAAA,UAAA,vBAAIF;;AAErB,qDAAA,rDAAMgB,kHACHC;AADH,AAAA,kDAAA,oDAAA,2CAAA,uDAAA,UAAA,uDAAA,2CAAA,2EAAA,yBAAA,uDAAA,0BAAA,oDAAA,2CAAA,uDAAA;;AAOA,8CAAA,9CAAMC,oGACHjB,MAAMkB;AADT,AAEE,IAAMjB,cAAY,AAACC,gBAAMF;IACnBmB,aAAW,AAACC,uDAAgBpB;6BADlC,zBAIMqB;6BAJN,zBAKMC;4BALN,xBAMMC;iCANN,7BAYMC;iCAZN,7BAaMC;gCAbN,5BAcMC;6BAdN,zBAgBMC;qBAhBN,jBAiBMC;2BAjBN,vBAmBMC;AAnBN,AAqBMV,AACA,iBAAA,OACY,AAACW,AACD,sDAAK,WAAKC,jEACV,AAGA,xBACZ,AAOA,AAIA,AACA,AAEA,AAGA;AAtBiB,AAAQ,OAAMA;aACR,EAAI,eAAA,dAAG9B,qBAAgBsB,sBACpB,EAAI,eAAA,dAAGtB,sBAAiBqB,uBACpBD,gCACVH,cACpB,SACY,AAACc,AACD,mEAAc,EAAI,eAAA,dAAG/B,qBAAgByB,0BACrB,EAAI,eAAA,dAAGzB,sBAAiBwB,2BACpBD,zKACpB,6MAAA,7MACA,2NAAWG,+BACvB,YACY,AAACM,AACD,6DAAS,CAAA,MAAA,pEACT,sFAAA,YACZ,IAAgB,8CAAA,9CAACC,AAAU,4DAAWN,uBACtC,IAAgB,8CAAA,9CAACO,AAAU,4DAAWP,uBAEtC,SACY,AAACQ,AACD,8DAAA,oBACIP;;AACpB,AAACQ,sBAAO7C,gDAAY2B;;AACpBA;;AAEJ,mDAAA,nDAAOmB,8GACJC;AADH,AAEE,OAAcA,kBACA,WAAKpC;AAAL,AACE,OAAWoC,eAAMpC;;;AAQnC,wDAAA,xDAAMqC;AAAN,AAEE,IAAAjC,qBAAoB,AAAA,kFAAA,AAAAmC,gBAAQrD;AAA5B,AAAA,oBAAAkB;AAAA,AAAA,eAAAA,XAAWkC;AAAX,AACE,AAAUA;;AACV,0EAAA,1EAACJ,sBAAOhD;;AACR,6EAAA,tEAACgD,sBAAO7C;;AAHV;;;AAKF,uDAAA,vDAAOmD,sHACJxC,KAAKyC;AADR,AAEE,2BAAA,pBAAiBzC,2BAAa,AAAKyC,YACL,AAAKA;;AAErC,4CAAA,5CAAOC,gGACJC,KAAKC,OAAOC,SAASC;AADxB,AAEE;AAAA,AACE,IAAMC,gBAAc,AAAkBJ;IAChCK,gBAAc,AAAkBL;AADtC,AAEE,IAAAM,mBAAA,AAAAC,cAAaL;IAAbM,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,iBAAA,AAAAD,wDAAAE,rEAAQrD;AAAR,AAAA,AACE,IAAAI,2BAAuB,AAAM2C,kBAAc,AAAM/C;AAAjD,AAAA,oBAAAI;AAAA,AAAA,wBAAAA,pBAAWwD;AAAX,AACE,AAACpB,qDAAiBoB,kBAAY5D;;AADhC;;AADF;AAAA,eAAAiD;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAjD,2BAAA,AAAA8C,cAAAD;AAAA,AAAA,GAAA7C;AAAA,AAAA,IAAA6C,uBAAA7C;AAAA,AAAA,GAAA,AAAAkD,6BAAAL;AAAA,IAAAM,wBAAA,AAAAC,sBAAAP;AAAA,AAAA,eAAA,AAAAQ,qBAAAR;eAAAM;eAAA,AAAAxD,gBAAAwD;eAAA;;;;;;;AAAA,iBAAA,AAAAG,gBAAAT,7BAAQjD;AAAR,AAAA,AACE,IAAAI,+BAAuB,AAAM2C,kBAAc,AAAM/C;AAAjD,AAAA,oBAAAI;AAAA,AAAA,wBAAAA,pBAAWwD;AAAX,AACE,AAACpB,qDAAiBoB,kBAAY5D;;AADhC;;AADF;AAAA,eAAA,AAAA2D,eAAAV;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAGA,IAAAY,aAAA,AAAAX,cAAaJ;IAAbgB,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,WAAA,AAAAD,kDAAAE,zDAAQC;AAAR,AAAA,AACE,IAAA7D,2BAAuB,AAAM4C,kBAAc,4CAAK,AAASiB;AAAzD,AAAA,oBAAA7D;AAAA,AAAA,wBAAAA,pBAAW8D;AAAX,AACE,iCAAA,2CAAA,5EAAiBA,wCACQ,AAAK,AAAUD,oBACf,AAAK,AAAUA,uBACf,AAAK,AAAUA,oBACf,AAAK,AAAUA;;AAL1C;;AADF;AAAA,eAAAJ;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAA5D,qBAAA,AAAA8C,cAAAW;AAAA,AAAA,GAAAzD;AAAA,AAAA,IAAAyD,iBAAAzD;AAAA,AAAA,GAAA,AAAAkD,6BAAAO;AAAA,IAAAN,kBAAA,AAAAC,sBAAAK;AAAA,AAAA,eAAA,AAAAJ,qBAAAI;eAAAN;eAAA,AAAAxD,gBAAAwD;eAAA;;;;;;;AAAA,WAAA,AAAAG,gBAAAG,vBAAQI;AAAR,AAAA,AACE,IAAA7D,+BAAuB,AAAM4C,kBAAc,4CAAK,AAASiB;AAAzD,AAAA,oBAAA7D;AAAA,AAAA,wBAAAA,pBAAW8D;AAAX,AACE,iCAAA,2CAAA,5EAAiBA,wCACQ,AAAK,AAAUD,oBACf,AAAK,AAAUA,uBACf,AAAK,AAAUA,oBACf,AAAK,AAAUA;;AAL1C;;AADF;AAAA,eAAA,AAAAN,eAAAE;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AAQN,wDAAA,xDAAOM,wHACJC;AADH,AAEE,oBAAMA;AAAN,AAEE,IAAMC,wBAAW,6CAAA,7CAAClF;IACZU,QAAM,AAAkBuE;IACxBE,cAAY,WAAKC,MAAMC;AAAX,AACE,AAAkBA;;AAClB,IAAApE,2BAAA,AAAAmC,gBAAclD;AAAd,AAAA,oBAAAe;AAAA,AAAA,cAAAA,VAAWqE;AAAX,AACE,oBAAU,AAAUD;AAApB;AAAA,AACE,oBAAA,pBAAcC;;;AAFlB;;AAGA,mDAAA,5CAACvC,sBAAOmC;;AAP5B,AAQE,cAAA,dAAKD,8BACA,WAAKI,MAAME;AAAX,AAEE,IAAAtE,qBAAgB,AAAMP,UAAM6E;AAA5B,AAAA,oBAAAtE;AAAA,AAAA,WAAAA,PAAWJ;AAAX,AACE,IAAAI,yBAAA,AAAAmC,gBAAclD;AAAd,AAAA,oBAAAe;AAAA,AAAA,QAAAA,JAAWqE;AAAX,AACE,oBAAU,AAAUD;AAApB;AAAA,AACM,cAAA,dAAcC,AACd;;AACJ,WAAA,XAACE;AAAD,AAAgB,qBAAA,dAAcF;GAA9B;;;AACF,mDAAA,5CAACvC,sBAAOmC;;AALV;;;AADF;;;;AAQP,cAAA,dAAKD,4BACA,WAAKI,MAAME;AAAX,AACE,IAAAtE,qBAAgB,AAAMP,UAAM6E;AAA5B,AAAA,oBAAAtE;AAAA,AAAA,WAAAA,PAAWJ;AAAX,AACE,OAACsE,YAAYtE,KAAKwE;;AADpB;;;;AAGP,qBAAA,dAAKJ,8BACA,WAAKI,MAAME;AAAX,AACE,IAAAtE,qBAAgB,AAAMP,UAAM6E;AAA5B,AAAA,oBAAAtE;AAAA,AAAA,WAAAA,PAAWJ;AAAX,AACE,oBAAA,AAAAuC,gBAAO8B;AAAP,AACE,OAAC7B,qDAAiBxC,KAAKwE;;AADzB;;;AADF;;;;AA5BX;;;AAgCF,8CAAA,9CAAMI,oGACHC;AADH,AAEE,IAAA,AACE,oBAAA,AAAAtC,gBAAOrD;AAAP,AACE,AAACiD,iDAAa,AAAA,qFAAA,AAAAI,gBAASrD;;AACvB,AAACmD;;AAFH;;AAGA,IAAA0C,mBAAgF,AAACrB,gBAAM,AAAA,wFAAWmB;IAAlGE,uBAAA,AAAAC,4BAAAD;kBAAA,AAAAE,4CAAAF,qBAAA,/EAAclF;kBAAd,AAAAoF,4CAAAF,qBAAA,/EAAoBhE;kBAApB,AAAAkE,4CAAAF,qBAAA,/EAA0BG;wBAA1B,AAAAD,4CAAAF,qBAAA,rFAAgCI;mBAAhC,AAAAF,4CAAAF,qBAAA,hFAA4CK;iCAA5C,AAAAH,4CAAAF,qBAAA,9FAAmDM;wBAAnD,AAAAJ,4CAAAF,qBAAA,rFAAwEnF;IAClEsF,kBAA0E,iBAAAjF,mBAAIiF;AAAJ,AAAA,oBAAAjF;AAAAA;;AAAU,OAACN,6CAAcC,kBAAMC;;;IACzGsF,wBAA0E,iBAAAlF,mBAAIkF;AAAJ,AAAA,oBAAAlF;AAAAA;;AAAgB,OAACW,mDAAoBhB;;;IAC/GwC,cAA0E,KAAA9C;IAC1EgG,kBAA0E,AAACC,cAAI,4CAAA,5CAACC,8FAAQ3F;IACxFkB,mEAC2E,AAAC0E,+CACA,WAAKC,3GAGN,AAACI;AAHA,AACE,IAAAH,oBAAK,iBAAAC,WAAW,AAAA,uFAASF;AAApB,AAAA,sGAAAE,sCAAAA,pIAACN,gDAAAA,0DAAAA;;AAAN,AAAA,oBAAAK;AAAgC,IAAAE,WAAW,AAAA,sFAASH;AAApB,AAAA,sGAAAG,sCAAAA,pIAACP,gDAAAA,0DAAAA;;AAAjCK;;GACF5E;IAE5ElB,kBAA0E,AAACkG,+CAAOC,qBAAKnG;IACvFkB,kBAA0E,AAACgF,+CAAO,WAAAE;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAlB,4BAAAkB;aAAA,AAAAjB,4CAAAiB,eAAA,pEAAaC;aAAb,AAAAlB,4CAAAiB,eAAA,pEAAoBE;AAApB,AAA8B,SAAI,WAAA,VAAMD,qBAAQ,WAAA,VAAMC;GAAUrF;IAClJ8B,iBAA0E,AAACwD,uBAAUxG;IACrFiD,iBAA0E,AAACuD,uBAAUtF;IACrFC,mBAA0E,AAACF,4CAAQ+B,eAASC;AAflG,AAgBE,IAAAwD,mBAAA,AAAApD,cAAaL;IAAb0D,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,iBAAA,AAAAD,wDAAAE,rEAAQzG;AAAR,AAAA,AACE,IAAA,AAAK,AAAUoC,oBAAM,AAAMpC,cAAMA;gBAAjC,GAAA,CAAA0G,kBACSE;AADT,cAAAF,VACkBG;AADlB,AAEI,AAACC,cAAiBD;;AAFtB,AAAA,MAAAH;;;;AADF;AAAA,eAAAJ;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAArG,2BAAA,AAAA8C,cAAAoD;AAAA,AAAA,GAAAlG;AAAA,AAAA,IAAAkG,uBAAAlG;AAAA,AAAA,GAAA,AAAAkD,6BAAAgD;AAAA,IAAA/C,wBAAA,AAAAC,sBAAA8C;AAAA,AAAA,eAAA,AAAA7C,qBAAA6C;eAAA/C;eAAA,AAAAxD,gBAAAwD;eAAA;;;;;;;AAAA,iBAAA,AAAAG,gBAAA4C,7BAAQtG;AAAR,AAAA,AACE,IAAA,AAAK,AAAUoC,oBAAM,AAAMpC,cAAMA;gBAAjC,GAAA,CAAA2G,kBACSC;AADT,cAAAD,VACkBE;AADlB,AAEI,AAACC,cAAiBD;;AAFtB,AAAA,MAAAF;;;;AADF;AAAA,eAAA,AAAAhD,eAAA2C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAIA,IAAAS,mBAAA,AAAA7D,cAAaJ;IAAbkE,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,iBAAA,AAAAD,wDAAAE,rEAAQxB;AAAR,AAAA,AACE,IAAMS,eAAO,AAAM,AAAUT;IACvBU,eAAO,AAAM,AAAUV;AAD7B,AAEE,IAAA,AAAK,AAAUtD,oBAAM+D,aAAOC,aAAOV;gBAAnC,GAAA,CAAAyB,kBACSP;AADT,cAAAO,VACkBN;AADlB,AAEI,AAACC,cAAiBD;;AAFtB,AAAA,MAAAM;;;;AAHJ;AAAA,eAAAJ;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA9G,2BAAA,AAAA8C,cAAA6D;AAAA,AAAA,GAAA3G;AAAA,AAAA,IAAA2G,uBAAA3G;AAAA,AAAA,GAAA,AAAAkD,6BAAAyD;AAAA,IAAAxD,wBAAA,AAAAC,sBAAAuD;AAAA,AAAA,eAAA,AAAAtD,qBAAAsD;eAAAxD;eAAA,AAAAxD,gBAAAwD;eAAA;;;;;;;AAAA,iBAAA,AAAAG,gBAAAqD,7BAAQrB;AAAR,AAAA,AACE,IAAMS,eAAO,AAAM,AAAUT;IACvBU,eAAO,AAAM,AAAUV;AAD7B,AAEE,IAAA,AAAK,AAAUtD,oBAAM+D,aAAOC,aAAOV;gBAAnC,GAAA,CAAA0B,kBACSR;AADT,cAAAQ,VACkBP;AADlB,AAEI,AAACC,cAAiBD;;AAFtB,AAAA,MAAAO;;;;AAHJ;AAAA,eAAA,AAAAzD,eAAAoD;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAMA,IAAA3G,2BAAyB,AAAA,iFAAMyE;AAA/B,AAAA,oBAAAzE;AAAA,AAAA,0BAAAA,tBAAWiH;AAAX,AACE,IAAMjD,mBAAW,KAAK,AAAazD,kEAChB,uBAAA,2CAAA,gEAAA,AAAA4B,qCAAA,mEAAA,uEAAA,uFAAA,xYAAC8D,kJACcgB,4EACDjF,mEACA8C,iFACAC,+EACAC;AANjC,AAOE,0EAAA,2CAAA,mEAAA,xLAAClD,sBAAOhD,sJACQkD,gEACAgC;;AAChB,oBAAMiB;AAAN,AACE,CAACA,2DAAAA,6EAAAA,pBAAqBjB,yDAAAA;;AADxB;;AAEA,AAACD,sDAAkBC;;AACnB,oBAAA,pBAAKpD,2BAAkB,AAAC0B,0CAAM0B,iBAAWhC,YAAMS,eAASC;;AAd5D;gBA9BJ,GAAA,CAAAgC,kBA6CS8B;AA7CT,cAAA9B,VA6CkB+B;AA7ClB,AA8CI,AAACC,cAAiBD;;AA9CtB,AAAA,MAAA/B;;;;AA+CAD","names":["js/frontend","js/frontend.extensions","js/frontend.extensions.graph","js/frontend.extensions.graph.pixi","js/frontend.extensions.graph.pixi.*graph-instance","frontend.extensions.graph.pixi/*graph-instance","cljs.core.atom","js/frontend.extensions.graph.pixi.*simulation","frontend.extensions.graph.pixi/*simulation","frontend.extensions.graph.pixi/Graph","frontend.extensions.graph.pixi.goog$module$goog$object.get","js/module$node_modules$graphology$dist$graphology_umd_min","js/frontend.extensions.graph.pixi.colors","frontend.extensions.graph.pixi/colors","frontend.extensions.graph.pixi/default-style","dark?","nodes","nodes-count","cljs.core/count","node","or__5043__auto__","temp__5718__auto__","parent","temp__5720__auto__","cljs.core._EQ_","v","js/Math.abs","cljs.core/hash","cljs.core.nth","cljs.core/mod","js/module$node_modules$pixi_graph_fork$dist$pixi_graph_cjs","frontend.extensions.graph.pixi/default-hover-style","_dark?","frontend.extensions.graph.pixi/layout!","links","simulation","js/module$node_modules$d3_force$src$index.forceSimulation","qwxlea_forceLink_large","qwxlea_forceLink_small","qwxlea_forceLink_tiny","qwxlea_forceManyBody_large","qwxlea_forceManyBody_small","qwxlea_forceManyBody_tiny","qwxlea_charge_strength","qwxlea_forceXY","qwxlea_velocityDecay","js/module$node_modules$d3_force$src$index.forceLink","d","js/module$node_modules$d3_force$src$index.forceManyBody","js/module$node_modules$d3_force$src$index.forceCollide","js/module$node_modules$d3_force$src$index.forceX","js/module$node_modules$d3_force$src$index.forceY","js/module$node_modules$d3_force$src$index.forceCenter","cljs.core/reset!","frontend.extensions.graph.pixi/clear-nodes!","graph","frontend.extensions.graph.pixi/destroy-instance!","instance","cljs.core/deref","frontend.extensions.graph.pixi/update-position!","obj","frontend.extensions.graph.pixi/tick!","pixi","_graph","nodes-js","links-js","nodes-objects","edges-objects","seq__59251","cljs.core/seq","chunk__59252","count__59253","i__59254","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","node-object","seq__59255","chunk__59256","count__59257","i__59258","edge","edge-object","frontend.extensions.graph.pixi/set-up-listeners!","pixi-graph","*dragging?","on-drag-end","_node","event","s","node-key","js/setTimeout","frontend.extensions.graph.pixi/render!","state","e59259","map__59260","cljs.core/--destructure-map","cljs.core.get","style","hover-style","height","register-handlers-fn","nodes-set","cljs.core/set","cljs.core.map","cljs.core.filter","link","and__5041__auto__","G__59261","G__59262","cljs.core.distinct","cljs.core.remove","cljs.core/nil?","p__59263","map__59264","source","target","cljs-bean.core/->js","seq__59265","chunk__59266","count__59267","i__59268","e59271","e59272","js/Error","e","js/console.error","seq__59273","chunk__59274","count__59275","i__59276","e59279","e59280","container-ref"],"sourcesContent":["(ns frontend.extensions.graph.pixi\n  (:require [cljs-bean.core :as bean]\n            [\"d3-force\"\n             :refer [forceCenter forceCollide forceLink forceManyBody forceSimulation forceX forceY]\n             :as    force]\n            [goog.object :as gobj]\n            [\"graphology\" :as graphology]\n            [\"pixi-graph-fork\" :as Pixi-Graph]))\n\n(defonce *graph-instance (atom nil))\n(defonce *simulation (atom nil))\n\n(def Graph (gobj/get graphology \"Graph\"))\n\n(defonce colors\n  [\"#1f77b4\"\n   \"#ff7f0e\"\n   \"#2ca02c\"\n   \"#d62728\"\n   \"#9467bd\"\n   \"#8c564b\"\n   \"#e377c2\"\n   \"#7f7f7f\"\n   \"#bcbd22\"\n   \"#17becf\"])\n\n(defn default-style\n  [dark? nodes]\n  (let [nodes-count (count nodes)]\n  {:node {:size   (fn [node]\n                    (or (.-size node) 8))\n          :border {:width 0}\n          :color  (fn [node]\n                    (if-let [parent (gobj/get node \"parent\")]\n                      (when-let [parent (if (= parent \"ls-selected-nodes\")\n                                          parent\n                                          (.-id node))]\n                        (let [v (js/Math.abs (hash parent))]\n                          (nth colors (mod v (count colors)))))\n                      (.-color node)))\n          :label  {:content  (fn [node] (.-id node))\n                   :type     (.-TEXT (.-TextType Pixi-Graph))\n                   :fontSize (if (< nodes-count 100) 12 24)\n                   :color (if dark? \"rgba(255, 255, 255, 0.8)\" \"rgba(0, 0, 0, 0.8)\")\n                   :padding  4}}\n   :edge {:width (if (< nodes-count 100) 1 2)\n          :color (if dark? \"#094b5a\" \"#cccccc\")}}))\n\n(defn default-hover-style\n  [_dark?]\n  {:node {:color  \"#6366F1\"\n          :label  {:backgroundColor \"rgba(238, 238, 238, 1)\"\n                   :color           \"#333333\"}}\n   :edge {:color \"#A5B4FC\"}})\n\n(defn layout!\n  [nodes links]\n  (let [nodes-count (count nodes)     ;; no of pages\n        simulation (forceSimulation nodes) ;; https://www.d3indepth.com/force-layout/\n\n        ;forceLink pushes linked elements to be a fixed distance apart\n        qwxlea_forceLink_large 300 ;; Default:  180 \n        qwxlea_forceLink_small 100  ;;                 \n        qwxlea_forceLink_tiny 50  ;;                 \n\n        ; forceManyBody causes all elements to attract or repel one another. The strength of \n        ; the attraction or repulsion can be set using .strength () where a positive value \n        ; will cause elements to attract one another while a negative value causes elements \n        ; to repel each other. The default value is -30.\n        qwxlea_forceManyBody_large 4000  ;; Default: 4000 \n        qwxlea_forceManyBody_small  400  ;; Default:  600 - larger better with long filenames\n        qwxlea_forceManyBody_tiny    10  ;; \n\n        qwxlea_charge_strength -600   ;; Default: -600 - lower = further apart\n        qwxlea_forceXY 0.1             ;; Default: 0.02 - A value outside the range [0,1] is not recommended\n                                       ;; higher turns graph in a ball\n        qwxlea_velocityDecay 0.8       ;; Default: 0.8\n        ]\n    (-> simulation\n        (.force \"link\"\n                (-> (forceLink)\n                    (.id (fn [d] (.-id d)))\n                    (.distance (if (< nodes-count 50) qwxlea_forceLink_tiny\n                                  (if (< nodes-count 100) qwxlea_forceLink_small\n                                      qwxlea_forceLink_large)))\n                    (.links links)))\n        (.force \"charge\"\n                (-> (forceManyBody)\n                    (.distanceMax (if (< nodes-count 50) qwxlea_forceManyBody_tiny\n                                    (if (< nodes-count 500) qwxlea_forceManyBody_small \n                                        qwxlea_forceManyBody_large)))\n                    (.theta 0.5)\n                    (.strength qwxlea_charge_strength)))\n        (.force \"collision\"\n                (-> (forceCollide)\n                    (.radius (+ 8 18))\n                    (.iterations 2)))\n        (.force \"x\" (-> (forceX 0) (.strength qwxlea_forceXY))) \n        (.force \"y\" (-> (forceY 0) (.strength qwxlea_forceXY)))\n        ;; (.force \"center\" (forceCenter))\n        (.force \"center\"\n                (-> (forceCenter)\n                    (.strength 0.1))) \n        (.velocityDecay qwxlea_velocityDecay)) \n    (reset! *simulation simulation)\n    simulation))\n\n(defn- clear-nodes!\n  [graph]\n  (.forEachNode graph\n                (fn [node]\n                  (.dropNode graph node))))\n\n;; (defn- clear-edges!\n;;   [graph]\n;;   (.forEachEdge graph\n;;                 (fn [edge]\n;;                   (.dropEdge graph edge))))\n\n(defn destroy-instance!\n  []\n  (when-let [instance (:pixi @*graph-instance)]\n    (.destroy instance)\n    (reset! *graph-instance nil)\n    (reset! *simulation nil)))\n\n(defn- update-position!\n  [node obj]\n  (.updatePosition node #js {:x (.-x obj)\n                             :y (.-y obj)}))\n\n(defn- tick!\n  [pixi _graph nodes-js links-js]\n  (fn []\n    (let [nodes-objects (.getNodesObjects pixi)\n          edges-objects (.getEdgesObjects pixi)]\n      (doseq [node nodes-js]\n        (when-let [node-object (.get nodes-objects (.-id node))]\n          (update-position! node-object node)))\n      (doseq [edge links-js]\n        (when-let [edge-object (.get edges-objects (str (.-index edge)))]\n          (.updatePosition edge-object\n                           #js {:x (.-x (.-source edge))\n                                :y (.-y (.-source edge))}\n                           #js {:x (.-x (.-target edge))\n                                :y (.-y (.-target edge))}))))))\n\n(defn- set-up-listeners!\n  [pixi-graph]\n  (when pixi-graph\n    ;; drag start\n    (let [*dragging? (atom false)\n          nodes (.getNodesObjects pixi-graph)\n          on-drag-end (fn [_node event]\n                        (.stopPropagation event)\n                        (when-let [s @*simulation]\n                          (when-not (.-active event)\n                            (.alphaTarget s 0)))\n                        (reset! *dragging? false))]\n      (.on pixi-graph \"nodeMousedown\"\n           (fn [event node-key]\n             #_:clj-kondo/ignore\n             (when-let [node (.get nodes node-key)]\n               (when-let [s @*simulation]\n                 (when-not (.-active event)\n                   (-> (.alphaTarget s 0.3)\n                       (.restart))\n                   (js/setTimeout #(.alphaTarget s 0) 2000))\n                 (reset! *dragging? true)))))\n\n      (.on pixi-graph \"nodeMouseup\"\n           (fn [event node-key]\n             (when-let [node (.get nodes node-key)]\n               (on-drag-end node event))))\n\n      (.on pixi-graph \"nodeMousemove\"\n           (fn [event node-key]\n             (when-let [node (.get nodes node-key)]\n               (when @*dragging?\n                 (update-position! node event))))))))\n\n(defn render!\n  [state]\n  (try\n    (when @*graph-instance\n      (clear-nodes! (:graph @*graph-instance))\n      (destroy-instance!))\n    (let [{:keys [nodes links style hover-style height register-handlers-fn dark?]} (first (:rum/args state))\n          style                                                                     (or style (default-style dark? nodes))\n          hover-style                                                               (or hover-style (default-hover-style dark?))\n          graph                                                                     (Graph.)\n          nodes-set                                                                 (set (map :id nodes))\n          links                                                                     (->>\n                                                                                     (filter\n                                                                                      (fn [link]\n                                                                                        (and (nodes-set (:source link)) (nodes-set (:target link))))\n                                                                                      links)\n                                                                                     (distinct)) ;; #3331 (@zhaohui0923) seems caused by duplicated links. Why distinct doesn't work?\n          nodes                                                                     (remove nil? nodes)\n          links                                                                     (remove (fn [{:keys [source target]}] (or (nil? source) (nil? target))) links)\n          nodes-js                                                                  (bean/->js nodes)\n          links-js                                                                  (bean/->js links)\n          simulation                                                                (layout! nodes-js links-js)]\n      (doseq [node nodes-js]\n        (try (.addNode graph (.-id node) node)\n          (catch js/Error e\n            (js/console.error e))))\n      (doseq [link links-js]\n        (let [source (.-id (.-source link))\n              target (.-id (.-target link))]\n          (try (.addEdge graph source target link)\n            (catch js/Error e\n              (js/console.error e)))))\n      (when-let [container-ref (:ref state)]\n        (let [pixi-graph (new (.-PixiGraph Pixi-Graph)\n                           (bean/->js\n                            {:container  @container-ref\n                             :graph      graph\n                             :style      style\n                             :hoverStyle hover-style\n                             :height     height}))]\n          (reset! *graph-instance\n                  {:graph graph\n                   :pixi  pixi-graph})\n          (when register-handlers-fn\n            (register-handlers-fn pixi-graph))\n          (set-up-listeners! pixi-graph)\n          (.on simulation \"tick\" (tick! pixi-graph graph nodes-js links-js)))))\n    (catch js/Error e\n      (js/console.error e)))\n  state)\n"]}