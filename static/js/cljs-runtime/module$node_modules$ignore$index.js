shadow$provide.module$node_modules$ignore$index=function(global,require,module,exports){function makeArray(subject){return Array.isArray(subject)?subject:[subject]}global=require("module$node_modules$process$browser");const REGEX_TEST_BLANK_LINE=/^\s+$/,REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION=/^\\!/,REGEX_REPLACE_LEADING_EXCAPED_HASH=/^\\#/,REGEX_SPLITALL_CRLF=/\r?\n/g,REGEX_TEST_INVALID_PATH=/^\.*\/|^\.+$/,KEY_IGNORE="undefined"!==typeof Symbol?Symbol.for("node-ignore"):"node-ignore",REGEX_REGEXP_RANGE=
/([0-z])-([0-z])/g,sanitizeRange=range=>range.replace(REGEX_REGEXP_RANGE,(match,from,to)=>from.charCodeAt(0)<=to.charCodeAt(0)?match:""),REPLACERS=[[/\\?\s+$/,match=>0===match.indexOf("\\")?" ":""],[/\\\s/g,()=>" "],[/[\\$.|*+(){^]/g,match=>`\\${match}`],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(_,index,str)=>index+6<str.length?"(?:\\/[^\\/]+)*":
"\\/.+"],[/(^|[^\\]+)\\\*(?=.+)/g,(_,p1)=>`${p1}[^\\/]*`],[/\\\\\\(?=[$.|*+(){^])/g,()=>"\\"],[/\\\\/g,()=>"\\"],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(match,leadEscape,range,endEscape,close)=>{"\\"===leadEscape?({length:match}=endEscape,endEscape=endEscape.slice(0,match-match%2),range=`\\[${range}${endEscape}${close}`):range="]"===close?0===endEscape.length%2?`[${sanitizeRange(range)}${endEscape}]`:"[]":"[]";return range}],[/(?:[^*])$/,match=>/\/$/.test(match)?`${match}$`:`${match}(?=$|\\/$)`],[/(\^|\\\/)?\\\*$/,
(_,p1)=>`${p1?`${p1}[^/]+`:"[^/]*"}(?=$|\\/$)`]],regexCache=Object.create(null),makeRegex=(pattern,negative,ignorecase)=>{if(negative=regexCache[pattern])return negative;negative=REPLACERS.reduce((prev,current)=>prev.replace(current[0],current[1].bind(pattern)),pattern);return regexCache[pattern]=ignorecase?new RegExp(negative,"i"):new RegExp(negative)};class IgnoreRule{constructor(origin,pattern,negative,regex){this.origin=origin;this.pattern=pattern;this.negative=negative;this.regex=regex}}const throwError=
(message,Ctor)=>{throw new Ctor(message);},checkPath=(path,originalPath,doThrow)=>"string"===typeof path?path?checkPath.isNotRelative(path)?doThrow(`path should be a ${"`path.relative()`d"} string, but got "${originalPath}"`,RangeError):!0:doThrow("path must not be empty",TypeError):doThrow(`path must be a string, but got \`${originalPath}\``,TypeError);checkPath.isNotRelative=path=>REGEX_TEST_INVALID_PATH.test(path);checkPath.convert=p=>p;class Ignore{constructor({ignorecase=!0}={}){this._rules=
[];this._ignorecase=ignorecase;Object.defineProperty(this,KEY_IGNORE,{value:!0});this._initCache()}_initCache(){this._ignoreCache=Object.create(null);this._testCache=Object.create(null)}_addPattern(pattern){if(pattern&&pattern[KEY_IGNORE])this._rules=this._rules.concat(pattern._rules),this._added=!0;else if(pattern&&"string"===typeof pattern&&!REGEX_TEST_BLANK_LINE.test(pattern)&&0!==pattern.indexOf("#")){var ignorecase=this._ignorecase;const origin=pattern;let negative=!1;0===pattern.indexOf("!")&&
(negative=!0,pattern=pattern.substr(1));pattern=pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION,"!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH,"#");ignorecase=makeRegex(pattern,negative,ignorecase);pattern=new IgnoreRule(origin,pattern,negative,ignorecase);this._added=!0;this._rules.push(pattern)}}add(pattern){this._added=!1;makeArray("string"===typeof pattern?pattern.split(REGEX_SPLITALL_CRLF):pattern).forEach(this._addPattern,this);this._added&&this._initCache();return this}addPattern(pattern){return this.add(pattern)}_testOne(path,
checkUnignored){let ignored=!1,unignored=!1;this._rules.forEach(rule=>{const {negative}=rule;unignored===negative&&ignored!==unignored||negative&&!ignored&&!unignored&&!checkUnignored||!rule.regex.test(path)||(ignored=!negative,unignored=negative)});return{ignored,unignored}}_test(originalPath,cache,checkUnignored,slices){const path=originalPath&&checkPath.convert(originalPath);checkPath(path,originalPath,throwError);return this._t(path,cache,checkUnignored,slices)}_t(path,cache,checkUnignored,slices){if(path in
cache)return cache[path];slices||=path.split("/");slices.pop();if(!slices.length)return cache[path]=this._testOne(path,checkUnignored);slices=this._t(slices.join("/")+"/",cache,checkUnignored,slices);return cache[path]=slices.ignored?slices:this._testOne(path,checkUnignored)}ignores(path){return this._test(path,this._ignoreCache,!1).ignored}createFilter(){return path=>!this.ignores(path)}filter(paths){return makeArray(paths).filter(this.createFilter())}test(path){return this._test(path,this._testCache,
!0)}}require=options=>new Ignore(options);const returnFalse=()=>!1;require.isPathValid=path=>checkPath(path&&checkPath.convert(path),path,returnFalse);require.default=require;module.exports=require;if("undefined"!==typeof global&&(global.env&&global.env.IGNORE_TEST_WIN32||"win32"===global.platform)){checkPath.convert=str=>/^\\\\\?\\/.test(str)||/["<>|\u0000-\u001F]+/u.test(str)?str:str.replace(/\\/g,"/");const REGIX_IS_WINDOWS_PATH_ABSOLUTE=/^[a-z]:\//i;checkPath.isNotRelative=path=>REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path)||
REGEX_TEST_INVALID_PATH.test(path)}}
//# sourceMappingURL=module$node_modules$ignore$index.js.map
