{
"version":3,
"file":"module$node_modules$jszip$lib$nodejsUtils.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACtG,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aAEAF,OAAOC,CAAAA,OAAP,CAAiB,CAMbE,OAA2B,WAA3BA,GAAS,MAAOD,OANH,CAabE,cAAeA,QAAQ,CAACC,IAAD,CAAOC,QAAP,CAAiB,CACpC,GAAIJ,MAAOK,CAAAA,IAAX,EAAmBL,MAAOK,CAAAA,IAA1B,GAAmCC,UAAWD,CAAAA,IAA9C,CACI,MAAOL,OAAOK,CAAAA,IAAP,CAAYF,IAAZ,CAAkBC,QAAlB,CAEP,IAAoB,QAApB,GAAI,MAAOD,KAAX,CAGI,KAAUI,MAAJ,CAAU,0CAAV,CAAN,CAEJ,MAAO,KAAIP,MAAJ,CAAWG,IAAX,CAAiBC,QAAjB,CATyB,CAb3B,CA8BbI,YAAaA,QAAS,CAACC,IAAD,CAAO,CACzB,GAAIT,MAAOU,CAAAA,KAAX,CACI,MAAOV,OAAOU,CAAAA,KAAP,CAAaD,IAAb,CAEHE;IAAAA,CAAM,IAAIX,MAAJ,CAAWS,IAAX,CACVE,KAAIC,CAAAA,IAAJ,CAAS,CAAT,CACA,OAAOD,KANc,CA9BhB,CA4CbE,SAAWA,QAAQ,CAACC,CAAD,CAAG,CAClB,MAAOd,OAAOa,CAAAA,QAAP,CAAgBC,CAAhB,CADW,CA5CT,CAgDbC,SAAWA,QAAS,CAACC,GAAD,CAAM,CACtB,MAAOA,IAAP,EACsB,UADtB,GACI,MAAOA,IAAIC,CAAAA,EADf,EAEyB,UAFzB,GAEI,MAAOD,IAAIE,CAAAA,KAFf,EAG0B,UAH1B,GAGI,MAAOF,IAAIG,CAAAA,MAJO,CAhDb,CAJqF;",
"sources":["node_modules/jszip/lib/nodejsUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jszip$lib$nodejsUtils\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\nmodule.exports = {\n    /**\n     * True if this is running in Nodejs, will be undefined in a browser.\n     * In a browser, browserify won't include this file and the whole module\n     * will be resolved an empty object.\n     */\n    isNode : typeof Buffer !== \"undefined\",\n    /**\n     * Create a new nodejs Buffer from an existing content.\n     * @param {Object} data the data to pass to the constructor.\n     * @param {String} encoding the encoding to use.\n     * @return {Buffer} a new Buffer.\n     */\n    newBufferFrom: function(data, encoding) {\n        if (Buffer.from && Buffer.from !== Uint8Array.from) {\n            return Buffer.from(data, encoding);\n        } else {\n            if (typeof data === \"number\") {\n                // Safeguard for old Node.js versions. On newer versions,\n                // Buffer.from(number) / Buffer(number, encoding) already throw.\n                throw new Error(\"The \\\"data\\\" argument must not be a number\");\n            }\n            return new Buffer(data, encoding);\n        }\n    },\n    /**\n     * Create a new nodejs Buffer with the specified size.\n     * @param {Integer} size the size of the buffer.\n     * @return {Buffer} a new Buffer.\n     */\n    allocBuffer: function (size) {\n        if (Buffer.alloc) {\n            return Buffer.alloc(size);\n        } else {\n            var buf = new Buffer(size);\n            buf.fill(0);\n            return buf;\n        }\n    },\n    /**\n     * Find out if an object is a Buffer.\n     * @param {Object} b the object to test.\n     * @return {Boolean} true if the object is a Buffer, false otherwise.\n     */\n    isBuffer : function(b){\n        return Buffer.isBuffer(b);\n    },\n\n    isStream : function (obj) {\n        return obj &&\n            typeof obj.on === \"function\" &&\n            typeof obj.pause === \"function\" &&\n            typeof obj.resume === \"function\";\n    }\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","isNode","newBufferFrom","data","encoding","from","Uint8Array","Error","allocBuffer","size","alloc","buf","fill","isBuffer","b","isStream","obj","on","pause","resume"]
}
