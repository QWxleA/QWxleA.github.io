{"version":3,"sources":["electron/listener.cljs"],"mappings":";AAkBA,sCAAA,tCAAMA;AAAN,AAIE,4EAAA,2CAAA,0DAAA,1KAACC;AAAD,AAAwC,2RAAA,pRAACC,uEACA,AAACC,oBAAW,+GAAA,/GAACC;GADtD,iEAAA;AAAA,AAGwC,+GAAA,xGAACC;GAHzC,6DAAA;AAAA,AAIwC,+GAAA,xGAACA;;;AAE3C,gDAAA,hDAAMC;AAAN,AAGE,sBAAA,fAACC,gCAEA,WAAKC;AAAL,AACE,OAACR;;;AAEN,6CAAA,7CAAMS;AAAN,AAGE,eAAA,fAACF,8BACkB,WAAKG;AAAL,AACE,IAAAC,aAA6B,AAACK,wBAAWN;IAAzCC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAcG;cAAd,AAAAD,4CAAAF,eAAA,rEAAmBI;AAAnB,AACE,AAACE,iDAAgCH,KAAKC;;AACtC,OAACG,oCAAwBJ,KAAKC;;;AAErD,eAAA,fAACR,8BACkB,WAAKG;AAAL,AACE,IAAAS,aAA6B,AAACH,wBAAWN;IAAzCS,iBAAA,AAAAP,4BAAAO;WAAA,AAAAN,4CAAAM,eAAA,lEAAcL;cAAd,AAAAD,4CAAAM,eAAA,rEAAmBJ;IACbD,WAAK,AAACM,gDAAQN;WADpB,mFAAA,1FAEMO,6IAAW,4CAAKN;AAFtB,AAGE,4FAAA,rFAACb,uEAAmBmB,KAAKP;;;AAEhD,eAAA,fAACP,+BACkB,WAAKG;AAAL,AACE,IAAMY,OAAK,AAACN,wBAAWN;AAAvB,AACE,OAACa,wCAA0BD;;;AAElD,eAAA,fAACf,wCACkB;AAAA,AACE,sCAAA,mFAAA,lHAACiB;;;AAEtB,eAAA,fAACjB,iCACkB;AAAA,AACE,IAAAkB,qBAAiB,AAACE;AAAlB,AAAA,oBAAAF;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,+GAAA,xGAACrB,0HAA0BqB;;AAD7B;;;;AAGrB,eAAA,fAACnB,0BACkB,WAAKG;AAAL,AACE,IAAAkB,aAAwB,AAACZ,wBAAWN;IAApCkB,iBAAA,AAAAhB,4BAAAgB;cAAA,AAAAf,4CAAAe,eAAA,rEAAcb;IACRA,cAAQ,uDAAA,vDAACc,+CAAOd,wDAAYe;AADlC,AAEE,OAACC,sCAAwBhB;;;AAEhD,eAAA,fAACR,oCAKkB,WAAKG;AAAL,AACE,IAAAsB,aAAwC,AAAChB,wBAAWN;IAApDsB,iBAAA,AAAApB,4BAAAoB;gBAAA,AAAAnB,4CAAAmB,eAAA,vEAAcC;eAAd,AAAApB,4CAAAmB,eAAA,tEAAwBE;WAAxB,AAAArB,4CAAAmB,eAAA,lEAAiCG;AAAjC,AACE,oBACEF;AACA,IAAMG,eAAa,AAACC,uEAAgCJ;AAApD,AAGE,OAACK,kGAAsDF;;AAL3D,oBAOEF;AACA,oBAAI,AAACK,oCAA2BL;AAC9B,OAACM,4EAAgCN;;AACjC,8MAAA,uDAAA,9PAAChC,uEAAmB,CAAA,qFAAA,VAAoCgC;;;AAV5D,oBAYEC;AACA,IAAAM,qBAAsB,mEAAA,nEAACC,8DAAuBP;AAA9C,AAAA,oBAAAM;AAAA,mBAAAA,fAASL;AAAT,AACE,OAACI,4EAAgCJ;;AACjC,sMAAA,uDAAA,tPAAClC,uEAAmB,CAAA,6EAAA,NAAgCiC;;;AAfxD;;;;;;AAiBvB,eAAA,fAAC5B,wBACkB,WAAKG;AAAL,AACE,IAAAiC,aAA8B,AAAC3B,wBAAWN;IAA1CiC,iBAAA,AAAA/B,4BAAA+B;YAAA,AAAA9B,4CAAA8B,eAAA,nEAAcjB;cAAd,AAAAb,4CAAA8B,eAAA,rEAAoBC;IACdA,cAAQ,iBAAAC,WAAe,AAAA,mFAAOD;AAAtB,AAAA,0HAAAC,gDAAAA,lKAACC,0DAAAA,oEAAAA;;AADf,AAEE,IAAArB,2BAAgB,2GAAA,4CAAA,tJAACuB,mDAAAA,gEAAAA,fAAUtB,4CAAAA;AAA3B,AAAA,oBAAAD;AAAA,AAAA,iBAAAA,bAAWsB;AAAX,AACE,oFAAA,2CAAA,0DAAA,zLAACE,6DAAYF,WAAKH;;AADpB;;AAEA,OAACM;;;AAExB,eAAA,fAAC3C,8BAGkB,WAAKG;AAAL,AACE,IAAMY,OAAK,AAACN,wBAAWN;eAAvB,XACMyC;AADN,AACgB,2RAAA,pRAACjD,uEACA,AAACC,oBAAW,+GAAA,/GAACC;;cAF9B,VAIMgD;AAJN,AAIe,+GAAA,xGAAC/C;;IACVgD,UAAQ;AAAA,AACE,AAACD;;AACD,kRAAA,3QAAClD,uEACA,+GAAA,/GAACE;;eARlB,2CAAA,mEAAA,yEAAA,lMAUMkD,gHAAsBH,0EACAC,qEACAC;AAZ5B,AAaE,OAACpD,qEAAyBqB,KAAKgC;;;AAEtD,eAAA,fAAC/C,+BACkB,WAAKgD;AAAL,AACE,OAACC,qCAAoBD;;;AAE1C,sBAAA,fAAChD,sCAGkB,WAAKe;AAAL,AACE,+EAAA,xEAACmC,6EAAgCnC;;;AAExD,iCAAA,jCAAMoC;AAAN,AAEE,AAACjD;;AACD,OAACH","names":["electron.listener/persist-dbs!","frontend.handler.repo.persist_db_BANG_","frontend.handler.notification.show_BANG_","frontend.ui/loading","frontend.context.i18n.t","electron.ipc.ipc","electron.listener/listen-persistent-dbs!","js/window.apis.on","_req","electron.listener/listen-to-electron!","data","map__56814","cljs.core/--destructure-map","cljs.core.get","type","payload","cljs-bean.core/->clj","frontend.fs.watcher-handler/handle-changed!","frontend.fs.sync/file-watch-handler","map__56815","cljs.core.keyword","comp","repo","frontend.handler.repo/remove-repo!","frontend.state/pub-event!","temp__5720__auto__","graph","frontend.state/get-current-repo","map__56836","cljs.core.update","cljs.core/keyword","frontend.handler.route/redirect!","map__56844","page-name","block-id","file","db-page-name","frontend.db.model.get_redirect_page_name","frontend.handler.editor.insert_first_page_block_if_not_exists_BANG_","frontend.db.model/get-block-by-uuid","frontend.handler.route.redirect_to_page_BANG_","temp__5718__auto__","frontend.db.model.get_file_page","map__56863","tx-data","G__56867","frontend.db/string->db","conn","frontend.db/get-db","datascript.core.transact_BANG_","frontend.handler.ui.re_render_root_BANG_","before-f","after-f","error-f","handlers","code","frontend.handler.user/login-callback","frontend.handler.ui.open_new_window_BANG_","electron.listener/listen!"],"sourcesContent":["(ns electron.listener\n  (:require [frontend.state :as state]\n            [frontend.context.i18n :refer [t]]\n            [frontend.handler.route :as route-handler]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.handler.ui :as ui-handler]\n            [cljs-bean.core :as bean]\n            [frontend.fs.watcher-handler :as watcher-handler]\n            [frontend.fs.sync :as sync]\n            [frontend.db :as db]\n            [frontend.db.model :as db-model]\n            [datascript.core :as d]\n            [electron.ipc :as ipc]\n            [frontend.ui :as ui]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.handler.user :as user]))\n\n(defn persist-dbs!\n  []\n  ;; only persist current db!\n  ;; TODO rename the function and event to persist-db\n  (repo-handler/persist-db! {:before     #(notification/show!\n                                           (ui/loading (t :graph/persist))\n                                           :warning)\n                             :on-success #(ipc/ipc \"persistent-dbs-saved\")\n                             :on-error   #(ipc/ipc \"persistent-dbs-error\")}))\n\n(defn listen-persistent-dbs!\n  []\n  ;; TODO: move \"file-watcher\" to electron.ipc.channels\n  (js/window.apis.on\n   \"persistent-dbs\"\n   (fn [_req]\n     (persist-dbs!))))\n\n(defn listen-to-electron!\n  []\n  ;; TODO: move \"file-watcher\" to electron.ipc.channels\n  (js/window.apis.on \"file-watcher\"\n                     (fn [data]\n                       (let [{:keys [type payload]} (bean/->clj data)]\n                         (watcher-handler/handle-changed! type payload)\n                         (sync/file-watch-handler type payload))))\n\n  (js/window.apis.on \"notification\"\n                     (fn [data]\n                       (let [{:keys [type payload]} (bean/->clj data)\n                             type (keyword type)\n                             comp [:div (str payload)]]\n                         (notification/show! comp type false))))\n\n  (js/window.apis.on \"graphUnlinked\"\n                     (fn [data]\n                       (let [repo (bean/->clj data)]\n                         (repo-handler/remove-repo! repo))))\n\n  (js/window.apis.on \"setGitUsernameAndEmail\"\n                     (fn []\n                       (state/pub-event! [:modal/set-git-username-and-email])))\n\n  (js/window.apis.on \"getCurrentGraph\"\n                     (fn []\n                       (when-let [graph (state/get-current-repo)]\n                         (ipc/ipc \"setCurrentGraph\" graph))))\n\n  (js/window.apis.on \"redirect\"\n                     (fn [data]\n                       (let [{:keys [payload]} (bean/->clj data)\n                             payload (update payload :to keyword)]\n                         (route-handler/redirect! payload))))\n\n  (js/window.apis.on \"redirectWhenExists\"\n                     ;;  Redirect to the given page or block when the provided page or block exists.\n                     ;;  Either :page-name or :block-id is required.\n                     ;;  :page-name : the original-name of the page.\n                     ;;  :block-id : uuid.\n                     (fn [data]\n                       (let [{:keys [page-name block-id file]} (bean/->clj data)]\n                         (cond\n                           page-name\n                           (let [db-page-name (db-model/get-redirect-page-name page-name)]\n                             ;; No error handling required, as a page name is always valid\n                             ;; Open new page if the page does not exist\n                             (editor-handler/insert-first-page-block-if-not-exists! db-page-name))\n\n                           block-id\n                           (if (db-model/get-block-by-uuid block-id)\n                             (route-handler/redirect-to-page! block-id)\n                             (notification/show! (str \"Open link failed. Block-id `\" block-id \"` doesn't exist in the graph.\") :error false))\n\n                           file\n                           (if-let [db-page-name (db-model/get-file-page file false)]\n                             (route-handler/redirect-to-page! db-page-name)\n                             (notification/show! (str \"Open link failed. File `\" file \"` doesn't exist in the graph.\") :error false))))))\n\n  (js/window.apis.on \"dbsync\"\n                     (fn [data]\n                       (let [{:keys [graph tx-data]} (bean/->clj data)\n                             tx-data (db/string->db (:data tx-data))]\n                         (when-let [conn (db/get-db graph false)]\n                           (d/transact! conn tx-data {:dbsync? true}))\n                         (ui-handler/re-render-root!))))\n\n  (js/window.apis.on \"persistGraph\"\n                     ;; electron is requesting window for persisting a graph in it's db\n                     ;; fire back \"broadcastPersistGraphDone\" on done\n                     (fn [data]\n                       (let [repo (bean/->clj data)\n                             before-f #(notification/show!\n                                        (ui/loading (t :graph/persist))\n                                        :warning)\n                             after-f #(ipc/ipc \"broadcastPersistGraphDone\")\n                             error-f (fn []\n                                       (after-f)\n                                       (notification/show!\n                                        (t :graph/persist-error)\n                                        :error))\n                             handlers {:before     before-f\n                                       :on-success after-f\n                                       :on-error   error-f}]\n                         (repo-handler/persist-db! repo handlers))))\n\n  (js/window.apis.on \"loginCallback\"\n                     (fn [code]\n                       (user/login-callback code)))\n\n  (js/window.apis.on \"openNewWindowOfGraph\"\n                     ;; Handle open new window in renderer, until the destination graph doesn't rely on setting local storage\n                     ;; No db cache persisting ensured. Should be handled by the caller\n                     (fn [repo]\n                       (ui-handler/open-new-window! nil repo))))\n\n(defn listen!\n  []\n  (listen-to-electron!)\n  (listen-persistent-dbs!))\n"]}