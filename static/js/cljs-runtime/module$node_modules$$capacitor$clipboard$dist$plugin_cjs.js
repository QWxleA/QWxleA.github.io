shadow$provide.module$node_modules$$capacitor$clipboard$dist$plugin_cjs=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$$capacitor$core$dist$index_cjs");class ClipboardWeb extends global.WebPlugin{async write(options){if("undefined"===typeof navigator||!navigator.clipboard)throw this.unavailable("Clipboard API not available in this browser");if(void 0!==options.string)await this.writeText(options.string);else if(options.url)await this.writeText(options.url);
else if(options.image)if("undefined"!==typeof ClipboardItem)try{const blob=await (await fetch(options.image)).blob(),clipboardItemInput=new ClipboardItem({[blob.type]:blob});await navigator.clipboard.write([clipboardItemInput])}catch(err){throw Error("Failed to write image");}else throw this.unavailable("Writing images to the clipboard is not supported in this browser");else throw Error("Nothing to write");}async read(){if("undefined"===typeof navigator||!navigator.clipboard)throw this.unavailable("Clipboard API not available in this browser");
if("undefined"!==typeof ClipboardItem)try{const clipboardItems=await navigator.clipboard.read(),type=clipboardItems[0].types[0],clipboardBlob=await clipboardItems[0].getType(type);return{value:await this._getBlobData(clipboardBlob,type),type}}catch(err){return this.readText()}else return this.readText()}async readText(){if("undefined"===typeof navigator||!navigator.clipboard||!navigator.clipboard.readText)throw this.unavailable("Reading from clipboard not supported in this browser");return{value:await navigator.clipboard.readText(),
type:"text/plain"}}async writeText(text){if("undefined"===typeof navigator||!navigator.clipboard||!navigator.clipboard.writeText)throw this.unavailable("Writting to clipboard not supported in this browser");await navigator.clipboard.writeText(text)}_getBlobData(clipboardBlob,type){return new Promise((resolve,reject)=>{const reader=new FileReader;type.includes("image")?reader.readAsDataURL(clipboardBlob):reader.readAsText(clipboardBlob);reader.onloadend=()=>{resolve(reader.result)};reader.onerror=
e=>{reject(e)}})}}global=global.registerPlugin("Clipboard",{web:()=>new ClipboardWeb});exports.Clipboard=global}
//# sourceMappingURL=module$node_modules$$capacitor$clipboard$dist$plugin_cjs.js.map
