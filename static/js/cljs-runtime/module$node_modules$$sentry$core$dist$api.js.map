{
"version":3,
"file":"module$node_modules$$sentry$core$dist$api.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/@sentry/core/dist/api.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$core$dist$api\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"@sentry/utils\");\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nvar API = /** @class */ (function () {\n    /** Create a new instance of API */\n    function API(dsn, metadata, tunnel) {\n        if (metadata === void 0) { metadata = {}; }\n        this.dsn = dsn;\n        this._dsnObject = utils_1.makeDsn(dsn);\n        this.metadata = metadata;\n        this._tunnel = tunnel;\n    }\n    /** Returns the Dsn object. */\n    API.prototype.getDsn = function () {\n        return this._dsnObject;\n    };\n    /** Does this transport force envelopes? */\n    API.prototype.forceEnvelope = function () {\n        return !!this._tunnel;\n    };\n    /** Returns the prefix to construct Sentry ingestion API endpoints. */\n    API.prototype.getBaseApiEndpoint = function () {\n        return getBaseApiEndpoint(this._dsnObject);\n    };\n    /** Returns the store endpoint URL. */\n    API.prototype.getStoreEndpoint = function () {\n        return getStoreEndpoint(this._dsnObject);\n    };\n    /**\n     * Returns the store endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n        return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n    };\n    /**\n     * Returns the envelope endpoint URL with auth in the query string.\n     *\n     * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n     */\n    API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n        return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n    };\n    return API;\n}());\nexports.API = API;\n/** Initializes API Details */\nfunction initAPIDetails(dsn, metadata, tunnel) {\n    return {\n        initDsn: dsn,\n        metadata: metadata || {},\n        dsn: utils_1.makeDsn(dsn),\n        tunnel: tunnel,\n    };\n}\nexports.initAPIDetails = initAPIDetails;\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n}\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn, target) {\n    return \"\" + getBaseApiEndpoint(dsn) + dsn.projectId + \"/\" + target + \"/\";\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn) {\n    return utils_1.urlEncode({\n        // We send only the minimum set of required information. See\n        // https://github.com/getsentry/sentry-javascript/issues/2572.\n        sentry_key: dsn.publicKey,\n        sentry_version: SENTRY_API_VERSION,\n    });\n}\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn) {\n    return _getIngestEndpoint(dsn, 'store');\n}\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getStoreEndpointWithUrlEncodedAuth(dsn) {\n    return getStoreEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\nexports.getStoreEndpointWithUrlEncodedAuth = getStoreEndpointWithUrlEncodedAuth;\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn) {\n    return _getIngestEndpoint(dsn, 'envelope');\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {\n    return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\nexports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nfunction getRequestHeaders(dsn, clientName, clientVersion) {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.publicKey);\n    if (dsn.pass) {\n        header.push(\"sentry_secret=\" + dsn.pass);\n    }\n    return {\n        'Content-Type': 'application/json',\n        'X-Sentry-Auth': header.join(', '),\n    };\n}\nexports.getRequestHeaders = getRequestHeaders;\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n    var dsn = utils_1.makeDsn(dsnLike);\n    var endpoint = getBaseApiEndpoint(dsn) + \"embed/error-page/\";\n    var encodedOptions = \"dsn=\" + utils_1.dsnToString(dsn);\n    for (var key in dialogOptions) {\n        if (key === 'dsn') {\n            continue;\n        }\n        if (key === 'user') {\n            if (!dialogOptions.user) {\n                continue;\n            }\n            if (dialogOptions.user.name) {\n                encodedOptions += \"&name=\" + encodeURIComponent(dialogOptions.user.name);\n            }\n            if (dialogOptions.user.email) {\n                encodedOptions += \"&email=\" + encodeURIComponent(dialogOptions.user.email);\n            }\n        }\n        else {\n            encodedOptions += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]);\n        }\n    }\n    return endpoint + \"?\" + encodedOptions;\n}\nexports.getReportDialogEndpoint = getReportDialogEndpoint;\n//# sourceMappingURL=api.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","getBaseApiEndpoint","dsn","protocol","host","port","path","_getIngestEndpoint","target","projectId","_encodedAuth","utils_1","urlEncode","sentry_key","publicKey","sentry_version","SENTRY_API_VERSION","getStoreEndpointWithUrlEncodedAuth","getEnvelopeEndpointWithUrlEncodedAuth","tunnel","Object","defineProperty","value","API","metadata","_dsnObject","makeDsn","_tunnel","prototype","getDsn","API.prototype.getDsn","forceEnvelope","API.prototype.forceEnvelope","API.prototype.getBaseApiEndpoint","getStoreEndpoint","API.prototype.getStoreEndpoint","API.prototype.getStoreEndpointWithUrlEncodedAuth","API.prototype.getEnvelopeEndpointWithUrlEncodedAuth","initAPIDetails","initDsn","getRequestHeaders","clientName","clientVersion","header","push","pass","join","getReportDialogEndpoint","dsnLike","dialogOptions","endpoint","encodedOptions","dsnToString","key","user","name","encodeURIComponent","email"]
}
