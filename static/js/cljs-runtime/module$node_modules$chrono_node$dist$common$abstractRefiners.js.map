{
"version":3,
"file":"module$node_modules$chrono_node$dist$common$abstractRefiners.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEzHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,cAAR,CAAyBJ,OAAQK,CAAAA,MAAjC,CAA0C,IAAK,EAC/C,MAAMA,OAAN,CACIC,MAAM,CAACC,OAAD,CAAUC,OAAV,CAAmB,CACrB,MAAOA,QAAQC,CAAAA,MAAR,CAAgBC,CAAD,EAAO,IAAKC,CAAAA,OAAL,CAAaJ,OAAb,CAAsBG,CAAtB,CAAtB,CADc,CAD7B,CAKAV,OAAQK,CAAAA,MAAR,CAAiBA,MACjB,MAAMD,eAAN,CACIE,MAAM,CAACC,OAAD,CAAUC,OAAV,CAAmB,CACrB,GAAqB,CAArB,CAAIA,OAAQI,CAAAA,MAAZ,CACI,MAAOJ,QAEX,OAAMK,cAAgB,EACtB,KAAIC,UAAYN,OAAA,CAAQ,CAAR,CAAhB,CACIO,WAAa,IACjB,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,OAAQI,CAAAA,MAA5B,CAAoCI,CAAA,EAApC,CAAyC,CACrCD,UAAA;AAAaP,OAAA,CAAQQ,CAAR,CACb,OAAMC,YAAcV,OAAQW,CAAAA,IAAKC,CAAAA,SAAb,CAAuBL,SAAUM,CAAAA,KAAjC,CAAyCN,SAAUI,CAAAA,IAAKN,CAAAA,MAAxD,CAAgEG,UAAWK,CAAAA,KAA3E,CACpB,IAAK,IAAKC,CAAAA,kBAAL,CAAwBJ,WAAxB,CAAqCH,SAArC,CAAgDC,UAAhD,CAA4DR,OAA5D,CAAL,CAIK,CACD,MAAMe,KAAOR,SAAb,CACMS,MAAQR,UADd,CAEMS,aAAe,IAAKC,CAAAA,YAAL,CAAkBR,WAAlB,CAA+BK,IAA/B,CAAqCC,KAArC,CAA4ChB,OAA5C,CACrBA,QAAQmB,CAAAA,KAAR,CAAc,EAAA,EAAM,CAChBC,OAAQC,CAAAA,GAAR,CAAY,GAAG,IAAKC,CAAAA,WAAYC,CAAAA,IAApB,WAAmCR,IAAnC,QAA+CC,KAA/C,SAA6DC,YAA7D,EAAZ,CADgB,CAApB,CAGAV,UAAA,CAAYU,YAPX,CAJL,IACIX,cAAckB,CAAAA,IAAd,CAAmBjB,SAAnB,CACA,CAAAA,SAAA,CAAYC,UALqB,CAiBxB,IAAjB,EAAID,SAAJ,EACID,aAAckB,CAAAA,IAAd,CAAmBjB,SAAnB,CAEJ;MAAOD,cA3Bc,CAD7B,CA+BAb,OAAQI,CAAAA,cAAR,CAAyBA,cAzCgG;",
"sources":["node_modules/chrono-node/dist/common/abstractRefiners.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$common$abstractRefiners\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergingRefiner = exports.Filter = void 0;\nclass Filter {\n    refine(context, results) {\n        return results.filter((r) => this.isValid(context, r));\n    }\n}\nexports.Filter = Filter;\nclass MergingRefiner {\n    refine(context, results) {\n        if (results.length < 2) {\n            return results;\n        }\n        const mergedResults = [];\n        let curResult = results[0];\n        let nextResult = null;\n        for (let i = 1; i < results.length; i++) {\n            nextResult = results[i];\n            const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);\n            if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {\n                mergedResults.push(curResult);\n                curResult = nextResult;\n            }\n            else {\n                const left = curResult;\n                const right = nextResult;\n                const mergedResult = this.mergeResults(textBetween, left, right, context);\n                context.debug(() => {\n                    console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`);\n                });\n                curResult = mergedResult;\n            }\n        }\n        if (curResult != null) {\n            mergedResults.push(curResult);\n        }\n        return mergedResults;\n    }\n}\nexports.MergingRefiner = MergingRefiner;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","MergingRefiner","Filter","refine","context","results","filter","r","isValid","length","mergedResults","curResult","nextResult","i","textBetween","text","substring","index","shouldMergeResults","left","right","mergedResult","mergeResults","debug","console","log","constructor","name","push"]
}
