{"version":3,"sources":["rewrite_cljc/node/integer.cljc"],"mappings":"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","names":["this__4502__auto__","k__4503__auto__","this__4504__auto__","k91718","else__4505__auto__","G__91723","cljs.core/Keyword","value","base","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__91727","vec__91728","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__91717","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this91719","other91720","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__91783","this__4510__auto__","k__4511__auto__","pred__91787","cljs.core/keyword-identical?","expr__91788","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-cljc.node.integer/IntNode","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__91721","extmap__4542__auto__","G__91794","cljs.core/record?","rewrite-cljc.node.integer/->IntNode","rewrite-cljc.node.integer/map->IntNode","_","this","sign","abs-value","G__91780","s","rewrite-cljc.interop/int->str","prefix","G__91781","cljs.core/long","rewrite-cljc.node.protocols/make-printable!","var_args","G__91799","rewrite-cljc.node.integer/integer-node","js/Error","rewrite_cljc.node.integer.integer_node","cljs.core/integer?"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.node.integer\n  (:require [rewrite-cljc.interop :as interop]\n            [rewrite-cljc.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord IntNode [value base]\n  node/Node\n  (tag [_] :token)\n  (printable-only? [_] false)\n  (sexpr [_] value)\n  (length [this]\n    (count (node/string this)))\n  (string [_]\n    (let [sign (when (< value 0)\n                 \"-\")\n          abs-value (cond-> value (< value 0) -)\n          s (interop/int->str abs-value base)\n          prefix (case (long base)\n                   8  \"0\"\n                   10 \"\"\n                   16 \"0x\"\n                   (str base \"r\"))]\n      (str sign prefix s)))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(node/make-printable! IntNode)\n\n;; ## Constructor\n\n(defn integer-node\n  \"Create node representing an integer `value` in `base`.\n\n  `base` defaults to 10.\"\n  ([value]\n   (integer-node value 10))\n  ([value base]\n   {:pre [(integer? value)\n          (integer? base)\n          (< 1 base 37)]}\n   (->IntNode value base)))\n"]}