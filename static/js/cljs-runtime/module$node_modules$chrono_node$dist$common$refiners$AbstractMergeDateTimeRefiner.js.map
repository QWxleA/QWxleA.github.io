{
"version":3,
"file":"module$node_modules$chrono_node$dist$common$refiners$AbstractMergeDateTimeRefiner.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iFAAA,CAAsG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE9IC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACMC,OAAAA,CAAqBN,OAAA,CAAQ,8DAAR,CAC3B,OAAMO,qBAAuBP,OAAA,CAAQ,qEAAR,CAC7B,MAAMQ,uBAAN,QAAqCF,OAAmBG,CAAAA,cAAxD,CACIC,kBAAkB,CAACC,WAAD,CAAcC,aAAd,CAA6BC,UAA7B,CAAyC,CACvD,OAAUD,aAAcE,CAAAA,KAAMC,CAAAA,UAApB,EAAV;AAA8CF,UAAWC,CAAAA,KAAME,CAAAA,UAAjB,EAA9C,EACKH,UAAWC,CAAAA,KAAMC,CAAAA,UAAjB,EADL,EACsCH,aAAcE,CAAAA,KAAME,CAAAA,UAApB,EADtC,GAEgD,IAFhD,EAEIL,WAAYM,CAAAA,KAAZ,CAAkB,IAAKC,CAAAA,cAAL,EAAlB,CAHmD,CAK3DC,YAAY,CAACR,WAAD,CAAcC,aAAd,CAA6BC,UAA7B,CAAyC,CACjD,MAAMO,OAASR,aAAcE,CAAAA,KAAMC,CAAAA,UAApB,EAAA,CACTR,oBAAqBc,CAAAA,mBAArB,CAAyCT,aAAzC,CAAwDC,UAAxD,CADS,CAETN,oBAAqBc,CAAAA,mBAArB,CAAyCR,UAAzC,CAAqDD,aAArD,CACNQ,OAAOE,CAAAA,KAAP,CAAeV,aAAcU,CAAAA,KAC7BF,OAAOG,CAAAA,IAAP,CAAcX,aAAcW,CAAAA,IAA5B,CAAmCZ,WAAnC,CAAiDE,UAAWU,CAAAA,IAC5D,OAAOH,OAN0C,CANzD,CAeAlB,OAAQsB,CAAAA,OAAR,CAAkBhB,sBApB4H;",
"sources":["node_modules/chrono-node/dist/common/refiners/AbstractMergeDateTimeRefiner.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$common$refiners$AbstractMergeDateTimeRefiner\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst abstractRefiners_1 = require(\"../abstractRefiners\");\nconst mergingCalculation_1 = require(\"../../calculation/mergingCalculation\");\nclass ENMergeDateTimeRefiner extends abstractRefiners_1.MergingRefiner {\n    shouldMergeResults(textBetween, currentResult, nextResult) {\n        return (((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||\n            (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime())) &&\n            textBetween.match(this.patternBetween()) != null);\n    }\n    mergeResults(textBetween, currentResult, nextResult) {\n        const result = currentResult.start.isOnlyDate()\n            ? mergingCalculation_1.mergeDateTimeResult(currentResult, nextResult)\n            : mergingCalculation_1.mergeDateTimeResult(nextResult, currentResult);\n        result.index = currentResult.index;\n        result.text = currentResult.text + textBetween + nextResult.text;\n        return result;\n    }\n}\nexports.default = ENMergeDateTimeRefiner;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","abstractRefiners_1","mergingCalculation_1","ENMergeDateTimeRefiner","MergingRefiner","shouldMergeResults","textBetween","currentResult","nextResult","start","isOnlyDate","isOnlyTime","match","patternBetween","mergeResults","result","mergeDateTimeResult","index","text","default"]
}
