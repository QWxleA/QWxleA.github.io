shadow$provide.module$node_modules$codemirror$mode$protobuf$protobuf=function(global,require,module,exports){(function(mod){"object"==typeof exports&&"object"==typeof module?mod(require("module$node_modules$codemirror$lib$codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],mod):mod(CodeMirror)})(function(CodeMirror){function tokenBase(stream){if(stream.eatSpace())return null;if(stream.match("//"))return stream.skipToEnd(),"comment";if(stream.match(/^[0-9\.+-]/,!1)&&
(stream.match(/^[+-]?0x[0-9a-fA-F]+/)||stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/)||stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/)))return"number";if(stream.match(/^"([^"]|(""))*"/)||stream.match(/^'([^']|(''))*'/))return"string";if(stream.match(keywords))return"keyword";if(stream.match(identifiers))return"variable";stream.next();return null}var keywordArray="package message import syntax required optional repeated reserved default extensions packed bool bytes double enum float string int32 int64 uint32 uint64 sint32 sint64 fixed32 fixed64 sfixed32 sfixed64 option service rpc returns".split(" "),
keywords=new RegExp("^(("+keywordArray.join(")|(")+"))\\b","i");CodeMirror.registerHelper("hintWords","protobuf",keywordArray);var identifiers=RegExp("^[_A-Za-z¡-￿][_A-Za-z0-9¡-￿]*");CodeMirror.defineMode("protobuf",function(){return{token:tokenBase,fold:"brace"}});CodeMirror.defineMIME("text/x-protobuf","protobuf")})}
//# sourceMappingURL=module$node_modules$codemirror$mode$protobuf$protobuf.js.map
