{"version":3,"sources":["frontend/diff.cljs"],"mappings":"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","names":["frontend.diff/diff","s1","s2","G__49221","G__49222","G__49223","fexpr__49220","frontend.diff.goog$module$goog$object.get","js/module$node_modules$diff$dist$diff","cljs.core/clj->js","cljs-bean.core/->clj","frontend.diff/inline-special-chars","frontend.diff/markdown-link?","markup","current-line","pos","and__5041__auto__","cljs.core._EQ_","frontend.util/nth-safe","clojure.string/includes?","cljs.core.subs","frontend.diff/find-position","text","e49228","t1","clojure.string/lower-case","cljs.core/seq","t2","i1","i2","vec__49244","seq__49245","first__49246","cljs.core/first","cljs.core/next","vec__49247","seq__49248","first__49249","h1","r1","h2","r2","cljs.core/empty?","fexpr__49253","logseq.graph-parser.text/get-current-line-by-pos","cljs.core/contains?","matched","cljs.core.take_while","logseq.graph_parser.util.safe_subs","cljs.core.apply","cljs.core/str","matched?","clojure.string/reverse","cljs.core/count","idx","clojure.string.index_of","js/Error","e","lambdaisland.glogi.log","cljs.core/identity"],"sourcesContent":["(ns frontend.diff\n  (:require [clojure.string :as string]\n            [\"diff\" :as jsdiff]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [cljs-bean.core :as bean]\n            [frontend.util :as util]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.text :as text]))\n\n(defn diff\n  [s1 s2]\n  (-> ((gobj/get jsdiff \"diffLines\") s1 s2 (clj->js {\"newlineIsToken\" true}))\n      bean/->clj))\n\n(def inline-special-chars\n  #{\\* \\_ \\/ \\` \\+ \\^ \\~ \\$})\n\n(defn- markdown-link?\n  [markup current-line pos]\n  (and current-line\n       (= (util/nth-safe markup pos) \"]\")\n       (= (util/nth-safe markup (inc pos)) \"(\")\n       (string/includes? (subs current-line 0 pos) \"[\")\n       (string/includes? (subs current-line pos) \")\")))\n\n;; (find-position \"** hello _w_\" \"hello w\")\n(defn find-position\n  [markup text]\n  (when (and (string? markup) (string? text))\n    (try\n      (let [pos (loop [t1 (-> markup string/lower-case seq)\n                       t2 (-> text   string/lower-case seq)\n                       i1 0\n                       i2 0]\n                  (let [[h1 & r1] t1\n                        [h2 & r2] t2]\n                    (cond\n                      (or (empty? t1) (empty? t2))\n                      i1\n\n                      (= h1 h2)\n                      (recur r1 r2 (inc i1) (inc i2))\n\n                      (#{\\[ \\space \\]} h2)\n                      (recur t1 r2 i1 (inc i2))\n\n                      :else\n                      (recur r1 t2 (inc i1) i2))))\n            current-line (text/get-current-line-by-pos markup pos)]\n        (cond\n          (= (util/nth-safe markup pos)\n             (util/nth-safe markup (inc pos))\n             \"]\")\n          (+ pos 2)\n\n          (contains? inline-special-chars (util/nth-safe markup pos))\n          (let [matched (->> (take-while inline-special-chars (gp-util/safe-subs markup pos))\n                             (apply str))\n                matched? (and current-line (string/includes? current-line (string/reverse matched)))]\n            (if matched?\n              (+ pos (count matched))\n              pos))\n\n          (markdown-link? markup current-line pos)\n          (let [idx (string/index-of (subs current-line pos) \")\")]\n            (+ pos (inc idx)))\n\n          :else\n          pos))\n      (catch js/Error e\n        (log/error :diff/find-position {:error e})\n        (count markup)))))\n"]}