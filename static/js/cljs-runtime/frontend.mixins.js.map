{"version":3,"sources":["frontend/mixins.cljs"],"mappings":";AAOA;;;yBAAA,zBAAMA,0DAEHC;AAFH,AAGE,IAAAC,YAAQD;IAARC,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,AAAA,kIAAAA;AAAA,AAAA,GAAA,CAAAA,iBAAA;AAAA;;AAAA,OAAAA;;;AAEF,AAAA;;;yBAAA,iCAAAC,1DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8DAAA,qCAAAG,nGAAMD,yEAEHR,MAAMoB,OAAOC,KAAKC;AAFrB,AAAA,IAAAZ,cAAAD;WAAA,AAAAE,4CAAAD,YAAA,IAAA,nEAEgCa;AAFhC,AAGE,IAAAC,qBAAuC,AAAA,kIAAiBxB;AAAxD,AAAA,oBAAAwB;AAAA,AAAA,oBAAAA,hBAAyBC;AAAzB,AACE,OAASA,qBAAcL,OAAO,AAACM,eAAKL,MAAMC,QAAQ,AAACK,qBAAQJ;;AAD7D;;;;AAHF,CAAA,iDAAA,jDAAMf;;AAAN;AAAA,CAAA,2CAAA,WAAAI,tDAAMJ;AAAN,AAAA,IAAAK,YAAA,AAAAC,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;IAAAI,YAAA,AAAAF,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;IAAAK,YAAA,AAAAH,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;IAAAM,YAAA,AAAAJ,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAO,qBAAA;AAAA,AAAA,OAAAA,wDAAAN,UAAAG,UAAAC,UAAAC,UAAAN;;;AAAA,AAMA;;;sCAAA,2CAAA,jFAAKgB,kJAGF,WAAK5B;AAAL,AACE,2DAAA,pDAAC6B,8CAAM7B,0GAAsB,KAAA8B;GAJlC,qEAMG,WAAK9B;AAAL,AACE,AAACD,uBAAOC;;AACR,4DAAA,rDAAC+B,+CAAO/B;;AA0Bb,AAAA,2CAAA,mDAAAE,9FAAM8B;AAAN,AAAA,IAAA7B,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA6B,8EAAA,CAAA,UAAA,MAAA1B;;;AAAA,AAAA,CAAA,gFAAA,iBAAA2B,jGAAMD,2FACHhC;AADH,AAAA,IAAAkC,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;cAAA,AAAAE,4CAAAF,gBAAA,tEACmBK;WADnB,AAAAH,4CAAAF,gBAAA,nEAC2BM;8BAD3B,AAAAJ,4CAAAF,gBAAA,tFACgCO;qBADhC,AAAAL,4CAAAF,gBAAA,7EACkDQ;AADlD,AAEE,IAAA,AACE,IAAME,WAAS,AAACC,kBAAa7C;AAA7B,AACE,IAAAwB,qBAAoB,iBAAAsB,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAASF;;;AAA7B,AAAA,oBAAApB;AAAA,AAAA,mBAAAA,fAAWoB;AAAX,AACE,IAAAE,0BAAI,AAAQJ;AAAZ,AAAA,GAAAI;AAAAA;AACI,oCAAA,pCAACtC,uBAAOR,MAAM+C,mBACN,WAAKC;AAAL,AACE,IAAM5B,SAAO,AAAI4B;AAAjB,AAEE,GAAM,EAAK,AAACC,cAAI,AAACC,kBAAaN,aAASxB,cAC5B,AAAC6B,cAAI,0BAAA,1BAAW,AAAa7B;AADxC,AAEE,8FAAA,oFAAA,1KAACmB,wCAAAA,wGAAAA,lEAAQvC,oFAAAA,9EAAMgD,oFAAAA;;AAFjB;;;;;AAGhB,oCAAA,pCAACxC,uBAAOR,MAAM+C,iBACN,WAAKC;AAAL,AACE,IAAAG,YAAM,AAAWH;AAAjB,AAAA,QAAAG;KAAA;AAEK,8FAAA,iFAAA,vKAACZ,wCAAAA,qGAAAA,/DAAQvC,iFAAAA,3EAAMgD,iFAAAA;;;;AAFpB;;;;;AAIV,oBAAMP;AAAN,AACE,2CAAA,pCAACjC,uBAAOR,MAAM+C,0BACN,WAAKC;AAAL,AACE,8FAAA,2GAAA,jMAACT,wCAAAA,+HAAAA,zFAAQvC,2GAAAA,rGAAMgD,2GAAAA;;;AAH3B;;;AAfF;;iBAFJ,GAAA,CAAAL,mBAqBSS;AArBT,SAAAT,LAqBkBU;AArBlB,AAAA;;AAAA,AAAA,MAAAV;;;;;AAFF,CAAA,mEAAA,nEAAMX;;AAAN;AAAA,CAAA,6DAAA,WAAAK,xEAAML;AAAN,AAAA,IAAAM,YAAA,AAAAxB,gBAAAuB;IAAAA,gBAAA,AAAAtB,eAAAsB;AAAA,AAAA,IAAAlB,qBAAA;AAAA,AAAA,OAAAA,wDAAAmB,UAAAD;;;AAAA,AA2BA,AAAA,2BAAA,mCAAAnC,9DAAMoD;AAAN,AAAA,IAAAnD,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAmD,8DAAA,CAAA,UAAA,MAAAhD;;;AAAA,AAAA,CAAA,gEAAA,iBAAAiD,jFAAMD,2EACHtD;AADH,AAAA,IAAAwD,cAAAD;IAAAC,kBAAA,AAAArB,4BAAAqB;eAAA,AAAApB,4CAAAoB,gBAAA,vEACmBG;WADnB,AAAAvB,4CAAAoB,gBAAA,nEAC4BhB;AAD5B,AAEE,IAAMA,WAAK,iBAAAM,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAS,OAACD,kBAAa7C;;;AAAlC,AACE,6CAAA,tCAACQ,uBAAOR,MAAMwC,iBACN,WAAKQ;AAAL,AACE,IAAAY,YAAM,AAAWZ;AAAjB,AAAA,QAAAY;KAAA;AAEK,QAACD,yCAAAA,4CAAAA,LAASX,wBAAAA;;;;AAFf;;;;;;AALd,CAAA,mDAAA,nDAAMM;;AAAN;AAAA,CAAA,6CAAA,WAAAG,xDAAMH;AAAN,AAAA,IAAAI,YAAA,AAAA5C,gBAAA2C;IAAAA,gBAAA,AAAA1C,eAAA0C;AAAA,AAAA,IAAAtC,qBAAA;AAAA,AAAA,OAAAA,wDAAAuC,UAAAD;;;AAAA,AAUA,4BAAA,5BAAMI,gEACH7D,MAAM8D,YAAYC;AADrB,AAEE,2CAAA,pCAACvD,uBAAOR,MAAM+C,eACN,WAAKC;AAAL,AACE,IAAMgB,WAAS,AAAWhB;AAA1B,AACE,IAAAxB,4BAAa,AAACY,4CAAI0B,YAAYE;AAA9B,AAAA,oBAAAxC;AAAA,AAAA,eAAAA,XAAWyC;AAAX,AACE,CAACA,yCAAAA,kDAAAA,XAAEjE,8BAAAA,xBAAMgD,8BAAAA;;AADX;;AAEA,oBAAMe;AAAN,AAAkB,QAACA,4CAAAA,wDAAAA,dAAYf,oCAAAA,lCAAEgB,oCAAAA;;AAAjC;;;;AAEd,AAAA,8BAAA,sCAAA9D,pEAAMiE;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAf,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMe,uEACFnE,MAAM8D;AADV,AAEG,mFAAA,5EAACQ,0DAAYtE,MAAM8D;;;AAFtB,CAAA,4DAAA,6BAAAM,zFAAMD,uEAGFnE,MAAM8D;AAHV,AAAA,IAAAO,cAAAD;IAAAC,kBAAA,AAAAlC,4BAAAkC;0BAAA,AAAAjC,4CAAAiC,gBAAA,lFAG8BE;kBAH9B,AAAAnC,4CAAAiC,gBAAA,1EAGkDN;aAHlD,AAAA3B,4CAAAiC,gBAAA,rEAG8DjD;AAH9D,AAIG,OAACZ,uBAAOR,MAAM,iBAAA8C,mBAAI1B;AAAJ,AAAA,oBAAA0B;AAAAA;;AAAWC;;KAAzB,UACQ,WAAKC;AAAL,AACE,IAAMgB,WAAS,AAAWhB;AAA1B,AACE,IAAAwB,4BAAW,AAACpC,4CAAI0B,YAAYE;AAA5B,AAAA,oBAAAQ;AAAA,eAAAA,XAASP;AAAT,AACE,CAACA,yCAAAA,kDAAAA,XAAEjE,8BAAAA,xBAAMgD,8BAAAA;;AACT,oBAAM,iBAAAyB,oBAAKF;AAAL,AAAA,oBAAAE;AAAyB,OAACC,oBAAIH;;AAA9BE;;;AAAN,AACE,CAACF,oDAAAA,gEAAAA,dAAoBvB,4CAAAA,1CAAEgB,4CAAAA;;AADzB;;;AAEF,oBAAM,iBAAAS,oBAAKV;AAAL,AAAA,oBAAAU;AAAiB,OAACC,oBAAIX;;AAAtBU;;;AAAN,AACE,QAACV,4CAAAA,wDAAAA,dAAYf,oCAAAA,lCAAEgB,oCAAAA;;AADjB;;;;;AAXf,CAAA,sDAAA,tDAAMG;;AAAN,AAcA,AAAA,8BAAA,sCAAAjE,pEAAM0E;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMwB,uEACFC;AADJ,AAEG,OAACC,0DAAYD,iBAAiBE;;;AAFjC,CAAA,4DAAA,5DAAMH,uEAGFC,iBAAiBG;AAHrB,AAIG,kJAAA,2CAAA,tLAACC,uGACArD,qIACO,WAAK5B,MAAMkF;AAAX,AACE,QAACF,8CAAAA,qDAAAA,TAAchF,iCAAAA;GAHzB,8DAIa,WAAKA;AAAL,AACE,CAAC6E,iDAAAA,wDAAAA,TAAiB7E,oCAAAA;;AAClBA;GANf,mEAOe,WAAKmF,UAAUC;AAAf,AACE,AAACrF,uBAAOoF;;AACR,CAACN,iDAAAA,4DAAAA,bAAiBO,wCAAAA;;AAClBA;;;;AAdpB,CAAA,sDAAA,tDAAMR;;AAAN,AAgBA,wBAAA,xBAAMS,wDACHC;AADH,AAEE,OAACR,0DACA,WAAK9E;AAAL,AACE,IAAMuF,cAAM,AAACnD,4CAAIpC,MAAMsF;AAAvB,AACE,6IAAA,tIAACE,8EACAxF,mHACS;AAAA,AACE,oBAAM,iBAAAyE,oBAAKc;AAAL,AAAA,oBAAAd;AAAA,OAAAgB,gBAAYF;;AAAZd;;;AAAN,AACE,yCAAA,lCAACiB,sBAAOH;;AADV;;;GAEhB,WAAKvF;AAAL,AACE,IAAMuF,cAAM,6CAAA,7CAACI;IACPC,YAAU,AAAA,+GAAsB5F;AADtC,AAEE,gCAAA,hCAAC6F,oBAAUN,6FACA,WAAKO,EAAEA,MAAEA,MAAEA;AAAX,AACE,OAACC,wBAAmBH;;;AACjC,kEAAA,qHAAA,hLAAC/D,qDAAM7B,6DACOuF,4HACG;AAAA,AACE,yCAAA,lCAACG,sBAAOH;GAH3B,2DAIgB;AAAA,AACE,yCAAA,lCAACG,sBAAOH;GAL1B,gEAMkB;AAAA,AACE,OAACS,mDAAMT,YAAMtC;;;;AAExC,yCAAA,2CAAA,pFAAKgD,qJAEF,WAAKjG;AAAL,AACE,sDAAA,tDAACkG;;AACDlG;GAJL,qEAMG,WAAKA;AAAL,AACE,sDAAA,tDAACkG;;AACDlG;;AAEL;;;qCAAA,rCAAMmG,kFAEHC;AAFH,AAAA,kDAAA,mEAIG,2DAAiBC;AAAjB,AACE,kBAAKrG;AAAL,AACE,oBAAAsG;AAAA,IAAAC,mBACC,CAAA,sDAAeH;AADhB,AAAA,AAAAI,aAAAD;;AAAA,IAAAE,qBAAA,AAEC,CAACJ,0CAAAA,iDAAAA,TAAUrG,6BAAAA;AAFZ,AAAA,AAAAwG,gBAAAD;;AAAAE;;AAAA,AAEC,QAACJ,0CAAAA,iDAAAA,TAAUrG,6BAAAA","names":["frontend.mixins/detach","state","G__100006","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.mixins/listen","p__100015","vec__100016","cljs.core.nth","seq100009","G__100010","cljs.core/first","cljs.core/next","G__100011","G__100012","G__100013","self__4851__auto__","target","type","handler","opts","temp__5720__auto__","event-handler","cljs.core/name","cljs.core/clj->js","frontend.mixins/event-handler-mixin","cljs.core.assoc","js/goog.events.EventHandler","cljs.core.dissoc","frontend.mixins/hide-when-esc-or-outside","p__100050","map__100051","cljs.core/--destructure-map","cljs.core.get","seq100020","G__100021","on-hide","node","visibilitychange?","outside?","e100053","dom-node","rum.core/dom-node","or__4253__auto__","js/window","e","cljs.core/not","goog.dom/contains","G__100055","js/Error","_e","frontend.mixins/on-enter","p__100061","map__100062","seq100056","G__100057","on-enter","G__100064","frontend.mixins/on-key-up","keycode-map","all-handler","key-code","f","G__100077","frontend.mixins/on-key-down","p__100082","map__100083","frontend.mixins.on_key_down","not-matched-handler","temp__5718__auto__","and__4251__auto__","cljs.core/fn?","G__100085","frontend.mixins/event-mixin","attach-listeners","frontend.mixins.event_mixin","cljs.core/identity","init-callback","cljs.core.merge","_props","old-state","new-state","frontend.mixins/modal","k","open?","frontend.mixins.hide_when_esc_or_outside","cljs.core/deref","cljs.core/reset!","cljs.core.atom","component","cljs.core/add-watch","_","rum.core/request-render","cljs.core.swap_BANG_","frontend.mixins/component-editing-mode","frontend.state/set-block-component-editing-mode!","frontend.mixins/perf-measure-mixin","desc","render-fn","js/goog.DEBUG","k__67556__auto__","js/console","res__67557__auto__"],"sourcesContent":["(ns frontend.mixins\n  (:require [rum.core :as rum]\n            [goog.dom :as dom]\n            [frontend.util :refer [profile]]\n            [frontend.state :as state])\n  (:import [goog.events EventHandler]))\n\n(defn detach\n  \"Detach all event listeners.\"\n  [state]\n  (some-> state ::event-handler .removeAll))\n\n(defn listen\n  \"Register an event `handler` for events of `type` on `target`.\"\n  [state target type handler & [opts]]\n  (when-let [^EventHandler event-handler (::event-handler state)]\n    (.listen event-handler target (name type) handler (clj->js opts))))\n\n(def event-handler-mixin\n  \"The event handler mixin.\"\n  {:will-mount\n   (fn [state]\n     (assoc state ::event-handler (EventHandler.)))\n   :will-unmount\n   (fn [state]\n     (detach state)\n     (dissoc state ::event-handler))})\n\n;; (defn timeout-mixin\n;;   \"The setTimeout mixin.\"\n;;   [name t f]\n;;   {:will-mount\n;;    (fn [state]\n;;      (assoc state name (util/set-timeout t f)))\n;;    :will-unmount\n;;    (fn [state]\n;;      (let [timeout (get state name)]\n;;        (util/clear-timeout timeout)\n;;        (dissoc state name)))})\n\n;; (defn interval-mixin\n;;   \"The setInterval mixin.\"\n;;   [name t f]\n;;   {:will-mount\n;;    (fn [state]\n;;      (assoc state name (util/set-interval t f)))\n;;    :will-unmount\n;;    (fn [state]\n;;      (when-let [interval (get state name)]\n;;        (util/clear-interval interval))\n;;      (dissoc state name))})\n\n(defn hide-when-esc-or-outside\n  [state & {:keys [on-hide node visibilitychange? outside?]}]\n  (try\n    (let [dom-node (rum/dom-node state)]\n      (when-let [dom-node (or node dom-node)]\n        (or (false? outside?)\n            (listen state js/window \"mousedown\"\n                    (fn [e]\n                      (let [target (.. e -target)]\n                        ;; If the click target is outside of current node\n                        (when (and (not (dom/contains dom-node target))\n                                   (not (.contains (.-classList target) \"ignore-outside-event\")))\n                          (on-hide state e :click))))))\n        (listen state js/window \"keydown\"\n                (fn [e]\n                  (case (.-keyCode e)\n                    ;; Esc\n                    27 (on-hide state e :esc)\n                    nil)))\n        (when visibilitychange?\n          (listen state js/window \"visibilitychange\"\n                  (fn [e]\n                    (on-hide state e :visibilitychange))))))\n    (catch js/Error _e\n      ;; TODO: Unable to find node on an unmounted component.\n      nil)))\n\n(defn on-enter\n  [state & {:keys [on-enter node]}]\n  (let [node (or node (rum/dom-node state))]\n    (listen state node \"keyup\"\n            (fn [e]\n              (case (.-keyCode e)\n                ;; Enter\n                13 (on-enter e)\n                nil)))))\n\n(defn on-key-up\n  [state keycode-map all-handler]\n  (listen state js/window \"keyup\"\n          (fn [e]\n            (let [key-code (.-keyCode e)]\n              (when-let [f (get keycode-map key-code)]\n                (f state e))\n              (when all-handler (all-handler e key-code))))))\n\n(defn on-key-down\n  ([state keycode-map]\n   (on-key-down state keycode-map {}))\n  ([state keycode-map {:keys [not-matched-handler all-handler target]}]\n   (listen state (or target js/window) \"keydown\"\n           (fn [e]\n             (let [key-code (.-keyCode e)]\n               (if-let [f (get keycode-map key-code)]\n                 (f state e)\n                 (when (and not-matched-handler (fn? not-matched-handler))\n                   (not-matched-handler e key-code)))\n               (when (and all-handler (fn? all-handler))\n                 (all-handler e key-code)))))))\n\n(defn event-mixin\n  ([attach-listeners]\n   (event-mixin attach-listeners identity))\n  ([attach-listeners init-callback]\n   (merge\n    event-handler-mixin\n    {:init (fn [state _props]\n             (init-callback state))\n     :did-mount (fn [state]\n                  (attach-listeners state)\n                  state)\n     :did-remount (fn [old-state new-state]\n                    (detach old-state)\n                    (attach-listeners new-state)\n                    new-state)})))\n\n(defn modal\n  [k]\n  (event-mixin\n   (fn [state]\n     (let [open? (get state k)]\n       (hide-when-esc-or-outside\n        state\n        :on-hide (fn []\n                   (when (and open? @open?)\n                     (reset! open? false))))))\n   (fn [state]\n     (let [open? (atom false)\n           component (:rum/react-component state)]\n       (add-watch open? ::open\n                  (fn [_ _ _ _]\n                    (rum/request-render component)))\n       (assoc state\n              :open? open?\n              :close-fn (fn []\n                          (reset! open? false))\n              :open-fn (fn []\n                         (reset! open? true))\n              :toggle-fn (fn []\n                           (swap! open? not)))))))\n\n(def component-editing-mode\n  {:will-mount\n   (fn [state]\n     (state/set-block-component-editing-mode! true)\n     state)\n   :will-unmount\n   (fn [state]\n     (state/set-block-component-editing-mode! false)\n     state)})\n\n(defn perf-measure-mixin\n  \"Does performance measurements in development.\"\n  [desc]\n  {:wrap-render\n   (fn wrap-render [render-fn]\n     (fn [state]\n       (profile\n        (str \"Render \" desc)\n        (render-fn state))))})\n"]}