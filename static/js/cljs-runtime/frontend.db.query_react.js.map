{"version":3,"sources":["frontend/db/query_react.cljs"],"mappings":"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","names":["frontend.db.query-react/resolve-input","input","cljs.core._EQ_","frontend.util/time-ms","frontend.util/today-at-local-ms","frontend.db.utils/date->int","cljs-time.core/today","cljs_time.core.minus","cljs_time.core.days","cljs_time.core.plus","G__77192","frontend.state/get-current-page","clojure.string/lower-case","and__4251__auto__","cljs.core/Keyword","frontend.util/safe-re-find","cljs.core/name","days","frontend.util/parse-int","cljs.core.subs","logseq.graph-parser.text/page-ref?","logseq.graph-parser.text/page-ref-un-brackets!","frontend.db.query-react/remove-nested-children-blocks","blocks","ids","cljs.core/set","cljs.core.map","cljs.core.remove","block","id","cljs.core/contains?","frontend.db.query-react/custom-query-result-transform","query-result","remove-blocks","q","e77194","result","frontend.db.utils/seq-flatten","block?","cljs.core/first","cljs.core/seq","h","G__77195","frontend.db.model/sort-by-left-recursive","frontend.db.model/with-pages","temp__5718__auto__","result-transform","f","frontend.extensions.sci/eval-string","cljs.core.pr_str","e77196","frontend.extensions.sci.call_fn","js/Error","e","lambdaisland.glogi.log","cljs.core/identity","frontend.db.query-react/resolve-query","query","p1__77197#","page-ref?","clojure.walk/postwalk","cljs.core/namespace","cljs.core.keyword","cljs.core/list?","cljs.core/count","cljs.core/some","cljs.core/rest","vec__77199","cljs.core.nth","vec__77202","x","y","page-ref","sym","cljs.core/List","p__77207","map__77208","cljs.core/--destructure-map","cljs.core.get","frontend.db.query-react/react-query","repo","inputs","rules","query'","query-opts","pprint","frontend.config/dev?","_","frontend.debug/pprint","resolved-inputs","cljs.core.mapv","G__77210","cljs.core.conj","or__4253__auto__","frontend.state/get-current-repo","k","cljs.core.apply","frontend.db.react/q"],"sourcesContent":["(ns frontend.db.query-react\n  \"Custom queries.\"\n  (:require [cljs-time.core :as t]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [frontend.config :as config]\n            [frontend.db.model :as model]\n            [frontend.db.react :as react]\n            [frontend.db.utils :as db-utils :refer [date->int]]\n            [frontend.debug :as debug]\n            [frontend.extensions.sci :as sci]\n            [frontend.state :as state]\n            [logseq.graph-parser.text :as text]\n            [frontend.util :as util]\n            [lambdaisland.glogi :as log]))\n\n(defn resolve-input\n  [input]\n  (cond\n    (= :right-now-ms input) (util/time-ms)\n    (= :start-of-today-ms input) (util/today-at-local-ms 0 0 0 0)\n    (= :end-of-today-ms input) (util/today-at-local-ms 24 0 0 0)\n\n    (= :today input)\n    (date->int (t/today))\n    (= :yesterday input)\n    (date->int (t/minus (t/today) (t/days 1)))\n    (= :tomorrow input)\n    (date->int (t/plus (t/today) (t/days 1)))\n    (= :current-page input)\n    ;; This sometimes runs when there isn't a current page e.g. :home route\n    (some-> (state/get-current-page) string/lower-case)\n    (and (keyword? input)\n         (util/safe-re-find #\"^\\d+d(-before)?$\" (name input)))\n    (let [input (name input)\n          days (util/parse-int (subs input 0 (dec (count input))))]\n      (date->int (t/minus (t/today) (t/days days))))\n    (and (keyword? input)\n         (util/safe-re-find #\"^\\d+d(-after)?$\" (name input)))\n    (let [input (name input)\n          days (util/parse-int (subs input 0 (dec (count input))))]\n      (date->int (t/plus (t/today) (t/days days))))\n\n    (and (string? input) (text/page-ref? input))\n    (-> (text/page-ref-un-brackets! input)\n        (string/lower-case))\n\n    :else\n    input))\n\n(defn- remove-nested-children-blocks\n  [blocks]\n  (let [ids (set (map :db/id blocks))]\n    (->> blocks\n         (remove\n          (fn [block]\n            (let [id (:db/id (:block/parent block))]\n              (contains? ids id)))))))\n\n(defn custom-query-result-transform\n  [query-result remove-blocks q]\n  (try\n    (let [result (db-utils/seq-flatten query-result)\n          block? (:block/uuid (first result))\n          result (if block?\n                   (let [result (if (seq remove-blocks)\n                                  (let [remove-blocks (set remove-blocks)]\n                                    (remove (fn [h]\n                                              (contains? remove-blocks (:block/uuid h)))\n                                            result))\n                                  result)]\n                     (some->> result\n                              remove-nested-children-blocks\n                              (model/sort-by-left-recursive)\n                              (model/with-pages)))\n                   result)]\n      (if-let [result-transform (:result-transform q)]\n        (if-let [f (sci/eval-string (pr-str result-transform))]\n          (try\n            (sci/call-fn f result)\n            (catch js/Error e\n              (log/error :sci/call-error e)\n              result))\n          result)\n        result))\n    (catch js/Error e\n      (log/error :query/failed e))))\n\n(defn- resolve-query\n  [query]\n  (let [page-ref? #(and (string? %) (text/page-ref? %))]\n    (walk/postwalk\n     (fn [f]\n       (cond\n         ;; backward compatible\n         ;; 1. replace :page/ => :block/\n         (and (keyword? f) (= \"page\" (namespace f)))\n         (keyword \"block\" (name f))\n\n         (and (keyword? f) (contains? #{:block/ref-pages :block/ref-blocks} f))\n         :block/refs\n\n         (and (list? f)\n              (= (first f) '=)\n              (= 3 (count f))\n              (some page-ref? (rest f)))\n         (let [[x y] (rest f)\n               [page-ref sym] (if (page-ref? x) [x y] [y x])\n               page-ref (string/lower-case page-ref)]\n           (list 'contains? sym (text/page-ref-un-brackets! page-ref)))\n\n         :else\n         f)) query)))\n\n(defn react-query\n  [repo {:keys [query inputs rules] :as query'} query-opts]\n  (let [pprint (if config/dev? (fn [_] nil) debug/pprint)]\n    (pprint \"================\")\n    (pprint \"Use the following to debug your datalog queries:\")\n    (pprint query')\n    (let [query (resolve-query query)\n          resolved-inputs (mapv resolve-input inputs)\n          inputs (cond-> resolved-inputs\n                         rules\n                         (conj rules))\n          repo (or repo (state/get-current-repo))\n          k [:custom query']]\n      (pprint \"inputs (post-resolution):\" resolved-inputs)\n      (pprint \"query-opts:\" query-opts)\n      (apply react/q repo k query-opts query inputs))))\n"]}