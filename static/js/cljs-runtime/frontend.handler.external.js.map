{"version":3,"sources":["frontend/handler/external.cljs"],"mappings":"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","names":["frontend.handler.external/index-files!","repo","files","finish-handler","titles","cljs.core.map","cljs.core.remove","cljs.core/nil?","file","title","journal?","frontend.date/valid-journal-title?","temp__5720__auto__","text","or__5043__auto__","frontend.date/journal-title->default","clojure.string/replace","logseq.graph_parser.util.page_name_sanity","path","frontend.config/get-journals-directory","frontend.config/get-pages-directory","frontend.handler.repo/parse-files-and-load-to-db!","p__61292","map__61293","cljs.core/--destructure-map","cljs.core.get","content","frontend.handler.file/alter-files","journal-pages-tx","cljs.core.filter","day","frontend.date/journal-title->int","page-name","G__61294","frontend.util/page-name-sanity-lc","logseq.graph-parser.date-time-util/int->journal-title","frontend.state/get-date-formatter","cljs.core/seq","frontend.db/transact!","frontend.handler.external/import-from-roam-json!","data","finished-ok-handler","frontend.state/get-current-repo","frontend.external/to-markdown-files","frontend.handler.external/import-from-opml!","vec__61295","cljs.core.nth","headers","parsed-blocks","frontend.format.mldoc/opml->edn","frontend.format.block/extract-blocks","cljs.core.mapv","frontend.handler.editor/wrap-parse-block","cljs.core/not","frontend.db/page-exists?","frontend.handler.page.create_BANG_","vec__61298","page-block","G__61301","frontend.db/entity","children","blocks","frontend.db/sort-by-left","last-block","cljs.core/last","snd-last-block","cljs.core/butlast","target-block","sibling?","and__5041__auto__","frontend.handler.editor/paste-blocks","G__61302"],"sourcesContent":["(ns frontend.handler.external\n  (:require [frontend.external :as external]\n            [frontend.handler.file :as file-handler]\n            [frontend.handler.repo :as repo-handler]\n            [frontend.state :as state]\n            [frontend.date :as date]\n            [frontend.config :as config]\n            [clojure.string :as string]\n            [frontend.db :as db]\n            [frontend.format.mldoc :as mldoc]\n            [frontend.format.block :as block]\n            [logseq.graph-parser.util :as gp-util]\n            [logseq.graph-parser.date-time-util :as date-time-util]\n            [frontend.handler.page :as page]\n            [frontend.handler.editor :as editor]\n            [frontend.util :as util]))\n\n(defn index-files!\n  [repo files finish-handler]\n  (let [titles (->> files\n                    (map :title)\n                    (remove nil?))\n        files (map (fn [file]\n                     (let [title (:title file)\n                           journal? (date/valid-journal-title? title)]\n                       (when-let [text (:text file)]\n                         (let [title (or\n                                      (when journal?\n                                        (date/journal-title->default title))\n                                      (string/replace title \"/\" \"-\"))\n                               title (-> (gp-util/page-name-sanity title)\n                                         (string/replace \"\\n\" \" \"))\n                               path (str (if journal?\n                                           (config/get-journals-directory)\n                                           (config/get-pages-directory))\n                                         \"/\"\n                                         title\n                                         \".md\")]\n                           {:file/path path\n                            :file/content text}))))\n                   files)\n        files (remove nil? files)]\n    (repo-handler/parse-files-and-load-to-db! repo files nil)\n    (let [files (->> (map (fn [{:file/keys [path content]}] (when path [path content])) files)\n                     (remove nil?))]\n      (file-handler/alter-files repo files {:add-history? false\n                                            :update-db? false\n                                            :update-status? false\n                                            :finish-handler finish-handler}))\n    (let [journal-pages-tx (let [titles (filter date/valid-journal-title? titles)]\n                             (map\n                              (fn [title]\n                                (let [day (date/journal-title->int title)\n                                      page-name (util/page-name-sanity-lc (date-time-util/int->journal-title day (state/get-date-formatter)))]\n                                  {:block/name page-name\n                                   :block/journal? true\n                                   :block/journal-day day}))\n                              titles))]\n      (when (seq journal-pages-tx)\n        (db/transact! repo journal-pages-tx)))))\n\n(defn import-from-roam-json!\n  [data finished-ok-handler]\n  (when-let [repo (state/get-current-repo)]\n    (let [files (external/to-markdown-files :roam data {})]\n      (index-files! repo files\n                    (fn []\n                      (finished-ok-handler))))))\n\n\n;;; import OPML files\n(defn import-from-opml!\n  [data finished-ok-handler]\n  #_:clj-kondo/ignore\n  (when-let [repo (state/get-current-repo)]\n    (let [[headers parsed-blocks] (mldoc/opml->edn data)\n          parsed-blocks (->>\n                         (block/extract-blocks parsed-blocks \"\" true :markdown)\n                         (mapv editor/wrap-parse-block))\n          page-name (:title headers)]\n      (when (not (db/page-exists? page-name))\n        (page/create! page-name {:redirect? false}))\n      (let [page-block (db/entity [:block/name (util/page-name-sanity-lc page-name)])\n            children (:block/_parent page-block)\n            blocks (db/sort-by-left children page-block)\n            last-block (last blocks)\n            snd-last-block (last (butlast blocks))\n            [target-block sibling?] (if (and last-block (seq (:block/content last-block)))\n                                      [last-block true]\n                                      (if snd-last-block\n                                        [snd-last-block true]\n                                        [page-block false]))]\n        (editor/paste-blocks\n         parsed-blocks\n         {:target-block target-block\n          :sibling? sibling?})\n        (finished-ok-handler [page-name])))))\n"]}