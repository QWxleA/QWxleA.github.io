{"version":3,"sources":["frontend/extensions/sci.cljs"],"mappings":";AAIA,AAAKA,8BAAI,AAACC,gDAAQC,gBAAMC;AAExB,kCAAA,lCAAMC,4EAASC;AAAf,AACE,QAAG,AAACC,+CAAOH,iBAAEE,QAAM,AAACE,gBAAMF;;AAE5B,sCAAA,tCAAMG,oFACHC;AADH,AAEE,IAAA,AACE,4DAAA,2CAAA,6DAAA,2CAAA,AAAA,mFAAA,AAAA,+FAAA,AAAA,gFAAA,AAAA,1cAACE,mDAAgBF,4MAAmBT,2FACII,qGACGQ,oEACLC;gBAJxC,GAAA,CAAAH,kBAKSI;AALT,QAAAJ,JAKkBK;AALlB,AAMI,yGAAA,zGAACC;;AACD,OAACC,cAAiBF;;AAPtB,AAAA,MAAAL;;;;AASF,AAAA,kCAAA,0CAAAQ,5EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,qEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,uEAAA,vEAAME,kFACHM,EAAIC;AADP,AAEE,OAACC,8CAAMF,EAAEC;;;AAFX,CAAA,0DAAA,1DAAMP;;AAAN;AAAA,CAAA,oDAAA,WAAAC,/DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAIA,sCAAA,tCAAMQ,oFACHC;AADH,AAAA,0FAAA,mDAAA,mFAAA,qDAAA,mBAAA,mFAAA,8EAAA,mFAAA,6DAMK,iBAAMC,SAAO,AAAC3B,oCAAY0B;AAA1B,AACE,mDAAKC","names":["frontend.extensions.sci/sum","cljs.core.partial","cljs.core/apply","cljs.core/+","frontend.extensions.sci/average","coll","cljs.core.reduce","cljs.core/count","frontend.extensions.sci/eval-string","s","e88086","sci.core.eval_string","js/parseFloat","js/isNaN","js/Error","e","cljs.core.println","js/console.error","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","frontend.extensions.sci/call-fn","seq88087","G__88088","cljs.core/first","cljs.core/next","self__4851__auto__","f","args","cljs.core.apply","frontend.extensions.sci/eval-result","code","result"],"sourcesContent":["(ns frontend.extensions.sci\n  (:require [sci.core :as sci]))\n\n;; Some helpers\n(def sum (partial apply +))\n\n(defn average [coll]\n  (/ (reduce + coll) (count coll)))\n\n(defn eval-string\n  [s]\n  (try\n    (sci/eval-string s {:bindings {'sum sum\n                                   'average average\n                                   'parseFloat js/parseFloat\n                                   'isNaN js/isNaN}})\n    (catch js/Error e\n      (println \"Query: sci eval failed:\")\n      (js/console.error e))))\n\n(defn call-fn\n  [f & args]\n  (apply f args))\n\n(defn eval-result\n  [code]\n  [:div\n   [:code \"Results:\"]\n   [:div.results.mt-1\n    [:pre.code\n     (let [result (eval-string code)]\n       (str result))]]])\n"]}