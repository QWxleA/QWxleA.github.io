{"version":3,"sources":["logseq/graph_parser/date_time_util.cljs"],"mappings":";AAQA;;;6CAAA,7CAAMA;AAAN,AAGE,OAACC,yBAAW,AAACC;;AAGf,mEAAA,nEAAMC,8IACHC;AADH,AAEE,sNAAMA,9JACD,2EAAA,kGAAA,eAAA,aAAA,zMAACC,+CAAOC,hGACRC;;AAEP,wDAAA,xDAAMC,wHACHC,cAAcC,QAAQC;AADzB,AAEE,GAAU,AAACL,4BAAcG;AAAzB;;AAAA,AACE,IAAAG,qBAAgB,qFAAK,AAACE,4CACA,WAAKC,5HAMN,AAACO,+CAAOC,/DACRC;AAPC,AACE,IAAA,AACE,OAACP,qDAAS,AAACC,yDAAaH,WAAW,AAACI,wCAAuBV;gBAD7D,GAAA,CAAAO,kBAESI;AAFT,SAAAJ,LAEkBK;AAFlB,AAAA;;AAAA,AAAA,MAAAL;;;IAIFL;AANtB,AAAA,oBAAAC;AAAA,AAAA,WAAAA,PAAWC;AAAX,AASE,QAACH,wCAAAA,8CAAAA,RAAQG,0BAAAA;;AATX;;;;AAWJ,2DAAA,3DAAMY,8HACHhB,cAAcE;AADjB,AAEE,oBAAMF;AAAN,AACE,IAAMA,oBAAc,AAACU,wCAAuBV;AAA5C,AACE,+EAAA,WAAAiB,nFAAClB,sDAAgBC;AAAjB,AACkB,OAACkB,qBAAW,8FAAAD,9FAACE,yBAAW,yDAAA,zDAACV;GAC1BP;;AAJrB;;;AAMF,4CAAA,5CAAMkB,gGACHC,KAAK1B;AADR,AAEE,oBAAMA;AAAN,AACE,OAACwB,yBAAW,AAACV,yDAAad,gBAAgB0B;;AAD5C;;;AAGF,2DAAA,3DAAMC,8HACHC,IAAI5B;AADP,AAEE,oBAAM4B;AAAN,AACE,OAACH,0CAAO,AAACZ,qDAAS,yDAAA,zDAACC,qEAAyB,4CAAKc,MAAM5B;;AADzD","names":["logseq.graph-parser.date-time-util/time-ms","cljs-time.coerce/to-long","cljs-time.core/now","logseq.graph-parser.date-time-util/safe-journal-title-formatters","date-formatter","cljs.core.remove","clojure.string/blank?","cljs.core.distinct","logseq.graph-parser.date-time-util/journal-title->","journal-title","then-fn","formatters","temp__5720__auto__","time","cljs.core.map","formatter","e58759","cljs_time.format.parse","cljs_time.format.formatter","logseq.graph-parser.util/capitalize-all","js/Error","_e","cljs.core.filter","cljs.core/some?","cljs.core/first","logseq.graph-parser.date-time-util/journal-title->int","p1__58760#","cljs.core/parse-long","cljs-time.format/unparse","logseq.graph-parser.date-time-util/format","date","logseq.graph-parser.date-time-util/int->journal-title","day"],"sourcesContent":["(ns ^:nbb-compatible logseq.graph-parser.date-time-util\n  \"cljs-time util fns for graph-parser\"\n  (:require [cljs-time.coerce :as tc]\n            [cljs-time.core :as t]\n            [cljs-time.format :as tf]\n            [clojure.string :as string]\n            [logseq.graph-parser.util :as gp-util]))\n\n(defn time-ms\n  \"Copy of util/time-ms. Too basic to couple this to main app\"\n  []\n  (tc/to-long (t/now)))\n\n;; (tf/parse (tf/formatter \"dd.MM.yyyy\") \"2021Q4\") => 20040120T000000\n(defn safe-journal-title-formatters\n  [date-formatter]\n  (->> [date-formatter \"MMM do, yyyy\" \"yyyy-MM-dd\" \"yyyy_MM_dd\"]\n       (remove string/blank?)\n       distinct))\n\n(defn journal-title->\n  [journal-title then-fn formatters]\n  (when-not (string/blank? journal-title)\n    (when-let [time (->> (map\n                          (fn [formatter]\n                            (try\n                              (tf/parse (tf/formatter formatter) (gp-util/capitalize-all journal-title))\n                              (catch js/Error _e\n                                nil)))\n                          formatters)\n                         (filter some?)\n                         first)]\n      (then-fn time))))\n\n(defn journal-title->int\n  [journal-title formatters]\n  (when journal-title\n    (let [journal-title (gp-util/capitalize-all journal-title)]\n      (journal-title-> journal-title\n                       #(parse-long (tf/unparse (tf/formatter \"yyyyMMdd\") %))\n                       formatters))))\n\n(defn format\n  [date date-formatter]\n  (when date-formatter\n    (tf/unparse (tf/formatter date-formatter) date)))\n\n(defn int->journal-title\n  [day date-formatter]\n  (when day\n    (format (tf/parse (tf/formatter \"yyyyMMdd\") (str day)) date-formatter)))\n"]}