{"version":3,"sources":["rewrite_cljc/custom_zipper/utils.cljc"],"mappings":"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","names":["p__78664","vec__78665","cljs.core.nth","rewrite-cljc.custom-zipper.utils/update-in-path","node","path","loc","k","f","v","cljs.core.get","cljs.core/seq","cljs.core/with-meta","cljs.core.assoc","cljs.core/meta","rewrite-cljc.custom-zipper.utils/remove-right","rewrite-cljc.custom-zipper.core/custom-zipper?","map__78668","cljs.core/--destructure-map","vec__78669","seq__78670","first__78671","cljs.core/first","cljs.core/next","_r","rs","rewrite-cljc.custom-zipper.utils/remove-left","map__78672","left","temp__5718__auto__","vec__78673","_","lpos","cljs.core/peek","cljs.core/pop","rewrite-cljc.custom-zipper.utils/remove-right-while","zloc","p?","rloc","rewrite-cljc.custom-zipper.core/right","rewrite-cljc.custom-zipper.utils/remove-left-while","lloc","rewrite-cljc.custom-zipper.core/left","rewrite-cljc.custom-zipper.utils/remove-and-move-left","map__78676","vec__78677","lnode","vec__78680","map__78683","l","cljs.core.update_in","rewrite-cljc.custom-zipper.utils/remove-and-move-right","map__78684","right","vec__78685","map__78688","r","rewrite-cljc.custom-zipper.utils/remove-and-move-up","map__78689","rewrite-cljc.custom-zipper.core/remove","rewrite-cljc.custom-zipper.core/up","vec__78690","map__78693","_node","ppath","pnodes","cljs.core.ex_info","cljs.core/count","rewrite-cljc.custom-zipper.core/make-node","and__5041__auto__"],"sourcesContent":["(ns ^:no-doc rewrite-cljc.custom-zipper.utils\n  (:require [rewrite-cljc.custom-zipper.core :as z]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Remove\n\n(defn- update-in-path\n  [[node path :as loc] k f]\n  (let [v (get path k)]\n    (if (seq v)\n      (with-meta\n        [node (assoc path k (f v) :changed? true)]\n        (meta loc))\n      loc)))\n\n(defn remove-right\n  \"Remove right sibling of the current node (if there is one).\"\n  [loc]\n  (if (z/custom-zipper? loc)\n    (let [{[_r & rs] :right} loc]\n      (assoc loc\n             :right rs\n             :changed? true))\n    (update-in-path loc :r next)))\n\n(defn remove-left\n  \"Remove left sibling of the current node (if there is one).\"\n  [loc]\n  (if (z/custom-zipper? loc)\n    (let [{:keys [left]} loc]\n      (if-let [[_ lpos] (peek left)]\n        (assoc loc\n               :left (pop left)\n               :position lpos\n               :changed? true)\n        loc))\n    (update-in-path loc :l pop)))\n\n(defn remove-right-while\n  \"Remove elements to the right of the current zipper location as long as\n   the given predicate matches.\"\n  [zloc p?]\n  (loop [zloc zloc]\n    (if-let [rloc (z/right zloc)]\n      (if (p? rloc)\n        (recur (remove-right zloc))\n        zloc)\n      zloc)))\n\n(defn remove-left-while\n  \"Remove elements to the left of the current zipper location as long as\n   the given predicate matches.\"\n  [zloc p?]\n  (loop [zloc zloc]\n    (if-let [lloc (z/left zloc)]\n      (if (p? lloc)\n        (recur (remove-left zloc))\n        zloc)\n      zloc)))\n\n;; ## Remove and Move\n\n(defn remove-and-move-left\n  \"Remove current node and move left. If current node is at the leftmost\n   location, returns `nil`.\"\n  [loc]\n  (if (z/custom-zipper? loc)\n    (let [{:keys [left]} loc]\n      (when (seq left)\n        (let [[lnode lpos] (peek left)]\n          (assoc loc\n                 :changed? true\n                 :node lnode\n                 :position lpos\n                 :left (pop left)))))\n    (let [[_ {:keys [l] :as path}] loc]\n      (when (seq l)\n        (with-meta\n          [(peek l) (-> path\n                        (update-in [:l] pop)\n                        (assoc :changed? true))]\n          (meta loc))))))\n\n(defn remove-and-move-right\n  \"Remove current node and move right. If current node is at the rightmost\n   location, returns `nil`.\"\n  [loc]\n  (if (z/custom-zipper? loc)\n    (let [{:keys [right]} loc]\n      (when (seq right)\n        (assoc loc\n               :changed? true\n               :node (first right)\n               :right (next right))))\n\n    (let [[_ {:keys [r] :as path}] loc]\n      (when (seq r)\n        (with-meta\n          [(first r) (-> path\n                         (update-in [:r] next)\n                         (assoc :changed? true))]\n          (meta loc))))))\n\n(defn remove-and-move-up\n  \"Remove the current node and move up.\n    `[a [b |c d]] -> [a |[b d]]`\n    `[a [|b c d]] -> [a |[c d]]`\"\n  [loc]\n  (if (z/custom-zipper? loc)\n    (let [{:keys [left]} loc]\n      (if (seq left)\n        (-> loc z/remove z/up)\n        (z/remove loc)))\n    (let [[_node {l :l, ppath :ppath, pnodes :pnodes, rs :r, :as path}] loc]\n      (if (nil? ppath)\n        (throw (ex-info \"cannot remove at top\" {}))\n        (if (pos? (count l))\n          (z/up (with-meta [(peek l)\n                            (assoc path :l (pop l) :changed? true)]\n                  (meta loc)))\n          (with-meta [(z/make-node loc (peek pnodes) rs)\n                      (and ppath (assoc ppath :changed? true))]\n            (meta loc)))))))\n"]}