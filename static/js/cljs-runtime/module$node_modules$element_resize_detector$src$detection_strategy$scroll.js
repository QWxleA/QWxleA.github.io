shadow$provide.module$node_modules$element_resize_detector$src$detection_strategy$scroll=function(global,require,module,exports){var forEach=require("module$node_modules$element_resize_detector$src$collection_utils").forEach;module.exports=function(options$jscomp$0){function initDocument(targetDocument){injectScrollStyle(targetDocument,"erd_scroll_detection_scrollbar_style","erd_scroll_detection_container")}function buildCssTextString(rules){var seperator=options$jscomp$0.important?" !important; ":
"; ";return(rules.join(seperator)+seperator).trim()}function injectScrollStyle(targetDocument,styleId,containerClass){function injectStyle(style,method){method=method||function(element){targetDocument.head.appendChild(element)};var styleElement=targetDocument.createElement("style");styleElement.innerHTML=style;styleElement.id=styleId;method(styleElement);return styleElement}if(!targetDocument.getElementById(styleId)){var containerAnimationClass=containerClass+"_animation",containerAnimationActiveClass=
containerClass+"_animation_active";containerClass="/* Created by the element-resize-detector library. */\n."+(containerClass+" \x3e div::-webkit-scrollbar { "+buildCssTextString(["display: none"])+" }\n\n");containerClass+="."+containerAnimationActiveClass+" { "+buildCssTextString(["-webkit-animation-duration: 0.1s","animation-duration: 0.1s","-webkit-animation-name: "+containerAnimationClass,"animation-name: "+containerAnimationClass])+" }\n";injectStyle(containerClass+("@-webkit-keyframes "+containerAnimationClass+
" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n@keyframes ")+(containerAnimationClass+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }"))}}function addEvent(el,name,cb){if(el.addEventListener)el.addEventListener(name,cb);else if(el.attachEvent)el.attachEvent("on"+name,cb);else return reporter$jscomp$0.error("[scroll] Don't know how to add event listeners.")}function removeEvent(el,name,cb){if(el.removeEventListener)el.removeEventListener(name,cb);else if(el.detachEvent)el.detachEvent("on"+
name,cb);else return reporter$jscomp$0.error("[scroll] Don't know how to remove event listeners.")}function getExpandElement(element){return getState(element).container.childNodes[0].childNodes[0].childNodes[0]}function getShrinkElement(element){return getState(element).container.childNodes[0].childNodes[0].childNodes[1]}options$jscomp$0=options$jscomp$0||{};var reporter$jscomp$0=options$jscomp$0.reporter,batchProcessor=options$jscomp$0.batchProcessor,getState=options$jscomp$0.stateHandler.getState,
idHandler=options$jscomp$0.idHandler;if(!batchProcessor)throw Error("Missing required dependency: batchProcessor");if(!reporter$jscomp$0)throw Error("Missing required dependency: reporter.");var scrollbarSizes=function(){var child=document.createElement("div");child.style.cssText=buildCssTextString("position: absolute;width: 1000px;height: 1000px;visibility: hidden;margin: 0;padding: 0".split(";"));var container=document.createElement("div");container.style.cssText=buildCssTextString("position: absolute;width: 500px;height: 500px;overflow: scroll;visibility: none;top: -1500px;left: -1500px;visibility: hidden;margin: 0;padding: 0".split(";"));
container.appendChild(child);document.body.insertBefore(container,document.body.firstChild);child=500-container.clientWidth;var heightSize=500-container.clientHeight;document.body.removeChild(container);return{width:child,height:heightSize}}();initDocument(window.document);return{makeDetectable:function(options,element$jscomp$0,callback){function debug(){if(options.debug){var args=Array.prototype.slice.call(arguments);args.unshift(idHandler.get(element$jscomp$0),"Scroll: ");if(reporter$jscomp$0.log.apply)reporter$jscomp$0.log.apply(null,
args);else for(var i=0;i<args.length;i++)reporter$jscomp$0.log(args[i])}}function isUnrendered(element){element=getState(element).container.childNodes[0];element=window.getComputedStyle(element);return!element.width||-1===element.width.indexOf("px")}function getStyle(){var elementStyle=window.getComputedStyle(element$jscomp$0),style={};style.position=elementStyle.position;style.width=element$jscomp$0.offsetWidth;style.height=element$jscomp$0.offsetHeight;style.top=elementStyle.top;style.right=elementStyle.right;
style.bottom=elementStyle.bottom;style.left=elementStyle.left;style.widthCSS=elementStyle.width;style.heightCSS=elementStyle.height;return style}function storeStyle(){debug("storeStyle invoked.");if(getState(element$jscomp$0)){var style=getStyle();getState(element$jscomp$0).style=style}else debug("Aborting because element has been uninstalled")}function storeCurrentSize(element,width,height){getState(element).lastWidth=width;getState(element).lastHeight=height}function positionScrollbars(element,
width,height){var expand=getExpandElement(element);element=getShrinkElement(element);var expandHeight=height+10+(2*scrollbarSizes.height+1),shrinkWidth=2*width+(2*scrollbarSizes.width+1);height=2*height+(2*scrollbarSizes.height+1);expand.scrollLeft=width+10+(2*scrollbarSizes.width+1);expand.scrollTop=expandHeight;element.scrollLeft=shrinkWidth;element.scrollTop=height}function injectContainerElement(){var container=getState(element$jscomp$0).container;if(!container){container=document.createElement("div");
container.className="erd_scroll_detection_container";container.style.cssText=buildCssTextString("visibility: hidden;display: inline;width: 0px;height: 0px;z-index: -1;overflow: hidden;margin: 0;padding: 0".split(";"));getState(element$jscomp$0).container=container;container.className+=" erd_scroll_detection_container_animation_active";element$jscomp$0.appendChild(container);var onAnimationStart=function(){getState(element$jscomp$0).onRendered&&getState(element$jscomp$0).onRendered()};addEvent(container,
"animationstart",onAnimationStart);getState(element$jscomp$0).onAnimationStart=onAnimationStart}return container}function injectScrollElements(){function onExpandScroll(){var state=getState(element$jscomp$0);if(state&&state.onExpand)state.onExpand();else debug("Aborting expand scroll handler: element has been uninstalled")}function onShrinkScroll(){var state=getState(element$jscomp$0);if(state&&state.onShrink)state.onShrink();else debug("Aborting shrink scroll handler: element has been uninstalled")}
debug("Injecting elements");if(getState(element$jscomp$0)){(function(){var style$jscomp$0=getState(element$jscomp$0).style;if("static"===style$jscomp$0.position){element$jscomp$0.style.setProperty("position","relative",options.important?"important":"");var removeRelativeStyles=function(reporter,element,style,property){style=style[property];"auto"!==style&&"0"!==style.replace(/[^-\d\.]/g,"")&&(reporter.warn("An element that is positioned static has style."+property+"\x3d"+style+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+
property+" will be set to 0. Element: ",element),element.style[property]=0)};removeRelativeStyles(reporter$jscomp$0,element$jscomp$0,style$jscomp$0,"top");removeRelativeStyles(reporter$jscomp$0,element$jscomp$0,style$jscomp$0,"right");removeRelativeStyles(reporter$jscomp$0,element$jscomp$0,style$jscomp$0,"bottom");removeRelativeStyles(reporter$jscomp$0,element$jscomp$0,style$jscomp$0,"left")}})();var rootContainer=getState(element$jscomp$0).container;rootContainer||=injectContainerElement();var scrollbarWidth=
scrollbarSizes.width,scrollbarHeight=scrollbarSizes.height,containerContainerStyle=buildCssTextString("position: absolute;flex: none;overflow: hidden;z-index: -1;visibility: hidden;width: 100%;height: 100%;left: 0px;top: 0px".split(";"));scrollbarWidth=buildCssTextString(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden"].concat(function(left,top,bottom,right){return["left: "+(left?left+"px":"0"),"top: "+(top?top+"px":"0"),"right: "+(right?right+"px":"0"),"bottom: "+
(bottom?bottom+"px":"0")]}(-(1+scrollbarWidth),-(1+scrollbarHeight),-scrollbarHeight,-scrollbarWidth)));scrollbarHeight=buildCssTextString("position: absolute;flex: none;overflow: scroll;z-index: -1;visibility: hidden;width: 100%;height: 100%".split(";"));var shrinkStyle=buildCssTextString("position: absolute;flex: none;overflow: scroll;z-index: -1;visibility: hidden;width: 100%;height: 100%".split(";")),expandChildStyle=buildCssTextString(["position: absolute","left: 0","top: 0"]),shrinkChildStyle=
buildCssTextString(["position: absolute","width: 200%","height: 200%"]),containerContainer=document.createElement("div"),container=document.createElement("div"),expand=document.createElement("div"),expandChild=document.createElement("div"),shrink=document.createElement("div"),shrinkChild=document.createElement("div");containerContainer.dir="ltr";containerContainer.style.cssText=containerContainerStyle;containerContainer.className="erd_scroll_detection_container";container.className="erd_scroll_detection_container";
container.style.cssText=scrollbarWidth;expand.style.cssText=scrollbarHeight;expandChild.style.cssText=expandChildStyle;shrink.style.cssText=shrinkStyle;shrinkChild.style.cssText=shrinkChildStyle;expand.appendChild(expandChild);shrink.appendChild(shrinkChild);container.appendChild(expand);container.appendChild(shrink);containerContainer.appendChild(container);rootContainer.appendChild(containerContainer);addEvent(expand,"scroll",onExpandScroll);addEvent(shrink,"scroll",onShrinkScroll);getState(element$jscomp$0).onExpandScroll=
onExpandScroll;getState(element$jscomp$0).onShrinkScroll=onShrinkScroll}else debug("Aborting because element has been uninstalled")}function registerListenersAndPositionElements(){function updateChildSizes(element,width,height){element=getExpandElement(element).childNodes[0];height=height+10+(2*scrollbarSizes.height+1);element.style.setProperty("width",width+10+(2*scrollbarSizes.width+1)+"px",options.important?"important":"");element.style.setProperty("height",height+"px",options.important?"important":
"")}function updateDetectorElements(done){var width=element$jscomp$0.offsetWidth,height=element$jscomp$0.offsetHeight,sizeChanged=width!==getState(element$jscomp$0).lastWidth||height!==getState(element$jscomp$0).lastHeight;debug("Storing current size",width,height);storeCurrentSize(element$jscomp$0,width,height);batchProcessor.add(0,function(){if(sizeChanged)if(getState(element$jscomp$0))if(getState(element$jscomp$0).container){if(options.debug){var h=element$jscomp$0.offsetHeight;element$jscomp$0.offsetWidth===
width&&h===height||reporter$jscomp$0.warn(idHandler.get(element$jscomp$0),"Scroll: Size changed before updating detector elements.")}updateChildSizes(element$jscomp$0,width,height)}else debug("Aborting because element container has not been initialized");else debug("Aborting because element has been uninstalled")});batchProcessor.add(1,function(){getState(element$jscomp$0)?getState(element$jscomp$0).container?positionScrollbars(element$jscomp$0,width,height):debug("Aborting because element container has not been initialized"):
debug("Aborting because element has been uninstalled")});sizeChanged&&done&&batchProcessor.add(2,function(){getState(element$jscomp$0)?getState(element$jscomp$0).container?done():debug("Aborting because element container has not been initialized"):debug("Aborting because element has been uninstalled")})}function notifyListenersIfNeeded(){debug("notifyListenersIfNeeded invoked");var state=getState(element$jscomp$0);if(void 0===getState(element$jscomp$0).lastNotifiedWidth&&state.lastWidth===state.startSize.width&&
state.lastHeight===state.startSize.height)return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");if(state.lastWidth===state.lastNotifiedWidth&&state.lastHeight===state.lastNotifiedHeight)return debug("Not notifying: Size already notified");debug("Current size not notified, notifying...");state.lastNotifiedWidth=state.lastWidth;state.lastNotifiedHeight=state.lastHeight;forEach(getState(element$jscomp$0).listeners,function(listener){listener(element$jscomp$0)})}
function handleScroll(){debug("Scroll detected.");isUnrendered(element$jscomp$0)?debug("Scroll event fired while unrendered. Ignoring..."):updateDetectorElements(notifyListenersIfNeeded)}debug("registerListenersAndPositionElements invoked.");if(getState(element$jscomp$0)){getState(element$jscomp$0).onRendered=function(){debug("startanimation triggered.");if(isUnrendered(element$jscomp$0))debug("Ignoring since element is still unrendered...");else{debug("Element rendered.");var expand=getExpandElement(element$jscomp$0),
shrink=getShrinkElement(element$jscomp$0);if(0===expand.scrollLeft||0===expand.scrollTop||0===shrink.scrollLeft||0===shrink.scrollTop)debug("Scrollbars out of sync. Updating detector elements..."),updateDetectorElements(notifyListenersIfNeeded)}};getState(element$jscomp$0).onExpand=handleScroll;getState(element$jscomp$0).onShrink=handleScroll;var style=getState(element$jscomp$0).style;updateChildSizes(element$jscomp$0,style.width,style.height)}else debug("Aborting because element has been uninstalled")}
function finalizeDomMutation(){debug("finalizeDomMutation invoked.");if(getState(element$jscomp$0)){var style=getState(element$jscomp$0).style;storeCurrentSize(element$jscomp$0,style.width,style.height);positionScrollbars(element$jscomp$0,style.width,style.height)}else debug("Aborting because element has been uninstalled")}function ready(){callback(element$jscomp$0)}function install(){debug("Installing...");getState(element$jscomp$0).listeners=[];var style=getStyle();getState(element$jscomp$0).startSize=
{width:style.width,height:style.height};debug("Element start size",getState(element$jscomp$0).startSize);batchProcessor.add(0,storeStyle);batchProcessor.add(1,injectScrollElements);batchProcessor.add(2,registerListenersAndPositionElements);batchProcessor.add(3,finalizeDomMutation);batchProcessor.add(4,ready)}callback||(callback=element$jscomp$0,element$jscomp$0=options,options=null);options=options||{};debug("Making detectable...");(function(element){var isInShadowRoot=element.getRootNode&&element.getRootNode().contains(element);
return(element===element.ownerDocument.body||element.ownerDocument.body.contains(element)||isInShadowRoot)&&null!==window.getComputedStyle(element)?!1:!0})(element$jscomp$0)?(debug("Element is detached"),injectContainerElement(),debug("Waiting until element is attached..."),getState(element$jscomp$0).onRendered=function(){debug("Element is now attached");install()}):install()},addListener:function(element,listener){if(!getState(element).listeners.push)throw Error("Cannot add listener to an element that is not detectable.");
getState(element).listeners.push(listener)},uninstall:function(element){var state=getState(element);state&&(state.onExpandScroll&&removeEvent(getExpandElement(element),"scroll",state.onExpandScroll),state.onShrinkScroll&&removeEvent(getShrinkElement(element),"scroll",state.onShrinkScroll),state.onAnimationStart&&removeEvent(state.container,"animationstart",state.onAnimationStart),state.container&&element.removeChild(state.container))},initDocument}}}
//# sourceMappingURL=module$node_modules$element_resize_detector$src$detection_strategy$scroll.js.map
