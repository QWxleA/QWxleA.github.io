{"version":3,"sources":["frontend/handler/metadata.cljs"],"mappings":"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","names":["frontend.handler.metadata/default-metadata-str","frontend.handler.metadata/set-metadata!","k","v","temp__5720__auto__","repo","frontend.state/get-current-repo","encrypted?","cljs.core._EQ_","path","frontend.config.get_metadata_path","file-content","frontend.db/get-file","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","_","frontend.handler.file/create-metadata-file","metadata-str","or__5043__auto__","metadata","e50976","cljs.reader.read_string","js/Error","e","cljs.core.println","js/console.dir","new-metadata","cljs.core.update","ks","cljs.core/vector?","cljs.core/assoc-in","cljs.core.assoc","new-content","cljs.core.pr_str","frontend.handler.file/set-file-content!","frontend.handler.metadata/set-pages-metadata!","frontend.config.get_pages_metadata_path","all-pages","frontend.db/get-all-pages","frontend.handler.common/fix-pages-timestamps","p1__50978#","cljs.core.map","cljs.core/select-keys","cljs.core.sort_by","cljs.core/vec","frontend.handler.file/create-pages-metadata-file","promesa.core.catch$","sb__5687__auto__","goog.string/StringBuffer","*print-newline*-orig-val__50979","cljs.core/*print-newline*","*print-fn*-orig-val__50980","cljs.core/*print-fn*","*print-newline*-temp-val__50981","*print-fn*-temp-val__50982","x__5688__auto__","cljs.pprint.pprint","frontend.fs/write-file!","frontend.config/get-repo-dir","frontend.handler.metadata/set-db-encrypted-secret!","encrypted-secret","clojure.string/blank?","frontend.handler.metadata/handler-properties!","all-properties","properties-tx","cljs.core.reduce","acc","datom","id","cljs.core.get","added?","datascript.db/datom-added","remove-all-properties?","cljs.core/not","cljs.core/count","cljs.core.dissoc","frontend.handler.metadata/update-properties!","p1__50984#"],"sourcesContent":["(ns frontend.handler.metadata\n  (:require [cljs.reader :as reader]\n            [cljs.pprint]\n            [clojure.string :as string]\n            [datascript.db :as ddb]\n            [frontend.config :as config]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.handler.common :as common-handler]\n            [frontend.handler.file :as file-handler]\n            [frontend.state :as state]\n            [promesa.core :as p]))\n\n(def default-metadata-str \"{}\")\n\n(defn set-metadata!\n  [k v]\n  (when-let [repo (state/get-current-repo)]\n    (let [encrypted? (= k :db/encrypted-secret)\n          path (config/get-metadata-path)\n          file-content (db/get-file path)]\n      (p/let [_ (file-handler/create-metadata-file repo false)]\n        (let [metadata-str (or file-content default-metadata-str)\n              metadata (try\n                         (reader/read-string metadata-str)\n                         (catch js/Error e\n                           (println \"Parsing metadata.edn failed: \")\n                           (js/console.dir e)\n                           {}))\n              new-metadata (cond\n                             (= k :block/properties)\n                             (update metadata :block/properties v) ; v should be a function\n                             :else\n                             (let [ks (if (vector? k) k [k])]\n                               (assoc-in metadata ks v)))\n              new-metadata (if encrypted?\n                             (assoc new-metadata :db/encrypted? true)\n                             new-metadata)\n              new-content (pr-str new-metadata)]\n          (file-handler/set-file-content! repo path new-content))))))\n\n(defn set-pages-metadata!\n  [repo]\n  (let [path (config/get-pages-metadata-path repo)\n        all-pages (->> (db/get-all-pages repo)\n                       (common-handler/fix-pages-timestamps)\n                       (map #(select-keys % [:block/name :block/created-at :block/updated-at]))\n                       (sort-by :block/name)\n                       (vec))]\n    (p/let [_ (-> (file-handler/create-pages-metadata-file repo)\n                  (p/catch (fn [] nil)))]\n      (let [new-content (with-out-str (cljs.pprint/pprint all-pages))]\n        (fs/write-file! repo\n                        (config/get-repo-dir repo)\n                        path\n                        new-content\n                        {})))))\n\n(defn set-db-encrypted-secret!\n  [encrypted-secret]\n  (when-not (string/blank? encrypted-secret)\n    (set-metadata! :db/encrypted-secret encrypted-secret)))\n\n(defn- handler-properties!\n  [all-properties properties-tx]\n  (reduce\n   (fn [acc datom]\n     (let [v (:v datom)\n           id (or (get v :id)\n                  (get v :title))]\n       (if id\n         (let [added? (ddb/datom-added datom)\n               remove-all-properties? (and (not added?)\n                                           ;; only id\n                                           (= 1 (count v)))]\n           (if remove-all-properties?\n             (dissoc acc id)\n             (assoc acc id v)))\n         acc)))\n   all-properties\n   properties-tx))\n\n(defn update-properties!\n  [properties-tx]\n  (set-metadata! :block/properties #(handler-properties! % properties-tx)))\n"]}