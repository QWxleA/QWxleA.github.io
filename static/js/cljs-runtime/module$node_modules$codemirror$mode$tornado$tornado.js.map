{
"version":3,
"file":"module$node_modules$codemirror$mode$tornado$tornado.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAI/G,SAAQ,CAACC,GAAD,CAAM,CACS,QAAtB,EAAI,MAAOD,QAAX,EAAmD,QAAnD,EAAkC,MAAOD,OAAzC,CACEE,GAAA,CAAIH,OAAA,CAAQ,+CAAR,CAAJ,CAAqCA,OAAA,CAAQ,yDAAR,CAArC,CACIA,OAAA,CAAQ,mDAAR,CADJ,CADF,CAG0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAOC,CAAAA,GAA1C,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAyB,wBAAzB,CACC,0BADD,CAAP,CACqCD,GADrC,CADG,CAIHA,GAAA,CAAIG,UAAJ,CARW,CAAd,CAAD,CASG,QAAQ,CAACA,UAAD,CAAa,CAGtBA,UAAWC,CAAAA,UAAX,CAAsB,eAAtB;AAAuC,QAAQ,EAAG,CAShDC,QAASA,UAAU,CAACC,MAAD,CAASC,KAAT,CAAgB,CACjCD,MAAOE,CAAAA,QAAP,CAAgB,OAAhB,CACA,KAAIC,GAAKH,MAAOI,CAAAA,IAAP,EACT,IAAU,GAAV,EAAID,EAAJ,GACMA,EADN,CACWH,MAAOK,CAAAA,GAAP,CAAW,QAAX,CADX,EAGI,MADAJ,MAAMK,CAAAA,QACC,CADUC,KAAA,CAAMJ,EAAN,CACV,CAAA,KANsB,CAUnCI,QAASA,MAAM,CAACC,KAAD,CAAQ,CACR,GAAb,EAAIA,KAAJ,GACEA,KADF,CACU,GADV,CAGA,OAAO,SAAS,CAACR,MAAD,CAASC,KAAT,CAAgB,CAE9B,MADSD,OAAOI,CAAAA,IAAPD,EACT,EAAWK,KAAX,EAAqBR,MAAOK,CAAAA,GAAP,CAAW,GAAX,CAArB,EACEJ,KAAMK,CAAAA,QACC,CADUP,SACV,CAAA,KAFT,EAIIC,MAAOS,CAAAA,KAAP,CAAaC,QAAb,CAAJ,CACS,SADT,CAGgB,GAAT,EAAAF,KAAA,CAAe,SAAf,CAA2B,QATJ,CAJX,CAlBvB,IAAIE,SAAW,gWAAA,CAAA,KAAA,CAAA,GAAA,CAMfA;QAAA,CAAW,IAAIC,MAAJ,CAAW,KAAX,CAAmBD,QAASE,CAAAA,IAAT,CAAc,KAAd,CAAnB,CAA0C,OAA1C,CA4BX,OAAO,CACLC,WAAYA,QAAS,EAAG,CACtB,MAAO,CAACP,SAAUP,SAAX,CADe,CADnB,CAILe,MAAOA,QAAS,CAACd,MAAD,CAASC,KAAT,CAAgB,CAC9B,MAAOA,MAAMK,CAAAA,QAAN,CAAeN,MAAf,CAAuBC,KAAvB,CADuB,CAJ3B,CAnCyC,CAAlD,CA6CAJ,WAAWC,CAAAA,UAAX,CAAsB,SAAtB,CAAiC,QAAQ,CAACiB,MAAD,CAAS,CAChD,IAAIC,SAAWnB,UAAWoB,CAAAA,OAAX,CAAmBF,MAAnB,CAA2B,WAA3B,CACXG,OAAAA,CAAerB,UAAWoB,CAAAA,OAAX,CAAmBF,MAAnB,CAA2B,eAA3B,CACnB,OAAOlB,WAAWsB,CAAAA,WAAX,CAAuBH,QAAvB,CAAiCE,MAAjC,CAHyC,CAAlD,CAMArB,WAAWuB,CAAAA,UAAX,CAAsB,gBAAtB,CAAwC,SAAxC,CAtDsB,CATxB,CAJgH;",
"sources":["node_modules/codemirror/mode/tornado/tornado.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$tornado$tornado\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../htmlmixed/htmlmixed\"),\n        require(\"../../addon/mode/overlay\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tornado:inner\", function() {\n    var keywords = [\"and\",\"as\",\"assert\",\"autoescape\",\"block\",\"break\",\"class\",\"comment\",\"context\",\n                    \"continue\",\"datetime\",\"def\",\"del\",\"elif\",\"else\",\"end\",\"escape\",\"except\",\n                    \"exec\",\"extends\",\"false\",\"finally\",\"for\",\"from\",\"global\",\"if\",\"import\",\"in\",\n                    \"include\",\"is\",\"json_encode\",\"lambda\",\"length\",\"linkify\",\"load\",\"module\",\n                    \"none\",\"not\",\"or\",\"pass\",\"print\",\"put\",\"raise\",\"raw\",\"return\",\"self\",\"set\",\n                    \"squeeze\",\"super\",\"true\",\"try\",\"url_escape\",\"while\",\"with\",\"without\",\"xhtml_escape\",\"yield\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n    function inTag (close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n      return function (stream, state) {\n        var ch = stream.next();\n        if ((ch == close) && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"tornado\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var tornadoInner = CodeMirror.getMode(config, \"tornado:inner\");\n    return CodeMirror.overlayMode(htmlBase, tornadoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-tornado\", \"tornado\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","tokenBase","stream","state","eatWhile","ch","next","eat","tokenize","inTag","close","match","keywords","RegExp","join","startState","token","config","htmlBase","getMode","tornadoInner","overlayMode","defineMIME"]
}
