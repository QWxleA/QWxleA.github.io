{
"version":3,
"file":"module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,CAAuG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE/IC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACAH,QAAQI,CAAAA,sCAAR,CAAiD,IAAK,EACtD,MAAMA,uCAAN,CACIC,WAAW,EAAG,CAEV,IAAKC,CAAAA,aAAL,CADA,IAAKC,CAAAA,kBACL,CAD0B,IADhB,CAIdC,OAAO,CAACC,OAAD,CAAU,CACPC,OAAAA,CAAe,IAAKA,CAAAA,YAAL,CAAkBD,OAAlB,CACrB,IAAIC,OAAJ,EAAoB,IAAKH,CAAAA,kBAAzB,CACI,MAAO,KAAKD,CAAAA,aAEhB,KAAKA,CAAAA,aAAL,CAAqB,IAAIK,MAAJ,CAAY,UAASD,OAAaE,CAAAA,MAAtB,EAAZ;AAA4CF,OAAaG,CAAAA,KAAzD,CACrB,KAAKN,CAAAA,kBAAL,CAA0BG,OAC1B,OAAO,KAAKJ,CAAAA,aAPC,CASjBQ,OAAO,CAACL,OAAD,CAAUM,KAAV,CAAiB,CACpB,IAAMC,OAASD,KAAA,CAAM,CAAN,CACfA,MAAME,CAAAA,KAAN,EAA4BD,MAAOE,CAAAA,MACnCH,MAAA,CAAM,CAAN,CAAA,CAAWA,KAAA,CAAM,CAAN,CAASI,CAAAA,SAAT,CAAmBH,MAAOE,CAAAA,MAA1B,CACX,KAASE,MAAT,CAAa,CAAb,CAAgBA,MAAhB,CAAoBL,KAAMG,CAAAA,MAA1B,CAAkCE,MAAA,EAAlC,CACIL,KAAA,CAAMK,MAAN,CAAU,CAAV,CAAA,CAAeL,KAAA,CAAMK,MAAN,CAEnB,OAAO,KAAKC,CAAAA,YAAL,CAAkBZ,OAAlB,CAA2BM,KAA3B,CAPa,CAd5B,CAwBAf,OAAQI,CAAAA,sCAAR,CAAiDA,sCA5B8F;",
"sources":["node_modules/chrono-node/dist/common/parsers/AbstractParserWithWordBoundary.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbstractParserWithWordBoundaryChecking = void 0;\nclass AbstractParserWithWordBoundaryChecking {\n    constructor() {\n        this.cachedInnerPattern = null;\n        this.cachedPattern = null;\n    }\n    pattern(context) {\n        const innerPattern = this.innerPattern(context);\n        if (innerPattern == this.cachedInnerPattern) {\n            return this.cachedPattern;\n        }\n        this.cachedPattern = new RegExp(`(\\\\W|^)${innerPattern.source}`, innerPattern.flags);\n        this.cachedInnerPattern = innerPattern;\n        return this.cachedPattern;\n    }\n    extract(context, match) {\n        const header = match[1];\n        match.index = match.index + header.length;\n        match[0] = match[0].substring(header.length);\n        for (let i = 2; i < match.length; i++) {\n            match[i - 1] = match[i];\n        }\n        return this.innerExtract(context, match);\n    }\n}\nexports.AbstractParserWithWordBoundaryChecking = AbstractParserWithWordBoundaryChecking;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","AbstractParserWithWordBoundaryChecking","constructor","cachedPattern","cachedInnerPattern","pattern","context","innerPattern","RegExp","source","flags","extract","match","header","index","length","substring","i","innerExtract"]
}
