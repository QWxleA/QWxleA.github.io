{"version":3,"sources":["frontend/handler/shell.cljs"],"mappings":"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","names":["frontend.handler.shell/run-git-command!","command","electron.ipc.ipc","frontend.handler.shell/run-git-command2!","frontend.handler.shell/run-pandoc-command!","frontend.handler.shell/wrap-notification!","f","args","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","result","frontend.handler.notification.show_BANG_","clojure.string/blank?","frontend.handler.shell/run-command!","vec__59069","cljs.core.nth","logseq.graph-parser.util/split-first","and__5041__auto__","clojure.string/lower-case","clojure.string/trim","G__59074","cljs.core/Keyword","cljs.core.keyword","frontend.handler.shell/get-versioned-file-content","hash","path","repo","frontend.state/get-current-repo","local-dir","frontend.config/get-local-dir","clojure.string/replace","content","frontend.state/pub-event!","frontend.handler.shell/get-file-latest-git-log","page","n","cljs.core/integer?","file-id","temp__5720__auto__","frontend.db/entity","lines","clojure.string/split-lines","p1__59077#","cljs.core.filter","clojure.string/starts-with?","iter__5520__auto__","s__59079","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__59081","cljs.core/chunk-buffer","i__59080","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59078","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","line","vec__59082","vec__59086","title","time","clojure.string.split","cljs.core.subs","frontend.handler.shell/set-git-username-and-email","username","email","_r1","_r2","frontend.state/close-modal!","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.handler.shell\n  (:require [electron.ipc :as ipc]\n            [clojure.string :as string]\n            [logseq.graph-parser.util :as gp-util]\n            [frontend.handler.notification :as notification]\n            [promesa.core :as p]\n            [frontend.db :as db]\n            [frontend.state :as state]\n            [frontend.config :as config]))\n\n(defn run-git-command!\n  [command]\n  (ipc/ipc \"runGit\" command))\n\n(defn run-git-command2!\n  [command]\n  (ipc/ipc \"runGitWithinCurrentGraph\" command))\n\n;; TODO: export to pdf/html/word\n(defn run-pandoc-command!\n  [command]\n  (ipc/ipc \"runPandoc\" command))\n\n(defn wrap-notification!\n  [command f args]\n  (p/let [result (f args)]\n    (notification/show!\n     (if (string/blank? result)\n       [:p [:code.mr-1 (str command \" \" args) ]\n        \"was executed successfully!\"]\n       result)\n     :success\n     false)))\n\n(defn run-command!\n  [command]\n  (let [[command args] (gp-util/split-first \" \" command)\n        command (and command (string/lower-case command))]\n    (when (and (not (string/blank? command)) (not (string/blank? args)))\n      (let [args (string/trim args)]\n        (case (keyword command)\n         :git\n         (wrap-notification! command run-git-command! args)\n\n         ;; :pandoc\n         ;; (wrap-notification! command run-pandoc-command! args)\n\n         (notification/show!\n          [:div (str command \" is not supported yet!\")]\n          :error))))))\n\n;; git show $REV:$FILE\n(defn- get-versioned-file-content\n  [hash path]\n  (when (and hash path)\n    (let [repo (state/get-current-repo)\n          local-dir (config/get-local-dir repo)\n          path (string/replace path (str local-dir \"/\") \"\")]\n      (p/let [content (run-git-command! [\"show\" (str hash \":\" path)])]\n        (state/pub-event! [:modal/display-file-version path content hash])))))\n\n(defn get-file-latest-git-log\n  [page n]\n  (when (integer? n)\n    (let [file-id (:db/id (:block/file page))]\n      (when-let [path (:file/path (db/entity file-id))]\n        (p/let [result (run-git-command! [\"log\" (str \"-\" n) \"--pretty=format:Commit: %C(auto)%h$$$%s$$$%ad\" \"-p\" path])\n                lines (->> (string/split-lines result)\n                           (filter #(string/starts-with? % \"Commit: \")))]\n          (notification/show! [:div\n                               [:div.font-bold \"File history - \" path]\n                               (for [line lines]\n                                 (let [[hash title time] (string/split line \"$$$\")\n                                       hash (subs hash 8)]\n                                   [:div.my-4 {:key hash}\n                                    [:hr]\n                                    [:div.mb-2\n                                     [:a.font-medium.mr-1.inline\n                                      {:on-click (fn [] (get-versioned-file-content hash path))}\n                                      hash]\n                                     title]\n                                    [:div.opacity-50 time]]))] :success false))))))\n\n(defn set-git-username-and-email\n  [username email]\n  (p/let [_r1 (run-git-command! [\"config\" \"--global\" \"user.name\" username])\n          _r2 (run-git-command! [\"config\" \"--global\" \"user.email\" email])]\n    (state/close-modal!)\n    (notification/show!\n     [:div \"git config successfully!\"]\n     :success)))\n"]}