{
"version":3,
"file":"module$node_modules$chrono_node$dist$common$parsers$SlashDateFormatParser.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/chrono-node/dist/common/parsers/SlashDateFormatParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$common$parsers$SlashDateFormatParser\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst years_1 = require(\"../../calculation/years\");\nconst PATTERN = new RegExp(\"([^\\\\d]|^)\" +\n    \"([0-3]{0,1}[0-9]{1})[\\\\/\\\\.\\\\-]([0-3]{0,1}[0-9]{1})\" +\n    \"(?:[\\\\/\\\\.\\\\-]([0-9]{4}|[0-9]{2}))?\" +\n    \"(\\\\W|$)\", \"i\");\nconst OPENING_GROUP = 1;\nconst ENDING_GROUP = 5;\nconst FIRST_NUMBERS_GROUP = 2;\nconst SECOND_NUMBERS_GROUP = 3;\nconst YEAR_GROUP = 4;\nclass SlashDateFormatParser {\n    constructor(littleEndian) {\n        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;\n        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;\n    }\n    pattern() {\n        return PATTERN;\n    }\n    extract(context, match) {\n        if (match[OPENING_GROUP] == \"/\" || match[ENDING_GROUP] == \"/\") {\n            match.index += match[0].length;\n            return;\n        }\n        const index = match.index + match[OPENING_GROUP].length;\n        const text = match[0].substr(match[OPENING_GROUP].length, match[0].length - match[OPENING_GROUP].length - match[ENDING_GROUP].length);\n        if (text.match(/^\\d\\.\\d$/) || text.match(/^\\d\\.\\d{1,2}\\.\\d{1,2}\\s*$/)) {\n            return;\n        }\n        if (!match[YEAR_GROUP] && match[0].indexOf(\"/\") < 0) {\n            return;\n        }\n        const result = context.createParsingResult(index, text);\n        let month = parseInt(match[this.groupNumberMonth]);\n        let day = parseInt(match[this.groupNumberDay]);\n        if (month < 1 || month > 12) {\n            if (month > 12) {\n                if (day >= 1 && day <= 12 && month <= 31) {\n                    [day, month] = [month, day];\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        if (day < 1 || day > 31) {\n            return null;\n        }\n        result.start.assign(\"day\", day);\n        result.start.assign(\"month\", month);\n        if (match[YEAR_GROUP]) {\n            const rawYearNumber = parseInt(match[YEAR_GROUP]);\n            const year = years_1.findMostLikelyADYear(rawYearNumber);\n            result.start.assign(\"year\", year);\n        }\n        else {\n            const year = years_1.findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n        return result;\n    }\n}\nexports.default = SlashDateFormatParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","years_1","PATTERN","RegExp","SlashDateFormatParser","constructor","littleEndian","groupNumberMonth","SECOND_NUMBERS_GROUP","FIRST_NUMBERS_GROUP","groupNumberDay","pattern","extract","context","match","OPENING_GROUP","ENDING_GROUP","index","length","text","substr","YEAR_GROUP","indexOf","result","createParsingResult","month","parseInt","day","start","assign","rawYearNumber","year","findMostLikelyADYear","findYearClosestToRef","refDate","imply","default"]
}
