{"version":3,"sources":["frontend/components/select.cljs"],"mappings":"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","names":["rum.core/lazy-build","rum.core/build-defc","p__71712","map__71713","cljs.core/--destructure-map","cljs.core.get","daiquiri.core/create-element","daiquiri.util/join-classes","attrs71715","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","attrs71716","frontend.components.select/render-item","id","value","chosen?","rum.core/build-defcs","p__71717","map__71718","cljs.core/deref","rum.core/mark-sync-update","frontend.components.select/select","frontend.modules.shortcut.core/disable-all-shortcuts","rum.core.local","state","frontend.state/set-state!","items","limit","on-chosen","empty-placeholder","prompt-key","_t","input","frontend.context.i18n.t","e","cljs.core/reset!","frontend.util/evalue","frontend.ui/auto-complete","frontend.search.fuzzy_search","x","frontend.state/close-modal!","frontend.context.i18n/t","p1__71728#","p1__71729#","frontend.components.select/select-config","frontend.state/get-repos","cljs.core.remove","p__71732","map__71733","url","frontend.config.demo_graph_QMARK_","cljs.core._EQ_","frontend.state/get-current-repo","cljs.core.map","p__71730","map__71731","logseq.graph-parser.text/get-graph-name-from-path","frontend.config/local-db?","frontend.config/get-local-dir","frontend.db/get-repo-path","frontend.config/get-repo-dir","frontend.state/pub-event!","t","frontend.ui.button","reitit.frontend.easy.href","p__71747","map__71748","p__71736","map__71737","original-graph","frontend.handler.repo/remove-repo!","frontend.components.select/select-modal","rum.core/reactive","temp__5720__auto__","select-type","frontend.state/sub","select-type-config","frontend.state.set_modal_BANG_","cljs.core/select-keys","cljs.core.assoc","fexpr__71751"],"sourcesContent":["(ns frontend.components.select\n  \"Generic component for fuzzy searching items to select an item. See\n  select-config to add a new use or select-type for this component. To use the\n  new select-type, set :ui/open-select to the select-type. See\n  :graph/open command for an example.\"\n  (:require [frontend.modules.shortcut.core :as shortcut]\n            [frontend.context.i18n :refer [t]]\n            [frontend.search :as search]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [frontend.db :as db]\n            [logseq.graph-parser.text :as text]\n            [rum.core :as rum]\n            [frontend.config :as config]\n            [frontend.handler.repo :as repo-handler]\n            [reitit.frontend.easy :as rfe]))\n\n(rum/defc render-item\n  [{:keys [id value]} chosen?]\n  [:div.inline-grid.grid-cols-4.gap-x-4.w-full\n   {:class (when chosen? \"chosen\")}\n   [:span.col-span-3 value]\n   [:div.col-span-1.justify-end.tip.flex\n    (when id\n      [:code.opacity-20.bg-transparent id])]])\n\n(rum/defcs select <\n  (shortcut/disable-all-shortcuts)\n  (rum/local \"\" ::input)\n  {:will-unmount (fn [state]\n                   (state/set-state! [:ui/open-select] nil)\n                   state)}\n  [state {:keys [items limit on-chosen empty-placeholder prompt-key]\n          :or {limit 100\n               prompt-key :select/default-prompt\n               empty-placeholder (fn [_t] [:div])}}]\n  (let [input (::input state)]\n    [:div.cp__select.cp__select-main\n     [:div.input-wrap\n      [:input.cp__select-input.w-full\n       {:type        \"text\"\n        :placeholder (t prompt-key)\n        :auto-focus  true\n        :value       @input\n        :on-change   (fn [e] (reset! input (util/evalue e)))}]]\n\n     [:div.item-results-wrap\n      (ui/auto-complete\n       (search/fuzzy-search items @input :limit limit :extract-fn :value)\n       {:item-render render-item\n        :class       \"cp__select-results\"\n        :on-chosen   (fn [x]\n                       (state/close-modal!)\n                       (on-chosen x))\n        :empty-placeholder (empty-placeholder t)})]]))\n\n(defn select-config\n  \"Config that supports multiple types (uses) of this component. To add a new\n  type, add a key with the value being a map with the following keys:\n\n  * :items-fn - fn that returns items with a :value key that are used for the\n    fuzzy search and selection. Items can have an optional :id and are displayed\n    lightly for a given item.\n  * :on-chosen - fn that is given item when it is chosen.\n  * :empty-placeholder (optional) - fn that returns hiccup html to render if no\n    matched graphs found.\n  * :prompt-key (optional) - dictionary keyword that prompts when components is\n    first open. Defaults to :select/default-prompt.\"\n  []\n  {:graph-open\n   {:items-fn (fn []\n                (->>\n                 (state/get-repos)\n                 (remove (fn [{:keys [url]}]\n                           (or (config/demo-graph? url)\n                               (= url (state/get-current-repo)))))\n                 (map (fn [{:keys [url]}]\n                        {:value (text/get-graph-name-from-path\n                                 ;; TODO: Use helper when a common one is refactored\n                                 ;; from components.repo\n                                 (if (config/local-db? url)\n                                   (config/get-local-dir url)\n                                   (db/get-repo-path url)))\n                         :id (config/get-repo-dir url)\n                         :graph url}))))\n    :prompt-key :select.graph/prompt\n    :on-chosen #(state/pub-event! [:graph/switch (:graph %)])\n    :empty-placeholder (fn [t]\n                         [:div.px-4.py-2\n                          [:div.mb-2 (t :select.graph/empty-placeholder-description)]\n                          (ui/button\n                           (t :select.graph/add-graph)\n                           :href (rfe/href :repo-add)\n                           :on-click state/close-modal!)])}\n   :graph-remove\n   {:items-fn (fn []\n                (->> (state/get-repos)\n                     (remove (fn [{:keys [url]}]\n                               (config/demo-graph? url)))\n                     (map (fn [{:keys [url] :as original-graph}]\n                            {:value (text/get-graph-name-from-path\n                                     ;; TODO: Use helper when a common one is refactored\n                                     ;; from components.repo\n                                     (if (config/local-db? url)\n                                       (config/get-local-dir url)\n                                       (db/get-repo-path url)))\n                             :id (config/get-repo-dir url)\n                             :graph url\n                             :original-graph original-graph}))))\n    :on-chosen #(repo-handler/remove-repo! (:original-graph %))}})\n\n(rum/defc select-modal < rum/reactive\n  []\n  (when-let [select-type (state/sub [:ui/open-select])]\n    (let [select-type-config (get (select-config) select-type)]\n      (state/set-modal!\n       #(select (-> select-type-config\n                    (select-keys [:on-chosen :empty-placeholder :prompt-key])\n                    (assoc :items ((:items-fn select-type-config)))))\n       {:fullscreen? false\n        :close-btn?  false}))\n    nil))\n"]}