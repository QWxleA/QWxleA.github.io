{"version":3,"sources":["frontend/state.cljs"],"mappings":"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","names":["js/frontend","js/frontend.state","js/frontend.state.state","frontend.state/state","document-mode?","or__5043__auto__","frontend.storage/get","current-graph","graph","electron.ipc.ipc","cljs.core.atom","cljs.core.async.chan","cljs.core/boolean","cljs.core.fnil","cljs.core/identity","frontend.util/mac?","frontend.util/win32?","cljs.core._EQ_","and__5041__auto__","frontend.util/electron?","frontend.state/blocks-ast-cache","frontend.state/add-block-ast-cache!","block-uuid","content","ast","new-value","cljs.core/deref","cljs.core/assoc-in","cljs.core/count","cljs.core.into","cljs.core.take","cljs.core/reset!","frontend.state/get-block-ast","cljs.core.get_in","frontend.state/sub","ks","cljs.core/coll?","frontend.util/react","rum.core/cursor-in","rum.core/cursor","frontend.state/get-route-match","frontend.state/get-current-route","frontend.state/home?","frontend.state/setups-picker?","frontend.state/get-current-page","frontend.state/route-has-p?","frontend.state/set-state!","path","value","cljs.core/vector?","cljs.core.swap_BANG_","cljs.core/assoc","frontend.state/update-state!","f","cljs.core/update-in","cljs.core/update","frontend.state/get-current-repo","frontend.mobile.util/native-platform?","var_args","G__33097","frontend.state/get-config","js/Error","frontend.state.get_config","repo-url","frontend.state/default-arweave-gateway","frontend.state/get-arweave-gateway","js/frontend.state.built-in-macros","frontend.state/built-in-macros","frontend.state/get-macros","cljs.core.merge","frontend.state/sub-config","frontend.state/get-custom-css-link","frontend.state/get-custom-js-link","frontend.state/get-default-journal-template","temp__5720__auto__","template","clojure.string/blank?","clojure.string/trim","frontend.state/all-pages-public?","frontend.state/enable-grammarly?","cljs.core.get","frontend.state/scheduled-deadlines-disabled?","frontend.state/enable-timetracking?","frontend.state/enable-journals?","repo","frontend.state/export-heading-to-list?","frontend.state/enable-git-auto-push?","frontend.state/enable-block-timestamps?","frontend.state/sub-graph-config","frontend.state/sub-graph-config-settings","frontend.state/show-brackets?","frontend.state/get-default-home","frontend.state/sub-default-home-page","frontend.state/custom-home-page?","G__33099","frontend.state/get-preferred-format","frontend.state.get_preferred_format","cljs.core.keyword","fmt","clojure.string/lower-case","cljs.core/name","G__33101","frontend.state/get-editor-command-trigger","frontend.state.get_editor_command_trigger","frontend.state/markdown?","frontend.state/get-pages-directory","frontend.state/get-journals-directory","frontend.state/org-mode-file-link?","frontend.state/get-journal-file-name-format","frontend.state/get-preferred-workflow","workflow","frontend.util/safe-re-find","frontend.state/get-preferred-todo","frontend.state/page-name-order","frontend.state/get-repos","frontend.state/set-repos!","repos","frontend.state/add-repo!","cljs.core.conj","cljs.core.distinct","frontend.state/set-current-repo!","frontend.storage/set","frontend.storage/remove","frontend.state/set-preferred-format!","format","frontend.state/set-preferred-workflow!","frontend.state/set-preferred-language!","language","frontend.state/delete-repo!","p1__33102#","cljs.core.remove","frontend.util/distinct-by","cljs.core/first","frontend.state/set-timestamp-block!","frontend.state/get-timestamp-block","G__33104","frontend.state/set-edit-content!","input-id","frontend.state.set_edit_content_BANG_","set-input-value?","input","goog.dom/getElement","frontend.util/set-change-value","m","cljs.core.assoc","frontend.state/get-edit-input-id","cljs.core/ffirst","frontend.state/get-input","id","frontend.state/editing?","js/document","frontend.state/get-edit-content","frontend.state/sub-edit-content","frontend.state/get-cursor-range","frontend.state/set-cursor-range!","range","frontend.state/set-q!","frontend.state/set-search-mode!","frontend.state/set-editor-show-page-search!","frontend.state/get-editor-show-page-search?","frontend.state/set-editor-show-page-search-hashtag!","frontend.state/get-editor-show-page-search-hashtag?","frontend.state/set-editor-show-block-search!","frontend.state/get-editor-show-block-search?","frontend.state/set-editor-show-template-search!","frontend.state/get-editor-show-template-search?","frontend.state/set-editor-show-date-picker!","frontend.state/get-editor-show-date-picker?","frontend.state/set-editor-show-input!","frontend.state/get-editor-show-input","frontend.state/set-editor-show-zotero!","frontend.state/clear-editor-show-state!","state","frontend.state/set-edit-input-id!","_m","frontend.state/get-edit-pos","frontend.util/get-selection-start","frontend.state/set-selection-start-block!","start-block","frontend.state/get-selection-start-block","G__33106","frontend.state/set-selection-blocks!","blocks","frontend.state.set_selection_blocks_BANG_","direction","cljs.core/seq","frontend.util/sort-by-height","frontend.state/into-selection-mode!","frontend.state/clear-selection!","frontend.state/get-selection-blocks","frontend.state/get-selection-block-ids","p1__33107#","cljs.core.keep","dommy.core/attr","cljs.core/uuid","frontend.state/in-selection-mode?","frontend.state/selection?","frontend.state/conj-selection-block!","block","dommy.core.add_class_BANG_","cljs.core/vec","frontend.state/drop-last-selection-block!","last-block","cljs.core/peek","cljs.core/pop","frontend.state/get-selection-direction","frontend.state/show-custom-context-menu!","links","frontend.state/hide-custom-context-menu!","frontend.state/toggle-sidebar-open?!","cljs.core/not","frontend.state/open-right-sidebar!","frontend.state/hide-right-sidebar!","frontend.state/sidebar-add-block!","db-id","block-type","frontend.util/sm-breakpoint?","p1__33108#","cljs.core/second","cljs.core/cons","elem","goog.dom/getElementByClass","frontend.util.scroll_to","frontend.state/sidebar-remove-block!","idx","p1__33109#","frontend.util/drop-nth","cljs.core/empty?","frontend.state/sidebar-replace-block!","old-sidebar-key","new-sidebar-key","p1__33110#","cljs.core.map","frontend.state/sidebar-block-exists?","p1__33111#","cljs.core/some","frontend.state/clear-sidebar-blocks!","frontend.state/sidebar-block-toggle-collapse!","frontend.state/get-edit-block","frontend.state/get-current-edit-block-and-position","edit-input-id","edit-block","block-element","clojure.string/replace","container","frontend.util/get-block-container","frontend.state.goog$module$goog$object.get","frontend.util.cursor/pos","js/frontend.state.publishing?","frontend.state/publishing?","frontend.state/publishing-enable-editing?","frontend.state/enable-editing?","G__33113","frontend.state/set-editing!","cursor-range","frontend.state.set_editing_BANG_","move-cursor?","pos","frontend.util.cursor/move-cursor-to","frontend.util/mobile?","frontend.state/clear-edit!","cljs.core/merge","frontend.state/into-code-editor-mode!","frontend.state/set-editor-last-pos!","new-pos","frontend.state/clear-editor-last-pos!","frontend.state/get-editor-last-pos","frontend.state/set-block-content-and-last-pos!","frontend.state/set-theme-mode!","mode","frontend.mobile.util/native-ios?","frontend.util/set-theme-light","frontend.util/set-theme-dark","frontend.state/sync-system-theme!","system-dark?","js/window.matchMedia","frontend.state/use-theme-mode!","theme-mode","frontend.state/toggle-theme","theme","frontend.state/toggle-theme!","G__33115","frontend.state/set-custom-theme!","custom-theme","frontend.state.set_custom_theme_BANG_","frontend.state/set-editing-block-dom-id!","block-dom-id","frontend.state/get-editing-block-dom-id","frontend.state/set-root-component!","component","frontend.state/get-root-component","G__33117","frontend.state/load-app-user-cfgs","frontend.state.load_app_user_cfgs","refresh?","promesa.core.bind","___28360__auto__","promesa.protocols/-promise","cfgs","cljs.core/object?","cljs-bean.core/->clj","frontend.state/setup-electron-updater!","js/window.apis.setUpdatesCallback","_","args","data","pending?","cljs.core.not_EQ_","frontend.state/set-file-component!","frontend.state/clear-file-component!","frontend.state/get-file-component","frontend.state/set-journals-length!","frontend.state/add-custom-query-component!","query-string","frontend.state/remove-custom-query-component!","cljs.core.dissoc","frontend.state/get-custom-query-components","cljs.core/vals","G__33119","frontend.state/save-scroll-position!","frontend.state.save_scroll_position_BANG_","js/window.location.hash","G__33121","frontend.state/get-saved-scroll-position","frontend.state.get_saved_scroll_position","frontend.state/set-today!","frontend.state/get-date-formatter","frontend.state/shortcuts","frontend.state/get-me","frontend.state/deprecated-logged?","frontend.state/set-db-restoring!","frontend.state/set-indexedb-support!","frontend.state/modal-opened?","frontend.state/get-sub-modals","G__33126","frontend.state/set-sub-modal!","p__33127","map__33128","cljs.core/--destructure-map","panel-content","frontend.state.set_sub_modal_BANG_","label","close-btn?","show?","center?","opts","frontend.state/set-modal!","modals","p1__33123#","p2__33122#","cljs.core.keep_indexed","p1__33124#","medley.core/filter-vals","cljs.core/boolean?","G__33132","frontend.state/close-sub-modal!","frontend.state.close_sub_modal_BANG_","all?-a-id","mid","frontend.state/close-modal!","p1__33130#","p2__33129#","medley.core.remove_nth","G__33134","p__33135","map__33136","modal-panel-content","frontend.state.set_modal_BANG_","fullscreen?","frontend.state/get-db-batch-txs-chan","frontend.state/get-file-write-chan","frontend.state/get-reactive-custom-queries-chan","frontend.state/get-write-chan-length","c","frontend.state/get-left-sidebar-open?","frontend.state/set-left-sidebar-open!","frontend.state/toggle-left-sidebar!","frontend.state/set-developer-mode!","frontend.state/developer-mode?","frontend.state/get-notification-contents","frontend.state/document-mode?","frontend.state/doc-mode-enter-for-new-line?","frontend.state/toggle-document-mode!","frontend.state/shortcut-tooltip-enabled?","frontend.state/toggle-shortcut-tooltip!","frontend.state/mobile?","frontend.state/enable-tooltip?","frontend.state/show-command-doc?","frontend.state/set-config!","frontend.state/get-wide-mode?","frontend.state/toggle-wide-mode!","frontend.state/set-online!","frontend.state/get-commands","frontend.state/get-plugins-commands","cljs.core.mapcat","cljs.core/flatten","frontend.state/get-plugins-commands-with-type","type","p1__33137#","cljs.core/filterv","cljs.core.apply","cljs.core/concat","frontend.state/get-plugins-ui-items-with-type","p1__33138#","frontend.state/get-plugin-resources-with-type","pid","frontend.state/get-plugin-resource","key","resources","frontend.state/upt-plugin-resource","attr","val","resource","frontend.state/install-plugin-hook","hook","frontend.state/uninstall-plugin-hook","hook-or-all","p1__33139#","cljs.core/update-vals","ids","cljs.core.disj","coll","frontend.state/get-scheduled-future-days","days","cljs.core/int?","frontend.state/set-graph-syncing?","frontend.state/set-editor-in-composition!","frontend.state/editor-in-composition?","frontend.state/set-loading-files!","frontend.state/loading-files?","frontend.state/set-editor-last-input-time!","time","frontend.state/set-last-transact-time!","frontend.state/set-db-persisted!","frontend.state/db-idle?","last-time","now","frontend.util/time-ms","frontend.state/input-idle?","frontend.state/set-nfs-refreshing!","frontend.state/nfs-refreshing?","frontend.state/set-search-result!","frontend.state/clear-search-result!","frontend.state/add-graph-search-filter!","q","frontend.state/remove-search-filter!","frontend.state/clear-search-filters!","frontend.state/get-search-mode","frontend.state/toggle!","frontend.state/toggle-settings!","frontend.state/settings-open?","frontend.state/close-settings!","frontend.state/open-settings!","js/frontend.state.editor-op","frontend.state/editor-op","frontend.state/set-editor-op!","frontend.state/get-editor-op","frontend.state/get-start-of-week","frontend.state/get-ref-open-blocks-level","cljs.core/integer?","frontend.state/get-linked-references-collapsed-threshold","frontend.state/get-events-chan","frontend.state/pub-event!","payload","chan","cljs.core.async.put_BANG_","frontend.state/get-copied-blocks","frontend.state/set-copied-blocks","frontend.state/set-copied-full-blocks","frontend.state/set-copied-full-blocks!","frontend.state/get-export-block-text-indent-style","frontend.state/set-export-block-text-indent-style!","v","frontend.state/get-export-block-text-remove-options","frontend.state/update-export-block-text-remove-options!","e","k","frontend.util/echecked?","cljs.core/conj","cljs.core/disj","p1__33140#","frontend.state/set-editor-args!","frontend.state/block-component-editing?","frontend.state/set-block-component-editing-mode!","frontend.state/logical-outdenting?","frontend.state/get-editor-args","frontend.state/get-export-bullet-indentation","G__33141","cljs.core/Keyword","frontend.state/set-page-blocks-cp!","frontend.state/get-page-blocks-cp","frontend.state/set-component!","frontend.state/get-component","G__33143","frontend.state/exit-editing-and-set-selected-blocks!","frontend.state.exit_editing_and_set_selected_blocks_BANG_","frontend.state/remove-watch-state","cljs.core/remove-watch","frontend.state/get-git-auto-commit-enabled?","frontend.state/set-last-key-code!","key-code","frontend.state/get-last-key-code","frontend.state/get-plugin-by-id","G__33146","frontend.state/get-enabled?-installed-plugins","theme?","frontend.state.get_enabled_QMARK__installed_plugins","enabled?","include-unpacked?","p1__33144#","frontend.state/lsp-enabled?-or-theme","frontend.state/lsp-enabled?","frontend.state/consume-updates-coming-plugin","updated?","cljs.core/dissoc","temp__5718__auto__","error","frontend.state/coming-update-new-version?","pkg","frontend.state/plugin-update-available?","frontend.state/all-available-coming-updates","updates","p1__33147#","frontend.state/get-next-selected-coming-update","unchecked","p1__33148#","cljs.core.filter","cljs.core/contains?","frontend.state/set-unchecked-update","unchecked?","frontend.state/reset-unchecked-update","frontend.state/reset-all-updates-state","frontend.state/sub-right-sidebar-blocks","current-repo","p1__33149#","frontend.state/toggle-collapsed-block!","block-id","frontend.state/set-collapsed-block!","frontend.state/sub-collapsed","frontend.state/get-modal-id","frontend.state/edit-in-query-component","cljs.core/last","frontend.state/set-auth-id-token","id-token","frontend.state/set-auth-refresh-token","refresh-token","frontend.state/set-auth-access-token","access-token","frontend.state/get-auth-id-token","frontend.state/get-auth-refresh-token","frontend.state/set-file-sync-manager","frontend.state/set-file-sync-state","cljs.spec.alpha/*compile-asserts*","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","frontend.state/get-file-sync-manager","frontend.state/get-file-sync-state","frontend.state/reset-file-sync-download-init-state!","frontend.state/set-file-sync-download-init-state!","cljs.core/fn?","old-value","frontend.state/get-file-sync-download-init-state","frontend.state/reset-parsing-state!","frontend.state/set-parsing-state!","frontend.state/enable-encryption?"],"sourcesContent":["(ns frontend.state\n  (:require [cljs-bean.core :as bean]\n            [cljs.core.async :as async]\n            [clojure.string :as string]\n            [cljs.spec.alpha :as s]\n            [dommy.core :as dom]\n            [medley.core :as medley]\n            [electron.ipc :as ipc]\n            [frontend.storage :as storage]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.mobile.util :as mobile-util]))\n\n(defonce ^:large-vars/data-var state\n  (let [document-mode? (or (storage/get :document/mode?) false)\n       current-graph (let [graph (storage/get :git/current-repo)]\n                       (when graph (ipc/ipc \"setCurrentGraph\" graph))\n                       graph)]\n   (atom\n    {:route-match                           nil\n     :today                                 nil\n     :system/events                         (async/chan 100)\n     :db/batch-txs                          (async/chan 100)\n     :file/writes                           (async/chan 100)\n     :reactive/custom-queries               (async/chan 100)\n     :notification/show?                    false\n     :notification/content                  nil\n     :repo/loading-files?                   {}\n     :nfs/user-granted?                     {}\n     :nfs/refreshing?                       nil\n     :instrument/disabled?                  (storage/get \"instrument-disabled\")\n     ;; TODO: how to detect the network reliably?\n     :network/online?                       true\n     :indexeddb/support?                    true\n     :me                                    nil\n     :git/current-repo                      current-graph\n     :format/loading                        {}\n     :draw?                                 false\n     :db/restoring?                         nil\n\n     :journals-length                       3\n\n     :search/q                              \"\"\n     :search/mode                           :global\n     :search/result                         nil\n     :search/graph-filters                  []\n\n     ;; modals\n     :modal/id                              nil\n     :modal/label                           \"\"\n     :modal/show?                           false\n     :modal/panel-content                   nil\n     :modal/fullscreen?                     false\n     :modal/close-btn?                      nil\n     :modal/subsets                         []\n\n\n     ;; right sidebar\n     :ui/fullscreen?                        false\n     :ui/settings-open?                     false\n     :ui/sidebar-open?                      false\n     :ui/left-sidebar-open?                 (boolean (storage/get \"ls-left-sidebar-open?\"))\n     :ui/theme                              (or (storage/get :ui/theme) \"light\")\n     :ui/system-theme?                      ((fnil identity (or util/mac? util/win32? false)) (storage/get :ui/system-theme?))\n     :ui/custom-theme                       (or (storage/get :ui/custom-theme) {:light {:mode \"light\"} :dark {:mode \"dark\"}})\n     :ui/wide-mode?                         (storage/get :ui/wide-mode)\n\n     ;; ui/collapsed-blocks is to separate the collapse/expand state from db for:\n     ;; 1. right sidebar\n     ;; 2. zoom-in view\n     ;; 3. queries\n     ;; 4. references\n     ;; graph => {:block-id bool}\n     :ui/collapsed-blocks                   {}\n     :ui/sidebar-collapsed-blocks           {}\n     :ui/root-component                     nil\n     :ui/file-component                     nil\n     :ui/custom-query-components            {}\n     :ui/show-recent?                       false\n     :ui/command-palette-open?              false\n     :ui/developer-mode?                    (or (= (storage/get \"developer-mode\") \"true\")\n                                                false)\n     ;; remember scroll positions of visited paths\n     :ui/paths-scroll-positions             {}\n     :ui/shortcut-tooltip?                  (if (false? (storage/get :ui/shortcut-tooltip?))\n                                              false\n                                              true)\n     :ui/scrolling?                         false\n     :document/mode?                        document-mode?\n\n     :config                                {}\n     :block/component-editing-mode?         false\n     :editor/draw-mode?                     false\n     :editor/show-page-search?              false\n     :editor/show-page-search-hashtag?      false\n     :editor/show-date-picker?              false\n     ;; With label or other data\n     :editor/show-input                     nil\n     :editor/show-zotero                    false\n     :editor/last-saved-cursor              nil\n     :editor/editing?                       nil\n     :editor/in-composition?                false\n     :editor/content                        {}\n     :editor/block                          nil\n     :editor/block-dom-id                   nil\n     :editor/set-timestamp-block            nil\n     :editor/last-input-time                nil\n     :editor/document-mode?                 document-mode?\n     :editor/args                           nil\n     :editor/on-paste?                      false\n     :editor/last-key-code                  nil\n\n     ;; for audio record\n     :editor/record-status                  \"NONE\"\n\n     :db/last-transact-time                 {}\n     ;; whether database is persisted\n     :db/persisted?                         {}\n     :cursor-range                          nil\n\n     :selection/mode                        false\n     ;; Warning: blocks order is determined when setting this attribute\n     :selection/blocks                      []\n     :selection/start-block                 nil\n     ;; either :up or :down, defaults to down\n     ;; used to determine selection direction when two or more blocks are selected\n     :selection/direction                   :down\n     :custom-context-menu/show?             false\n     :custom-context-menu/links             nil\n\n     ;; pages or blocks in the right sidebar\n     ;; It is a list of `[repo db-id block-type block-data]` 4-tuple\n     :sidebar/blocks                        '()\n\n     :preferred-language                    (storage/get :preferred-language)\n\n     ;; electron\n     :electron/auto-updater-downloaded      false\n     :electron/updater-pending?             false\n     :electron/updater                      {}\n     :electron/user-cfgs                    nil\n\n     ;; mobile\n     :mobile/show-action-bar?               false\n     :mobile/actioned-block                 nil\n     :mobile/show-toolbar?                  false\n     :mobile/show-recording-bar?            false\n     ;;; toolbar icon doesn't update correctly when clicking after separate it from box,\n     ;;; add a random in (<= 1000000) to observer its update\n     :mobile/toolbar-update-observer        0\n     :mobile/show-tabbar?                   false\n\n     ;; plugin\n     :plugin/enabled                        (and (util/electron?)\n                                                 ;; true false :theme-only\n                                                 ((fnil identity true) (storage/get :lsp-core-enabled)))\n     :plugin/indicator-text                 nil\n     :plugin/installed-plugins              {}\n     :plugin/installed-themes               []\n     :plugin/installed-slash-commands       {}\n     :plugin/installed-ui-items             {}\n     :plugin/installed-resources            {}\n     :plugin/installed-hooks                {}\n     :plugin/simple-commands                {}\n     :plugin/selected-theme                 nil\n     :plugin/selected-unpacked-pkg          nil\n     :plugin/marketplace-pkgs               nil\n     :plugin/marketplace-stats              nil\n     :plugin/installing                     nil\n     :plugin/active-readme                  nil\n     :plugin/updates-pending                {}\n     :plugin/updates-coming                 {}\n     :plugin/updates-downloading?           false\n     :plugin/updates-unchecked              #{}\n     :plugin/navs-settings?                 true\n     :plugin/focused-settings               nil ;; plugin id\n\n     ;; pdf\n     :pdf/current                           nil\n     :pdf/ref-highlight                     nil\n\n     ;; all notification contents as k-v pairs\n     :notification/contents                 {}\n     :graph/syncing?                        false\n     ;; graph -> state\n     :graph/parsing-state                   {}\n\n     ;; copied blocks\n     :copy/blocks                           {:copy/content nil\n                                             :copy/block-ids nil\n                                             :copy/graph nil}\n\n     :copy/export-block-text-indent-style   (or (storage/get :copy/export-block-text-indent-style)\n                                                \"dashes\")\n     :copy/export-block-text-remove-options (or (storage/get :copy/export-block-text-remove-options)\n                                                #{})\n     :date-picker/date                      nil\n\n     :youtube/players                       {}\n\n     ;; command palette\n     :command-palette/commands              []\n\n     :view/components                       {}\n\n     :favorites/dragging                    nil\n\n     :srs/mode?                             false\n\n     :srs/cards-due-count                   nil\n\n     :reactive/query-dbs                    {}\n\n     ;; login, userinfo, token, ...\n     :auth/refresh-token                    nil\n     :auth/access-token                     nil\n     :auth/id-token                         nil\n\n     ;; file-sync\n     :file-sync/sync-manager                nil\n     :file-sync/sync-state-manager          nil\n     :file-sync/sync-state                  nil\n     :file-sync/sync-uploading-files        nil\n     :file-sync/sync-downloading-files      nil\n\n     :file-sync/download-init-progress      nil\n\n     :encryption/graph-parsing?             false\n     })))\n\n;; block uuid -> {content(String) -> ast}\n(def blocks-ast-cache (atom {}))\n(defn add-block-ast-cache!\n  [block-uuid content ast]\n  (when (and block-uuid content ast)\n    (let [new-value (assoc-in @blocks-ast-cache [block-uuid content] ast)\n          new-value (if (> (count new-value) 10000)\n                      (into {} (take 5000 new-value))\n                      new-value)]\n      (reset! blocks-ast-cache new-value))))\n\n(defn get-block-ast\n  [block-uuid content]\n  (when (and block-uuid content)\n    (get-in @blocks-ast-cache [block-uuid content])))\n\n(defn sub\n  [ks]\n  (if (coll? ks)\n    (util/react (rum/cursor-in state ks))\n    (util/react (rum/cursor state ks))))\n\n(defn get-route-match\n  []\n  (:route-match @state))\n\n(defn get-current-route\n  []\n  (get-in (get-route-match) [:data :name]))\n\n(defn home?\n  []\n  (= :home (get-current-route)))\n\n(defn setups-picker?\n  []\n  (= :repo-add (get-current-route)))\n\n(defn get-current-page\n  []\n  (when (= :page (get-current-route))\n    (get-in (get-route-match)\n            [:path-params :name])))\n\n(defn route-has-p?\n  []\n  (get-in (get-route-match) [:query-params :p]))\n\n(defn set-state!\n  [path value]\n  (if (vector? path)\n    (swap! state assoc-in path value)\n    (swap! state assoc path value)))\n\n(defn update-state!\n  [path f]\n  (if (vector? path)\n    (swap! state update-in path f)\n    (swap! state update path f)))\n\n(defn get-current-repo\n  []\n  (or (:git/current-repo @state)\n      (when-not (mobile-util/native-platform?)\n        \"local\")))\n\n(defn get-config\n  ([]\n   (get-config (get-current-repo)))\n  ([repo-url]\n   (get-in @state [:config repo-url])))\n\n(def default-arweave-gateway \"https://arweave.net\")\n\n(defn get-arweave-gateway\n  []\n  (:arweave/gateway (get-config) default-arweave-gateway))\n\n(defonce built-in-macros\n         {\"img\" \"[:img.$4 {:src \\\"$1\\\" :style {:width $2 :height $3}}]\"})\n\n(defn get-macros\n  []\n  (merge\n    built-in-macros\n    (:macros (get-config))))\n\n(defn sub-config\n  []\n  (sub :config))\n\n(defn get-custom-css-link\n  []\n  (:custom-css-url (get-config)))\n\n(defn get-custom-js-link\n  []\n  (:custom-js-url (get-config)))\n\n(defn get-default-journal-template\n  []\n  (when-let [template (get-in (get-config) [:default-templates :journals])]\n    (when-not (string/blank? template)\n      (string/trim template))))\n\n(defn all-pages-public?\n  []\n  (let [value (:publishing/all-pages-public? (get-config))\n        value (if (some? value) value (:all-pages-public? (get-config)))]\n    (true? value)))\n\n(defn enable-grammarly?\n  []\n  (true? (:feature/enable-grammarly?\n           (get (sub-config) (get-current-repo)))))\n\n;; (defn store-block-id-in-file?\n;;   []\n;;   (true? (:block/store-id-in-file? (get-config))))\n\n(defn scheduled-deadlines-disabled?\n  []\n  (true? (:feature/disable-scheduled-and-deadline-query?\n           (get (sub-config) (get-current-repo)))))\n\n(defn enable-timetracking?\n  []\n  (not (false? (:feature/enable-timetracking?\n                 (get (sub-config) (get-current-repo))))))\n\n(defn enable-journals?\n  [repo]\n  (not (false? (:feature/enable-journals?\n                 (get (sub-config) repo)))))\n\n(defn export-heading-to-list?\n  []\n  (not (false? (:export/heading-to-list?\n                 (get (sub-config) (get-current-repo))))))\n\n(defn enable-git-auto-push?\n  [repo]\n  (not (false? (:git-auto-push\n                 (get (sub-config) repo)))))\n\n(defn enable-block-timestamps?\n  []\n  (true? (:feature/enable-block-timestamps?\n           (get (sub-config) (get-current-repo)))))\n\n(defn sub-graph-config\n  []\n  (get (sub-config) (get-current-repo)))\n\n(defn sub-graph-config-settings\n  []\n  (:graph/settings (sub-graph-config)))\n\n;; Enable by default\n(defn show-brackets?\n  []\n  (not (false? (:ui/show-brackets?\n                 (get (sub-config) (get-current-repo))))))\n\n(defn get-default-home\n  []\n  (:default-home (get-config)))\n\n(defn sub-default-home-page\n  []\n  (get-in (sub-config) [(get-current-repo) :default-home :page] \"\"))\n\n(defn custom-home-page?\n  []\n  (some? (:page (get-default-home))))\n\n(defn get-preferred-format\n  ([]\n   (get-preferred-format (get-current-repo)))\n  ([repo-url]\n   (keyword\n     (or\n       (when-let [fmt (:preferred-format (get-config repo-url))]\n         (string/lower-case (name fmt)))\n\n       (get-in @state [:me :preferred_format] \"markdown\")))))\n\n;; TODO: consider adding a pane in Settings to set this through the GUI (rather\n;; than having to go through the config.edn file)\n(defn get-editor-command-trigger\n  ([] (get-editor-command-trigger (get-current-repo)))\n  ([repo-url]\n   (or\n     (:editor/command-trigger (get-config repo-url))        ;; Get from user config\n     \"/\")))                                                 ;; Set the default\n\n(defn markdown?\n  []\n  (= (keyword (get-preferred-format))\n     :markdown))\n\n(defn get-pages-directory\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (:pages-directory (get-config repo)))\n    \"pages\"))\n\n(defn get-journals-directory\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (:journals-directory (get-config repo)))\n    \"journals\"))\n\n(defn org-mode-file-link?\n  [repo]\n  (:org-mode/insert-file-link? (get-config repo)))\n\n(defn get-journal-file-name-format\n  []\n  (when-let [repo (get-current-repo)]\n    (:journal/file-name-format (get-config repo))))\n\n(defn get-preferred-workflow\n  []\n  (keyword\n    (or\n      (when-let [workflow (:preferred-workflow (get-config))]\n        (let [workflow (name workflow)]\n          (if (util/safe-re-find #\"now|NOW\" workflow)\n            :now\n            :todo)))\n      (get-in @state [:me :preferred_workflow] :now))))\n\n(defn get-preferred-todo\n  []\n  (if (= (get-preferred-workflow) :now)\n    \"LATER\"\n    \"TODO\"))\n\n(defn page-name-order\n  \"Decide whether to use file name or :title as page name. If it returns \\\"file\\\", use the file\n  name unless it is missing.\"\n  []\n  (:page-name-order (get-config)))\n\n(defn get-repos\n  []\n  (get-in @state [:me :repos]))\n\n(defn set-repos!\n  [repos]\n  (set-state! [:me :repos] repos))\n\n(defn add-repo!\n  [repo]\n  (when (not (string/blank? repo))\n    (update-state! [:me :repos]\n                   (fn [repos]\n                     (->> (conj repos repo)\n                          (distinct))))))\n\n(defn set-current-repo!\n  [repo]\n  (swap! state assoc :git/current-repo repo)\n  (if repo\n    (storage/set :git/current-repo repo)\n    (storage/remove :git/current-repo))\n  (ipc/ipc \"setCurrentGraph\" repo))\n\n(defn set-preferred-format!\n  [format]\n  (swap! state assoc-in [:me :preferred_format] (name format)))\n\n(defn set-preferred-workflow!\n  [workflow]\n  (swap! state assoc-in [:me :preferred_workflow] (name workflow)))\n\n(defn set-preferred-language!\n  [language]\n  (set-state! :preferred-language (name language))\n  (storage/set :preferred-language (name language)))\n\n(defn delete-repo!\n  [repo]\n  (swap! state update-in [:me :repos]\n         (fn [repos]\n           (->> (remove #(= (:url repo)\n                            (:url %))\n                        repos)\n                (util/distinct-by :url))))\n  (when (= (get-current-repo) (:url repo))\n    (set-current-repo! (:url (first (get-repos))))))\n\n(defn set-timestamp-block!\n  [value]\n  (set-state! :editor/set-timestamp-block value))\n\n(defn get-timestamp-block\n  []\n  (:editor/set-timestamp-block @state))\n\n(defn set-edit-content!\n  ([input-id value] (set-edit-content! input-id value true))\n  ([input-id value set-input-value?]\n   (when input-id\n     (when set-input-value?\n       (when-let [input (gdom/getElement input-id)]\n         (util/set-change-value input value)))\n     (update-state! :editor/content (fn [m]\n                                      (assoc m input-id value))))))\n\n(defn get-edit-input-id\n  []\n  (ffirst (:editor/editing? @state)))\n\n(defn get-input\n  []\n  (when-let [id (get-edit-input-id)]\n    (gdom/getElement id)))\n\n(defn editing?\n  []\n  (let [input (get-input)]\n    (and input (= input (.-activeElement js/document)))))\n\n(defn get-edit-content\n  []\n  (get (:editor/content @state) (get-edit-input-id)))\n\n(defn sub-edit-content\n  []\n  (sub [:editor/content (get-edit-input-id)]))\n\n(defn get-cursor-range\n  []\n  (:cursor-range @state))\n\n(defn set-cursor-range!\n  [range]\n  (set-state! :cursor-range range))\n\n(defn set-q!\n  [value]\n  (set-state! :search/q value))\n\n(defn set-search-mode!\n  [value]\n  (set-state! :search/mode value))\n\n(defn set-editor-show-page-search!\n  [value]\n  (set-state! :editor/show-page-search? value))\n\n(defn get-editor-show-page-search?\n  []\n  (get @state :editor/show-page-search?))\n\n(defn set-editor-show-page-search-hashtag!\n  [value]\n  (set-state! :editor/show-page-search? value)\n  (set-state! :editor/show-page-search-hashtag? value))\n(defn get-editor-show-page-search-hashtag?\n  []\n  (get @state :editor/show-page-search-hashtag?))\n(defn set-editor-show-block-search!\n  [value]\n  (set-state! :editor/show-block-search? value))\n(defn get-editor-show-block-search?\n  []\n  (get @state :editor/show-block-search?))\n(defn set-editor-show-template-search!\n  [value]\n  (set-state! :editor/show-template-search? value))\n(defn get-editor-show-template-search?\n  []\n  (get @state :editor/show-template-search?))\n(defn set-editor-show-date-picker!\n  [value]\n  (set-state! :editor/show-date-picker? value))\n(defn get-editor-show-date-picker?\n  []\n  (get @state :editor/show-date-picker?))\n(defn set-editor-show-input!\n  [value]\n  (set-state! :editor/show-input value))\n(defn get-editor-show-input\n  []\n  (get @state :editor/show-input))\n\n\n(defn set-editor-show-zotero!\n  [value]\n  (set-state! :editor/show-zotero value))\n\n;; TODO: refactor, use one state\n(defn clear-editor-show-state!\n  []\n  (swap! state (fn [state]\n                 (assoc state\n                        :editor/show-input nil\n                        :editor/show-zotero false\n                        :editor/show-date-picker? false\n                        :editor/show-block-search? false\n                        :editor/show-template-search? false\n                        :editor/show-page-search? false\n                        :editor/show-page-search-hashtag? false))))\n\n(defn set-edit-input-id!\n  [input-id]\n  (swap! state update :editor/editing?\n         (fn [_m]\n           (and input-id {input-id true}))))\n\n(defn get-edit-pos\n  []\n  (when-let [input (get-input)]\n    (util/get-selection-start input)))\n\n(defn set-selection-start-block!\n  [start-block]\n  (swap! state assoc :selection/start-block start-block))\n\n(defn get-selection-start-block\n  []\n  (get @state :selection/start-block))\n\n(defn set-selection-blocks!\n  ([blocks]\n   (set-selection-blocks! blocks :down))\n  ([blocks direction]\n   (when (seq blocks)\n     (let [blocks (util/sort-by-height blocks)]\n       (swap! state assoc\n             :selection/mode true\n             :selection/blocks blocks\n             :selection/direction direction)))))\n\n(defn into-selection-mode!\n  []\n  (swap! state assoc :selection/mode true))\n\n(defn clear-selection!\n  []\n  (swap! state assoc\n         :selection/mode false\n         :selection/blocks nil\n         :selection/direction :down))\n\n(defn get-selection-blocks\n  []\n  (:selection/blocks @state))\n\n(defn get-selection-block-ids\n  []\n  (->> (sub :selection/blocks)\n       (keep #(when-let [id (dom/attr % \"blockid\")]\n                (uuid id)))\n       (distinct)))\n\n(defn in-selection-mode?\n  []\n  (:selection/mode @state))\n\n(defn selection?\n  \"True sense of selection mode with valid selected block\"\n  []\n  (and (in-selection-mode?) (seq (get-selection-blocks))))\n\n(defn conj-selection-block!\n  [block direction]\n  (dom/add-class! block \"selected noselect\")\n  (swap! state assoc\n         :selection/mode true\n         :selection/blocks (-> (conj (vec (:selection/blocks @state)) block)\n                               (util/sort-by-height))\n         :selection/direction direction))\n\n(defn drop-last-selection-block!\n  []\n  (let [last-block (peek (vec (:selection/blocks @state)))]\n    (swap! state assoc\n           :selection/mode true\n           :selection/blocks (pop (vec (:selection/blocks @state))))\n    last-block))\n\n(defn get-selection-direction\n  []\n  (:selection/direction @state))\n\n(defn show-custom-context-menu!\n  [links]\n  (swap! state assoc\n         :custom-context-menu/show? true\n         :custom-context-menu/links links))\n\n(defn hide-custom-context-menu!\n  []\n  (swap! state assoc\n         :custom-context-menu/show? false\n         :custom-context-menu/links nil))\n\n(defn toggle-sidebar-open?!\n  []\n  (swap! state update :ui/sidebar-open? not))\n\n(defn open-right-sidebar!\n  []\n  (swap! state assoc :ui/sidebar-open? true))\n\n(defn hide-right-sidebar!\n  []\n  (swap! state assoc :ui/sidebar-open? false))\n\n(defn sidebar-add-block!\n  [repo db-id block-type]\n  (when (not (util/sm-breakpoint?))\n    (when db-id\n      (update-state! :sidebar/blocks (fn [blocks]\n                                       (->> (remove #(= (second %) db-id) blocks)\n                                            (cons [repo db-id block-type])\n                                            (distinct))))\n      (open-right-sidebar!)\n      (when-let [elem (gdom/getElementByClass \"cp__right-sidebar-scrollable\")]\n        (util/scroll-to elem 0)))))\n\n(defn sidebar-remove-block!\n  [idx]\n  (update-state! :sidebar/blocks (fn [blocks]\n                                   (if (string? idx)\n                                     (remove #(= (second %) idx) blocks)\n                                     (util/drop-nth idx blocks))))\n  (when (empty? (:sidebar/blocks @state))\n    (hide-right-sidebar!)))\n\n(defn sidebar-replace-block!\n  [old-sidebar-key new-sidebar-key]\n  (update-state! :sidebar/blocks (fn [blocks]\n                                   (map #(if (= % old-sidebar-key)\n                                           new-sidebar-key\n                                           %) blocks))))\n\n(defn sidebar-block-exists?\n  [idx]\n  (some #(= (second %) idx) (:sidebar/blocks @state)))\n\n(defn clear-sidebar-blocks!\n  []\n  (set-state! :sidebar/blocks '()))\n\n(defn sidebar-block-toggle-collapse!\n  [db-id]\n  (when db-id\n    (update-state! [:ui/sidebar-collapsed-blocks db-id] not)))\n\n(defn get-edit-block\n  []\n  (get @state :editor/block))\n\n(defn get-current-edit-block-and-position\n  []\n  (let [edit-input-id (get-edit-input-id)\n        edit-block (get-edit-block)\n        block-element (when edit-input-id (gdom/getElement (string/replace edit-input-id \"edit-block\" \"ls-block\")))\n        container (when block-element\n                    (util/get-block-container block-element))]\n    (when container\n      {:last-edit-block edit-block\n       :container       (gobj/get container \"id\")\n       :pos             (cursor/pos (gdom/getElement edit-input-id))})))\n\n(defonce publishing? (atom nil))\n\n(defn publishing-enable-editing?\n  []\n  (and @publishing? (:publishing/enable-editing? (get-config))))\n\n(defn enable-editing?\n  []\n  (or (not @publishing?) (:publishing/enable-editing? (get-config))))\n\n(defn set-editing!\n  ([edit-input-id content block cursor-range]\n   (set-editing! edit-input-id content block cursor-range true))\n  ([edit-input-id content block cursor-range move-cursor?]\n   (when (and edit-input-id block\n              (or\n                (publishing-enable-editing?)\n                (not @publishing?)))\n     (let [block-element (gdom/getElement (string/replace edit-input-id \"edit-block\" \"ls-block\"))\n           container (util/get-block-container block-element)\n           block (if container\n                   (assoc block\n                     :block/container (gobj/get container \"id\"))\n                   block)\n           content (string/trim (or content \"\"))]\n       (swap! state\n              (fn [state]\n                (-> state\n                    (assoc-in [:editor/content edit-input-id] content)\n                    (assoc\n                     :editor/block block\n                     :editor/editing? {edit-input-id true}\n                     :editor/last-key-code nil\n                     :cursor-range cursor-range))))\n       (when-let [input (gdom/getElement edit-input-id)]\n         (let [pos (count cursor-range)]\n           (when content\n             (util/set-change-value input content))\n\n           (when move-cursor?\n             (cursor/move-cursor-to input pos))\n\n           (when (or (util/mobile?) (mobile-util/native-platform?))\n             (set-state! :mobile/show-action-bar? false))))))))\n\n(defn clear-edit!\n  []\n  (swap! state merge {:editor/editing? nil\n                      :editor/block    nil\n                      :cursor-range    nil\n                      :editor/last-saved-cursor nil}))\n\n(defn into-code-editor-mode!\n  []\n  (swap! state merge {:editor/editing?   nil\n                      :cursor-range      nil\n                      :editor/code-mode? true}))\n\n(defn set-editor-last-pos!\n  [new-pos]\n  (set-state! [:editor/last-saved-cursor (:block/uuid (get-edit-block))] new-pos))\n\n(defn clear-editor-last-pos!\n  []\n  (set-state! :editor/last-saved-cursor nil))\n\n(defn get-editor-last-pos\n  []\n  (get-in @state [:editor/last-saved-cursor (:block/uuid (get-edit-block))]))\n\n(defn set-block-content-and-last-pos!\n  [edit-input-id content new-pos]\n  (when edit-input-id\n    (set-edit-content! edit-input-id content)\n    (set-state! [:editor/last-saved-cursor (:block/uuid (get-edit-block))] new-pos)))\n\n(defn set-theme-mode!\n  [mode]\n  (when (mobile-util/native-ios?)\n    (if (= mode \"light\")\n      (util/set-theme-light)\n      (util/set-theme-dark)))\n  (set-state! :ui/theme mode)\n  (storage/set :ui/theme mode))\n\n(defn sync-system-theme!\n  []\n  (let [system-dark? (.-matches (js/window.matchMedia \"(prefers-color-scheme: dark)\"))]\n    (set-theme-mode! (if system-dark? \"dark\" \"light\"))\n    (set-state! :ui/system-theme? true)\n    (storage/set :ui/system-theme? true)))\n\n(defn use-theme-mode!\n  [theme-mode]\n  (if (= theme-mode \"system\")\n    (sync-system-theme!)\n    (do\n      (set-theme-mode! theme-mode)\n      (set-state! :ui/system-theme? false)\n      (storage/set :ui/system-theme? false))))\n\n(defn toggle-theme\n  [theme]\n  (if (= theme \"dark\") \"light\" \"dark\"))\n\n(defn toggle-theme!\n  []\n  (use-theme-mode! (toggle-theme (:ui/theme @state))))\n\n(defn set-custom-theme!\n  ([custom-theme]\n   (set-custom-theme! nil custom-theme))\n  ([mode theme]\n   (set-state! (if mode [:ui/custom-theme (keyword mode)] :ui/custom-theme) theme)\n   (storage/set :ui/custom-theme (:ui/custom-theme @state))))\n\n(defn set-editing-block-dom-id!\n  [block-dom-id]\n  (set-state! :editor/block-dom-id block-dom-id))\n\n(defn get-editing-block-dom-id\n  []\n  (:editor/block-dom-id @state))\n\n(defn set-root-component!\n  [component]\n  (set-state! :ui/root-component component))\n\n(defn get-root-component\n  []\n  (get @state :ui/root-component))\n\n(defn load-app-user-cfgs\n  ([] (load-app-user-cfgs false))\n  ([refresh?]\n   (p/let [cfgs (if (or refresh? (nil? (:electron/user-cfgs @state)))\n                  (ipc/ipc \"userAppCfgs\")\n                  (:electron/user-cfgs @state))\n           cfgs (if (object? cfgs) (bean/->clj cfgs) cfgs)]\n          (set-state! :electron/user-cfgs cfgs))))\n\n(defn setup-electron-updater!\n  []\n  (when (util/electron?)\n    (js/window.apis.setUpdatesCallback\n      (fn [_ args]\n        (let [data (bean/->clj args)\n              pending? (not= (:type data) \"completed\")]\n          (set-state! :electron/updater-pending? pending?)\n          (when pending? (set-state! :electron/updater data))\n          nil)))))\n\n(defn set-file-component!\n  [component]\n  (set-state! :ui/file-component component))\n\n(defn clear-file-component!\n  []\n  (set-state! :ui/file-component nil))\n\n(defn get-file-component\n  []\n  (get @state :ui/file-component))\n\n(defn set-journals-length!\n  [value]\n  (when value\n    (set-state! :journals-length value)))\n\n(defn add-custom-query-component!\n  [query-string component]\n  (update-state! :ui/custom-query-components\n                 (fn [m]\n                   (assoc m query-string component))))\n\n(defn remove-custom-query-component!\n  [query-string]\n  (update-state! :ui/custom-query-components\n                 (fn [m]\n                   (dissoc m query-string))))\n\n(defn get-custom-query-components\n  []\n  (vals (get @state :ui/custom-query-components)))\n\n(defn save-scroll-position!\n  ([value]\n   (save-scroll-position! value js/window.location.hash))\n  ([value path]\n   (set-state! [:ui/paths-scroll-positions path] value)))\n\n(defn get-saved-scroll-position\n  ([]\n   (get-saved-scroll-position js/window.location.hash))\n  ([path]\n   (get-in @state [:ui/paths-scroll-positions path] 0)))\n\n(defn set-today!\n  [value]\n  (set-state! :today value))\n\n(defn get-date-formatter\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (or\n        (get-in @state [:config repo :journal/page-title-format])\n        ;; for compatibility\n        (get-in @state [:config repo :date-formatter])))\n    ;; TODO:\n    (get-in @state [:me :settings :date-formatter])\n    \"MMM do, yyyy\"))\n\n(defn shortcuts []\n  (get-in @state [:config (get-current-repo) :shortcuts]))\n\n(defn get-me\n  []\n  (:me @state))\n\n(defn deprecated-logged?\n  \"Whether the user has logged in.\"\n  []\n  false)\n\n(defn set-db-restoring!\n  [value]\n  (set-state! :db/restoring? value))\n\n(defn set-indexedb-support!\n  [value]\n  (set-state! :indexeddb/support? value))\n\n(defn modal-opened?\n  []\n  (:modal/show? @state))\n\n(declare set-modal!)\n(declare close-modal!)\n\n(defn get-sub-modals\n  []\n  (:modal/subsets @state))\n\n(defn set-sub-modal!\n  ([panel-content]\n   (set-sub-modal! panel-content\n                   {:close-btn? true}))\n  ([panel-content {:keys [id label close-btn? show? center?] :as opts}]\n   (if (not (modal-opened?))\n     (set-modal! panel-content opts)\n     (let [modals (:modal/subsets @state)\n           idx (and id (first (keep-indexed #(when (= (:modal/id %2) id) %1)\n                                            modals)))\n           input (medley/filter-vals\n                   #(not (nil? %1))\n                   {:modal/id            id\n                    :modal/label         (or label (if center? \"ls-modal-align-center\" \"\"))\n                    :modal/show?         (if (boolean? show?) show? true)\n                    :modal/panel-content panel-content\n                    :modal/close-btn?    close-btn?})]\n       (swap! state update-in\n              [:modal/subsets (or idx (count modals))]\n              merge input)\n       (:modal/subsets @state)))))\n\n(defn close-sub-modal!\n  ([] (close-sub-modal! nil))\n  ([all?-a-id]\n   (if (true? all?-a-id)\n     (swap! state assoc :modal/subsets [])\n     (let [id     all?-a-id\n           mid    (:modal/id @state)\n           modals (:modal/subsets @state)]\n       (if (and id (not (string/blank? mid)) (= id mid))\n         (close-modal!)\n         (when-let [idx (if id (first (keep-indexed #(when (= (:modal/id %2) id) %1) modals))\n                          (dec (count modals)))]\n           (swap! state assoc :modal/subsets (into [] (medley/remove-nth idx modals)))))))\n   (:modal/subsets @state)))\n\n(defn set-modal!\n  ([modal-panel-content]\n   (set-modal! modal-panel-content\n               {:fullscreen? false\n                :close-btn?  true}))\n  ([modal-panel-content {:keys [id label fullscreen? close-btn? center?]}]\n   (when (seq (get-sub-modals))\n     (close-sub-modal! true))\n   (swap! state assoc\n          :modal/id id\n          :modal/label (or label (if center? \"ls-modal-align-center\" \"\"))\n          :modal/show? (boolean modal-panel-content)\n          :modal/panel-content modal-panel-content\n          :modal/fullscreen? fullscreen?\n          :modal/close-btn? close-btn?)))\n\n(defn close-modal!\n  []\n  (if (seq (get-sub-modals))\n    (close-sub-modal!)\n    (swap! state assoc\n           :modal/id nil\n           :modal/label \"\"\n           :modal/show? false\n           :modal/fullscreen? false\n           :modal/panel-content nil\n           :ui/open-select nil)))\n\n(defn get-db-batch-txs-chan\n  []\n  (:db/batch-txs @state))\n\n(defn get-file-write-chan\n  []\n  (:file/writes @state))\n\n(defn get-reactive-custom-queries-chan\n  []\n  (:reactive/custom-queries @state))\n\n(defn get-write-chan-length\n  []\n  (let [c (get-file-write-chan)]\n    (count (gobj/get c \"buf\"))))\n\n(defn get-left-sidebar-open?\n  []\n  (get-in @state [:ui/left-sidebar-open?]))\n\n(defn set-left-sidebar-open!\n  [value]\n  (storage/set \"ls-left-sidebar-open?\" (boolean value))\n  (set-state! :ui/left-sidebar-open? value))\n\n(defn toggle-left-sidebar!\n  []\n  (set-left-sidebar-open!\n    (not (get-left-sidebar-open?))))\n\n(defn set-developer-mode!\n  [value]\n  (set-state! :ui/developer-mode? value)\n  (storage/set \"developer-mode\" (str value)))\n\n(defn developer-mode?\n  []\n  (:ui/developer-mode? @state))\n\n(defn get-notification-contents\n  []\n  (get @state :notification/contents))\n\n(defn document-mode?\n  []\n  (get @state :document/mode?))\n\n(defn doc-mode-enter-for-new-line?\n  []\n  (and (document-mode?)\n       (not (:shortcut/doc-mode-enter-for-new-block? (sub-graph-config)))))\n\n(defn toggle-document-mode!\n  []\n  (let [mode (document-mode?)]\n    (set-state! :document/mode? (not mode))\n    (storage/set :document/mode? (not mode))))\n\n(defn shortcut-tooltip-enabled?\n  []\n  (get @state :ui/shortcut-tooltip?))\n\n(defn toggle-shortcut-tooltip!\n  []\n  (let [mode (shortcut-tooltip-enabled?)]\n    (set-state! :ui/shortcut-tooltip? (not mode))\n    (storage/set :ui/shortcut-tooltip? (not mode))))\n\n(defn mobile?\n  []\n  (or (util/mobile?) (mobile-util/native-platform?)))\n\n(defn enable-tooltip?\n  []\n  (if (mobile?)\n    false\n    (get (get (sub-config) (get-current-repo))\n         :ui/enable-tooltip?\n         true)))\n\n(defn show-command-doc?\n  []\n  (get (get (sub-config) (get-current-repo))\n       :ui/show-command-doc?\n       true))\n\n(defn set-config!\n  [repo-url value]\n  (set-state! [:config repo-url] value))\n\n(defn get-wide-mode?\n  []\n  (:ui/wide-mode? @state))\n\n(defn toggle-wide-mode!\n  []\n  (update-state! :ui/wide-mode? not))\n\n(defn set-online!\n  [value]\n  (set-state! :network/online? value))\n\n(defn get-commands\n  []\n  (:commands (get-config)))\n\n(defn get-plugins-commands\n  []\n  (mapcat seq (flatten (vals (:plugin/installed-slash-commands @state)))))\n\n(defn get-plugins-commands-with-type\n  [type]\n  (filterv #(= (keyword (first %)) (keyword type))\n           (apply concat (vals (:plugin/simple-commands @state)))))\n\n(defn get-plugins-ui-items-with-type\n  [type]\n  (filterv #(= (keyword (first %)) (keyword type))\n           (apply concat (vals (:plugin/installed-ui-items @state)))))\n\n(defn get-plugin-resources-with-type\n  [pid type]\n  (when-let [pid (and type (keyword pid))]\n    (get-in @state [:plugin/installed-resources pid (keyword type)])))\n\n(defn get-plugin-resource\n  [pid type key]\n  (when-let [resources (get-plugin-resources-with-type pid type)]\n    (get resources key)))\n\n(defn upt-plugin-resource\n  [pid type key attr val]\n  (when-let [resource (get-plugin-resource pid type key)]\n    (let [resource (assoc resource (keyword attr) val)]\n      (set-state!\n        [:plugin/installed-resources (keyword pid) (keyword type) key] resource)\n      resource)))\n\n(defn install-plugin-hook\n  [pid hook]\n  (when-let [pid (keyword pid)]\n    (set-state!\n      [:plugin/installed-hooks hook]\n      (conj\n        ((fnil identity #{}) (get-in @state [:plugin/installed-hooks hook]))\n        pid)) true))\n\n(defn uninstall-plugin-hook\n  [pid hook-or-all]\n  (when-let [pid (keyword pid)]\n    (if (nil? hook-or-all)\n      (swap! state update :plugin/installed-hooks #(update-vals % (fn [ids] (disj ids pid))))\n      (when-let [coll (get-in @state [:plugin/installed-hooks hook-or-all])]\n        (set-state! [:plugin/installed-hooks hook-or-all] (disj coll pid))))\n    true))\n\n\n(defn get-scheduled-future-days\n  []\n  (let [days (:scheduled/future-days (get-config))]\n    (or (when (int? days) days) 0)))\n\n(defn set-graph-syncing?\n  [value]\n  (set-state! :graph/syncing? value))\n\n(defn set-editor-in-composition!\n  [value]\n  (set-state! :editor/in-composition? value))\n\n(defn editor-in-composition?\n  []\n  (:editor/in-composition? @state))\n\n(defn set-loading-files!\n  [repo value]\n  (when repo\n    (set-state! [:repo/loading-files? repo] value)))\n\n(defn loading-files?\n  [repo]\n  (get-in @state [:repo/loading-files? repo]))\n\n(defn set-editor-last-input-time!\n  [repo time]\n  (swap! state assoc-in [:editor/last-input-time repo] time))\n\n(defn set-last-transact-time!\n  [repo time]\n  (swap! state assoc-in [:db/last-transact-time repo] time)\n\n  ;; THINK: new block, indent/outdent, drag && drop, etc.\n  (set-editor-last-input-time! repo time))\n\n(defn set-db-persisted!\n  [repo value]\n  (swap! state assoc-in [:db/persisted? repo] value))\n\n(defn db-idle?\n  [repo]\n  (when repo\n    (when-let [last-time (get-in @state [:db/last-transact-time repo])]\n      (let [now (util/time-ms)]\n        (>= (- now last-time) 3000)))))\n\n(defn input-idle?\n  [repo]\n  (when repo\n    (or\n      (when-let [last-time (get-in @state [:editor/last-input-time repo])]\n        (let [now (util/time-ms)]\n          (>= (- now last-time) 500)))\n      ;; not in editing mode\n      (not (get-edit-input-id)))))\n\n(defn set-nfs-refreshing!\n  [value]\n  (set-state! :nfs/refreshing? value))\n\n(defn nfs-refreshing?\n  []\n  (:nfs/refreshing? @state))\n\n(defn set-search-result!\n  [value]\n  (set-state! :search/result value))\n\n(defn clear-search-result!\n  []\n  (set-search-result! nil))\n\n(defn add-graph-search-filter!\n  [q]\n  (when-not (string/blank? q)\n    (update-state! :search/graph-filters\n                   (fn [value]\n                     (vec (distinct (conj value q)))))))\n\n(defn remove-search-filter!\n  [q]\n  (when-not (string/blank? q)\n    (update-state! :search/graph-filters\n                   (fn [value]\n                     (remove #{q} value)))))\n\n(defn clear-search-filters!\n  []\n  (set-state! :search/graph-filters []))\n\n(defn get-search-mode\n  []\n  (:search/mode @state))\n\n(defn toggle!\n  [path]\n  (update-state! path not))\n\n(defn toggle-settings!\n  []\n  (toggle! :ui/settings-open?))\n\n(defn settings-open?\n  []\n  (:ui/settings-open? @state))\n\n(defn close-settings!\n  []\n  (set-state! :ui/settings-open? false))\n\n(defn open-settings!\n  []\n  (set-state! :ui/settings-open? true))\n\n;; TODO: Move those to the uni `state`\n\n(defonce editor-op (atom nil))\n(defn set-editor-op!\n  [value]\n  (reset! editor-op value))\n(defn get-editor-op\n  []\n  @editor-op)\n\n(defn get-start-of-week\n  []\n  (or\n    (when-let [repo (get-current-repo)]\n      (get-in @state [:config repo :start-of-week]))\n    (get-in @state [:me :settings :start-of-week])\n    6))\n\n(defn get-ref-open-blocks-level\n  []\n  (or\n    (when-let [value (:ref/default-open-blocks-level (get-config))]\n      (when (integer? value)\n        value))\n    2))\n\n(defn get-linked-references-collapsed-threshold\n  []\n  (or\n    (when-let [value (:ref/linked-references-collapsed-threshold (get-config))]\n      (when (integer? value)\n        value))\n    100))\n\n(defn get-events-chan\n  []\n  (:system/events @state))\n\n(defn pub-event!\n  [payload]\n  (let [chan (get-events-chan)]\n    (async/put! chan payload)))\n\n(defn get-copied-blocks\n  []\n  (:copy/blocks @state))\n\n(defn set-copied-blocks\n  [content ids]\n  (set-state! :copy/blocks {:copy/graph (get-current-repo)\n                            :copy/content content\n                            :copy/block-ids ids\n                            :copy/full-blocks nil}))\n\n(defn set-copied-full-blocks\n  [content blocks]\n  (set-state! :copy/blocks {:copy/graph (get-current-repo)\n                            :copy/content content\n                            :copy/full-blocks blocks}))\n\n(defn set-copied-full-blocks!\n  [blocks]\n  (set-state! [:copy/blocks :copy/full-blocks] blocks))\n\n(defn get-export-block-text-indent-style []\n  (:copy/export-block-text-indent-style @state))\n\n(defn set-export-block-text-indent-style!\n  [v]\n  (set-state! :copy/export-block-text-indent-style v)\n  (storage/set :copy/export-block-text-indent-style v))\n\n(defn get-export-block-text-remove-options []\n  (:copy/export-block-text-remove-options @state))\n\n(defn update-export-block-text-remove-options!\n  [e k]\n  (let [f (if (util/echecked? e) conj disj)]\n    (update-state! :copy/export-block-text-remove-options\n                   #(f % k))\n    (storage/set :copy/export-block-text-remove-options\n                 (get-export-block-text-remove-options))))\n\n(defn set-editor-args!\n  [args]\n  (set-state! :editor/args args))\n\n(defn block-component-editing?\n  []\n  (:block/component-editing-mode? @state))\n\n(defn set-block-component-editing-mode!\n  [value]\n  (set-state! :block/component-editing-mode? value))\n\n(defn logical-outdenting?\n  []\n  (:editor/logical-outdenting?\n    (get (sub-config) (get-current-repo))))\n\n(defn get-editor-args\n  []\n  (:editor/args @state))\n\n(defn get-export-bullet-indentation\n  []\n  (case (get (get-config) :export/bullet-indentation :tab)\n    :eight-spaces\n    \"        \"\n    :four-spaces\n    \"    \"\n    :two-spaces\n    \"  \"\n    :tab\n    \"\\t\"))\n\n(defn set-page-blocks-cp!\n  [value]\n  (set-state! [:view/components :page-blocks] value))\n\n(defn get-page-blocks-cp\n  []\n  (get-in @state [:view/components :page-blocks]))\n\n;; To avoid circular dependencies\n(defn set-component!\n  [k value]\n  (set-state! [:view/components k] value))\n\n(defn get-component\n  [k]\n  (get-in @state [:view/components k]))\n\n(defn exit-editing-and-set-selected-blocks!\n  ([blocks]\n   (exit-editing-and-set-selected-blocks! blocks :down))\n  ([blocks direction]\n   (clear-edit!)\n   (set-selection-blocks! blocks direction)))\n\n(defn remove-watch-state [key]\n  (remove-watch state key))\n\n(defn get-git-auto-commit-enabled?\n  []\n  (false? (sub [:electron/user-cfgs :git/disable-auto-commit?])))\n\n(defn set-last-key-code!\n  [key-code]\n  (set-state! :editor/last-key-code key-code))\n\n(defn get-last-key-code\n  []\n  (:editor/last-key-code @state))\n\n(defn get-plugin-by-id\n  [id]\n  (when-let [id (and id (keyword id))]\n    (get-in @state [:plugin/installed-plugins id])))\n\n(defn get-enabled?-installed-plugins\n  ([theme?] (get-enabled?-installed-plugins theme? true false))\n  ([theme? enabled? include-unpacked?]\n   (filterv\n     #(and (if include-unpacked? true (:iir %))\n           (if-not (boolean? enabled?) true (= (not enabled?) (boolean (get-in % [:settings :disabled]))))\n           (= (boolean theme?) (:theme %)))\n     (vals (:plugin/installed-plugins @state)))))\n\n(defn lsp-enabled?-or-theme\n  []\n  (:plugin/enabled @state))\n\n(def lsp-enabled?\n  (lsp-enabled?-or-theme))\n\n(defn consume-updates-coming-plugin\n  [payload updated?]\n  (when-let [id (keyword (:id payload))]\n    (let [pending? (boolean (seq (:plugin/updates-pending @state)))]\n      (swap! state update :plugin/updates-pending dissoc id)\n      (if updated?\n        (if-let [error (:error-code payload)]\n          (swap! state update-in [:plugin/updates-coming id] assoc :error-code error)\n          (swap! state update :plugin/updates-coming dissoc id))\n        (swap! state update :plugin/updates-coming assoc id payload))\n      (pub-event! [:plugin/consume-updates id pending? updated?]))))\n\n(defn coming-update-new-version?\n  [pkg]\n  (and pkg (:latest-version pkg)))\n\n(defn plugin-update-available?\n  [id]\n  (when-let [pkg (and id (get (:plugin/updates-coming @state) (keyword id)))]\n    (coming-update-new-version? pkg)))\n\n(defn all-available-coming-updates\n  []\n  (when-let [updates (vals (:plugin/updates-coming @state))]\n    (filterv #(coming-update-new-version? %) updates)))\n\n(defn get-next-selected-coming-update\n  []\n  (when-let [updates (all-available-coming-updates)]\n    (let [unchecked (:plugin/updates-unchecked @state)]\n      (first (filter #(and (not (and (seq unchecked) (contains? unchecked (:id %))))\n                           (not (:error-code %))) updates)))))\n\n(defn set-unchecked-update\n  [id unchecked?]\n  (swap! state update :plugin/updates-unchecked (if unchecked? conj disj) id))\n\n(defn reset-unchecked-update\n  []\n  (swap! state assoc :plugin/updates-unchecked #{}))\n\n(defn reset-all-updates-state\n  []\n  (swap! state assoc\n         :plugin/updates-pending                {}\n         :plugin/updates-coming                 {}\n         :plugin/updates-downloading?           false))\n\n(defn sub-right-sidebar-blocks\n  []\n  (when-let [current-repo (get-current-repo)]\n    (->> (sub :sidebar/blocks)\n         (filter #(= (first %) current-repo)))))\n\n\n(defn toggle-collapsed-block!\n  [block-id]\n  (let [current-repo (get-current-repo)]\n    (update-state! [:ui/collapsed-blocks current-repo block-id] not)))\n\n(defn set-collapsed-block!\n  [block-id value]\n  (let [current-repo (get-current-repo)]\n    (set-state! [:ui/collapsed-blocks current-repo block-id] value)))\n\n(defn sub-collapsed\n  [block-id]\n  (sub [:ui/collapsed-blocks (get-current-repo) block-id]))\n\n(defn get-modal-id\n  []\n  (:modal/id @state))\n\n(defn edit-in-query-component\n  []\n  (and (editing?)\n       ;; config\n       (:custom-query? (last (get-editor-args)))))\n\n(defn set-auth-id-token\n  [id-token]\n  (set-state! :auth/id-token id-token))\n\n(defn set-auth-refresh-token\n  [refresh-token]\n  (set-state! :auth/refresh-token refresh-token))\n\n(defn set-auth-access-token\n  [access-token]\n  (set-state! :auth/access-token access-token))\n\n(defn get-auth-id-token []\n  (:auth/id-token @state))\n\n(defn get-auth-refresh-token []\n  (:auth/refresh-token @state))\n\n(defn set-file-sync-manager [v]\n  (set-state! :file-sync/sync-manager v))\n(defn set-file-sync-state [v]\n  (when v (s/assert :frontend.fs.sync/sync-state v))\n  (set-state! :file-sync/sync-state v))\n\n(defn get-file-sync-manager []\n  (:file-sync/sync-manager @state))\n\n(defn get-file-sync-state []\n  (:file-sync/sync-state @state))\n\n(defn reset-file-sync-download-init-state!\n  []\n  (set-state! [:file-sync/download-init-progress (get-current-repo)] {}))\n\n(defn set-file-sync-download-init-state!\n  [m]\n  (update-state! [:file-sync/download-init-progress (get-current-repo)]\n                 (if (fn? m) m\n                     (fn [old-value] (merge old-value m)))))\n\n(defn get-file-sync-download-init-state\n  []\n  (get-in @state [:file-sync/download-init-progress (get-current-repo)]))\n\n(defn reset-parsing-state!\n  []\n  (set-state! [:graph/parsing-state (get-current-repo)] {}))\n\n(defn set-parsing-state!\n  [m]\n  (update-state! [:graph/parsing-state (get-current-repo)]\n                 (if (fn? m) m\n                   (fn [old-value] (merge old-value m)))))\n\n(defn enable-encryption?\n  [repo]\n  (:feature/enable-encryption?\n   (get (sub-config) repo)))\n"]}