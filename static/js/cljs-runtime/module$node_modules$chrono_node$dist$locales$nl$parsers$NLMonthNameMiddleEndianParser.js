shadow$provide.module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameMiddleEndianParser=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});const years_1=require("module$node_modules$chrono_node$dist$calculation$years"),constants_1=require("module$node_modules$chrono_node$dist$locales$nl$constants"),constants_2=require("module$node_modules$chrono_node$dist$locales$nl$constants"),constants_3=require("module$node_modules$chrono_node$dist$locales$nl$constants");
global=require("module$node_modules$chrono_node$dist$utils$pattern");require=require("module$node_modules$chrono_node$dist$common$parsers$AbstractParserWithWordBoundary");const PATTERN=new RegExp("(?:on\\s*?)?"+`(${constants_2.ORDINAL_NUMBER_PATTERN})`+"(?:\\s*(?:tot|\\-|\\â€“|until|through|till|\\s)\\s*"+`(${constants_2.ORDINAL_NUMBER_PATTERN})`+")?(?:-|/|\\s*(?:of)?\\s*)("+global.matchAnyPattern(constants_1.MONTH_DICTIONARY)+")(?:(?:-|/|,?\\s*)"+`(${constants_3.YEAR_PATTERN}(?![^\\s]\\d))`+")?(?\x3d\\W|$)",
"i");class NLMonthNameMiddleEndianParser extends require.AbstractParserWithWordBoundaryChecking{innerPattern(){return PATTERN}innerExtract(context,match){var month=constants_1.MONTH_DICTIONARY[match[3].toLowerCase()];const day=constants_2.parseOrdinalNumberPattern(match[1]);if(31<day)return match.index+=match[1].length,null;const components=context.createParsingComponents({day,month});match[4]?(month=constants_3.parseYear(match[4]),components.assign("year",month)):(month=years_1.findYearClosestToRef(context.refDate,
day,month),components.imply("year",month));if(!match[2])return components;month=constants_2.parseOrdinalNumberPattern(match[2]);context=context.createParsingResult(match.index,match[0]);context.start=components;context.end=components.clone();context.end.assign("day",month);return context}}exports.default=NLMonthNameMiddleEndianParser}
//# sourceMappingURL=module$node_modules$chrono_node$dist$locales$nl$parsers$NLMonthNameMiddleEndianParser.js.map
