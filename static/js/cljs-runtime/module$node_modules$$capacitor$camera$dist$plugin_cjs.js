shadow$provide.module$node_modules$$capacitor$camera$dist$plugin_cjs=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var core=require("module$node_modules$$capacitor$core$dist$index_cjs");exports.CameraSource=void 0;(function(CameraSource){CameraSource.Prompt="PROMPT";CameraSource.Camera="CAMERA";CameraSource.Photos="PHOTOS"})(exports.CameraSource||(exports.CameraSource={}));exports.CameraDirection=void 0;(function(CameraDirection){CameraDirection.Rear=
"REAR";CameraDirection.Front="FRONT"})(exports.CameraDirection||(exports.CameraDirection={}));exports.CameraResultType=void 0;(function(CameraResultType){CameraResultType.Uri="uri";CameraResultType.Base64="base64";CameraResultType.DataUrl="dataUrl"})(exports.CameraResultType||(exports.CameraResultType={}));global=core.registerPlugin("Camera",{web:()=>Promise.resolve().then(function(){return web}).then(m=>new m.CameraWeb)});class CameraWeb extends core.WebPlugin{async getPhoto(options){return new Promise(async(resolve,
reject)=>{if(options.webUseInput||options.source===exports.CameraSource.Photos)this.fileInputExperience(options,resolve);else if(options.source===exports.CameraSource.Prompt){let actionSheet=document.querySelector("pwa-action-sheet");actionSheet||(actionSheet=document.createElement("pwa-action-sheet"),document.body.appendChild(actionSheet));actionSheet.header=options.promptLabelHeader||"Photo";actionSheet.cancelable=!1;actionSheet.options=[{title:options.promptLabelPhoto||"From Photos"},{title:options.promptLabelPicture||
"Take Picture"}];actionSheet.addEventListener("onSelection",async e=>{0===e.detail?this.fileInputExperience(options,resolve):this.cameraExperience(options,resolve,reject)})}else this.cameraExperience(options,resolve,reject)})}async pickImages(_options){return new Promise(async resolve=>{this.multipleFileInputExperience(resolve)})}async cameraExperience(options,resolve,reject){if(customElements.get("pwa-camera-modal")){const cameraModal=document.createElement("pwa-camera-modal");document.body.appendChild(cameraModal);
try{await cameraModal.componentOnReady(),cameraModal.addEventListener("onPhoto",async e=>{e=e.detail;null===e?reject(new core.CapacitorException("User cancelled photos app")):e instanceof Error?reject(e):resolve(await this._getCameraPhoto(e,options));cameraModal.dismiss();document.body.removeChild(cameraModal)}),cameraModal.present()}catch(e){this.fileInputExperience(options,resolve)}}else console.error("Unable to load PWA Element 'pwa-camera-modal'. See the docs: https://capacitorjs.com/docs/pwa-elements."),
this.fileInputExperience(options,resolve)}fileInputExperience(options,resolve){let input=document.querySelector("#_capacitor-camera-input");const cleanup=()=>{var _a;null===(_a=input.parentNode)||void 0===_a?void 0:_a.removeChild(input)};input||(input=document.createElement("input"),input.id="_capacitor-camera-input",input.type="file",input.hidden=!0,document.body.appendChild(input),input.addEventListener("change",_e=>{_e=input.files[0];let format="jpeg";"image/png"===_e.type?format="png":"image/gif"===
_e.type&&(format="gif");if("dataUrl"===options.resultType||"base64"===options.resultType){const reader=new FileReader;reader.addEventListener("load",()=>{if("dataUrl"===options.resultType)resolve({dataUrl:reader.result,format});else if("base64"===options.resultType){const b64=reader.result.split(",")[1];resolve({base64String:b64,format})}cleanup()});reader.readAsDataURL(_e)}else resolve({webPath:URL.createObjectURL(_e),format}),cleanup()}));input.accept="image/*";input.capture=!0;options.source===
exports.CameraSource.Photos||options.source===exports.CameraSource.Prompt?input.removeAttribute("capture"):options.direction===exports.CameraDirection.Front?input.capture="user":options.direction===exports.CameraDirection.Rear&&(input.capture="environment");input.click()}multipleFileInputExperience(resolve){let input=document.querySelector("#_capacitor-camera-input-multiple");input||(input=document.createElement("input"),input.id="_capacitor-camera-input-multiple",input.type="file",input.hidden=!0,
input.multiple=!0,document.body.appendChild(input),input.addEventListener("change",_e=>{_e=[];for(let i=0;i<input.files.length;i++){const file=input.files[i];let format="jpeg";"image/png"===file.type?format="png":"image/gif"===file.type&&(format="gif");_e.push({webPath:URL.createObjectURL(file),format})}resolve({photos:_e});var _a;null===(_a=input.parentNode)||void 0===_a?void 0:_a.removeChild(input)}));input.accept="image/*";input.click()}_getCameraPhoto(photo,options){return new Promise((resolve,
reject)=>{const reader=new FileReader,format=photo.type.split("/")[1];"uri"===options.resultType?resolve({webPath:URL.createObjectURL(photo),format,saved:!1}):(reader.readAsDataURL(photo),reader.onloadend=()=>{const r=reader.result;"dataUrl"===options.resultType?resolve({dataUrl:r,format,saved:!1}):resolve({base64String:r.split(",")[1],format,saved:!1})},reader.onerror=e=>{reject(e)})})}async checkPermissions(){if("undefined"===typeof navigator||!navigator.permissions)throw this.unavailable("Permissions API not available in this browser");
try{return{camera:(await window.navigator.permissions.query({name:"camera"})).state,photos:"granted"}}catch(_a){throw this.unavailable("Camera permissions are not available in this browser");}}async requestPermissions(){throw this.unimplemented("Not implemented on web.");}}require=new CameraWeb;var web=Object.freeze({__proto__:null,CameraWeb,Camera:require});exports.Camera=global}
//# sourceMappingURL=module$node_modules$$capacitor$camera$dist$plugin_cjs.js.map
