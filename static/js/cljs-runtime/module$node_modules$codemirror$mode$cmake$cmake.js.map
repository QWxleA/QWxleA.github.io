{
"version":3,
"file":"module$node_modules$codemirror$mode$cmake$cmake.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/codemirror/mode/cmake/cmake.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$cmake$cmake\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\")\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd)\n    define([\"../../lib/codemirror\"], mod);\n  else\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"cmake\", function () {\n  var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n\n  function tokenString(stream, state) {\n    var current, prev, found_var = false;\n    while (!stream.eol() && (current = stream.next()) != state.pending) {\n      if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n        found_var = true;\n        break;\n      }\n      prev = current;\n    }\n    if (found_var) {\n      stream.backUp(1);\n    }\n    if (current == state.pending) {\n      state.continueString = false;\n    } else {\n      state.continueString = true;\n    }\n    return \"string\";\n  }\n\n  function tokenize(stream, state) {\n    var ch = stream.next();\n\n    // Have we found a variable?\n    if (ch === '$') {\n      if (stream.match(variable_regex)) {\n        return 'variable-2';\n      }\n      return 'variable';\n    }\n    // Should we still be looking for the end of a string?\n    if (state.continueString) {\n      // If so, go through the loop again\n      stream.backUp(1);\n      return tokenString(stream, state);\n    }\n    // Do we just have a function on our hands?\n    // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched\n    if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n      stream.backUp(1);\n      return 'def';\n    }\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    // Have we found a string?\n    if (ch == \"'\" || ch == '\"') {\n      // Store the type (single or double)\n      state.pending = ch;\n      // Perform the looping function to find the end\n      return tokenString(stream, state);\n    }\n    if (ch == '(' || ch == ')') {\n      return 'bracket';\n    }\n    if (ch.match(/[0-9]/)) {\n      return 'number';\n    }\n    stream.eatWhile(/[\\w-]/);\n    return null;\n  }\n  return {\n    startState: function () {\n      var state = {};\n      state.inDefinition = false;\n      state.inInclude = false;\n      state.continueString = false;\n      state.pending = false;\n      return state;\n    },\n    token: function (stream, state) {\n      if (stream.eatSpace()) return null;\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-cmake\", \"cmake\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","tokenString","stream","state","current","prev","found_var","eol","next","pending","backUp","continueString","tokenize","ch","match","variable_regex","skipToEnd","eatWhile","startState","token","eatSpace","defineMIME"]
}
