{
"version":3,
"file":"module$node_modules$chrono_node$dist$locales$en$parsers$ENRelativeDateFormatParser.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/chrono-node/dist/locales/en/parsers/ENRelativeDateFormatParser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$chrono_node$dist$locales$en$parsers$ENRelativeDateFormatParser\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"../constants\");\nconst results_1 = require(\"../../../results\");\nconst dayjs_1 = __importDefault(require(\"dayjs\"));\nconst AbstractParserWithWordBoundary_1 = require(\"../../../common/parsers/AbstractParserWithWordBoundary\");\nconst pattern_1 = require(\"../../../utils/pattern\");\nconst PATTERN = new RegExp(`(this|next|last|past)\\\\s*(${pattern_1.matchAnyPattern(constants_1.TIME_UNIT_DICTIONARY)})(?=\\\\s*)` + \"(?=\\\\W|$)\", \"i\");\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\nclass ENRelativeDateFormatParser extends AbstractParserWithWordBoundary_1.AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context, match) {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = constants_1.TIME_UNIT_DICTIONARY[unitWord];\n        if (modifier == \"next\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return results_1.ParsingComponents.createRelativeFromRefDate(context.refDate, timeUnits);\n        }\n        if (modifier == \"last\" || modifier == \"past\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return results_1.ParsingComponents.createRelativeFromRefDate(context.refDate, timeUnits);\n        }\n        const components = context.createParsingComponents();\n        let date = dayjs_1.default(context.refDate);\n        if (unitWord.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n        else if (unitWord.match(/month/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n        else if (unitWord.match(/year/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n        return components;\n    }\n}\nexports.default = ENRelativeDateFormatParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","constants_1","results_1","dayjs_1","AbstractParserWithWordBoundary_1","pattern_1","PATTERN","RegExp","matchAnyPattern","TIME_UNIT_DICTIONARY","ENRelativeDateFormatParser","AbstractParserWithWordBoundaryChecking","innerPattern","innerExtract","context","match","modifier","MODIFIER_WORD_GROUP","toLowerCase","unitWord","RELATIVE_WORD_GROUP","timeunit","timeUnits","ParsingComponents","createRelativeFromRefDate","refDate","components","createParsingComponents","date","default","add","get","imply","month","year","assign"]
}
