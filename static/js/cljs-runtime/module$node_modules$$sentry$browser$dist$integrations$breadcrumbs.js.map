{
"version":3,
"file":"module$node_modules$$sentry$browser$dist$integrations$breadcrumbs.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@sentry/browser/dist/integrations/breadcrumbs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$sentry$browser$dist$integrations$breadcrumbs\"] = function(global,require,module,exports) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nvar core_1 = require(\"@sentry/core\");\nvar types_1 = require(\"@sentry/types\");\nvar utils_1 = require(\"@sentry/utils\");\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /** @class */ (function () {\n    /**\n     * @inheritDoc\n     */\n    function Breadcrumbs(options) {\n        /**\n         * @inheritDoc\n         */\n        this.name = Breadcrumbs.id;\n        this._options = tslib_1.__assign({ console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true }, options);\n    }\n    /**\n     * Create a breadcrumb of `sentry` from the events themselves\n     */\n    Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n        if (!this._options.sentry) {\n            return;\n        }\n        core_1.getCurrentHub().addBreadcrumb({\n            category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n            event_id: event.event_id,\n            level: event.level,\n            message: utils_1.getEventDescription(event),\n        }, {\n            event: event,\n        });\n    };\n    /**\n     * Instrument browser built-ins w/ breadcrumb capturing\n     *  - Console API\n     *  - DOM API (click/typing)\n     *  - XMLHttpRequest API\n     *  - Fetch API\n     *  - History API\n     */\n    Breadcrumbs.prototype.setupOnce = function () {\n        if (this._options.console) {\n            utils_1.addInstrumentationHandler('console', _consoleBreadcrumb);\n        }\n        if (this._options.dom) {\n            utils_1.addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n        }\n        if (this._options.xhr) {\n            utils_1.addInstrumentationHandler('xhr', _xhrBreadcrumb);\n        }\n        if (this._options.fetch) {\n            utils_1.addInstrumentationHandler('fetch', _fetchBreadcrumb);\n        }\n        if (this._options.history) {\n            utils_1.addInstrumentationHandler('history', _historyBreadcrumb);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Breadcrumbs.id = 'Breadcrumbs';\n    return Breadcrumbs;\n}());\nexports.Breadcrumbs = Breadcrumbs;\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function _innerDomBreadcrumb(handlerData) {\n        var target;\n        var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n        if (typeof keyAttrs === 'string') {\n            keyAttrs = [keyAttrs];\n        }\n        // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n        try {\n            target = handlerData.event.target\n                ? utils_1.htmlTreeAsString(handlerData.event.target, keyAttrs)\n                : utils_1.htmlTreeAsString(handlerData.event, keyAttrs);\n        }\n        catch (e) {\n            target = '<unknown>';\n        }\n        if (target.length === 0) {\n            return;\n        }\n        core_1.getCurrentHub().addBreadcrumb({\n            category: \"ui.\" + handlerData.name,\n            message: target,\n        }, {\n            event: handlerData.event,\n            name: handlerData.name,\n            global: handlerData.global,\n        });\n    }\n    return _innerDomBreadcrumb;\n}\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData) {\n    var breadcrumb = {\n        category: 'console',\n        data: {\n            arguments: handlerData.args,\n            logger: 'console',\n        },\n        level: utils_1.severityFromString(handlerData.level),\n        message: utils_1.safeJoin(handlerData.args, ' '),\n    };\n    if (handlerData.level === 'assert') {\n        if (handlerData.args[0] === false) {\n            breadcrumb.message = \"Assertion failed: \" + (utils_1.safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n            breadcrumb.data.arguments = handlerData.args.slice(1);\n        }\n        else {\n            // Don't capture a breadcrumb for passed assertions\n            return;\n        }\n    }\n    core_1.getCurrentHub().addBreadcrumb(breadcrumb, {\n        input: handlerData.args,\n        level: handlerData.level,\n    });\n}\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData) {\n    if (handlerData.endTimestamp) {\n        // We only capture complete, non-sentry requests\n        if (handlerData.xhr.__sentry_own_request__) {\n            return;\n        }\n        var _a = handlerData.xhr.__sentry_xhr__ || {}, method = _a.method, url = _a.url, status_code = _a.status_code, body = _a.body;\n        core_1.getCurrentHub().addBreadcrumb({\n            category: 'xhr',\n            data: {\n                method: method,\n                url: url,\n                status_code: status_code,\n            },\n            type: 'http',\n        }, {\n            xhr: handlerData.xhr,\n            input: body,\n        });\n        return;\n    }\n}\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData) {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n        return;\n    }\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n        // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n        return;\n    }\n    if (handlerData.error) {\n        core_1.getCurrentHub().addBreadcrumb({\n            category: 'fetch',\n            data: handlerData.fetchData,\n            level: types_1.Severity.Error,\n            type: 'http',\n        }, {\n            data: handlerData.error,\n            input: handlerData.args,\n        });\n    }\n    else {\n        core_1.getCurrentHub().addBreadcrumb({\n            category: 'fetch',\n            data: tslib_1.__assign(tslib_1.__assign({}, handlerData.fetchData), { status_code: handlerData.response.status }),\n            type: 'http',\n        }, {\n            input: handlerData.args,\n            response: handlerData.response,\n        });\n    }\n}\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData) {\n    var global = utils_1.getGlobalObject();\n    var from = handlerData.from;\n    var to = handlerData.to;\n    var parsedLoc = utils_1.parseUrl(global.location.href);\n    var parsedFrom = utils_1.parseUrl(from);\n    var parsedTo = utils_1.parseUrl(to);\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n        parsedFrom = parsedLoc;\n    }\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n        to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n        from = parsedFrom.relative;\n    }\n    core_1.getCurrentHub().addBreadcrumb({\n        category: 'navigation',\n        data: {\n            from: from,\n            to: to,\n        },\n    });\n}\n//# sourceMappingURL=breadcrumbs.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","_domBreadcrumb","dom","_innerDomBreadcrumb","handlerData","keyAttrs","serializeAttribute","undefined","target","event","utils_1","htmlTreeAsString","e","length","core_1","getCurrentHub","addBreadcrumb","category","name","message","_consoleBreadcrumb","breadcrumb","data","arguments","args","logger","level","severityFromString","safeJoin","slice","input","_xhrBreadcrumb","endTimestamp","__sentry_own_request__","xhr","_a","__sentry_xhr__","method","url","status_code","body","type","_fetchBreadcrumb","fetchData","match","error","types_1","Severity","Error","tslib_1","__assign","response","status","_historyBreadcrumb","getGlobalObject","from","to","parsedLoc","parseUrl","location","href","parsedFrom","parsedTo","path","protocol","host","relative","Object","defineProperty","value","Breadcrumbs","options","id","_options","console","fetch","history","sentry","prototype","addSentryBreadcrumb","Breadcrumbs.prototype.addSentryBreadcrumb","event_id","getEventDescription","setupOnce","Breadcrumbs.prototype.setupOnce","addInstrumentationHandler"]
}
