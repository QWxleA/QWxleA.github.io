{
"version":3,
"file":"module$node_modules$$pixi$text$dist$cjs$text.js",
"lineCount":54,
"mappings":"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",
"sources":["node_modules/@pixi/text/dist/cjs/text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$pixi$text$dist$cjs$text\"] = function(global,require,module,exports) {\n/*!\n * @pixi/text - v6.2.0\n * Compiled Mon, 01 Nov 2021 16:52:10 UTC\n *\n * @pixi/text is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar sprite = require('@pixi/sprite');\nvar core = require('@pixi/core');\nvar settings = require('@pixi/settings');\nvar math = require('@pixi/math');\nvar utils = require('@pixi/utils');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\n(function (TEXT_GRADIENT) {\n    TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_VERTICAL\"] = 0] = \"LINEAR_VERTICAL\";\n    TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_HORIZONTAL\"] = 1] = \"LINEAR_HORIZONTAL\";\n})(exports.TEXT_GRADIENT || (exports.TEXT_GRADIENT = {}));\n\n// disabling eslint for now, going to rewrite this in v5\nvar defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: exports.TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\nvar genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui' ];\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n */\nvar TextStyle = /** @class */ (function () {\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    function TextStyle(style) {\n        this.styleID = 0;\n        this.reset();\n        deepCopyProperties(this, style, style);\n    }\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    TextStyle.prototype.clone = function () {\n        var clonedProperties = {};\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n        return new TextStyle(clonedProperties);\n    };\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    TextStyle.prototype.reset = function () {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    };\n    Object.defineProperty(TextStyle.prototype, \"align\", {\n        /**\n         * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._align;\n        },\n        set: function (align) {\n            if (this._align !== align) {\n                this._align = align;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"breakWords\", {\n        /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n        get: function () {\n            return this._breakWords;\n        },\n        set: function (breakWords) {\n            if (this._breakWords !== breakWords) {\n                this._breakWords = breakWords;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"dropShadow\", {\n        /** Set a drop shadow for the text. */\n        get: function () {\n            return this._dropShadow;\n        },\n        set: function (dropShadow) {\n            if (this._dropShadow !== dropShadow) {\n                this._dropShadow = dropShadow;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"dropShadowAlpha\", {\n        /** Set alpha for the drop shadow. */\n        get: function () {\n            return this._dropShadowAlpha;\n        },\n        set: function (dropShadowAlpha) {\n            if (this._dropShadowAlpha !== dropShadowAlpha) {\n                this._dropShadowAlpha = dropShadowAlpha;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"dropShadowAngle\", {\n        /** Set a angle of the drop shadow. */\n        get: function () {\n            return this._dropShadowAngle;\n        },\n        set: function (dropShadowAngle) {\n            if (this._dropShadowAngle !== dropShadowAngle) {\n                this._dropShadowAngle = dropShadowAngle;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"dropShadowBlur\", {\n        /** Set a shadow blur radius. */\n        get: function () {\n            return this._dropShadowBlur;\n        },\n        set: function (dropShadowBlur) {\n            if (this._dropShadowBlur !== dropShadowBlur) {\n                this._dropShadowBlur = dropShadowBlur;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"dropShadowColor\", {\n        /** A fill style to be used on the dropshadow e.g 'red', '#00FF00'. */\n        get: function () {\n            return this._dropShadowColor;\n        },\n        set: function (dropShadowColor) {\n            var outputColor = getColor(dropShadowColor);\n            if (this._dropShadowColor !== outputColor) {\n                this._dropShadowColor = outputColor;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"dropShadowDistance\", {\n        /** Set a distance of the drop shadow. */\n        get: function () {\n            return this._dropShadowDistance;\n        },\n        set: function (dropShadowDistance) {\n            if (this._dropShadowDistance !== dropShadowDistance) {\n                this._dropShadowDistance = dropShadowDistance;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fill\", {\n        /**\n         * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n         *\n         * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n         * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n         *\n         * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        get: function () {\n            return this._fill;\n        },\n        set: function (fill) {\n            // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n            //       the setter converts to string. See this thread for more details:\n            //       https://github.com/microsoft/TypeScript/issues/2521\n            // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n            //       without casting here.\n            var outputColor = getColor(fill);\n            if (this._fill !== outputColor) {\n                this._fill = outputColor;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fillGradientType\", {\n        /**\n         * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n         *\n         * @see PIXI.TEXT_GRADIENT\n         */\n        get: function () {\n            return this._fillGradientType;\n        },\n        set: function (fillGradientType) {\n            if (this._fillGradientType !== fillGradientType) {\n                this._fillGradientType = fillGradientType;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fillGradientStops\", {\n        /**\n         * If fill is an array of colours to create a gradient, this array can set the stop points\n         * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n         */\n        get: function () {\n            return this._fillGradientStops;\n        },\n        set: function (fillGradientStops) {\n            if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n                this._fillGradientStops = fillGradientStops;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fontFamily\", {\n        /** The font family. */\n        get: function () {\n            return this._fontFamily;\n        },\n        set: function (fontFamily) {\n            if (this.fontFamily !== fontFamily) {\n                this._fontFamily = fontFamily;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fontSize\", {\n        /**\n         * The font size\n         * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n         */\n        get: function () {\n            return this._fontSize;\n        },\n        set: function (fontSize) {\n            if (this._fontSize !== fontSize) {\n                this._fontSize = fontSize;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fontStyle\", {\n        /**\n         * The font style\n         * ('normal', 'italic' or 'oblique')\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._fontStyle;\n        },\n        set: function (fontStyle) {\n            if (this._fontStyle !== fontStyle) {\n                this._fontStyle = fontStyle;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fontVariant\", {\n        /**\n         * The font variant\n         * ('normal' or 'small-caps')\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._fontVariant;\n        },\n        set: function (fontVariant) {\n            if (this._fontVariant !== fontVariant) {\n                this._fontVariant = fontVariant;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"fontWeight\", {\n        /**\n         * The font weight\n         * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._fontWeight;\n        },\n        set: function (fontWeight) {\n            if (this._fontWeight !== fontWeight) {\n                this._fontWeight = fontWeight;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"letterSpacing\", {\n        /** The amount of spacing between letters, default is 0. */\n        get: function () {\n            return this._letterSpacing;\n        },\n        set: function (letterSpacing) {\n            if (this._letterSpacing !== letterSpacing) {\n                this._letterSpacing = letterSpacing;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"lineHeight\", {\n        /** The line height, a number that represents the vertical space that a letter uses. */\n        get: function () {\n            return this._lineHeight;\n        },\n        set: function (lineHeight) {\n            if (this._lineHeight !== lineHeight) {\n                this._lineHeight = lineHeight;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"leading\", {\n        /** The space between lines. */\n        get: function () {\n            return this._leading;\n        },\n        set: function (leading) {\n            if (this._leading !== leading) {\n                this._leading = leading;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"lineJoin\", {\n        /**\n         * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n         * Default is 'miter' (creates a sharp corner).\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._lineJoin;\n        },\n        set: function (lineJoin) {\n            if (this._lineJoin !== lineJoin) {\n                this._lineJoin = lineJoin;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"miterLimit\", {\n        /**\n         * The miter limit to use when using the 'miter' lineJoin mode.\n         *\n         * This can reduce or increase the spikiness of rendered text.\n         */\n        get: function () {\n            return this._miterLimit;\n        },\n        set: function (miterLimit) {\n            if (this._miterLimit !== miterLimit) {\n                this._miterLimit = miterLimit;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"padding\", {\n        /**\n         * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n         * by adding padding to all sides of the text.\n         */\n        get: function () {\n            return this._padding;\n        },\n        set: function (padding) {\n            if (this._padding !== padding) {\n                this._padding = padding;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"stroke\", {\n        /**\n         * A canvas fillstyle that will be used on the text stroke\n         * e.g 'blue', '#FCFF00'\n         */\n        get: function () {\n            return this._stroke;\n        },\n        set: function (stroke) {\n            // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n            //       the setter converts to string. See this thread for more details:\n            //       https://github.com/microsoft/TypeScript/issues/2521\n            var outputColor = getColor(stroke);\n            if (this._stroke !== outputColor) {\n                this._stroke = outputColor;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"strokeThickness\", {\n        /**\n         * A number that represents the thickness of the stroke.\n         *\n         * @default 0\n         */\n        get: function () {\n            return this._strokeThickness;\n        },\n        set: function (strokeThickness) {\n            if (this._strokeThickness !== strokeThickness) {\n                this._strokeThickness = strokeThickness;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"textBaseline\", {\n        /**\n         * The baseline of the text that is rendered.\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._textBaseline;\n        },\n        set: function (textBaseline) {\n            if (this._textBaseline !== textBaseline) {\n                this._textBaseline = textBaseline;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"trim\", {\n        /** Trim transparent borders. */\n        get: function () {\n            return this._trim;\n        },\n        set: function (trim) {\n            if (this._trim !== trim) {\n                this._trim = trim;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"whiteSpace\", {\n        /**\n         * How newlines and spaces should be handled.\n         * Default is 'pre' (preserve, preserve).\n         *\n         *  value       | New lines     |   Spaces\n         *  ---         | ---           |   ---\n         * 'normal'     | Collapse      |   Collapse\n         * 'pre'        | Preserve      |   Preserve\n         * 'pre-line'   | Preserve      |   Collapse\n         *\n         * @member {string}\n         */\n        get: function () {\n            return this._whiteSpace;\n        },\n        set: function (whiteSpace) {\n            if (this._whiteSpace !== whiteSpace) {\n                this._whiteSpace = whiteSpace;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"wordWrap\", {\n        /** Indicates if word wrap should be used. */\n        get: function () {\n            return this._wordWrap;\n        },\n        set: function (wordWrap) {\n            if (this._wordWrap !== wordWrap) {\n                this._wordWrap = wordWrap;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TextStyle.prototype, \"wordWrapWidth\", {\n        /** The width at which text will wrap, it needs wordWrap to be set to true. */\n        get: function () {\n            return this._wordWrapWidth;\n        },\n        set: function (wordWrapWidth) {\n            if (this._wordWrapWidth !== wordWrapWidth) {\n                this._wordWrapWidth = wordWrapWidth;\n                this.styleID++;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    TextStyle.prototype.toFontString = function () {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        var fontSizeString = (typeof this.fontSize === 'number') ? this.fontSize + \"px\" : this.fontSize;\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        var fontFamilies = this.fontFamily;\n        if (!Array.isArray(this.fontFamily)) {\n            fontFamilies = this.fontFamily.split(',');\n        }\n        for (var i = fontFamilies.length - 1; i >= 0; i--) {\n            // Trim any extra white-space\n            var fontFamily = fontFamilies[i].trim();\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {\n                fontFamily = \"\\\"\" + fontFamily + \"\\\"\";\n            }\n            fontFamilies[i] = fontFamily;\n        }\n        return this.fontStyle + \" \" + this.fontVariant + \" \" + this.fontWeight + \" \" + fontSizeString + \" \" + fontFamilies.join(',');\n    };\n    return TextStyle;\n}());\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getSingleColor(color) {\n    if (typeof color === 'number') {\n        return utils.hex2string(color);\n    }\n    else if (typeof color === 'string') {\n        if (color.indexOf('0x') === 0) {\n            color = color.replace('0x', '#');\n        }\n    }\n    return color;\n}\nfunction getColor(color) {\n    if (!Array.isArray(color)) {\n        return getSingleColor(color);\n    }\n    else {\n        for (var i = 0; i < color.length; ++i) {\n            color[i] = getSingleColor(color[i]);\n        }\n        return color;\n    }\n}\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2) {\n    if (!Array.isArray(array1) || !Array.isArray(array2)) {\n        return false;\n    }\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    for (var i = 0; i < array1.length; ++i) {\n        if (array1[i] !== array2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n    for (var prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        }\n        else {\n            target[prop] = source[prop];\n        }\n    }\n}\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @memberof PIXI\n */\nvar TextMetrics = /** @class */ (function () {\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @return Measured width and height of the text.\n     */\n    TextMetrics.measureText = function (text, style, wordWrap, canvas) {\n        if (canvas === void 0) { canvas = TextMetrics._canvas; }\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        var font = style.toFontString();\n        var fontProperties = TextMetrics.measureFont(font);\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0) {\n            fontProperties.fontSize = style.fontSize;\n            fontProperties.ascent = style.fontSize;\n        }\n        var context = canvas.getContext('2d');\n        context.font = font;\n        var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        var lineWidths = new Array(lines.length);\n        var maxLineWidth = 0;\n        for (var i = 0; i < lines.length; i++) {\n            var lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        var width = maxLineWidth + style.strokeThickness;\n        if (style.dropShadow) {\n            width += style.dropShadowDistance;\n        }\n        var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n        if (style.dropShadow) {\n            height += style.dropShadowDistance;\n        }\n        return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n    };\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @return New string with new lines applied where required\n     */\n    TextMetrics.wordWrap = function (text, style, canvas) {\n        if (canvas === void 0) { canvas = TextMetrics._canvas; }\n        var context = canvas.getContext('2d');\n        var width = 0;\n        var line = '';\n        var lines = '';\n        var cache = Object.create(null);\n        var letterSpacing = style.letterSpacing, whiteSpace = style.whiteSpace;\n        // How to handle whitespaces\n        var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n        // whether or not spaces may be added to the beginning of lines\n        var canPrependSpaces = !collapseSpaces;\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        var wordWrapWidth = style.wordWrapWidth + letterSpacing;\n        // break text into words, spaces and newline chars\n        var tokens = TextMetrics.tokenize(text);\n        for (var i = 0; i < tokens.length; i++) {\n            // get the word, space or newlineChar\n            var token = tokens[i];\n            // if word is a new line\n            if (TextMetrics.isNewline(token)) {\n                // keep the new line\n                if (!collapseNewlines) {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces) {\n                // check both this and the last tokens for spaces\n                var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n                if (currIsBreakingSpace && lastIsBreakingSpace) {\n                    continue;\n                }\n            }\n            // get word width from cache if possible\n            var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth) {\n                // if we are not already at the beginning of a line\n                if (line !== '') {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords)) {\n                    // break word into characters\n                    var characters = TextMetrics.wordWrapSplit(token);\n                    // loop the characters\n                    for (var j = 0; j < characters.length; j++) {\n                        var char = characters[j];\n                        var k = 1;\n                        // we are not at the end of the token\n                        while (characters[j + k]) {\n                            var nextChar = characters[j + k];\n                            var lastChar = char[char.length - 1];\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else {\n                                break;\n                            }\n                            k++;\n                        }\n                        j += char.length - 1;\n                        var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n                        if (characterWidth + width > wordWrapWidth) {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n                // run word out of the bounds\n                else {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0) {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n                    var isLastToken = i === tokens.length - 1;\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n            // word could fit\n            else {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth) {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n                    // add the word to the current line\n                    line += token;\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n        lines += TextMetrics.addLine(line, false);\n        return lines;\n    };\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     *\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @return A formatted line\n     */\n    TextMetrics.addLine = function (line, newLine) {\n        if (newLine === void 0) { newLine = true; }\n        line = TextMetrics.trimRight(line);\n        line = (newLine) ? line + \"\\n\" : line;\n        return line;\n    };\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @return The from cache.\n     */\n    TextMetrics.getFromCache = function (key, letterSpacing, cache, context) {\n        var width = cache[key];\n        if (typeof width !== 'number') {\n            var spacing = ((key.length) * letterSpacing);\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n        return width;\n    };\n    /**\n     * Determines whether we should collapse breaking spaces.\n     *\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @return Should collapse\n     */\n    TextMetrics.collapseSpaces = function (whiteSpace) {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    };\n    /**\n     * Determines whether we should collapse newLine chars.\n     *\n     * @param whiteSpace - The white space\n     * @return  should collapse\n     */\n    TextMetrics.collapseNewlines = function (whiteSpace) {\n        return (whiteSpace === 'normal');\n    };\n    /**\n     * Trims breaking whitespaces from string.\n     *\n     * @param  text - The text\n     * @return Trimmed string\n     */\n    TextMetrics.trimRight = function (text) {\n        if (typeof text !== 'string') {\n            return '';\n        }\n        for (var i = text.length - 1; i >= 0; i--) {\n            var char = text[i];\n            if (!TextMetrics.isBreakingSpace(char)) {\n                break;\n            }\n            text = text.slice(0, -1);\n        }\n        return text;\n    };\n    /**\n     * Determines if char is a newline.\n     *\n     * @param  char - The character\n     * @return True if newline, False otherwise.\n     */\n    TextMetrics.isNewline = function (char) {\n        if (typeof char !== 'string') {\n            return false;\n        }\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    };\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param char     - The character\n     * @param [nextChar] - The next character\n     * @return True if whitespace, False otherwise.\n     */\n    TextMetrics.isBreakingSpace = function (char, _nextChar) {\n        if (typeof char !== 'string') {\n            return false;\n        }\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    };\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @param  text - The text\n     * @return  A tokenized array\n     */\n    TextMetrics.tokenize = function (text) {\n        var tokens = [];\n        var token = '';\n        if (typeof text !== 'string') {\n            return tokens;\n        }\n        for (var i = 0; i < text.length; i++) {\n            var char = text[i];\n            var nextChar = text[i + 1];\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char)) {\n                if (token !== '') {\n                    tokens.push(token);\n                    token = '';\n                }\n                tokens.push(char);\n                continue;\n            }\n            token += char;\n        }\n        if (token !== '') {\n            tokens.push(token);\n        }\n        return tokens;\n    };\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  token       - The token\n     * @param  breakWords - The style attr break words\n     * @return Whether to break word or not\n     */\n    TextMetrics.canBreakWords = function (_token, breakWords) {\n        return breakWords;\n    };\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  char        - The character\n     * @param  nextChar    - The next character\n     * @param  token       - The token/word the characters are from\n     * @param  index       - The index in the token of the char\n     * @param  breakWords - The style attr break words\n     * @return whether to break word or not\n     */\n    TextMetrics.canBreakChars = function (_char, _nextChar, _token, _index, _breakWords) {\n        return true;\n    };\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"\ud83e\udd2a\ud83e\udd2a\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  token - The token to split\n     * @return The characters of the token\n     */\n    TextMetrics.wordWrapSplit = function (token) {\n        return token.split('');\n    };\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @param font - String representing the style of the font\n     * @return Font properties object\n     */\n    TextMetrics.measureFont = function (font) {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font]) {\n            return TextMetrics._fonts[font];\n        }\n        var properties = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n        var canvas = TextMetrics._canvas;\n        var context = TextMetrics._context;\n        context.font = font;\n        var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        var width = Math.ceil(context.measureText(metricsString).width);\n        var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        var height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n        canvas.width = width;\n        canvas.height = height;\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n        context.font = font;\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n        var imagedata = context.getImageData(0, 0, width, height).data;\n        var pixels = imagedata.length;\n        var line = width * 4;\n        var i = 0;\n        var idx = 0;\n        var stop = false;\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i) {\n            for (var j = 0; j < line; j += 4) {\n                if (imagedata[idx + j] !== 255) {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop) {\n                idx += line;\n            }\n            else {\n                break;\n            }\n        }\n        properties.ascent = baseline - i;\n        idx = pixels - line;\n        stop = false;\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i) {\n            for (var j = 0; j < line; j += 4) {\n                if (imagedata[idx + j] !== 255) {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop) {\n                idx -= line;\n            }\n            else {\n                break;\n            }\n        }\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n        TextMetrics._fonts[font] = properties;\n        return properties;\n    };\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    TextMetrics.clearMetrics = function (font) {\n        if (font === void 0) { font = ''; }\n        if (font) {\n            delete TextMetrics._fonts[font];\n        }\n        else {\n            TextMetrics._fonts = {};\n        }\n    };\n    return TextMetrics;\n}());\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\nvar canvas = (function () {\n    try {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        var c = new OffscreenCanvas(0, 0);\n        var context = c.getContext('2d');\n        if (context && context.measureText) {\n            return c;\n        }\n        return document.createElement('canvas');\n    }\n    catch (ex) {\n        return document.createElement('canvas');\n    }\n})();\ncanvas.width = canvas.height = 10;\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |\u00c9q\u00c5\n */\nTextMetrics.METRICS_STRING = '|\u00c9q\u00c5';\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A,\n    0x000D ];\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009,\n    0x0020,\n    0x2000,\n    0x2001,\n    0x2002,\n    0x2003,\n    0x2004,\n    0x2005,\n    0x2006,\n    0x2008,\n    0x2009,\n    0x200A,\n    0x205F,\n    0x3000 ];\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\nvar defaultDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n// Checking that we can use moddern canvas2D api\n// https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n// note: this is unstable API, Chrome less 94 use a `textLetterSpacing`, newest use a letterSpacing\n// eslint-disable-next-line max-len\nvar supportLetterSpacing = 'letterSpacing' in CanvasRenderingContext2D.prototype || 'textLetterSpacing' in CanvasRenderingContext2D.prototype;\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @memberof PIXI\n */\nvar Text = /** @class */ (function (_super) {\n    __extends(Text, _super);\n    /**\n     * @param text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    function Text(text, style, canvas) {\n        var _this = this;\n        var ownCanvas = false;\n        if (!canvas) {\n            canvas = document.createElement('canvas');\n            ownCanvas = true;\n        }\n        canvas.width = 3;\n        canvas.height = 3;\n        var texture = core.Texture.from(canvas);\n        texture.orig = new math.Rectangle();\n        texture.trim = new math.Rectangle();\n        _this = _super.call(this, texture) || this;\n        _this._ownCanvas = ownCanvas;\n        _this.canvas = canvas;\n        _this.context = _this.canvas.getContext('2d');\n        _this._resolution = settings.settings.RESOLUTION;\n        _this._autoResolution = true;\n        _this._text = null;\n        _this._style = null;\n        _this._styleListener = null;\n        _this._font = '';\n        _this.text = text;\n        _this.style = style;\n        _this.localStyleID = -1;\n        return _this;\n    }\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     *\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    Text.prototype.updateText = function (respectDirty) {\n        var style = this._style;\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID) {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n        if (!this.dirty && respectDirty) {\n            return;\n        }\n        this._font = this._style.toFontString();\n        var context = this.context;\n        var measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        var width = measured.width;\n        var height = measured.height;\n        var lines = measured.lines;\n        var lineHeight = measured.lineHeight;\n        var lineWidths = measured.lineWidths;\n        var maxLineWidth = measured.maxLineWidth;\n        var fontProperties = measured.fontProperties;\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n        context.scale(this._resolution, this._resolution);\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n        var linePositionX;\n        var linePositionY;\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        var passesCount = style.dropShadow ? 2 : 1;\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (var i = 0; i < passesCount; ++i) {\n            var isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            var dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            var dsOffsetShadow = dsOffsetText * this._resolution;\n            if (isShadowPass) {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n                var dropShadowColor = style.dropShadowColor;\n                var rgb = utils.hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : utils.string2hex(dropShadowColor));\n                context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke;\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n            var linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n            if (!Text.nextLineHeightBehavior || lineHeight - fontProperties.fontSize < 0) {\n                linePositionYShift = 0;\n            }\n            // draw lines line by line\n            for (var i_1 = 0; i_1 < lines.length; i_1++) {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i_1 * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n                if (style.align === 'right') {\n                    linePositionX += maxLineWidth - lineWidths[i_1];\n                }\n                else if (style.align === 'center') {\n                    linePositionX += (maxLineWidth - lineWidths[i_1]) / 2;\n                }\n                if (style.stroke && style.strokeThickness) {\n                    this.drawLetterSpacing(lines[i_1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText, true);\n                }\n                if (style.fill) {\n                    this.drawLetterSpacing(lines[i_1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText);\n                }\n            }\n        }\n        this.updateTexture();\n    };\n    /**\n     * Render the text with letter-spacing.\n     *\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    Text.prototype.drawLetterSpacing = function (text, x, y, isStroke) {\n        if (isStroke === void 0) { isStroke = false; }\n        var style = this._style;\n        // letterSpacing of 0 means normal\n        var letterSpacing = style.letterSpacing;\n        if (letterSpacing === 0 || supportLetterSpacing) {\n            if (supportLetterSpacing) {\n                this.context.letterSpacing = letterSpacing;\n                this.context.textLetterSpacing = letterSpacing;\n            }\n            if (isStroke) {\n                this.context.strokeText(text, x, y);\n            }\n            else {\n                this.context.fillText(text, x, y);\n            }\n            return;\n        }\n        var currentPosition = x;\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        var stringArray = Array.from ? Array.from(text) : text.split('');\n        var previousWidth = this.context.measureText(text).width;\n        var currentWidth = 0;\n        for (var i = 0; i < stringArray.length; ++i) {\n            var currentChar = stringArray[i];\n            if (isStroke) {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    };\n    /** Updates texture size based on canvas size. */\n    Text.prototype.updateTexture = function () {\n        var canvas = this.canvas;\n        if (this._style.trim) {\n            var trimmed = utils.trimCanvas(canvas);\n            if (trimmed.data) {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n        var texture = this._texture;\n        var style = this._style;\n        var padding = style.trim ? 0 : style.padding;\n        var baseTexture = texture.baseTexture;\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n        texture.updateUvs();\n        // Recursively updates transform of all objects from the root to this one\n        this._recursivePostUpdateTransform();\n        this.dirty = false;\n    };\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer - The renderer\n     */\n    Text.prototype._render = function (renderer) {\n        if (this._autoResolution && this._resolution !== renderer.resolution) {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n        this.updateText(true);\n        _super.prototype._render.call(this, renderer);\n    };\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param rect - The output rectangle.\n     * @return The bounds.\n     */\n    Text.prototype.getLocalBounds = function (rect) {\n        this.updateText(true);\n        return _super.prototype.getLocalBounds.call(this, rect);\n    };\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    Text.prototype._calculateBounds = function () {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    };\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @return The fill style\n     */\n    Text.prototype._generateFillStyle = function (style, lines, metrics) {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        var fillStyle = style.fill;\n        if (!Array.isArray(fillStyle)) {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1) {\n            return fillStyle[0];\n        }\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        var gradient;\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        var dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n        // should also take padding into account, padding can offset the gradient\n        var padding = style.padding || 0;\n        var width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        var height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n        // make a copy of the style settings, so we can manipulate them later\n        var fill = fillStyle.slice();\n        var fillGradientStops = style.fillGradientStops.slice();\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length) {\n            var lengthPlus1 = fill.length + 1;\n            for (var i = 1; i < lengthPlus1; ++i) {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n        if (style.fillGradientType === exports.TEXT_GRADIENT.LINEAR_VERTICAL) {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n            for (var i = 0; i < lines.length; i++) {\n                var lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                var thisLineTop = metrics.lineHeight * i;\n                var thisLineGradientStart = thisLineTop;\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop) {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n                var thisLineBottom = thisLineTop + textHeight;\n                var nextLineTop = metrics.lineHeight * (i + 1);\n                var thisLineGradientEnd = thisLineBottom;\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom) {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n                // textHeight, but as a 0-1 size in global gradient stop space\n                var gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n                for (var j = 0; j < fill.length; j++) {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    var lineStop = 0;\n                    if (typeof fillGradientStops[j] === 'number') {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else {\n                        lineStop = j / fill.length;\n                    }\n                    var globalStop = Math.min(1, Math.max(0, (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            var totalIterations = fill.length + 1;\n            var currentIteration = 1;\n            for (var i = 0; i < fill.length; i++) {\n                var stop = void 0;\n                if (typeof fillGradientStops[i] === 'number') {\n                    stop = fillGradientStops[i];\n                }\n                else {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n        return gradient;\n    };\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    Text.prototype.destroy = function (options) {\n        if (typeof options === 'boolean') {\n            options = { children: options };\n        }\n        options = Object.assign({}, defaultDestroyOptions, options);\n        _super.prototype.destroy.call(this, options);\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas) {\n            this.canvas.height = this.canvas.width = 0;\n        }\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n        this._style = null;\n    };\n    Object.defineProperty(Text.prototype, \"width\", {\n        /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n        get: function () {\n            this.updateText(true);\n            return Math.abs(this.scale.x) * this._texture.orig.width;\n        },\n        set: function (value) {\n            this.updateText(true);\n            var s = utils.sign(this.scale.x) || 1;\n            this.scale.x = s * value / this._texture.orig.width;\n            this._width = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Text.prototype, \"height\", {\n        /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n        get: function () {\n            this.updateText(true);\n            return Math.abs(this.scale.y) * this._texture.orig.height;\n        },\n        set: function (value) {\n            this.updateText(true);\n            var s = utils.sign(this.scale.y) || 1;\n            this.scale.y = s * value / this._texture.orig.height;\n            this._height = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Text.prototype, \"style\", {\n        /**\n         * Set the style of the text.\n         *\n         * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n         */\n        get: function () {\n            // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n            //       since the setter creates the TextStyle. See this thread for more details:\n            //       https://github.com/microsoft/TypeScript/issues/2521\n            return this._style;\n        },\n        set: function (style) {\n            style = style || {};\n            if (style instanceof TextStyle) {\n                this._style = style;\n            }\n            else {\n                this._style = new TextStyle(style);\n            }\n            this.localStyleID = -1;\n            this.dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Text.prototype, \"text\", {\n        /** Set the copy for the text object. To split a line you can use '\\n'. */\n        get: function () {\n            return this._text;\n        },\n        set: function (text) {\n            text = String(text === null || text === undefined ? '' : text);\n            if (this._text === text) {\n                return;\n            }\n            this._text = text;\n            this.dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Text.prototype, \"resolution\", {\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         *\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         *\n         * @default 1\n         */\n        get: function () {\n            return this._resolution;\n        },\n        set: function (value) {\n            this._autoResolution = false;\n            if (this._resolution === value) {\n                return;\n            }\n            this._resolution = value;\n            this.dirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * New behavior for `lineHeight` that's meant to mimic HTML text. A value of `true` will\n     * make sure the first baseline is offset by the `lineHeight` value if it is greater than `fontSize`.\n     * A value of `false` will use the legacy behavior and not change the baseline of the first line.\n     * In the next major release, we'll enable this by default.\n     */\n    Text.nextLineHeightBehavior = false;\n    return Text;\n}(sprite.Sprite));\n\nexports.Text = Text;\nexports.TextMetrics = TextMetrics;\nexports.TextStyle = TextStyle;\n//# sourceMappingURL=text.js.map\n\n};"],
"names":["shadow$provide","global","require","module","exports","__extends","d","b","__","constructor","extendStatics","prototype","Object","create","getSingleColor","color","utils","hex2string","indexOf","replace","getColor","Array","isArray","i","length","deepCopyProperties","target","source","propertyObj","prop","slice","defineProperty","value","sprite","core","settings","math","setPrototypeOf","__proto__","p","hasOwnProperty","TEXT_GRADIENT","defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","leading","genericFontFamilies","TextStyle","style","styleID","reset","clone","TextStyle.prototype.clone","clonedProperties","TextStyle.prototype.reset","get","_align","set","enumerable","configurable","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","array1","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_whiteSpace","_wordWrap","_wordWrapWidth","toFontString","TextStyle.prototype.toFontString","fontSizeString","fontFamilies","split","test","join","TextMetrics","text","width","height","lines","lineWidths","maxLineWidth","fontProperties","measureText","TextMetrics.measureText","canvas","_canvas","undefined","font","measureFont","ascent","context","getContext","outputText","lineWidth","max","TextMetrics.wordWrap","line","cache","collapseSpaces","collapseNewlines","canPrependSpaces","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","characters","j","wordWrapSplit","char","k","nextChar","canBreakChars","lastChar","characterWidth","TextMetrics.addLine","newLine","trimRight","TextMetrics.getFromCache","key","spacing","TextMetrics.collapseSpaces","TextMetrics.collapseNewlines","TextMetrics.trimRight","TextMetrics.isNewline","_newlines","charCodeAt","TextMetrics.isBreakingSpace","_nextChar","_breakingSpaces","TextMetrics.tokenize","push","TextMetrics.canBreakWords","_token","TextMetrics.canBreakChars","_char","_index","TextMetrics.wordWrapSplit","TextMetrics.measureFont","_fonts","properties","descent","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","HEIGHT_MULTIPLIER","BASELINE_MULTIPLIER","fillStyle","fillRect","fillText","imagedata","getImageData","data","pixels","idx","stop","clearMetrics","TextMetrics.clearMetrics","c","OffscreenCanvas","document","createElement","ex","defaultDestroyOptions","texture","children","baseTexture","supportLetterSpacing","CanvasRenderingContext2D","Text","_super","ownCanvas","Texture","from","orig","Rectangle","_this","call","_ownCanvas","_resolution","RESOLUTION","_autoResolution","_text","_style","_styleListener","_font","localStyleID","updateText","Text.prototype.updateText","respectDirty","dirty","measured","scale","clearRect","linePositionX","linePositionY","passesCount","dsOffsetText","isShadowPass","dsOffsetShadow","strokeStyle","rgb","hex2rgb","string2hex","shadowColor","shadowBlur","shadowOffsetX","cos","shadowOffsetY","sin","_generateFillStyle","linePositionYShift","nextLineHeightBehavior","i_1","drawLetterSpacing","updateTexture","Text.prototype.drawLetterSpacing","x","y","isStroke","textLetterSpacing","strokeText","stringArray","previousWidth","currentWidth","currentChar","currentPosition","substring","Text.prototype.updateTexture","trimmed","trimCanvas","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","updateUvs","_recursivePostUpdateTransform","_render","Text.prototype._render","renderer","resolution","getLocalBounds","Text.prototype.getLocalBounds","rect","_calculateBounds","Text.prototype._calculateBounds","calculateVertices","_bounds","addQuad","vertexData","Text.prototype._generateFillStyle","metrics","dropShadowCorrection","lengthPlus1","unshift","gradient","createLinearGradient","textHeight","lastLineBottom","thisLineGradientStart","thisLineTop","thisLineBottom","nextLineTop","thisLineGradientEnd","gradStopLineHeight","globalStop","min","lineStop","Number","toFixed","addColorStop","totalIterations","currentIteration","destroy","Text.prototype.destroy","options","assign","abs","s","sign","_width","_height","String","Sprite"]
}
