{
"version":3,
"file":"module$node_modules$codemirror$mode$coffeescript$coffeescript.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/codemirror/mode/coffeescript/coffeescript.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$coffeescript$coffeescript\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Link to the project's GitHub page:\n * https://github.com/pickhardt/coffeescript-codemirror-mode\n */\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"coffeescript\", function(conf, parserConf) {\n  var ERRORCLASS = \"error\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\n  var delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\n  var identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\n  var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                  \"is\", \"isnt\", \"in\",\n                                  \"instanceof\", \"typeof\"]);\n  var indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                        \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\n  var commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                        \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                        \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\n  var keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\n  indentKeywords = wordRegexp(indentKeywords);\n\n\n  var stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\n  var regexPrefixes = /^(\\/{3}|\\/)/;\n  var commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\n  var constants = wordRegexp(commonConstants);\n\n  // Tokenizers\n  function tokenBase(stream, state) {\n    // Handle scope changes\n    if (stream.sol()) {\n      if (state.scope.align === null) state.scope.align = false;\n      var scopeOffset = state.scope.offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n          return \"indent\";\n        } else if (lineOffset < scopeOffset) {\n          return \"dedent\";\n        }\n        return null;\n      } else {\n        if (scopeOffset > 0) {\n          dedent(stream, state);\n        }\n      }\n    }\n    if (stream.eatSpace()) {\n      return null;\n    }\n\n    var ch = stream.peek();\n\n    // Handle docco title comment (single line)\n    if (stream.match(\"####\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle multi line comments\n    if (stream.match(\"###\")) {\n      state.tokenize = longComment;\n      return state.tokenize(stream, state);\n    }\n\n    // Single line comment\n    if (ch === \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle number literals\n    if (stream.match(/^-?[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\d+\\.\\d*/)) {\n        floatLiteral = true;\n      }\n      if (stream.match(/^-?\\.\\d+/)) {\n        floatLiteral = true;\n      }\n\n      if (floatLiteral) {\n        // prevent from getting extra . on 1..\n        if (stream.peek() == \".\"){\n          stream.backUp(1);\n        }\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^-?0x[0-9a-f]+/i)) {\n        intLiteral = true;\n      }\n      // Decimal\n      if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^-?0(?![\\dx])/i)) {\n        intLiteral = true;\n      }\n      if (intLiteral) {\n        return \"number\";\n      }\n    }\n\n    // Handle strings\n    if (stream.match(stringPrefixes)) {\n      state.tokenize = tokenFactory(stream.current(), false, \"string\");\n      return state.tokenize(stream, state);\n    }\n    // Handle regex literals\n    if (stream.match(regexPrefixes)) {\n      if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n        state.tokenize = tokenFactory(stream.current(), true, \"string-2\");\n        return state.tokenize(stream, state);\n      } else {\n        stream.backUp(1);\n      }\n    }\n\n\n\n    // Handle operators and delimiters\n    if (stream.match(operators) || stream.match(wordOperators)) {\n      return \"operator\";\n    }\n    if (stream.match(delimiters)) {\n      return \"punctuation\";\n    }\n\n    if (stream.match(constants)) {\n      return \"atom\";\n    }\n\n    if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n      return \"property\";\n    }\n\n    if (stream.match(keywords)) {\n      return \"keyword\";\n    }\n\n    if (stream.match(identifiers)) {\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return ERRORCLASS;\n  }\n\n  function tokenFactory(delimiter, singleline, outclass) {\n    return function(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\/\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol()) {\n            return outclass;\n          }\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenBase;\n          return outclass;\n        } else {\n          stream.eat(/['\"\\/]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors) {\n          outclass = ERRORCLASS;\n        } else {\n          state.tokenize = tokenBase;\n        }\n      }\n      return outclass;\n    };\n  }\n\n  function longComment(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^#]/);\n      if (stream.match(\"###\")) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      stream.eatWhile(\"#\");\n    }\n    return \"comment\";\n  }\n\n  function indent(stream, state, type) {\n    type = type || \"coffee\";\n    var offset = 0, align = false, alignOffset = null;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (scope.type === \"coffee\" || scope.type == \"}\") {\n        offset = scope.offset + conf.indentUnit;\n        break;\n      }\n    }\n    if (type !== \"coffee\") {\n      align = null;\n      alignOffset = stream.column() + stream.current().length;\n    } else if (state.scope.align) {\n      state.scope.align = false;\n    }\n    state.scope = {\n      offset: offset,\n      type: type,\n      prev: state.scope,\n      align: align,\n      alignOffset: alignOffset\n    };\n  }\n\n  function dedent(stream, state) {\n    if (!state.scope.prev) return;\n    if (state.scope.type === \"coffee\") {\n      var _indent = stream.indentation();\n      var matched = false;\n      for (var scope = state.scope; scope; scope = scope.prev) {\n        if (_indent === scope.offset) {\n          matched = true;\n          break;\n        }\n      }\n      if (!matched) {\n        return true;\n      }\n      while (state.scope.prev && state.scope.offset !== _indent) {\n        state.scope = state.scope.prev;\n      }\n      return false;\n    } else {\n      state.scope = state.scope.prev;\n      return false;\n    }\n  }\n\n  function tokenLexer(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle scope changes.\n    if (current === \"return\") {\n      state.dedent = true;\n    }\n    if (((current === \"->\" || current === \"=>\") && stream.eol())\n        || style === \"indent\") {\n      indent(stream, state);\n    }\n    var delimiter_index = \"[({\".indexOf(current);\n    if (delimiter_index !== -1) {\n      indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n    }\n    if (indentKeywords.exec(current)){\n      indent(stream, state);\n    }\n    if (current == \"then\"){\n      dedent(stream, state);\n    }\n\n\n    if (style === \"dedent\") {\n      if (dedent(stream, state)) {\n        return ERRORCLASS;\n      }\n    }\n    delimiter_index = \"])}\".indexOf(current);\n    if (delimiter_index !== -1) {\n      while (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      if (state.scope.type == current)\n        state.scope = state.scope.prev;\n    }\n    if (state.dedent && stream.eol()) {\n      if (state.scope.type == \"coffee\" && state.scope.prev)\n        state.scope = state.scope.prev;\n      state.dedent = false;\n    }\n\n    return style;\n  }\n\n  var external = {\n    startState: function(basecolumn) {\n      return {\n        tokenize: tokenBase,\n        scope: {offset:basecolumn || 0, type:\"coffee\", prev: null, align: false},\n        prop: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var fillAlign = state.scope.align === null && state.scope;\n      if (fillAlign && stream.sol()) fillAlign.align = false;\n\n      var style = tokenLexer(stream, state);\n      if (style && style != \"comment\") {\n        if (fillAlign) fillAlign.align = true;\n        state.prop = style == \"punctuation\" && stream.current() == \".\"\n      }\n\n      return style;\n    },\n\n    indent: function(state, text) {\n      if (state.tokenize != tokenBase) return 0;\n      var scope = state.scope;\n      var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n      if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n      var closes = closer && scope.type === text.charAt(0);\n      if (scope.align)\n        return scope.alignOffset - (closes ? 1 : 0);\n      else\n        return (closes ? scope.prev : scope).offset;\n    },\n\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n  return external;\n});\n\n// IANA registered media type\n// https://www.iana.org/assignments/media-types/\nCodeMirror.defineMIME(\"application/vnd.coffeescript\", \"coffeescript\");\n\nCodeMirror.defineMIME(\"text/x-coffeescript\", \"coffeescript\");\nCodeMirror.defineMIME(\"text/coffeescript\", \"coffeescript\");\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","conf","parserConf","wordRegexp","words","RegExp","join","tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","dedent","ch","peek","match","skipToEnd","tokenize","longComment","floatLiteral","backUp","intLiteral","stringPrefixes","tokenFactory","current","regexPrefixes","operators","wordOperators","delimiters","constants","atProp","prop","identifiers","keywords","next","ERRORCLASS","delimiter","singleline","outclass","eol","eatWhile","eat","singleLineStringErrors","indent","alignOffset","prev","indentUnit","column","length","_indent","matched","indentKeywords","concat","commonKeywords","commonConstants","external","startState","basecolumn","token","fillAlign","style","delimiter_index","indexOf","slice","exec","text","closer","charAt","closes","lineComment","fold","defineMIME"]
}
