{"version":3,"sources":["frontend/mobile/camera.cljs"],"mappings":";;;;;;AAaA,oCAAA,pCAAOA;AAAP,AACE,OAAAC,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,gDAAc,AAACI,kDACG,AAAWC,sEAAO,qBAAA,2CAAA,sZAAA,wEAAA,KAAA,niBAACC,sIACe,yGAAA,mFAAA,mEAAA,/PAACC,+CACA,AAACC,8aAGJ,AAAUC,wFAC1C,WAAKC;AAAL,AACE,OAAAC,qDAAA,yBAAA,uDAAA,AAAAC,mBAAA,2CAAA,2EAAA,2CAAA,qEAAA,oDAAA,YAAA,9EAAqCF;IARzD,WAAQP;AAAR,AAAA,OAAAH,uJAAA,WASQa,lHAAS,qFAAA,xCAAK,AAACC;AATvB,AAAA,OAAAd,iGAAA,WAUQe,5DAAK,AAACC,uCAA8BH;AAV5C,AAAA,OAAAb,gDAWc,AAACI,kDACG,AAAYc,+EAAW,qBAAA,2CAAA,wEAAA,0DAAA,8DAAA,hQAACZ,qHAAe,AAAgBH,wEAChBY,kFAEvC,WAAKL;AAAL,AACE,OAAAC,qDAAA,yBAAA,uDAAA,AAAAC,mBAAA,2CAAA,4EAAA,2CAAA,0DAAA,qEAAA,oDAAA,YAAA,1IAAqCG,4DACCL;IAjB1D,WAWQO;AAXR,AAAA,OAAAf,2BAAA,AAkBE,AAACiB,sBAAWN;;;;;;;AAEhB,qCAAA,rCAAMO,kFAAaC;AAAnB,AACE,IAAMC,QAAM,AAACC;IACPC,QAAM,AAACC;IACPC,UAAQ,yDAAA,zDAACC,mDAASH;IAClBI,MAAI,AAACC,yBAAWL;IAChBM,eAAa,wEAAA,KAAA,3DACE,AAACC,8CAA0BP,eAG3B,AAACQ,6CAAE,iBAAAC,oBAAK,GAAK,SAAA,RAAOL;AAAjB,AAAA,GAAAK;AACK,OAACC,6CAAKR,QAAQ,OAAA,NAAKE;;AADxBK;;WAJL,KAAA,AAAA,XAIE;;IAKfE,SAAO,AAAA,iGAAeb;AAb5B,AAcE,OAAAtB,gDAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,oFAAA,WAAQa,/CAAS,AAACd;AAAlB,AAAA,OAAAC,0LAAA,WACQoC,rJAAI,0DAAA,1DAACC,2HAA2BxB;AADxC,AAAA,OAAAX,2BAAA,AAEE,wLAAA,xLAACoC,sCACAjB,GACA,iIAAA,hIAAKS,yDACA,gEAAA,hEAACS,4CAAmCJ,OAAOC,IAAIvB","names":["frontend.mobile.camera/save-photo","promesa.core.bind","___42626__auto__","promesa.protocols/-promise","photo","promesa.core.catch$","js/module$node_modules$$capacitor$camera$dist$plugin_cjs.Camera","cljs.core/clj->js","cljs.core.get_in","frontend.state.get_config","js/module$node_modules$$capacitor$camera$dist$plugin_cjs.CameraResultType","error","lambdaisland.glogi.log","cljs.core/identity","filename","frontend.date/get-date-time-string-2","path","frontend.handler.editor/get-asset-path","_file","js/module$node_modules$$capacitor$filesystem$dist$plugin_cjs.Filesystem","promesa.core/resolved","frontend.mobile.camera/embed-photo","id","block","frontend.state/get-edit-block","input","frontend.state/get-input","content","frontend.mobile.camera.goog$module$goog$object.get","pos","frontend.util.cursor/pos","left-padding","frontend.util.cursor/beginning-of-line?","cljs.core._EQ_","and__4251__auto__","cljs.core.subs","format","url","frontend.util.format","frontend.commands/simple-insert!","frontend.handler.editor/get-asset-file-link"],"sourcesContent":["(ns frontend.mobile.camera\n  (:require [\"@capacitor/camera\" :refer [Camera CameraResultType]]\n            [\"@capacitor/filesystem\" :refer [Filesystem]]\n            [lambdaisland.glogi :as log]\n            [promesa.core :as p]\n            [frontend.handler.editor :as editor-handler]\n            [frontend.state :as state]\n            [frontend.date :as date]\n            [frontend.util :as util]\n            [frontend.commands :as commands]\n            [goog.object :as gobj]\n            [frontend.util.cursor :as cursor]))\n\n(defn- save-photo []\n  (p/let [photo (p/catch\n                    (.getPhoto Camera (clj->js\n                                       {:allowEditing (get-in\n                                                       (state/get-config)\n                                                       [:mobile/photo :allow-editing?])\n                                        :saveToGallery true\n                                        :resultType (.-Base64 CameraResultType)}))\n                    (fn [error]\n                      (log/error :photo/get-failed {:error error})))\n          filename (str (date/get-date-time-string-2) \".jpeg\")\n          path (editor-handler/get-asset-path filename)\n          _file (p/catch\n                    (.writeFile Filesystem (clj->js {:data (.-base64String photo)\n                                                     :path path\n                                                     :recursive true}))\n                    (fn [error]\n                      (log/error :file/write-failed {:path path\n                                                     :error error})))]\n    (p/resolved filename)))\n\n(defn embed-photo [id]\n  (let [block (state/get-edit-block)\n        input (state/get-input)\n        content (gobj/get input \"value\")\n        pos (cursor/pos input)\n        left-padding (cond\n                       (cursor/beginning-of-line? input)\n                       nil\n\n                       (= (and (not (zero? pos))\n                               (subs content (dec pos))) \" \")\n                       nil\n\n                       :else \" \")\n        format (:block/format block)]\n    (p/let [filename (save-photo)\n            url (util/format \"../assets/%s\" filename)]\n      (commands/simple-insert!\n       id\n       (str left-padding\n            (editor-handler/get-asset-file-link format url filename true)\n        \" \")\n       {}))))\n"]}