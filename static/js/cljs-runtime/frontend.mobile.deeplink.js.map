{"version":3,"sources":["frontend/mobile/deeplink.cljs"],"mappings":";AAaA,AAAKA,uDAAuB,6CAAA,7CAACC;AAE7B,oCAAA,pCAAMC,gFAAUC;AAAhB,AACE,IAAME,aAAW,KAAAC,IAASH;IACpBI,WAAS,AAAYF;IACrBG,WAAS,AAAYH;IACrBI,gBAAc,AAAgBJ;IAC9BK,mBAAiB,AAACC;wBAJxB,WAAAP,/BAKMQ;AALN,AAKyB,iCAAA,kEAAI,kDAAAR,lDAACS,nDACD,uHAAA,vHAACC,fACDC,1BACAC;;IACvBC,qBAAmB,AAACL,kBAAkBF;IACtCQ,sGACW,+CAAA,WAAAE,1DAACC,9FACD,4CAAA,5CAACG;AADD,AAAS,OAACF,6CAAE,AAAA,gFAAAF,kBAASG;GADrB,mBAAA,mFAAA,iDAAA,vJAACJ;IAGZM,aAAW,4CAAA,WAAAC,vDAACF;AAAD,AAAM,yBAAAE,lBAACd;GAAqBM;AAb7C,AAcE,GACE,sDAAA,tDAACI,6CAAEf;AACH,IAAAoB,qBAAgB,kBAAA,lBAAMlB;AAAtB,AAAA,oBAAAkB;AAAA,AAAA,WAAAA,PAAWC;AAAX,AACE,OAACC,qCAA4BD;;AAD/B;;;AAFF,GAKE,sDAAA,tDAACN,6CAAEf;AACH,IAAMyB,aAAW,iBAAAC,WAAQzB;IAARyB,eAAA,EAAA,CAAAA,YAAA,OAAA,KACQ,uBAAAA,SAAA,IAAA,pCAACC;AADT,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,iCAAAA,1BAEQjB;;;IAFzBc,aAG6B,4CAAA,WAAAO,vDAACb;AAAD,AAAM,yBAAAa,lBAAM5B;GAAZ,mFAAA,OAAA;gBAH7B,AAAAsB,4CAAAD,WAAA,IAAA,vEAGOK;iBAHP,AAAAJ,4CAAAD,WAAA,IAAA,xEAGiBM;AAHjB,AAME,GAAU,AAACE,4BAAcN;AAAzB;;AAAA,AACE,GAAU,AAACV,6CAAEU,WAAWf;AAAxB;AAAA,AACE,IAAMsB,kBAAU,AAAUd,mBAAWO;IAC/BQ,kBAAU,yEAAA,mEAAA,1IAAM,gEAAA,hEAACC,gDAAKF,uBACV,AAACR,4CAAIb,MAAMqB;AAF7B,AAGE,oBAAIC;AACF,AAAI,+BAAA,mFAAA,lHAACE,mLAAgCF;;AACjC,2EAAA,3EAACG,sBAAO3C;;AACZ,6IAAA,uDAAA,pMAAC4C,uEAAmB,CAAA,wCAAA,XAAkCZ;;;;AAE5D,oBAAM,iBAAAa,mBAAI,AAACvB,6CAAEU,WAAWf;AAAlB,AAAA,GAAA4B;AAAAA;;AAAA,OAAAC,gBACK9C;;;AADX,AAEE,OAAC+C,WACA;AAAA,AACE,oBACEZ;AACA,IAAMa,qBAAa,AAACC,uEAAgCd;AAApD,AACE,AAACe,kGAAsDF;;AAH3D,oBAKEZ;AACA,oBAAI,AAACe,oCAA2Bf;AAC9B,AAACgB,4EAAgChB;;AACjC,yMAAA,uDAAA,hQAACQ,uEAAmB,CAAA,uFAAA,ZAAoCR;;;AAR5D,AAAA;;;;AAYA,kFAAA,3EAACO,sBAAO3C;GACV,kBAAA,AAAA8C,uEAAA,OAAA,9DAAK9C;;AAjBR;;;;AAtBN,GA2CE,sDAAA,tDAACsB,6CAAEf;AACH,IAAM8C,SAAO,6CAAA,7CAACC,gFAAQ,AAAC9B,4CAAI,WAAK+B;AAAL,AAAA,0FACG,AAACC,gDAAQD,KAAK,AAAM9C,kBAAc8C;GAD1C,mFAAA,QAAA,MAAA;AAAtB,AAGE,OAACE,qCAAqBJ;;AA/C1B,AAAA","names":["frontend.mobile.deeplink/*link-to-another-graph","cljs.core.atom","frontend.mobile.deeplink/deeplink","url","p1__51706#","parsed-url","js/URL","hostname","pathname","search-params","current-repo-url","frontend.state/get-current-repo","get-graph-name-fn","logseq.graph-parser.text/get-graph-name-from-path","clojure.string.split","cljs.core/last","clojure.string/lower-case","current-graph-name","repos","frontend.state/sub","p1__51707#","cljs.core.remove","cljs.core._EQ_","frontend.config/local-repo","cljs.core.map","repo-names","p1__51708#","temp__5720__auto__","code","frontend.handler.user/login-callback","vec__51723","cljs.core.nth","graph-name","G__51726","clojure.string/replace","page-name","block-uuid","p1__51709#","clojure.string/blank?","graph-idx","graph-url","cljs.core.not_EQ_","frontend.state/pub-event!","cljs.core/reset!","frontend.handler.notification.show_BANG_","or__5043__auto__","cljs.core/deref","js/setTimeout","db-page-name","frontend.db.model.get_redirect_page_name","frontend.handler.editor.insert_first_page_block_if_not_exists_BANG_","frontend.db.model/get-block-by-uuid","frontend.handler.route.redirect_to_page_BANG_","result","cljs.core.into","key","cljs.core.keyword","frontend.mobile.intent/handle-result"],"sourcesContent":["(ns frontend.mobile.deeplink \n  (:require\n   [clojure.string :as string]\n   [frontend.config :as config]\n   [frontend.db.model :as db-model]\n   [frontend.handler.editor :as editor-handler]\n   [frontend.handler.notification :as notification]\n   [frontend.handler.route :as route-handler]\n   [frontend.handler.user :as user-handler]\n   [frontend.mobile.intent :as intent]\n   [frontend.state :as state]\n   [logseq.graph-parser.text :as text]))\n\n(def *link-to-another-graph (atom false))\n\n(defn deeplink [url]\n  (let [parsed-url (js/URL. url)\n        hostname (.-hostname parsed-url)\n        pathname (.-pathname parsed-url)\n        search-params (.-searchParams parsed-url)\n        current-repo-url (state/get-current-repo)\n        get-graph-name-fn #(-> (text/get-graph-name-from-path %)\n                               (string/split \"/\")\n                               last\n                               string/lower-case)\n        current-graph-name (get-graph-name-fn current-repo-url)\n        repos (->> (state/sub [:me :repos])\n                   (remove #(= (:url %) config/local-repo))\n                   (map :url))\n        repo-names (map #(get-graph-name-fn %) repos)]\n    (cond\n      (= hostname \"auth-callback\")\n      (when-let [code (.get search-params  \"code\")]\n        (user-handler/login-callback code))\n\n      (= hostname \"graph\")\n      (let [graph-name (some-> pathname\n                               (string/replace \"/\" \"\")\n                               string/lower-case)\n            [page-name block-uuid] (map #(.get search-params %)\n                                        [\"page\" \"block-id\"])]\n\n        (when-not (string/blank? graph-name)\n          (when-not (= graph-name current-graph-name)\n            (let [graph-idx (.indexOf repo-names graph-name)\n                  graph-url (when (not= graph-idx -1)\n                              (nth repos graph-idx))]\n              (if graph-url\n                (do (state/pub-event! [:graph/switch graph-url])\n                    (reset! *link-to-another-graph true))\n                (notification/show! (str \"Open graph failed. Graph `\" graph-name \"` doesn't exist.\") :error false))))\n\n          (when (or (= graph-name current-graph-name)\n                    @*link-to-another-graph)\n            (js/setTimeout\n             (fn []\n               (cond\n                 page-name\n                 (let [db-page-name (db-model/get-redirect-page-name page-name)]\n                   (editor-handler/insert-first-page-block-if-not-exists! db-page-name))\n\n                 block-uuid\n                 (if (db-model/get-block-by-uuid block-uuid)\n                   (route-handler/redirect-to-page! block-uuid)\n                   (notification/show! (str \"Open link failed. Block-id `\" block-uuid \"` doesn't exist in the graph.\") :error false))\n\n                 :else\n                 nil)\n               (reset! *link-to-another-graph false))\n             (if @*link-to-another-graph\n               1000\n               0)))))\n\n      (= hostname \"shared\")\n      (let [result (into {} (map (fn [key]\n                                   [(keyword key) (.get search-params key)])\n                                 [\"title\" \"url\" \"type\"]))]\n        (intent/handle-result result))\n\n      :else\n      nil)))\n"]}