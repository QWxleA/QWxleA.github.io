{
"version":3,
"file":"module$node_modules$codemirror$mode$haskell_literate$haskell_literate.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qEAAA,CAA0F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAIjI,SAAS,CAACC,GAAD,CAAM,CACQ,QAAtB,EAAI,MAAOD,QAAX,EAAmD,QAAnD,EAAkC,MAAOD,OAAzC,CACEE,GAAA,CAAIH,OAAA,CAAQ,+CAAR,CAAJ,CAAqCA,OAAA,CAAQ,qDAAR,CAArC,CADF,CAE0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAOC,CAAAA,GAA1C,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAyB,oBAAzB,CAAP,CAAuDD,GAAvD,CADG,CAGHA,GAAA,CAAIG,UAAJ,CANY,CAAf,CAAD,CAOG,QAAS,CAACA,UAAD,CAAa,CAGvBA,UAAWC,CAAAA,UAAX,CAAsB,kBAAtB,CAA0C,QAAS,CAACC,MAAD;AAASC,YAAT,CAAuB,CACxE,IAAIC,SAAWJ,UAAWK,CAAAA,OAAX,CAAmBH,MAAnB,CAA4BC,YAA5B,EAA4CA,YAAaG,CAAAA,IAAzD,EAAkE,SAAlE,CAEf,OAAO,CACLC,WAAYA,QAAS,EAAG,CACtB,MAAO,CACLC,OAAQ,CAAA,CADH,CAELC,UAAWT,UAAWO,CAAAA,UAAX,CAAsBH,QAAtB,CAFN,CADe,CADnB,CAOLM,MAAOA,QAAS,CAACC,MAAD,CAASC,KAAT,CAAgB,CAC9B,GAAID,MAAOE,CAAAA,GAAP,EAAJ,GACMD,KAAMJ,CAAAA,MADZ,CACqBG,MAAOG,CAAAA,GAAP,CAAW,MAAX,CADrB,EAEI,MAAO,MAEX,IAAIF,KAAMJ,CAAAA,MAAV,CACE,MAAOJ,SAASM,CAAAA,KAAT,CAAeC,MAAf,CAAuBC,KAAMH,CAAAA,SAA7B,CAEPE,OAAOI,CAAAA,SAAP,EACA,OAAO,SATqB,CAP3B,CAmBLC,UAAWA,QAAS,CAACJ,KAAD,CAAQ,CAC1B,MAAOA,MAAMJ,CAAAA,MAAN,CAAe,CAACI,MAAOA,KAAMH,CAAAA,SAAd,CAAyBQ,KAAMb,QAA/B,CAAf,CAA0D,IADvC,CAnBvB,CAHiE,CAA1E,CA0BG,SA1BH,CA4BAJ,WAAWkB,CAAAA,UAAX,CAAsB,yBAAtB;AAAiD,kBAAjD,CA/BuB,CAPzB,CAJkI;",
"sources":["node_modules/codemirror/mode/haskell-literate/haskell-literate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$haskell_literate$haskell_literate\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../haskell/haskell\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../haskell/haskell\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function (CodeMirror) {\n  \"use strict\"\n\n  CodeMirror.defineMode(\"haskell-literate\", function (config, parserConfig) {\n    var baseMode = CodeMirror.getMode(config, (parserConfig && parserConfig.base) || \"haskell\")\n\n    return {\n      startState: function () {\n        return {\n          inCode: false,\n          baseState: CodeMirror.startState(baseMode)\n        }\n      },\n      token: function (stream, state) {\n        if (stream.sol()) {\n          if (state.inCode = stream.eat(\">\"))\n            return \"meta\"\n        }\n        if (state.inCode) {\n          return baseMode.token(stream, state.baseState)\n        } else {\n          stream.skipToEnd()\n          return \"comment\"\n        }\n      },\n      innerMode: function (state) {\n        return state.inCode ? {state: state.baseState, mode: baseMode} : null\n      }\n    }\n  }, \"haskell\")\n\n  CodeMirror.defineMIME(\"text/x-literate-haskell\", \"haskell-literate\")\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","defineMode","config","parserConfig","baseMode","getMode","base","startState","inCode","baseState","token","stream","state","sol","eat","skipToEnd","innerMode","mode","defineMIME"]
}
