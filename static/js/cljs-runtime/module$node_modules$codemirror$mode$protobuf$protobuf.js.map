{
"version":3,
"file":"module$node_modules$codemirror$mode$protobuf$protobuf.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAIjH,SAAQ,CAACC,GAAD,CAAM,CACS,QAAtB,EAAI,MAAOD,QAAX,EAAmD,QAAnD,EAAkC,MAAOD,OAAzC,CACEE,GAAA,CAAIH,OAAA,CAAQ,+CAAR,CAAJ,CADF,CAE0B,UAArB,EAAI,MAAOI,OAAX,EAAmCA,MAAOC,CAAAA,GAA1C,CACHD,MAAA,CAAO,CAAC,sBAAD,CAAP,CAAiCD,GAAjC,CADG,CAGHA,GAAA,CAAIG,UAAJ,CANW,CAAd,CAAD,CAOG,QAAQ,CAACA,UAAD,CAAa,CAoBtBC,QAASA,UAAS,CAACC,MAAD,CAAS,CAEzB,GAAIA,MAAOC,CAAAA,QAAP,EAAJ,CAAuB,MAAO,KAG9B,IAAID,MAAOE,CAAAA,KAAP,CAAa,IAAb,CAAJ,CAEE,MADAF,OAAOG,CAAAA,SAAP,EACO,CAAA,SAIT,IAAIH,MAAOE,CAAAA,KAAP,CAAa,YAAb,CAA2B,CAAA,CAA3B,CAAJ;CACMF,MAAOE,CAAAA,KAAP,CAAa,sBAAb,CADN,EAGMF,MAAOE,CAAAA,KAAP,CAAa,iCAAb,CAHN,EAKMF,MAAOE,CAAAA,KAAP,CAAa,4BAAb,CALN,EAMI,MAAO,QAKX,IADIF,MAAOE,CAAAA,KAAP,CAAa,iBAAb,CACJ,EAAIF,MAAOE,CAAAA,KAAP,CAAa,iBAAb,CAAJ,CAAuC,MAAO,QAG9C,IAAIF,MAAOE,CAAAA,KAAP,CAAaE,QAAb,CAAJ,CAA8B,MAAO,SACrC,IAAIJ,MAAOE,CAAAA,KAAP,CAAaG,WAAb,CAAJ,CAAiC,MAAO,UAGxCL,OAAOM,CAAAA,IAAP,EACA,OAAO,KA9BkB,CAb3B,IAAIC,aAAe,sOAAA,CAAA,KAAA,CAAA,GAAA,CAAnB;AAOIH,SAVK,IAAII,MAAJ,CAAW,KAAX,CAUiBD,YAVQE,CAAAA,IAAN,CAAW,KAAX,CAAnB,CAAuC,OAAvC,CAAgD,GAAhD,CAYTX,WAAWY,CAAAA,cAAX,CAA0B,WAA1B,CAAuC,UAAvC,CAAmDH,YAAnD,CAEA,KAAIF,YAAkBG,MAAJ,CAAW,+BAAX,CAmClBV,WAAWa,CAAAA,UAAX,CAAsB,UAAtB,CAAkC,QAAQ,EAAG,CAC3C,MAAO,CACLC,MAAOb,SADF,CAELc,KAAM,OAFD,CADoC,CAA7C,CAOAf,WAAWgB,CAAAA,UAAX,CAAsB,iBAAtB,CAAyC,UAAzC,CA5DsB,CAPxB,CAJkH;",
"sources":["node_modules/codemirror/mode/protobuf/protobuf.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$protobuf$protobuf\"] = function(global,require,module,exports) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n  };\n\n  var keywordArray = [\n    \"package\", \"message\", \"import\", \"syntax\",\n    \"required\", \"optional\", \"repeated\", \"reserved\", \"default\", \"extensions\", \"packed\",\n    \"bool\", \"bytes\", \"double\", \"enum\", \"float\", \"string\",\n    \"int32\", \"int64\", \"uint32\", \"uint64\", \"sint32\", \"sint64\", \"fixed32\", \"fixed64\", \"sfixed32\", \"sfixed64\",\n    \"option\", \"service\", \"rpc\", \"returns\"\n  ];\n  var keywords = wordRegexp(keywordArray);\n\n  CodeMirror.registerHelper(\"hintWords\", \"protobuf\", keywordArray);\n\n  var identifiers = new RegExp(\"^[_A-Za-z\\xa1-\\uffff][_A-Za-z0-9\\xa1-\\uffff]*\");\n\n  function tokenBase(stream) {\n    // whitespaces\n    if (stream.eatSpace()) return null;\n\n    // Handle one line Comments\n    if (stream.match(\"//\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.+-]/, false)) {\n      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d*\\.\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n      if (stream.match(/^[+-]?\\d+([EeDd][+-]?\\d+)?/))\n        return \"number\";\n    }\n\n    // Handle Strings\n    if (stream.match(/^\"([^\"]|(\"\"))*\"/)) { return \"string\"; }\n    if (stream.match(/^'([^']|(''))*'/)) { return \"string\"; }\n\n    // Handle words\n    if (stream.match(keywords)) { return \"keyword\"; }\n    if (stream.match(identifiers)) { return \"variable\"; } ;\n\n    // Handle non-detected items\n    stream.next();\n    return null;\n  };\n\n  CodeMirror.defineMode(\"protobuf\", function() {\n    return {\n      token: tokenBase,\n      fold: \"brace\"\n    };\n  });\n\n  CodeMirror.defineMIME(\"text/x-protobuf\", \"protobuf\");\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","mod","define","amd","CodeMirror","tokenBase","stream","eatSpace","match","skipToEnd","keywords","identifiers","next","keywordArray","RegExp","join","registerHelper","defineMode","token","fold","defineMIME"]
}
