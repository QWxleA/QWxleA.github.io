{"version":3,"sources":["frontend/handler/block.cljs"],"mappings":";AAaA,0CAAA,1CAAMA,4FACHC,KAAKC;AADR,AAEE,QAAI,CAACC,kEAAAA,gFAAAA,hBAAyBF,4DAAAA,vDAAKC,4DAAAA,aAASE;;AAE9C,sDAAA,tDAAMC,oHACHC;AADH,+NAGG,mBAAA,+DAAA,lFAACC,yJAESD,hUACV,sDAAA,tDAACE,xDACD,OAACC;;AAEJ,uCAAA,vCAAMC,sFACHT,KAAKU,WAAWC,QAAQC;AAD3B,AAEE,IAAMC,2YAGmB,AAACN,sDAAO,WAAKQ,tOACb,AAACC,+CAAO,wCAAA,wEAAA,9FAAMJ,sBAAe,AAACK,4CAAIC,gBAAMR,pMACxC,AAACF,jGACD,4CAAA,5CAACS,pEACD,AAACE,+CAAOC;AAJA,AAAQ,OAAChB,oDAA6BW;qDAH9C,kBAAIH,sBACF,AAACL,sDAAOO,iEAAKJ,iBACbA;IAMrBW,YAAU,iBAAAC,WAActB;IAAduB,WAAA,AAAA;IAAAC,WAAyCX;AAAzC,AAAA,kHAAAS,SAAAC,SAAAC,4CAAAF,SAAAC,SAAAC,1LAACC,sDAAAA,kFAAAA;;IACXJ,gBAAU,AAACK,iBAAO,4CAAA,5CAACT,0GAAgBI,WAAW,4CAAA,5CAACJ,iGAAWI;IAC1DM,gGAAiB,AAACV,4CAAI,WAAKW,3HACV,AAACT,+CAAOC,7DACR,AAACU;AAFI,AAAW,OAACD,4CAAIR,cAAUO;GAAO,oDAAA,pDAACC,4CAAIlB;IAG5DoB,gGAAiB,AAACd,4CAAI,WAAKW,3HACV,AAACT,+CAAOC,7DACR,AAACU;AAFI,AAAW,OAACD,4CAAIR,cAAUO;GAAO,oDAAA,pDAACC,4CAAIlB;AAblE,AAgBE,GAAI,AAACqB,uBAAOrB;AACVD;;AACA,IAAMuB,WAAS,WAAKvB;AAAL,AACE,IAAAwB,WAASxB;IAATwB,eAAA,EACE,AAACC,cAAIR,cACL,AAACR,+CAAO,WAAKd;AAAL,AACE,IAAM+B,MAAI,AAACN,cAAI,4MAAA,5MAACd,+CAAO,4CAAA,5CAACC,iGAAW,AAACb,oDAA6BC,2FACzC,AAAA,mFAAQ,AAAA,2FAAaA;AAD7C,AAEE,OAAC8B,cAAI,AAACE,uDAAiBV,YAAYS;aALjDF,VAEEA;AAFF,AAAA,GAOE,AAACC,cAAIJ;AACL,OAACZ,+CAAO,WAAKd;AAAL,AACE,IAAMiC,gBAAc,AAAA,mFAAQ,AAAA,2FAAajC;IACnC+B,MAAI,AAACN,cAAI,4CAAA,5CAACb,iGAAW,AAACb,oDAA6BC;AADzD,AAEE,GAAI,EAAK,AAACkC,0BAAUR,YAAYO,oBACvB,6CAAA,7CAACE,iDAAI,AAACC,gBAAMV;AACnB,OAACW,gDAAKJ,cAAc,AAACpB,gBAAMa;;AAC3B,OAACC,uBAAO,AAACK,uDAAiBN,YAAY,AAACD,cAAI,AAACa,6CAAKP,IAAIE;;GANnEJ;;AARFA;;;AADjB,AAgBE,oBAAItB;AAGG,sDAAA,WAAAoC,1DAAC7B;AAAD,AAAS,OAACa,uBAAO,iBAAAgB,jBAACC;GAFlB,AAAChC,4CAAI,WAAA2B;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;qBAAN,AAAAD,4CAAAD,WAAA,IAAA,5EAAQnC;AAAR,AAAA,0FACGqC,EAAE,AAACd,SAASvB;GAAcA;;2EAElC,AAACuB,SAASvB,pFACV,OAACS,+CAAOC;;;;AAGvB,oCAAA,pCAAO8B,gFACJ7C,MAAM8C,aAAOC;AADhB,AAEE,IAAME,SAAO,6CAAA,7CAACC;AAAd,AACE,AAACC,sBACA,WAAKC;AAAL,AACE,oBAAI,CAACN,6CAAAA,gDAAAA,LAAOM,4BAAAA;AACV,OAACC,sBAAOJ,OAAO,CAACF,0CAAAA,6CAAAA,LAAUK,yBAAAA;;AAC1BA;;GACJ,AAAA,4FAAapD;;AANhB,OAAAgD,gBAOGC;;AAEL,uCAAA,vCAAMK,sFACHtD,MAAMuD;AADT,AAEE,OAACV,kCAAW7C,MACA,WAAKoD;AAAL,AACE,SAAK,AAACK,iDAA0BL,QAC3B,AAACjB,6CAAEoB,IAAI,AAAC1C,gBAAM,AAAC+B,iBAAOQ;GAHzC,WAAAI;AAAA,AAIa,OAACZ,iBAAO,iBAAAY,jBAACZ;;;AAExB,2CAAA,3CAAMc,8FACH1D;AADH,AAEE,kDAAA,3CAACsD,qCAActD;;AAEjB,0CAAA,1CAAM2D,4FACH3D;AADH,AAEE,kDAAA,3CAACsD,qCAActD;;AAEjB,yCAAA,zCAAM4D,0FACHC,MAAMC;AADT,AAEE,IAAMnE,OAAK,AAACoE;IACNC,KAAG,CAACC,mDAAAA,yDAAAA,RAAUtE,qCAAAA;IACdK,QAAM,CAACkE,mDAAAA,+DAAAA,dAAUvE,2CAAAA,tCAAKkE,2CAAAA;IACtBM,eAAO,AAACC,cAAI,AAAA,4FAAapE;IACzBqE,IAAE,gBAAA,mHAAA,jIAAIF;cAJZ,VAOMG,6FAAS3E,KAAK0E,EAAER;IAChBU,SAAO,iBAAAC,WAAA,2CAAA,wDAAgBC;AAAhB,AAAA,GACEN;AACA,qDAAAK,SAAA,vDAACE,mIAAuBb;;AAF1BW;;;IAGPG,YACe,4CAAA,WAAAE,vDAACjE;AAAD,AAAM,IAAAkE,WAAS,AAAA,mFAAAD;AAAT,AAAA,wGAAAC,uCAAAA,vIAACC,iDAAAA,2DAAAA;GADP,AAACH,gDAAuCZ,GAAGF,SAASS;AAXzE,AAaE,OAACS,wCAAuBV,QACA,WAAKrB;AAAL,sFACO,AAACtC,+CAAOsC,OAAO0B,5IACf,iCAAA,1BAACM","names":["frontend.handler.block/long-page?","repo","page-id","frontend.db/get-page-blocks-count","frontend.db.model/initial-blocks-length","frontend.handler.block/get-block-refs-with-children","block","cljs.core/tree-seq","cljs.core.mapcat","cljs.core.distinct","frontend.handler.block/filter-blocks","ref-blocks","filters","group-by-page?","ref-pages-ids","cljs.core/last","b","cljs.core.concat","cljs.core.map","cljs.core/first","cljs.core.remove","cljs.core/nil?","ref-pages","G__49494","G__49495","G__49496","frontend.db/pull-many","cljs.core/zipmap","exclude-ids","page","cljs.core.get","cljs.core/set","include-ids","cljs.core/empty?","filter-f","G__49516","cljs.core/seq","ids","clojure.set.intersection","page-block-id","cljs.core/contains?","cljs.core._EQ_","cljs.core/count","cljs.core.not_EQ_","cljs.core.conj","p__49528","vec__49529","cljs.core.nth","p","p1__49440#","cljs.core/second","frontend.handler.block/walk-block","check?","transform","cljs.core/deref","result","cljs.core.atom","clojure.walk/postwalk","x","cljs.core/reset!","frontend.handler.block/get-timestamp","typ","p1__49542#","logseq.graph-parser.block/timestamp-block?","frontend.handler.block/get-scheduled-ast","frontend.handler.block/get-deadline-ast","frontend.handler.block/load-more!","db-id","start-id","frontend.state/get-current-repo","db","frontend.db/get-db","frontend.db/entity","block?","cljs.core/not","k","query-k","option","G__49554","frontend.db.model/step-loading-blocks","cljs.core.assoc","more-data","frontend.db.model/get-paginated-blocks-no-cache","p1__49550#","G__49556","frontend.db/pull","frontend.db.react/swap-new-result!","frontend.util/distinct-by"],"sourcesContent":["(ns frontend.handler.block\n  (:require [clojure.set :as set]\n            [clojure.walk :as walk]\n            [frontend.db :as db]\n            [frontend.db.model :as db-model]\n            [frontend.db.react :as react]\n            [frontend.state :as state]\n            [logseq.graph-parser.block :as gp-block]\n            [frontend.util :as util]))\n\n\n;;  Fns\n\n(defn long-page?\n  [repo page-id]\n  (>= (db/get-page-blocks-count repo page-id) db-model/initial-blocks-length))\n\n(defn get-block-refs-with-children\n  [block]\n  (->>\n   (tree-seq :block/refs\n             :block/children\n             block)\n   (mapcat :block/refs)\n   (distinct)))\n\n(defn filter-blocks\n  [repo ref-blocks filters group-by-page?]\n  (let [ref-pages-ids (->> (if group-by-page?\n                             (mapcat last ref-blocks)\n                             ref-blocks)\n                           (mapcat (fn [b] (get-block-refs-with-children b)))\n                           (concat (when group-by-page? (map first ref-blocks)))\n                           (distinct)\n                           (map :db/id)\n                           (remove nil?))\n        ref-pages (db/pull-many repo '[:db/id :block/name] ref-pages-ids)\n        ref-pages (zipmap (map :block/name ref-pages) (map :db/id ref-pages))\n        exclude-ids (->> (map (fn [page] (get ref-pages page)) (get filters false))\n                         (remove nil?)\n                         (set))\n        include-ids (->> (map (fn [page] (get ref-pages page)) (get filters true))\n                         (remove nil?)\n                         (set))]\n    (if (empty? filters)\n      ref-blocks\n      (let [filter-f (fn [ref-blocks]\n                       (cond->> ref-blocks\n                         (seq exclude-ids)\n                         (remove (fn [block]\n                                   (let [ids (set (concat (map :db/id (get-block-refs-with-children block))\n                                                          [(:db/id (:block/page block))]))]\n                                     (seq (set/intersection exclude-ids ids)))))\n\n                         (seq include-ids)\n                         (remove (fn [block]\n                                   (let [page-block-id (:db/id (:block/page block))\n                                         ids (set (map :db/id (get-block-refs-with-children block)))]\n                                     (if (and (contains? include-ids page-block-id)\n                                              (= 1 (count include-ids)))\n                                       (not= page-block-id (first include-ids))\n                                       (empty? (set/intersection include-ids (set (conj ids page-block-id))))))))))]\n        (if group-by-page?\n          (->> (map (fn [[p ref-blocks]]\n                      [p (filter-f ref-blocks)]) ref-blocks)\n               (remove #(empty? (second %))))\n          (->> (filter-f ref-blocks)\n               (remove nil?)))))))\n\n;; TODO: reduced version\n(defn- walk-block\n  [block check? transform]\n  (let [result (atom nil)]\n    (walk/postwalk\n     (fn [x]\n       (if (check? x)\n         (reset! result (transform x))\n         x))\n     (:block/body block))\n    @result))\n\n(defn get-timestamp\n  [block typ]\n  (walk-block block\n              (fn [x]\n                (and (gp-block/timestamp-block? x)\n                     (= typ (first (second x)))))\n              #(second (second %))))\n\n(defn get-scheduled-ast\n  [block]\n  (get-timestamp block \"Scheduled\"))\n\n(defn get-deadline-ast\n  [block]\n  (get-timestamp block \"Deadline\"))\n\n(defn load-more!\n  [db-id start-id]\n  (let [repo (state/get-current-repo)\n        db (db/get-db repo)\n        block (db/entity repo db-id)\n        block? (not (:block/name block))\n        k (if block?\n            :frontend.db.react/block-and-children\n            :frontend.db.react/page-blocks)\n        query-k [repo k db-id]\n        option (cond-> {:limit db-model/step-loading-blocks}\n                 block?\n                 (assoc :scoped-block-id db-id))\n        more-data (->> (db-model/get-paginated-blocks-no-cache db start-id option)\n                       (map #(db/pull (:db/id %))))]\n    (react/swap-new-result! query-k\n                            (fn [result]\n                              (->> (concat result more-data)\n                                   (util/distinct-by :db/id))))))\n"]}