{"version":3,"sources":["frontend/handler/block.cljs"],"mappings":"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","names":["frontend.handler.block/long-page?","repo","page-id","frontend.db/get-page-blocks-count","frontend.db.model/initial-blocks-length","frontend.handler.block/get-block-refs-with-children","block","cljs.core/tree-seq","cljs.core.mapcat","cljs.core.distinct","frontend.handler.block/filter-blocks","ref-blocks","filters","group-by-page?","ref-pages-ids","cljs.core/last","b","cljs.core.concat","cljs.core.map","cljs.core/first","cljs.core.remove","cljs.core/nil?","ref-pages","G__50430","G__50431","G__50432","frontend.db/pull-many","cljs.core/zipmap","exclude-ids","page","cljs.core.get","cljs.core/set","include-ids","cljs.core/empty?","filter-f","G__50433","cljs.core/seq","ids","clojure.set.intersection","page-block-id","cljs.core/contains?","cljs.core._EQ_","cljs.core/count","cljs.core.not_EQ_","cljs.core.conj","p__50439","vec__50440","cljs.core.nth","p","p1__50429#","cljs.core/second","frontend.handler.block/walk-block","check?","transform","cljs.core/deref","result","cljs.core.atom","clojure.walk/postwalk","x","cljs.core/reset!","frontend.handler.block/get-timestamp","typ","p1__50444#","logseq.graph-parser.block/timestamp-block?","frontend.handler.block/get-scheduled-ast","frontend.handler.block/get-deadline-ast","frontend.handler.block/load-more!","db-id","start-id","frontend.state/get-current-repo","db","frontend.db/get-db","frontend.db/entity","block?","cljs.core/not","k","query-k","option","G__50452","frontend.db.model/step-loading-blocks","cljs.core.assoc","more-data","frontend.db.model/get-paginated-blocks-no-cache","p1__50449#","G__50454","frontend.db/pull","frontend.db.react/swap-new-result!","frontend.util/distinct-by","p__50456","map__50457","cljs.core/--destructure-map","frontend.handler.block/indentable?","parent","parent-block","frontend.db.utils.pull","first-child","frontend.db.model/get-block-immediate-children","p__50460","map__50461","frontend.handler.block/outdentable?","level","_block","frontend.handler.block/indent-outdent-block!","direction","transact-data__49633__auto__","frontend.modules.outliner.core/*transaction-data*","opts__49634__auto__","*transaction-data*-orig-val__50466","*transaction-data*-temp-val__50468","cljs.core/transient","r__49635__auto__","cljs.core/persistent!","tx__49636__auto__","tx-meta__49637__auto__","all-tx__49638__auto__","opts#__49639__auto__","cljs.core.merge","cljs.core.dissoc","result__49640__auto__","frontend.modules.outliner.datascript/transact!","frontend.modules.outliner.core/indent-outdent-blocks!","frontend.handler.block/select-block!","block-uuid","blocks","js/document.getElementsByClassName","frontend.state.exit_editing_and_set_selected_blocks_BANG_","frontend.handler.block/*swipe","frontend.handler.block/on-touch-start","event","temp__5720__auto__","touches","touch","y","frontend.handler.block/on-touch-move","uuid","*show-left-menu?","*show-right-menu?","and__5041__auto__","map__50486","x0","xi","tx","ty","p1__50480#","cljs.core.swap_BANG_","p1__50482#","map__50488","y0","dx","dy","js/Math","left","goog.dom/getElement","right","x__5128__auto__","y__5129__auto__","indent","goog.dom/getFirstElementChild","outdent","more","goog.dom/getLastElementChild","frontend.handler.block/on-touch-end","_event","map__50490","left-menu","right-menu","e50491","frontend.mobile.haptics/with-haptics-impact","frontend.state/set-state!","js/Error","e","js/console.error","frontend.handler.block/on-touch-cancel"],"sourcesContent":["(ns frontend.handler.block\n  (:require\n   [clojure.set :as set]\n   [clojure.walk :as walk]\n   [frontend.db :as db]\n   [frontend.db.model :as db-model]\n   [frontend.db.react :as react]\n   [frontend.db.utils :as db-utils]\n   [frontend.mobile.haptics :as haptics]\n   [frontend.modules.outliner.core :as outliner-core]\n   [frontend.modules.outliner.transaction :as outliner-tx]\n   [frontend.state :as state]\n   [frontend.util :as util]\n   [goog.dom :as gdom]\n   [logseq.graph-parser.block :as gp-block]))\n\n;;  Fns\n\n(defn long-page?\n  [repo page-id]\n  (>= (db/get-page-blocks-count repo page-id) db-model/initial-blocks-length))\n\n(defn get-block-refs-with-children\n  [block]\n  (->>\n   (tree-seq :block/refs\n             :block/children\n             block)\n   (mapcat :block/refs)\n   (distinct)))\n\n(defn filter-blocks\n  [repo ref-blocks filters group-by-page?]\n  (let [ref-pages-ids (->> (if group-by-page?\n                             (mapcat last ref-blocks)\n                             ref-blocks)\n                           (mapcat (fn [b] (get-block-refs-with-children b)))\n                           (concat (when group-by-page? (map first ref-blocks)))\n                           (distinct)\n                           (map :db/id)\n                           (remove nil?))\n        ref-pages (db/pull-many repo '[:db/id :block/name] ref-pages-ids)\n        ref-pages (zipmap (map :block/name ref-pages) (map :db/id ref-pages))\n        exclude-ids (->> (map (fn [page] (get ref-pages page)) (get filters false))\n                         (remove nil?)\n                         (set))\n        include-ids (->> (map (fn [page] (get ref-pages page)) (get filters true))\n                         (remove nil?)\n                         (set))]\n    (if (empty? filters)\n      ref-blocks\n      (let [filter-f (fn [ref-blocks]\n                       (cond->> ref-blocks\n                         (seq exclude-ids)\n                         (remove (fn [block]\n                                   (let [ids (set (concat (map :db/id (get-block-refs-with-children block))\n                                                          [(:db/id (:block/page block))]))]\n                                     (seq (set/intersection exclude-ids ids)))))\n\n                         (seq include-ids)\n                         (remove (fn [block]\n                                   (let [page-block-id (:db/id (:block/page block))\n                                         ids (set (map :db/id (get-block-refs-with-children block)))]\n                                     (if (and (contains? include-ids page-block-id)\n                                              (= 1 (count include-ids)))\n                                       (not= page-block-id (first include-ids))\n                                       (empty? (set/intersection include-ids (set (conj ids page-block-id))))))))))]\n        (if group-by-page?\n          (->> (map (fn [[p ref-blocks]]\n                      [p (filter-f ref-blocks)]) ref-blocks)\n               (remove #(empty? (second %))))\n          (->> (filter-f ref-blocks)\n               (remove nil?)))))))\n\n;; TODO: reduced version\n(defn- walk-block\n  [block check? transform]\n  (let [result (atom nil)]\n    (walk/postwalk\n     (fn [x]\n       (if (check? x)\n         (reset! result (transform x))\n         x))\n     (:block/body block))\n    @result))\n\n(defn get-timestamp\n  [block typ]\n  (walk-block block\n              (fn [x]\n                (and (gp-block/timestamp-block? x)\n                     (= typ (first (second x)))))\n              #(second (second %))))\n\n(defn get-scheduled-ast\n  [block]\n  (get-timestamp block \"Scheduled\"))\n\n(defn get-deadline-ast\n  [block]\n  (get-timestamp block \"Deadline\"))\n\n(defn load-more!\n  [db-id start-id]\n  (let [repo (state/get-current-repo)\n        db (db/get-db repo)\n        block (db/entity repo db-id)\n        block? (not (:block/name block))\n        k (if block?\n            :frontend.db.react/block-and-children\n            :frontend.db.react/page-blocks)\n        query-k [repo k db-id]\n        option (cond-> {:limit db-model/step-loading-blocks}\n                 block?\n                 (assoc :scoped-block-id db-id))\n        more-data (->> (db-model/get-paginated-blocks-no-cache db start-id option)\n                       (map #(db/pull (:db/id %))))]\n    (react/swap-new-result! query-k\n                            (fn [result]\n                              (->> (concat result more-data)\n                                   (util/distinct-by :db/id))))))\n\n(defn indentable?\n  [{:block/keys [parent] :as block}]\n  (when parent\n    (let [parent-block (db-utils/pull (:db/id parent))\n          first-child (first\n                       (db-model/get-block-immediate-children\n                        (state/get-current-repo)\n                        (:block/uuid parent-block)))]\n      (not= (:db/id block) (:db/id first-child)))))\n\n(defn outdentable?\n  [{:block/keys [level] :as _block}]\n  (not= level 1))\n\n(defn indent-outdent-block!\n  [block direction]\n  (outliner-tx/transact!\n   {:outliner-op :move-blocks}\n   (outliner-core/indent-outdent-blocks! [block] (= direction :right))))\n\n(defn select-block!\n  [block-uuid]\n  (let [blocks (js/document.getElementsByClassName (str block-uuid))]\n    (when (seq blocks)\n      (state/exit-editing-and-set-selected-blocks! blocks))))\n\n(def *swipe (atom nil))\n\n(defn on-touch-start\n  [event]\n  (when-let [touches (.-targetTouches event)]\n    (when (= (.-length touches) 1)\n      (let [touch (aget touches 0)\n            x (.-clientX touch)\n            y (.-clientY touch)]\n        (reset! *swipe {:x0 x :y0 y :xi x :yi y :tx x :ty y :direction nil})))))\n\n(defn on-touch-move\n  [event block uuid *show-left-menu? *show-right-menu?]\n  (when-let [touches (.-targetTouches event)]\n    (when (and (= (.-length touches) 1) @*swipe)\n      (let [{:keys [x0 xi direction]} @*swipe\n            touch (aget touches 0)\n            tx (.-clientX touch)\n            ty (.-clientY touch)\n            direction (if (nil? direction)\n                        (if (> tx x0)\n                          :right\n                          :left)\n                        direction)]\n        (swap! *swipe #(-> %\n                           (assoc :tx tx)\n                           (assoc :ty ty)\n                           (assoc :xi tx)\n                           (assoc :yi ty)\n                           (assoc :direction direction)))\n        (when (< (* (- xi x0) (- tx xi)) 0)\n          (swap! *swipe #(-> %\n                             (assoc :x0 tx)\n                             (assoc :y0 ty))))\n        (let [{:keys [x0 y0]} @*swipe\n              dx (- tx x0)\n              dy (- ty y0)]\n          (when (and (< (. js/Math abs dy) 20)\n                     (> (. js/Math abs dx) 10))\n            (let [left (gdom/getElement (str \"block-left-menu-\" uuid))\n                  right (gdom/getElement (str \"block-right-menu-\" uuid))]\n\n              (cond\n                (= direction :right)\n                (do\n                  (reset! *show-left-menu? true)\n                  (when left\n                    (when (>= dx 0)\n                      (set! (.. left -style -width) (str dx \"px\")))\n                    (when (< dx 0)\n                      (set! (.. left -style -width) (str (max (+ 50 dx) 0) \"px\")))\n\n                    (let [indent (gdom/getFirstElementChild left)]\n                      (when (indentable? block)\n                        (if (>= (.-clientWidth left) 50)\n                          (set! (.. indent -style -opacity) \"100%\")\n                          (set! (.. indent -style -opacity) \"30%\"))))))\n\n                (= direction :left)\n                (do\n                  (reset! *show-right-menu? true)\n                  (when right\n                    (when (<= dx 0)\n                      (set! (.. right -style -width) (str (- dx) \"px\")))\n                    (when (> dx 0)\n                      (set! (.. right -style -width) (str (max (- 80 dx) 0) \"px\")))\n\n                    (let [outdent (gdom/getFirstElementChild right)\n                          more (gdom/getLastElementChild right)]\n                      (if (and (>= (.-clientWidth right) 40)\n                               (< (.-clientWidth right) 80))\n                        (set! (.. outdent -style -opacity) \"100%\")\n                        (set! (.. outdent -style -opacity) \"30%\"))\n\n                      (when (outdentable? block)\n                        (if (>= (.-clientWidth right) 80)\n                          (set! (.. more -style -opacity) \"100%\")\n                          (set! (.. more -style -opacity) \"30%\") \n                        ;; (set! (.. outdent -style -opacity) \"100%\")\n                          ;; (set! (.. outdent -style -opacity) \"30%\")\n                        )))))\n                :else\n                nil))))))))\n\n(defn on-touch-end\n  [_event block uuid *show-left-menu? *show-right-menu?]\n  (when @*swipe\n    (let [left-menu (gdom/getElement (str \"block-left-menu-\" uuid))\n          right-menu (gdom/getElement (str \"block-right-menu-\" uuid))\n          {:keys [x0 tx]} @*swipe\n          dx (- tx x0)]\n      (try\n        (when (> (. js/Math abs dx) 10)\n          (cond\n            (and left-menu (>= (.-clientWidth left-menu) 50))\n            (when (indentable? block)\n              (haptics/with-haptics-impact\n                (indent-outdent-block! block :right)\n                :light))\n\n            (and right-menu (< 40 (.-clientWidth right-menu) 80))\n            (haptics/with-haptics-impact\n              (do (state/set-state! :mobile/show-action-bar? true)\n                  (state/set-state! :mobile/actioned-block block)\n                  (select-block! uuid))\n              :light)\n\n            (and right-menu (>= (.-clientWidth right-menu) 80))\n            (when (outdentable? block)\n              (haptics/with-haptics-impact\n                (indent-outdent-block! block :left)\n                :light))\n\n            :else\n            nil))\n        (catch js/Error e\n          (js/console.error e))\n        (finally\n          (reset! *show-left-menu? false)\n          (reset! *show-right-menu? false)\n          (reset! *swipe nil))))))\n\n(defn on-touch-cancel\n  [_event *show-left-menu? *show-right-menu?]\n  (reset! *show-left-menu? false)\n  (reset! *show-right-menu? false)\n  (reset! *swipe nil))\n\n\n"]}