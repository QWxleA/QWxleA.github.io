{"version":3,"sources":["frontend/handler/graph.cljs"],"mappings":"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","names":["frontend.handler.graph/build-links","links","cljs.core.map","p__60226","vec__60227","cljs.core.nth","from","to","frontend.handler.graph/build-nodes","dark?","current-page","page-links","tags","nodes","namespaces","parents","cljs.core/set","cljs.core/last","or__5043__auto__","pages","cljs.core/flatten","cljs.core.remove","cljs.core/nil?","cljs.core.mapv","p","current-page?","cljs.core._EQ_","color","G__60238","js/Error","cljs.core/contains?","n","cljs.core.get","size","x__5128__auto__","y__5129__auto__","js/Math.cbrt","G__60245","cljs.core.assoc","frontend.handler.graph/uuid-or-asset?","id","frontend.util/uuid-string?","clojure.string/starts-with?","clojure.string/ends-with?","frontend.handler.graph/remove-uuids-and-files!","node","p__60250","map__60251","cljs.core/--destructure-map","frontend.handler.graph/normalize-page-name","page-name->original-name","p__60252","map__60253","source","target","and__5041__auto__","frontend.util/distinct-by","temp__5718__auto__","original-name","p__60260","map__60261","frontend.handler.graph/build-global-graph","theme","journal?","orphan-pages?","builtin-pages?","frontend.db/get-current-page","temp__5720__auto__","repo","frontend.state/get-current-repo","relation","frontend.db/get-pages-relation","tagged-pages","frontend.db/get-all-tagged-pages","frontend.db/get-all-namespace-relation","cljs.core/second","full-pages","frontend.db/get-all-pages","get-original-name","all-pages","cljs.core/zipmap","pages-after-journal-filter","cljs.core/not","cljs.core.concat","cljs.core/seq","linked","build-in-pages","clojure.string/lower-case","frontend.db.default/built-in-pages-names","G__60272","p1__60259#","cljs.core.filter","cljs.core.reduce","p__60273","vec__60274","m","k","v","cljs.core.update","cljs.core/inc","p__60282","vec__60283","_","frontend.handler.graph/build-page-graph","page","frontend.util/page-name-sanity-lc","page-entity","G__60295","frontend.db/entity","p1__60286#","ref-pages","frontend.db/get-page-referenced-pages","mentioned-pages","frontend.db/get-pages-that-mentioned-page","p__60299","vec__60300","_aliases","p__60304","vec__60305","tag","other-pages","cljs.core/first","other-pages-links","cljs.core.mapcat","clojure.set.intersection","cljs.core.distinct","frontend.handler.graph/build-block-graph","block","ref-blocks","frontend.db/get-block-referenced-blocks","p__60325","vec__60326","other-blocks","other-blocks-links","p__60340","map__60341","frontend.handler.graph/n-hops","graph","level","search-nodes","forward?","cljs.core/group-by","cljs.core.apply","cljs.core/concat","full-nodes"],"sourcesContent":["(ns frontend.handler.graph\n  (:require [clojure.set :as set]\n            [clojure.string :as string]\n            [frontend.db :as db]\n            [frontend.db.default :as default-db]\n            [frontend.state :as state]\n            [frontend.util :as util]))\n\n(defn- build-links\n  [links]\n  (map (fn [[from to]]\n         {:source from\n          :target to})\n       links))\n\n(defn- build-nodes\n  [dark? current-page page-links tags nodes namespaces]\n  (let [parents (set (map last namespaces))\n        current-page (or current-page \"\")\n        pages (set (flatten nodes))]\n    (->>\n     pages\n     (remove nil?)\n     (mapv (fn [p]\n             (let [p (str p)\n                   current-page? (= p current-page)\n                   color (case [dark? current-page?] ; FIXME: Put it into CSS\n                           [false false] \"#999\"\n                           [false true]  \"#045591\"\n                           [true false]  \"#93a1a1\"\n                           [true true]   \"#ffffff\")\n                   color (if (contains? tags p)\n                           (if dark? \"orange\" \"green\")\n                           color)\n                   n (get page-links p 1)\n                   size (int (* 8 (max 1.0 (js/Math.cbrt n))))]\n                (cond->\n                  {:id p\n                   :label p\n                   :size size\n                   :color color}\n                  (contains? parents p)\n                  (assoc :parent true))))))))\n\n                  ;; slow\n(defn- uuid-or-asset?\n  [id]\n  (or (util/uuid-string? id)\n      (string/starts-with? id \"../assets/\")\n      (= id \"..\")\n      (string/starts-with? id \"assets/\")\n      (string/ends-with? id \".gif\")\n      (string/ends-with? id \".jpg\")\n      (string/ends-with? id \".png\")))\n\n(defn- remove-uuids-and-files!\n  [nodes]\n  (remove\n   (fn [node] (uuid-or-asset? (:id node)))\n   nodes))\n\n(defn- normalize-page-name\n  [{:keys [nodes links page-name->original-name]}]\n  (let [links (->>\n               (map\n                 (fn [{:keys [source target]}]\n                   (let [source (get page-name->original-name source)\n                         target (get page-name->original-name target)]\n                     (when (and source target)\n                       {:source source :target target})))\n                 links)\n               (remove nil?))\n        nodes (->> (remove-uuids-and-files! nodes)\n                   (util/distinct-by (fn [node] (:id node)))\n                   (map (fn [node]\n                          (if-let [original-name (get page-name->original-name (:id node))]\n                            (assoc node :id original-name :label original-name)\n                            nil)))\n                   (remove nil?))]\n    {:nodes nodes\n     :links links}))\n\n(defn build-global-graph\n  [theme {:keys [journal? orphan-pages? builtin-pages?]}]\n  (let [dark? (= \"dark\" theme)\n        current-page (or (:block/name (db/get-current-page)) \"\")]\n    (when-let [repo (state/get-current-repo)]\n      (let [relation (db/get-pages-relation repo journal?)\n            tagged-pages (db/get-all-tagged-pages repo)\n            namespaces (db/get-all-namespace-relation repo)\n            tags (set (map second tagged-pages))\n            full-pages (db/get-all-pages repo)\n            get-original-name (fn [p] (or (:block/original-name p) (:block/name p)))\n            all-pages (map get-original-name full-pages)\n            page-name->original-name (zipmap (map :block/name full-pages) all-pages)\n            pages-after-journal-filter (if-not journal?\n                                         (remove :block/journal? full-pages)\n                                         full-pages)\n            links (concat (seq relation)\n                          (seq tagged-pages)\n                          (seq namespaces))\n            linked (set (flatten links))\n            build-in-pages (set (map string/lower-case default-db/built-in-pages-names))\n            nodes (cond->> (map :block/name pages-after-journal-filter)\n                    (not builtin-pages?)\n                    (remove (fn [p] (contains? build-in-pages (string/lower-case p))))\n                    (not orphan-pages?)\n                    (filter #(contains? linked (string/lower-case %))))\n            page-links (reduce (fn [m [k v]] (-> (update m k inc)\n                                                 (update v inc))) {} links)\n            links (build-links (remove (fn [[_ to]] (nil? to)) links))\n            nodes (build-nodes dark? (string/lower-case current-page) page-links tags nodes namespaces)]\n        (normalize-page-name\n         {:nodes nodes\n          :links links\n          :page-name->original-name page-name->original-name})))))\n\n(defn build-page-graph\n  [page theme]\n  (let [dark? (= \"dark\" theme)]\n    (when-let [repo (state/get-current-repo)]\n      (let [page (util/page-name-sanity-lc page)\n            page-entity (db/entity [:block/name page])\n            tags (:tags (:block/properties page-entity))\n            tags (remove #(= page %) tags)\n            ref-pages (db/get-page-referenced-pages repo page)\n            mentioned-pages (db/get-pages-that-mentioned-page repo page)\n            namespaces (db/get-all-namespace-relation repo)\n            links (concat\n                   namespaces\n                   (map (fn [[p _aliases]]\n                          [page p]) ref-pages)\n                   (map (fn [[p _aliases]]\n                          [p page]) mentioned-pages)\n                   (map (fn [tag]\n                          [page tag])\n                        tags))\n            other-pages (->> (concat (map first ref-pages)\n                                     (map first mentioned-pages))\n                             (remove nil?)\n                             (set))\n            other-pages-links (mapcat\n                               (fn [page]\n                                 (let [ref-pages (-> (map first (db/get-page-referenced-pages repo page))\n                                                     (set)\n                                                     (set/intersection other-pages))\n                                       mentioned-pages (-> (map first (db/get-pages-that-mentioned-page repo page))\n                                                           (set)\n                                                           (set/intersection other-pages))]\n                                   (concat\n                                    (map (fn [p] [page p]) ref-pages)\n                                    (map (fn [p] [p page]) mentioned-pages))))\n                               other-pages)\n            links (->> (concat links other-pages-links)\n                       (remove nil?)\n                       (distinct)\n                       (build-links))\n            nodes (->> (concat\n                        [page]\n                        (map first ref-pages)\n                        (map first mentioned-pages)\n                        tags)\n                       (remove nil?)\n                       (distinct))\n            nodes (build-nodes dark? page links (set tags) nodes namespaces)\n            full-pages (db/get-all-pages repo)\n            get-original-name (fn [p] (or (:block/original-name p)\n                                         (:block/name p)))\n            all-pages (map get-original-name full-pages)\n            page-name->original-name (zipmap (map :block/name full-pages) all-pages)]\n        (normalize-page-name\n         {:nodes nodes\n          :links links\n          :page-name->original-name page-name->original-name})))))\n\n(defn build-block-graph\n  \"Builds a citation/reference graph for a given block uuid.\"\n  [block theme]\n  (let [dark? (= \"dark\" theme)]\n    (when-let [repo (state/get-current-repo)]\n      (let [ref-blocks (db/get-block-referenced-blocks block)\n            namespaces (db/get-all-namespace-relation repo)\n            links (concat\n                   (map (fn [[p _aliases]]\n                          [block p]) ref-blocks)\n                   namespaces)\n            other-blocks (->> (concat (map first ref-blocks))\n                              (remove nil?)\n                              (set))\n            other-blocks-links (mapcat\n                                (fn [block]\n                                  (let [ref-blocks (-> (map first (db/get-block-referenced-blocks block))\n                                                       (set)\n                                                       (set/intersection other-blocks))]\n                                    (concat\n                                     (map (fn [p] [block p]) ref-blocks))))\n                                other-blocks)\n            links (->> (concat links other-blocks-links)\n                       (remove nil?)\n                       (distinct)\n                       (build-links))\n            nodes (->> (concat\n                        [block]\n                        (map first ref-blocks))\n                       (remove nil?)\n                       (distinct)\n                       ;; FIXME: get block tags\n                       )\n            nodes (build-nodes dark? block links #{} nodes namespaces)]\n        (normalize-page-name\n         {:nodes nodes\n          :links links})))))\n\n(defn n-hops\n  \"Get all nodes that are n hops from nodes (a collection of node ids)\"\n  [{:keys [links] :as graph} nodes level]\n  (let [search-nodes (fn [forward?]\n                       (let [links (group-by (if forward? :source :target) links)]\n                         (loop [nodes nodes\n                               level level]\n                          (if (zero? level)\n                            nodes\n                            (recur (distinct (apply concat nodes\n                                               (map\n                                                 (fn [id]\n                                                   (->> (get links id) (map (if forward? :target :source))))\n                                                 nodes)))\n                                   (dec level))))))\n        nodes (concat (search-nodes true) (search-nodes false))\n        nodes (set nodes)]\n    (update graph :nodes\n            (fn [full-nodes]\n              (filter (fn [node] (contains? nodes (:id node)))\n                      full-nodes)))))\n"]}