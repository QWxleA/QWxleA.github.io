shadow$provide.module$node_modules$fs_extra$lib$mkdirs$make_dir=function(global,require,module,exports){var process=require("module$node_modules$process$browser");"use strict";const fs=require("module$node_modules$fs_extra$lib$fs$index"),path=require("module$node_modules$path_browserify$index"),useNativeRecursiveOption=require("module$node_modules$at_least_node$index")("10.12.0"),checkPath=pth=>{if("win32"===process.platform&&/[<>:"|?*]/.test(pth.replace(path.parse(pth).root,"")))throw pth=Error(`Path contains invalid characters: ${pth}`),
pth.code="EINVAL",pth;},processOptions=options=>{"number"===typeof options&&(options={mode:options});return{mode:511,...options}},permissionError=pth=>{const error=Error(`operation not permitted, mkdir '${pth}'`);error.code="EPERM";error.errno=-4048;error.path=pth;error.syscall="mkdir";return error};module.exports.makeDir=async(input,options)=>{checkPath(input);options=processOptions(options);if(useNativeRecursiveOption)return input=path.resolve(input),fs.mkdir(input,{mode:options.mode,recursive:!0});
const make=async pth=>{try{await fs.mkdir(pth,options.mode)}catch(error){if("EPERM"===error.code)throw error;if("ENOENT"===error.code){if(path.dirname(pth)===pth)throw permissionError(pth);if(error.message.includes("null bytes"))throw error;await make(path.dirname(pth));return make(pth)}try{if(!(await fs.stat(pth)).isDirectory())throw Error("The path is not a directory");}catch{throw error;}}};return make(path.resolve(input))};module.exports.makeDirSync=(input,options)=>{checkPath(input);options=
processOptions(options);if(useNativeRecursiveOption)return input=path.resolve(input),fs.mkdirSync(input,{mode:options.mode,recursive:!0});const make=pth=>{try{fs.mkdirSync(pth,options.mode)}catch(error){if("EPERM"===error.code)throw error;if("ENOENT"===error.code){if(path.dirname(pth)===pth)throw permissionError(pth);if(error.message.includes("null bytes"))throw error;make(path.dirname(pth));return make(pth)}try{if(!fs.statSync(pth).isDirectory())throw Error("The path is not a directory");}catch{throw error;
}}};return make(path.resolve(input))}}
//# sourceMappingURL=module$node_modules$fs_extra$lib$mkdirs$make_dir.js.map
