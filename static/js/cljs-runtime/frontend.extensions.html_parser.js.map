{"version":3,"sources":["frontend/extensions/html_parser.cljs"],"mappings":";AAQA,GAAA,QAAAA,qCAAAC,gDAAAC,4DAAAC;AAAA;AAAA,AAAA,AAASC,0DAAa,6CAAA,7CAACC;;AACvB,uDAAA,vDAAOC,sHACJC;AADH,AAEE,OAACC,sBAAc,WAAKC;AAAL,AACE,GAAI,AAACC,qBAAKD;AACR,wDAAA,jDAACE,+CAAOF;;AACRA;;GAAIF;;AAEzB,gDAAA,hDAAOK,wGACJL;AADH,AAEE,iEAAA,1DAACM,sJAEY,4CAAK,AAACP,qDAAqBC;;AAE1C,uDAAA,vDAAgCO,sHAC7BC,OAAOR;AADV,AAEE,IAAMS,eAAa,WAAKT;AAAL,AACE,QAACO,qFAAAA,wGAAAA,rBAAkBC,oFAAAA,7EAAOR,oFAAAA;;IACzCU,gBAAc,AAACC,kCAAyBH;IACxCI,WAAS,WAAKC;AAAL,AAAe,OAACC,8CAAMC,cAAI,AAACC,4CAAIP,aAAaI;;IACrDI,kBAAgB,WAAKC,MAAML;AAAX,AACE,sLAAA,8HAAA,hQAAK,AAACC,8CAAMC,cAAI,AAACI,+CAAOD,MAAMR,2EAEpB,AAACM,4CAAIP,aAAaI,/GAClB,kDAAA,lDAACO;;IAE7BC,qBAAmB,WAAKC,IAAIC,OAAOV;AAAhB,AACE,IAAMW,UAAQ,oRAAA,+QAAA,iOAAA,oOAAA,kOAAA,AAAA,xsCACE,0BAAA,iFAAA,6DAAA,xKAACC,2OAAwBH,MACzB,AAACI,yBAAgBlB,UACjB,0BAAA,iFAAA,qDAAA,hKAACiB,oOAAoBH,MACrB,AAACK,2BAAkBnB,UACnB,0BAAA,iFAAA,3GAACiB,mLAAkBH,MACnB,AAACM,8BAAqBpB,UACtB,0BAAA,iFAAA,3GAACiB,iLAAkBH,MACnB,AAACO,mCAA0BrB,UAC3B,0BAAA,iFAAA,3GAACiB,oLAAmBH,MACpB,AAACQ,8BAAqBtB;;AAVtC,AAaE,oDAAKgB,qDAAQ,AAACZ,SAASC,uDAAUW;;IACxDO,UAAQ,WAAKT,IAAIU;AAAT,AACE,GACE,0BAAA,kFAAA,mEAAA,8DAAA,4DAAA,uEAAA,sDAAA,4DAAA,uDAAA,wDAAA,8DAAA,6DAAA,+DAAA,8DAAA,wDAAA,qDAAA,mDAAA,qEAAA,9iCAACP,onCAEqBH;AACtB,QAAA,4DAAA,TAAYU;;AAJd,GAME,0BAAA,iFAAA,4DAAA,qDAAA,5NAACP,kSAA4BH;AAC7B,6DAAA,TAAKU;;AAPP,AAUEA;;;;;IACZC,0BACA,WAAKC;AAAL,AACE,GACE,AAACC,wBAAQD;AACT,IAAAE,aAA6BF;IAA7BG,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;UAAAE,NAAOjB;IAAPiB,mBAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;YAAAE,RAAWG;eAAXL,XAAmBxB;IACb8B,SAAO,iBAAA,AAAA,GAAA,AAAAC,uCAAA,JAAOtB;AAAP;;AAAA,AAAA,MAAAuB;;;gBAAA,GAAA,CAAAC,kBAAAC;AAAA,IAAAC,mBAAAF;AAAA,AAAA,GAAA,CAAAE,qBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAEI,uBAAA,hBAACL,oBAAkBJ;;AAF9B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAI,kBAAAF;AAAA,IAAAC,uBAAAC;AAAA,AAAA,GAAA,CAAAD,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAGI,uBAAA,hBAACL,oBAAkBJ;;AAH9B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAK,kBAAAH;AAAA,IAAAC,uBAAAE;AAAA,AAAA,GAAA,CAAAF,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAII,uBAAA,hBAACL,oBAAkBJ;;AAJ9B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAM,kBAAAJ;AAAA,IAAAC,uBAAAG;AAAA,AAAA,GAAA,CAAAH,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAKI,uBAAA,hBAACL,oBAAkBJ;;AAL9B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAO,kBAAAL;AAAA,IAAAC,uBAAAI;AAAA,AAAA,GAAA,CAAAJ,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAMI,uBAAA,hBAACL,oBAAkBJ;;AAN9B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAQ,kBAAAN;AAAA,IAAAC,uBAAAK;AAAA,AAAA,GAAA,CAAAL,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAOI,uBAAA,hBAACL,oBAAkBJ;;AAP9B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAS,kBAAAP;AAAA,IAAAC,uBAAAM;AAAA,AAAA,GAAA,CAAAN,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAQG,IAAMiD,OAAK,AAAA,mFAAO7B;IACZ8B,QAAM,AAAC5D,SAASC;IAChB4D,qBAAa,2BAAA,3BAACC,oCAA4B,4CAAKxC;AAFrD,AAGE,oBAAIuC;AACF,OAACpE,8CAAc6B;;AACf,IAAAyC,WAAMnE;IAANmE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,iEAAA,1DAACrE,uHAAuBkE,MAAMD;;;KAD1C;AAEO,iEAAA,1DAACjE,yHAAyBiE,KAAKC;;;;AAFtC;;;;;AAbd,AAAA,MAAA3B;;;gBAAA,GAAA,CAAAU,kBAAAR;AAAA,IAAAC,uBAAAO;AAAA,AAAA,GAAA,CAAAP,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAiBK,IAAMuD,MAAI,AAAA,kFAAMnC;IACVoC,MAAI,AAAA,+EAAMpC;AADhB,AAEE,IAAAqC,WAAMvE;IAANuE,eAAA,EAAA,CAAAA,oBAAAH,oBAAA,AAAAG,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,iEAAA,1DAACzE,wHAAwBwE,IAAID;;;KADzC;AAEO,iEAAA,1DAACvE,yHAAyBuE,IAAIC;;;;AAFrC;;;;AAnBd,AAAA,MAAAjC;;;gBAAA,GAAA,CAAAW,kBAAAT;AAAA,IAAAC,uBAAAQ;AAAA,AAAA,GAAA,CAAAR,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAuBG,iEAAA,1DAAChB,iHACY,AAACM,SAASC;;AAxBjC,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAY,kBAAAV;AAAA,IAAAC,uBAAAS;AAAA,AAAA,GAAA,CAAAT,yBAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AA0BI,OAAC0D,uBAAcxE;;AA1B1B,AAAA,MAAAqC;;;gBAAA,GAAA,CAAAa,kBAAAX;AAAA,IAAAC,wBAAAU;AAAA,AAAA,GAAA,CAAAV,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAA,WAAAc;AAAA,AA4BkB,iCAAA,iFAAA,uDAAA,0DAAA,6DAAA,qDAAA,yDAAA,oDAAA,oEAAAA,/fAAClC;GA5BZH;AAiCA,OAACD,mBAAmBC,IAAIoB,MAAM7B;;AAjCrC,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAe,kBAAAb;AAAA,IAAAC,wBAAAY;AAAA,AAAA,GAAA,CAAAZ,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAmCM,oBAAA,AAAA2D,gBAAKpF;AACH,OAACe,SAASC;;AACV,IAAMW,UAAQ,AAAC0D,yBAAgB1E;AAA/B,AACE,QAAA,gMAAA,5LACK,6CAAKgB,qDAAQ,AAACgB,gBAAM3B,uDAAUW;;;AAvCpD,AAAA,MAAAqB;;;gBAAA,GAAA,CAAAgB,kBAAAd;AAAA,IAAAC,wBAAAa;AAAA,AAAA,GAAA,CAAAb,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AA2CA,AACE,8EAAA,9EAAC6D,sBAAOtF;;AACR,IAAMmC,UAAQ,AAACoD,oBAAY,AAACC,8CAAM,AAACzE,SAASC;AAA5C,AACE,8EAAA,9EAACsE,sBAAOtF;;AACR,IAAAyF,WAAM9E;IAAN8E,eAAA,EAAA,CAAAA,oBAAAV,oBAAA,AAAAU,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,GAAI,yCAAA,zCAACC,iCAAkBvD;AACrBA;;AACA,QAAA,gBAAA,RAAaA;;;;KAH3B;AAIO,GAAI,yCAAA,zCAACuD,iCAAkBvD;AACrBA;;AACA,iEAAA,1DAAC1B,yIAAyC0B;;;;;AANnD;;;;AA/CX,AAAA,MAAAa;;;gBAAA,GAAA,CAAAiB,kBAAAf;AAAA,IAAAC,wBAAAc;AAAA,AAAA,GAAA,CAAAd,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAyDA,IAAAkE,WAAMhF;IAANgF,eAAA,EAAA,CAAAA,oBAAAZ,oBAAA,AAAAY,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,QAAA,iDAAU,AAAC5E,SAASC;;;KADhC;AAEO,iEAAA,1DAACP,6IAA6C,AAACM,SAASC;;;;AAF/D;;;;AAzDP,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAkB,kBAAAhB;AAAA,IAAAC,wBAAAe;AAAA,AAAA,GAAA,CAAAf,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AA+DA,QAAA,iDAAU,AAACV,SAASC;;AA/D3B,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAmB,kBAAAjB;AAAA,IAAAC,wBAAAgB;AAAA,AAAA,GAAA,CAAAhB,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAkEA,IAAAmE,WAAMjF;IAANiF,eAAA,EAAA,CAAAA,oBAAAb,oBAAA,AAAAa,aAAA;AAAA,AAAA,QAAAA;KAAA;AACO,QAAA,qEAAA,pBAAU,AAAC7E,SAASC;;;KAD3B;AAEY,wEAAA,pBAAK,AAACD,SAASC;;;;AAF3B;;;;AAlEP,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAoB,kBAAAlB;AAAA,IAAAC,wBAAAiB;AAAA,AAAA,GAAA,CAAAjB,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AAwEA,IAAAoE,WAAMlF;IAANkF,eAAA,EAAA,CAAAA,oBAAAd,oBAAA,AAAAc,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,QAAA,qEAAA,pBAAU,AAAC9E,SAASC;;;KADhC;AAEO,QAAA,sEAAA,pBAAW,AAACD,SAASC;;;;AAF5B;;;;AAxEP,AAAA,MAAAgC;;;gBAAA,GAAA,CAAAqB,kBAAAnB;AAAA,IAAAC,wBAAAkB;AAAA,AAAA,GAAA,CAAAlB,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AA8EA,IAAAqE,WAAMnF;IAANmF,eAAA,EAAA,CAAAA,oBAAAf,oBAAA,AAAAe,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,IAAMC,UAAQ,AAACC,gBAAM,AAACC,eAAK,AAACtD,gBAAM3B;AAAlC,AACE,oDACC,AAACD,SAASC,WACV,CAAA,6HAAA,xHAAU,kDAAA,lDAACO,wDACY,uDAAA,vDAACD,+CAAOyE;;;KAL9C;AAOO,IAAMA,UAAQ,AAACC,gBAAM,AAACC,eAAK,AAACtD,gBAAM3B;AAAlC,AACE,oDACC,AAACD,SAASC,WACV,CAAA,0HAAA,tHAAS,kDAAA,lDAACO,sDACY,uDAAA,vDAACD,+CAAOyE;;;;AAXxC;;;;AA9EP,AAAA,MAAA/C;;;gBAAA,GAAA,CAAAsB,kBAAApB;AAAA,IAAAC,wBAAAmB;AAAA,AAAA,GAAA,CAAAnB,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAAD,uCAAA,JAAOtB;AA6FA,QAAA,iIAAA,pEACU,AAACN,4CAAIP,aAAaI,jHAClB,kDAAA,lDAACO;;AA/FlB,AAAA,MAAAyB;;;gBAAA,GAAA,CAAAuB,kBAAArB;AAAA,IAAAC,wBAAAoB;AAAA,AAAA,GAAA,CAAApB,0BAAAH;AAAA,AAAA,IAAA,AAAA,GAAA,AAAA,WAAAwB;AAAA,AAkGkB,iCAAA,iFAAA,mEAAA,8DAAA,4DAAA,uEAAA,8DAAA,6DAAA,6EAAAA,vjBAAC5C;GAlGZH;AAmGA,OAACjB,8CAAc6B;;AAnGtB,AAAA,MAAAW;;;gBAAA,GAAA,CAAAyB,kBAAAvB;AAAA,IAAAC,wBAAAsB;AAAA,AAAA,GAAA,CAAAtB,0BAAAH;AAAA,AAqGa,OAACjC,SAASC;;AArGvB,MAAAmC;;;AAAA,AAAA,MAAAsB;;;;AAAA,MAAAtB;;;AAAA,AAAA,MAAAoB;;;;AAAA,MAAApB;;;AAAA,AAAA,MAAAmB;;;;AAAA,MAAAnB;;;AAAA,AAAA,MAAAkB;;;;AAAA,MAAAlB;;;AAAA,AAAA,MAAAiB;;;;AAAA,MAAAjB;;;AAAA,AAAA,MAAAgB;;;;AAAA,MAAAhB;;;AAAA,AAAA,MAAAe;;;;AAAA,MAAAf;;;AAAA,AAAA,MAAAc;;;;AAAA,MAAAd;;;AAAA,AAAA,MAAAa;;;;AAAA,MAAAb;;;AAAA,AAAA,MAAAY;;;;AAAA,MAAAZ;;;AAAA,AAAA,MAAAU;;;;AAAA,MAAAV;;;AAAA,AAAA,MAAAS;;;;AAAA,MAAAT;;;AAAA,AAAA,MAAAQ;;;;AAAA,MAAAR;;;AAAA,AAAA,MAAAO;;;;AAAA,MAAAP;;;AAAA,AAAA,MAAAM;;;;AAAA,MAAAN;;;AAAA,AAAA,MAAAK;;;;AAAA,MAAAL;;;AAAA,AAAA,MAAAI;;;;AAAA,MAAAJ;;;AAAA,AAAA,MAAAG;;;;AAAA,MAAAH;;;AAAA,AAAA,MAAAE;;;;AAAA,MAAAF;;;AAAA,AAAA,MAAAC;;;;AAAA,MAAAD;;;AAAA,AAAA,MAAAF;;;;AADb,AAuGE,OAACf,QAAQT,IAAIqB;;AAzGjB,GA2GE,OAAST;AACTA;;AA5GF,AA+GE,gHAAA,zGAAC6D,+HAA8B7D;;;;;IACnCS,SAAO,EAAI,AAACR,wBAAQ,AAACK,gBAAMxC,UAClB,iBAAAgG,qBAAA,6EAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAA7D,cAAA2D;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBA2xEkC,AAAAwB,sBAAA5B;IA3xElCK,qBAAA,AAAAT,gBAAAQ;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,QAAA,AAAAI,eAAAL,gBAAAI,nCAAMvE;AAAN,AAAA,AAAA,AAAAyE,uBAAAJ,SACE,AAACtE,wBAAwBC;;AAD3B,eAAA,CAAAuE,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mEAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAA/D,gBAAAyD,pBAAM/D;AAAN,AAAA,OAAA8E,0CAAA,AAAAF,mEAAA,AAAAG,eAAAhB,7GACE,AAAChE,wBAAwBC;;;AAD3B;;;;GAAA,KAAA;;AAAA,AAAA,OAAA8D,mBAAQhG;KAER,AAACiC,wBAAwBjC;AA1JxC,AA2JE,OAACc,8CAAMC,cAAI4B;;AAEf,iDAAA,jDAAMuE,0GACH1G,OAAOR;AADV,AAEE,IAAMmH,IAAE,AAAC5G,qDAAkBC,OAAOR;AAAlC,AACE,GAAI,AAACoH,4BAAcD;AAAnB;;yEAEMA,pBACA,AAAC/B,vBACD,8CAAA,WAAA,zDAACiC,9BACD,+FAAA,SAAA,jGAACA;;;AAEX,qDAAA,rDAAMC,kHACHtH;AADH,AAEE,OAACC,sBAAc,WAAKC;AAAL,AACE,GAAI,OAASA;AACX,OAACqH,6BAA6BrH;;AAC9BA;;GAAIF;;AAEzB,wCAAA,xCAAMwH,wFACHhH,OAAOiH;AADV,AAEE,GAAU,AAACL,4BAAcK;AAAzB;;AAAA,AACE,IAAMzH,SAAO,AAAC0H,uBAAkB,AAACC,mBAAcF;IACzCG,iBAAe,AAACN,mDAAmBtH;AADzC,AAEE,OAACkH,+CAAY1G,OAAOoH;;;AAE1B","names":["js/frontend","js/frontend.extensions","js/frontend.extensions.html-parser","js/frontend.extensions.html-parser.*inside-pre?","frontend.extensions.html-parser/*inside-pre?","cljs.core.atom","frontend.extensions.html-parser/hiccup-without-style","hiccup","clojure.walk/postwalk","f","cljs.core/map?","cljs.core.dissoc","frontend.extensions.html-parser/export-hiccup","frontend.util.format","frontend.extensions.html-parser/hiccup->doc-inner","format","transform-fn","block-pattern","frontend.config/get-block-pattern","map-join","children","cljs.core.apply","cljs.core/str","cljs.core.map","block-transform","level","cljs.core.repeat","clojure.string.join","emphasis-transform","tag","_attrs","pattern","cljs.core/contains?","frontend.config/get-bold","frontend.config/get-italic","frontend.config/get-underline","frontend.config/get-strike-through","frontend.config/get-highlight","wrapper","content","single-hiccup-transform","x","cljs.core/vector?","vec__57585","seq__57586","cljs.core/seq","first__57587","cljs.core/first","cljs.core/next","attrs","result","cljs.core/keyword-identical?","cljs.core.match/backtrack","e57591","js/Error","e__45417__auto__","e57592","e57593","e57594","e57595","e57596","e57597","e57598","e57599","e57600","e57601","p1__57552#","e57602","e57603","e57604","e57605","e57606","e57607","e57608","e57609","e57610","p1__57558#","e57611","href","label","has-img-tag?","frontend.util/safe-re-find","G__57618","cljs.core/Keyword","src","alt","G__57617","frontend.config/get-hr","cljs.core/deref","frontend.config/get-code","cljs.core/reset!","clojure.string/trim","cljs.core.doall","G__57616","frontend.util/starts-with?","G__57615","G__57614","G__57613","G__57612","columns","cljs.core/count","cljs.core/last","cljs.core.println","iter__5520__auto__","s__57620","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__57622","cljs.core/chunk-buffer","i__57621","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57619","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","frontend.extensions.html-parser/hiccup->doc","s","clojure.string/blank?","clojure.string/replace","frontend.extensions.html-parser/html-decode-hiccup","js/goog.string.unescapeEntities","frontend.extensions.html-parser/parse","html","hickory.core/as-hiccup","hickory.core/parse","decoded-hiccup","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.extensions.html-parser\n  (:require [cljs.core.match :refer [match]]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [frontend.config :as config]\n            [frontend.util :as util]\n            [hickory.core :as hickory]))\n\n(defonce *inside-pre? (atom false))\n(defn- hiccup-without-style\n  [hiccup]\n  (walk/postwalk (fn [f]\n                   (if (map? f)\n                     (dissoc f :style)\n                     f)) hiccup))\n\n(defn- export-hiccup\n  [hiccup]\n  (util/format \"#+BEGIN_EXPORT hiccup\\n%s\\n#+END_EXPORT\"\n\n               (str (hiccup-without-style hiccup))))\n\n(defn ^:large-vars/cleanup-todo hiccup->doc-inner\n  [format hiccup]\n  (let [transform-fn (fn [hiccup]\n                       (hiccup->doc-inner format hiccup))\n        block-pattern (config/get-block-pattern format)\n        map-join (fn [children] (apply str (map transform-fn children)))\n        block-transform (fn [level children]\n                          (str (apply str (repeat level block-pattern))\n                               \" \"\n                               (->> (map transform-fn children)\n                                    (string/join \" \"))\n                               \"\\n\"))\n        emphasis-transform (fn [tag _attrs children]\n                             (let [pattern (cond\n                                             (contains? #{:b :strong} tag)\n                                             (config/get-bold format)\n                                             (contains? #{:i :em} tag)\n                                             (config/get-italic format)\n                                             (contains? #{:ins} tag)\n                                             (config/get-underline format)\n                                             (contains? #{:del} tag)\n                                             (config/get-strike-through format)\n                                             (contains? #{:mark} tag)\n                                             (config/get-highlight format)\n                                             :else\n                                             nil)]\n                               (str pattern (map-join children) pattern)))\n        wrapper (fn [tag content]\n                  (cond\n                    (contains? #{:p :hr :ul :ol :dl :table :pre :blockquote :aside :canvas\n                                 :center :figure :figcaption :fieldset :div :footer\n                                 :header} tag)\n                    (str \"\\n\\n\" content \"\\n\\n\")\n\n                    (contains? #{:thead :tr :li} tag)\n                    (str content \"\\n\")\n\n                    :else\n                    content))\n        single-hiccup-transform\n        (fn [x]\n          (cond\n            (vector? x)\n            (let [[tag attrs & children] x\n                  result (match tag\n                                :head nil\n                                :h1 (block-transform 1 children)\n                                :h2 (block-transform 2 children)\n                                :h3 (block-transform 3 children)\n                                :h4 (block-transform 4 children)\n                                :h5 (block-transform 5 children)\n                                :h6 (block-transform 6 children)\n                                :a (let [href (:href attrs)\n                                         label (map-join children)\n                                         has-img-tag? (util/safe-re-find #\"\\[:img\" (str x))]\n                                     (if has-img-tag?\n                                       (export-hiccup x)\n                                       (case format\n                                         :markdown (util/format \"[%s](%s)\" label href)\n                                         :org (util/format \"[[%s][%s]]\" href label)\n                                         nil)))\n                                :img (let [src (:src attrs)\n                                           alt (:alt attrs)]\n                                       (case format\n                                         :markdown (util/format \"![%s](%s)\" alt src)\n                                         :org (util/format \"[[%s][%s]]\" src alt)\n                                         nil))\n                                :p (util/format \"%s\"\n                                                (map-join children))\n\n                                :hr (config/get-hr format)\n\n                                (_ :guard #(contains? #{:b :strong\n                                                        :i :em\n                                                        :ins\n                                                        :del\n                                                        :mark} %))\n                                (emphasis-transform tag attrs children)\n\n                                :code (if @*inside-pre?\n                                        (map-join children)\n                                        (let [pattern (config/get-code format)]\n                                          (str \" \"\n                                               (str pattern (first children) pattern)\n                                               \" \")))\n\n                                :pre\n                                (do\n                                  (reset! *inside-pre? true)\n                                  (let [content (string/trim (doall (map-join children)))]\n                                    (reset! *inside-pre? false)\n                                    (case format\n                                      :markdown (if (util/starts-with? content \"```\")\n                                                  content\n                                                  (str \"```\\n\" content \"\\n```\"))\n                                      :org (if (util/starts-with? content \"#+BEGIN_SRC\")\n                                             content\n                                             (util/format \"#+BEGIN_SRC\\n%s\\n#+END_SRC\" content))\n                                      nil)))\n\n                                :blockquote\n                                (case format\n                                  :markdown (str \"> \" (map-join children))\n                                  :org (util/format \"#+BEGIN_QUOTE\\n%s\\n#+END_QUOTE\" (map-join children))\n                                  nil)\n\n                                :li\n                                (str \"- \" (map-join children))\n\n                                :dt\n                                (case format\n                                  :org (str \"- \" (map-join children) \" \")\n                                  :markdown (str (map-join children) \"\\n\")\n                                  nil)\n\n                                :dd\n                                (case format\n                                  :markdown (str \": \" (map-join children) \"\\n\")\n                                  :org (str \":: \" (map-join children) \"\\n\")\n                                  nil)\n\n                                :thead\n                                (case format\n                                  :markdown (let [columns (count (last (first children)))]\n                                              (str\n                                               (map-join children)\n                                               (str \"| \" (string/join \" | \"\n                                                                      (repeat columns \"----\"))\n                                                    \" |\")))\n                                  :org (let [columns (count (last (first children)))]\n                                         (str\n                                          (map-join children)\n                                          (str \"|\" (string/join \"+\"\n                                                                (repeat columns \"----\"))\n                                               \"|\")))\n                                  nil)\n                                :tr\n                                (str \"| \"\n                                     (->> (map transform-fn children)\n                                          (string/join \" | \"))\n                                     \" |\")\n\n                                (_ :guard #(contains? #{:aside :center :figure :figcaption :fieldset :footer :header} %))\n                                (export-hiccup x)\n\n                                :else (map-join children))]\n              (wrapper tag result))\n\n            (string? x)\n            x\n\n            :else\n            (println \"hiccup->doc error: \" x)))\n        result (if (vector? (first hiccup))\n                 (for [x hiccup]\n                   (single-hiccup-transform x))\n                 (single-hiccup-transform hiccup))]\n    (apply str result)))\n\n(defn hiccup->doc\n  [format hiccup]\n  (let [s (hiccup->doc-inner format hiccup)]\n    (if (string/blank? s)\n      \"\"\n      (-> s\n          (string/trim)\n          (string/replace \"\\n\\n\\n\\n\" \"\\n\\n\")\n          (string/replace \"\\n\\n\\n\" \"\\n\\n\")))))\n\n(defn html-decode-hiccup\n  [hiccup]\n  (walk/postwalk (fn [f]\n                   (if (string? f)\n                     (goog.string.unescapeEntities f)\n                     f)) hiccup))\n\n(defn parse\n  [format html]\n  (when-not (string/blank? html)\n    (let [hiccup (hickory/as-hiccup (hickory/parse html))\n          decoded-hiccup (html-decode-hiccup hiccup)]\n      (hiccup->doc format decoded-hiccup))))\n\n(comment\n  ;; | Syntax      | Description | Test Text     |``\n  ;; | :---        |    :----:   |          ---: |\n  ;; | Header      | Title       | Here's this   |\n  ;; | Paragraph   | Text        | And more      |\n\n  (def img-link\n    [:a {:href \"https://www.markdownguide.org/book/\", :style \"box-sizing: border-box; color: rgb(0, 123, 255); text-decoration: none; background-color: transparent;\"} [:img {:src \"https://d33wubrfki0l68.cloudfront.net/cb41dd8e38b0543a305f9c56db89b46caa802263/25192/assets/images/book-cover.jpg\", :class \"card-img\", :alt \"Markdown Guide book cover\", :style \"box-sizing: border-box; vertical-align: middle; border-style: none; flex-shrink: 0; width: 205.75px; border-radius: calc(0.25rem - 1px);\"}]]))\n"]}