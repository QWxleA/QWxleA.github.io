{"version":3,"sources":["frontend/extensions/html_parser.cljs"],"mappings":"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","names":["js/frontend","js/frontend.extensions","js/frontend.extensions.html-parser","js/frontend.extensions.html-parser.*inside-pre?","frontend.extensions.html-parser/*inside-pre?","cljs.core.atom","frontend.extensions.html-parser/hiccup-without-style","hiccup","clojure.walk/postwalk","f","cljs.core/map?","cljs.core.dissoc","frontend.extensions.html-parser/export-hiccup","frontend.util.format","frontend.extensions.html-parser/allowed-tags","frontend.extensions.html-parser/hiccup->doc-inner","format","opts","transform-fn","block-pattern","cljs.core._EQ_","frontend.config/get-block-pattern","map-join","children","cljs.core.apply","cljs.core/str","p1__50709#","cljs.core.map","block-transform","level","cljs.core.repeat","p1__50710#","clojure.string.join","emphasis-transform","tag","attrs","vec__50735","cljs.core.nth","style","bold?","italic?","underline?","strike-through?","mark?","clojure.string/includes?","pattern","cljs.core/contains?","and__5041__auto__","frontend.config/get-bold","frontend.config/get-italic","frontend.config/get-underline","frontend.config/get-strike-through","frontend.config/get-highlight","cljs.core/every?","clojure.string/blank?","cljs.core.remove","cljs.core/nil?","children'","cljs.core/reverse","wrapper","content","G__50743","clojure.string/replace","single-hiccup-transform","x","cljs.core/vector?","vec__50747","seq__50748","cljs.core/seq","first__50749","cljs.core/first","cljs.core/next","result","cljs.core/keyword-identical?","cljs.core.match/backtrack","e50885","js/Error","e__45401__auto__","e50887","e50888","e50889","e50890","e50891","e50892","e50893","e50894","e50895","e50896","p1__50726#","e50900","e50901","e50902","e50905","e50907","e50912","e50915","e50927","e50929","p1__50728#","e50930","href","label","or__5043__auto__","has-img-tag?","frontend.util/safe-re-find","G__50983","cljs.core/Keyword","src","alt","G__50981","frontend.config/get-hr","cljs.core/deref","frontend.config/get-code","cljs.core/reset!","clojure.string/trim","cljs.core.doall","G__50969","frontend.util/starts-with?","G__50968","G__50963","G__50944","G__50931","columns","cljs.core/count","cljs.core/last","p1__50727#","cljs.core.assoc","cljs.core.println","iter__5520__auto__","s__50991","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","b__50993","cljs.core/chunk-buffer","i__50992","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50990","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","frontend.extensions.html-parser/hiccup->doc","s","frontend.extensions.html-parser/html-decode-hiccup","js/goog.string.unescapeEntities","frontend.extensions.html-parser/convert","html","hickory.core/as-hiccup","hickory.core/parse","decoded-hiccup","cljs.core/chunk-first"],"sourcesContent":["(ns frontend.extensions.html-parser\n  (:require [cljs.core.match :refer [match]]\n            [clojure.string :as string]\n            [clojure.walk :as walk]\n            [frontend.config :as config]\n            [frontend.util :as util]\n            [hickory.core :as hickory]))\n\n(defonce *inside-pre? (atom false))\n(defn- hiccup-without-style\n  [hiccup]\n  (walk/postwalk (fn [f]\n                   (if (map? f)\n                     (dissoc f :style)\n                     f)) hiccup))\n\n(defn- export-hiccup\n  [hiccup]\n  (util/format \"#+BEGIN_EXPORT hiccup\\n%s\\n#+END_EXPORT\"\n\n               (str (hiccup-without-style hiccup))))\n\n(def allowed-tags\n  #{:address, :article, :aside, :footer, :header,\n    :h1, :h2, :h3, :h4, :h5, :h6, :hgroup,\n    :main, :nav, :section,\n    :blockquote, :dd, :div, :dl, :dt, :figcaption, :figure,\n    :hr, :li, :ol, :p, :pre, :ul,\n    :a, :abbr, :b, :bdi, :bdo, :br, :cite, :code, :data, :dfn,\n    :em, :i, :kbd, :mark, :q,\n    :rb, :rp, :rt, :rtc, :ruby,\n    :s, :samp, :small, :span, :strong, :sub, :sup, :time, :u, :var, :wbr,\n    :caption, :col, :colgroup, :table, :tbody, :td, :tfoot, :th,\n    :thead, :tr\n    :body :html})\n\n(defn ^:large-vars/cleanup-todo hiccup->doc-inner\n  [format hiccup opts]\n  (let [transform-fn (fn [hiccup opts]\n                       (hiccup->doc-inner format hiccup opts))\n        block-pattern (if (= format :markdown)\n                        \"#\"\n                        (config/get-block-pattern format))\n        map-join (fn [children] (apply str (map #(transform-fn % opts) children)))\n        block-transform (fn [level children]\n                          (str (apply str (repeat level block-pattern))\n                               \" \"\n                               (->> (map #(transform-fn % opts) children)\n                                    (string/join \" \"))\n                               \"\\n\"))\n        emphasis-transform (fn [tag attrs children]\n                             (let [style (:style attrs)\n                                   [bold? italic? underline? strike-through? mark?]\n                                   (when style\n                                     [(or (string/includes? style \"font-weight:700\")\n                                          (string/includes? style \"font-weight:600\"))\n                                      (string/includes? style \"font-style:italic\")\n                                      (string/includes? style \"text-decoration:underline\")\n                                      (string/includes? style \"text-decoration:line-through\")\n                                      (string/includes? style \"background-color:#\")])\n                                   pattern (cond\n                                             (contains? #{:b :strong} tag)\n                                             (when-not (and style (string/includes? style \"font-weight:normal\"))\n                                               (config/get-bold format))\n                                             (contains? #{:i :em} tag)\n                                             (when-not (and style (string/includes? style \"font-style:normal\"))\n                                               (config/get-italic format))\n                                             (contains? #{:ins} tag)\n                                             (when-not (and style (string/includes? style \"text-decoration:normal\"))\n                                               (config/get-underline format))\n                                             (contains? #{:del} tag)\n                                             (when-not (and style (string/includes? style \"text-decoration:normal\"))\n                                               (config/get-strike-through format))\n                                             (contains? #{:mark} tag)\n                                             (when-not (and style (string/includes? style \"background-color:transparent\"))\n                                               (config/get-highlight format))\n                                             (and (contains? #{:span} tag)\n                                                  (not (every? string/blank? children)))\n                                             (remove nil?\n                                                     [(when bold? (config/get-bold format))\n                                                      (when italic? (config/get-italic format))\n                                                      (when underline? (config/get-underline format))\n                                                      (when strike-through? (config/get-strike-through format))\n                                                      (when mark? (config/get-highlight format))])\n                                             :else\n                                             nil)\n                                   children' (map-join children)]\n                               (when-not (string/blank? children')\n                                 (str (if (string? pattern) pattern (apply str pattern))\n                                      children'\n                                      (if (string? pattern) pattern (apply str (reverse pattern)))))))\n        wrapper (fn [tag content]\n                  (let [content (cond\n                                  (not (contains? allowed-tags tag))\n                                  nil\n\n                                  (contains? #{:comment :head :style :xml} tag)\n                                  nil\n\n                                  (and (= tag :p) (:in-table? opts))\n                                  content\n\n                                  (contains? #{:p :hr :ul :ol :dl :table :pre :blockquote :aside :canvas\n                                               :center :figure :figcaption :fieldset :div :footer\n                                               :header} tag)\n                                  (str \"\\n\\n\" content \"\\n\\n\")\n\n                                  (contains? #{:thead :tr :li} tag)\n                                  (str content \"\\n\")\n\n                                  :else\n                                  content)]\n                    (some-> content\n                            (string/replace \"<!--StartFragment-->\" \"\")\n                            (string/replace \"<!--EndFragment-->\" \"\"))))\n        single-hiccup-transform\n        (fn [x]\n          (cond\n            (vector? x)\n            (let [[tag attrs & children] x\n                  result (match tag\n                           :head nil\n                           :h1 (block-transform 1 children)\n                           :h2 (block-transform 2 children)\n                           :h3 (block-transform 3 children)\n                           :h4 (block-transform 4 children)\n                           :h5 (block-transform 5 children)\n                           :h6 (block-transform 6 children)\n                           :a (let [href (:href attrs)\n                                    label (or (map-join children) \"\")\n                                    has-img-tag? (util/safe-re-find #\"\\[:img\" (str x))]\n                                (if has-img-tag?\n                                  (export-hiccup x)\n                                  (case format\n                                    :markdown (util/format \"[%s](%s)\" label href)\n                                    :org (util/format \"[[%s][%s]]\" href label)\n                                    nil)))\n                           :img (let [src (:src attrs)\n                                      alt (or (:alt attrs) \"\")]\n                                  (case format\n                                    :markdown (util/format \"![%s](%s)\" alt src)\n                                    :org (util/format \"[[%s][%s]]\" src alt)\n                                    nil))\n                           :p (util/format \"%s\"\n                                           (map-join children))\n\n                           :hr (config/get-hr format)\n\n                           (_ :guard #(contains? #{:b :strong\n                                                   :i :em\n                                                   :ins\n                                                   :del\n                                                   :mark\n                                                   :span} %))\n                           (emphasis-transform tag attrs children)\n\n                           :code (if @*inside-pre?\n                                   (map-join children)\n                                   (let [pattern (config/get-code format)]\n                                     (str \" \"\n                                          (str pattern (first children) pattern)\n                                          \" \")))\n\n                           :pre\n                           (do\n                             (reset! *inside-pre? true)\n                             (let [content (string/trim (doall (map-join children)))]\n                               (reset! *inside-pre? false)\n                               (case format\n                                 :markdown (if (util/starts-with? content \"```\")\n                                             content\n                                             (str \"```\\n\" content \"\\n```\"))\n                                 :org (if (util/starts-with? content \"#+BEGIN_SRC\")\n                                        content\n                                        (util/format \"#+BEGIN_SRC\\n%s\\n#+END_SRC\" content))\n                                 nil)))\n\n                           :blockquote\n                           (case format\n                             :markdown (str \"> \" (map-join children))\n                             :org (util/format \"#+BEGIN_QUOTE\\n%s\\n#+END_QUOTE\" (map-join children))\n                             nil)\n\n                           :li\n                           (str \"- \" (map-join children))\n\n                           :dt\n                           (case format\n                             :org (str \"- \" (map-join children) \" \")\n                             :markdown (str (map-join children) \"\\n\")\n                             nil)\n\n                           :dd\n                           (case format\n                             :markdown (str \": \" (map-join children) \"\\n\")\n                             :org (str \":: \" (map-join children) \"\\n\")\n                             nil)\n\n                           :thead\n                           (case format\n                             :markdown (let [columns (count (last (first children)))]\n                                         (str\n                                          (map-join children)\n                                          (str \"| \" (string/join \" | \"\n                                                                 (repeat columns \"----\"))\n                                               \" |\")))\n                             :org (let [columns (count (last (first children)))]\n                                    (str\n                                     (map-join children)\n                                     (str \"|\" (string/join \"+\"\n                                                           (repeat columns \"----\"))\n                                          \"|\")))\n                             nil)\n                           :tr\n                           (str \"| \"\n                                (->> (map #(transform-fn % (assoc opts :in-table? true)) children)\n                                     (string/join \" | \"))\n                                \" |\")\n\n                           (_ :guard #(contains? #{:aside :center :figure :figcaption :fieldset :footer :header} %))\n                           (export-hiccup x)\n\n                           :else (map-join children))]\n              (wrapper tag result))\n\n            (string? x)\n            x\n\n            :else\n            (println \"hiccup->doc error: \" x)))\n        result (if (vector? (first hiccup))\n                 (for [x hiccup]\n                   (single-hiccup-transform x))\n                 (single-hiccup-transform hiccup))]\n    (apply str result)))\n\n(defn hiccup->doc\n  [format hiccup]\n  (let [s (hiccup->doc-inner format hiccup {})]\n    (if (string/blank? s)\n      \"\"\n      (-> s\n          (string/trim)\n          (string/replace \"\\n\\n\\n\\n\" \"\\n\\n\")\n          (string/replace \"\\n\\n\\n\" \"\\n\\n\")))))\n\n(defn html-decode-hiccup\n  [hiccup]\n  (walk/postwalk (fn [f]\n                   (if (string? f)\n                     (goog.string.unescapeEntities f)\n                     f)) hiccup))\n\n(defn convert\n  [format html]\n  (when-not (string/blank? html)\n    (let [hiccup (hickory/as-hiccup (hickory/parse html))\n          decoded-hiccup (html-decode-hiccup hiccup)]\n      (hiccup->doc format decoded-hiccup))))\n\n(comment\n  ;; | Syntax      | Description | Test Text     |``\n  ;; | :---        |    :----:   |          ---: |\n  ;; | Header      | Title       | Here's this   |\n  ;; | Paragraph   | Text        | And more      |\n\n  (def img-link\n    [:a {:href \"https://www.markdownguide.org/book/\", :style \"box-sizing: border-box; color: rgb(0, 123, 255); text-decoration: none; background-color: transparent;\"} [:img {:src \"https://d33wubrfki0l68.cloudfront.net/cb41dd8e38b0543a305f9c56db89b46caa802263/25192/assets/images/book-cover.jpg\", :class \"card-img\", :alt \"Markdown Guide book cover\", :style \"box-sizing: border-box; vertical-align: middle; border-style: none; flex-shrink: 0; width: 205.75px; border-radius: calc(0.25rem - 1px);\"}]]))\n"]}