{
  "/": {
    "title": "üè° Start here",
    "content": "**Welcome!** Have a üçµ or a üçπ, and find something to üì∞\n\nThis is my experiment with a [digital garden](/page/digital-garden) \"learning in public\".\n\nI keep my notes in a system gracefully called a [[pkm]], a \"Personal Knowledge Management\" system.\n\nThis [Hugo](/page/hugo) site is its frontend. The system is still bare, as I am figuring out how all these things work, and how to do this \"public\" thing.\n\nSome of the subjects I am interested in (at the moment): are [[logseq]], [javascript](/page/javascript) and [[pkm]].",
    "lastmodified": "2022-04-30T23:43:08.37219054+02:00",
    "tags": null
  },
  "/page/Streaming-to-a-chromecast": {
    "title": "Streaming to a chromecast",
    "content": "My mom complained about an English only TV series on Disney+. What's a helpful son to do?\n\nAs it happens, streaming to a Chromecast is not hard, but sending subtitles to it seems to be all but impossible. So, hardcoded subs it is (Just like the nineties, how retro!).\n\n## Step by step\n\n  + This was the easiest way to get some subtitled videos on TV:\n+ Take an English only video file, from _somewhere_ on the  internet (exercise left to the reader.)\n+ Find subtitles, cannot find anything in Dutch, find in English, easy to do.\n+ Translate with Google translate (surprisingly good, Ulysses this tv-series is not, but still, happily surprised).\n+ The timings are often wrong. [SubShifter - Online SRT Subtitle Resync Tool](https://subshifter.bitsnbites.eu/) is a good tool. I just use VLC to find when people start to talk and sync with this. The couple of times I've done this it was just to find a correct start.\n+ Next the key to the whole conundrum: [HandBrake](https://handbrake.fr/). This app has been around for years, but is still actively developed and relatively easy to use.\n+ A good alternative is [Subler](https://subler.org/), it is *way* faster, but cannot hardcode subs, so  for this Handbrake is the obvious choice.\n\n  + ### Handbrake\n\n    + To setup Handbrake for encoding on an M1, you need to use the correct settings (the app is universal):\nConfiguration: **Video** \u003e **H.265 (VideoToolbox)** \u0026 **Chromecast 1080p**\n\n![handbrake.png](/assets/handbrake_1649418443446_0.png)\n\n    + These settings cut the encoding time in half (still _not_ instantaneous). Next, add everything to the queue and get something to eat.\n\n### Playback ‚Äî attempt 1\n\n  + The easiest way to send a video file to a Chromecast is using the Chrome Browser:\n+ Serve files: `python3 -m http.server 8080`+\n+ Open in Google Chrome+\n+ `‚´∂` \u003e **Cast** \u003e **TV (Chromecast)**, done+\n\n  + Worked well, but no way I get my mom to run a local webserver.\n\n### Playback ‚Äî attempt 2\n\n  + VLC is a decent player, and it's _old_, so people are bound to have used it:\n+ Use VLC to stream, open file\n+ Then **Playback** \u003e **Renderer** \u003e **TV (Chromecast)**",
    "lastmodified": "2022-04-30T21:36:18+02:00",
    "tags": null
  },
  "/page/digital-garden": {
    "title": "digital garden",
    "content": "## References\n\n  + [Building a digital garden](https://tomcritchlow.com/2019/02/17/building-digital-garden/)\n\n  + [A Brief History \u0026 Ethos of the Digital Garden](https://maggieappleton.com/garden-history)\n\n  + Also: [MaggieAppleton/digital-gardeners: Resources, links, projects, and ideas for gardeners tending their digital notes on the public interweb[[keywords]](https://github.com/MaggieAppleton/digital-gardeners/)\n\n  + And: [(2) Maggie Appleton üß≠ on Twitter: \"Nerding hard on digital gardens, personal wikis, and experimental knowledge systems with @_jonesian today. We have an epic collection going, check these out... 1. @tomcritchlow's Wikifolders: https://t.co/QnXw0vzbMG https://t.co/9ri6g9hD93\" / Twitter](https://twitter.com/Mappletons/status/1250532315459194880)",
    "lastmodified": "2022-04-30T21:36:16+02:00",
    "tags": null
  },
  "/page/hugo": {
    "title": "hugo",
    "content": "The plan is to collect useful snippets and code-examples to help creating and maintaining a [[pkm]] in Hugo (and posibly [[Logseq]]).\n\n### Automating import\n\nTo import pages from [[logseq]]:\n\n\n```bash\n#!/usr/bin/env bash\n\nBLOG=$HOME/Documents/QWxleA.github.io\nNOTES=$BLOG/content/notes\nASSETS=\"$BLOG/content/notes/assets\"\nHUGOASSETS=$BLOG/static/assets\n\nSTARTPAGE=\"$NOTES/Start here.md\"\n\nZIP=$HOME/Downloads/publicExport.zip\n\nexplode() {\n    # rm $NOTES/*.md \n    unzip -o -d $NOTES $ZIP\n    if [ -d \"$ASSETS\"  ]; then\n        for a in $ASSETS/*; do \n            mv \"$a\" $HUGOASSETS\n        done\n        rmdir \"$ASSETS\"\n    fi\n    # FIXME\n    if [ -f \"$STARTPAGE\" ]; then\n        mv \"$STARTPAGE\" \"$BLOG/content/_index.md\"\n        #FIXME relative path?\n        gsed -i \"s@relref \\\"@relref \\\"\\/notes\\/@g\" \"$BLOG/content/_index.md\"\n    fi\n}\n\nusage() { echo \"Usage: $0 [-s \u003c45|90\u003e] [-p \u003cstring\u003e]\" 1\u003e\u00262; exit 1; }\n\nwhile getopts \"lx\" o; do\n    case \"${o}\" in\n        l)\n            unzip -v $ZIP\n            exit\n            ;;\n        x)\n            explode\n            exit\n            ;;\n        *)\n            usage\n            ;;\n    esac\ndone\nshift $((OPTIND-1))\n\nusage\n```\n\n### Makefile to simplify working with Hugo\n\nMakefiles are simple, just type `make`\n\n\n```makefile\nSHELL := /bin/bash\n.POSIX:\n.PHONY: push update watch\nall: help\n\nhelp: ## Show this help\n\t@egrep -h '\\s##\\s' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-20s\\033[0m %s\\n\", $$1, $$2}'\n\npush: ## Push pages to github / upstream\n\tgit push origin master\n\nupdate: ## Add new items / prepare to push upstream\n\thugo\n\tgit add .\n\nwatch: ## Run the local development server\n\thugo --buildDrafts --watch server --disableFastRender --ignoreCache\n\nimport: ## Import latest Logseq pages\n\t./scripts/export-blog -x\n```",
    "lastmodified": "2022-04-30T21:36:16+02:00",
    "tags": null
  },
  "/page/javascript": {
    "title": "javascript",
    "content": "[[Logseq]] plugins are developed in Javascript and that is the reason I have been reading more on how to use it well. Here you will find mostly notes related to plugin development.\n\nSee also [[typescript]]",
    "lastmodified": "2022-04-30T21:36:16+02:00",
    "tags": null
  },
  "/page/resonance-lists-howto": {
    "title": "resonance lists howto",
    "content": "From a question on the Logseq forum: [Creating a Resonance Calendar from querie](https://discuss.logseq.com/t/advanced-queries-creating-a-resonance-calendar-from-queries/2351)\n\nA resonance calendar is taken from a video created by Ali Abdaal [How I use Notion as a Resonance Calendar - YouTube](https://www.youtube.com/watch?v=lKYBB-Uw1IM). It's a list of interesting (resonating) resources, added to your notes. Resources can be one of:\n\n  + Movies\n\n  + Podcasts\n\n  + Articles\n\nHow to implement this in logseq?\n\n## Step 1 ‚Äî gather a list of items\n\n\n```clojure {linenos=table,hl_lines=[\"6-8\"],linenostart=1}\n#+BEGIN_QUERY\n{:title [:h2 \"Resonance list 1\"]\n:query [\n:find (pull ?page [*])\n:where\n[?page :page/properties ?prop]\n[(get ?props :type) ?typ]\n[(contains? #{\"movie\" \"article\" \"book\"} ?type)]\n]}\n#+END_QUERY\n```\n\n  + This is a fairly straight forward query:\n\n\n    + line **6**: take the page properties of `?page` (set in line **3**) and store them in `?props`\n\n    + line **7**: of all the different properties, take `:type` and store it in `?type`\n\n    + line **8**: check if `?type` is one of: movie, article or book\n\n    + Done!\n\n  + Important: book != `[[boo]]`. Don't use `[[boo]]` in type.\n\n## Step 2 ‚Äî remove some stuff we don\\'t want to see\n\n\n```clojure {linenos=table,hl_lines=[\"9-12\"],linenostart=1}\n#+BEGIN_QUERY\n{:title [:h2 \"Resonance list 2\"]\n:query [\n:find (pull ?page [*])\n:where\n[?page :page/properties ?prop]\n[(get ?props :type) ?typ]\n[(contains? #{\"movie\" \"article\" \"book\"} ?type)]\n(not\n[(get ?props :rating) ?rating]\n[(= \"[[1/10]]\" ?rating)]\n)\n]}\n#+END_QUERY\n```\n\n    + New are the line **9 to 12**\n\n    + line **9**: a **not** statement, everything that matches this query will be *excluded* from the result\n\n    + line **10**: again, a page property\n\n    + line **11**: but this time we search for `:rating` and we match it with `1/10`\n\n    + line **12**: close the `not` statement\n\n    + **Result:** same list, but without the ones rated `1/10`\n\n## Step 2b ‚Äî Only the bad stuff\n\n\n  + For fun you can invert the search, *only* show the ones rated `1/10`:\n\n```clojure  {linenos=table,hl_lines=[10],linenostart=1}\n#+BEGIN_QUERY\n{:title [:h2 \"Resonance list 2b ‚Äî all bad!\"]\n:query [\n:find (pull ?page [*])\n:where\n[?page :page/properties ?prop]\n[(get ?props :type) ?typ]\n[(contains? #{\"movie\" \"article\" \"book\"} ?type)]\n[(get ?props :rating) ?rating]\n[(= \"[[1/10]]\" ?rating)]\n]}\n#+END_QUERY\n```\n\n  + This query is simpler then the previous one, `and` is implied, by default all lines should be *true*. Logseq is a very positive program üòÑ.\n\n## Step 3 ‚Äî remove more bad ratings\n\n\n  + It's not just `1/10` that's bad, so is `2/10`, but adding that is not as simple as you would want:\n\n```clojure {linenos=table,hl_lines=[12],linenostart=1}\n#+BEGIN_QUERY\n{:title [:h2 \"Resonance list 3\"]\n:query [\n:find (pull ?page [*])\n:where\n[?page :page/properties ?prop]\n[(get ?props :type) ?typ]\n[(contains? #{\"movie\" \"article\" \"book\"} ?type)]\n(not\n[?page :page/properties ?prop]\n[(get ?props :rating) ?rating]\n[(contains? #{ #{\"1/10\"} #{\"2/10\"} } ?rating)]\n)\n]}\n#+END_QUERY\n```\n\n  + Notice line **12** the `contains?` statement is quite complicated. This is because `1/10` and `2/10` are really `[[1/10]] and `[[2/10]]. They're not just text, they are searchable items. This is different from `type` in *Resonance List 1*, line **8**.\n\n## Step 4 ‚Äî remove by tag\n\n\n  + But what if you would like to have a tag that shows how terrible the book or movie was?\n\n  + Simple, add `tags:: [[terrible]]` (or just `terrible`, if you never want to list them, just change it accordingly in the listing below)\n\n```clojure {linenos=table,hl_lines=[\"13-14\"],linenostart=1}\n#+BEGIN_QUERY\n{:title [:h2 \"Resonance list 4 - final version\"]\n:query [\n:find (pull ?page [*])\n:where\n[?page :page/properties ?prop]\n\n[(get ?props :type) ?typ]\n[(contains? #{\"movie\" \"article\" \"book\"} ?type)]\n\n[?page :page/name ?nam]\n\n(not [(missing? $ ?page :page/name)])\n(not [?page :block/tags [:block/name \"terrible\"]])\n\n(not\n[?page :page/properties ?prop]\n[(get ?props :rating) ?rating]\n[(contains? #{ #{\"1/10\"} #{\"2/10\"} } ?rating)]\n)\n]}\n#+END_QUERY\n```\n\n  + New are the lines **13** and **14**, we exclude `[[terrible]]` from our list.\n\n  + If you want to add more tags, then look at *Resonance List 3* how to do that.\n\n## Conclusion\n\n  + Logseq's search functionality is not as easy as one would wish for, but it is adequate, and can be made to search for the data you're interested in.",
    "lastmodified": "2022-04-30T21:36:18+02:00",
    "tags": null
  }
}