{
  "/": {
    "title": "üè° Start here",
    "content": "**Welcome!** Have a üçµ or a üçπ, and find something to üì∞\n\nThis is my experiment with a [digital garden](/page/digital garden) \"learning in public\".\n\nI keep my notes in a system gracefully called a [pkm](/page/pkm), a \"Personal Knowledge Management\" system.\n\nThis [Hugo](/page/Hugo) site is its frontend. The system is still bare, as I am figuring out how all these things work, and how to do this \"public\" thing.\n\nSome of the subjects I am interested in (at the moment): are [logseq](/page/logseq), [javascript](/page/javascript) and [pkm](/page/pkm).",
    "lastmodified": "2022-04-28T22:50:26.648336794+02:00",
    "tags": null
  },
  "/page/Advanced-Queries": {
    "title": "Advanced Queries",
    "content": "Placeholder for an Advanced queries tutorial",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/Hiccup": {
    "title": "Hiccup",
    "content": "Hiccup is a [[domain-specific languag[[keyword[[keywords]]]] for generating HTML, used mostly in Clojure community.\n\nFor every day use you need very little knowledge of Hiccup, and fortunately (most of it) is surprisingly simple.\n\n## Let's Hiccup\n\n  + The most obvious thing you can use Hiccup for is to style the titles of [[Advanced Querie[[keywords]]]:\n\n```clojure\n#+BEGIN_QUERY\n{:title [:h3 \"This is hiccup!\"]\n :query [:find (pull ?b [*])\n :where\n    [task ?b #{\"LATER\"}]\n ]\n}\n#+END_QUERY\n```\n\n    + Line 2 is written in Hiccup: `[:h3 \"This is hiccup!\"]`, this will be converted to: `\u003ch3\u003eThis is hiccup!\u003c/h3\u003e`\n\n  + `h3`, as used in Hiccup, is the same has an `H3` in HTML, and you can also use other HTML tags, for example: `\u003cp\u003e` or `\u003cb\u003e`, which in Hiccup would be: `[:p \"this is an HTML p tag\"]` or `[:b \"This is an HTML b (bold) tag\"]`.\n\n  + For simple titles, that's (almost) all you need. If you would like to add some css divs or classes to the mix, read on:\n\n## Basic Hiccup Syntax\n\n  + What is _actually_ happening when you write your title? Hiccup turns Clojure data structures like this:\n\n```clojure\n[:h3 \"This is hiccup!\"]\n```\n\n  + Into strings of HTML like this:\n\n```html\n\u003ch3\u003eThis is hiccup!\u003c/h3\u003e\n```\n\n  + Technically speaking, the Clojure data structure is a vector (`[ .... ]`, just like [[Advanced Querie[[keywords]]] uses for searches, that takes one of the following two forms:\n\n```clojure\n[tag \u0026 bod[[keyword[[keywords]]]\n[tag attributes \u0026 bod[[keyword[[keywords]]]\n```\n\n  + The first item in the vector is the tag name. It is mandatory, and should be a keyword (`:h3`), a string (`\"This is hiccup!\"`) or a symbol (`?b` from queries).\n\n  + The second item may optionally be a map of attributes.\n\n  + All subsequent items in the vector are treated as the element body. This can include strings or nested tag vectors, for example:\n\n```clojure\n[:p \"Hello \" [:em \"World!\"]]\n```\n\n  + This definition might sound a bit obvious, or unimportant, but later you'll see how you can use the same syntax to create more complicated HTML structures, like lists (`\u003cul\u003e\u003cli\u003e...`) or tables (`\u003ctr\u003e\u003cth\u003e...`).\n\n## Making it look nice with CSS\n\n  + There are two ways to add **ids** and **classes** to your html elements. The first is the most straight forward, and easy to read, but a bit long:\n\n```clojure\n[:h3 {:id \"mysearch\" :class \"underlined superpink\"} \"This is better looking Hiccup!\"]\n```\n\n  + Hiccup also provides a convenient shorter way of writing:\n\n```clojure\n[:h3#mysearch.underlined.superpink \"This is better looking Hiccup!\"]\n```\n\n  + As in CSS, the word after the \"#\" denotes the element's ID, and the word after each \".\" denotes the element's classes.\n\n  + There may be multiple classes, but there can only be one ID. Additionally, the ID must always come first, so `div#foo.bar` would work, but `div.foo#bar` would not.\n\n  + You can add an ID on its own, or a class on its own:\n\n```clojure\n[:div#post \"...\"]\n[:div.comment \"...\"]\n```\n\n  + The most amazing thing is, you can actually do this _straight inside Logseq_:\n\n```clojure\n[:h2 {:style {:color \"red\"}} \"h2 title\"]\n[:p \"Hello \" [:em \"World!\"]]\n```\n\n    + [:h2 {:style {:color \"red\"}} \"h2 title\"]\n[:p \"Hello \" [:em \"World!\"]]\n\n## Using Hiccup for :views\n\n  + [[Advanced Querie[[keywords]]] support custom-build views for search results. These views are a combination of (a small sub-set of) Clojure and Hiccup. It's not the easiest combination, but without a doubt you can build amazing things with it.\n\n``` clojure\n#+BEGIN_QUERY\n{:title [:b \"All pages with a \" [:em \"programming\"] \" tag\"]\n :query [:find ?name\n :in $ ?tag\n :where\n  [?t :block/name ?tag]\n  [?p :block/tags ?t]\n  [?p :block/name ?nam[[keyword[[keywords]]]]\n :inputs [\"programming\"]\n :view (fn [result]\n\t         [:div.flex.flex-col\n\t          (for [page result]\n\t            [:a {:href (str \"#/page/\" page)} (clojure.string/capitalize page)]\n                )\n              ]\n         )}\n#+END_QUERY\n```\n\n  + Let's examine one of the [[Advanced Querie[[keywords]]], we are only interested in lines **11** to **15**. It is an excellent example how search results, clojure and hiccup can represent search results:\n\n  + These lines will create the following:\n\n```html\n\u003cdiv class=\"flex flex-col\"\u003e\n\u003ca href=\"#/page/advanced queries\"\u003eAdvanced queries\u003c/a\u003e\n\u003ca href=\"#/page/hiccup\"\u003eHiccup\u003c/a\u003e\n\u003c/div\u003e\n```\n\n  + **Line 11 (query):** creates the div with the two classes flex and flex-col, that div closes in **line 15** (**4** in the html)\n\n  + **Line12:** is interesting _clojure_, it loops over _result_, and every single value is stored in _page_\n\n  + **Line 13:** is the most complex Hiccup line so far:\n\n    + `[:a {:href (str \"#/page/\" page)} (clojure.string/capitalize page)]`\n\n  + which translates to:\n\n    + `\u003ca href=\"#/page/hiccup\"\u003eHiccup\u003c/a\u003e`\n\n  + And if you look carefully, they look very much alike:\n\n    + The whole thing is wrapped in an `\u003ca\u003e` -\u003e `[:a .... ]`\n\n    + Then you have the address `href=\"#/page/hiccup\"` -\u003e `(str \"#/page/\" page)`, which is Clojure for: **str** returns a string, in our case it concatenates (glues together)  `\"#/page/\"` and the value of `page`.\n\n    + Last you have the visible part of the link `Hiccup` -\u003e `(clojure.string/capitalize page)`, which is not hard to guess, it capitalizes the value of `page`.\n\n    + **Note:** if you ever use this code, and `page` is a journal-page (which is a bunch of numbers), the whole thing will fail, so don't capitalize numbers, they don't like that.\n\n  + And this is what it looks like:\n\n    + query-table:: false\n#+BEGIN_QUERY\n{:title [:b \"All pages with a \" [:em \"programming\"] \" tag\"]\n :query [:find ?name\n :in $ ?tag\n :where\n  [?t :block/name ?tag]\n  [?p :block/tags ?t]\n  [?p :block/name ?nam[[keyword[[keywords]]]]\n :inputs [\"programming\"]\n :view (fn [result]\n\t         [:div.flex.flex-col\n\t          (for [page result]\n\t            [:a {:href (str \"#/page/\" page)} (clojure.string/capitalize page)]\n                )\n              ]\n         )}\n#+END_QUERY\n\n### Table views, hiccup is just like good-looking html\n\n  + query-table:: false\n```clojure\n#+BEGIN_QUERY\n{:title [:h3 \"Programming languages used in Logseq\"]\n :query [:find (pull ?p [*])\n      :where\n      [page-tags ?p #{\"programming\"}]\n       ]\n:view (fn [row[[keywords]] [:table \n [:thead \n  [:tr \n   [:th \"Page\"] \n   [:th \"Language\"]\n   [:th \"Difficulty\"] ] ] \n [:tbody \n(for [r row[[keywords]] [:tr \n   [:td [:a {:href (str \"#/page/\" (get r :block/name))} (clojure.string/capitalize (get r :block/name))]] \n   [:td (get-in r [:block/properties :languag[[keyword[[keywords]]])]\n   [:td (get-in r [:block/properties :difficult[[keyword[[keywords]]])] ])\n   ]]\n)\n:query-table false\n}\n#+END_QUERY\n```\n\n    + The result:\n\n      + #+BEGIN_QUERY\n{:title [:h3 \"Programming languages used in Logseq\"]\n :query [:find (pull ?p [*])\n      :where\n      [page-tags ?p #{\"programming\"}]\n       ]\n:view (fn [row[[keywords]] [:table \n [:thead \n  [:tr \n   [:th \"Page\"] \n   [:th \"Language\"]\n   [:th \"Difficulty\"] ] ] \n [:tbody \n(for [r row[[keywords]] [:tr \n   [:td [:a {:href (str \"#/page/\" (get r :block/name))} (clojure.string/capitalize (get r :block/name))]] \n   [:td (get-in r [:block/properties :languag[[keyword[[keywords]]])]\n   [:td (get-in r [:block/properties :difficult[[keyword[[keywords]]])] ])\n   ]]\n)\n:query-table false\n}\n#+END_QUERY\n\n## Fun things to do with hiccup\n\n`[:audio {:controls true :src \"your audio file path here.mp3\"}] ` Add an audio file to a page\n\n### Additional resources\n\n  + [Hiccup Tip[[keywords]](https://ericnormand.me/mini-guide/hiccup-tips)\n\n  + [Tutorial on Medium](https://medium.com/makimo-tech-blog/hiccup-lightning-tutorial-6494e477f3a5)\n\n  + [rkn.io - Clojure Cookbook: Templating with Hiccup](https://web.archive.org/web/20161212035126/http://www.rkn.io/2014/03/13/clojure-cookbook-hiccup/)",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/How-and-why-to-tag-your-Daily-Notes": {
    "title": "How and why to tag your Daily Notes",
    "content": "### About resurfacing information from your Daily Notes\n\n  + During the day I run into many interesting topics, tweets, posts on Reddit, thoughts from books, too many to keep track of. I keep _everything_ that I _might_ want to use later, some people are picky, I'm not. Not being picky means I don't have to make any decisions _right now_ -\u003e which reduces [[friction]].\n\n  + If not tagged, the daily note becomes a black hole where information just disappears. There is just {{\u003c logseq/mark \u003e}}too much information to be useful.{{\u003c / logseq/mark \u003e}}\n\n\n  + Tags help to create _buckets_ of slightly related items. But, Ahrens writes in __How to Take Smart Notes__ that {{\u003c logseq/mark \u003e}}tags \"should be chosen carefully and sparsely\"{{\u003c / logseq/mark \u003e}} (otherwise you move the problem from _too many daily notes_ to _too many tags_).\n\n  + Don't use tags as a filing-system, _tag with the output, or end-use in mind_. When do I want to find this note again, **not**: this belongs here.\n\n  + Tags are effectively a filter. You can use simple queries to {{\u003c logseq/mark \u003e}}find information you need, when you need it{{\u003c / logseq/mark \u003e}}:\n\n  + A query like: `{{query (and [[tags and keyword]] [[@Andy Matuschak]] )}}`, produces:\n\n![image.png](/assets/image_1650711734627_0.png)\n\n### Technical background\n\n  + In [logseq](/page/logseq) tags and links are technically treated the same, but in practical use they are not the same:\n\n    + **tags** are a system of classification\n\n    + **links** are an API to a note -\u003e easy linkable nodes\n\n      + [Evergreen note titles are like API](https://notes.andymatuschak.org/z3XP5GRmd9z1D2qCE7pxUvbeSVeQuMiqz9x1C)\n\n### Links and references\n\n  + [TfT Hacker - Exploring Tools for Thought and PKM on Twitter: \"1/ Let us share best practices for using #Tags By the way this is not a question for any specific tool, rather a broad PKM discussion. The concept of #tags has been around for years now in many products. They exist in @evernote, @RoamResearch, @obsdmd, @logseq, @todoist, etc.\" / Twitter](https://twitter.com/TfTHacker/status/1385503759451705347)\n\n  + [Better Tagging Practices for PKM](https://elaptics.co.uk/journal/better-practices-tagging-pkm/)",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/Hugo": {
    "title": "Hugo",
    "content": "The plan is to collect useful snippets and code-examples to help creating and maintaining a [pkm](/page/pkm) in Hugo (and posibly [Logseq](/page/Logseq)).\n\n### Automating import\n\nTo import pages from [logseq](/page/logseq):\n\n\n```bash\n#!/usr/bin/env bash\n\nBLOG=$HOME/Documents/QWxleA.github.io\nNOTES=$BLOG/content/notes\nASSETS=\"$BLOG/content/notes/assets\"\nHUGOASSETS=$BLOG/static/assets\n\nSTARTPAGE=\"$NOTES/Start here.md\"\n\nZIP=$HOME/Downloads/publicExport.zip\n\nexplode() {\n    # rm $NOTES/*.md \n    unzip -o -d $NOTES $ZIP\n    if [ -d \"$ASSETS\"  ]; then\n        for a in $ASSETS/*; do \n            mv \"$a\" $HUGOASSETS\n        done\n        rmdir \"$ASSETS\"\n    fi\n    # FIXME\n    if [ -f \"$STARTPAGE\" ]; then\n        mv \"$STARTPAGE\" \"$BLOG/content/_index.md\"\n        #FIXME relative path?\n        gsed -i \"s@relref \\\"@relref \\\"\\/notes\\/@g\" \"$BLOG/content/_index.md\"\n    fi\n}\n\nusage() { echo \"Usage: $0 [-s \u003c45|90\u003e] [-p \u003cstring\u003e]\" 1\u003e\u00262; exit 1; }\n\nwhile getopts \"lx\" o; do\n    case \"${o}\" in\n        l)\n            unzip -v $ZIP\n            exit\n            ;;\n        x)\n            explode\n            exit\n            ;;\n        *)\n            usage\n            ;;\n    esac\ndone\nshift $((OPTIND-1))\n\nusage\n```\n\n### Makefile to simplify working with Hugo\n\nMakefiles are simple, just type `make`\n\n\n```makefile\nSHELL := /bin/bash\n.POSIX:\n.PHONY: push update watch\nall: help\n\nhelp: ## Show this help\n\t@egrep -h '\\s##\\s' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-20s\\033[0m %s\\n\", $$1, $$2}'\n\npush: ## Push pages to github / upstream\n\tgit push origin master\n\nupdate: ## Add new items / prepare to push upstream\n\thugo\n\tgit add .\n\nwatch: ## Run the local development server\n\thugo --buildDrafts --watch server --disableFastRender --ignoreCache\n\nimport: ## Import latest Logseq pages\n\t./scripts/export-blog -x\n```",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/Hugo-testpage": {
    "title": "Hugo - testpage",
    "content": "# Hugo testpage\n\n  + This is a testpage, this is the kind of page you would store in Logseq, to be exported to Hugo\n\n  + This is just a second paragraph.\n\n  + ## This should be another headline\n\n    + With some text\n\n    + And some more\n\n    + ### Headline 3\n\n      + Lorem lipsum\n\n      + Lipsum lorum\n\n    + ### Headline 4\n\n      + Lorem lipsum\n\n      + Lipsum lorum\n\n  + ## Markdown thingies\n\n    + This is **bold text is bold**\n\n    + _Cursif text_ is obviously not bold\n\n    + No idea what to {{\u003c logseq/mark \u003e}}do with highlighted text{{\u003c / logseq/mark \u003e}}\n\n    + ### Links\n\n      + [Links and Cross References | Hug[[keyword[[keywords]]](https://gohugo.io/content-management/cross-references/)\n\n      + External links [Front Matter | Hug[[keyword[[keywords]]](https://gohugo.io/content-management/front-matter/) should just carry over\n\n      + But internal links to [[logseq] should be translated as `[logseq]({{\u003c ref \"logseq\" \u003e}})`\n\n    + ### Code blocks\n\n      + Code blocks are the most complicated part:\n\n        + `[this is a simple code bloc[[keyword[[keywords]]]`\n\n```clojure\n[?b :block/name ?nam[[keyword[[keywords]]]\n```\n\n## More testing\n\nLet's look at an image:\n\n  + But not on the main level\n\n    + But in a sub-block\n\n![test-imag[[keyword[[keywords]]](/assets/steal-1.png)\n\n{{\u003c logseq/orgQUOTE \u003e}}This is a quote{{\u003c / logseq/orgQUOTE \u003e}}\n\n{{\u003c logseq/orgNOTE \u003e}}This is a note{{\u003c / logseq/orgNOTE \u003e}}\n\n{{\u003c logseq/orgTIP \u003e}}This is a tip{{\u003c / logseq/orgTIP \u003e}}\n\n{{\u003c logseq/orgIMPORTANT \u003e}}This is important{{\u003c / logseq/orgIMPORTANT \u003e}}\n\n{{\u003c logseq/orgCAUTION \u003e}}Caution here{{\u003c / logseq/orgCAUTION \u003e}}\n\n{{\u003c logseq/orgPINNED \u003e}}This is pinned{{\u003c / logseq/orgPINNED \u003e}}\n\n{{\u003c logseq/orgWARNING \u003e}}This is a warning{{\u003c / logseq/orgWARNING \u003e}}\n\n{{\u003c logseq/orgEXAMPLE \u003e}}This is an example{{\u003c / logseq/orgEXAMPLE \u003e}}",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/Streaming-to-a-chromecast": {
    "title": "Streaming to a chromecast",
    "content": "My mom complained about an English only TV series on Disney+. What's a helpful son to do?\n\nAs it happens, streaming to a Chromecast is not hard, but sending subtitles to it seems to be all but impossible. So, hardcoded subs it is (Just like the nineties, how retro!).\n\n## Step by step\n\n  + This was the easiest way to get some subtitled videos on TV:\n+ Take an English only video file, from _somewhere_ on the  internet (exercise left to the reader.)\n+ Find subtitles, cannot find anything in Dutch, find in English, easy to do.\n+ Translate with Google translate (surprisingly good, Ulysses this tv-series is not, but still, happily surprised).\n+ The timings are often wrong. [SubShifter - Online SRT Subtitle Resync Tool](https://subshifter.bitsnbites.eu/) is a good tool. I just use VLC to find when people start to talk and sync with this. The couple of times I've done this it was just to find a correct start.\n+ Next the key to the whole conundrum: [HandBrake: Open Source Video Transcode [[keywords]] (https://handbrake.fr/). This app has been around for years, but is still actively developed and relatively easy to use.\n+ A good alternative is [Subler](https://subler.org/), it is *way* faster, but cannot hardcode subs, so  for this Handbrake is the obvious choice.\n\n  + ### Handbrake\n\n    + To setup Handbrake for encoding on an M1, you need to use the correct settings (the app is universal):\nConfiguration: **Video** \u003e **H.265 (VideoToolbox)** \u0026 **Chromecast 1080p**\n\n![handbrake.png](/assets/handbrake_1649418443446_0.png)\n\n    + These settings cut the encoding time in half (still _not_ instantaneous). Next, add everything to the queue and get something to eat.\n\n### Playback ‚Äî attempt 1\n\n  + The easiest way to send a video file to a Chromecast is using the Chrome Browser:\n+ Serve files: `python3 -m http.server 8080`+\n+ Open in Google Chrome+\n+ `‚´∂` \u003e **Cast** \u003e **TV (Chromecast)**, done+\n\n  + Worked well, but no way I get my mom to run a local webserver.\n\n### Playback ‚Äî attempt 2\n\n  + VLC is a decent player, and it's _old_, so people are bound to have used it:\n+ Use VLC to stream, open file\n+ Then **Playback** \u003e **Renderer** \u003e **TV (Chromecast)**",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/building-a-digital-garden-with-Logseq-and-Hugo": {
    "title": "building a digital garden with Logseq and Hugo",
    "content": "We, as people, are social animals. We live together, we work together, we relax together, but what about *learning* together? In these days of global pandemics and, be honest, living inside our digital tools we have slowly gone back to being not-very-social. [Digital garden[[keywords]]([digital garden](/page/digital garden)) are one way to overcome this *modern ill*: Learning and building/creating in such a way that it is easy for others to see and/or comment on what you do and learn.\n\nAt the same time, being too busy with the *technical part* will detract from doing any {{\u003c logseq/mark \u003e}}learning{{\u003c / logseq/mark \u003e}}, so it should be simple to go *from* your [system](/page/pkm) where you keep your notes/keep track of what you learn, *to* a website. With the help of a plugin it is easy to export all your public pages. Combine this with a [[hug[[keyword[[keywords]]]] theme that *knows* about back-links and other [logseq](/page/logseq) specific tricks, you can now start building your own [garden](/page/digital garden).\n\n## Preparing your pages\n\n  + Logseq has a special setting for pages that are ready for export, in the header of your page should be set: `public:: true` (notice the double colon!). It can also be set from the dropdown menu.\n\n  + Next, just export all the pages for [[hug[[keyword[[keywords]]]] with the plugin.\n\n  + {{\u003c logseq/orgIMPORTANT \u003e}}[[hug[[keyword[[keywords]]]] gets upset if pages are referenced that do not actually exist, so be careful that all the links referenced in a page are also exported.{{\u003c / logseq/orgIMPORTANT \u003e}}\n\n## Preparing Hugo\n\n  + Hugo is a general purpose blogging software, not specifically for[digital garden[[keywords]]( [digital garden](/page/digital garden)) or even [logseq](/page/logseq). So for it to be usefula as a garden we need to add some functionality. For starters, backlinks:\n\n```html\n{{ $re := $.File.BaseFileName }}\n{{ $backlinks := slice }}\n{{ range where .Site.RegularPages \"Type\" \"page\" }}\n   {{ if and (findRE $re .RawContent) (not (eq $re .File.BaseFileName)) }}\n      {{ $backlinks = $backlinks | append . }}\n   {{ end }}\n{{ end }}\n\n{{ if gt (len $backlinks) 0 }}\n  \u003caside\u003e\n    \u003ch3\u003eBacklinks\u003c/h3\u003e\n    \u003cdiv class=\"backlinks\"\u003e\n      \u003cul\u003e\n       {{ range $backlinks }}\n          \u003cli class=\"capitalize\"\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e\n       {{ end }}\n     \u003c/ul\u003e\n    \u003c/div\u003e\n  \u003c/aside\u003e\n{{ else  }}\n  \u003caside\u003e\n    \u003ch4\u003eNo notes link to this note\u003c/h4\u003e\n  \u003c/aside\u003e\n{{ end }}\n\n\u003caside class=\"related\"\u003e\n  {{ $related := .Site.RegularPages.Related . | complement $backlinks | first 3 -}}\n  {{ with $related -}}\n  \u003ch3\u003eslightly related\u003c/h3\u003e\n  \u003cul\u003e\n  {{ range . -}}\n  \u003cli class=\"capitalize\"\u003e\u003ca href=\"{{ .RelPermalink }}\"\u003e{{ .Title }}\u003c/a\u003e\u003c/li\u003e\n  {{ end -}}\n  \u003c/ul\u003e\n  {{ end -}}\n\u003c/aside\u003e\n```\n\n  + This snippet will go over all pages, and find out if any of them link to this one.\n\nThat's as far as I've gotten so far. Not sure what else is needed. More to come...",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/daily-note": {
    "title": "daily note",
    "content": "## Notes\n\n  + The habit of starting _all_ writing in the daily note reduces friction and stress\n\n    + It is just easy, you don't have to think where stuff goes. Journaling in itself reduces stress\n\n    + If I like it I can put it in more permanent place\n\n    + Play-space, solves high barrier. Prototype and just write.\n\n  + Logging progress in the daily journal creates the possibility to see progress\n\n    + Logging -\u003e seeing -\u003e improvement\n\n  + For daily notes to have _lasting value_ they must be tagged and [linked]([[linking]])\n\n    + If not tagged, the daily note becomes a black hole where information just disappears. There is just {{\u003c logseq/mark \u003e}}too much information to be useful.{{\u003c / logseq/mark \u003e}}\n    + information disappears if it is not reused again, later\n\n  + Use [spaced repetition](/page/spaced repetition) for ideas noted in the daily note that have no current links?\n\n## References and links\n\n  + [How and why to tag your Daily Notes](/page/How and why to tag your Daily Notes)\n\n  + [How I Use Logseq to Take Notes and Organize My Life | by Shu Omi | Shu Omi‚Äôs Blog | Medium](https://medium.com/my-learning-journal/how-i-use-logseq-to-take-notes-and-organize-my-life-3669a75eb224) #[spaced repetition](/page/spaced repetition) #[[highlights-import]] [[@Shu Omi]]\n\n  + [Daily working log](https://notes.andymatuschak.org/z28QkpK3vRKQTacjFDfGYBhCXHqHuVWJzny9)",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/datalog": {
    "title": "datalog",
    "content": "**Note:** This place is currently a placeholder, [hugo](/page/hugo) gets upset if links are missing.\n\n\nFor now, just read the references. WIP: [[Intro to Datalog]]\n\n## References\n\n  + Go-to links for Datalog:\n+ [Learn Datalog Today!](http://www.learndatalogtoday.org/chapter/8)\n+ [Datomic Queries and Rules | Datomic](https://docs.datomic.com/on-prem/query/query.html#query-examples)\n+[Datalog in Javascript](https://www.instantdb.dev/essays/datalogjs)",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/digital-garden": {
    "title": "digital garden",
    "content": "**Note:** This place is currently a placeholder, [hugo](/page/hugo) gets upset if links are missing.\n\n\n## References\n\n  + [Building a digital garden](https://tomcritchlow.com/2019/02/17/building-digital-garden/)\n\n  + [A Brief History \u0026 Ethos of the Digital Garden](https://maggieappleton.com/garden-history)\n\n  + Also: [MaggieAppleton/digital-gardeners: Resources, links, projects, and ideas for gardeners tending their digital notes on the public interweb[[keywords]](https://github.com/MaggieAppleton/digital-gardeners/)\n\n  + And: [(2) Maggie Appleton üß≠ on Twitter: \"Nerding hard on digital gardens, personal wikis, and experimental knowledge systems with @_jonesian today. We have an epic collection going, check these out... 1. @tomcritchlow's Wikifolders: https://t.co/QnXw0vzbMG https://t.co/9ri6g9hD93\" / Twitte[[keyword[[keywords]]](https://twitter.com/Mappletons/status/1250532315459194880)",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/domain-specific-language": {
    "title": "domain-specific language",
    "content": "A domain-specific language (DSL) is a computer language specialized to a particular application domain ‚Äî [Wikipedia](https://en.wikipedia.org/wiki/Domain-specific_language)\n\nA \"language-within-a-language\"",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/javascript": {
    "title": "javascript",
    "content": "[Logseq](/page/Logseq) plugins are developed in Javascript and that is the reason I have been reading more on how to use it well. Here you will find mostly notes related to plugin development.\n\nSee also [[typescript]]",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/logseq": {
    "title": "logseq",
    "content": "**Note:** This place is currently a placeholder, [hugo](/page/hugo) gets upset if links are missing.\n  + [:span {:style {:color \"blue\"}} \"datalog\"] **\u003e** Note: This... **\u003e\u003e** For now just read the reference. WIP: Intro to datalog, which will be... #ttt\n\n  + [:span {:style {:color \"blue\"}} \"digital garden\"] **\u003e** Note: This... **\u003e\u003e** Gardens are green with plants in them. Also pollen, and insects... #ttt\n\n  + [:span {:style {:color \"blue\"}} \"pkm\"] **\u003e** Note: This... **\u003e\u003e** PKM stands for Pretty Kool Machinery, it is what all the cool people on... #ttt\n\n  + \n\nIn the future this page will be a collection of useful links to learn how to more effectively use Logseq.\n\nRelated: [javascript](/page/javascript) for plugins, [datalog](/page/datalog) for queries.\n\n![logseq-intro.jpg](/assets/logseq-intro_1644490845657_0.jpg)",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/pkm": {
    "title": "pkm",
    "content": "\u003e Personal knowledge management (PKM) is a process of collecting information that a person uses to gather, classify, store, search, retrieve and share knowledge in their {{\u003c logseq/mark \u003e}}daily activities{{\u003c / logseq/mark \u003e}} (Grundspenkis 2007) and the way in which these processes support work activities (Wright 2005). It is a response to the idea that knowledge workers need to be responsible for their own {{\u003c logseq/mark \u003e}}growth and learning{{\u003c / logseq/mark \u003e}} (Smedley 2009). It is a {{\u003c logseq/mark \u003e}}bottom-up approach{{\u003c / logseq/mark \u003e}} to knowledge management (KM) (Pollard 2008).\n\n**Note:** This place is currently a placeholder, [hugo](/page/hugo) gets upset if links are missing.",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/pomodoro": {
    "title": "pomodoro",
    "content": "The Pomodoro Technique is a [time management](/page/time management) method developed by Francesco Cirillo in the late 1980s. It {{\u003c logseq/mark \u003e}}uses a timer to break work into intervals{{\u003c / logseq/mark \u003e}}, traditionally {{\u003c logseq/mark \u003e}}25 minutes{{\u003c / logseq/mark \u003e}} in length, separated by short breaks. Each interval is known as a pomodoro, from the Italian word for 'tomato', after the tomato-shaped kitchen timer Cirillo used as a university student. ‚Äî [Pomodoro Technique - Wikipedia](https://en.wikipedia.org/wiki/Pomodoro_Technique)\n\nWhy does it work (for me)?\n\n  + Easy to start, 25 minutes is small enough to be negligible, while long enough to get something done.",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/procrastination": {
    "title": "procrastination",
    "content": "**relevant notes**:\n\n  + [[motivation]] [[addiction]]\n\n**definition**: Procrastination is the action of {{\u003c logseq/mark \u003e}}unnecessarily and voluntarily delaying{{\u003c / logseq/mark \u003e}} or postponing something {{\u003c logseq/mark \u003e}}despite knowing that there will be negative consequences{{\u003c / logseq/mark \u003e}} for doing so. Oftentimes, it is a habitual human behaviour. ‚Äî [Procrastination - Wikipedia](https://en.wikipedia.org/wiki/Procrastination)\n\n**Criteria**: it must be counterproductive, needless, and delaying",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/query-views": {
    "title": "query views",
    "content": "Queries are build in a language called [datalog](/page/datalog), the presentation is done using [Hiccup](/page/Hiccup). Mixed in is Clojure, of which I know none.\n\n### Debugging\n\n  + Usually I add one of these to view raw data from a query before I add custom hiccup view\n\n  + `:view (fn [result] (for [r result] [:pre (pr-str r)]))`\n\n  + `:view (fn [result] (pr-str result))`\n\n### Properties\n\n```clojure\n #+BEGIN_QUERY\n{\n :query [:find (pull ?b [{:block/page\n     [:block/name :block/journal-da[[keyword[[keywords]]]} :block/propertie[[keywords]])\n      :where\n      [?b :block/properties ?bprop[[keywords]]\n      [(get ?bprops :distanse \"nil\") ?b[[keywords]]\n      [(not= ?bs \"nil\")]]\n:result-transform (fn [result]\n                     (sort-by (fn [[[keywords]]\n                        (get-in s [:block/page :block/journal-da[[keyword[[keywords]]])) (fn [a b] (compare b a)) result)) \n:view (fn [row[[keywords]] [:table \n [:thead \n  [:tr \n   [:th \"Dato\"] \n   [:th \"Distanse\"]\n   [:th \"√òkt\"] ] ] \n [:tbody \n(for [r row[[keywords]] [:tr \n   [:td (get-in r [:block/page :block/nam[[keyword[[keywords]]])] \n   [:td (get-in r [:block/properties :distans[[keyword[[keywords]]])]\n   [:td (get-in r [:block/properties :√∏kt])] ])\n   ]]\n)\n}\n#+END_QUERY\n ```\n\n### Image links\n\n```clojure\n #+BEGIN_QUERY\n{:title [:h4 \"Image gallery\"]\n:query\n [:find (pull ?b [*])\n  :in $ ?pattern ?current-page\n  :where\n  [?b :block/content ?c]\n  [?p :block/name ?current-pag[[keyword[[keywords]]]\n  [?b :block/page ?p]\n  [(re-pattern ?pattern) ?q]\n  [(re-find ?q ?c)]]\n :inputs [\"^!.*https://www.dropbox.com/s/\" :current-pag[[keyword[[keywords]]]\n:result-transform (fn [result]\n                     (sort-by (fn [h]\n                                (get h :db/id)) result))\n:view (fn [result]\n         (when (seq result)\n           [:div {:class \"flex flex-row flex-wrap py-2\"}\n            (for [{:block/keys [uuid content]} result]\n              [:span {:width \"4rem\" :key uuid :class \"flex flex-col items-center mr-2 mb-2\"}\n               [:a {:href (str \"#/page/\" uuid)} [:img {:style {:width \"4rem\"} :src (re-find (re-pattern \"https://.*?(?=(?:\\\\))|$)\") (str content))}]]\n               ]\n              )]))\n}\n#+END_QUERY\n ```\n\n### Find all unlinked pages\n\n  + link:: [Discor[[keyword[[keywords]]](https://discord.com/channels/725182569297215569/743139225746145311/832512082289229824)\ndate:: [[2021-04-16]]\n\n```clojure\n    #+BEGIN_QUERY\n\t  {:title \"Orphan pages\"\n\t   :query [:find ?name\n\t           :where\n\t           [?p :page/name ?nam[[keyword[[keywords]]]\n\t           (not\n\t            [?b :block/ref-pages ?p1]\n\t            [?b :block/page ?p2]\n\t            (or [?p1 :page/name ?nam[[keyword[[keywords]]]\n\t                [?p2 :page/name ?nam[[keyword[[keywords]]]))]\n\t   :view (fn [result]\n\t           [:div.flex.flex-col\n\t            (for [page result]\n\t              [:a {:href (str \"#/page/\" page)} (clojure.string/capitalize page)])])\n\t  :collapsed? true}\n\t  #+END_QUERY\n```\n\n### Query to show a random page\n\n  + link:: [Discor[[keyword[[keywords]]](https://discord.com/channels/725182569297215569/743139225746145311/867375290396311633)\ndate:: [[2021-07-21]]\n\n```clojure\n\t #+BEGIN_QUERY\n\t  {:title \"Give me a random page!!!\"\n\t   :query [:find ?name\n\t           :where\n\t           [?b :block/name ?nam[[keyword[[keywords]]]]\n\t   :result-transform (fn [result]\n\t                       [(rand-nth result)])\n\t  :view (fn [result]\n\t         [:div.flex.flex-col\n\t          (for [page result]\n\t            [:a {:href (str \"/#/page/\" page)} (clojure.string/capitalize page)])])\n\t   :collapsed? true}\n\t  #+END_QUERY\n```\n\n### Query to create a table with page and todo count\n\n  + link:: [Discor[[keyword[[keywords]]](https://discord.com/channels/725182569297215569/743139225746145311/921337299164356658)\ndate:: [[2021-12-17]]\n\n```clojure\n   #+BEGIN_QUERY \n\t  {:title \"TODO by page\"\n\t    :query     [:find (pull ?b [:block/marker :block/parent {:block/page\n\t       [:db/id :block/nam[[keyword[[keywords]]]}])\n\t    :where\n\t             [?b :block/marker ?marke[[keyword[[keywords]]]\n\t             [(= \"TODO\" ?marker)] \n\t    ]\n\t  :result-transform (fn [result]\n\t                          (map (fn [[key valu[[keyword[[keywords]]]] {:page (get key :block/name) :count (count value)}) (group-by :block/page result))\n\t                  )\n\t  :view (fn [row[[keywords]] [:table \n\t   [:thead \n\t    [:tr \n\t     [:th \"Page\"] \n\t     [:th \"Count\"] ] ] \n\t   [:tbody \n\t  (for [r row[[keywords]] [:tr \n\t     [:td [:a {:href (str \"#/page/\" (get r :page))} (get r :page)] ] \n\t     [:td (get r :count)] ])\n\t     ]]\n\t  )\n\t  }\n\t  #+END_QUERY\n```\n\n### Grouping\n\n```clojure\n #+BEGIN_QUERY \n{:title \"TODO by page\"\n  :query     [:find (pull ?b [:block/scheduled :block/marker :block/parent {:block/page\n     [:db/id :block/nam[[keyword[[keywords]]]}])\n  :where\n           [?b :block/scheduled _]\n           [?b :block/marker ?marke[[keyword[[keywords]]]\n           [(= \"TODO\" ?marker)] \n  ]\n:result-transform (fn [result]\n                        (map (fn [[key valu[[keyword[[keywords]]]] {:page key :count (count value)}) (group-by :block/scheduled result))\n                )\n:view (fn [row[[keywords]] [:table \n [:thead \n  [:tr \n   [:th \"Page\"] \n   [:th \"Count\"] ] ] \n [:tbody \n(for [r row[[keywords]] [:tr \n   [:td (get r :page)] \n   [:td (get r :count)] ])\n   ]]\n)\n}\n#+END_QUERY\n ```\n\n### View\n\n```clojure\n#+BEGIN_QUERY\n{:title [:h2 \"Programming languages list\"]\n :query [:find (pull ?b [*])\n       :where\n       [?b :block/properties ?p]\n       [(get ?p \"type\") ?t]\n       [(= \"programming_lang\" ?t)]]\n :view (fn [result]\n       (when (seq result)\n         (let [blocks (flatten result)]\n           [:div.table-wrapper\n            [:table.table-auto\n             [:thead\n              [:tr\n               [:th {:width \"20%\"} \"Name\"]\n               [:th {:width \"20%\"} \"Creator\"]\n               [:th {:width \"60%\"} \"Description\"]]]\n             [:tbody\n              (for [{:block/keys [title propertie[[keywords]]} block[[keywords]]\n                [:tr\n                 [:td (second (:url (second (first title))))]\n                 [:td (get properties \"creator\")]\n                 [:td (get properties \"description\")]])]]])))\n }\n#+END_QUERY\n```\n\n### Group by\n\n```clojure\n #+BEGIN_QUERY\n{:title \"Group by\"\n    :query [:find (pull ?h [*])\n            :in $\n            :where\n            [?h :block/marker ?marke[[keyword[[keywords]]]\n            [(contains? #{\"NOW\" \"DOING\"} ?marker)]\n            ]\n:result-transform (fn [result]\n                   (group-by :block/scheduled result))  \n:view (fn [result] (for [r result] [:div \n      [:div.text-xl (str \"Scheduled: \" (key r))]\n      (for [b (val r)] \n        [:div.ml-4 (get b :block/content)]\n      )\n ]\n))\n   }\n#+END_QUERY\n ```",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/spaced-repetition": {
    "title": "spaced repetition",
    "content": "Spaced repetition, usually used to memorize information, can also be used as a study workflow #rephrase. How? #card #seedling\n+ Add `#card #seedling` to a particular block that you want to revisit and study further.\n\n### Linked references\n\n[Evergreen note maintenance approximates spaced repetition](https://notes.andymatuschak.org/z6yfTwYekzvBkVjeH7WBUrSAJhyGTMYDAyYW7) -\u003e expand\n+ We learn something not only when we connect it to prior knowledge and try to understand its broader implications (elaboration), but also when we try to retrieve it at different times (spacing) in different contexts (variation), ideally with the help of chance (contextual interference) and with a deliberate effort (retrieval). The slip-box not only provides us with the opportunity to learn in this proven way, it forces us to do exactly what is recommended just by using it.",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  },
  "/page/time-management": {
    "title": "time management",
    "content": "Always been complicated. What seems to work is several [pomodoros](/page/pomodoro), but not more, why so few?\n\nMajor problem is [procrastination](/page/procrastination), what can be done?\n\nDifferent techniques:\n\n  + Time blocking\n\n  + [pomodoro](/page/pomodoro) technique ‚Äî _gently_ kicking yourself into action\n\ntaking a break",
    "lastmodified": "2022-04-28T20:50:14+02:00",
    "tags": null
  }
}