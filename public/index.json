[{"categories":null,"contents":"From a question on the Logseq forum: Creating a Resonance Calendar from queries\nA resonance calendar is taken from a video created by Ali Abdaal How I use Notion as a Resonance Calendar - YouTube. It\u0026rsquo;s a list of interesting (resonating) resources, added to your notes. Resources can be one of:\n Movies Podcasts Articles  How to implement this in logseq?\n   Step 1 — gather a list of items  query-sort-by:: rating query-sort-desc:: false query-properties:: [:page :type :rating :tags] #+BEGIN_QUERY {:title [:h2 \u0026#34;Resonance list 1\u0026#34;] :query [ :find (pull ?page [*]) :where [?page :page/properties ?props] [(get ?props :type) ?type] [(contains? #{\u0026#34;movie\u0026#34; \u0026#34;article\u0026#34; \u0026#34;book\u0026#34;} ?type)] ]} #+END_QUERY This is a fairly straight forward query:\n line 9: take the page properties of ?page (set in line 3) and store them in ?props line 10: of all the different properties, take :type and store it in ?type line 11: check if ?type is one of: movie, article or book Done!  Important: book != [[book]]. Don\u0026rsquo;t use [[book]] in type.\n   Step 2 — remove some stuff we don\u0026amp;rsquo;t want to see  query-table:: true query-sort-by:: rating query-sort-desc:: true query-properties:: [:page :type :rating :tags] #+BEGIN_QUERY {:title [:h2 \u0026#34;Resonance list 2\u0026#34;] :query [ :find (pull ?page [*]) :where [?page :page/properties ?props] [(get ?props :type) ?type] [(contains? #{\u0026#34;movie\u0026#34; \u0026#34;article\u0026#34; \u0026#34;book\u0026#34;} ?type)] (not [(get ?props :rating) ?rating] [(= \u0026#34;[[1/10]]\u0026#34; ?rating)] ) ]} #+END_QUERY New are the line XX to XX\nline 8: a not statement, everything that matches this query will be excluded from the result\nline 9: again, a page property\nline 10: but this time we search for :rating\nline 11: and we match it with 1/10\nResult: same list, but without the ones rated 1/10\n   Step 2b — Only the bad stuff  For fun you can invert the search, only show the ones rated 1/10:\nquery-properties:: [:page :type :rating] #+BEGIN_QUERY {:title [:h2 \u0026#34;Resonance list 2b — all bad!\u0026#34;] :query [ :find (pull ?page [*]) :where [?page :page/properties ?props] [(get ?props :type) ?type] [(contains? #{\u0026#34;movie\u0026#34; \u0026#34;article\u0026#34; \u0026#34;book\u0026#34;} ?type)] [(get ?props :rating) ?rating] [(= \u0026#34;[[1/10]]\u0026#34; ?rating)] ]} #+END_QUERY This query is simpler then the previous one, and is implied, by default all lines should be true. Logseq is a very positive program 😄.\n   Step 3 — remove more bad ratings  It\u0026rsquo;s not just 1/10 that\u0026rsquo;s bad, so is 2/10, but adding that is not as simple as you would want:\nquery-sort-by:: rating query-sort-desc:: true query-properties:: [:page :type :rating :tags] #+BEGIN_QUERY {:title [:h2 \u0026#34;Resonance list 3\u0026#34;] :query [ :find (pull ?page [*]) :where [?page :page/properties ?props] [(get ?props :type) ?type] [(contains? #{\u0026#34;movie\u0026#34; \u0026#34;article\u0026#34; \u0026#34;book\u0026#34;} ?type)] (not [?page :page/properties ?props] [(get ?props :rating) ?rating] [(contains? #{ #{\u0026#34;1/10\u0026#34;} #{\u0026#34;2/10\u0026#34;} } ?rating)] ) ]} #+END_QUERY Notice line 14 the contains? statement is quite complicated. This is because 1/10 and 2/10 are really [[1/10]] and [[2/10]]. They\u0026rsquo;re not just text, they are searchable items. This is different from type in Resonance List 1.\n   Step 4 — remove by tag  But what if you would like to have a tag that shows how terrible the book or movie was?\nSimple, add tags:: [[terrible]] (or just terrible, if you never want to list them, just change it accordingly in the listing below)\nquery-properties:: [:page :type :title :rating :tags] query-table:: true #+BEGIN_QUERY {:title [:h2 \u0026#34;Resonance list 4 - final version\u0026#34;] :query [ :find (pull ?page [*]) :where [?page :page/properties ?props] [(get ?props :type) ?type] [(contains? #{\u0026#34;movie\u0026#34; \u0026#34;article\u0026#34; \u0026#34;book\u0026#34;} ?type)] [?page :page/name ?name] (not [(missing? $ ?page :page/name)]) (not [?page :block/tags [:block/name \u0026#34;terrible\u0026#34;]]) (not [?page :page/properties ?props] [(get ?props :rating) ?rating] [(contains? #{ #{\u0026#34;1/10\u0026#34;} #{\u0026#34;2/10\u0026#34;} } ?rating)] ) ]} #+END_QUERY New are the lines 12 to 14, we exclude [[terrible]] from our list.\nIf you want to add more tags, then look at Resonance List 3 how to do that.\n   Conclusion  Logseq\u0026rsquo;s search functionality is not as easy as one would wish for, but it is adaquate, and can be made to search for the data you\u0026rsquo;re interested in.\n","date":"Sep 06","permalink":"https://example.org/notes/resonance-lists-howto/","tags":["logseq"],"title":"resonance lists howto"},{"categories":null,"contents":"These notes I copied as reference\n   How to mount encrypted LVM logical volume – sleeplessbeastie\u0026amp;rsquo;s notes  Error, not matched: @\u0026gt; ## Excerpt@\nError, not matched: @\u0026gt; Some time ago, I have recovered an old hard drive only to learn that it contained encrypted LVM logical volume.@\n   Some time ago, I have recovered an old hard drive only to learn that it contained encrypted LVM logical volume.\n   Initial notes  These simple instructions will work on Ubuntu Vivid Vervet and Debian Jessie. Although, you do not need to activate LVM logical volumes on Ubuntu.\nPlease do not use graphical user interface utilities available in Ubuntu as these do not provide an easy way to safely remove encrypted LVM member.\n   Prerequisites  Install cryptsetup package to access LUKS encrypted volumes.\n$ sudo apt-get install cryptsetup\nInstall lvm2 package to use Logical Volume Manager.\n$ sudo apt-get install lvm2\n   Identify encrypted device  Identify encrypted device – /dev/sdb5 partition in this example.\n$ sudo lsblk -f /dev/sdb NAME FSTYPE LABEL UUID MOUNTPOINT sdb ├─sdb1 ext2 763b1a31-0a41-453c-aebb-8f28e45b19db ├─sdb2 └─sdb5 crypto\\_LUKS 92e4fc6c-eac0-434e-9d4c-316449a0f122 $ sudo file -s /dev/sdb5 /dev/sdb5: LUKS encrypted file, ver 1 \\[aes, xts-plain64, sha1\\] UUID: 92e4fc6c-eac0-434e-9d4c-316449a0f122    Open LUKS device  Open encrypted /dev/sdb5 device and set up encrypted_device mapping.\n$ sudo cryptsetup luksOpen /dev/sdb5 encrypted\\_device Enter passphrase for /dev/sdb5: \\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*    Identify volume group  Identify volume group – mint-vg in this example.\n$ sudo vgdisplay --short \u0026#34;mint-vg\u0026#34; 74.29 GiB \\[74.29 GiB used / 0 free\\]    List logical volumes  List logical volumes on identified mint-vg volume group.\n$ sudo lvs -o lv\\_name,lv\\_size -S vg\\_name=mint-vg LV LSize root 66.39g swap\\_1 7.89g    Activate logical volumes  Activate desired (root on mint-vg) volume group.\n$ sudo lvchange -ay mint-vg/root\nAlternatively, activate every logical volume on this volume group.\n$ sudo lvchange -ay mint-vg\nThis step will be performed automatically on Ubuntu.\n   Access encrypted file system  Create mount directory.\n$ sudo mkdir /media/some\\_mount\\_point\nAttach the encrypted file system.\n$ sudo mount /dev/mint-vg/root /media/some\\_mount\\_point\nFreely access encrypted file system and perform desired tasks.\nDetach the encrypted file system.\n$ sudo umount /dev/mint-vg/root\nYou can safely use graphical user interface utilities to perform this step.\n   Deactivate logical volumes  You can list active logical volumes on specified volume group using the following command.\n$ sudo lvs -S \u0026#34;lv\\_active=active \u0026amp;\u0026amp; vg\\_name=mint-vg\u0026#34; LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert root mint-vg -wi-a----- 66,39g Deactivate active volume group.\n$ sudo lvchange -an mint-vg/root\nAlternatively, deactivate every logical volume on this volume group.\n$ sudo lvchange -an mint-vg\n   Close LUKS device  Remove the encrypted_device mapping and wipe the key from kernel memory.\n$ sudo cryptsetup luksClose encrypted\\_device\nNow you can disconnect hard drive.\n","date":"Sep 03","permalink":"https://example.org/notes/accessing-encryped-lvm-logical-volumes/","tags":["linux"],"title":"Accessing encryped lvm logical volumes"},{"categories":null,"contents":"Notes:\nAccessing encryped lvm logical volumes\n","date":"Jan 01","permalink":"https://example.org/notes/elementary-os-btrfs-home/","tags":["elementaryos","wm"],"title":"elementary OS btrfs home"},{"categories":null,"contents":"       Title here Date here  Summary here   ","date":"Jan 01","permalink":"https://example.org/search/","tags":null,"title":"Search"},{"categories":null,"contents":"A thoroughly weird window-manager for Linux, written in haskell. The configuration is (completely functional) haskell script.\n   Links    home | xmonad - the tiling window manager that rocks\n  xmonad - Wikipedia\n  ","date":"Jan 01","permalink":"https://example.org/notes/xmonad/","tags":["xmonad","wm"],"title":"xmonad"},{"categories":["linux"],"contents":"[[xmonad]] keybindings\nuse git to make a branch, then merge everything back\n, (\u0026quot;M-d\u0026quot; , addName \u0026quot;Duplicate w to all ws\u0026quot; $ toggleCopyToAll) Error, not matched: @for video etc?@\nsubKeys \u0026quot;Workspaces \u0026amp; Projects\u0026quot; ( [ (\u0026quot;M-w\u0026quot; , addName \u0026quot;Switch to Project\u0026quot; $ switchProjectPrompt warmPromptTheme) , (\u0026quot;M-S-w\u0026quot; , addName \u0026quot;Shift to Project\u0026quot; $ shiftToProjectPrompt warmPromptTheme) , (\u0026quot;M-\u0026lt;Escape\u0026gt;\u0026quot; , addName \u0026quot;Next non-empty workspace\u0026quot; $ nextNonEmptyWS) , (\u0026quot;M-S-\u0026lt;Escape\u0026gt;\u0026quot; , addName \u0026quot;Prev non-empty workspace\u0026quot; $ prevNonEmptyWS) , (\u0026quot;M-`\u0026quot; , addName \u0026quot;Next non-empty workspace\u0026quot; $ nextNonEmptyWS) , (\u0026quot;M-S-`\u0026quot; , addName \u0026quot;Prev non-empty workspace\u0026quot; $ prevNonEmptyWS) , (\u0026quot;M-a\u0026quot; , addName \u0026quot;Toggle last workspace\u0026quot; $ toggleWS' [\u0026quot;NSP\u0026quot;]) ] ++ zipM \u0026quot;M-\u0026quot; \u0026quot;View ws\u0026quot; wsKeys [0..] (withNthWorkspace W.greedyView) -- ++ zipM \u0026quot;M-S-\u0026quot; \u0026quot;Move w to ws\u0026quot; wsKeys [0..] (withNthWorkspace W.shift) -- TODO: following may necessitate use of a \u0026quot;passthrough\u0026quot; binding that can send C- values to focused w ++ zipM \u0026quot;C-\u0026quot; \u0026quot;Move w to ws\u0026quot; wsKeys [0..] (withNthWorkspace W.shift) -- TODO: make following a submap ++ zipM \u0026quot;M-S-C-\u0026quot; \u0026quot;Copy w to ws\u0026quot; wsKeys [0..] (withNthWorkspace copy) ) ^++^ stack ghci --ghci-options -i\u0026quot;./src\u0026quot; src/MyWorkspaces.hs ","date":"Jan 01","permalink":"https://example.org/notes/xmonad-notes/","tags":["xmonad"],"title":"xmonad-notes"},{"categories":null,"contents":"See Home page\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n          ","date":"Jan 01","permalink":"https://example.org/about/","tags":null,"title":"⁉ About \u0026 ✉"}]